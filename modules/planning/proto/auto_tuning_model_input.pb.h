// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/auto_tuning_model_input.proto

#ifndef PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto
#define PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto 

namespace protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto
namespace apollo {
namespace planning {
namespace autotuning {
class PathPointwiseFeature;
class PathPointwiseFeatureDefaultTypeInternal;
extern PathPointwiseFeatureDefaultTypeInternal _PathPointwiseFeature_default_instance_;
class PathPointwiseFeature_BoundRelatedFeature;
class PathPointwiseFeature_BoundRelatedFeatureDefaultTypeInternal;
extern PathPointwiseFeature_BoundRelatedFeatureDefaultTypeInternal _PathPointwiseFeature_BoundRelatedFeature_default_instance_;
class PathPointwiseFeature_ObstacleFeature;
class PathPointwiseFeature_ObstacleFeatureDefaultTypeInternal;
extern PathPointwiseFeature_ObstacleFeatureDefaultTypeInternal _PathPointwiseFeature_ObstacleFeature_default_instance_;
class SpeedPointwiseFeature;
class SpeedPointwiseFeatureDefaultTypeInternal;
extern SpeedPointwiseFeatureDefaultTypeInternal _SpeedPointwiseFeature_default_instance_;
class SpeedPointwiseFeature_ObstacleFeature;
class SpeedPointwiseFeature_ObstacleFeatureDefaultTypeInternal;
extern SpeedPointwiseFeature_ObstacleFeatureDefaultTypeInternal _SpeedPointwiseFeature_ObstacleFeature_default_instance_;
class TrajectoryFeature;
class TrajectoryFeatureDefaultTypeInternal;
extern TrajectoryFeatureDefaultTypeInternal _TrajectoryFeature_default_instance_;
class TrajectoryPointwiseFeature;
class TrajectoryPointwiseFeatureDefaultTypeInternal;
extern TrajectoryPointwiseFeatureDefaultTypeInternal _TrajectoryPointwiseFeature_default_instance_;
}  // namespace autotuning
}  // namespace planning
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::planning::autotuning::PathPointwiseFeature* Arena::CreateMaybeMessage<::apollo::planning::autotuning::PathPointwiseFeature>(Arena*);
template<> ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* Arena::CreateMaybeMessage<::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature>(Arena*);
template<> ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature* Arena::CreateMaybeMessage<::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature>(Arena*);
template<> ::apollo::planning::autotuning::SpeedPointwiseFeature* Arena::CreateMaybeMessage<::apollo::planning::autotuning::SpeedPointwiseFeature>(Arena*);
template<> ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* Arena::CreateMaybeMessage<::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature>(Arena*);
template<> ::apollo::planning::autotuning::TrajectoryFeature* Arena::CreateMaybeMessage<::apollo::planning::autotuning::TrajectoryFeature>(Arena*);
template<> ::apollo::planning::autotuning::TrajectoryPointwiseFeature* Arena::CreateMaybeMessage<::apollo::planning::autotuning::TrajectoryPointwiseFeature>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace planning {
namespace autotuning {

enum PathPointwiseFeature_BoundRelatedFeature_CrossableLevel {
  PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_CROSS_FREE = 0,
  PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_CROSS_ABLE = 1,
  PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_CROSS_FORBIDDEN = 2
};
bool PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_IsValid(int value);
const PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_CrossableLevel_MIN = PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_CROSS_FREE;
const PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_CrossableLevel_MAX = PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_CROSS_FORBIDDEN;
const int PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_CrossableLevel_ARRAYSIZE = PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_CrossableLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_descriptor();
inline const ::std::string& PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_Name(PathPointwiseFeature_BoundRelatedFeature_CrossableLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_descriptor(), value);
}
inline bool PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_Parse(
    const ::std::string& name, PathPointwiseFeature_BoundRelatedFeature_CrossableLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PathPointwiseFeature_BoundRelatedFeature_CrossableLevel>(
    PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_descriptor(), name, value);
}
// ===================================================================

class PathPointwiseFeature_ObstacleFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature) */ {
 public:
  PathPointwiseFeature_ObstacleFeature();
  virtual ~PathPointwiseFeature_ObstacleFeature();

  PathPointwiseFeature_ObstacleFeature(const PathPointwiseFeature_ObstacleFeature& from);

  inline PathPointwiseFeature_ObstacleFeature& operator=(const PathPointwiseFeature_ObstacleFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PathPointwiseFeature_ObstacleFeature(PathPointwiseFeature_ObstacleFeature&& from) noexcept
    : PathPointwiseFeature_ObstacleFeature() {
    *this = ::std::move(from);
  }

  inline PathPointwiseFeature_ObstacleFeature& operator=(PathPointwiseFeature_ObstacleFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathPointwiseFeature_ObstacleFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathPointwiseFeature_ObstacleFeature* internal_default_instance() {
    return reinterpret_cast<const PathPointwiseFeature_ObstacleFeature*>(
               &_PathPointwiseFeature_ObstacleFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PathPointwiseFeature_ObstacleFeature* other);
  friend void swap(PathPointwiseFeature_ObstacleFeature& a, PathPointwiseFeature_ObstacleFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PathPointwiseFeature_ObstacleFeature* New() const final {
    return CreateMaybeMessage<PathPointwiseFeature_ObstacleFeature>(NULL);
  }

  PathPointwiseFeature_ObstacleFeature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PathPointwiseFeature_ObstacleFeature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PathPointwiseFeature_ObstacleFeature& from);
  void MergeFrom(const PathPointwiseFeature_ObstacleFeature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathPointwiseFeature_ObstacleFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double lateral_distance = 1;
  bool has_lateral_distance() const;
  void clear_lateral_distance();
  static const int kLateralDistanceFieldNumber = 1;
  double lateral_distance() const;
  void set_lateral_distance(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
 private:
  void set_has_lateral_distance();
  void clear_has_lateral_distance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double lateral_distance_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PathPointwiseFeature_BoundRelatedFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature) */ {
 public:
  PathPointwiseFeature_BoundRelatedFeature();
  virtual ~PathPointwiseFeature_BoundRelatedFeature();

  PathPointwiseFeature_BoundRelatedFeature(const PathPointwiseFeature_BoundRelatedFeature& from);

  inline PathPointwiseFeature_BoundRelatedFeature& operator=(const PathPointwiseFeature_BoundRelatedFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PathPointwiseFeature_BoundRelatedFeature(PathPointwiseFeature_BoundRelatedFeature&& from) noexcept
    : PathPointwiseFeature_BoundRelatedFeature() {
    *this = ::std::move(from);
  }

  inline PathPointwiseFeature_BoundRelatedFeature& operator=(PathPointwiseFeature_BoundRelatedFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathPointwiseFeature_BoundRelatedFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathPointwiseFeature_BoundRelatedFeature* internal_default_instance() {
    return reinterpret_cast<const PathPointwiseFeature_BoundRelatedFeature*>(
               &_PathPointwiseFeature_BoundRelatedFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PathPointwiseFeature_BoundRelatedFeature* other);
  friend void swap(PathPointwiseFeature_BoundRelatedFeature& a, PathPointwiseFeature_BoundRelatedFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PathPointwiseFeature_BoundRelatedFeature* New() const final {
    return CreateMaybeMessage<PathPointwiseFeature_BoundRelatedFeature>(NULL);
  }

  PathPointwiseFeature_BoundRelatedFeature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PathPointwiseFeature_BoundRelatedFeature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PathPointwiseFeature_BoundRelatedFeature& from);
  void MergeFrom(const PathPointwiseFeature_BoundRelatedFeature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathPointwiseFeature_BoundRelatedFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PathPointwiseFeature_BoundRelatedFeature_CrossableLevel CrossableLevel;
  static const CrossableLevel CROSS_FREE =
    PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_CROSS_FREE;
  static const CrossableLevel CROSS_ABLE =
    PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_CROSS_ABLE;
  static const CrossableLevel CROSS_FORBIDDEN =
    PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_CROSS_FORBIDDEN;
  static inline bool CrossableLevel_IsValid(int value) {
    return PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_IsValid(value);
  }
  static const CrossableLevel CrossableLevel_MIN =
    PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_CrossableLevel_MIN;
  static const CrossableLevel CrossableLevel_MAX =
    PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_CrossableLevel_MAX;
  static const int CrossableLevel_ARRAYSIZE =
    PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_CrossableLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CrossableLevel_descriptor() {
    return PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_descriptor();
  }
  static inline const ::std::string& CrossableLevel_Name(CrossableLevel value) {
    return PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_Name(value);
  }
  static inline bool CrossableLevel_Parse(const ::std::string& name,
      CrossableLevel* value) {
    return PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double bound_distance = 1;
  bool has_bound_distance() const;
  void clear_bound_distance();
  static const int kBoundDistanceFieldNumber = 1;
  double bound_distance() const;
  void set_bound_distance(double value);

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel crossable_level = 2;
  bool has_crossable_level() const;
  void clear_crossable_level();
  static const int kCrossableLevelFieldNumber = 2;
  ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel crossable_level() const;
  void set_crossable_level(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel value);

  // @@protoc_insertion_point(class_scope:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
 private:
  void set_has_bound_distance();
  void clear_has_bound_distance();
  void set_has_crossable_level();
  void clear_has_crossable_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double bound_distance_;
  int crossable_level_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PathPointwiseFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.autotuning.PathPointwiseFeature) */ {
 public:
  PathPointwiseFeature();
  virtual ~PathPointwiseFeature();

  PathPointwiseFeature(const PathPointwiseFeature& from);

  inline PathPointwiseFeature& operator=(const PathPointwiseFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PathPointwiseFeature(PathPointwiseFeature&& from) noexcept
    : PathPointwiseFeature() {
    *this = ::std::move(from);
  }

  inline PathPointwiseFeature& operator=(PathPointwiseFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathPointwiseFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathPointwiseFeature* internal_default_instance() {
    return reinterpret_cast<const PathPointwiseFeature*>(
               &_PathPointwiseFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PathPointwiseFeature* other);
  friend void swap(PathPointwiseFeature& a, PathPointwiseFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PathPointwiseFeature* New() const final {
    return CreateMaybeMessage<PathPointwiseFeature>(NULL);
  }

  PathPointwiseFeature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PathPointwiseFeature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PathPointwiseFeature& from);
  void MergeFrom(const PathPointwiseFeature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathPointwiseFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PathPointwiseFeature_ObstacleFeature ObstacleFeature;
  typedef PathPointwiseFeature_BoundRelatedFeature BoundRelatedFeature;

  // accessors -------------------------------------------------------

  // repeated .apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature obstacle_info = 5;
  int obstacle_info_size() const;
  void clear_obstacle_info();
  static const int kObstacleInfoFieldNumber = 5;
  ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature* mutable_obstacle_info(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature >*
      mutable_obstacle_info();
  const ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature& obstacle_info(int index) const;
  ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature* add_obstacle_info();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature >&
      obstacle_info() const;

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature left_bound_feature = 6;
  bool has_left_bound_feature() const;
  void clear_left_bound_feature();
  static const int kLeftBoundFeatureFieldNumber = 6;
  private:
  const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature& _internal_left_bound_feature() const;
  public:
  const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature& left_bound_feature() const;
  ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* release_left_bound_feature();
  ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* mutable_left_bound_feature();
  void set_allocated_left_bound_feature(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* left_bound_feature);

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature right_bound_feature = 7;
  bool has_right_bound_feature() const;
  void clear_right_bound_feature();
  static const int kRightBoundFeatureFieldNumber = 7;
  private:
  const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature& _internal_right_bound_feature() const;
  public:
  const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature& right_bound_feature() const;
  ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* release_right_bound_feature();
  ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* mutable_right_bound_feature();
  void set_allocated_right_bound_feature(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* right_bound_feature);

  // optional double l = 1;
  bool has_l() const;
  void clear_l();
  static const int kLFieldNumber = 1;
  double l() const;
  void set_l(double value);

  // optional double dl = 2;
  bool has_dl() const;
  void clear_dl();
  static const int kDlFieldNumber = 2;
  double dl() const;
  void set_dl(double value);

  // optional double ddl = 3;
  bool has_ddl() const;
  void clear_ddl();
  static const int kDdlFieldNumber = 3;
  double ddl() const;
  void set_ddl(double value);

  // optional double kappa = 4;
  bool has_kappa() const;
  void clear_kappa();
  static const int kKappaFieldNumber = 4;
  double kappa() const;
  void set_kappa(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.autotuning.PathPointwiseFeature)
 private:
  void set_has_l();
  void clear_has_l();
  void set_has_dl();
  void clear_has_dl();
  void set_has_ddl();
  void clear_has_ddl();
  void set_has_kappa();
  void clear_has_kappa();
  void set_has_left_bound_feature();
  void clear_has_left_bound_feature();
  void set_has_right_bound_feature();
  void clear_has_right_bound_feature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature > obstacle_info_;
  ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* left_bound_feature_;
  ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* right_bound_feature_;
  double l_;
  double dl_;
  double ddl_;
  double kappa_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpeedPointwiseFeature_ObstacleFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature) */ {
 public:
  SpeedPointwiseFeature_ObstacleFeature();
  virtual ~SpeedPointwiseFeature_ObstacleFeature();

  SpeedPointwiseFeature_ObstacleFeature(const SpeedPointwiseFeature_ObstacleFeature& from);

  inline SpeedPointwiseFeature_ObstacleFeature& operator=(const SpeedPointwiseFeature_ObstacleFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeedPointwiseFeature_ObstacleFeature(SpeedPointwiseFeature_ObstacleFeature&& from) noexcept
    : SpeedPointwiseFeature_ObstacleFeature() {
    *this = ::std::move(from);
  }

  inline SpeedPointwiseFeature_ObstacleFeature& operator=(SpeedPointwiseFeature_ObstacleFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedPointwiseFeature_ObstacleFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedPointwiseFeature_ObstacleFeature* internal_default_instance() {
    return reinterpret_cast<const SpeedPointwiseFeature_ObstacleFeature*>(
               &_SpeedPointwiseFeature_ObstacleFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SpeedPointwiseFeature_ObstacleFeature* other);
  friend void swap(SpeedPointwiseFeature_ObstacleFeature& a, SpeedPointwiseFeature_ObstacleFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeedPointwiseFeature_ObstacleFeature* New() const final {
    return CreateMaybeMessage<SpeedPointwiseFeature_ObstacleFeature>(NULL);
  }

  SpeedPointwiseFeature_ObstacleFeature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpeedPointwiseFeature_ObstacleFeature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpeedPointwiseFeature_ObstacleFeature& from);
  void MergeFrom(const SpeedPointwiseFeature_ObstacleFeature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedPointwiseFeature_ObstacleFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double longitudinal_distance = 1;
  bool has_longitudinal_distance() const;
  void clear_longitudinal_distance();
  static const int kLongitudinalDistanceFieldNumber = 1;
  double longitudinal_distance() const;
  void set_longitudinal_distance(double value);

  // optional double obstacle_speed = 2;
  bool has_obstacle_speed() const;
  void clear_obstacle_speed();
  static const int kObstacleSpeedFieldNumber = 2;
  double obstacle_speed() const;
  void set_obstacle_speed(double value);

  // optional double probability = 4;
  bool has_probability() const;
  void clear_probability();
  static const int kProbabilityFieldNumber = 4;
  double probability() const;
  void set_probability(double value);

  // optional double relative_v = 5;
  bool has_relative_v() const;
  void clear_relative_v();
  static const int kRelativeVFieldNumber = 5;
  double relative_v() const;
  void set_relative_v(double value);

  // optional double lateral_distance = 3 [default = 10];
  bool has_lateral_distance() const;
  void clear_lateral_distance();
  static const int kLateralDistanceFieldNumber = 3;
  double lateral_distance() const;
  void set_lateral_distance(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
 private:
  void set_has_longitudinal_distance();
  void clear_has_longitudinal_distance();
  void set_has_obstacle_speed();
  void clear_has_obstacle_speed();
  void set_has_lateral_distance();
  void clear_has_lateral_distance();
  void set_has_probability();
  void clear_has_probability();
  void set_has_relative_v();
  void clear_has_relative_v();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double longitudinal_distance_;
  double obstacle_speed_;
  double probability_;
  double relative_v_;
  double lateral_distance_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpeedPointwiseFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.autotuning.SpeedPointwiseFeature) */ {
 public:
  SpeedPointwiseFeature();
  virtual ~SpeedPointwiseFeature();

  SpeedPointwiseFeature(const SpeedPointwiseFeature& from);

  inline SpeedPointwiseFeature& operator=(const SpeedPointwiseFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeedPointwiseFeature(SpeedPointwiseFeature&& from) noexcept
    : SpeedPointwiseFeature() {
    *this = ::std::move(from);
  }

  inline SpeedPointwiseFeature& operator=(SpeedPointwiseFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedPointwiseFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedPointwiseFeature* internal_default_instance() {
    return reinterpret_cast<const SpeedPointwiseFeature*>(
               &_SpeedPointwiseFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SpeedPointwiseFeature* other);
  friend void swap(SpeedPointwiseFeature& a, SpeedPointwiseFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeedPointwiseFeature* New() const final {
    return CreateMaybeMessage<SpeedPointwiseFeature>(NULL);
  }

  SpeedPointwiseFeature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpeedPointwiseFeature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpeedPointwiseFeature& from);
  void MergeFrom(const SpeedPointwiseFeature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedPointwiseFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SpeedPointwiseFeature_ObstacleFeature ObstacleFeature;

  // accessors -------------------------------------------------------

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature follow_obs_feature = 7;
  int follow_obs_feature_size() const;
  void clear_follow_obs_feature();
  static const int kFollowObsFeatureFieldNumber = 7;
  ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* mutable_follow_obs_feature(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
      mutable_follow_obs_feature();
  const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& follow_obs_feature(int index) const;
  ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* add_follow_obs_feature();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
      follow_obs_feature() const;

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature overtake_obs_feature = 8;
  int overtake_obs_feature_size() const;
  void clear_overtake_obs_feature();
  static const int kOvertakeObsFeatureFieldNumber = 8;
  ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* mutable_overtake_obs_feature(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
      mutable_overtake_obs_feature();
  const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& overtake_obs_feature(int index) const;
  ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* add_overtake_obs_feature();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
      overtake_obs_feature() const;

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature nudge_obs_feature = 9;
  int nudge_obs_feature_size() const;
  void clear_nudge_obs_feature();
  static const int kNudgeObsFeatureFieldNumber = 9;
  ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* mutable_nudge_obs_feature(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
      mutable_nudge_obs_feature();
  const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& nudge_obs_feature(int index) const;
  ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* add_nudge_obs_feature();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
      nudge_obs_feature() const;

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature stop_obs_feature = 10;
  int stop_obs_feature_size() const;
  void clear_stop_obs_feature();
  static const int kStopObsFeatureFieldNumber = 10;
  ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* mutable_stop_obs_feature(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
      mutable_stop_obs_feature();
  const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& stop_obs_feature(int index) const;
  ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* add_stop_obs_feature();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
      stop_obs_feature() const;

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature virtual_obs_feature = 12;
  int virtual_obs_feature_size() const;
  void clear_virtual_obs_feature();
  static const int kVirtualObsFeatureFieldNumber = 12;
  ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* mutable_virtual_obs_feature(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
      mutable_virtual_obs_feature();
  const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& virtual_obs_feature(int index) const;
  ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* add_virtual_obs_feature();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
      virtual_obs_feature() const;

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_front_obs_feature = 15;
  int sidepass_front_obs_feature_size() const;
  void clear_sidepass_front_obs_feature();
  static const int kSidepassFrontObsFeatureFieldNumber = 15;
  ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* mutable_sidepass_front_obs_feature(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
      mutable_sidepass_front_obs_feature();
  const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& sidepass_front_obs_feature(int index) const;
  ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* add_sidepass_front_obs_feature();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
      sidepass_front_obs_feature() const;

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_rear_obs_feature = 16;
  int sidepass_rear_obs_feature_size() const;
  void clear_sidepass_rear_obs_feature();
  static const int kSidepassRearObsFeatureFieldNumber = 16;
  ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* mutable_sidepass_rear_obs_feature(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
      mutable_sidepass_rear_obs_feature();
  const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& sidepass_rear_obs_feature(int index) const;
  ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* add_sidepass_rear_obs_feature();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
      sidepass_rear_obs_feature() const;

  // optional double s = 1 [default = 0];
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 1;
  double s() const;
  void set_s(double value);

  // optional double t = 2 [default = 0];
  bool has_t() const;
  void clear_t();
  static const int kTFieldNumber = 2;
  double t() const;
  void set_t(double value);

  // optional double v = 3 [default = 0];
  bool has_v() const;
  void clear_v();
  static const int kVFieldNumber = 3;
  double v() const;
  void set_v(double value);

  // optional double speed_limit = 4 [default = 0];
  bool has_speed_limit() const;
  void clear_speed_limit();
  static const int kSpeedLimitFieldNumber = 4;
  double speed_limit() const;
  void set_speed_limit(double value);

  // optional double acc = 5 [default = 0];
  bool has_acc() const;
  void clear_acc();
  static const int kAccFieldNumber = 5;
  double acc() const;
  void set_acc(double value);

  // optional double jerk = 6 [default = 0];
  bool has_jerk() const;
  void clear_jerk();
  static const int kJerkFieldNumber = 6;
  double jerk() const;
  void set_jerk(double value);

  // optional double lateral_acc = 13 [default = 0];
  bool has_lateral_acc() const;
  void clear_lateral_acc();
  static const int kLateralAccFieldNumber = 13;
  double lateral_acc() const;
  void set_lateral_acc(double value);

  // optional double path_curvature_abs = 14 [default = 0];
  bool has_path_curvature_abs() const;
  void clear_path_curvature_abs();
  static const int kPathCurvatureAbsFieldNumber = 14;
  double path_curvature_abs() const;
  void set_path_curvature_abs(double value);

  // optional int32 collision_times = 11 [default = 0];
  bool has_collision_times() const;
  void clear_collision_times();
  static const int kCollisionTimesFieldNumber = 11;
  ::google::protobuf::int32 collision_times() const;
  void set_collision_times(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.planning.autotuning.SpeedPointwiseFeature)
 private:
  void set_has_s();
  void clear_has_s();
  void set_has_t();
  void clear_has_t();
  void set_has_v();
  void clear_has_v();
  void set_has_speed_limit();
  void clear_has_speed_limit();
  void set_has_acc();
  void clear_has_acc();
  void set_has_jerk();
  void clear_has_jerk();
  void set_has_collision_times();
  void clear_has_collision_times();
  void set_has_lateral_acc();
  void clear_has_lateral_acc();
  void set_has_path_curvature_abs();
  void clear_has_path_curvature_abs();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature > follow_obs_feature_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature > overtake_obs_feature_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature > nudge_obs_feature_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature > stop_obs_feature_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature > virtual_obs_feature_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature > sidepass_front_obs_feature_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature > sidepass_rear_obs_feature_;
  double s_;
  double t_;
  double v_;
  double speed_limit_;
  double acc_;
  double jerk_;
  double lateral_acc_;
  double path_curvature_abs_;
  ::google::protobuf::int32 collision_times_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrajectoryPointwiseFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.autotuning.TrajectoryPointwiseFeature) */ {
 public:
  TrajectoryPointwiseFeature();
  virtual ~TrajectoryPointwiseFeature();

  TrajectoryPointwiseFeature(const TrajectoryPointwiseFeature& from);

  inline TrajectoryPointwiseFeature& operator=(const TrajectoryPointwiseFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrajectoryPointwiseFeature(TrajectoryPointwiseFeature&& from) noexcept
    : TrajectoryPointwiseFeature() {
    *this = ::std::move(from);
  }

  inline TrajectoryPointwiseFeature& operator=(TrajectoryPointwiseFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryPointwiseFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryPointwiseFeature* internal_default_instance() {
    return reinterpret_cast<const TrajectoryPointwiseFeature*>(
               &_TrajectoryPointwiseFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(TrajectoryPointwiseFeature* other);
  friend void swap(TrajectoryPointwiseFeature& a, TrajectoryPointwiseFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryPointwiseFeature* New() const final {
    return CreateMaybeMessage<TrajectoryPointwiseFeature>(NULL);
  }

  TrajectoryPointwiseFeature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryPointwiseFeature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrajectoryPointwiseFeature& from);
  void MergeFrom(const TrajectoryPointwiseFeature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryPointwiseFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.autotuning.PathPointwiseFeature path_input_feature = 1;
  bool has_path_input_feature() const;
  void clear_path_input_feature();
  static const int kPathInputFeatureFieldNumber = 1;
  private:
  const ::apollo::planning::autotuning::PathPointwiseFeature& _internal_path_input_feature() const;
  public:
  const ::apollo::planning::autotuning::PathPointwiseFeature& path_input_feature() const;
  ::apollo::planning::autotuning::PathPointwiseFeature* release_path_input_feature();
  ::apollo::planning::autotuning::PathPointwiseFeature* mutable_path_input_feature();
  void set_allocated_path_input_feature(::apollo::planning::autotuning::PathPointwiseFeature* path_input_feature);

  // optional .apollo.planning.autotuning.SpeedPointwiseFeature speed_input_feature = 2;
  bool has_speed_input_feature() const;
  void clear_speed_input_feature();
  static const int kSpeedInputFeatureFieldNumber = 2;
  private:
  const ::apollo::planning::autotuning::SpeedPointwiseFeature& _internal_speed_input_feature() const;
  public:
  const ::apollo::planning::autotuning::SpeedPointwiseFeature& speed_input_feature() const;
  ::apollo::planning::autotuning::SpeedPointwiseFeature* release_speed_input_feature();
  ::apollo::planning::autotuning::SpeedPointwiseFeature* mutable_speed_input_feature();
  void set_allocated_speed_input_feature(::apollo::planning::autotuning::SpeedPointwiseFeature* speed_input_feature);

  // @@protoc_insertion_point(class_scope:apollo.planning.autotuning.TrajectoryPointwiseFeature)
 private:
  void set_has_path_input_feature();
  void clear_has_path_input_feature();
  void set_has_speed_input_feature();
  void clear_has_speed_input_feature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::planning::autotuning::PathPointwiseFeature* path_input_feature_;
  ::apollo::planning::autotuning::SpeedPointwiseFeature* speed_input_feature_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrajectoryFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.autotuning.TrajectoryFeature) */ {
 public:
  TrajectoryFeature();
  virtual ~TrajectoryFeature();

  TrajectoryFeature(const TrajectoryFeature& from);

  inline TrajectoryFeature& operator=(const TrajectoryFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrajectoryFeature(TrajectoryFeature&& from) noexcept
    : TrajectoryFeature() {
    *this = ::std::move(from);
  }

  inline TrajectoryFeature& operator=(TrajectoryFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryFeature* internal_default_instance() {
    return reinterpret_cast<const TrajectoryFeature*>(
               &_TrajectoryFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(TrajectoryFeature* other);
  friend void swap(TrajectoryFeature& a, TrajectoryFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryFeature* New() const final {
    return CreateMaybeMessage<TrajectoryFeature>(NULL);
  }

  TrajectoryFeature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryFeature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrajectoryFeature& from);
  void MergeFrom(const TrajectoryFeature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.planning.autotuning.TrajectoryPointwiseFeature point_feature = 1;
  int point_feature_size() const;
  void clear_point_feature();
  static const int kPointFeatureFieldNumber = 1;
  ::apollo::planning::autotuning::TrajectoryPointwiseFeature* mutable_point_feature(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::TrajectoryPointwiseFeature >*
      mutable_point_feature();
  const ::apollo::planning::autotuning::TrajectoryPointwiseFeature& point_feature(int index) const;
  ::apollo::planning::autotuning::TrajectoryPointwiseFeature* add_point_feature();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::TrajectoryPointwiseFeature >&
      point_feature() const;

  // @@protoc_insertion_point(class_scope:apollo.planning.autotuning.TrajectoryFeature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::TrajectoryPointwiseFeature > point_feature_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PathPointwiseFeature_ObstacleFeature

// optional double lateral_distance = 1;
inline bool PathPointwiseFeature_ObstacleFeature::has_lateral_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathPointwiseFeature_ObstacleFeature::set_has_lateral_distance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathPointwiseFeature_ObstacleFeature::clear_has_lateral_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathPointwiseFeature_ObstacleFeature::clear_lateral_distance() {
  lateral_distance_ = 0;
  clear_has_lateral_distance();
}
inline double PathPointwiseFeature_ObstacleFeature::lateral_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.lateral_distance)
  return lateral_distance_;
}
inline void PathPointwiseFeature_ObstacleFeature::set_lateral_distance(double value) {
  set_has_lateral_distance();
  lateral_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature.lateral_distance)
}

// -------------------------------------------------------------------

// PathPointwiseFeature_BoundRelatedFeature

// optional double bound_distance = 1;
inline bool PathPointwiseFeature_BoundRelatedFeature::has_bound_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathPointwiseFeature_BoundRelatedFeature::set_has_bound_distance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathPointwiseFeature_BoundRelatedFeature::clear_has_bound_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathPointwiseFeature_BoundRelatedFeature::clear_bound_distance() {
  bound_distance_ = 0;
  clear_has_bound_distance();
}
inline double PathPointwiseFeature_BoundRelatedFeature::bound_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.bound_distance)
  return bound_distance_;
}
inline void PathPointwiseFeature_BoundRelatedFeature::set_bound_distance(double value) {
  set_has_bound_distance();
  bound_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.bound_distance)
}

// optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel crossable_level = 2;
inline bool PathPointwiseFeature_BoundRelatedFeature::has_crossable_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PathPointwiseFeature_BoundRelatedFeature::set_has_crossable_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PathPointwiseFeature_BoundRelatedFeature::clear_has_crossable_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PathPointwiseFeature_BoundRelatedFeature::clear_crossable_level() {
  crossable_level_ = 0;
  clear_has_crossable_level();
}
inline ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::crossable_level() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.crossable_level)
  return static_cast< ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel >(crossable_level_);
}
inline void PathPointwiseFeature_BoundRelatedFeature::set_crossable_level(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel value) {
  assert(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_IsValid(value));
  set_has_crossable_level();
  crossable_level_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.crossable_level)
}

// -------------------------------------------------------------------

// PathPointwiseFeature

// optional double l = 1;
inline bool PathPointwiseFeature::has_l() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PathPointwiseFeature::set_has_l() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PathPointwiseFeature::clear_has_l() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PathPointwiseFeature::clear_l() {
  l_ = 0;
  clear_has_l();
}
inline double PathPointwiseFeature::l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointwiseFeature.l)
  return l_;
}
inline void PathPointwiseFeature::set_l(double value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.PathPointwiseFeature.l)
}

// optional double dl = 2;
inline bool PathPointwiseFeature::has_dl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PathPointwiseFeature::set_has_dl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PathPointwiseFeature::clear_has_dl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PathPointwiseFeature::clear_dl() {
  dl_ = 0;
  clear_has_dl();
}
inline double PathPointwiseFeature::dl() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointwiseFeature.dl)
  return dl_;
}
inline void PathPointwiseFeature::set_dl(double value) {
  set_has_dl();
  dl_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.PathPointwiseFeature.dl)
}

// optional double ddl = 3;
inline bool PathPointwiseFeature::has_ddl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PathPointwiseFeature::set_has_ddl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PathPointwiseFeature::clear_has_ddl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PathPointwiseFeature::clear_ddl() {
  ddl_ = 0;
  clear_has_ddl();
}
inline double PathPointwiseFeature::ddl() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointwiseFeature.ddl)
  return ddl_;
}
inline void PathPointwiseFeature::set_ddl(double value) {
  set_has_ddl();
  ddl_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.PathPointwiseFeature.ddl)
}

// optional double kappa = 4;
inline bool PathPointwiseFeature::has_kappa() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PathPointwiseFeature::set_has_kappa() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PathPointwiseFeature::clear_has_kappa() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PathPointwiseFeature::clear_kappa() {
  kappa_ = 0;
  clear_has_kappa();
}
inline double PathPointwiseFeature::kappa() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointwiseFeature.kappa)
  return kappa_;
}
inline void PathPointwiseFeature::set_kappa(double value) {
  set_has_kappa();
  kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.PathPointwiseFeature.kappa)
}

// repeated .apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature obstacle_info = 5;
inline int PathPointwiseFeature::obstacle_info_size() const {
  return obstacle_info_.size();
}
inline void PathPointwiseFeature::clear_obstacle_info() {
  obstacle_info_.Clear();
}
inline ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature* PathPointwiseFeature::mutable_obstacle_info(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.PathPointwiseFeature.obstacle_info)
  return obstacle_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature >*
PathPointwiseFeature::mutable_obstacle_info() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.PathPointwiseFeature.obstacle_info)
  return &obstacle_info_;
}
inline const ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature& PathPointwiseFeature::obstacle_info(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointwiseFeature.obstacle_info)
  return obstacle_info_.Get(index);
}
inline ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature* PathPointwiseFeature::add_obstacle_info() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.PathPointwiseFeature.obstacle_info)
  return obstacle_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature >&
PathPointwiseFeature::obstacle_info() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.PathPointwiseFeature.obstacle_info)
  return obstacle_info_;
}

// optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature left_bound_feature = 6;
inline bool PathPointwiseFeature::has_left_bound_feature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathPointwiseFeature::set_has_left_bound_feature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathPointwiseFeature::clear_has_left_bound_feature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathPointwiseFeature::clear_left_bound_feature() {
  if (left_bound_feature_ != NULL) left_bound_feature_->Clear();
  clear_has_left_bound_feature();
}
inline const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature& PathPointwiseFeature::_internal_left_bound_feature() const {
  return *left_bound_feature_;
}
inline const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature& PathPointwiseFeature::left_bound_feature() const {
  const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* p = left_bound_feature_;
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointwiseFeature.left_bound_feature)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature*>(
      &::apollo::planning::autotuning::_PathPointwiseFeature_BoundRelatedFeature_default_instance_);
}
inline ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* PathPointwiseFeature::release_left_bound_feature() {
  // @@protoc_insertion_point(field_release:apollo.planning.autotuning.PathPointwiseFeature.left_bound_feature)
  clear_has_left_bound_feature();
  ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* temp = left_bound_feature_;
  left_bound_feature_ = NULL;
  return temp;
}
inline ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* PathPointwiseFeature::mutable_left_bound_feature() {
  set_has_left_bound_feature();
  if (left_bound_feature_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature>(GetArenaNoVirtual());
    left_bound_feature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.PathPointwiseFeature.left_bound_feature)
  return left_bound_feature_;
}
inline void PathPointwiseFeature::set_allocated_left_bound_feature(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* left_bound_feature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete left_bound_feature_;
  }
  if (left_bound_feature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      left_bound_feature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left_bound_feature, submessage_arena);
    }
    set_has_left_bound_feature();
  } else {
    clear_has_left_bound_feature();
  }
  left_bound_feature_ = left_bound_feature;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.autotuning.PathPointwiseFeature.left_bound_feature)
}

// optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature right_bound_feature = 7;
inline bool PathPointwiseFeature::has_right_bound_feature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PathPointwiseFeature::set_has_right_bound_feature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PathPointwiseFeature::clear_has_right_bound_feature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PathPointwiseFeature::clear_right_bound_feature() {
  if (right_bound_feature_ != NULL) right_bound_feature_->Clear();
  clear_has_right_bound_feature();
}
inline const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature& PathPointwiseFeature::_internal_right_bound_feature() const {
  return *right_bound_feature_;
}
inline const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature& PathPointwiseFeature::right_bound_feature() const {
  const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* p = right_bound_feature_;
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointwiseFeature.right_bound_feature)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature*>(
      &::apollo::planning::autotuning::_PathPointwiseFeature_BoundRelatedFeature_default_instance_);
}
inline ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* PathPointwiseFeature::release_right_bound_feature() {
  // @@protoc_insertion_point(field_release:apollo.planning.autotuning.PathPointwiseFeature.right_bound_feature)
  clear_has_right_bound_feature();
  ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* temp = right_bound_feature_;
  right_bound_feature_ = NULL;
  return temp;
}
inline ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* PathPointwiseFeature::mutable_right_bound_feature() {
  set_has_right_bound_feature();
  if (right_bound_feature_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature>(GetArenaNoVirtual());
    right_bound_feature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.PathPointwiseFeature.right_bound_feature)
  return right_bound_feature_;
}
inline void PathPointwiseFeature::set_allocated_right_bound_feature(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* right_bound_feature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete right_bound_feature_;
  }
  if (right_bound_feature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      right_bound_feature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right_bound_feature, submessage_arena);
    }
    set_has_right_bound_feature();
  } else {
    clear_has_right_bound_feature();
  }
  right_bound_feature_ = right_bound_feature;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.autotuning.PathPointwiseFeature.right_bound_feature)
}

// -------------------------------------------------------------------

// SpeedPointwiseFeature_ObstacleFeature

// optional double longitudinal_distance = 1;
inline bool SpeedPointwiseFeature_ObstacleFeature::has_longitudinal_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeedPointwiseFeature_ObstacleFeature::set_has_longitudinal_distance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpeedPointwiseFeature_ObstacleFeature::clear_has_longitudinal_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpeedPointwiseFeature_ObstacleFeature::clear_longitudinal_distance() {
  longitudinal_distance_ = 0;
  clear_has_longitudinal_distance();
}
inline double SpeedPointwiseFeature_ObstacleFeature::longitudinal_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.longitudinal_distance)
  return longitudinal_distance_;
}
inline void SpeedPointwiseFeature_ObstacleFeature::set_longitudinal_distance(double value) {
  set_has_longitudinal_distance();
  longitudinal_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.longitudinal_distance)
}

// optional double obstacle_speed = 2;
inline bool SpeedPointwiseFeature_ObstacleFeature::has_obstacle_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpeedPointwiseFeature_ObstacleFeature::set_has_obstacle_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpeedPointwiseFeature_ObstacleFeature::clear_has_obstacle_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpeedPointwiseFeature_ObstacleFeature::clear_obstacle_speed() {
  obstacle_speed_ = 0;
  clear_has_obstacle_speed();
}
inline double SpeedPointwiseFeature_ObstacleFeature::obstacle_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.obstacle_speed)
  return obstacle_speed_;
}
inline void SpeedPointwiseFeature_ObstacleFeature::set_obstacle_speed(double value) {
  set_has_obstacle_speed();
  obstacle_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.obstacle_speed)
}

// optional double lateral_distance = 3 [default = 10];
inline bool SpeedPointwiseFeature_ObstacleFeature::has_lateral_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpeedPointwiseFeature_ObstacleFeature::set_has_lateral_distance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpeedPointwiseFeature_ObstacleFeature::clear_has_lateral_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpeedPointwiseFeature_ObstacleFeature::clear_lateral_distance() {
  lateral_distance_ = 10;
  clear_has_lateral_distance();
}
inline double SpeedPointwiseFeature_ObstacleFeature::lateral_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.lateral_distance)
  return lateral_distance_;
}
inline void SpeedPointwiseFeature_ObstacleFeature::set_lateral_distance(double value) {
  set_has_lateral_distance();
  lateral_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.lateral_distance)
}

// optional double probability = 4;
inline bool SpeedPointwiseFeature_ObstacleFeature::has_probability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpeedPointwiseFeature_ObstacleFeature::set_has_probability() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpeedPointwiseFeature_ObstacleFeature::clear_has_probability() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpeedPointwiseFeature_ObstacleFeature::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
inline double SpeedPointwiseFeature_ObstacleFeature::probability() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.probability)
  return probability_;
}
inline void SpeedPointwiseFeature_ObstacleFeature::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.probability)
}

// optional double relative_v = 5;
inline bool SpeedPointwiseFeature_ObstacleFeature::has_relative_v() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpeedPointwiseFeature_ObstacleFeature::set_has_relative_v() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpeedPointwiseFeature_ObstacleFeature::clear_has_relative_v() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpeedPointwiseFeature_ObstacleFeature::clear_relative_v() {
  relative_v_ = 0;
  clear_has_relative_v();
}
inline double SpeedPointwiseFeature_ObstacleFeature::relative_v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.relative_v)
  return relative_v_;
}
inline void SpeedPointwiseFeature_ObstacleFeature::set_relative_v(double value) {
  set_has_relative_v();
  relative_v_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature.relative_v)
}

// -------------------------------------------------------------------

// SpeedPointwiseFeature

// optional double s = 1 [default = 0];
inline bool SpeedPointwiseFeature::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeedPointwiseFeature::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpeedPointwiseFeature::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpeedPointwiseFeature::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double SpeedPointwiseFeature::s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.s)
  return s_;
}
inline void SpeedPointwiseFeature::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.s)
}

// optional double t = 2 [default = 0];
inline bool SpeedPointwiseFeature::has_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpeedPointwiseFeature::set_has_t() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpeedPointwiseFeature::clear_has_t() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpeedPointwiseFeature::clear_t() {
  t_ = 0;
  clear_has_t();
}
inline double SpeedPointwiseFeature::t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.t)
  return t_;
}
inline void SpeedPointwiseFeature::set_t(double value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.t)
}

// optional double v = 3 [default = 0];
inline bool SpeedPointwiseFeature::has_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpeedPointwiseFeature::set_has_v() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpeedPointwiseFeature::clear_has_v() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpeedPointwiseFeature::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline double SpeedPointwiseFeature::v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.v)
  return v_;
}
inline void SpeedPointwiseFeature::set_v(double value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.v)
}

// optional double speed_limit = 4 [default = 0];
inline bool SpeedPointwiseFeature::has_speed_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpeedPointwiseFeature::set_has_speed_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpeedPointwiseFeature::clear_has_speed_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpeedPointwiseFeature::clear_speed_limit() {
  speed_limit_ = 0;
  clear_has_speed_limit();
}
inline double SpeedPointwiseFeature::speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.speed_limit)
  return speed_limit_;
}
inline void SpeedPointwiseFeature::set_speed_limit(double value) {
  set_has_speed_limit();
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.speed_limit)
}

// optional double acc = 5 [default = 0];
inline bool SpeedPointwiseFeature::has_acc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpeedPointwiseFeature::set_has_acc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpeedPointwiseFeature::clear_has_acc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpeedPointwiseFeature::clear_acc() {
  acc_ = 0;
  clear_has_acc();
}
inline double SpeedPointwiseFeature::acc() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.acc)
  return acc_;
}
inline void SpeedPointwiseFeature::set_acc(double value) {
  set_has_acc();
  acc_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.acc)
}

// optional double jerk = 6 [default = 0];
inline bool SpeedPointwiseFeature::has_jerk() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SpeedPointwiseFeature::set_has_jerk() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SpeedPointwiseFeature::clear_has_jerk() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SpeedPointwiseFeature::clear_jerk() {
  jerk_ = 0;
  clear_has_jerk();
}
inline double SpeedPointwiseFeature::jerk() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.jerk)
  return jerk_;
}
inline void SpeedPointwiseFeature::set_jerk(double value) {
  set_has_jerk();
  jerk_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.jerk)
}

// repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature follow_obs_feature = 7;
inline int SpeedPointwiseFeature::follow_obs_feature_size() const {
  return follow_obs_feature_.size();
}
inline void SpeedPointwiseFeature::clear_follow_obs_feature() {
  follow_obs_feature_.Clear();
}
inline ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::mutable_follow_obs_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointwiseFeature.follow_obs_feature)
  return follow_obs_feature_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
SpeedPointwiseFeature::mutable_follow_obs_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointwiseFeature.follow_obs_feature)
  return &follow_obs_feature_;
}
inline const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& SpeedPointwiseFeature::follow_obs_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.follow_obs_feature)
  return follow_obs_feature_.Get(index);
}
inline ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::add_follow_obs_feature() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointwiseFeature.follow_obs_feature)
  return follow_obs_feature_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
SpeedPointwiseFeature::follow_obs_feature() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointwiseFeature.follow_obs_feature)
  return follow_obs_feature_;
}

// repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature overtake_obs_feature = 8;
inline int SpeedPointwiseFeature::overtake_obs_feature_size() const {
  return overtake_obs_feature_.size();
}
inline void SpeedPointwiseFeature::clear_overtake_obs_feature() {
  overtake_obs_feature_.Clear();
}
inline ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::mutable_overtake_obs_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointwiseFeature.overtake_obs_feature)
  return overtake_obs_feature_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
SpeedPointwiseFeature::mutable_overtake_obs_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointwiseFeature.overtake_obs_feature)
  return &overtake_obs_feature_;
}
inline const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& SpeedPointwiseFeature::overtake_obs_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.overtake_obs_feature)
  return overtake_obs_feature_.Get(index);
}
inline ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::add_overtake_obs_feature() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointwiseFeature.overtake_obs_feature)
  return overtake_obs_feature_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
SpeedPointwiseFeature::overtake_obs_feature() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointwiseFeature.overtake_obs_feature)
  return overtake_obs_feature_;
}

// repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature nudge_obs_feature = 9;
inline int SpeedPointwiseFeature::nudge_obs_feature_size() const {
  return nudge_obs_feature_.size();
}
inline void SpeedPointwiseFeature::clear_nudge_obs_feature() {
  nudge_obs_feature_.Clear();
}
inline ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::mutable_nudge_obs_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointwiseFeature.nudge_obs_feature)
  return nudge_obs_feature_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
SpeedPointwiseFeature::mutable_nudge_obs_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointwiseFeature.nudge_obs_feature)
  return &nudge_obs_feature_;
}
inline const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& SpeedPointwiseFeature::nudge_obs_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.nudge_obs_feature)
  return nudge_obs_feature_.Get(index);
}
inline ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::add_nudge_obs_feature() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointwiseFeature.nudge_obs_feature)
  return nudge_obs_feature_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
SpeedPointwiseFeature::nudge_obs_feature() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointwiseFeature.nudge_obs_feature)
  return nudge_obs_feature_;
}

// repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature stop_obs_feature = 10;
inline int SpeedPointwiseFeature::stop_obs_feature_size() const {
  return stop_obs_feature_.size();
}
inline void SpeedPointwiseFeature::clear_stop_obs_feature() {
  stop_obs_feature_.Clear();
}
inline ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::mutable_stop_obs_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointwiseFeature.stop_obs_feature)
  return stop_obs_feature_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
SpeedPointwiseFeature::mutable_stop_obs_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointwiseFeature.stop_obs_feature)
  return &stop_obs_feature_;
}
inline const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& SpeedPointwiseFeature::stop_obs_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.stop_obs_feature)
  return stop_obs_feature_.Get(index);
}
inline ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::add_stop_obs_feature() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointwiseFeature.stop_obs_feature)
  return stop_obs_feature_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
SpeedPointwiseFeature::stop_obs_feature() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointwiseFeature.stop_obs_feature)
  return stop_obs_feature_;
}

// optional int32 collision_times = 11 [default = 0];
inline bool SpeedPointwiseFeature::has_collision_times() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SpeedPointwiseFeature::set_has_collision_times() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SpeedPointwiseFeature::clear_has_collision_times() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SpeedPointwiseFeature::clear_collision_times() {
  collision_times_ = 0;
  clear_has_collision_times();
}
inline ::google::protobuf::int32 SpeedPointwiseFeature::collision_times() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.collision_times)
  return collision_times_;
}
inline void SpeedPointwiseFeature::set_collision_times(::google::protobuf::int32 value) {
  set_has_collision_times();
  collision_times_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.collision_times)
}

// repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature virtual_obs_feature = 12;
inline int SpeedPointwiseFeature::virtual_obs_feature_size() const {
  return virtual_obs_feature_.size();
}
inline void SpeedPointwiseFeature::clear_virtual_obs_feature() {
  virtual_obs_feature_.Clear();
}
inline ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::mutable_virtual_obs_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointwiseFeature.virtual_obs_feature)
  return virtual_obs_feature_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
SpeedPointwiseFeature::mutable_virtual_obs_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointwiseFeature.virtual_obs_feature)
  return &virtual_obs_feature_;
}
inline const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& SpeedPointwiseFeature::virtual_obs_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.virtual_obs_feature)
  return virtual_obs_feature_.Get(index);
}
inline ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::add_virtual_obs_feature() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointwiseFeature.virtual_obs_feature)
  return virtual_obs_feature_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
SpeedPointwiseFeature::virtual_obs_feature() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointwiseFeature.virtual_obs_feature)
  return virtual_obs_feature_;
}

// optional double lateral_acc = 13 [default = 0];
inline bool SpeedPointwiseFeature::has_lateral_acc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SpeedPointwiseFeature::set_has_lateral_acc() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SpeedPointwiseFeature::clear_has_lateral_acc() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SpeedPointwiseFeature::clear_lateral_acc() {
  lateral_acc_ = 0;
  clear_has_lateral_acc();
}
inline double SpeedPointwiseFeature::lateral_acc() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.lateral_acc)
  return lateral_acc_;
}
inline void SpeedPointwiseFeature::set_lateral_acc(double value) {
  set_has_lateral_acc();
  lateral_acc_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.lateral_acc)
}

// optional double path_curvature_abs = 14 [default = 0];
inline bool SpeedPointwiseFeature::has_path_curvature_abs() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SpeedPointwiseFeature::set_has_path_curvature_abs() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SpeedPointwiseFeature::clear_has_path_curvature_abs() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SpeedPointwiseFeature::clear_path_curvature_abs() {
  path_curvature_abs_ = 0;
  clear_has_path_curvature_abs();
}
inline double SpeedPointwiseFeature::path_curvature_abs() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.path_curvature_abs)
  return path_curvature_abs_;
}
inline void SpeedPointwiseFeature::set_path_curvature_abs(double value) {
  set_has_path_curvature_abs();
  path_curvature_abs_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointwiseFeature.path_curvature_abs)
}

// repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_front_obs_feature = 15;
inline int SpeedPointwiseFeature::sidepass_front_obs_feature_size() const {
  return sidepass_front_obs_feature_.size();
}
inline void SpeedPointwiseFeature::clear_sidepass_front_obs_feature() {
  sidepass_front_obs_feature_.Clear();
}
inline ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::mutable_sidepass_front_obs_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointwiseFeature.sidepass_front_obs_feature)
  return sidepass_front_obs_feature_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
SpeedPointwiseFeature::mutable_sidepass_front_obs_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointwiseFeature.sidepass_front_obs_feature)
  return &sidepass_front_obs_feature_;
}
inline const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& SpeedPointwiseFeature::sidepass_front_obs_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.sidepass_front_obs_feature)
  return sidepass_front_obs_feature_.Get(index);
}
inline ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::add_sidepass_front_obs_feature() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointwiseFeature.sidepass_front_obs_feature)
  return sidepass_front_obs_feature_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
SpeedPointwiseFeature::sidepass_front_obs_feature() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointwiseFeature.sidepass_front_obs_feature)
  return sidepass_front_obs_feature_;
}

// repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_rear_obs_feature = 16;
inline int SpeedPointwiseFeature::sidepass_rear_obs_feature_size() const {
  return sidepass_rear_obs_feature_.size();
}
inline void SpeedPointwiseFeature::clear_sidepass_rear_obs_feature() {
  sidepass_rear_obs_feature_.Clear();
}
inline ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::mutable_sidepass_rear_obs_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointwiseFeature.sidepass_rear_obs_feature)
  return sidepass_rear_obs_feature_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >*
SpeedPointwiseFeature::mutable_sidepass_rear_obs_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointwiseFeature.sidepass_rear_obs_feature)
  return &sidepass_rear_obs_feature_;
}
inline const ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature& SpeedPointwiseFeature::sidepass_rear_obs_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointwiseFeature.sidepass_rear_obs_feature)
  return sidepass_rear_obs_feature_.Get(index);
}
inline ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* SpeedPointwiseFeature::add_sidepass_rear_obs_feature() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointwiseFeature.sidepass_rear_obs_feature)
  return sidepass_rear_obs_feature_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >&
SpeedPointwiseFeature::sidepass_rear_obs_feature() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointwiseFeature.sidepass_rear_obs_feature)
  return sidepass_rear_obs_feature_;
}

// -------------------------------------------------------------------

// TrajectoryPointwiseFeature

// optional .apollo.planning.autotuning.PathPointwiseFeature path_input_feature = 1;
inline bool TrajectoryPointwiseFeature::has_path_input_feature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrajectoryPointwiseFeature::set_has_path_input_feature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrajectoryPointwiseFeature::clear_has_path_input_feature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrajectoryPointwiseFeature::clear_path_input_feature() {
  if (path_input_feature_ != NULL) path_input_feature_->Clear();
  clear_has_path_input_feature();
}
inline const ::apollo::planning::autotuning::PathPointwiseFeature& TrajectoryPointwiseFeature::_internal_path_input_feature() const {
  return *path_input_feature_;
}
inline const ::apollo::planning::autotuning::PathPointwiseFeature& TrajectoryPointwiseFeature::path_input_feature() const {
  const ::apollo::planning::autotuning::PathPointwiseFeature* p = path_input_feature_;
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.TrajectoryPointwiseFeature.path_input_feature)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::autotuning::PathPointwiseFeature*>(
      &::apollo::planning::autotuning::_PathPointwiseFeature_default_instance_);
}
inline ::apollo::planning::autotuning::PathPointwiseFeature* TrajectoryPointwiseFeature::release_path_input_feature() {
  // @@protoc_insertion_point(field_release:apollo.planning.autotuning.TrajectoryPointwiseFeature.path_input_feature)
  clear_has_path_input_feature();
  ::apollo::planning::autotuning::PathPointwiseFeature* temp = path_input_feature_;
  path_input_feature_ = NULL;
  return temp;
}
inline ::apollo::planning::autotuning::PathPointwiseFeature* TrajectoryPointwiseFeature::mutable_path_input_feature() {
  set_has_path_input_feature();
  if (path_input_feature_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::autotuning::PathPointwiseFeature>(GetArenaNoVirtual());
    path_input_feature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.TrajectoryPointwiseFeature.path_input_feature)
  return path_input_feature_;
}
inline void TrajectoryPointwiseFeature::set_allocated_path_input_feature(::apollo::planning::autotuning::PathPointwiseFeature* path_input_feature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete path_input_feature_;
  }
  if (path_input_feature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      path_input_feature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path_input_feature, submessage_arena);
    }
    set_has_path_input_feature();
  } else {
    clear_has_path_input_feature();
  }
  path_input_feature_ = path_input_feature;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.autotuning.TrajectoryPointwiseFeature.path_input_feature)
}

// optional .apollo.planning.autotuning.SpeedPointwiseFeature speed_input_feature = 2;
inline bool TrajectoryPointwiseFeature::has_speed_input_feature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrajectoryPointwiseFeature::set_has_speed_input_feature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrajectoryPointwiseFeature::clear_has_speed_input_feature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrajectoryPointwiseFeature::clear_speed_input_feature() {
  if (speed_input_feature_ != NULL) speed_input_feature_->Clear();
  clear_has_speed_input_feature();
}
inline const ::apollo::planning::autotuning::SpeedPointwiseFeature& TrajectoryPointwiseFeature::_internal_speed_input_feature() const {
  return *speed_input_feature_;
}
inline const ::apollo::planning::autotuning::SpeedPointwiseFeature& TrajectoryPointwiseFeature::speed_input_feature() const {
  const ::apollo::planning::autotuning::SpeedPointwiseFeature* p = speed_input_feature_;
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.TrajectoryPointwiseFeature.speed_input_feature)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::autotuning::SpeedPointwiseFeature*>(
      &::apollo::planning::autotuning::_SpeedPointwiseFeature_default_instance_);
}
inline ::apollo::planning::autotuning::SpeedPointwiseFeature* TrajectoryPointwiseFeature::release_speed_input_feature() {
  // @@protoc_insertion_point(field_release:apollo.planning.autotuning.TrajectoryPointwiseFeature.speed_input_feature)
  clear_has_speed_input_feature();
  ::apollo::planning::autotuning::SpeedPointwiseFeature* temp = speed_input_feature_;
  speed_input_feature_ = NULL;
  return temp;
}
inline ::apollo::planning::autotuning::SpeedPointwiseFeature* TrajectoryPointwiseFeature::mutable_speed_input_feature() {
  set_has_speed_input_feature();
  if (speed_input_feature_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::autotuning::SpeedPointwiseFeature>(GetArenaNoVirtual());
    speed_input_feature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.TrajectoryPointwiseFeature.speed_input_feature)
  return speed_input_feature_;
}
inline void TrajectoryPointwiseFeature::set_allocated_speed_input_feature(::apollo::planning::autotuning::SpeedPointwiseFeature* speed_input_feature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete speed_input_feature_;
  }
  if (speed_input_feature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      speed_input_feature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speed_input_feature, submessage_arena);
    }
    set_has_speed_input_feature();
  } else {
    clear_has_speed_input_feature();
  }
  speed_input_feature_ = speed_input_feature;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.autotuning.TrajectoryPointwiseFeature.speed_input_feature)
}

// -------------------------------------------------------------------

// TrajectoryFeature

// repeated .apollo.planning.autotuning.TrajectoryPointwiseFeature point_feature = 1;
inline int TrajectoryFeature::point_feature_size() const {
  return point_feature_.size();
}
inline void TrajectoryFeature::clear_point_feature() {
  point_feature_.Clear();
}
inline ::apollo::planning::autotuning::TrajectoryPointwiseFeature* TrajectoryFeature::mutable_point_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.TrajectoryFeature.point_feature)
  return point_feature_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::TrajectoryPointwiseFeature >*
TrajectoryFeature::mutable_point_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.TrajectoryFeature.point_feature)
  return &point_feature_;
}
inline const ::apollo::planning::autotuning::TrajectoryPointwiseFeature& TrajectoryFeature::point_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.TrajectoryFeature.point_feature)
  return point_feature_.Get(index);
}
inline ::apollo::planning::autotuning::TrajectoryPointwiseFeature* TrajectoryFeature::add_point_feature() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.TrajectoryFeature.point_feature)
  return point_feature_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::TrajectoryPointwiseFeature >&
TrajectoryFeature::point_feature() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.TrajectoryFeature.point_feature)
  return point_feature_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace autotuning
}  // namespace planning
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel>() {
  return ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto
