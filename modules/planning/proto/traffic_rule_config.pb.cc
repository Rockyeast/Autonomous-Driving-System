// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/traffic_rule_config.proto

#include "modules/planning/proto/traffic_rule_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BacksideVehicleConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CrosswalkConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DestinationConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KeepClearConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReferenceLineEndConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ReroutingConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StopSignConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TrafficLightConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_YieldSignConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_TrafficRuleConfig;
}  // namespace protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto
namespace apollo {
namespace planning {
class BacksideVehicleConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BacksideVehicleConfig>
      _instance;
} _BacksideVehicleConfig_default_instance_;
class CrosswalkConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CrosswalkConfig>
      _instance;
} _CrosswalkConfig_default_instance_;
class DestinationConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DestinationConfig>
      _instance;
} _DestinationConfig_default_instance_;
class KeepClearConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeepClearConfig>
      _instance;
} _KeepClearConfig_default_instance_;
class ReferenceLineEndConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReferenceLineEndConfig>
      _instance;
} _ReferenceLineEndConfig_default_instance_;
class ReroutingConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReroutingConfig>
      _instance;
} _ReroutingConfig_default_instance_;
class StopSignConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopSignConfig>
      _instance;
} _StopSignConfig_default_instance_;
class TrafficLightConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightConfig>
      _instance;
} _TrafficLightConfig_default_instance_;
class YieldSignConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<YieldSignConfig>
      _instance;
} _YieldSignConfig_default_instance_;
class TrafficRuleConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficRuleConfig>
      _instance;
  const ::apollo::planning::BacksideVehicleConfig* backside_vehicle_;
  const ::apollo::planning::CrosswalkConfig* crosswalk_;
  const ::apollo::planning::DestinationConfig* destination_;
  const ::apollo::planning::KeepClearConfig* keep_clear_;
  const ::apollo::planning::ReferenceLineEndConfig* reference_line_end_;
  const ::apollo::planning::ReroutingConfig* rerouting_;
  const ::apollo::planning::StopSignConfig* stop_sign_;
  const ::apollo::planning::TrafficLightConfig* traffic_light_;
  const ::apollo::planning::YieldSignConfig* yield_sign_;
} _TrafficRuleConfig_default_instance_;
class TrafficRuleConfigsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficRuleConfigs>
      _instance;
} _TrafficRuleConfigs_default_instance_;
}  // namespace planning
}  // namespace apollo
namespace protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto {
static void InitDefaultsBacksideVehicleConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_BacksideVehicleConfig_default_instance_;
    new (ptr) ::apollo::planning::BacksideVehicleConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::BacksideVehicleConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BacksideVehicleConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBacksideVehicleConfig}, {}};

static void InitDefaultsCrosswalkConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_CrosswalkConfig_default_instance_;
    new (ptr) ::apollo::planning::CrosswalkConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::CrosswalkConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CrosswalkConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCrosswalkConfig}, {}};

static void InitDefaultsDestinationConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_DestinationConfig_default_instance_;
    new (ptr) ::apollo::planning::DestinationConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::DestinationConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DestinationConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDestinationConfig}, {}};

static void InitDefaultsKeepClearConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_KeepClearConfig_default_instance_;
    new (ptr) ::apollo::planning::KeepClearConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::KeepClearConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KeepClearConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKeepClearConfig}, {}};

static void InitDefaultsReferenceLineEndConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ReferenceLineEndConfig_default_instance_;
    new (ptr) ::apollo::planning::ReferenceLineEndConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ReferenceLineEndConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReferenceLineEndConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReferenceLineEndConfig}, {}};

static void InitDefaultsReroutingConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ReroutingConfig_default_instance_;
    new (ptr) ::apollo::planning::ReroutingConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ReroutingConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReroutingConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReroutingConfig}, {}};

static void InitDefaultsStopSignConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_StopSignConfig_default_instance_;
    new (ptr) ::apollo::planning::StopSignConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::StopSignConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StopSignConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStopSignConfig}, {}};

static void InitDefaultsTrafficLightConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_TrafficLightConfig_default_instance_;
    new (ptr) ::apollo::planning::TrafficLightConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::TrafficLightConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficLightConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficLightConfig}, {}};

static void InitDefaultsYieldSignConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_YieldSignConfig_default_instance_;
    new (ptr) ::apollo::planning::YieldSignConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::YieldSignConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_YieldSignConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsYieldSignConfig}, {}};

static void InitDefaultsTrafficRuleConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_TrafficRuleConfig_default_instance_;
    new (ptr) ::apollo::planning::TrafficRuleConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::TrafficRuleConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<9> scc_info_TrafficRuleConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsTrafficRuleConfig}, {
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_BacksideVehicleConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_CrosswalkConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_DestinationConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_KeepClearConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_ReferenceLineEndConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_ReroutingConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_StopSignConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_TrafficLightConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_YieldSignConfig.base,}};

static void InitDefaultsTrafficRuleConfigs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_TrafficRuleConfigs_default_instance_;
    new (ptr) ::apollo::planning::TrafficRuleConfigs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::TrafficRuleConfigs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrafficRuleConfigs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrafficRuleConfigs}, {
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_TrafficRuleConfig.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_BacksideVehicleConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CrosswalkConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DestinationConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KeepClearConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReferenceLineEndConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReroutingConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopSignConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficLightConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_YieldSignConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficRuleConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficRuleConfigs.base);
}

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::BacksideVehicleConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::BacksideVehicleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::BacksideVehicleConfig, backside_lane_width_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, max_stop_deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, min_pass_s_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, max_valid_stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, expand_s_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, stop_strict_l_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, stop_loose_l_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CrosswalkConfig, stop_timeout_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DestinationConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DestinationConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DestinationConfig, stop_distance_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::KeepClearConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::KeepClearConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::KeepClearConfig, enable_keep_clear_zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::KeepClearConfig, enable_junction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::KeepClearConfig, min_pass_s_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::KeepClearConfig, align_with_traffic_sign_tolerance_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ReferenceLineEndConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ReferenceLineEndConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ReferenceLineEndConfig, stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ReferenceLineEndConfig, min_reference_line_remain_length_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ReroutingConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ReroutingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ReroutingConfig, cooldown_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ReroutingConfig, prepare_rerouting_time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::StopSignConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::StopSignConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::StopSignConfig, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::StopSignConfig, stop_distance_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightConfig, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightConfig, stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightConfig, max_stop_deceleration_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::YieldSignConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::YieldSignConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::YieldSignConfig, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::YieldSignConfig, stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::YieldSignConfig, start_watch_distance_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficRuleConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficRuleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficRuleConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficRuleConfig, rule_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficRuleConfig, enabled_),
  offsetof(::apollo::planning::TrafficRuleConfigDefaultTypeInternal, backside_vehicle_),
  offsetof(::apollo::planning::TrafficRuleConfigDefaultTypeInternal, crosswalk_),
  offsetof(::apollo::planning::TrafficRuleConfigDefaultTypeInternal, destination_),
  offsetof(::apollo::planning::TrafficRuleConfigDefaultTypeInternal, keep_clear_),
  offsetof(::apollo::planning::TrafficRuleConfigDefaultTypeInternal, reference_line_end_),
  offsetof(::apollo::planning::TrafficRuleConfigDefaultTypeInternal, rerouting_),
  offsetof(::apollo::planning::TrafficRuleConfigDefaultTypeInternal, stop_sign_),
  offsetof(::apollo::planning::TrafficRuleConfigDefaultTypeInternal, traffic_light_),
  offsetof(::apollo::planning::TrafficRuleConfigDefaultTypeInternal, yield_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficRuleConfig, config_),
  1,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficRuleConfigs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficRuleConfigs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficRuleConfigs, config_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::apollo::planning::BacksideVehicleConfig)},
  { 7, 20, sizeof(::apollo::planning::CrosswalkConfig)},
  { 28, 34, sizeof(::apollo::planning::DestinationConfig)},
  { 35, 44, sizeof(::apollo::planning::KeepClearConfig)},
  { 48, 55, sizeof(::apollo::planning::ReferenceLineEndConfig)},
  { 57, 64, sizeof(::apollo::planning::ReroutingConfig)},
  { 66, 73, sizeof(::apollo::planning::StopSignConfig)},
  { 75, 83, sizeof(::apollo::planning::TrafficLightConfig)},
  { 86, 94, sizeof(::apollo::planning::YieldSignConfig)},
  { 97, 114, sizeof(::apollo::planning::TrafficRuleConfig)},
  { 125, 131, sizeof(::apollo::planning::TrafficRuleConfigs)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_BacksideVehicleConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_CrosswalkConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_DestinationConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_KeepClearConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ReferenceLineEndConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ReroutingConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_StopSignConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_TrafficLightConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_YieldSignConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_TrafficRuleConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_TrafficRuleConfigs_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/planning/proto/traffic_rule_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n0modules/planning/proto/traffic_rule_co"
      "nfig.proto\022\017apollo.planning\"7\n\025BacksideV"
      "ehicleConfig\022\036\n\023backside_lane_width\030\001 \001("
      "\001:\0014\"\216\002\n\017CrosswalkConfig\022\030\n\rstop_distanc"
      "e\030\001 \001(\001:\0011\022 \n\025max_stop_deceleration\030\002 \001("
      "\001:\0014\022\036\n\023min_pass_s_distance\030\003 \001(\001:\0011\022\"\n\027"
      "max_valid_stop_distance\030\004 \001(\001:\0013\022\034\n\021expa"
      "nd_s_distance\030\005 \001(\001:\0012\022!\n\026stop_strict_l_"
      "distance\030\006 \001(\001:\0014\022 \n\025stop_loose_l_distan"
      "ce\030\007 \001(\001:\0015\022\030\n\014stop_timeout\030\010 \001(\001:\00210\"/\n"
      "\021DestinationConfig\022\032\n\rstop_distance\030\001 \001("
      "\001:\0030.5\"\246\001\n\017KeepClearConfig\022$\n\026enable_kee"
      "p_clear_zone\030\001 \001(\010:\004true\022\035\n\017enable_junct"
      "ion\030\002 \001(\010:\004true\022\036\n\023min_pass_s_distance\030\003"
      " \001(\001:\0012\022.\n!align_with_traffic_sign_toler"
      "ance\030\004 \001(\001:\0034.5\"b\n\026ReferenceLineEndConfi"
      "g\022\032\n\rstop_distance\030\001 \001(\001:\0030.5\022,\n min_ref"
      "erence_line_remain_length\030\002 \001(\001:\00250\"N\n\017R"
      "eroutingConfig\022\030\n\rcooldown_time\030\001 \001(\001:\0013"
      "\022!\n\026prepare_rerouting_time\030\002 \001(\001:\0012\"A\n\016S"
      "topSignConfig\022\025\n\007enabled\030\001 \001(\010:\004true\022\030\n\r"
      "stop_distance\030\002 \001(\001:\0011\"g\n\022TrafficLightCo"
      "nfig\022\025\n\007enabled\030\001 \001(\010:\004true\022\030\n\rstop_dist"
      "ance\030\002 \001(\001:\0011\022 \n\025max_stop_deceleration\030\003"
      " \001(\001:\0014\"c\n\017YieldSignConfig\022\025\n\007enabled\030\001 "
      "\001(\010:\004true\022\030\n\rstop_distance\030\002 \001(\001:\0011\022\037\n\024s"
      "tart_watch_distance\030\003 \001(\001:\0012\"\254\006\n\021Traffic"
      "RuleConfig\022:\n\007rule_id\030\001 \001(\0162).apollo.pla"
      "nning.TrafficRuleConfig.RuleId\022\017\n\007enable"
      "d\030\002 \001(\010\022B\n\020backside_vehicle\030\003 \001(\0132&.apol"
      "lo.planning.BacksideVehicleConfigH\000\0225\n\tc"
      "rosswalk\030\004 \001(\0132 .apollo.planning.Crosswa"
      "lkConfigH\000\0229\n\013destination\030\005 \001(\0132\".apollo"
      ".planning.DestinationConfigH\000\0226\n\nkeep_cl"
      "ear\030\006 \001(\0132 .apollo.planning.KeepClearCon"
      "figH\000\022E\n\022reference_line_end\030\007 \001(\0132\'.apol"
      "lo.planning.ReferenceLineEndConfigH\000\0225\n\t"
      "rerouting\030\010 \001(\0132 .apollo.planning.Rerout"
      "ingConfigH\000\0224\n\tstop_sign\030\t \001(\0132\037.apollo."
      "planning.StopSignConfigH\000\022<\n\rtraffic_lig"
      "ht\030\n \001(\0132#.apollo.planning.TrafficLightC"
      "onfigH\000\0226\n\nyield_sign\030\013 \001(\0132 .apollo.pla"
      "nning.YieldSignConfigH\000\"\247\001\n\006RuleId\022\024\n\020BA"
      "CKSIDE_VEHICLE\020\001\022\r\n\tCROSSWALK\020\002\022\017\n\013DESTI"
      "NATION\020\003\022\016\n\nKEEP_CLEAR\020\004\022\026\n\022REFERENCE_LI"
      "NE_END\020\005\022\r\n\tREROUTING\020\006\022\r\n\tSTOP_SIGN\020\007\022\021"
      "\n\rTRAFFIC_LIGHT\020\010\022\016\n\nYIELD_SIGN\020\tB\010\n\006con"
      "fig\"H\n\022TrafficRuleConfigs\0222\n\006config\030\001 \003("
      "\0132\".apollo.planning.TrafficRuleConfig"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1957);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/traffic_rule_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto
namespace apollo {
namespace planning {
const ::google::protobuf::EnumDescriptor* TrafficRuleConfig_RuleId_descriptor() {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool TrafficRuleConfig_RuleId_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficRuleConfig_RuleId TrafficRuleConfig::BACKSIDE_VEHICLE;
const TrafficRuleConfig_RuleId TrafficRuleConfig::CROSSWALK;
const TrafficRuleConfig_RuleId TrafficRuleConfig::DESTINATION;
const TrafficRuleConfig_RuleId TrafficRuleConfig::KEEP_CLEAR;
const TrafficRuleConfig_RuleId TrafficRuleConfig::REFERENCE_LINE_END;
const TrafficRuleConfig_RuleId TrafficRuleConfig::REROUTING;
const TrafficRuleConfig_RuleId TrafficRuleConfig::STOP_SIGN;
const TrafficRuleConfig_RuleId TrafficRuleConfig::TRAFFIC_LIGHT;
const TrafficRuleConfig_RuleId TrafficRuleConfig::YIELD_SIGN;
const TrafficRuleConfig_RuleId TrafficRuleConfig::RuleId_MIN;
const TrafficRuleConfig_RuleId TrafficRuleConfig::RuleId_MAX;
const int TrafficRuleConfig::RuleId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void BacksideVehicleConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BacksideVehicleConfig::kBacksideLaneWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BacksideVehicleConfig::BacksideVehicleConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_BacksideVehicleConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.BacksideVehicleConfig)
}
BacksideVehicleConfig::BacksideVehicleConfig(const BacksideVehicleConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  backside_lane_width_ = from.backside_lane_width_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.BacksideVehicleConfig)
}

void BacksideVehicleConfig::SharedCtor() {
  backside_lane_width_ = 4;
}

BacksideVehicleConfig::~BacksideVehicleConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.BacksideVehicleConfig)
  SharedDtor();
}

void BacksideVehicleConfig::SharedDtor() {
}

void BacksideVehicleConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BacksideVehicleConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BacksideVehicleConfig& BacksideVehicleConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_BacksideVehicleConfig.base);
  return *internal_default_instance();
}


void BacksideVehicleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.BacksideVehicleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  backside_lane_width_ = 4;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BacksideVehicleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.BacksideVehicleConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double backside_lane_width = 1 [default = 4];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_backside_lane_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &backside_lane_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.BacksideVehicleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.BacksideVehicleConfig)
  return false;
#undef DO_
}

void BacksideVehicleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.BacksideVehicleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double backside_lane_width = 1 [default = 4];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->backside_lane_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.BacksideVehicleConfig)
}

::google::protobuf::uint8* BacksideVehicleConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.BacksideVehicleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double backside_lane_width = 1 [default = 4];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->backside_lane_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.BacksideVehicleConfig)
  return target;
}

size_t BacksideVehicleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.BacksideVehicleConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional double backside_lane_width = 1 [default = 4];
  if (has_backside_lane_width()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BacksideVehicleConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.BacksideVehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const BacksideVehicleConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BacksideVehicleConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.BacksideVehicleConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.BacksideVehicleConfig)
    MergeFrom(*source);
  }
}

void BacksideVehicleConfig::MergeFrom(const BacksideVehicleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.BacksideVehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_backside_lane_width()) {
    set_backside_lane_width(from.backside_lane_width());
  }
}

void BacksideVehicleConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.BacksideVehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BacksideVehicleConfig::CopyFrom(const BacksideVehicleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.BacksideVehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BacksideVehicleConfig::IsInitialized() const {
  return true;
}

void BacksideVehicleConfig::Swap(BacksideVehicleConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BacksideVehicleConfig::InternalSwap(BacksideVehicleConfig* other) {
  using std::swap;
  swap(backside_lane_width_, other->backside_lane_width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BacksideVehicleConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CrosswalkConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrosswalkConfig::kStopDistanceFieldNumber;
const int CrosswalkConfig::kMaxStopDecelerationFieldNumber;
const int CrosswalkConfig::kMinPassSDistanceFieldNumber;
const int CrosswalkConfig::kMaxValidStopDistanceFieldNumber;
const int CrosswalkConfig::kExpandSDistanceFieldNumber;
const int CrosswalkConfig::kStopStrictLDistanceFieldNumber;
const int CrosswalkConfig::kStopLooseLDistanceFieldNumber;
const int CrosswalkConfig::kStopTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrosswalkConfig::CrosswalkConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_CrosswalkConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.CrosswalkConfig)
}
CrosswalkConfig::CrosswalkConfig(const CrosswalkConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stop_distance_, &from.stop_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_timeout_) -
    reinterpret_cast<char*>(&stop_distance_)) + sizeof(stop_timeout_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CrosswalkConfig)
}

void CrosswalkConfig::SharedCtor() {
  stop_distance_ = 1;
  max_stop_deceleration_ = 4;
  min_pass_s_distance_ = 1;
  max_valid_stop_distance_ = 3;
  expand_s_distance_ = 2;
  stop_strict_l_distance_ = 4;
  stop_loose_l_distance_ = 5;
  stop_timeout_ = 10;
}

CrosswalkConfig::~CrosswalkConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.CrosswalkConfig)
  SharedDtor();
}

void CrosswalkConfig::SharedDtor() {
}

void CrosswalkConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CrosswalkConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CrosswalkConfig& CrosswalkConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_CrosswalkConfig.base);
  return *internal_default_instance();
}


void CrosswalkConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CrosswalkConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    stop_distance_ = 1;
    max_stop_deceleration_ = 4;
    min_pass_s_distance_ = 1;
    max_valid_stop_distance_ = 3;
    expand_s_distance_ = 2;
    stop_strict_l_distance_ = 4;
    stop_loose_l_distance_ = 5;
    stop_timeout_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CrosswalkConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.CrosswalkConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double stop_distance = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_stop_deceleration = 2 [default = 4];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_max_stop_deceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_stop_deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_pass_s_distance = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_min_pass_s_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_pass_s_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_valid_stop_distance = 4 [default = 3];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_max_valid_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_valid_stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double expand_s_distance = 5 [default = 2];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_expand_s_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &expand_s_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_strict_l_distance = 6 [default = 4];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_stop_strict_l_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_strict_l_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_loose_l_distance = 7 [default = 5];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_stop_loose_l_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_loose_l_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_timeout = 8 [default = 10];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_stop_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.CrosswalkConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.CrosswalkConfig)
  return false;
#undef DO_
}

void CrosswalkConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.CrosswalkConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double stop_distance = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->stop_distance(), output);
  }

  // optional double max_stop_deceleration = 2 [default = 4];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_stop_deceleration(), output);
  }

  // optional double min_pass_s_distance = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min_pass_s_distance(), output);
  }

  // optional double max_valid_stop_distance = 4 [default = 3];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_valid_stop_distance(), output);
  }

  // optional double expand_s_distance = 5 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->expand_s_distance(), output);
  }

  // optional double stop_strict_l_distance = 6 [default = 4];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->stop_strict_l_distance(), output);
  }

  // optional double stop_loose_l_distance = 7 [default = 5];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->stop_loose_l_distance(), output);
  }

  // optional double stop_timeout = 8 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->stop_timeout(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.CrosswalkConfig)
}

::google::protobuf::uint8* CrosswalkConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CrosswalkConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double stop_distance = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->stop_distance(), target);
  }

  // optional double max_stop_deceleration = 2 [default = 4];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_stop_deceleration(), target);
  }

  // optional double min_pass_s_distance = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min_pass_s_distance(), target);
  }

  // optional double max_valid_stop_distance = 4 [default = 3];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_valid_stop_distance(), target);
  }

  // optional double expand_s_distance = 5 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->expand_s_distance(), target);
  }

  // optional double stop_strict_l_distance = 6 [default = 4];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->stop_strict_l_distance(), target);
  }

  // optional double stop_loose_l_distance = 7 [default = 5];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->stop_loose_l_distance(), target);
  }

  // optional double stop_timeout = 8 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->stop_timeout(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CrosswalkConfig)
  return target;
}

size_t CrosswalkConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CrosswalkConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double stop_distance = 1 [default = 1];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_stop_deceleration = 2 [default = 4];
    if (has_max_stop_deceleration()) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 3 [default = 1];
    if (has_min_pass_s_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 4 [default = 3];
    if (has_max_valid_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double expand_s_distance = 5 [default = 2];
    if (has_expand_s_distance()) {
      total_size += 1 + 8;
    }

    // optional double stop_strict_l_distance = 6 [default = 4];
    if (has_stop_strict_l_distance()) {
      total_size += 1 + 8;
    }

    // optional double stop_loose_l_distance = 7 [default = 5];
    if (has_stop_loose_l_distance()) {
      total_size += 1 + 8;
    }

    // optional double stop_timeout = 8 [default = 10];
    if (has_stop_timeout()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrosswalkConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.CrosswalkConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CrosswalkConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CrosswalkConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.CrosswalkConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.CrosswalkConfig)
    MergeFrom(*source);
  }
}

void CrosswalkConfig::MergeFrom(const CrosswalkConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CrosswalkConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      stop_distance_ = from.stop_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_stop_deceleration_ = from.max_stop_deceleration_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_pass_s_distance_ = from.min_pass_s_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      expand_s_distance_ = from.expand_s_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      stop_strict_l_distance_ = from.stop_strict_l_distance_;
    }
    if (cached_has_bits & 0x00000040u) {
      stop_loose_l_distance_ = from.stop_loose_l_distance_;
    }
    if (cached_has_bits & 0x00000080u) {
      stop_timeout_ = from.stop_timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CrosswalkConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.CrosswalkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrosswalkConfig::CopyFrom(const CrosswalkConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CrosswalkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrosswalkConfig::IsInitialized() const {
  return true;
}

void CrosswalkConfig::Swap(CrosswalkConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrosswalkConfig::InternalSwap(CrosswalkConfig* other) {
  using std::swap;
  swap(stop_distance_, other->stop_distance_);
  swap(max_stop_deceleration_, other->max_stop_deceleration_);
  swap(min_pass_s_distance_, other->min_pass_s_distance_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(expand_s_distance_, other->expand_s_distance_);
  swap(stop_strict_l_distance_, other->stop_strict_l_distance_);
  swap(stop_loose_l_distance_, other->stop_loose_l_distance_);
  swap(stop_timeout_, other->stop_timeout_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CrosswalkConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DestinationConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DestinationConfig::kStopDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestinationConfig::DestinationConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_DestinationConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DestinationConfig)
}
DestinationConfig::DestinationConfig(const DestinationConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stop_distance_ = from.stop_distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DestinationConfig)
}

void DestinationConfig::SharedCtor() {
  stop_distance_ = 0.5;
}

DestinationConfig::~DestinationConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DestinationConfig)
  SharedDtor();
}

void DestinationConfig::SharedDtor() {
}

void DestinationConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DestinationConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DestinationConfig& DestinationConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_DestinationConfig.base);
  return *internal_default_instance();
}


void DestinationConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DestinationConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_distance_ = 0.5;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DestinationConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.DestinationConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double stop_distance = 1 [default = 0.5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.DestinationConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.DestinationConfig)
  return false;
#undef DO_
}

void DestinationConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.DestinationConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double stop_distance = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->stop_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.DestinationConfig)
}

::google::protobuf::uint8* DestinationConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DestinationConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double stop_distance = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->stop_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DestinationConfig)
  return target;
}

size_t DestinationConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DestinationConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional double stop_distance = 1 [default = 0.5];
  if (has_stop_distance()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DestinationConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DestinationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DestinationConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DestinationConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DestinationConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DestinationConfig)
    MergeFrom(*source);
  }
}

void DestinationConfig::MergeFrom(const DestinationConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DestinationConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stop_distance()) {
    set_stop_distance(from.stop_distance());
  }
}

void DestinationConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DestinationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestinationConfig::CopyFrom(const DestinationConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DestinationConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestinationConfig::IsInitialized() const {
  return true;
}

void DestinationConfig::Swap(DestinationConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DestinationConfig::InternalSwap(DestinationConfig* other) {
  using std::swap;
  swap(stop_distance_, other->stop_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DestinationConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KeepClearConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepClearConfig::kEnableKeepClearZoneFieldNumber;
const int KeepClearConfig::kEnableJunctionFieldNumber;
const int KeepClearConfig::kMinPassSDistanceFieldNumber;
const int KeepClearConfig::kAlignWithTrafficSignToleranceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepClearConfig::KeepClearConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_KeepClearConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.KeepClearConfig)
}
KeepClearConfig::KeepClearConfig(const KeepClearConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enable_keep_clear_zone_, &from.enable_keep_clear_zone_,
    static_cast<size_t>(reinterpret_cast<char*>(&align_with_traffic_sign_tolerance_) -
    reinterpret_cast<char*>(&enable_keep_clear_zone_)) + sizeof(align_with_traffic_sign_tolerance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.KeepClearConfig)
}

void KeepClearConfig::SharedCtor() {
  enable_keep_clear_zone_ = true;
  enable_junction_ = true;
  min_pass_s_distance_ = 2;
  align_with_traffic_sign_tolerance_ = 4.5;
}

KeepClearConfig::~KeepClearConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.KeepClearConfig)
  SharedDtor();
}

void KeepClearConfig::SharedDtor() {
}

void KeepClearConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KeepClearConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeepClearConfig& KeepClearConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_KeepClearConfig.base);
  return *internal_default_instance();
}


void KeepClearConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.KeepClearConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    enable_keep_clear_zone_ = true;
    enable_junction_ = true;
    min_pass_s_distance_ = 2;
    align_with_traffic_sign_tolerance_ = 4.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KeepClearConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.KeepClearConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable_keep_clear_zone = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_enable_keep_clear_zone();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_keep_clear_zone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_junction = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_enable_junction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_junction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_pass_s_distance = 3 [default = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_min_pass_s_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_pass_s_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double align_with_traffic_sign_tolerance = 4 [default = 4.5];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_align_with_traffic_sign_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &align_with_traffic_sign_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.KeepClearConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.KeepClearConfig)
  return false;
#undef DO_
}

void KeepClearConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.KeepClearConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_keep_clear_zone = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_keep_clear_zone(), output);
  }

  // optional bool enable_junction = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable_junction(), output);
  }

  // optional double min_pass_s_distance = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min_pass_s_distance(), output);
  }

  // optional double align_with_traffic_sign_tolerance = 4 [default = 4.5];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->align_with_traffic_sign_tolerance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.KeepClearConfig)
}

::google::protobuf::uint8* KeepClearConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.KeepClearConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_keep_clear_zone = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_keep_clear_zone(), target);
  }

  // optional bool enable_junction = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable_junction(), target);
  }

  // optional double min_pass_s_distance = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min_pass_s_distance(), target);
  }

  // optional double align_with_traffic_sign_tolerance = 4 [default = 4.5];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->align_with_traffic_sign_tolerance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.KeepClearConfig)
  return target;
}

size_t KeepClearConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.KeepClearConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bool enable_keep_clear_zone = 1 [default = true];
    if (has_enable_keep_clear_zone()) {
      total_size += 1 + 1;
    }

    // optional bool enable_junction = 2 [default = true];
    if (has_enable_junction()) {
      total_size += 1 + 1;
    }

    // optional double min_pass_s_distance = 3 [default = 2];
    if (has_min_pass_s_distance()) {
      total_size += 1 + 8;
    }

    // optional double align_with_traffic_sign_tolerance = 4 [default = 4.5];
    if (has_align_with_traffic_sign_tolerance()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeepClearConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.KeepClearConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const KeepClearConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepClearConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.KeepClearConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.KeepClearConfig)
    MergeFrom(*source);
  }
}

void KeepClearConfig::MergeFrom(const KeepClearConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.KeepClearConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      enable_keep_clear_zone_ = from.enable_keep_clear_zone_;
    }
    if (cached_has_bits & 0x00000002u) {
      enable_junction_ = from.enable_junction_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_pass_s_distance_ = from.min_pass_s_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      align_with_traffic_sign_tolerance_ = from.align_with_traffic_sign_tolerance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KeepClearConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.KeepClearConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepClearConfig::CopyFrom(const KeepClearConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.KeepClearConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepClearConfig::IsInitialized() const {
  return true;
}

void KeepClearConfig::Swap(KeepClearConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepClearConfig::InternalSwap(KeepClearConfig* other) {
  using std::swap;
  swap(enable_keep_clear_zone_, other->enable_keep_clear_zone_);
  swap(enable_junction_, other->enable_junction_);
  swap(min_pass_s_distance_, other->min_pass_s_distance_);
  swap(align_with_traffic_sign_tolerance_, other->align_with_traffic_sign_tolerance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KeepClearConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReferenceLineEndConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReferenceLineEndConfig::kStopDistanceFieldNumber;
const int ReferenceLineEndConfig::kMinReferenceLineRemainLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReferenceLineEndConfig::ReferenceLineEndConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_ReferenceLineEndConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ReferenceLineEndConfig)
}
ReferenceLineEndConfig::ReferenceLineEndConfig(const ReferenceLineEndConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stop_distance_, &from.stop_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_reference_line_remain_length_) -
    reinterpret_cast<char*>(&stop_distance_)) + sizeof(min_reference_line_remain_length_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ReferenceLineEndConfig)
}

void ReferenceLineEndConfig::SharedCtor() {
  stop_distance_ = 0.5;
  min_reference_line_remain_length_ = 50;
}

ReferenceLineEndConfig::~ReferenceLineEndConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ReferenceLineEndConfig)
  SharedDtor();
}

void ReferenceLineEndConfig::SharedDtor() {
}

void ReferenceLineEndConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReferenceLineEndConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReferenceLineEndConfig& ReferenceLineEndConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_ReferenceLineEndConfig.base);
  return *internal_default_instance();
}


void ReferenceLineEndConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ReferenceLineEndConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    stop_distance_ = 0.5;
    min_reference_line_remain_length_ = 50;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReferenceLineEndConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ReferenceLineEndConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double stop_distance = 1 [default = 0.5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_reference_line_remain_length = 2 [default = 50];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_min_reference_line_remain_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_reference_line_remain_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ReferenceLineEndConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ReferenceLineEndConfig)
  return false;
#undef DO_
}

void ReferenceLineEndConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ReferenceLineEndConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double stop_distance = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->stop_distance(), output);
  }

  // optional double min_reference_line_remain_length = 2 [default = 50];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->min_reference_line_remain_length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ReferenceLineEndConfig)
}

::google::protobuf::uint8* ReferenceLineEndConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ReferenceLineEndConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double stop_distance = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->stop_distance(), target);
  }

  // optional double min_reference_line_remain_length = 2 [default = 50];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->min_reference_line_remain_length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ReferenceLineEndConfig)
  return target;
}

size_t ReferenceLineEndConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ReferenceLineEndConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double stop_distance = 1 [default = 0.5];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double min_reference_line_remain_length = 2 [default = 50];
    if (has_min_reference_line_remain_length()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceLineEndConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ReferenceLineEndConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceLineEndConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReferenceLineEndConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ReferenceLineEndConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ReferenceLineEndConfig)
    MergeFrom(*source);
  }
}

void ReferenceLineEndConfig::MergeFrom(const ReferenceLineEndConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ReferenceLineEndConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      stop_distance_ = from.stop_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_reference_line_remain_length_ = from.min_reference_line_remain_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReferenceLineEndConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ReferenceLineEndConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceLineEndConfig::CopyFrom(const ReferenceLineEndConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ReferenceLineEndConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineEndConfig::IsInitialized() const {
  return true;
}

void ReferenceLineEndConfig::Swap(ReferenceLineEndConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReferenceLineEndConfig::InternalSwap(ReferenceLineEndConfig* other) {
  using std::swap;
  swap(stop_distance_, other->stop_distance_);
  swap(min_reference_line_remain_length_, other->min_reference_line_remain_length_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReferenceLineEndConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReroutingConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReroutingConfig::kCooldownTimeFieldNumber;
const int ReroutingConfig::kPrepareReroutingTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReroutingConfig::ReroutingConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_ReroutingConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ReroutingConfig)
}
ReroutingConfig::ReroutingConfig(const ReroutingConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cooldown_time_, &from.cooldown_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&prepare_rerouting_time_) -
    reinterpret_cast<char*>(&cooldown_time_)) + sizeof(prepare_rerouting_time_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ReroutingConfig)
}

void ReroutingConfig::SharedCtor() {
  cooldown_time_ = 3;
  prepare_rerouting_time_ = 2;
}

ReroutingConfig::~ReroutingConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ReroutingConfig)
  SharedDtor();
}

void ReroutingConfig::SharedDtor() {
}

void ReroutingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ReroutingConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReroutingConfig& ReroutingConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_ReroutingConfig.base);
  return *internal_default_instance();
}


void ReroutingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ReroutingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    cooldown_time_ = 3;
    prepare_rerouting_time_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReroutingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ReroutingConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double cooldown_time = 1 [default = 3];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_cooldown_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cooldown_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double prepare_rerouting_time = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_prepare_rerouting_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prepare_rerouting_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ReroutingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ReroutingConfig)
  return false;
#undef DO_
}

void ReroutingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ReroutingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double cooldown_time = 1 [default = 3];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->cooldown_time(), output);
  }

  // optional double prepare_rerouting_time = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->prepare_rerouting_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ReroutingConfig)
}

::google::protobuf::uint8* ReroutingConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ReroutingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double cooldown_time = 1 [default = 3];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->cooldown_time(), target);
  }

  // optional double prepare_rerouting_time = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->prepare_rerouting_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ReroutingConfig)
  return target;
}

size_t ReroutingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ReroutingConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double cooldown_time = 1 [default = 3];
    if (has_cooldown_time()) {
      total_size += 1 + 8;
    }

    // optional double prepare_rerouting_time = 2 [default = 2];
    if (has_prepare_rerouting_time()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReroutingConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ReroutingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ReroutingConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReroutingConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ReroutingConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ReroutingConfig)
    MergeFrom(*source);
  }
}

void ReroutingConfig::MergeFrom(const ReroutingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ReroutingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      cooldown_time_ = from.cooldown_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      prepare_rerouting_time_ = from.prepare_rerouting_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReroutingConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ReroutingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReroutingConfig::CopyFrom(const ReroutingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ReroutingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReroutingConfig::IsInitialized() const {
  return true;
}

void ReroutingConfig::Swap(ReroutingConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReroutingConfig::InternalSwap(ReroutingConfig* other) {
  using std::swap;
  swap(cooldown_time_, other->cooldown_time_);
  swap(prepare_rerouting_time_, other->prepare_rerouting_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ReroutingConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StopSignConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopSignConfig::kEnabledFieldNumber;
const int StopSignConfig::kStopDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopSignConfig::StopSignConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_StopSignConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.StopSignConfig)
}
StopSignConfig::StopSignConfig(const StopSignConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_distance_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(stop_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StopSignConfig)
}

void StopSignConfig::SharedCtor() {
  enabled_ = true;
  stop_distance_ = 1;
}

StopSignConfig::~StopSignConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.StopSignConfig)
  SharedDtor();
}

void StopSignConfig::SharedDtor() {
}

void StopSignConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StopSignConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StopSignConfig& StopSignConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_StopSignConfig.base);
  return *internal_default_instance();
}


void StopSignConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StopSignConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    enabled_ = true;
    stop_distance_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StopSignConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.StopSignConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_distance = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.StopSignConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.StopSignConfig)
  return false;
#undef DO_
}

void StopSignConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.StopSignConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional double stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->stop_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.StopSignConfig)
}

::google::protobuf::uint8* StopSignConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StopSignConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional double stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->stop_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StopSignConfig)
  return target;
}

size_t StopSignConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StopSignConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool enabled = 1 [default = true];
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional double stop_distance = 2 [default = 1];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopSignConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.StopSignConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const StopSignConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopSignConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.StopSignConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.StopSignConfig)
    MergeFrom(*source);
  }
}

void StopSignConfig::MergeFrom(const StopSignConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StopSignConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      stop_distance_ = from.stop_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StopSignConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.StopSignConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopSignConfig::CopyFrom(const StopSignConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StopSignConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSignConfig::IsInitialized() const {
  return true;
}

void StopSignConfig::Swap(StopSignConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopSignConfig::InternalSwap(StopSignConfig* other) {
  using std::swap;
  swap(enabled_, other->enabled_);
  swap(stop_distance_, other->stop_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StopSignConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficLightConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightConfig::kEnabledFieldNumber;
const int TrafficLightConfig::kStopDistanceFieldNumber;
const int TrafficLightConfig::kMaxStopDecelerationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightConfig::TrafficLightConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_TrafficLightConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TrafficLightConfig)
}
TrafficLightConfig::TrafficLightConfig(const TrafficLightConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_stop_deceleration_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(max_stop_deceleration_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrafficLightConfig)
}

void TrafficLightConfig::SharedCtor() {
  enabled_ = true;
  stop_distance_ = 1;
  max_stop_deceleration_ = 4;
}

TrafficLightConfig::~TrafficLightConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrafficLightConfig)
  SharedDtor();
}

void TrafficLightConfig::SharedDtor() {
}

void TrafficLightConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficLightConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightConfig& TrafficLightConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_TrafficLightConfig.base);
  return *internal_default_instance();
}


void TrafficLightConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrafficLightConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    enabled_ = true;
    stop_distance_ = 1;
    max_stop_deceleration_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLightConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.TrafficLightConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_distance = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_stop_deceleration = 3 [default = 4];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_max_stop_deceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_stop_deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.TrafficLightConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.TrafficLightConfig)
  return false;
#undef DO_
}

void TrafficLightConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.TrafficLightConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional double stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->stop_distance(), output);
  }

  // optional double max_stop_deceleration = 3 [default = 4];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_stop_deceleration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.TrafficLightConfig)
}

::google::protobuf::uint8* TrafficLightConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrafficLightConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional double stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->stop_distance(), target);
  }

  // optional double max_stop_deceleration = 3 [default = 4];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_stop_deceleration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrafficLightConfig)
  return target;
}

size_t TrafficLightConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrafficLightConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool enabled = 1 [default = true];
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional double stop_distance = 2 [default = 1];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_stop_deceleration = 3 [default = 4];
    if (has_max_stop_deceleration()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLightConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TrafficLightConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TrafficLightConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TrafficLightConfig)
    MergeFrom(*source);
  }
}

void TrafficLightConfig::MergeFrom(const TrafficLightConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrafficLightConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      stop_distance_ = from.stop_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_stop_deceleration_ = from.max_stop_deceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLightConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TrafficLightConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightConfig::CopyFrom(const TrafficLightConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrafficLightConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightConfig::IsInitialized() const {
  return true;
}

void TrafficLightConfig::Swap(TrafficLightConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightConfig::InternalSwap(TrafficLightConfig* other) {
  using std::swap;
  swap(enabled_, other->enabled_);
  swap(stop_distance_, other->stop_distance_);
  swap(max_stop_deceleration_, other->max_stop_deceleration_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficLightConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void YieldSignConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YieldSignConfig::kEnabledFieldNumber;
const int YieldSignConfig::kStopDistanceFieldNumber;
const int YieldSignConfig::kStartWatchDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YieldSignConfig::YieldSignConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_YieldSignConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.YieldSignConfig)
}
YieldSignConfig::YieldSignConfig(const YieldSignConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_watch_distance_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(start_watch_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.YieldSignConfig)
}

void YieldSignConfig::SharedCtor() {
  enabled_ = true;
  stop_distance_ = 1;
  start_watch_distance_ = 2;
}

YieldSignConfig::~YieldSignConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.YieldSignConfig)
  SharedDtor();
}

void YieldSignConfig::SharedDtor() {
}

void YieldSignConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* YieldSignConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const YieldSignConfig& YieldSignConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_YieldSignConfig.base);
  return *internal_default_instance();
}


void YieldSignConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.YieldSignConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    enabled_ = true;
    stop_distance_ = 1;
    start_watch_distance_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool YieldSignConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.YieldSignConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_distance = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double start_watch_distance = 3 [default = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_start_watch_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_watch_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.YieldSignConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.YieldSignConfig)
  return false;
#undef DO_
}

void YieldSignConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.YieldSignConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // optional double stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->stop_distance(), output);
  }

  // optional double start_watch_distance = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->start_watch_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.YieldSignConfig)
}

::google::protobuf::uint8* YieldSignConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.YieldSignConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enabled = 1 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // optional double stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->stop_distance(), target);
  }

  // optional double start_watch_distance = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->start_watch_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.YieldSignConfig)
  return target;
}

size_t YieldSignConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.YieldSignConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool enabled = 1 [default = true];
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional double stop_distance = 2 [default = 1];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double start_watch_distance = 3 [default = 2];
    if (has_start_watch_distance()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void YieldSignConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.YieldSignConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const YieldSignConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YieldSignConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.YieldSignConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.YieldSignConfig)
    MergeFrom(*source);
  }
}

void YieldSignConfig::MergeFrom(const YieldSignConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.YieldSignConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      stop_distance_ = from.stop_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_watch_distance_ = from.start_watch_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void YieldSignConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.YieldSignConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YieldSignConfig::CopyFrom(const YieldSignConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.YieldSignConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YieldSignConfig::IsInitialized() const {
  return true;
}

void YieldSignConfig::Swap(YieldSignConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YieldSignConfig::InternalSwap(YieldSignConfig* other) {
  using std::swap;
  swap(enabled_, other->enabled_);
  swap(stop_distance_, other->stop_distance_);
  swap(start_watch_distance_, other->start_watch_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata YieldSignConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficRuleConfig::InitAsDefaultInstance() {
  ::apollo::planning::_TrafficRuleConfig_default_instance_.backside_vehicle_ = const_cast< ::apollo::planning::BacksideVehicleConfig*>(
      ::apollo::planning::BacksideVehicleConfig::internal_default_instance());
  ::apollo::planning::_TrafficRuleConfig_default_instance_.crosswalk_ = const_cast< ::apollo::planning::CrosswalkConfig*>(
      ::apollo::planning::CrosswalkConfig::internal_default_instance());
  ::apollo::planning::_TrafficRuleConfig_default_instance_.destination_ = const_cast< ::apollo::planning::DestinationConfig*>(
      ::apollo::planning::DestinationConfig::internal_default_instance());
  ::apollo::planning::_TrafficRuleConfig_default_instance_.keep_clear_ = const_cast< ::apollo::planning::KeepClearConfig*>(
      ::apollo::planning::KeepClearConfig::internal_default_instance());
  ::apollo::planning::_TrafficRuleConfig_default_instance_.reference_line_end_ = const_cast< ::apollo::planning::ReferenceLineEndConfig*>(
      ::apollo::planning::ReferenceLineEndConfig::internal_default_instance());
  ::apollo::planning::_TrafficRuleConfig_default_instance_.rerouting_ = const_cast< ::apollo::planning::ReroutingConfig*>(
      ::apollo::planning::ReroutingConfig::internal_default_instance());
  ::apollo::planning::_TrafficRuleConfig_default_instance_.stop_sign_ = const_cast< ::apollo::planning::StopSignConfig*>(
      ::apollo::planning::StopSignConfig::internal_default_instance());
  ::apollo::planning::_TrafficRuleConfig_default_instance_.traffic_light_ = const_cast< ::apollo::planning::TrafficLightConfig*>(
      ::apollo::planning::TrafficLightConfig::internal_default_instance());
  ::apollo::planning::_TrafficRuleConfig_default_instance_.yield_sign_ = const_cast< ::apollo::planning::YieldSignConfig*>(
      ::apollo::planning::YieldSignConfig::internal_default_instance());
}
void TrafficRuleConfig::set_allocated_backside_vehicle(::apollo::planning::BacksideVehicleConfig* backside_vehicle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_config();
  if (backside_vehicle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      backside_vehicle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, backside_vehicle, submessage_arena);
    }
    set_has_backside_vehicle();
    config_.backside_vehicle_ = backside_vehicle;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.backside_vehicle)
}
void TrafficRuleConfig::set_allocated_crosswalk(::apollo::planning::CrosswalkConfig* crosswalk) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_config();
  if (crosswalk) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      crosswalk = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, crosswalk, submessage_arena);
    }
    set_has_crosswalk();
    config_.crosswalk_ = crosswalk;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.crosswalk)
}
void TrafficRuleConfig::set_allocated_destination(::apollo::planning::DestinationConfig* destination) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_config();
  if (destination) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      destination = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    set_has_destination();
    config_.destination_ = destination;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.destination)
}
void TrafficRuleConfig::set_allocated_keep_clear(::apollo::planning::KeepClearConfig* keep_clear) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_config();
  if (keep_clear) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      keep_clear = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, keep_clear, submessage_arena);
    }
    set_has_keep_clear();
    config_.keep_clear_ = keep_clear;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.keep_clear)
}
void TrafficRuleConfig::set_allocated_reference_line_end(::apollo::planning::ReferenceLineEndConfig* reference_line_end) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_config();
  if (reference_line_end) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reference_line_end = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reference_line_end, submessage_arena);
    }
    set_has_reference_line_end();
    config_.reference_line_end_ = reference_line_end;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.reference_line_end)
}
void TrafficRuleConfig::set_allocated_rerouting(::apollo::planning::ReroutingConfig* rerouting) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_config();
  if (rerouting) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rerouting = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rerouting, submessage_arena);
    }
    set_has_rerouting();
    config_.rerouting_ = rerouting;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.rerouting)
}
void TrafficRuleConfig::set_allocated_stop_sign(::apollo::planning::StopSignConfig* stop_sign) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_config();
  if (stop_sign) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stop_sign = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stop_sign, submessage_arena);
    }
    set_has_stop_sign();
    config_.stop_sign_ = stop_sign;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.stop_sign)
}
void TrafficRuleConfig::set_allocated_traffic_light(::apollo::planning::TrafficLightConfig* traffic_light) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_config();
  if (traffic_light) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      traffic_light = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, traffic_light, submessage_arena);
    }
    set_has_traffic_light();
    config_.traffic_light_ = traffic_light;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.traffic_light)
}
void TrafficRuleConfig::set_allocated_yield_sign(::apollo::planning::YieldSignConfig* yield_sign) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_config();
  if (yield_sign) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      yield_sign = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, yield_sign, submessage_arena);
    }
    set_has_yield_sign();
    config_.yield_sign_ = yield_sign;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TrafficRuleConfig.yield_sign)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficRuleConfig::kRuleIdFieldNumber;
const int TrafficRuleConfig::kEnabledFieldNumber;
const int TrafficRuleConfig::kBacksideVehicleFieldNumber;
const int TrafficRuleConfig::kCrosswalkFieldNumber;
const int TrafficRuleConfig::kDestinationFieldNumber;
const int TrafficRuleConfig::kKeepClearFieldNumber;
const int TrafficRuleConfig::kReferenceLineEndFieldNumber;
const int TrafficRuleConfig::kReroutingFieldNumber;
const int TrafficRuleConfig::kStopSignFieldNumber;
const int TrafficRuleConfig::kTrafficLightFieldNumber;
const int TrafficRuleConfig::kYieldSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficRuleConfig::TrafficRuleConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_TrafficRuleConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TrafficRuleConfig)
}
TrafficRuleConfig::TrafficRuleConfig(const TrafficRuleConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&rule_id_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(rule_id_));
  clear_has_config();
  switch (from.config_case()) {
    case kBacksideVehicle: {
      mutable_backside_vehicle()->::apollo::planning::BacksideVehicleConfig::MergeFrom(from.backside_vehicle());
      break;
    }
    case kCrosswalk: {
      mutable_crosswalk()->::apollo::planning::CrosswalkConfig::MergeFrom(from.crosswalk());
      break;
    }
    case kDestination: {
      mutable_destination()->::apollo::planning::DestinationConfig::MergeFrom(from.destination());
      break;
    }
    case kKeepClear: {
      mutable_keep_clear()->::apollo::planning::KeepClearConfig::MergeFrom(from.keep_clear());
      break;
    }
    case kReferenceLineEnd: {
      mutable_reference_line_end()->::apollo::planning::ReferenceLineEndConfig::MergeFrom(from.reference_line_end());
      break;
    }
    case kRerouting: {
      mutable_rerouting()->::apollo::planning::ReroutingConfig::MergeFrom(from.rerouting());
      break;
    }
    case kStopSign: {
      mutable_stop_sign()->::apollo::planning::StopSignConfig::MergeFrom(from.stop_sign());
      break;
    }
    case kTrafficLight: {
      mutable_traffic_light()->::apollo::planning::TrafficLightConfig::MergeFrom(from.traffic_light());
      break;
    }
    case kYieldSign: {
      mutable_yield_sign()->::apollo::planning::YieldSignConfig::MergeFrom(from.yield_sign());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrafficRuleConfig)
}

void TrafficRuleConfig::SharedCtor() {
  enabled_ = false;
  rule_id_ = 1;
  clear_has_config();
}

TrafficRuleConfig::~TrafficRuleConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrafficRuleConfig)
  SharedDtor();
}

void TrafficRuleConfig::SharedDtor() {
  if (has_config()) {
    clear_config();
  }
}

void TrafficRuleConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficRuleConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficRuleConfig& TrafficRuleConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_TrafficRuleConfig.base);
  return *internal_default_instance();
}


void TrafficRuleConfig::clear_config() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.TrafficRuleConfig)
  switch (config_case()) {
    case kBacksideVehicle: {
      delete config_.backside_vehicle_;
      break;
    }
    case kCrosswalk: {
      delete config_.crosswalk_;
      break;
    }
    case kDestination: {
      delete config_.destination_;
      break;
    }
    case kKeepClear: {
      delete config_.keep_clear_;
      break;
    }
    case kReferenceLineEnd: {
      delete config_.reference_line_end_;
      break;
    }
    case kRerouting: {
      delete config_.rerouting_;
      break;
    }
    case kStopSign: {
      delete config_.stop_sign_;
      break;
    }
    case kTrafficLight: {
      delete config_.traffic_light_;
      break;
    }
    case kYieldSign: {
      delete config_.yield_sign_;
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIG_NOT_SET;
}


void TrafficRuleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrafficRuleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    enabled_ = false;
    rule_id_ = 1;
  }
  clear_config();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficRuleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.TrafficRuleConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.TrafficRuleConfig.RuleId rule_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::TrafficRuleConfig_RuleId_IsValid(value)) {
            set_rule_id(static_cast< ::apollo::planning::TrafficRuleConfig_RuleId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.BacksideVehicleConfig backside_vehicle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_backside_vehicle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.CrosswalkConfig crosswalk = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crosswalk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.DestinationConfig destination = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.KeepClearConfig keep_clear = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_keep_clear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ReferenceLineEndConfig reference_line_end = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_reference_line_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ReroutingConfig rerouting = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rerouting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.StopSignConfig stop_sign = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.TrafficLightConfig traffic_light = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_traffic_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.YieldSignConfig yield_sign = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yield_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.TrafficRuleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.TrafficRuleConfig)
  return false;
#undef DO_
}

void TrafficRuleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.TrafficRuleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.TrafficRuleConfig.RuleId rule_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rule_id(), output);
  }

  // optional bool enabled = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  switch (config_case()) {
    case kBacksideVehicle:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_backside_vehicle(), output);
      break;
    case kCrosswalk:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_crosswalk(), output);
      break;
    case kDestination:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_destination(), output);
      break;
    case kKeepClear:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, this->_internal_keep_clear(), output);
      break;
    case kReferenceLineEnd:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, this->_internal_reference_line_end(), output);
      break;
    case kRerouting:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, this->_internal_rerouting(), output);
      break;
    case kStopSign:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, this->_internal_stop_sign(), output);
      break;
    case kTrafficLight:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, this->_internal_traffic_light(), output);
      break;
    case kYieldSign:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, this->_internal_yield_sign(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.TrafficRuleConfig)
}

::google::protobuf::uint8* TrafficRuleConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrafficRuleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.TrafficRuleConfig.RuleId rule_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rule_id(), target);
  }

  // optional bool enabled = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }

  switch (config_case()) {
    case kBacksideVehicle:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_backside_vehicle(), deterministic, target);
      break;
    case kCrosswalk:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_crosswalk(), deterministic, target);
      break;
    case kDestination:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_destination(), deterministic, target);
      break;
    case kKeepClear:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, this->_internal_keep_clear(), deterministic, target);
      break;
    case kReferenceLineEnd:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, this->_internal_reference_line_end(), deterministic, target);
      break;
    case kRerouting:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, this->_internal_rerouting(), deterministic, target);
      break;
    case kStopSign:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          9, this->_internal_stop_sign(), deterministic, target);
      break;
    case kTrafficLight:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          10, this->_internal_traffic_light(), deterministic, target);
      break;
    case kYieldSign:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          11, this->_internal_yield_sign(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrafficRuleConfig)
  return target;
}

size_t TrafficRuleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrafficRuleConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool enabled = 2;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional .apollo.planning.TrafficRuleConfig.RuleId rule_id = 1;
    if (has_rule_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rule_id());
    }

  }
  switch (config_case()) {
    // optional .apollo.planning.BacksideVehicleConfig backside_vehicle = 3;
    case kBacksideVehicle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *config_.backside_vehicle_);
      break;
    }
    // optional .apollo.planning.CrosswalkConfig crosswalk = 4;
    case kCrosswalk: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *config_.crosswalk_);
      break;
    }
    // optional .apollo.planning.DestinationConfig destination = 5;
    case kDestination: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *config_.destination_);
      break;
    }
    // optional .apollo.planning.KeepClearConfig keep_clear = 6;
    case kKeepClear: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *config_.keep_clear_);
      break;
    }
    // optional .apollo.planning.ReferenceLineEndConfig reference_line_end = 7;
    case kReferenceLineEnd: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *config_.reference_line_end_);
      break;
    }
    // optional .apollo.planning.ReroutingConfig rerouting = 8;
    case kRerouting: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *config_.rerouting_);
      break;
    }
    // optional .apollo.planning.StopSignConfig stop_sign = 9;
    case kStopSign: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *config_.stop_sign_);
      break;
    }
    // optional .apollo.planning.TrafficLightConfig traffic_light = 10;
    case kTrafficLight: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *config_.traffic_light_);
      break;
    }
    // optional .apollo.planning.YieldSignConfig yield_sign = 11;
    case kYieldSign: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *config_.yield_sign_);
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficRuleConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TrafficRuleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficRuleConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficRuleConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TrafficRuleConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TrafficRuleConfig)
    MergeFrom(*source);
  }
}

void TrafficRuleConfig::MergeFrom(const TrafficRuleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrafficRuleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      enabled_ = from.enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      rule_id_ = from.rule_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.config_case()) {
    case kBacksideVehicle: {
      mutable_backside_vehicle()->::apollo::planning::BacksideVehicleConfig::MergeFrom(from.backside_vehicle());
      break;
    }
    case kCrosswalk: {
      mutable_crosswalk()->::apollo::planning::CrosswalkConfig::MergeFrom(from.crosswalk());
      break;
    }
    case kDestination: {
      mutable_destination()->::apollo::planning::DestinationConfig::MergeFrom(from.destination());
      break;
    }
    case kKeepClear: {
      mutable_keep_clear()->::apollo::planning::KeepClearConfig::MergeFrom(from.keep_clear());
      break;
    }
    case kReferenceLineEnd: {
      mutable_reference_line_end()->::apollo::planning::ReferenceLineEndConfig::MergeFrom(from.reference_line_end());
      break;
    }
    case kRerouting: {
      mutable_rerouting()->::apollo::planning::ReroutingConfig::MergeFrom(from.rerouting());
      break;
    }
    case kStopSign: {
      mutable_stop_sign()->::apollo::planning::StopSignConfig::MergeFrom(from.stop_sign());
      break;
    }
    case kTrafficLight: {
      mutable_traffic_light()->::apollo::planning::TrafficLightConfig::MergeFrom(from.traffic_light());
      break;
    }
    case kYieldSign: {
      mutable_yield_sign()->::apollo::planning::YieldSignConfig::MergeFrom(from.yield_sign());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
}

void TrafficRuleConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TrafficRuleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficRuleConfig::CopyFrom(const TrafficRuleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrafficRuleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficRuleConfig::IsInitialized() const {
  return true;
}

void TrafficRuleConfig::Swap(TrafficRuleConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficRuleConfig::InternalSwap(TrafficRuleConfig* other) {
  using std::swap;
  swap(enabled_, other->enabled_);
  swap(rule_id_, other->rule_id_);
  swap(config_, other->config_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficRuleConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficRuleConfigs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficRuleConfigs::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficRuleConfigs::TrafficRuleConfigs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_TrafficRuleConfigs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TrafficRuleConfigs)
}
TrafficRuleConfigs::TrafficRuleConfigs(const TrafficRuleConfigs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      config_(from.config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrafficRuleConfigs)
}

void TrafficRuleConfigs::SharedCtor() {
}

TrafficRuleConfigs::~TrafficRuleConfigs() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrafficRuleConfigs)
  SharedDtor();
}

void TrafficRuleConfigs::SharedDtor() {
}

void TrafficRuleConfigs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficRuleConfigs::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficRuleConfigs& TrafficRuleConfigs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::scc_info_TrafficRuleConfigs.base);
  return *internal_default_instance();
}


void TrafficRuleConfigs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrafficRuleConfigs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficRuleConfigs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.TrafficRuleConfigs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.TrafficRuleConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.TrafficRuleConfigs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.TrafficRuleConfigs)
  return false;
#undef DO_
}

void TrafficRuleConfigs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.TrafficRuleConfigs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.TrafficRuleConfig config = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->config_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->config(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.TrafficRuleConfigs)
}

::google::protobuf::uint8* TrafficRuleConfigs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrafficRuleConfigs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.TrafficRuleConfig config = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->config_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->config(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrafficRuleConfigs)
  return target;
}

size_t TrafficRuleConfigs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrafficRuleConfigs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.TrafficRuleConfig config = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->config_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->config(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficRuleConfigs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TrafficRuleConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficRuleConfigs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficRuleConfigs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TrafficRuleConfigs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TrafficRuleConfigs)
    MergeFrom(*source);
  }
}

void TrafficRuleConfigs::MergeFrom(const TrafficRuleConfigs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrafficRuleConfigs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_.MergeFrom(from.config_);
}

void TrafficRuleConfigs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TrafficRuleConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficRuleConfigs::CopyFrom(const TrafficRuleConfigs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrafficRuleConfigs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficRuleConfigs::IsInitialized() const {
  return true;
}

void TrafficRuleConfigs::Swap(TrafficRuleConfigs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficRuleConfigs::InternalSwap(TrafficRuleConfigs* other) {
  using std::swap;
  CastToBase(&config_)->InternalSwap(CastToBase(&other->config_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficRuleConfigs::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2ftraffic_5frule_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::BacksideVehicleConfig* Arena::CreateMaybeMessage< ::apollo::planning::BacksideVehicleConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::BacksideVehicleConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::CrosswalkConfig* Arena::CreateMaybeMessage< ::apollo::planning::CrosswalkConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::CrosswalkConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::DestinationConfig* Arena::CreateMaybeMessage< ::apollo::planning::DestinationConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::DestinationConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::KeepClearConfig* Arena::CreateMaybeMessage< ::apollo::planning::KeepClearConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::KeepClearConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ReferenceLineEndConfig* Arena::CreateMaybeMessage< ::apollo::planning::ReferenceLineEndConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ReferenceLineEndConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ReroutingConfig* Arena::CreateMaybeMessage< ::apollo::planning::ReroutingConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ReroutingConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::StopSignConfig* Arena::CreateMaybeMessage< ::apollo::planning::StopSignConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::StopSignConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::TrafficLightConfig* Arena::CreateMaybeMessage< ::apollo::planning::TrafficLightConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::TrafficLightConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::YieldSignConfig* Arena::CreateMaybeMessage< ::apollo::planning::YieldSignConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::YieldSignConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::TrafficRuleConfig* Arena::CreateMaybeMessage< ::apollo::planning::TrafficRuleConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::TrafficRuleConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::TrafficRuleConfigs* Arena::CreateMaybeMessage< ::apollo::planning::TrafficRuleConfigs >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::TrafficRuleConfigs >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
