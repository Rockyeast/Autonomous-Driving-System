// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_semantic_map_config.proto

#ifndef PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto
#define PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto 

namespace protobuf_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto
namespace apollo {
namespace planning {
class PlanningSemanticMapConfig;
class PlanningSemanticMapConfigDefaultTypeInternal;
extern PlanningSemanticMapConfigDefaultTypeInternal _PlanningSemanticMapConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::planning::PlanningSemanticMapConfig* Arena::CreateMaybeMessage<::apollo::planning::PlanningSemanticMapConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace planning {

// ===================================================================

class PlanningSemanticMapConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.PlanningSemanticMapConfig) */ {
 public:
  PlanningSemanticMapConfig();
  virtual ~PlanningSemanticMapConfig();

  PlanningSemanticMapConfig(const PlanningSemanticMapConfig& from);

  inline PlanningSemanticMapConfig& operator=(const PlanningSemanticMapConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlanningSemanticMapConfig(PlanningSemanticMapConfig&& from) noexcept
    : PlanningSemanticMapConfig() {
    *this = ::std::move(from);
  }

  inline PlanningSemanticMapConfig& operator=(PlanningSemanticMapConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlanningSemanticMapConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningSemanticMapConfig* internal_default_instance() {
    return reinterpret_cast<const PlanningSemanticMapConfig*>(
               &_PlanningSemanticMapConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PlanningSemanticMapConfig* other);
  friend void swap(PlanningSemanticMapConfig& a, PlanningSemanticMapConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlanningSemanticMapConfig* New() const final {
    return CreateMaybeMessage<PlanningSemanticMapConfig>(NULL);
  }

  PlanningSemanticMapConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlanningSemanticMapConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlanningSemanticMapConfig& from);
  void MergeFrom(const PlanningSemanticMapConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningSemanticMapConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double resolution = 1;
  bool has_resolution() const;
  void clear_resolution();
  static const int kResolutionFieldNumber = 1;
  double resolution() const;
  void set_resolution(double value);

  // optional int32 base_map_padding = 200;
  bool has_base_map_padding() const;
  void clear_base_map_padding();
  static const int kBaseMapPaddingFieldNumber = 200;
  ::google::protobuf::int32 base_map_padding() const;
  void set_base_map_padding(::google::protobuf::int32 value);

  // optional int32 height = 100;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 100;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional int32 width = 101;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 101;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 ego_idx_x = 102;
  bool has_ego_idx_x() const;
  void clear_ego_idx_x();
  static const int kEgoIdxXFieldNumber = 102;
  ::google::protobuf::int32 ego_idx_x() const;
  void set_ego_idx_x(::google::protobuf::int32 value);

  // optional int32 ego_idx_y = 103;
  bool has_ego_idx_y() const;
  void clear_ego_idx_y();
  static const int kEgoIdxYFieldNumber = 103;
  ::google::protobuf::int32 ego_idx_y() const;
  void set_ego_idx_y(::google::protobuf::int32 value);

  // optional double max_rand_delta_phi = 104;
  bool has_max_rand_delta_phi() const;
  void clear_max_rand_delta_phi();
  static const int kMaxRandDeltaPhiFieldNumber = 104;
  double max_rand_delta_phi() const;
  void set_max_rand_delta_phi(double value);

  // optional double max_ego_future_horizon = 105;
  bool has_max_ego_future_horizon() const;
  void clear_max_ego_future_horizon();
  static const int kMaxEgoFutureHorizonFieldNumber = 105;
  double max_ego_future_horizon() const;
  void set_max_ego_future_horizon(double value);

  // optional double max_ego_past_horizon = 106;
  bool has_max_ego_past_horizon() const;
  void clear_max_ego_past_horizon();
  static const int kMaxEgoPastHorizonFieldNumber = 106;
  double max_ego_past_horizon() const;
  void set_max_ego_past_horizon(double value);

  // optional double max_obs_future_horizon = 107;
  bool has_max_obs_future_horizon() const;
  void clear_max_obs_future_horizon();
  static const int kMaxObsFutureHorizonFieldNumber = 107;
  double max_obs_future_horizon() const;
  void set_max_obs_future_horizon(double value);

  // optional double max_obs_past_horizon = 108;
  bool has_max_obs_past_horizon() const;
  void clear_max_obs_past_horizon();
  static const int kMaxObsPastHorizonFieldNumber = 108;
  double max_obs_past_horizon() const;
  void set_max_obs_past_horizon(double value);

  // optional double city_driving_max_speed = 201;
  bool has_city_driving_max_speed() const;
  void clear_city_driving_max_speed();
  static const int kCityDrivingMaxSpeedFieldNumber = 201;
  double city_driving_max_speed() const;
  void set_city_driving_max_speed(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.PlanningSemanticMapConfig)
 private:
  void set_has_resolution();
  void clear_has_resolution();
  void set_has_height();
  void clear_has_height();
  void set_has_width();
  void clear_has_width();
  void set_has_ego_idx_x();
  void clear_has_ego_idx_x();
  void set_has_ego_idx_y();
  void clear_has_ego_idx_y();
  void set_has_max_rand_delta_phi();
  void clear_has_max_rand_delta_phi();
  void set_has_max_ego_future_horizon();
  void clear_has_max_ego_future_horizon();
  void set_has_max_ego_past_horizon();
  void clear_has_max_ego_past_horizon();
  void set_has_max_obs_future_horizon();
  void clear_has_max_obs_future_horizon();
  void set_has_max_obs_past_horizon();
  void clear_has_max_obs_past_horizon();
  void set_has_base_map_padding();
  void clear_has_base_map_padding();
  void set_has_city_driving_max_speed();
  void clear_has_city_driving_max_speed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double resolution_;
  ::google::protobuf::int32 base_map_padding_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 ego_idx_x_;
  ::google::protobuf::int32 ego_idx_y_;
  double max_rand_delta_phi_;
  double max_ego_future_horizon_;
  double max_ego_past_horizon_;
  double max_obs_future_horizon_;
  double max_obs_past_horizon_;
  double city_driving_max_speed_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlanningSemanticMapConfig

// optional double resolution = 1;
inline bool PlanningSemanticMapConfig::has_resolution() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningSemanticMapConfig::set_has_resolution() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlanningSemanticMapConfig::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlanningSemanticMapConfig::clear_resolution() {
  resolution_ = 0;
  clear_has_resolution();
}
inline double PlanningSemanticMapConfig::resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.resolution)
  return resolution_;
}
inline void PlanningSemanticMapConfig::set_resolution(double value) {
  set_has_resolution();
  resolution_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.resolution)
}

// optional int32 height = 100;
inline bool PlanningSemanticMapConfig::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanningSemanticMapConfig::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlanningSemanticMapConfig::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlanningSemanticMapConfig::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 PlanningSemanticMapConfig::height() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.height)
  return height_;
}
inline void PlanningSemanticMapConfig::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.height)
}

// optional int32 width = 101;
inline bool PlanningSemanticMapConfig::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanningSemanticMapConfig::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlanningSemanticMapConfig::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlanningSemanticMapConfig::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 PlanningSemanticMapConfig::width() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.width)
  return width_;
}
inline void PlanningSemanticMapConfig::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.width)
}

// optional int32 ego_idx_x = 102;
inline bool PlanningSemanticMapConfig::has_ego_idx_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanningSemanticMapConfig::set_has_ego_idx_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlanningSemanticMapConfig::clear_has_ego_idx_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlanningSemanticMapConfig::clear_ego_idx_x() {
  ego_idx_x_ = 0;
  clear_has_ego_idx_x();
}
inline ::google::protobuf::int32 PlanningSemanticMapConfig::ego_idx_x() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.ego_idx_x)
  return ego_idx_x_;
}
inline void PlanningSemanticMapConfig::set_ego_idx_x(::google::protobuf::int32 value) {
  set_has_ego_idx_x();
  ego_idx_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.ego_idx_x)
}

// optional int32 ego_idx_y = 103;
inline bool PlanningSemanticMapConfig::has_ego_idx_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlanningSemanticMapConfig::set_has_ego_idx_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlanningSemanticMapConfig::clear_has_ego_idx_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlanningSemanticMapConfig::clear_ego_idx_y() {
  ego_idx_y_ = 0;
  clear_has_ego_idx_y();
}
inline ::google::protobuf::int32 PlanningSemanticMapConfig::ego_idx_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.ego_idx_y)
  return ego_idx_y_;
}
inline void PlanningSemanticMapConfig::set_ego_idx_y(::google::protobuf::int32 value) {
  set_has_ego_idx_y();
  ego_idx_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.ego_idx_y)
}

// optional double max_rand_delta_phi = 104;
inline bool PlanningSemanticMapConfig::has_max_rand_delta_phi() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlanningSemanticMapConfig::set_has_max_rand_delta_phi() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlanningSemanticMapConfig::clear_has_max_rand_delta_phi() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlanningSemanticMapConfig::clear_max_rand_delta_phi() {
  max_rand_delta_phi_ = 0;
  clear_has_max_rand_delta_phi();
}
inline double PlanningSemanticMapConfig::max_rand_delta_phi() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.max_rand_delta_phi)
  return max_rand_delta_phi_;
}
inline void PlanningSemanticMapConfig::set_max_rand_delta_phi(double value) {
  set_has_max_rand_delta_phi();
  max_rand_delta_phi_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.max_rand_delta_phi)
}

// optional double max_ego_future_horizon = 105;
inline bool PlanningSemanticMapConfig::has_max_ego_future_horizon() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlanningSemanticMapConfig::set_has_max_ego_future_horizon() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlanningSemanticMapConfig::clear_has_max_ego_future_horizon() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlanningSemanticMapConfig::clear_max_ego_future_horizon() {
  max_ego_future_horizon_ = 0;
  clear_has_max_ego_future_horizon();
}
inline double PlanningSemanticMapConfig::max_ego_future_horizon() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.max_ego_future_horizon)
  return max_ego_future_horizon_;
}
inline void PlanningSemanticMapConfig::set_max_ego_future_horizon(double value) {
  set_has_max_ego_future_horizon();
  max_ego_future_horizon_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.max_ego_future_horizon)
}

// optional double max_ego_past_horizon = 106;
inline bool PlanningSemanticMapConfig::has_max_ego_past_horizon() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlanningSemanticMapConfig::set_has_max_ego_past_horizon() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlanningSemanticMapConfig::clear_has_max_ego_past_horizon() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlanningSemanticMapConfig::clear_max_ego_past_horizon() {
  max_ego_past_horizon_ = 0;
  clear_has_max_ego_past_horizon();
}
inline double PlanningSemanticMapConfig::max_ego_past_horizon() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.max_ego_past_horizon)
  return max_ego_past_horizon_;
}
inline void PlanningSemanticMapConfig::set_max_ego_past_horizon(double value) {
  set_has_max_ego_past_horizon();
  max_ego_past_horizon_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.max_ego_past_horizon)
}

// optional double max_obs_future_horizon = 107;
inline bool PlanningSemanticMapConfig::has_max_obs_future_horizon() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlanningSemanticMapConfig::set_has_max_obs_future_horizon() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlanningSemanticMapConfig::clear_has_max_obs_future_horizon() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlanningSemanticMapConfig::clear_max_obs_future_horizon() {
  max_obs_future_horizon_ = 0;
  clear_has_max_obs_future_horizon();
}
inline double PlanningSemanticMapConfig::max_obs_future_horizon() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.max_obs_future_horizon)
  return max_obs_future_horizon_;
}
inline void PlanningSemanticMapConfig::set_max_obs_future_horizon(double value) {
  set_has_max_obs_future_horizon();
  max_obs_future_horizon_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.max_obs_future_horizon)
}

// optional double max_obs_past_horizon = 108;
inline bool PlanningSemanticMapConfig::has_max_obs_past_horizon() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlanningSemanticMapConfig::set_has_max_obs_past_horizon() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlanningSemanticMapConfig::clear_has_max_obs_past_horizon() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlanningSemanticMapConfig::clear_max_obs_past_horizon() {
  max_obs_past_horizon_ = 0;
  clear_has_max_obs_past_horizon();
}
inline double PlanningSemanticMapConfig::max_obs_past_horizon() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.max_obs_past_horizon)
  return max_obs_past_horizon_;
}
inline void PlanningSemanticMapConfig::set_max_obs_past_horizon(double value) {
  set_has_max_obs_past_horizon();
  max_obs_past_horizon_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.max_obs_past_horizon)
}

// optional int32 base_map_padding = 200;
inline bool PlanningSemanticMapConfig::has_base_map_padding() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningSemanticMapConfig::set_has_base_map_padding() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlanningSemanticMapConfig::clear_has_base_map_padding() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlanningSemanticMapConfig::clear_base_map_padding() {
  base_map_padding_ = 0;
  clear_has_base_map_padding();
}
inline ::google::protobuf::int32 PlanningSemanticMapConfig::base_map_padding() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.base_map_padding)
  return base_map_padding_;
}
inline void PlanningSemanticMapConfig::set_base_map_padding(::google::protobuf::int32 value) {
  set_has_base_map_padding();
  base_map_padding_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.base_map_padding)
}

// optional double city_driving_max_speed = 201;
inline bool PlanningSemanticMapConfig::has_city_driving_max_speed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlanningSemanticMapConfig::set_has_city_driving_max_speed() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlanningSemanticMapConfig::clear_has_city_driving_max_speed() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlanningSemanticMapConfig::clear_city_driving_max_speed() {
  city_driving_max_speed_ = 0;
  clear_has_city_driving_max_speed();
}
inline double PlanningSemanticMapConfig::city_driving_max_speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.PlanningSemanticMapConfig.city_driving_max_speed)
  return city_driving_max_speed_;
}
inline void PlanningSemanticMapConfig::set_city_driving_max_speed(double value) {
  set_has_city_driving_max_speed();
  city_driving_max_speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.PlanningSemanticMapConfig.city_driving_max_speed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto
