// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning.proto

#include "modules/planning/proto/planning.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EngageAdvice;
}  // namespace protobuf_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto
namespace protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Polygon;
}  // namespace protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto
namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fheader_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto
namespace protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PathPoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TrajectoryPoint;
}  // namespace protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Id;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto
namespace protobuf_modules_2fplanning_2fproto_2fdecision_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fdecision_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_DecisionResult;
}  // namespace protobuf_modules_2fplanning_2fproto_2fdecision_2eproto
namespace protobuf_modules_2fplanning_2fproto_2fplanning_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EStop;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RSSInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TaskStats;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ADCTrajectory_CriticalRegion;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LatencyStats;
}  // namespace protobuf_modules_2fplanning_2fproto_2fplanning_2eproto
namespace protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Debug;
}  // namespace protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto
namespace apollo {
namespace planning {
class EStopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EStop>
      _instance;
} _EStop_default_instance_;
class TaskStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskStats>
      _instance;
} _TaskStats_default_instance_;
class LatencyStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LatencyStats>
      _instance;
} _LatencyStats_default_instance_;
class RSSInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RSSInfo>
      _instance;
} _RSSInfo_default_instance_;
class ADCTrajectory_CriticalRegionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ADCTrajectory_CriticalRegion>
      _instance;
} _ADCTrajectory_CriticalRegion_default_instance_;
class ADCTrajectoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ADCTrajectory>
      _instance;
} _ADCTrajectory_default_instance_;
}  // namespace planning
}  // namespace apollo
namespace protobuf_modules_2fplanning_2fproto_2fplanning_2eproto {
static void InitDefaultsEStop() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_EStop_default_instance_;
    new (ptr) ::apollo::planning::EStop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::EStop::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EStop =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEStop}, {}};

static void InitDefaultsTaskStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_TaskStats_default_instance_;
    new (ptr) ::apollo::planning::TaskStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::TaskStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TaskStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTaskStats}, {}};

static void InitDefaultsLatencyStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_LatencyStats_default_instance_;
    new (ptr) ::apollo::planning::LatencyStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::LatencyStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LatencyStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLatencyStats}, {
      &protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::scc_info_TaskStats.base,}};

static void InitDefaultsRSSInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_RSSInfo_default_instance_;
    new (ptr) ::apollo::planning::RSSInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::RSSInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RSSInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRSSInfo}, {}};

static void InitDefaultsADCTrajectory_CriticalRegion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ADCTrajectory_CriticalRegion_default_instance_;
    new (ptr) ::apollo::planning::ADCTrajectory_CriticalRegion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ADCTrajectory_CriticalRegion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ADCTrajectory_CriticalRegion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsADCTrajectory_CriticalRegion}, {
      &protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::scc_info_Polygon.base,}};

static void InitDefaultsADCTrajectory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ADCTrajectory_default_instance_;
    new (ptr) ::apollo::planning::ADCTrajectory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ADCTrajectory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<11> scc_info_ADCTrajectory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsADCTrajectory}, {
      &protobuf_modules_2fcommon_2fproto_2fheader_2eproto::scc_info_Header.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::scc_info_EStop.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::scc_info_Debug.base,
      &protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::scc_info_TrajectoryPoint.base,
      &protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::scc_info_PathPoint.base,
      &protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::scc_info_DecisionResult.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::scc_info_LatencyStats.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::scc_info_Id.base,
      &protobuf_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto::scc_info_EngageAdvice.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::scc_info_ADCTrajectory_CriticalRegion.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::scc_info_RSSInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_EStop.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LatencyStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RSSInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ADCTrajectory_CriticalRegion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ADCTrajectory.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::EStop, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::EStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::EStop, is_estop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::EStop, reason_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TaskStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TaskStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TaskStats, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TaskStats, time_ms_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LatencyStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LatencyStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LatencyStats, total_time_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LatencyStats, task_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LatencyStats, init_frame_time_ms_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RSSInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RSSInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RSSInfo, is_rss_safe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RSSInfo, cur_dist_lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RSSInfo, rss_safe_dist_lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RSSInfo, acc_lon_range_minimum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RSSInfo, acc_lon_range_maximum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RSSInfo, acc_lat_left_range_minimum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RSSInfo, acc_lat_left_range_maximum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RSSInfo, acc_lat_right_range_minimum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RSSInfo, acc_lat_right_range_maximum_),
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory_CriticalRegion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory_CriticalRegion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory_CriticalRegion, region_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, total_path_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, total_path_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, estop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, is_replan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, trajectory_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, path_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, decision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, latency_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, routing_header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, right_of_way_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, engage_advice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, critical_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, trajectory_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, replan_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, target_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, car_in_dead_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectory, rss_info_),
  1,
  10,
  11,
  2,
  3,
  13,
  12,
  ~0u,
  ~0u,
  4,
  5,
  6,
  15,
  ~0u,
  7,
  8,
  16,
  0,
  ~0u,
  14,
  9,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::planning::EStop)},
  { 9, 16, sizeof(::apollo::planning::TaskStats)},
  { 18, 26, sizeof(::apollo::planning::LatencyStats)},
  { 29, 43, sizeof(::apollo::planning::RSSInfo)},
  { 52, 58, sizeof(::apollo::planning::ADCTrajectory_CriticalRegion)},
  { 59, 85, sizeof(::apollo::planning::ADCTrajectory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_EStop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_TaskStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_LatencyStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_RSSInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ADCTrajectory_CriticalRegion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ADCTrajectory_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/planning/proto/planning.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n%modules/planning/proto/planning.proto\022"
      "\017apollo.planning\032\"modules/canbus/proto/c"
      "hassis.proto\032&modules/common/proto/drive"
      "_state.proto\032#modules/common/proto/geome"
      "try.proto\032!modules/common/proto/header.p"
      "roto\032$modules/common/proto/pnc_point.pro"
      "to\032\036modules/map/proto/map_id.proto\032%modu"
      "les/planning/proto/decision.proto\032.modul"
      "es/planning/proto/planning_internal.prot"
      "o\")\n\005EStop\022\020\n\010is_estop\030\001 \001(\010\022\016\n\006reason\030\002"
      " \001(\t\"*\n\tTaskStats\022\014\n\004name\030\001 \001(\t\022\017\n\007time_"
      "ms\030\002 \001(\001\"q\n\014LatencyStats\022\025\n\rtotal_time_m"
      "s\030\001 \001(\001\022.\n\ntask_stats\030\002 \003(\0132\032.apollo.pla"
      "nning.TaskStats\022\032\n\022init_frame_time_ms\030\003 "
      "\001(\001\"\237\002\n\007RSSInfo\022\023\n\013is_rss_safe\030\001 \001(\010\022\024\n\014"
      "cur_dist_lon\030\002 \001(\001\022\031\n\021rss_safe_dist_lon\030"
      "\003 \001(\001\022\035\n\025acc_lon_range_minimum\030\004 \001(\001\022\035\n\025"
      "acc_lon_range_maximum\030\005 \001(\001\022\"\n\032acc_lat_l"
      "eft_range_minimum\030\006 \001(\001\022\"\n\032acc_lat_left_"
      "range_maximum\030\007 \001(\001\022#\n\033acc_lat_right_ran"
      "ge_minimum\030\010 \001(\001\022#\n\033acc_lat_right_range_"
      "maximum\030\t \001(\001\"\243\t\n\rADCTrajectory\022%\n\006heade"
      "r\030\001 \001(\0132\025.apollo.common.Header\022\031\n\021total_"
      "path_length\030\002 \001(\001\022\027\n\017total_path_time\030\003 \001"
      "(\001\022%\n\005estop\030\006 \001(\0132\026.apollo.planning.ESto"
      "p\022.\n\005debug\030\010 \001(\0132\037.apollo.planning_inter"
      "nal.Debug\022\030\n\tis_replan\030\t \001(\010:\005false\0221\n\004g"
      "ear\030\n \001(\0162#.apollo.canbus.Chassis.GearPo"
      "sition\0228\n\020trajectory_point\030\014 \003(\0132\036.apoll"
      "o.common.TrajectoryPoint\022,\n\npath_point\030\r"
      " \003(\0132\030.apollo.common.PathPoint\0221\n\010decisi"
      "on\030\016 \001(\0132\037.apollo.planning.DecisionResul"
      "t\0224\n\rlatency_stats\030\017 \001(\0132\035.apollo.planni"
      "ng.LatencyStats\022-\n\016routing_header\030\020 \001(\0132"
      "\025.apollo.common.Header\022L\n\023right_of_way_s"
      "tatus\030\021 \001(\0162/.apollo.planning.ADCTraject"
      "ory.RightOfWayStatus\022!\n\007lane_id\030\022 \003(\0132\020."
      "apollo.hdmap.Id\0222\n\rengage_advice\030\023 \001(\0132\033"
      ".apollo.common.EngageAdvice\022F\n\017critical_"
      "region\030\024 \001(\0132-.apollo.planning.ADCTrajec"
      "tory.CriticalRegion\022O\n\017trajectory_type\030\025"
      " \001(\0162-.apollo.planning.ADCTrajectory.Tra"
      "jectoryType:\007UNKNOWN\022\025\n\rreplan_reason\030\026 "
      "\001(\t\022(\n\016target_lane_id\030\027 \003(\0132\020.apollo.hdm"
      "ap.Id\022\027\n\017car_in_dead_end\030\030 \001(\010\022*\n\010rss_in"
      "fo\030d \001(\0132\030.apollo.planning.RSSInfo\0328\n\016Cr"
      "iticalRegion\022&\n\006region\030\001 \003(\0132\026.apollo.co"
      "mmon.Polygon\"2\n\020RightOfWayStatus\022\017\n\013UNPR"
      "OTECTED\020\000\022\r\n\tPROTECTED\020\001\"a\n\016TrajectoryTy"
      "pe\022\013\n\007UNKNOWN\020\000\022\n\n\006NORMAL\020\001\022\021\n\rPATH_FALL"
      "BACK\020\002\022\022\n\016SPEED_FALLBACK\020\003\022\017\n\013PATH_REUSE"
      "D\020\004*_\n\007JucType\022\013\n\007UNKNOWN\020\000\022\013\n\007IN_ROAD\020\001"
      "\022\016\n\nCROSS_ROAD\020\002\022\r\n\tFORK_ROAD\020\003\022\r\n\tMAIN_"
      "SIDE\020\004\022\014\n\010DEAD_END\020\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2140);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/planning.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::AddDescriptors();
  ::protobuf_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto::AddDescriptors();
  ::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::AddDescriptors();
  ::protobuf_modules_2fplanning_2fproto_2fdecision_2eproto::AddDescriptors();
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fplanning_2fproto_2fplanning_2eproto
namespace apollo {
namespace planning {
const ::google::protobuf::EnumDescriptor* ADCTrajectory_RightOfWayStatus_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_enum_descriptors[0];
}
bool ADCTrajectory_RightOfWayStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ADCTrajectory_RightOfWayStatus ADCTrajectory::UNPROTECTED;
const ADCTrajectory_RightOfWayStatus ADCTrajectory::PROTECTED;
const ADCTrajectory_RightOfWayStatus ADCTrajectory::RightOfWayStatus_MIN;
const ADCTrajectory_RightOfWayStatus ADCTrajectory::RightOfWayStatus_MAX;
const int ADCTrajectory::RightOfWayStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ADCTrajectory_TrajectoryType_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_enum_descriptors[1];
}
bool ADCTrajectory_TrajectoryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ADCTrajectory_TrajectoryType ADCTrajectory::UNKNOWN;
const ADCTrajectory_TrajectoryType ADCTrajectory::NORMAL;
const ADCTrajectory_TrajectoryType ADCTrajectory::PATH_FALLBACK;
const ADCTrajectory_TrajectoryType ADCTrajectory::SPEED_FALLBACK;
const ADCTrajectory_TrajectoryType ADCTrajectory::PATH_REUSED;
const ADCTrajectory_TrajectoryType ADCTrajectory::TrajectoryType_MIN;
const ADCTrajectory_TrajectoryType ADCTrajectory::TrajectoryType_MAX;
const int ADCTrajectory::TrajectoryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* JucType_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_enum_descriptors[2];
}
bool JucType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void EStop::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EStop::kIsEstopFieldNumber;
const int EStop::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EStop::EStop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::scc_info_EStop.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.EStop)
}
EStop::EStop(const EStop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  is_estop_ = from.is_estop_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.EStop)
}

void EStop::SharedCtor() {
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_estop_ = false;
}

EStop::~EStop() {
  // @@protoc_insertion_point(destructor:apollo.planning.EStop)
  SharedDtor();
}

void EStop::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EStop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EStop::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EStop& EStop::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::scc_info_EStop.base);
  return *internal_default_instance();
}


void EStop::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.EStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmptyNoArena();
  }
  is_estop_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.EStop)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_estop = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_estop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_estop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.EStop.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.EStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.EStop)
  return false;
#undef DO_
}

void EStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.EStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_estop = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_estop(), output);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.EStop.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.EStop)
}

::google::protobuf::uint8* EStop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.EStop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_estop = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_estop(), target);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.EStop.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.EStop)
  return target;
}

size_t EStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.EStop)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional bool is_estop = 1;
    if (has_is_estop()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EStop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.EStop)
  GOOGLE_DCHECK_NE(&from, this);
  const EStop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EStop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.EStop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.EStop)
    MergeFrom(*source);
  }
}

void EStop::MergeFrom(const EStop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.EStop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_estop_ = from.is_estop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EStop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.EStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EStop::CopyFrom(const EStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.EStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EStop::IsInitialized() const {
  return true;
}

void EStop::Swap(EStop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EStop::InternalSwap(EStop* other) {
  using std::swap;
  reason_.Swap(&other->reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_estop_, other->is_estop_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EStop::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaskStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskStats::kNameFieldNumber;
const int TaskStats::kTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskStats::TaskStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::scc_info_TaskStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TaskStats)
}
TaskStats::TaskStats(const TaskStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  time_ms_ = from.time_ms_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TaskStats)
}

void TaskStats::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ms_ = 0;
}

TaskStats::~TaskStats() {
  // @@protoc_insertion_point(destructor:apollo.planning.TaskStats)
  SharedDtor();
}

void TaskStats::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TaskStats::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskStats& TaskStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::scc_info_TaskStats.base);
  return *internal_default_instance();
}


void TaskStats::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TaskStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  time_ms_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.TaskStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.TaskStats.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.TaskStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.TaskStats)
  return false;
#undef DO_
}

void TaskStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.TaskStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TaskStats.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional double time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.TaskStats)
}

::google::protobuf::uint8* TaskStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TaskStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TaskStats.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional double time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TaskStats)
  return target;
}

size_t TaskStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TaskStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double time_ms = 2;
    if (has_time_ms()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TaskStats)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TaskStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TaskStats)
    MergeFrom(*source);
  }
}

void TaskStats::MergeFrom(const TaskStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TaskStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_ms_ = from.time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TaskStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TaskStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStats::CopyFrom(const TaskStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TaskStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStats::IsInitialized() const {
  return true;
}

void TaskStats::Swap(TaskStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskStats::InternalSwap(TaskStats* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_ms_, other->time_ms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TaskStats::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LatencyStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LatencyStats::kTotalTimeMsFieldNumber;
const int LatencyStats::kTaskStatsFieldNumber;
const int LatencyStats::kInitFrameTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LatencyStats::LatencyStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::scc_info_LatencyStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.LatencyStats)
}
LatencyStats::LatencyStats(const LatencyStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      task_stats_(from.task_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_time_ms_, &from.total_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&init_frame_time_ms_) -
    reinterpret_cast<char*>(&total_time_ms_)) + sizeof(init_frame_time_ms_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LatencyStats)
}

void LatencyStats::SharedCtor() {
  ::memset(&total_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&init_frame_time_ms_) -
      reinterpret_cast<char*>(&total_time_ms_)) + sizeof(init_frame_time_ms_));
}

LatencyStats::~LatencyStats() {
  // @@protoc_insertion_point(destructor:apollo.planning.LatencyStats)
  SharedDtor();
}

void LatencyStats::SharedDtor() {
}

void LatencyStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LatencyStats::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LatencyStats& LatencyStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::scc_info_LatencyStats.base);
  return *internal_default_instance();
}


void LatencyStats::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LatencyStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&total_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&init_frame_time_ms_) -
        reinterpret_cast<char*>(&total_time_ms_)) + sizeof(init_frame_time_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LatencyStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.LatencyStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double total_time_ms = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_total_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.TaskStats task_stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_task_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double init_frame_time_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_init_frame_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &init_frame_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.LatencyStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.LatencyStats)
  return false;
#undef DO_
}

void LatencyStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.LatencyStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_time_ms(), output);
  }

  // repeated .apollo.planning.TaskStats task_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->task_stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->task_stats(static_cast<int>(i)),
      output);
  }

  // optional double init_frame_time_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->init_frame_time_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.LatencyStats)
}

::google::protobuf::uint8* LatencyStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LatencyStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double total_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_time_ms(), target);
  }

  // repeated .apollo.planning.TaskStats task_stats = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->task_stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->task_stats(static_cast<int>(i)), deterministic, target);
  }

  // optional double init_frame_time_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->init_frame_time_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LatencyStats)
  return target;
}

size_t LatencyStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LatencyStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.TaskStats task_stats = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->task_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->task_stats(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional double total_time_ms = 1;
    if (has_total_time_ms()) {
      total_size += 1 + 8;
    }

    // optional double init_frame_time_ms = 3;
    if (has_init_frame_time_ms()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatencyStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LatencyStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.LatencyStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.LatencyStats)
    MergeFrom(*source);
  }
}

void LatencyStats::MergeFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_stats_.MergeFrom(from.task_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      total_time_ms_ = from.total_time_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      init_frame_time_ms_ = from.init_frame_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatencyStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyStats::CopyFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyStats::IsInitialized() const {
  return true;
}

void LatencyStats::Swap(LatencyStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LatencyStats::InternalSwap(LatencyStats* other) {
  using std::swap;
  CastToBase(&task_stats_)->InternalSwap(CastToBase(&other->task_stats_));
  swap(total_time_ms_, other->total_time_ms_);
  swap(init_frame_time_ms_, other->init_frame_time_ms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LatencyStats::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RSSInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RSSInfo::kIsRssSafeFieldNumber;
const int RSSInfo::kCurDistLonFieldNumber;
const int RSSInfo::kRssSafeDistLonFieldNumber;
const int RSSInfo::kAccLonRangeMinimumFieldNumber;
const int RSSInfo::kAccLonRangeMaximumFieldNumber;
const int RSSInfo::kAccLatLeftRangeMinimumFieldNumber;
const int RSSInfo::kAccLatLeftRangeMaximumFieldNumber;
const int RSSInfo::kAccLatRightRangeMinimumFieldNumber;
const int RSSInfo::kAccLatRightRangeMaximumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RSSInfo::RSSInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::scc_info_RSSInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.RSSInfo)
}
RSSInfo::RSSInfo(const RSSInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_dist_lon_, &from.cur_dist_lon_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_rss_safe_) -
    reinterpret_cast<char*>(&cur_dist_lon_)) + sizeof(is_rss_safe_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.RSSInfo)
}

void RSSInfo::SharedCtor() {
  ::memset(&cur_dist_lon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_rss_safe_) -
      reinterpret_cast<char*>(&cur_dist_lon_)) + sizeof(is_rss_safe_));
}

RSSInfo::~RSSInfo() {
  // @@protoc_insertion_point(destructor:apollo.planning.RSSInfo)
  SharedDtor();
}

void RSSInfo::SharedDtor() {
}

void RSSInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RSSInfo::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RSSInfo& RSSInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::scc_info_RSSInfo.base);
  return *internal_default_instance();
}


void RSSInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.RSSInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&cur_dist_lon_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acc_lat_right_range_maximum_) -
        reinterpret_cast<char*>(&cur_dist_lon_)) + sizeof(acc_lat_right_range_maximum_));
  }
  is_rss_safe_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RSSInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.RSSInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_rss_safe = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_rss_safe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rss_safe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cur_dist_lon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_cur_dist_lon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cur_dist_lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rss_safe_dist_lon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_rss_safe_dist_lon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rss_safe_dist_lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lon_range_minimum = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_acc_lon_range_minimum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lon_range_minimum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lon_range_maximum = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_acc_lon_range_maximum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lon_range_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lat_left_range_minimum = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_acc_lat_left_range_minimum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lat_left_range_minimum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lat_left_range_maximum = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_acc_lat_left_range_maximum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lat_left_range_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lat_right_range_minimum = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_acc_lat_right_range_minimum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lat_right_range_minimum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_lat_right_range_maximum = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_acc_lat_right_range_maximum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_lat_right_range_maximum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.RSSInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.RSSInfo)
  return false;
#undef DO_
}

void RSSInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.RSSInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_rss_safe = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_rss_safe(), output);
  }

  // optional double cur_dist_lon = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cur_dist_lon(), output);
  }

  // optional double rss_safe_dist_lon = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rss_safe_dist_lon(), output);
  }

  // optional double acc_lon_range_minimum = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->acc_lon_range_minimum(), output);
  }

  // optional double acc_lon_range_maximum = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->acc_lon_range_maximum(), output);
  }

  // optional double acc_lat_left_range_minimum = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->acc_lat_left_range_minimum(), output);
  }

  // optional double acc_lat_left_range_maximum = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->acc_lat_left_range_maximum(), output);
  }

  // optional double acc_lat_right_range_minimum = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->acc_lat_right_range_minimum(), output);
  }

  // optional double acc_lat_right_range_maximum = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->acc_lat_right_range_maximum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.RSSInfo)
}

::google::protobuf::uint8* RSSInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.RSSInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_rss_safe = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_rss_safe(), target);
  }

  // optional double cur_dist_lon = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cur_dist_lon(), target);
  }

  // optional double rss_safe_dist_lon = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rss_safe_dist_lon(), target);
  }

  // optional double acc_lon_range_minimum = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->acc_lon_range_minimum(), target);
  }

  // optional double acc_lon_range_maximum = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->acc_lon_range_maximum(), target);
  }

  // optional double acc_lat_left_range_minimum = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->acc_lat_left_range_minimum(), target);
  }

  // optional double acc_lat_left_range_maximum = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->acc_lat_left_range_maximum(), target);
  }

  // optional double acc_lat_right_range_minimum = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->acc_lat_right_range_minimum(), target);
  }

  // optional double acc_lat_right_range_maximum = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->acc_lat_right_range_maximum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.RSSInfo)
  return target;
}

size_t RSSInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.RSSInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double cur_dist_lon = 2;
    if (has_cur_dist_lon()) {
      total_size += 1 + 8;
    }

    // optional double rss_safe_dist_lon = 3;
    if (has_rss_safe_dist_lon()) {
      total_size += 1 + 8;
    }

    // optional double acc_lon_range_minimum = 4;
    if (has_acc_lon_range_minimum()) {
      total_size += 1 + 8;
    }

    // optional double acc_lon_range_maximum = 5;
    if (has_acc_lon_range_maximum()) {
      total_size += 1 + 8;
    }

    // optional double acc_lat_left_range_minimum = 6;
    if (has_acc_lat_left_range_minimum()) {
      total_size += 1 + 8;
    }

    // optional double acc_lat_left_range_maximum = 7;
    if (has_acc_lat_left_range_maximum()) {
      total_size += 1 + 8;
    }

    // optional double acc_lat_right_range_minimum = 8;
    if (has_acc_lat_right_range_minimum()) {
      total_size += 1 + 8;
    }

    // optional double acc_lat_right_range_maximum = 9;
    if (has_acc_lat_right_range_maximum()) {
      total_size += 1 + 8;
    }

  }
  // optional bool is_rss_safe = 1;
  if (has_is_rss_safe()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RSSInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.RSSInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RSSInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RSSInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.RSSInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.RSSInfo)
    MergeFrom(*source);
  }
}

void RSSInfo::MergeFrom(const RSSInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.RSSInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      cur_dist_lon_ = from.cur_dist_lon_;
    }
    if (cached_has_bits & 0x00000002u) {
      rss_safe_dist_lon_ = from.rss_safe_dist_lon_;
    }
    if (cached_has_bits & 0x00000004u) {
      acc_lon_range_minimum_ = from.acc_lon_range_minimum_;
    }
    if (cached_has_bits & 0x00000008u) {
      acc_lon_range_maximum_ = from.acc_lon_range_maximum_;
    }
    if (cached_has_bits & 0x00000010u) {
      acc_lat_left_range_minimum_ = from.acc_lat_left_range_minimum_;
    }
    if (cached_has_bits & 0x00000020u) {
      acc_lat_left_range_maximum_ = from.acc_lat_left_range_maximum_;
    }
    if (cached_has_bits & 0x00000040u) {
      acc_lat_right_range_minimum_ = from.acc_lat_right_range_minimum_;
    }
    if (cached_has_bits & 0x00000080u) {
      acc_lat_right_range_maximum_ = from.acc_lat_right_range_maximum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_is_rss_safe(from.is_rss_safe());
  }
}

void RSSInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.RSSInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSSInfo::CopyFrom(const RSSInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.RSSInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSSInfo::IsInitialized() const {
  return true;
}

void RSSInfo::Swap(RSSInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RSSInfo::InternalSwap(RSSInfo* other) {
  using std::swap;
  swap(cur_dist_lon_, other->cur_dist_lon_);
  swap(rss_safe_dist_lon_, other->rss_safe_dist_lon_);
  swap(acc_lon_range_minimum_, other->acc_lon_range_minimum_);
  swap(acc_lon_range_maximum_, other->acc_lon_range_maximum_);
  swap(acc_lat_left_range_minimum_, other->acc_lat_left_range_minimum_);
  swap(acc_lat_left_range_maximum_, other->acc_lat_left_range_maximum_);
  swap(acc_lat_right_range_minimum_, other->acc_lat_right_range_minimum_);
  swap(acc_lat_right_range_maximum_, other->acc_lat_right_range_maximum_);
  swap(is_rss_safe_, other->is_rss_safe_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RSSInfo::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ADCTrajectory_CriticalRegion::InitAsDefaultInstance() {
}
void ADCTrajectory_CriticalRegion::clear_region() {
  region_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCTrajectory_CriticalRegion::kRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCTrajectory_CriticalRegion::ADCTrajectory_CriticalRegion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::scc_info_ADCTrajectory_CriticalRegion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ADCTrajectory.CriticalRegion)
}
ADCTrajectory_CriticalRegion::ADCTrajectory_CriticalRegion(const ADCTrajectory_CriticalRegion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      region_(from.region_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCTrajectory.CriticalRegion)
}

void ADCTrajectory_CriticalRegion::SharedCtor() {
}

ADCTrajectory_CriticalRegion::~ADCTrajectory_CriticalRegion() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCTrajectory.CriticalRegion)
  SharedDtor();
}

void ADCTrajectory_CriticalRegion::SharedDtor() {
}

void ADCTrajectory_CriticalRegion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ADCTrajectory_CriticalRegion::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ADCTrajectory_CriticalRegion& ADCTrajectory_CriticalRegion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::scc_info_ADCTrajectory_CriticalRegion.base);
  return *internal_default_instance();
}


void ADCTrajectory_CriticalRegion::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCTrajectory.CriticalRegion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ADCTrajectory_CriticalRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ADCTrajectory.CriticalRegion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.common.Polygon region = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ADCTrajectory.CriticalRegion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ADCTrajectory.CriticalRegion)
  return false;
#undef DO_
}

void ADCTrajectory_CriticalRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ADCTrajectory.CriticalRegion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.Polygon region = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->region(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ADCTrajectory.CriticalRegion)
}

::google::protobuf::uint8* ADCTrajectory_CriticalRegion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCTrajectory.CriticalRegion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.common.Polygon region = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->region_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->region(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCTrajectory.CriticalRegion)
  return target;
}

size_t ADCTrajectory_CriticalRegion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCTrajectory.CriticalRegion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.common.Polygon region = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->region_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->region(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADCTrajectory_CriticalRegion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ADCTrajectory.CriticalRegion)
  GOOGLE_DCHECK_NE(&from, this);
  const ADCTrajectory_CriticalRegion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCTrajectory_CriticalRegion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ADCTrajectory.CriticalRegion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ADCTrajectory.CriticalRegion)
    MergeFrom(*source);
  }
}

void ADCTrajectory_CriticalRegion::MergeFrom(const ADCTrajectory_CriticalRegion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCTrajectory.CriticalRegion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  region_.MergeFrom(from.region_);
}

void ADCTrajectory_CriticalRegion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ADCTrajectory.CriticalRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCTrajectory_CriticalRegion::CopyFrom(const ADCTrajectory_CriticalRegion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCTrajectory.CriticalRegion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectory_CriticalRegion::IsInitialized() const {
  return true;
}

void ADCTrajectory_CriticalRegion::Swap(ADCTrajectory_CriticalRegion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCTrajectory_CriticalRegion::InternalSwap(ADCTrajectory_CriticalRegion* other) {
  using std::swap;
  CastToBase(&region_)->InternalSwap(CastToBase(&other->region_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ADCTrajectory_CriticalRegion::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ADCTrajectory::InitAsDefaultInstance() {
  ::apollo::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->estop_ = const_cast< ::apollo::planning::EStop*>(
      ::apollo::planning::EStop::internal_default_instance());
  ::apollo::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->debug_ = const_cast< ::apollo::planning_internal::Debug*>(
      ::apollo::planning_internal::Debug::internal_default_instance());
  ::apollo::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->decision_ = const_cast< ::apollo::planning::DecisionResult*>(
      ::apollo::planning::DecisionResult::internal_default_instance());
  ::apollo::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->latency_stats_ = const_cast< ::apollo::planning::LatencyStats*>(
      ::apollo::planning::LatencyStats::internal_default_instance());
  ::apollo::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->routing_header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->engage_advice_ = const_cast< ::apollo::common::EngageAdvice*>(
      ::apollo::common::EngageAdvice::internal_default_instance());
  ::apollo::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->critical_region_ = const_cast< ::apollo::planning::ADCTrajectory_CriticalRegion*>(
      ::apollo::planning::ADCTrajectory_CriticalRegion::internal_default_instance());
  ::apollo::planning::_ADCTrajectory_default_instance_._instance.get_mutable()->rss_info_ = const_cast< ::apollo::planning::RSSInfo*>(
      ::apollo::planning::RSSInfo::internal_default_instance());
}
void ADCTrajectory::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
void ADCTrajectory::clear_debug() {
  if (debug_ != NULL) debug_->Clear();
  clear_has_debug();
}
void ADCTrajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
void ADCTrajectory::clear_path_point() {
  path_point_.Clear();
}
void ADCTrajectory::clear_decision() {
  if (decision_ != NULL) decision_->Clear();
  clear_has_decision();
}
void ADCTrajectory::clear_routing_header() {
  if (routing_header_ != NULL) routing_header_->Clear();
  clear_has_routing_header();
}
void ADCTrajectory::clear_lane_id() {
  lane_id_.Clear();
}
void ADCTrajectory::clear_engage_advice() {
  if (engage_advice_ != NULL) engage_advice_->Clear();
  clear_has_engage_advice();
}
void ADCTrajectory::clear_target_lane_id() {
  target_lane_id_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCTrajectory::kHeaderFieldNumber;
const int ADCTrajectory::kTotalPathLengthFieldNumber;
const int ADCTrajectory::kTotalPathTimeFieldNumber;
const int ADCTrajectory::kEstopFieldNumber;
const int ADCTrajectory::kDebugFieldNumber;
const int ADCTrajectory::kIsReplanFieldNumber;
const int ADCTrajectory::kGearFieldNumber;
const int ADCTrajectory::kTrajectoryPointFieldNumber;
const int ADCTrajectory::kPathPointFieldNumber;
const int ADCTrajectory::kDecisionFieldNumber;
const int ADCTrajectory::kLatencyStatsFieldNumber;
const int ADCTrajectory::kRoutingHeaderFieldNumber;
const int ADCTrajectory::kRightOfWayStatusFieldNumber;
const int ADCTrajectory::kLaneIdFieldNumber;
const int ADCTrajectory::kEngageAdviceFieldNumber;
const int ADCTrajectory::kCriticalRegionFieldNumber;
const int ADCTrajectory::kTrajectoryTypeFieldNumber;
const int ADCTrajectory::kReplanReasonFieldNumber;
const int ADCTrajectory::kTargetLaneIdFieldNumber;
const int ADCTrajectory::kCarInDeadEndFieldNumber;
const int ADCTrajectory::kRssInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCTrajectory::ADCTrajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::scc_info_ADCTrajectory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ADCTrajectory)
}
ADCTrajectory::ADCTrajectory(const ADCTrajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      trajectory_point_(from.trajectory_point_),
      path_point_(from.path_point_),
      lane_id_(from.lane_id_),
      target_lane_id_(from.target_lane_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  replan_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_replan_reason()) {
    replan_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replan_reason_);
  }
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_estop()) {
    estop_ = new ::apollo::planning::EStop(*from.estop_);
  } else {
    estop_ = NULL;
  }
  if (from.has_debug()) {
    debug_ = new ::apollo::planning_internal::Debug(*from.debug_);
  } else {
    debug_ = NULL;
  }
  if (from.has_decision()) {
    decision_ = new ::apollo::planning::DecisionResult(*from.decision_);
  } else {
    decision_ = NULL;
  }
  if (from.has_latency_stats()) {
    latency_stats_ = new ::apollo::planning::LatencyStats(*from.latency_stats_);
  } else {
    latency_stats_ = NULL;
  }
  if (from.has_routing_header()) {
    routing_header_ = new ::apollo::common::Header(*from.routing_header_);
  } else {
    routing_header_ = NULL;
  }
  if (from.has_engage_advice()) {
    engage_advice_ = new ::apollo::common::EngageAdvice(*from.engage_advice_);
  } else {
    engage_advice_ = NULL;
  }
  if (from.has_critical_region()) {
    critical_region_ = new ::apollo::planning::ADCTrajectory_CriticalRegion(*from.critical_region_);
  } else {
    critical_region_ = NULL;
  }
  if (from.has_rss_info()) {
    rss_info_ = new ::apollo::planning::RSSInfo(*from.rss_info_);
  } else {
    rss_info_ = NULL;
  }
  ::memcpy(&total_path_length_, &from.total_path_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&trajectory_type_) -
    reinterpret_cast<char*>(&total_path_length_)) + sizeof(trajectory_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCTrajectory)
}

void ADCTrajectory::SharedCtor() {
  replan_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(trajectory_type_));
}

ADCTrajectory::~ADCTrajectory() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCTrajectory)
  SharedDtor();
}

void ADCTrajectory::SharedDtor() {
  replan_reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete estop_;
  if (this != internal_default_instance()) delete debug_;
  if (this != internal_default_instance()) delete decision_;
  if (this != internal_default_instance()) delete latency_stats_;
  if (this != internal_default_instance()) delete routing_header_;
  if (this != internal_default_instance()) delete engage_advice_;
  if (this != internal_default_instance()) delete critical_region_;
  if (this != internal_default_instance()) delete rss_info_;
}

void ADCTrajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ADCTrajectory::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ADCTrajectory& ADCTrajectory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::scc_info_ADCTrajectory.base);
  return *internal_default_instance();
}


void ADCTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_point_.Clear();
  path_point_.Clear();
  lane_id_.Clear();
  target_lane_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      replan_reason_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(estop_ != NULL);
      estop_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(debug_ != NULL);
      debug_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(decision_ != NULL);
      decision_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(latency_stats_ != NULL);
      latency_stats_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(routing_header_ != NULL);
      routing_header_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(engage_advice_ != NULL);
      engage_advice_->Clear();
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(critical_region_ != NULL);
      critical_region_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(rss_info_ != NULL);
      rss_info_->Clear();
    }
  }
  if (cached_has_bits & 64512u) {
    ::memset(&total_path_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_of_way_status_) -
        reinterpret_cast<char*>(&total_path_length_)) + sizeof(right_of_way_status_));
  }
  trajectory_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ADCTrajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ADCTrajectory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double total_path_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_total_path_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double total_path_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_total_path_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_path_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.EStop estop = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_estop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning_internal.Debug debug = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_replan = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_is_replan();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_replan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.GearPosition gear = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.PathPoint path_point = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_path_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.DecisionResult decision = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_decision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.LatencyStats latency_stats = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_latency_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Header routing_header = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_routing_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::ADCTrajectory_RightOfWayStatus_IsValid(value)) {
            set_right_of_way_status(static_cast< ::apollo::planning::ADCTrajectory_RightOfWayStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                17, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Id lane_id = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.EngageAdvice engage_advice = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_engage_advice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ADCTrajectory.CriticalRegion critical_region = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_critical_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::ADCTrajectory_TrajectoryType_IsValid(value)) {
            set_trajectory_type(static_cast< ::apollo::planning::ADCTrajectory_TrajectoryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                21, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string replan_reason = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replan_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->replan_reason().data(), static_cast<int>(this->replan_reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.ADCTrajectory.replan_reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Id target_lane_id = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_target_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool car_in_dead_end = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_car_in_dead_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &car_in_dead_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.RSSInfo rss_info = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rss_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ADCTrajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ADCTrajectory)
  return false;
#undef DO_
}

void ADCTrajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ADCTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional double total_path_length = 2;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->total_path_length(), output);
  }

  // optional double total_path_time = 3;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->total_path_time(), output);
  }

  // optional .apollo.planning.EStop estop = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_estop(), output);
  }

  // optional .apollo.planning_internal.Debug debug = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_debug(), output);
  }

  // optional bool is_replan = 9 [default = false];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_replan(), output);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->gear(), output);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->trajectory_point(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.common.PathPoint path_point = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->path_point(static_cast<int>(i)),
      output);
  }

  // optional .apollo.planning.DecisionResult decision = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_decision(), output);
  }

  // optional .apollo.planning.LatencyStats latency_stats = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_latency_stats(), output);
  }

  // optional .apollo.common.Header routing_header = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_routing_header(), output);
  }

  // optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->right_of_way_status(), output);
  }

  // repeated .apollo.hdmap.Id lane_id = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->lane_id(static_cast<int>(i)),
      output);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 19;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_engage_advice(), output);
  }

  // optional .apollo.planning.ADCTrajectory.CriticalRegion critical_region = 20;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_critical_region(), output);
  }

  // optional .apollo.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->trajectory_type(), output);
  }

  // optional string replan_reason = 22;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replan_reason().data(), static_cast<int>(this->replan_reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.ADCTrajectory.replan_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->replan_reason(), output);
  }

  // repeated .apollo.hdmap.Id target_lane_id = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->target_lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23,
      this->target_lane_id(static_cast<int>(i)),
      output);
  }

  // optional bool car_in_dead_end = 24;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->car_in_dead_end(), output);
  }

  // optional .apollo.planning.RSSInfo rss_info = 100;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->_internal_rss_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ADCTrajectory)
}

::google::protobuf::uint8* ADCTrajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCTrajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional double total_path_length = 2;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->total_path_length(), target);
  }

  // optional double total_path_time = 3;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->total_path_time(), target);
  }

  // optional .apollo.planning.EStop estop = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_estop(), deterministic, target);
  }

  // optional .apollo.planning_internal.Debug debug = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_debug(), deterministic, target);
  }

  // optional bool is_replan = 9 [default = false];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_replan(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->gear(), target);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->trajectory_point(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.common.PathPoint path_point = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->path_point(static_cast<int>(i)), deterministic, target);
  }

  // optional .apollo.planning.DecisionResult decision = 14;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_decision(), deterministic, target);
  }

  // optional .apollo.planning.LatencyStats latency_stats = 15;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_latency_stats(), deterministic, target);
  }

  // optional .apollo.common.Header routing_header = 16;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_routing_header(), deterministic, target);
  }

  // optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->right_of_way_status(), target);
  }

  // repeated .apollo.hdmap.Id lane_id = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->lane_id(static_cast<int>(i)), deterministic, target);
  }

  // optional .apollo.common.EngageAdvice engage_advice = 19;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_engage_advice(), deterministic, target);
  }

  // optional .apollo.planning.ADCTrajectory.CriticalRegion critical_region = 20;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_critical_region(), deterministic, target);
  }

  // optional .apollo.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->trajectory_type(), target);
  }

  // optional string replan_reason = 22;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replan_reason().data(), static_cast<int>(this->replan_reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.ADCTrajectory.replan_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->replan_reason(), target);
  }

  // repeated .apollo.hdmap.Id target_lane_id = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->target_lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->target_lane_id(static_cast<int>(i)), deterministic, target);
  }

  // optional bool car_in_dead_end = 24;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->car_in_dead_end(), target);
  }

  // optional .apollo.planning.RSSInfo rss_info = 100;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, this->_internal_rss_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCTrajectory)
  return target;
}

size_t ADCTrajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCTrajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.common.TrajectoryPoint trajectory_point = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectory_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trajectory_point(static_cast<int>(i)));
    }
  }

  // repeated .apollo.common.PathPoint path_point = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->path_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->path_point(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.Id lane_id = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_id_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_id(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.Id target_lane_id = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->target_lane_id_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->target_lane_id(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string replan_reason = 22;
    if (has_replan_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->replan_reason());
    }

    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.planning.EStop estop = 6;
    if (has_estop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *estop_);
    }

    // optional .apollo.planning_internal.Debug debug = 8;
    if (has_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *debug_);
    }

    // optional .apollo.planning.DecisionResult decision = 14;
    if (has_decision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *decision_);
    }

    // optional .apollo.planning.LatencyStats latency_stats = 15;
    if (has_latency_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *latency_stats_);
    }

    // optional .apollo.common.Header routing_header = 16;
    if (has_routing_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *routing_header_);
    }

    // optional .apollo.common.EngageAdvice engage_advice = 19;
    if (has_engage_advice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *engage_advice_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .apollo.planning.ADCTrajectory.CriticalRegion critical_region = 20;
    if (has_critical_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *critical_region_);
    }

    // optional .apollo.planning.RSSInfo rss_info = 100;
    if (has_rss_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rss_info_);
    }

    // optional double total_path_length = 2;
    if (has_total_path_length()) {
      total_size += 1 + 8;
    }

    // optional double total_path_time = 3;
    if (has_total_path_time()) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Chassis.GearPosition gear = 10;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear());
    }

    // optional bool is_replan = 9 [default = false];
    if (has_is_replan()) {
      total_size += 1 + 1;
    }

    // optional bool car_in_dead_end = 24;
    if (has_car_in_dead_end()) {
      total_size += 2 + 1;
    }

    // optional .apollo.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
    if (has_right_of_way_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->right_of_way_status());
    }

  }
  // optional .apollo.planning.ADCTrajectory.TrajectoryType trajectory_type = 21 [default = UNKNOWN];
  if (has_trajectory_type()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trajectory_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADCTrajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ADCTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const ADCTrajectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCTrajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ADCTrajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ADCTrajectory)
    MergeFrom(*source);
  }
}

void ADCTrajectory::MergeFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  path_point_.MergeFrom(from.path_point_);
  lane_id_.MergeFrom(from.lane_id_);
  target_lane_id_.MergeFrom(from.target_lane_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_replan_reason();
      replan_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.replan_reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_estop()->::apollo::planning::EStop::MergeFrom(from.estop());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_debug()->::apollo::planning_internal::Debug::MergeFrom(from.debug());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_decision()->::apollo::planning::DecisionResult::MergeFrom(from.decision());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_latency_stats()->::apollo::planning::LatencyStats::MergeFrom(from.latency_stats());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_routing_header()->::apollo::common::Header::MergeFrom(from.routing_header());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_engage_advice()->::apollo::common::EngageAdvice::MergeFrom(from.engage_advice());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_critical_region()->::apollo::planning::ADCTrajectory_CriticalRegion::MergeFrom(from.critical_region());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_rss_info()->::apollo::planning::RSSInfo::MergeFrom(from.rss_info());
    }
    if (cached_has_bits & 0x00000400u) {
      total_path_length_ = from.total_path_length_;
    }
    if (cached_has_bits & 0x00000800u) {
      total_path_time_ = from.total_path_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      gear_ = from.gear_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_replan_ = from.is_replan_;
    }
    if (cached_has_bits & 0x00004000u) {
      car_in_dead_end_ = from.car_in_dead_end_;
    }
    if (cached_has_bits & 0x00008000u) {
      right_of_way_status_ = from.right_of_way_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_trajectory_type(from.trajectory_type());
  }
}

void ADCTrajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ADCTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCTrajectory::CopyFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectory::IsInitialized() const {
  return true;
}

void ADCTrajectory::Swap(ADCTrajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCTrajectory::InternalSwap(ADCTrajectory* other) {
  using std::swap;
  CastToBase(&trajectory_point_)->InternalSwap(CastToBase(&other->trajectory_point_));
  CastToBase(&path_point_)->InternalSwap(CastToBase(&other->path_point_));
  CastToBase(&lane_id_)->InternalSwap(CastToBase(&other->lane_id_));
  CastToBase(&target_lane_id_)->InternalSwap(CastToBase(&other->target_lane_id_));
  replan_reason_.Swap(&other->replan_reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(estop_, other->estop_);
  swap(debug_, other->debug_);
  swap(decision_, other->decision_);
  swap(latency_stats_, other->latency_stats_);
  swap(routing_header_, other->routing_header_);
  swap(engage_advice_, other->engage_advice_);
  swap(critical_region_, other->critical_region_);
  swap(rss_info_, other->rss_info_);
  swap(total_path_length_, other->total_path_length_);
  swap(total_path_time_, other->total_path_time_);
  swap(gear_, other->gear_);
  swap(is_replan_, other->is_replan_);
  swap(car_in_dead_end_, other->car_in_dead_end_);
  swap(right_of_way_status_, other->right_of_way_status_);
  swap(trajectory_type_, other->trajectory_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ADCTrajectory::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::EStop* Arena::CreateMaybeMessage< ::apollo::planning::EStop >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::EStop >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::TaskStats* Arena::CreateMaybeMessage< ::apollo::planning::TaskStats >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::TaskStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::LatencyStats* Arena::CreateMaybeMessage< ::apollo::planning::LatencyStats >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::LatencyStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::RSSInfo* Arena::CreateMaybeMessage< ::apollo::planning::RSSInfo >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::RSSInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ADCTrajectory_CriticalRegion* Arena::CreateMaybeMessage< ::apollo::planning::ADCTrajectory_CriticalRegion >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ADCTrajectory_CriticalRegion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ADCTrajectory* Arena::CreateMaybeMessage< ::apollo::planning::ADCTrajectory >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ADCTrajectory >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
