// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/auto_tuning_raw_feature.proto

#include "modules/planning/proto/auto_tuning_raw_feature.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FrenetFramePoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PathPoint;
}  // namespace protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto
namespace protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ObstacleSTRawData_STPointPair;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SpeedPointRawFeature_ObjectDecisionFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ObstacleSTRawData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ObstacleSTRawData_ObstacleSTData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SpeedPointRawFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PathPointRawFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TrajectoryPointRawFeature;
}  // namespace protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto
namespace apollo {
namespace planning {
namespace autotuning {
class PathPointRawFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathPointRawFeature>
      _instance;
} _PathPointRawFeature_default_instance_;
class SpeedPointRawFeature_ObjectDecisionFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedPointRawFeature_ObjectDecisionFeature>
      _instance;
} _SpeedPointRawFeature_ObjectDecisionFeature_default_instance_;
class SpeedPointRawFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedPointRawFeature>
      _instance;
} _SpeedPointRawFeature_default_instance_;
class ObstacleSTRawData_STPointPairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObstacleSTRawData_STPointPair>
      _instance;
} _ObstacleSTRawData_STPointPair_default_instance_;
class ObstacleSTRawData_ObstacleSTDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObstacleSTRawData_ObstacleSTData>
      _instance;
} _ObstacleSTRawData_ObstacleSTData_default_instance_;
class ObstacleSTRawDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObstacleSTRawData>
      _instance;
} _ObstacleSTRawData_default_instance_;
class TrajectoryPointRawFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryPointRawFeature>
      _instance;
} _TrajectoryPointRawFeature_default_instance_;
class TrajectoryRawFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryRawFeature>
      _instance;
} _TrajectoryRawFeature_default_instance_;
}  // namespace autotuning
}  // namespace planning
}  // namespace apollo
namespace protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto {
static void InitDefaultsPathPointRawFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_PathPointRawFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::PathPointRawFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::PathPointRawFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PathPointRawFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPathPointRawFeature}, {
      &protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::scc_info_PathPoint.base,
      &protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::scc_info_FrenetFramePoint.base,}};

static void InitDefaultsSpeedPointRawFeature_ObjectDecisionFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_SpeedPointRawFeature_ObjectDecisionFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SpeedPointRawFeature_ObjectDecisionFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpeedPointRawFeature_ObjectDecisionFeature}, {}};

static void InitDefaultsSpeedPointRawFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_SpeedPointRawFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::SpeedPointRawFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::SpeedPointRawFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SpeedPointRawFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpeedPointRawFeature}, {
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_SpeedPointRawFeature_ObjectDecisionFeature.base,}};

static void InitDefaultsObstacleSTRawData_STPointPair() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_ObstacleSTRawData_STPointPair_default_instance_;
    new (ptr) ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ObstacleSTRawData_STPointPair =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObstacleSTRawData_STPointPair}, {}};

static void InitDefaultsObstacleSTRawData_ObstacleSTData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_ObstacleSTRawData_ObstacleSTData_default_instance_;
    new (ptr) ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ObstacleSTRawData_ObstacleSTData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsObstacleSTRawData_ObstacleSTData}, {
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_ObstacleSTRawData_STPointPair.base,}};

static void InitDefaultsObstacleSTRawData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_ObstacleSTRawData_default_instance_;
    new (ptr) ::apollo::planning::autotuning::ObstacleSTRawData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::ObstacleSTRawData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ObstacleSTRawData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsObstacleSTRawData}, {
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_ObstacleSTRawData_ObstacleSTData.base,}};

static void InitDefaultsTrajectoryPointRawFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_TrajectoryPointRawFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::TrajectoryPointRawFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::TrajectoryPointRawFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TrajectoryPointRawFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTrajectoryPointRawFeature}, {
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_PathPointRawFeature.base,
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_SpeedPointRawFeature.base,}};

static void InitDefaultsTrajectoryRawFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_TrajectoryRawFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::TrajectoryRawFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::TrajectoryRawFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TrajectoryRawFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTrajectoryRawFeature}, {
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_TrajectoryPointRawFeature.base,
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_ObstacleSTRawData.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PathPointRawFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeedPointRawFeature_ObjectDecisionFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeedPointRawFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObstacleSTRawData_STPointPair.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObstacleSTRawData_ObstacleSTData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObstacleSTRawData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrajectoryPointRawFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrajectoryRawFeature.base);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::PathPointRawFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::PathPointRawFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::PathPointRawFeature, cartesian_coord_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::PathPointRawFeature, frenet_coord_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, relative_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, relative_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, relative_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature, speed_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, j_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, follow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, overtake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, virtual_decision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, collision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, nudge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, sidepass_front_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, sidepass_rear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointRawFeature, keep_clear_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair, s_lower_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair, s_upper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair, l_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, is_virtual_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData, distribution_),
  1,
  0,
  2,
  3,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData, obstacle_st_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData, obstacle_st_nudge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::ObstacleSTRawData, obstacle_st_sidepass_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointRawFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointRawFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointRawFeature, path_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointRawFeature, speed_feature_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryRawFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryRawFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryRawFeature, point_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryRawFeature, st_raw_data_),
  ~0u,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::planning::autotuning::PathPointRawFeature)},
  { 9, 19, sizeof(::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature)},
  { 24, 44, sizeof(::apollo::planning::autotuning::SpeedPointRawFeature)},
  { 59, 68, sizeof(::apollo::planning::autotuning::ObstacleSTRawData_STPointPair)},
  { 72, 83, sizeof(::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData)},
  { 89, 97, sizeof(::apollo::planning::autotuning::ObstacleSTRawData)},
  { 100, 107, sizeof(::apollo::planning::autotuning::TrajectoryPointRawFeature)},
  { 109, 116, sizeof(::apollo::planning::autotuning::TrajectoryRawFeature)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::autotuning::_PathPointRawFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::autotuning::_SpeedPointRawFeature_ObjectDecisionFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::autotuning::_SpeedPointRawFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::autotuning::_ObstacleSTRawData_STPointPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::autotuning::_ObstacleSTRawData_ObstacleSTData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::autotuning::_ObstacleSTRawData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::autotuning::_TrajectoryPointRawFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::autotuning::_TrajectoryRawFeature_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/planning/proto/auto_tuning_raw_feature.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n4modules/planning/proto/auto_tuning_raw"
      "_feature.proto\022\032apollo.planning.autotuni"
      "ng\032$modules/common/proto/pnc_point.proto"
      "\"\177\n\023PathPointRawFeature\0221\n\017cartesian_coo"
      "rd\030\001 \001(\0132\030.apollo.common.PathPoint\0225\n\014fr"
      "enet_coord\030\002 \001(\0132\037.apollo.common.FrenetF"
      "ramePoint\"\211\010\n\024SpeedPointRawFeature\022\t\n\001s\030"
      "\001 \001(\001\022\t\n\001t\030\002 \001(\001\022\t\n\001v\030\003 \001(\001\022\t\n\001a\030\004 \001(\001\022\t"
      "\n\001j\030\005 \001(\001\022\023\n\013speed_limit\030\006 \001(\001\022V\n\006follow"
      "\030\n \003(\0132F.apollo.planning.autotuning.Spee"
      "dPointRawFeature.ObjectDecisionFeature\022X"
      "\n\010overtake\030\013 \003(\0132F.apollo.planning.autot"
      "uning.SpeedPointRawFeature.ObjectDecisio"
      "nFeature\022`\n\020virtual_decision\030\r \003(\0132F.apo"
      "llo.planning.autotuning.SpeedPointRawFea"
      "ture.ObjectDecisionFeature\022T\n\004stop\030\016 \003(\013"
      "2F.apollo.planning.autotuning.SpeedPoint"
      "RawFeature.ObjectDecisionFeature\022Y\n\tcoll"
      "ision\030\017 \003(\0132F.apollo.planning.autotuning"
      ".SpeedPointRawFeature.ObjectDecisionFeat"
      "ure\022U\n\005nudge\030\014 \003(\0132F.apollo.planning.aut"
      "otuning.SpeedPointRawFeature.ObjectDecis"
      "ionFeature\022^\n\016sidepass_front\030\020 \003(\0132F.apo"
      "llo.planning.autotuning.SpeedPointRawFea"
      "ture.ObjectDecisionFeature\022]\n\rsidepass_r"
      "ear\030\021 \003(\0132F.apollo.planning.autotuning.S"
      "peedPointRawFeature.ObjectDecisionFeatur"
      "e\022Z\n\nkeep_clear\030\022 \003(\0132F.apollo.planning."
      "autotuning.SpeedPointRawFeature.ObjectDe"
      "cisionFeature\032n\n\025ObjectDecisionFeature\022\n"
      "\n\002id\030\001 \001(\005\022\022\n\nrelative_s\030\002 \001(\001\022\022\n\nrelati"
      "ve_l\030\003 \001(\001\022\022\n\nrelative_v\030\004 \001(\001\022\r\n\005speed\030"
      "\005 \001(\001\"\337\004\n\021ObstacleSTRawData\022V\n\020obstacle_"
      "st_data\030\001 \003(\0132<.apollo.planning.autotuni"
      "ng.ObstacleSTRawData.ObstacleSTData\022W\n\021o"
      "bstacle_st_nudge\030\002 \003(\0132<.apollo.planning"
      ".autotuning.ObstacleSTRawData.ObstacleST"
      "Data\022Z\n\024obstacle_st_sidepass\030\003 \003(\0132<.apo"
      "llo.planning.autotuning.ObstacleSTRawDat"
      "a.ObstacleSTData\032I\n\013STPointPair\022\017\n\007s_low"
      "er\030\001 \001(\001\022\017\n\007s_upper\030\002 \001(\001\022\t\n\001t\030\003 \001(\001\022\r\n\001"
      "l\030\004 \001(\001:\00210\032\361\001\n\016ObstacleSTData\022\n\n\002id\030\001 \001"
      "(\005\022\r\n\005speed\030\002 \001(\001\022\022\n\nis_virtual\030\003 \001(\010\022\023\n"
      "\013probability\030\004 \001(\001\022J\n\007polygon\030\010 \003(\01329.ap"
      "ollo.planning.autotuning.ObstacleSTRawDa"
      "ta.STPointPair\022O\n\014distribution\030\t \003(\01329.a"
      "pollo.planning.autotuning.ObstacleSTRawD"
      "ata.STPointPair\"\253\001\n\031TrajectoryPointRawFe"
      "ature\022E\n\014path_feature\030\001 \001(\0132/.apollo.pla"
      "nning.autotuning.PathPointRawFeature\022G\n\r"
      "speed_feature\030\002 \001(\01320.apollo.planning.au"
      "totuning.SpeedPointRawFeature\"\250\001\n\024Trajec"
      "toryRawFeature\022L\n\rpoint_feature\030\001 \003(\01325."
      "apollo.planning.autotuning.TrajectoryPoi"
      "ntRawFeature\022B\n\013st_raw_data\030\002 \001(\0132-.apol"
      "lo.planning.autotuning.ObstacleSTRawData"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2240);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/auto_tuning_raw_feature.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto
namespace apollo {
namespace planning {
namespace autotuning {

// ===================================================================

void PathPointRawFeature::InitAsDefaultInstance() {
  ::apollo::planning::autotuning::_PathPointRawFeature_default_instance_._instance.get_mutable()->cartesian_coord_ = const_cast< ::apollo::common::PathPoint*>(
      ::apollo::common::PathPoint::internal_default_instance());
  ::apollo::planning::autotuning::_PathPointRawFeature_default_instance_._instance.get_mutable()->frenet_coord_ = const_cast< ::apollo::common::FrenetFramePoint*>(
      ::apollo::common::FrenetFramePoint::internal_default_instance());
}
void PathPointRawFeature::clear_cartesian_coord() {
  if (cartesian_coord_ != NULL) cartesian_coord_->Clear();
  clear_has_cartesian_coord();
}
void PathPointRawFeature::clear_frenet_coord() {
  if (frenet_coord_ != NULL) frenet_coord_->Clear();
  clear_has_frenet_coord();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPointRawFeature::kCartesianCoordFieldNumber;
const int PathPointRawFeature::kFrenetCoordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPointRawFeature::PathPointRawFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_PathPointRawFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.PathPointRawFeature)
}
PathPointRawFeature::PathPointRawFeature(const PathPointRawFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cartesian_coord()) {
    cartesian_coord_ = new ::apollo::common::PathPoint(*from.cartesian_coord_);
  } else {
    cartesian_coord_ = NULL;
  }
  if (from.has_frenet_coord()) {
    frenet_coord_ = new ::apollo::common::FrenetFramePoint(*from.frenet_coord_);
  } else {
    frenet_coord_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.PathPointRawFeature)
}

void PathPointRawFeature::SharedCtor() {
  ::memset(&cartesian_coord_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frenet_coord_) -
      reinterpret_cast<char*>(&cartesian_coord_)) + sizeof(frenet_coord_));
}

PathPointRawFeature::~PathPointRawFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.PathPointRawFeature)
  SharedDtor();
}

void PathPointRawFeature::SharedDtor() {
  if (this != internal_default_instance()) delete cartesian_coord_;
  if (this != internal_default_instance()) delete frenet_coord_;
}

void PathPointRawFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PathPointRawFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathPointRawFeature& PathPointRawFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_PathPointRawFeature.base);
  return *internal_default_instance();
}


void PathPointRawFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.PathPointRawFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cartesian_coord_ != NULL);
      cartesian_coord_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(frenet_coord_ != NULL);
      frenet_coord_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PathPointRawFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.PathPointRawFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.PathPoint cartesian_coord = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cartesian_coord()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.FrenetFramePoint frenet_coord = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frenet_coord()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.PathPointRawFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.PathPointRawFeature)
  return false;
#undef DO_
}

void PathPointRawFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.PathPointRawFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.PathPoint cartesian_coord = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_cartesian_coord(), output);
  }

  // optional .apollo.common.FrenetFramePoint frenet_coord = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_frenet_coord(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.PathPointRawFeature)
}

::google::protobuf::uint8* PathPointRawFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.PathPointRawFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.PathPoint cartesian_coord = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_cartesian_coord(), deterministic, target);
  }

  // optional .apollo.common.FrenetFramePoint frenet_coord = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_frenet_coord(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.PathPointRawFeature)
  return target;
}

size_t PathPointRawFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.PathPointRawFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.common.PathPoint cartesian_coord = 1;
    if (has_cartesian_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cartesian_coord_);
    }

    // optional .apollo.common.FrenetFramePoint frenet_coord = 2;
    if (has_frenet_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *frenet_coord_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathPointRawFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.PathPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPointRawFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPointRawFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.PathPointRawFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.PathPointRawFeature)
    MergeFrom(*source);
  }
}

void PathPointRawFeature::MergeFrom(const PathPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.PathPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cartesian_coord()->::apollo::common::PathPoint::MergeFrom(from.cartesian_coord());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_frenet_coord()->::apollo::common::FrenetFramePoint::MergeFrom(from.frenet_coord());
    }
  }
}

void PathPointRawFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.PathPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPointRawFeature::CopyFrom(const PathPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.PathPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointRawFeature::IsInitialized() const {
  return true;
}

void PathPointRawFeature::Swap(PathPointRawFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPointRawFeature::InternalSwap(PathPointRawFeature* other) {
  using std::swap;
  swap(cartesian_coord_, other->cartesian_coord_);
  swap(frenet_coord_, other->frenet_coord_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PathPointRawFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeedPointRawFeature_ObjectDecisionFeature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedPointRawFeature_ObjectDecisionFeature::kIdFieldNumber;
const int SpeedPointRawFeature_ObjectDecisionFeature::kRelativeSFieldNumber;
const int SpeedPointRawFeature_ObjectDecisionFeature::kRelativeLFieldNumber;
const int SpeedPointRawFeature_ObjectDecisionFeature::kRelativeVFieldNumber;
const int SpeedPointRawFeature_ObjectDecisionFeature::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedPointRawFeature_ObjectDecisionFeature::SpeedPointRawFeature_ObjectDecisionFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_SpeedPointRawFeature_ObjectDecisionFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
}
SpeedPointRawFeature_ObjectDecisionFeature::SpeedPointRawFeature_ObjectDecisionFeature(const SpeedPointRawFeature_ObjectDecisionFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&relative_s_, &from.relative_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&relative_s_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
}

void SpeedPointRawFeature_ObjectDecisionFeature::SharedCtor() {
  ::memset(&relative_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&relative_s_)) + sizeof(id_));
}

SpeedPointRawFeature_ObjectDecisionFeature::~SpeedPointRawFeature_ObjectDecisionFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  SharedDtor();
}

void SpeedPointRawFeature_ObjectDecisionFeature::SharedDtor() {
}

void SpeedPointRawFeature_ObjectDecisionFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeedPointRawFeature_ObjectDecisionFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature_ObjectDecisionFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_SpeedPointRawFeature_ObjectDecisionFeature.base);
  return *internal_default_instance();
}


void SpeedPointRawFeature_ObjectDecisionFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&relative_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&relative_s_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedPointRawFeature_ObjectDecisionFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double relative_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_relative_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double relative_l = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_relative_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double relative_v = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_relative_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  return false;
#undef DO_
}

void SpeedPointRawFeature_ObjectDecisionFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double relative_s = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->relative_s(), output);
  }

  // optional double relative_l = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->relative_l(), output);
  }

  // optional double relative_v = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->relative_v(), output);
  }

  // optional double speed = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
}

::google::protobuf::uint8* SpeedPointRawFeature_ObjectDecisionFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double relative_s = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->relative_s(), target);
  }

  // optional double relative_l = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->relative_l(), target);
  }

  // optional double relative_v = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->relative_v(), target);
  }

  // optional double speed = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  return target;
}

size_t SpeedPointRawFeature_ObjectDecisionFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional double relative_s = 2;
    if (has_relative_s()) {
      total_size += 1 + 8;
    }

    // optional double relative_l = 3;
    if (has_relative_l()) {
      total_size += 1 + 8;
    }

    // optional double relative_v = 4;
    if (has_relative_v()) {
      total_size += 1 + 8;
    }

    // optional double speed = 5;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedPointRawFeature_ObjectDecisionFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedPointRawFeature_ObjectDecisionFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedPointRawFeature_ObjectDecisionFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
    MergeFrom(*source);
  }
}

void SpeedPointRawFeature_ObjectDecisionFeature::MergeFrom(const SpeedPointRawFeature_ObjectDecisionFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      relative_s_ = from.relative_s_;
    }
    if (cached_has_bits & 0x00000002u) {
      relative_l_ = from.relative_l_;
    }
    if (cached_has_bits & 0x00000004u) {
      relative_v_ = from.relative_v_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeedPointRawFeature_ObjectDecisionFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPointRawFeature_ObjectDecisionFeature::CopyFrom(const SpeedPointRawFeature_ObjectDecisionFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPointRawFeature_ObjectDecisionFeature::IsInitialized() const {
  return true;
}

void SpeedPointRawFeature_ObjectDecisionFeature::Swap(SpeedPointRawFeature_ObjectDecisionFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedPointRawFeature_ObjectDecisionFeature::InternalSwap(SpeedPointRawFeature_ObjectDecisionFeature* other) {
  using std::swap;
  swap(relative_s_, other->relative_s_);
  swap(relative_l_, other->relative_l_);
  swap(relative_v_, other->relative_v_);
  swap(speed_, other->speed_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeedPointRawFeature_ObjectDecisionFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeedPointRawFeature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedPointRawFeature::kSFieldNumber;
const int SpeedPointRawFeature::kTFieldNumber;
const int SpeedPointRawFeature::kVFieldNumber;
const int SpeedPointRawFeature::kAFieldNumber;
const int SpeedPointRawFeature::kJFieldNumber;
const int SpeedPointRawFeature::kSpeedLimitFieldNumber;
const int SpeedPointRawFeature::kFollowFieldNumber;
const int SpeedPointRawFeature::kOvertakeFieldNumber;
const int SpeedPointRawFeature::kVirtualDecisionFieldNumber;
const int SpeedPointRawFeature::kStopFieldNumber;
const int SpeedPointRawFeature::kCollisionFieldNumber;
const int SpeedPointRawFeature::kNudgeFieldNumber;
const int SpeedPointRawFeature::kSidepassFrontFieldNumber;
const int SpeedPointRawFeature::kSidepassRearFieldNumber;
const int SpeedPointRawFeature::kKeepClearFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedPointRawFeature::SpeedPointRawFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_SpeedPointRawFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.SpeedPointRawFeature)
}
SpeedPointRawFeature::SpeedPointRawFeature(const SpeedPointRawFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      follow_(from.follow_),
      overtake_(from.overtake_),
      nudge_(from.nudge_),
      virtual_decision_(from.virtual_decision_),
      stop_(from.stop_),
      collision_(from.collision_),
      sidepass_front_(from.sidepass_front_),
      sidepass_rear_(from.sidepass_rear_),
      keep_clear_(from.keep_clear_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_limit_) -
    reinterpret_cast<char*>(&s_)) + sizeof(speed_limit_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.SpeedPointRawFeature)
}

void SpeedPointRawFeature::SharedCtor() {
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_limit_) -
      reinterpret_cast<char*>(&s_)) + sizeof(speed_limit_));
}

SpeedPointRawFeature::~SpeedPointRawFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.SpeedPointRawFeature)
  SharedDtor();
}

void SpeedPointRawFeature::SharedDtor() {
}

void SpeedPointRawFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeedPointRawFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedPointRawFeature& SpeedPointRawFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_SpeedPointRawFeature.base);
  return *internal_default_instance();
}


void SpeedPointRawFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.SpeedPointRawFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  follow_.Clear();
  overtake_.Clear();
  nudge_.Clear();
  virtual_decision_.Clear();
  stop_.Clear();
  collision_.Clear();
  sidepass_front_.Clear();
  sidepass_rear_.Clear();
  keep_clear_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_limit_) -
        reinterpret_cast<char*>(&s_)) + sizeof(speed_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedPointRawFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.SpeedPointRawFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double t = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double v = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double a = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double j = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_j();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &j_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_limit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_follow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_overtake()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nudge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_virtual_decision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_collision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sidepass_front()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sidepass_rear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature keep_clear = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_keep_clear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.SpeedPointRawFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.SpeedPointRawFeature)
  return false;
#undef DO_
}

void SpeedPointRawFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.SpeedPointRawFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double t = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->t(), output);
  }

  // optional double v = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->v(), output);
  }

  // optional double a = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->a(), output);
  }

  // optional double j = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->j(), output);
  }

  // optional double speed_limit = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->speed_limit(), output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->follow_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->follow(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overtake_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->overtake(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nudge_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->nudge(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->virtual_decision_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->virtual_decision(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stop_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->stop(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->collision_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->collision(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sidepass_front_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16,
      this->sidepass_front(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sidepass_rear_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17,
      this->sidepass_rear(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature keep_clear = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keep_clear_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->keep_clear(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.SpeedPointRawFeature)
}

::google::protobuf::uint8* SpeedPointRawFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.SpeedPointRawFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double t = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->t(), target);
  }

  // optional double v = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->v(), target);
  }

  // optional double a = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->a(), target);
  }

  // optional double j = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->j(), target);
  }

  // optional double speed_limit = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->speed_limit(), target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->follow_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->follow(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overtake_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->overtake(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nudge_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->nudge(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->virtual_decision_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->virtual_decision(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stop_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->stop(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->collision_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->collision(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sidepass_front_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->sidepass_front(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sidepass_rear_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->sidepass_rear(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature keep_clear = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keep_clear_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->keep_clear(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.SpeedPointRawFeature)
  return target;
}

size_t SpeedPointRawFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.SpeedPointRawFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->follow_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->follow(static_cast<int>(i)));
    }
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->overtake_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->overtake(static_cast<int>(i)));
    }
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->nudge_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nudge(static_cast<int>(i)));
    }
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->virtual_decision_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->virtual_decision(static_cast<int>(i)));
    }
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->stop_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stop(static_cast<int>(i)));
    }
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->collision_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->collision(static_cast<int>(i)));
    }
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->sidepass_front_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sidepass_front(static_cast<int>(i)));
    }
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->sidepass_rear_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sidepass_rear(static_cast<int>(i)));
    }
  }

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature keep_clear = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->keep_clear_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keep_clear(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional double s = 1;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double t = 2;
    if (has_t()) {
      total_size += 1 + 8;
    }

    // optional double v = 3;
    if (has_v()) {
      total_size += 1 + 8;
    }

    // optional double a = 4;
    if (has_a()) {
      total_size += 1 + 8;
    }

    // optional double j = 5;
    if (has_j()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 6;
    if (has_speed_limit()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedPointRawFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.SpeedPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedPointRawFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedPointRawFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.SpeedPointRawFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.SpeedPointRawFeature)
    MergeFrom(*source);
  }
}

void SpeedPointRawFeature::MergeFrom(const SpeedPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.SpeedPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  follow_.MergeFrom(from.follow_);
  overtake_.MergeFrom(from.overtake_);
  nudge_.MergeFrom(from.nudge_);
  virtual_decision_.MergeFrom(from.virtual_decision_);
  stop_.MergeFrom(from.stop_);
  collision_.MergeFrom(from.collision_);
  sidepass_front_.MergeFrom(from.sidepass_front_);
  sidepass_rear_.MergeFrom(from.sidepass_rear_);
  keep_clear_.MergeFrom(from.keep_clear_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      t_ = from.t_;
    }
    if (cached_has_bits & 0x00000004u) {
      v_ = from.v_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      j_ = from.j_;
    }
    if (cached_has_bits & 0x00000020u) {
      speed_limit_ = from.speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeedPointRawFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.SpeedPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPointRawFeature::CopyFrom(const SpeedPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.SpeedPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPointRawFeature::IsInitialized() const {
  return true;
}

void SpeedPointRawFeature::Swap(SpeedPointRawFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedPointRawFeature::InternalSwap(SpeedPointRawFeature* other) {
  using std::swap;
  CastToBase(&follow_)->InternalSwap(CastToBase(&other->follow_));
  CastToBase(&overtake_)->InternalSwap(CastToBase(&other->overtake_));
  CastToBase(&nudge_)->InternalSwap(CastToBase(&other->nudge_));
  CastToBase(&virtual_decision_)->InternalSwap(CastToBase(&other->virtual_decision_));
  CastToBase(&stop_)->InternalSwap(CastToBase(&other->stop_));
  CastToBase(&collision_)->InternalSwap(CastToBase(&other->collision_));
  CastToBase(&sidepass_front_)->InternalSwap(CastToBase(&other->sidepass_front_));
  CastToBase(&sidepass_rear_)->InternalSwap(CastToBase(&other->sidepass_rear_));
  CastToBase(&keep_clear_)->InternalSwap(CastToBase(&other->keep_clear_));
  swap(s_, other->s_);
  swap(t_, other->t_);
  swap(v_, other->v_);
  swap(a_, other->a_);
  swap(j_, other->j_);
  swap(speed_limit_, other->speed_limit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeedPointRawFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObstacleSTRawData_STPointPair::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleSTRawData_STPointPair::kSLowerFieldNumber;
const int ObstacleSTRawData_STPointPair::kSUpperFieldNumber;
const int ObstacleSTRawData_STPointPair::kTFieldNumber;
const int ObstacleSTRawData_STPointPair::kLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleSTRawData_STPointPair::ObstacleSTRawData_STPointPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_ObstacleSTRawData_STPointPair.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
}
ObstacleSTRawData_STPointPair::ObstacleSTRawData_STPointPair(const ObstacleSTRawData_STPointPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_lower_, &from.s_lower_,
    static_cast<size_t>(reinterpret_cast<char*>(&l_) -
    reinterpret_cast<char*>(&s_lower_)) + sizeof(l_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
}

void ObstacleSTRawData_STPointPair::SharedCtor() {
  ::memset(&s_lower_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&s_lower_)) + sizeof(t_));
  l_ = 10;
}

ObstacleSTRawData_STPointPair::~ObstacleSTRawData_STPointPair() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  SharedDtor();
}

void ObstacleSTRawData_STPointPair::SharedDtor() {
}

void ObstacleSTRawData_STPointPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ObstacleSTRawData_STPointPair::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleSTRawData_STPointPair& ObstacleSTRawData_STPointPair::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_ObstacleSTRawData_STPointPair.base);
  return *internal_default_instance();
}


void ObstacleSTRawData_STPointPair::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&s_lower_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&t_) -
        reinterpret_cast<char*>(&s_lower_)) + sizeof(t_));
    l_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObstacleSTRawData_STPointPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s_lower = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_s_lower();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_lower_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double s_upper = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_s_upper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_upper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double t = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double l = 4 [default = 10];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  return false;
#undef DO_
}

void ObstacleSTRawData_STPointPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s_lower = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s_lower(), output);
  }

  // optional double s_upper = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->s_upper(), output);
  }

  // optional double t = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->t(), output);
  }

  // optional double l = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->l(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
}

::google::protobuf::uint8* ObstacleSTRawData_STPointPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s_lower = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s_lower(), target);
  }

  // optional double s_upper = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->s_upper(), target);
  }

  // optional double t = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->t(), target);
  }

  // optional double l = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->l(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  return target;
}

size_t ObstacleSTRawData_STPointPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double s_lower = 1;
    if (has_s_lower()) {
      total_size += 1 + 8;
    }

    // optional double s_upper = 2;
    if (has_s_upper()) {
      total_size += 1 + 8;
    }

    // optional double t = 3;
    if (has_t()) {
      total_size += 1 + 8;
    }

    // optional double l = 4 [default = 10];
    if (has_l()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleSTRawData_STPointPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleSTRawData_STPointPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleSTRawData_STPointPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
    MergeFrom(*source);
  }
}

void ObstacleSTRawData_STPointPair::MergeFrom(const ObstacleSTRawData_STPointPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      s_lower_ = from.s_lower_;
    }
    if (cached_has_bits & 0x00000002u) {
      s_upper_ = from.s_upper_;
    }
    if (cached_has_bits & 0x00000004u) {
      t_ = from.t_;
    }
    if (cached_has_bits & 0x00000008u) {
      l_ = from.l_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstacleSTRawData_STPointPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleSTRawData_STPointPair::CopyFrom(const ObstacleSTRawData_STPointPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleSTRawData_STPointPair::IsInitialized() const {
  return true;
}

void ObstacleSTRawData_STPointPair::Swap(ObstacleSTRawData_STPointPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleSTRawData_STPointPair::InternalSwap(ObstacleSTRawData_STPointPair* other) {
  using std::swap;
  swap(s_lower_, other->s_lower_);
  swap(s_upper_, other->s_upper_);
  swap(t_, other->t_);
  swap(l_, other->l_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ObstacleSTRawData_STPointPair::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObstacleSTRawData_ObstacleSTData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleSTRawData_ObstacleSTData::kIdFieldNumber;
const int ObstacleSTRawData_ObstacleSTData::kSpeedFieldNumber;
const int ObstacleSTRawData_ObstacleSTData::kIsVirtualFieldNumber;
const int ObstacleSTRawData_ObstacleSTData::kProbabilityFieldNumber;
const int ObstacleSTRawData_ObstacleSTData::kPolygonFieldNumber;
const int ObstacleSTRawData_ObstacleSTData::kDistributionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleSTRawData_ObstacleSTData::ObstacleSTRawData_ObstacleSTData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_ObstacleSTRawData_ObstacleSTData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
}
ObstacleSTRawData_ObstacleSTData::ObstacleSTRawData_ObstacleSTData(const ObstacleSTRawData_ObstacleSTData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      polygon_(from.polygon_),
      distribution_(from.distribution_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&probability_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(probability_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
}

void ObstacleSTRawData_ObstacleSTData::SharedCtor() {
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(probability_));
}

ObstacleSTRawData_ObstacleSTData::~ObstacleSTRawData_ObstacleSTData() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  SharedDtor();
}

void ObstacleSTRawData_ObstacleSTData::SharedDtor() {
}

void ObstacleSTRawData_ObstacleSTData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ObstacleSTRawData_ObstacleSTData::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleSTRawData_ObstacleSTData& ObstacleSTRawData_ObstacleSTData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_ObstacleSTRawData_ObstacleSTData.base);
  return *internal_default_instance();
}


void ObstacleSTRawData_ObstacleSTData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_.Clear();
  distribution_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&probability_) -
        reinterpret_cast<char*>(&speed_)) + sizeof(probability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObstacleSTRawData_ObstacleSTData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_virtual = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_virtual();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_virtual_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double probability = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_distribution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  return false;
#undef DO_
}

void ObstacleSTRawData_ObstacleSTData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double speed = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->speed(), output);
  }

  // optional bool is_virtual = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_virtual(), output);
  }

  // optional double probability = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->probability(), output);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->polygon(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->distribution_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->distribution(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
}

::google::protobuf::uint8* ObstacleSTRawData_ObstacleSTData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double speed = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->speed(), target);
  }

  // optional bool is_virtual = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_virtual(), target);
  }

  // optional double probability = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->probability(), target);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->polygon(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->distribution_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->distribution(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  return target;
}

size_t ObstacleSTRawData_ObstacleSTData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->polygon_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->polygon(static_cast<int>(i)));
    }
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->distribution_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->distribution(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional double speed = 2;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool is_virtual = 3;
    if (has_is_virtual()) {
      total_size += 1 + 1;
    }

    // optional double probability = 4;
    if (has_probability()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleSTRawData_ObstacleSTData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleSTRawData_ObstacleSTData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleSTRawData_ObstacleSTData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
    MergeFrom(*source);
  }
}

void ObstacleSTRawData_ObstacleSTData::MergeFrom(const ObstacleSTRawData_ObstacleSTData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_.MergeFrom(from.polygon_);
  distribution_.MergeFrom(from.distribution_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_virtual_ = from.is_virtual_;
    }
    if (cached_has_bits & 0x00000008u) {
      probability_ = from.probability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstacleSTRawData_ObstacleSTData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleSTRawData_ObstacleSTData::CopyFrom(const ObstacleSTRawData_ObstacleSTData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleSTRawData_ObstacleSTData::IsInitialized() const {
  return true;
}

void ObstacleSTRawData_ObstacleSTData::Swap(ObstacleSTRawData_ObstacleSTData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleSTRawData_ObstacleSTData::InternalSwap(ObstacleSTRawData_ObstacleSTData* other) {
  using std::swap;
  CastToBase(&polygon_)->InternalSwap(CastToBase(&other->polygon_));
  CastToBase(&distribution_)->InternalSwap(CastToBase(&other->distribution_));
  swap(speed_, other->speed_);
  swap(id_, other->id_);
  swap(is_virtual_, other->is_virtual_);
  swap(probability_, other->probability_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ObstacleSTRawData_ObstacleSTData::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObstacleSTRawData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleSTRawData::kObstacleStDataFieldNumber;
const int ObstacleSTRawData::kObstacleStNudgeFieldNumber;
const int ObstacleSTRawData::kObstacleStSidepassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleSTRawData::ObstacleSTRawData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_ObstacleSTRawData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.ObstacleSTRawData)
}
ObstacleSTRawData::ObstacleSTRawData(const ObstacleSTRawData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      obstacle_st_data_(from.obstacle_st_data_),
      obstacle_st_nudge_(from.obstacle_st_nudge_),
      obstacle_st_sidepass_(from.obstacle_st_sidepass_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.ObstacleSTRawData)
}

void ObstacleSTRawData::SharedCtor() {
}

ObstacleSTRawData::~ObstacleSTRawData() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.ObstacleSTRawData)
  SharedDtor();
}

void ObstacleSTRawData::SharedDtor() {
}

void ObstacleSTRawData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ObstacleSTRawData::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleSTRawData& ObstacleSTRawData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_ObstacleSTRawData.base);
  return *internal_default_instance();
}


void ObstacleSTRawData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.ObstacleSTRawData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacle_st_data_.Clear();
  obstacle_st_nudge_.Clear();
  obstacle_st_sidepass_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObstacleSTRawData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.ObstacleSTRawData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_obstacle_st_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_obstacle_st_nudge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_obstacle_st_sidepass()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.ObstacleSTRawData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.ObstacleSTRawData)
  return false;
#undef DO_
}

void ObstacleSTRawData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.ObstacleSTRawData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_st_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->obstacle_st_data(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_st_nudge_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->obstacle_st_nudge(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_st_sidepass_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->obstacle_st_sidepass(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.ObstacleSTRawData)
}

::google::protobuf::uint8* ObstacleSTRawData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.ObstacleSTRawData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_st_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->obstacle_st_data(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_st_nudge_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->obstacle_st_nudge(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_st_sidepass_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->obstacle_st_sidepass(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.ObstacleSTRawData)
  return target;
}

size_t ObstacleSTRawData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.ObstacleSTRawData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacle_st_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->obstacle_st_data(static_cast<int>(i)));
    }
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacle_st_nudge_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->obstacle_st_nudge(static_cast<int>(i)));
    }
  }

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacle_st_sidepass_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->obstacle_st_sidepass(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleSTRawData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleSTRawData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleSTRawData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.ObstacleSTRawData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.ObstacleSTRawData)
    MergeFrom(*source);
  }
}

void ObstacleSTRawData::MergeFrom(const ObstacleSTRawData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.ObstacleSTRawData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_st_data_.MergeFrom(from.obstacle_st_data_);
  obstacle_st_nudge_.MergeFrom(from.obstacle_st_nudge_);
  obstacle_st_sidepass_.MergeFrom(from.obstacle_st_sidepass_);
}

void ObstacleSTRawData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleSTRawData::CopyFrom(const ObstacleSTRawData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.ObstacleSTRawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleSTRawData::IsInitialized() const {
  return true;
}

void ObstacleSTRawData::Swap(ObstacleSTRawData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleSTRawData::InternalSwap(ObstacleSTRawData* other) {
  using std::swap;
  CastToBase(&obstacle_st_data_)->InternalSwap(CastToBase(&other->obstacle_st_data_));
  CastToBase(&obstacle_st_nudge_)->InternalSwap(CastToBase(&other->obstacle_st_nudge_));
  CastToBase(&obstacle_st_sidepass_)->InternalSwap(CastToBase(&other->obstacle_st_sidepass_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ObstacleSTRawData::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrajectoryPointRawFeature::InitAsDefaultInstance() {
  ::apollo::planning::autotuning::_TrajectoryPointRawFeature_default_instance_._instance.get_mutable()->path_feature_ = const_cast< ::apollo::planning::autotuning::PathPointRawFeature*>(
      ::apollo::planning::autotuning::PathPointRawFeature::internal_default_instance());
  ::apollo::planning::autotuning::_TrajectoryPointRawFeature_default_instance_._instance.get_mutable()->speed_feature_ = const_cast< ::apollo::planning::autotuning::SpeedPointRawFeature*>(
      ::apollo::planning::autotuning::SpeedPointRawFeature::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryPointRawFeature::kPathFeatureFieldNumber;
const int TrajectoryPointRawFeature::kSpeedFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryPointRawFeature::TrajectoryPointRawFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_TrajectoryPointRawFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.TrajectoryPointRawFeature)
}
TrajectoryPointRawFeature::TrajectoryPointRawFeature(const TrajectoryPointRawFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_path_feature()) {
    path_feature_ = new ::apollo::planning::autotuning::PathPointRawFeature(*from.path_feature_);
  } else {
    path_feature_ = NULL;
  }
  if (from.has_speed_feature()) {
    speed_feature_ = new ::apollo::planning::autotuning::SpeedPointRawFeature(*from.speed_feature_);
  } else {
    speed_feature_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.TrajectoryPointRawFeature)
}

void TrajectoryPointRawFeature::SharedCtor() {
  ::memset(&path_feature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_feature_) -
      reinterpret_cast<char*>(&path_feature_)) + sizeof(speed_feature_));
}

TrajectoryPointRawFeature::~TrajectoryPointRawFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.TrajectoryPointRawFeature)
  SharedDtor();
}

void TrajectoryPointRawFeature::SharedDtor() {
  if (this != internal_default_instance()) delete path_feature_;
  if (this != internal_default_instance()) delete speed_feature_;
}

void TrajectoryPointRawFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrajectoryPointRawFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryPointRawFeature& TrajectoryPointRawFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_TrajectoryPointRawFeature.base);
  return *internal_default_instance();
}


void TrajectoryPointRawFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(path_feature_ != NULL);
      path_feature_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(speed_feature_ != NULL);
      speed_feature_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrajectoryPointRawFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.autotuning.PathPointRawFeature path_feature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speed_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.TrajectoryPointRawFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.TrajectoryPointRawFeature)
  return false;
#undef DO_
}

void TrajectoryPointRawFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.autotuning.PathPointRawFeature path_feature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_path_feature(), output);
  }

  // optional .apollo.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_speed_feature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.TrajectoryPointRawFeature)
}

::google::protobuf::uint8* TrajectoryPointRawFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.autotuning.PathPointRawFeature path_feature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_path_feature(), deterministic, target);
  }

  // optional .apollo.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_speed_feature(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.TrajectoryPointRawFeature)
  return target;
}

size_t TrajectoryPointRawFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.planning.autotuning.PathPointRawFeature path_feature = 1;
    if (has_path_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *path_feature_);
    }

    // optional .apollo.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
    if (has_speed_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *speed_feature_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryPointRawFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPointRawFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryPointRawFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.TrajectoryPointRawFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.TrajectoryPointRawFeature)
    MergeFrom(*source);
  }
}

void TrajectoryPointRawFeature::MergeFrom(const TrajectoryPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_path_feature()->::apollo::planning::autotuning::PathPointRawFeature::MergeFrom(from.path_feature());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_speed_feature()->::apollo::planning::autotuning::SpeedPointRawFeature::MergeFrom(from.speed_feature());
    }
  }
}

void TrajectoryPointRawFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPointRawFeature::CopyFrom(const TrajectoryPointRawFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.TrajectoryPointRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPointRawFeature::IsInitialized() const {
  return true;
}

void TrajectoryPointRawFeature::Swap(TrajectoryPointRawFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryPointRawFeature::InternalSwap(TrajectoryPointRawFeature* other) {
  using std::swap;
  swap(path_feature_, other->path_feature_);
  swap(speed_feature_, other->speed_feature_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrajectoryPointRawFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrajectoryRawFeature::InitAsDefaultInstance() {
  ::apollo::planning::autotuning::_TrajectoryRawFeature_default_instance_._instance.get_mutable()->st_raw_data_ = const_cast< ::apollo::planning::autotuning::ObstacleSTRawData*>(
      ::apollo::planning::autotuning::ObstacleSTRawData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryRawFeature::kPointFeatureFieldNumber;
const int TrajectoryRawFeature::kStRawDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryRawFeature::TrajectoryRawFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_TrajectoryRawFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.TrajectoryRawFeature)
}
TrajectoryRawFeature::TrajectoryRawFeature(const TrajectoryRawFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      point_feature_(from.point_feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_st_raw_data()) {
    st_raw_data_ = new ::apollo::planning::autotuning::ObstacleSTRawData(*from.st_raw_data_);
  } else {
    st_raw_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.TrajectoryRawFeature)
}

void TrajectoryRawFeature::SharedCtor() {
  st_raw_data_ = NULL;
}

TrajectoryRawFeature::~TrajectoryRawFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.TrajectoryRawFeature)
  SharedDtor();
}

void TrajectoryRawFeature::SharedDtor() {
  if (this != internal_default_instance()) delete st_raw_data_;
}

void TrajectoryRawFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrajectoryRawFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryRawFeature& TrajectoryRawFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::scc_info_TrajectoryRawFeature.base);
  return *internal_default_instance();
}


void TrajectoryRawFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.TrajectoryRawFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_feature_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(st_raw_data_ != NULL);
    st_raw_data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrajectoryRawFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.TrajectoryRawFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_point_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_st_raw_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.TrajectoryRawFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.TrajectoryRawFeature)
  return false;
#undef DO_
}

void TrajectoryRawFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.TrajectoryRawFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_feature_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->point_feature(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_st_raw_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.TrajectoryRawFeature)
}

::google::protobuf::uint8* TrajectoryRawFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.TrajectoryRawFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_feature_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->point_feature(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_st_raw_data(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.TrajectoryRawFeature)
  return target;
}

size_t TrajectoryRawFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.TrajectoryRawFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->point_feature_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->point_feature(static_cast<int>(i)));
    }
  }

  // optional .apollo.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
  if (has_st_raw_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *st_raw_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryRawFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.TrajectoryRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryRawFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryRawFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.TrajectoryRawFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.TrajectoryRawFeature)
    MergeFrom(*source);
  }
}

void TrajectoryRawFeature::MergeFrom(const TrajectoryRawFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.TrajectoryRawFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_feature_.MergeFrom(from.point_feature_);
  if (from.has_st_raw_data()) {
    mutable_st_raw_data()->::apollo::planning::autotuning::ObstacleSTRawData::MergeFrom(from.st_raw_data());
  }
}

void TrajectoryRawFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.TrajectoryRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryRawFeature::CopyFrom(const TrajectoryRawFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.TrajectoryRawFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryRawFeature::IsInitialized() const {
  return true;
}

void TrajectoryRawFeature::Swap(TrajectoryRawFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryRawFeature::InternalSwap(TrajectoryRawFeature* other) {
  using std::swap;
  CastToBase(&point_feature_)->InternalSwap(CastToBase(&other->point_feature_));
  swap(st_raw_data_, other->st_raw_data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrajectoryRawFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace autotuning
}  // namespace planning
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::autotuning::PathPointRawFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::PathPointRawFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::PathPointRawFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::autotuning::SpeedPointRawFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::SpeedPointRawFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::SpeedPointRawFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::autotuning::ObstacleSTRawData* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::ObstacleSTRawData >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::ObstacleSTRawData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::autotuning::TrajectoryPointRawFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::TrajectoryPointRawFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::TrajectoryPointRawFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::autotuning::TrajectoryRawFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::TrajectoryRawFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::TrajectoryRawFeature >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
