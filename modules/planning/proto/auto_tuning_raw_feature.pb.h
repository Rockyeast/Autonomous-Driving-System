// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/auto_tuning_raw_feature.proto

#ifndef PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto
#define PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/pnc_point.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto 

namespace protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto
namespace apollo {
namespace planning {
namespace autotuning {
class ObstacleSTRawData;
class ObstacleSTRawDataDefaultTypeInternal;
extern ObstacleSTRawDataDefaultTypeInternal _ObstacleSTRawData_default_instance_;
class ObstacleSTRawData_ObstacleSTData;
class ObstacleSTRawData_ObstacleSTDataDefaultTypeInternal;
extern ObstacleSTRawData_ObstacleSTDataDefaultTypeInternal _ObstacleSTRawData_ObstacleSTData_default_instance_;
class ObstacleSTRawData_STPointPair;
class ObstacleSTRawData_STPointPairDefaultTypeInternal;
extern ObstacleSTRawData_STPointPairDefaultTypeInternal _ObstacleSTRawData_STPointPair_default_instance_;
class PathPointRawFeature;
class PathPointRawFeatureDefaultTypeInternal;
extern PathPointRawFeatureDefaultTypeInternal _PathPointRawFeature_default_instance_;
class SpeedPointRawFeature;
class SpeedPointRawFeatureDefaultTypeInternal;
extern SpeedPointRawFeatureDefaultTypeInternal _SpeedPointRawFeature_default_instance_;
class SpeedPointRawFeature_ObjectDecisionFeature;
class SpeedPointRawFeature_ObjectDecisionFeatureDefaultTypeInternal;
extern SpeedPointRawFeature_ObjectDecisionFeatureDefaultTypeInternal _SpeedPointRawFeature_ObjectDecisionFeature_default_instance_;
class TrajectoryPointRawFeature;
class TrajectoryPointRawFeatureDefaultTypeInternal;
extern TrajectoryPointRawFeatureDefaultTypeInternal _TrajectoryPointRawFeature_default_instance_;
class TrajectoryRawFeature;
class TrajectoryRawFeatureDefaultTypeInternal;
extern TrajectoryRawFeatureDefaultTypeInternal _TrajectoryRawFeature_default_instance_;
}  // namespace autotuning
}  // namespace planning
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::planning::autotuning::ObstacleSTRawData* Arena::CreateMaybeMessage<::apollo::planning::autotuning::ObstacleSTRawData>(Arena*);
template<> ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* Arena::CreateMaybeMessage<::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData>(Arena*);
template<> ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair* Arena::CreateMaybeMessage<::apollo::planning::autotuning::ObstacleSTRawData_STPointPair>(Arena*);
template<> ::apollo::planning::autotuning::PathPointRawFeature* Arena::CreateMaybeMessage<::apollo::planning::autotuning::PathPointRawFeature>(Arena*);
template<> ::apollo::planning::autotuning::SpeedPointRawFeature* Arena::CreateMaybeMessage<::apollo::planning::autotuning::SpeedPointRawFeature>(Arena*);
template<> ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* Arena::CreateMaybeMessage<::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature>(Arena*);
template<> ::apollo::planning::autotuning::TrajectoryPointRawFeature* Arena::CreateMaybeMessage<::apollo::planning::autotuning::TrajectoryPointRawFeature>(Arena*);
template<> ::apollo::planning::autotuning::TrajectoryRawFeature* Arena::CreateMaybeMessage<::apollo::planning::autotuning::TrajectoryRawFeature>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace planning {
namespace autotuning {

// ===================================================================

class PathPointRawFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.autotuning.PathPointRawFeature) */ {
 public:
  PathPointRawFeature();
  virtual ~PathPointRawFeature();

  PathPointRawFeature(const PathPointRawFeature& from);

  inline PathPointRawFeature& operator=(const PathPointRawFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PathPointRawFeature(PathPointRawFeature&& from) noexcept
    : PathPointRawFeature() {
    *this = ::std::move(from);
  }

  inline PathPointRawFeature& operator=(PathPointRawFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathPointRawFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathPointRawFeature* internal_default_instance() {
    return reinterpret_cast<const PathPointRawFeature*>(
               &_PathPointRawFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PathPointRawFeature* other);
  friend void swap(PathPointRawFeature& a, PathPointRawFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PathPointRawFeature* New() const final {
    return CreateMaybeMessage<PathPointRawFeature>(NULL);
  }

  PathPointRawFeature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PathPointRawFeature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PathPointRawFeature& from);
  void MergeFrom(const PathPointRawFeature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathPointRawFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.PathPoint cartesian_coord = 1;
  bool has_cartesian_coord() const;
  void clear_cartesian_coord();
  static const int kCartesianCoordFieldNumber = 1;
  private:
  const ::apollo::common::PathPoint& _internal_cartesian_coord() const;
  public:
  const ::apollo::common::PathPoint& cartesian_coord() const;
  ::apollo::common::PathPoint* release_cartesian_coord();
  ::apollo::common::PathPoint* mutable_cartesian_coord();
  void set_allocated_cartesian_coord(::apollo::common::PathPoint* cartesian_coord);

  // optional .apollo.common.FrenetFramePoint frenet_coord = 2;
  bool has_frenet_coord() const;
  void clear_frenet_coord();
  static const int kFrenetCoordFieldNumber = 2;
  private:
  const ::apollo::common::FrenetFramePoint& _internal_frenet_coord() const;
  public:
  const ::apollo::common::FrenetFramePoint& frenet_coord() const;
  ::apollo::common::FrenetFramePoint* release_frenet_coord();
  ::apollo::common::FrenetFramePoint* mutable_frenet_coord();
  void set_allocated_frenet_coord(::apollo::common::FrenetFramePoint* frenet_coord);

  // @@protoc_insertion_point(class_scope:apollo.planning.autotuning.PathPointRawFeature)
 private:
  void set_has_cartesian_coord();
  void clear_has_cartesian_coord();
  void set_has_frenet_coord();
  void clear_has_frenet_coord();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::common::PathPoint* cartesian_coord_;
  ::apollo::common::FrenetFramePoint* frenet_coord_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpeedPointRawFeature_ObjectDecisionFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature) */ {
 public:
  SpeedPointRawFeature_ObjectDecisionFeature();
  virtual ~SpeedPointRawFeature_ObjectDecisionFeature();

  SpeedPointRawFeature_ObjectDecisionFeature(const SpeedPointRawFeature_ObjectDecisionFeature& from);

  inline SpeedPointRawFeature_ObjectDecisionFeature& operator=(const SpeedPointRawFeature_ObjectDecisionFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeedPointRawFeature_ObjectDecisionFeature(SpeedPointRawFeature_ObjectDecisionFeature&& from) noexcept
    : SpeedPointRawFeature_ObjectDecisionFeature() {
    *this = ::std::move(from);
  }

  inline SpeedPointRawFeature_ObjectDecisionFeature& operator=(SpeedPointRawFeature_ObjectDecisionFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedPointRawFeature_ObjectDecisionFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedPointRawFeature_ObjectDecisionFeature* internal_default_instance() {
    return reinterpret_cast<const SpeedPointRawFeature_ObjectDecisionFeature*>(
               &_SpeedPointRawFeature_ObjectDecisionFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SpeedPointRawFeature_ObjectDecisionFeature* other);
  friend void swap(SpeedPointRawFeature_ObjectDecisionFeature& a, SpeedPointRawFeature_ObjectDecisionFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeedPointRawFeature_ObjectDecisionFeature* New() const final {
    return CreateMaybeMessage<SpeedPointRawFeature_ObjectDecisionFeature>(NULL);
  }

  SpeedPointRawFeature_ObjectDecisionFeature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpeedPointRawFeature_ObjectDecisionFeature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpeedPointRawFeature_ObjectDecisionFeature& from);
  void MergeFrom(const SpeedPointRawFeature_ObjectDecisionFeature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedPointRawFeature_ObjectDecisionFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double relative_s = 2;
  bool has_relative_s() const;
  void clear_relative_s();
  static const int kRelativeSFieldNumber = 2;
  double relative_s() const;
  void set_relative_s(double value);

  // optional double relative_l = 3;
  bool has_relative_l() const;
  void clear_relative_l();
  static const int kRelativeLFieldNumber = 3;
  double relative_l() const;
  void set_relative_l(double value);

  // optional double relative_v = 4;
  bool has_relative_v() const;
  void clear_relative_v();
  static const int kRelativeVFieldNumber = 4;
  double relative_v() const;
  void set_relative_v(double value);

  // optional double speed = 5;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 5;
  double speed() const;
  void set_speed(double value);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_relative_s();
  void clear_has_relative_s();
  void set_has_relative_l();
  void clear_has_relative_l();
  void set_has_relative_v();
  void clear_has_relative_v();
  void set_has_speed();
  void clear_has_speed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double relative_s_;
  double relative_l_;
  double relative_v_;
  double speed_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpeedPointRawFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.autotuning.SpeedPointRawFeature) */ {
 public:
  SpeedPointRawFeature();
  virtual ~SpeedPointRawFeature();

  SpeedPointRawFeature(const SpeedPointRawFeature& from);

  inline SpeedPointRawFeature& operator=(const SpeedPointRawFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeedPointRawFeature(SpeedPointRawFeature&& from) noexcept
    : SpeedPointRawFeature() {
    *this = ::std::move(from);
  }

  inline SpeedPointRawFeature& operator=(SpeedPointRawFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedPointRawFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedPointRawFeature* internal_default_instance() {
    return reinterpret_cast<const SpeedPointRawFeature*>(
               &_SpeedPointRawFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SpeedPointRawFeature* other);
  friend void swap(SpeedPointRawFeature& a, SpeedPointRawFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeedPointRawFeature* New() const final {
    return CreateMaybeMessage<SpeedPointRawFeature>(NULL);
  }

  SpeedPointRawFeature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpeedPointRawFeature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpeedPointRawFeature& from);
  void MergeFrom(const SpeedPointRawFeature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedPointRawFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SpeedPointRawFeature_ObjectDecisionFeature ObjectDecisionFeature;

  // accessors -------------------------------------------------------

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
  int follow_size() const;
  void clear_follow();
  static const int kFollowFieldNumber = 10;
  ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* mutable_follow(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
      mutable_follow();
  const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& follow(int index) const;
  ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* add_follow();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
      follow() const;

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
  int overtake_size() const;
  void clear_overtake();
  static const int kOvertakeFieldNumber = 11;
  ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* mutable_overtake(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
      mutable_overtake();
  const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& overtake(int index) const;
  ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* add_overtake();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
      overtake() const;

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
  int nudge_size() const;
  void clear_nudge();
  static const int kNudgeFieldNumber = 12;
  ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* mutable_nudge(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
      mutable_nudge();
  const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& nudge(int index) const;
  ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* add_nudge();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
      nudge() const;

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
  int virtual_decision_size() const;
  void clear_virtual_decision();
  static const int kVirtualDecisionFieldNumber = 13;
  ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* mutable_virtual_decision(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
      mutable_virtual_decision();
  const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& virtual_decision(int index) const;
  ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* add_virtual_decision();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
      virtual_decision() const;

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
  int stop_size() const;
  void clear_stop();
  static const int kStopFieldNumber = 14;
  ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* mutable_stop(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
      mutable_stop();
  const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& stop(int index) const;
  ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* add_stop();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
      stop() const;

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
  int collision_size() const;
  void clear_collision();
  static const int kCollisionFieldNumber = 15;
  ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* mutable_collision(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
      mutable_collision();
  const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& collision(int index) const;
  ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* add_collision();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
      collision() const;

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
  int sidepass_front_size() const;
  void clear_sidepass_front();
  static const int kSidepassFrontFieldNumber = 16;
  ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* mutable_sidepass_front(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
      mutable_sidepass_front();
  const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& sidepass_front(int index) const;
  ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* add_sidepass_front();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
      sidepass_front() const;

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
  int sidepass_rear_size() const;
  void clear_sidepass_rear();
  static const int kSidepassRearFieldNumber = 17;
  ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* mutable_sidepass_rear(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
      mutable_sidepass_rear();
  const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& sidepass_rear(int index) const;
  ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* add_sidepass_rear();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
      sidepass_rear() const;

  // repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature keep_clear = 18;
  int keep_clear_size() const;
  void clear_keep_clear();
  static const int kKeepClearFieldNumber = 18;
  ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* mutable_keep_clear(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
      mutable_keep_clear();
  const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& keep_clear(int index) const;
  ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* add_keep_clear();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
      keep_clear() const;

  // optional double s = 1;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 1;
  double s() const;
  void set_s(double value);

  // optional double t = 2;
  bool has_t() const;
  void clear_t();
  static const int kTFieldNumber = 2;
  double t() const;
  void set_t(double value);

  // optional double v = 3;
  bool has_v() const;
  void clear_v();
  static const int kVFieldNumber = 3;
  double v() const;
  void set_v(double value);

  // optional double a = 4;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 4;
  double a() const;
  void set_a(double value);

  // optional double j = 5;
  bool has_j() const;
  void clear_j();
  static const int kJFieldNumber = 5;
  double j() const;
  void set_j(double value);

  // optional double speed_limit = 6;
  bool has_speed_limit() const;
  void clear_speed_limit();
  static const int kSpeedLimitFieldNumber = 6;
  double speed_limit() const;
  void set_speed_limit(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.autotuning.SpeedPointRawFeature)
 private:
  void set_has_s();
  void clear_has_s();
  void set_has_t();
  void clear_has_t();
  void set_has_v();
  void clear_has_v();
  void set_has_a();
  void clear_has_a();
  void set_has_j();
  void clear_has_j();
  void set_has_speed_limit();
  void clear_has_speed_limit();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature > follow_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature > overtake_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature > nudge_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature > virtual_decision_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature > stop_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature > collision_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature > sidepass_front_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature > sidepass_rear_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature > keep_clear_;
  double s_;
  double t_;
  double v_;
  double a_;
  double j_;
  double speed_limit_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObstacleSTRawData_STPointPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.autotuning.ObstacleSTRawData.STPointPair) */ {
 public:
  ObstacleSTRawData_STPointPair();
  virtual ~ObstacleSTRawData_STPointPair();

  ObstacleSTRawData_STPointPair(const ObstacleSTRawData_STPointPair& from);

  inline ObstacleSTRawData_STPointPair& operator=(const ObstacleSTRawData_STPointPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObstacleSTRawData_STPointPair(ObstacleSTRawData_STPointPair&& from) noexcept
    : ObstacleSTRawData_STPointPair() {
    *this = ::std::move(from);
  }

  inline ObstacleSTRawData_STPointPair& operator=(ObstacleSTRawData_STPointPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObstacleSTRawData_STPointPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleSTRawData_STPointPair* internal_default_instance() {
    return reinterpret_cast<const ObstacleSTRawData_STPointPair*>(
               &_ObstacleSTRawData_STPointPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ObstacleSTRawData_STPointPair* other);
  friend void swap(ObstacleSTRawData_STPointPair& a, ObstacleSTRawData_STPointPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObstacleSTRawData_STPointPair* New() const final {
    return CreateMaybeMessage<ObstacleSTRawData_STPointPair>(NULL);
  }

  ObstacleSTRawData_STPointPair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleSTRawData_STPointPair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObstacleSTRawData_STPointPair& from);
  void MergeFrom(const ObstacleSTRawData_STPointPair& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleSTRawData_STPointPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double s_lower = 1;
  bool has_s_lower() const;
  void clear_s_lower();
  static const int kSLowerFieldNumber = 1;
  double s_lower() const;
  void set_s_lower(double value);

  // optional double s_upper = 2;
  bool has_s_upper() const;
  void clear_s_upper();
  static const int kSUpperFieldNumber = 2;
  double s_upper() const;
  void set_s_upper(double value);

  // optional double t = 3;
  bool has_t() const;
  void clear_t();
  static const int kTFieldNumber = 3;
  double t() const;
  void set_t(double value);

  // optional double l = 4 [default = 10];
  bool has_l() const;
  void clear_l();
  static const int kLFieldNumber = 4;
  double l() const;
  void set_l(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.autotuning.ObstacleSTRawData.STPointPair)
 private:
  void set_has_s_lower();
  void clear_has_s_lower();
  void set_has_s_upper();
  void clear_has_s_upper();
  void set_has_t();
  void clear_has_t();
  void set_has_l();
  void clear_has_l();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double s_lower_;
  double s_upper_;
  double t_;
  double l_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObstacleSTRawData_ObstacleSTData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData) */ {
 public:
  ObstacleSTRawData_ObstacleSTData();
  virtual ~ObstacleSTRawData_ObstacleSTData();

  ObstacleSTRawData_ObstacleSTData(const ObstacleSTRawData_ObstacleSTData& from);

  inline ObstacleSTRawData_ObstacleSTData& operator=(const ObstacleSTRawData_ObstacleSTData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObstacleSTRawData_ObstacleSTData(ObstacleSTRawData_ObstacleSTData&& from) noexcept
    : ObstacleSTRawData_ObstacleSTData() {
    *this = ::std::move(from);
  }

  inline ObstacleSTRawData_ObstacleSTData& operator=(ObstacleSTRawData_ObstacleSTData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObstacleSTRawData_ObstacleSTData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleSTRawData_ObstacleSTData* internal_default_instance() {
    return reinterpret_cast<const ObstacleSTRawData_ObstacleSTData*>(
               &_ObstacleSTRawData_ObstacleSTData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ObstacleSTRawData_ObstacleSTData* other);
  friend void swap(ObstacleSTRawData_ObstacleSTData& a, ObstacleSTRawData_ObstacleSTData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObstacleSTRawData_ObstacleSTData* New() const final {
    return CreateMaybeMessage<ObstacleSTRawData_ObstacleSTData>(NULL);
  }

  ObstacleSTRawData_ObstacleSTData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleSTRawData_ObstacleSTData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObstacleSTRawData_ObstacleSTData& from);
  void MergeFrom(const ObstacleSTRawData_ObstacleSTData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleSTRawData_ObstacleSTData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
  int polygon_size() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 8;
  ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair* mutable_polygon(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair >*
      mutable_polygon();
  const ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair& polygon(int index) const;
  ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair* add_polygon();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair >&
      polygon() const;

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
  int distribution_size() const;
  void clear_distribution();
  static const int kDistributionFieldNumber = 9;
  ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair* mutable_distribution(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair >*
      mutable_distribution();
  const ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair& distribution(int index) const;
  ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair* add_distribution();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair >&
      distribution() const;

  // optional double speed = 2;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 2;
  double speed() const;
  void set_speed(double value);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional bool is_virtual = 3;
  bool has_is_virtual() const;
  void clear_is_virtual();
  static const int kIsVirtualFieldNumber = 3;
  bool is_virtual() const;
  void set_is_virtual(bool value);

  // optional double probability = 4;
  bool has_probability() const;
  void clear_probability();
  static const int kProbabilityFieldNumber = 4;
  double probability() const;
  void set_probability(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_speed();
  void clear_has_speed();
  void set_has_is_virtual();
  void clear_has_is_virtual();
  void set_has_probability();
  void clear_has_probability();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair > polygon_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair > distribution_;
  double speed_;
  ::google::protobuf::int32 id_;
  bool is_virtual_;
  double probability_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObstacleSTRawData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.autotuning.ObstacleSTRawData) */ {
 public:
  ObstacleSTRawData();
  virtual ~ObstacleSTRawData();

  ObstacleSTRawData(const ObstacleSTRawData& from);

  inline ObstacleSTRawData& operator=(const ObstacleSTRawData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObstacleSTRawData(ObstacleSTRawData&& from) noexcept
    : ObstacleSTRawData() {
    *this = ::std::move(from);
  }

  inline ObstacleSTRawData& operator=(ObstacleSTRawData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObstacleSTRawData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleSTRawData* internal_default_instance() {
    return reinterpret_cast<const ObstacleSTRawData*>(
               &_ObstacleSTRawData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ObstacleSTRawData* other);
  friend void swap(ObstacleSTRawData& a, ObstacleSTRawData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObstacleSTRawData* New() const final {
    return CreateMaybeMessage<ObstacleSTRawData>(NULL);
  }

  ObstacleSTRawData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleSTRawData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObstacleSTRawData& from);
  void MergeFrom(const ObstacleSTRawData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleSTRawData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ObstacleSTRawData_STPointPair STPointPair;
  typedef ObstacleSTRawData_ObstacleSTData ObstacleSTData;

  // accessors -------------------------------------------------------

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
  int obstacle_st_data_size() const;
  void clear_obstacle_st_data();
  static const int kObstacleStDataFieldNumber = 1;
  ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* mutable_obstacle_st_data(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >*
      mutable_obstacle_st_data();
  const ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData& obstacle_st_data(int index) const;
  ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* add_obstacle_st_data();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >&
      obstacle_st_data() const;

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
  int obstacle_st_nudge_size() const;
  void clear_obstacle_st_nudge();
  static const int kObstacleStNudgeFieldNumber = 2;
  ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* mutable_obstacle_st_nudge(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >*
      mutable_obstacle_st_nudge();
  const ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData& obstacle_st_nudge(int index) const;
  ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* add_obstacle_st_nudge();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >&
      obstacle_st_nudge() const;

  // repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
  int obstacle_st_sidepass_size() const;
  void clear_obstacle_st_sidepass();
  static const int kObstacleStSidepassFieldNumber = 3;
  ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* mutable_obstacle_st_sidepass(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >*
      mutable_obstacle_st_sidepass();
  const ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData& obstacle_st_sidepass(int index) const;
  ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* add_obstacle_st_sidepass();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >&
      obstacle_st_sidepass() const;

  // @@protoc_insertion_point(class_scope:apollo.planning.autotuning.ObstacleSTRawData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData > obstacle_st_data_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData > obstacle_st_nudge_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData > obstacle_st_sidepass_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrajectoryPointRawFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.autotuning.TrajectoryPointRawFeature) */ {
 public:
  TrajectoryPointRawFeature();
  virtual ~TrajectoryPointRawFeature();

  TrajectoryPointRawFeature(const TrajectoryPointRawFeature& from);

  inline TrajectoryPointRawFeature& operator=(const TrajectoryPointRawFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrajectoryPointRawFeature(TrajectoryPointRawFeature&& from) noexcept
    : TrajectoryPointRawFeature() {
    *this = ::std::move(from);
  }

  inline TrajectoryPointRawFeature& operator=(TrajectoryPointRawFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryPointRawFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryPointRawFeature* internal_default_instance() {
    return reinterpret_cast<const TrajectoryPointRawFeature*>(
               &_TrajectoryPointRawFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(TrajectoryPointRawFeature* other);
  friend void swap(TrajectoryPointRawFeature& a, TrajectoryPointRawFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryPointRawFeature* New() const final {
    return CreateMaybeMessage<TrajectoryPointRawFeature>(NULL);
  }

  TrajectoryPointRawFeature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryPointRawFeature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrajectoryPointRawFeature& from);
  void MergeFrom(const TrajectoryPointRawFeature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryPointRawFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.autotuning.PathPointRawFeature path_feature = 1;
  bool has_path_feature() const;
  void clear_path_feature();
  static const int kPathFeatureFieldNumber = 1;
  private:
  const ::apollo::planning::autotuning::PathPointRawFeature& _internal_path_feature() const;
  public:
  const ::apollo::planning::autotuning::PathPointRawFeature& path_feature() const;
  ::apollo::planning::autotuning::PathPointRawFeature* release_path_feature();
  ::apollo::planning::autotuning::PathPointRawFeature* mutable_path_feature();
  void set_allocated_path_feature(::apollo::planning::autotuning::PathPointRawFeature* path_feature);

  // optional .apollo.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
  bool has_speed_feature() const;
  void clear_speed_feature();
  static const int kSpeedFeatureFieldNumber = 2;
  private:
  const ::apollo::planning::autotuning::SpeedPointRawFeature& _internal_speed_feature() const;
  public:
  const ::apollo::planning::autotuning::SpeedPointRawFeature& speed_feature() const;
  ::apollo::planning::autotuning::SpeedPointRawFeature* release_speed_feature();
  ::apollo::planning::autotuning::SpeedPointRawFeature* mutable_speed_feature();
  void set_allocated_speed_feature(::apollo::planning::autotuning::SpeedPointRawFeature* speed_feature);

  // @@protoc_insertion_point(class_scope:apollo.planning.autotuning.TrajectoryPointRawFeature)
 private:
  void set_has_path_feature();
  void clear_has_path_feature();
  void set_has_speed_feature();
  void clear_has_speed_feature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::planning::autotuning::PathPointRawFeature* path_feature_;
  ::apollo::planning::autotuning::SpeedPointRawFeature* speed_feature_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrajectoryRawFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.autotuning.TrajectoryRawFeature) */ {
 public:
  TrajectoryRawFeature();
  virtual ~TrajectoryRawFeature();

  TrajectoryRawFeature(const TrajectoryRawFeature& from);

  inline TrajectoryRawFeature& operator=(const TrajectoryRawFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrajectoryRawFeature(TrajectoryRawFeature&& from) noexcept
    : TrajectoryRawFeature() {
    *this = ::std::move(from);
  }

  inline TrajectoryRawFeature& operator=(TrajectoryRawFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryRawFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryRawFeature* internal_default_instance() {
    return reinterpret_cast<const TrajectoryRawFeature*>(
               &_TrajectoryRawFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TrajectoryRawFeature* other);
  friend void swap(TrajectoryRawFeature& a, TrajectoryRawFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryRawFeature* New() const final {
    return CreateMaybeMessage<TrajectoryRawFeature>(NULL);
  }

  TrajectoryRawFeature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryRawFeature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TrajectoryRawFeature& from);
  void MergeFrom(const TrajectoryRawFeature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryRawFeature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
  int point_feature_size() const;
  void clear_point_feature();
  static const int kPointFeatureFieldNumber = 1;
  ::apollo::planning::autotuning::TrajectoryPointRawFeature* mutable_point_feature(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::TrajectoryPointRawFeature >*
      mutable_point_feature();
  const ::apollo::planning::autotuning::TrajectoryPointRawFeature& point_feature(int index) const;
  ::apollo::planning::autotuning::TrajectoryPointRawFeature* add_point_feature();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::TrajectoryPointRawFeature >&
      point_feature() const;

  // optional .apollo.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
  bool has_st_raw_data() const;
  void clear_st_raw_data();
  static const int kStRawDataFieldNumber = 2;
  private:
  const ::apollo::planning::autotuning::ObstacleSTRawData& _internal_st_raw_data() const;
  public:
  const ::apollo::planning::autotuning::ObstacleSTRawData& st_raw_data() const;
  ::apollo::planning::autotuning::ObstacleSTRawData* release_st_raw_data();
  ::apollo::planning::autotuning::ObstacleSTRawData* mutable_st_raw_data();
  void set_allocated_st_raw_data(::apollo::planning::autotuning::ObstacleSTRawData* st_raw_data);

  // @@protoc_insertion_point(class_scope:apollo.planning.autotuning.TrajectoryRawFeature)
 private:
  void set_has_st_raw_data();
  void clear_has_st_raw_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::TrajectoryPointRawFeature > point_feature_;
  ::apollo::planning::autotuning::ObstacleSTRawData* st_raw_data_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PathPointRawFeature

// optional .apollo.common.PathPoint cartesian_coord = 1;
inline bool PathPointRawFeature::has_cartesian_coord() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathPointRawFeature::set_has_cartesian_coord() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathPointRawFeature::clear_has_cartesian_coord() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::common::PathPoint& PathPointRawFeature::_internal_cartesian_coord() const {
  return *cartesian_coord_;
}
inline const ::apollo::common::PathPoint& PathPointRawFeature::cartesian_coord() const {
  const ::apollo::common::PathPoint* p = cartesian_coord_;
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointRawFeature.cartesian_coord)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::PathPoint*>(
      &::apollo::common::_PathPoint_default_instance_);
}
inline ::apollo::common::PathPoint* PathPointRawFeature::release_cartesian_coord() {
  // @@protoc_insertion_point(field_release:apollo.planning.autotuning.PathPointRawFeature.cartesian_coord)
  clear_has_cartesian_coord();
  ::apollo::common::PathPoint* temp = cartesian_coord_;
  cartesian_coord_ = NULL;
  return temp;
}
inline ::apollo::common::PathPoint* PathPointRawFeature::mutable_cartesian_coord() {
  set_has_cartesian_coord();
  if (cartesian_coord_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::PathPoint>(GetArenaNoVirtual());
    cartesian_coord_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.PathPointRawFeature.cartesian_coord)
  return cartesian_coord_;
}
inline void PathPointRawFeature::set_allocated_cartesian_coord(::apollo::common::PathPoint* cartesian_coord) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(cartesian_coord_);
  }
  if (cartesian_coord) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cartesian_coord = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cartesian_coord, submessage_arena);
    }
    set_has_cartesian_coord();
  } else {
    clear_has_cartesian_coord();
  }
  cartesian_coord_ = cartesian_coord;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.autotuning.PathPointRawFeature.cartesian_coord)
}

// optional .apollo.common.FrenetFramePoint frenet_coord = 2;
inline bool PathPointRawFeature::has_frenet_coord() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PathPointRawFeature::set_has_frenet_coord() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PathPointRawFeature::clear_has_frenet_coord() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::common::FrenetFramePoint& PathPointRawFeature::_internal_frenet_coord() const {
  return *frenet_coord_;
}
inline const ::apollo::common::FrenetFramePoint& PathPointRawFeature::frenet_coord() const {
  const ::apollo::common::FrenetFramePoint* p = frenet_coord_;
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.PathPointRawFeature.frenet_coord)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::FrenetFramePoint*>(
      &::apollo::common::_FrenetFramePoint_default_instance_);
}
inline ::apollo::common::FrenetFramePoint* PathPointRawFeature::release_frenet_coord() {
  // @@protoc_insertion_point(field_release:apollo.planning.autotuning.PathPointRawFeature.frenet_coord)
  clear_has_frenet_coord();
  ::apollo::common::FrenetFramePoint* temp = frenet_coord_;
  frenet_coord_ = NULL;
  return temp;
}
inline ::apollo::common::FrenetFramePoint* PathPointRawFeature::mutable_frenet_coord() {
  set_has_frenet_coord();
  if (frenet_coord_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::FrenetFramePoint>(GetArenaNoVirtual());
    frenet_coord_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.PathPointRawFeature.frenet_coord)
  return frenet_coord_;
}
inline void PathPointRawFeature::set_allocated_frenet_coord(::apollo::common::FrenetFramePoint* frenet_coord) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(frenet_coord_);
  }
  if (frenet_coord) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      frenet_coord = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, frenet_coord, submessage_arena);
    }
    set_has_frenet_coord();
  } else {
    clear_has_frenet_coord();
  }
  frenet_coord_ = frenet_coord;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.autotuning.PathPointRawFeature.frenet_coord)
}

// -------------------------------------------------------------------

// SpeedPointRawFeature_ObjectDecisionFeature

// optional int32 id = 1;
inline bool SpeedPointRawFeature_ObjectDecisionFeature::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpeedPointRawFeature_ObjectDecisionFeature::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpeedPointRawFeature_ObjectDecisionFeature::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpeedPointRawFeature_ObjectDecisionFeature::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SpeedPointRawFeature_ObjectDecisionFeature::id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.id)
  return id_;
}
inline void SpeedPointRawFeature_ObjectDecisionFeature::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.id)
}

// optional double relative_s = 2;
inline bool SpeedPointRawFeature_ObjectDecisionFeature::has_relative_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeedPointRawFeature_ObjectDecisionFeature::set_has_relative_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpeedPointRawFeature_ObjectDecisionFeature::clear_has_relative_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpeedPointRawFeature_ObjectDecisionFeature::clear_relative_s() {
  relative_s_ = 0;
  clear_has_relative_s();
}
inline double SpeedPointRawFeature_ObjectDecisionFeature::relative_s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.relative_s)
  return relative_s_;
}
inline void SpeedPointRawFeature_ObjectDecisionFeature::set_relative_s(double value) {
  set_has_relative_s();
  relative_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.relative_s)
}

// optional double relative_l = 3;
inline bool SpeedPointRawFeature_ObjectDecisionFeature::has_relative_l() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpeedPointRawFeature_ObjectDecisionFeature::set_has_relative_l() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpeedPointRawFeature_ObjectDecisionFeature::clear_has_relative_l() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpeedPointRawFeature_ObjectDecisionFeature::clear_relative_l() {
  relative_l_ = 0;
  clear_has_relative_l();
}
inline double SpeedPointRawFeature_ObjectDecisionFeature::relative_l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.relative_l)
  return relative_l_;
}
inline void SpeedPointRawFeature_ObjectDecisionFeature::set_relative_l(double value) {
  set_has_relative_l();
  relative_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.relative_l)
}

// optional double relative_v = 4;
inline bool SpeedPointRawFeature_ObjectDecisionFeature::has_relative_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpeedPointRawFeature_ObjectDecisionFeature::set_has_relative_v() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpeedPointRawFeature_ObjectDecisionFeature::clear_has_relative_v() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpeedPointRawFeature_ObjectDecisionFeature::clear_relative_v() {
  relative_v_ = 0;
  clear_has_relative_v();
}
inline double SpeedPointRawFeature_ObjectDecisionFeature::relative_v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.relative_v)
  return relative_v_;
}
inline void SpeedPointRawFeature_ObjectDecisionFeature::set_relative_v(double value) {
  set_has_relative_v();
  relative_v_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.relative_v)
}

// optional double speed = 5;
inline bool SpeedPointRawFeature_ObjectDecisionFeature::has_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpeedPointRawFeature_ObjectDecisionFeature::set_has_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpeedPointRawFeature_ObjectDecisionFeature::clear_has_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpeedPointRawFeature_ObjectDecisionFeature::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double SpeedPointRawFeature_ObjectDecisionFeature::speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.speed)
  return speed_;
}
inline void SpeedPointRawFeature_ObjectDecisionFeature::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature.speed)
}

// -------------------------------------------------------------------

// SpeedPointRawFeature

// optional double s = 1;
inline bool SpeedPointRawFeature::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeedPointRawFeature::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpeedPointRawFeature::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpeedPointRawFeature::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double SpeedPointRawFeature::s() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.s)
  return s_;
}
inline void SpeedPointRawFeature::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.s)
}

// optional double t = 2;
inline bool SpeedPointRawFeature::has_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpeedPointRawFeature::set_has_t() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpeedPointRawFeature::clear_has_t() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpeedPointRawFeature::clear_t() {
  t_ = 0;
  clear_has_t();
}
inline double SpeedPointRawFeature::t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.t)
  return t_;
}
inline void SpeedPointRawFeature::set_t(double value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.t)
}

// optional double v = 3;
inline bool SpeedPointRawFeature::has_v() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpeedPointRawFeature::set_has_v() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpeedPointRawFeature::clear_has_v() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpeedPointRawFeature::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline double SpeedPointRawFeature::v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.v)
  return v_;
}
inline void SpeedPointRawFeature::set_v(double value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.v)
}

// optional double a = 4;
inline bool SpeedPointRawFeature::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpeedPointRawFeature::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpeedPointRawFeature::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpeedPointRawFeature::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline double SpeedPointRawFeature::a() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.a)
  return a_;
}
inline void SpeedPointRawFeature::set_a(double value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.a)
}

// optional double j = 5;
inline bool SpeedPointRawFeature::has_j() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpeedPointRawFeature::set_has_j() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpeedPointRawFeature::clear_has_j() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpeedPointRawFeature::clear_j() {
  j_ = 0;
  clear_has_j();
}
inline double SpeedPointRawFeature::j() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.j)
  return j_;
}
inline void SpeedPointRawFeature::set_j(double value) {
  set_has_j();
  j_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.j)
}

// optional double speed_limit = 6;
inline bool SpeedPointRawFeature::has_speed_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SpeedPointRawFeature::set_has_speed_limit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SpeedPointRawFeature::clear_has_speed_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SpeedPointRawFeature::clear_speed_limit() {
  speed_limit_ = 0;
  clear_has_speed_limit();
}
inline double SpeedPointRawFeature::speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.speed_limit)
  return speed_limit_;
}
inline void SpeedPointRawFeature::set_speed_limit(double value) {
  set_has_speed_limit();
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.SpeedPointRawFeature.speed_limit)
}

// repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature follow = 10;
inline int SpeedPointRawFeature::follow_size() const {
  return follow_.size();
}
inline void SpeedPointRawFeature::clear_follow() {
  follow_.Clear();
}
inline ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_follow(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointRawFeature.follow)
  return follow_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_follow() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointRawFeature.follow)
  return &follow_;
}
inline const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::follow(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.follow)
  return follow_.Get(index);
}
inline ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_follow() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointRawFeature.follow)
  return follow_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::follow() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointRawFeature.follow)
  return follow_;
}

// repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature overtake = 11;
inline int SpeedPointRawFeature::overtake_size() const {
  return overtake_.size();
}
inline void SpeedPointRawFeature::clear_overtake() {
  overtake_.Clear();
}
inline ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_overtake(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointRawFeature.overtake)
  return overtake_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_overtake() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointRawFeature.overtake)
  return &overtake_;
}
inline const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::overtake(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.overtake)
  return overtake_.Get(index);
}
inline ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_overtake() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointRawFeature.overtake)
  return overtake_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::overtake() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointRawFeature.overtake)
  return overtake_;
}

// repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature virtual_decision = 13;
inline int SpeedPointRawFeature::virtual_decision_size() const {
  return virtual_decision_.size();
}
inline void SpeedPointRawFeature::clear_virtual_decision() {
  virtual_decision_.Clear();
}
inline ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_virtual_decision(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointRawFeature.virtual_decision)
  return virtual_decision_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_virtual_decision() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointRawFeature.virtual_decision)
  return &virtual_decision_;
}
inline const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::virtual_decision(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.virtual_decision)
  return virtual_decision_.Get(index);
}
inline ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_virtual_decision() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointRawFeature.virtual_decision)
  return virtual_decision_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::virtual_decision() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointRawFeature.virtual_decision)
  return virtual_decision_;
}

// repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature stop = 14;
inline int SpeedPointRawFeature::stop_size() const {
  return stop_.size();
}
inline void SpeedPointRawFeature::clear_stop() {
  stop_.Clear();
}
inline ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_stop(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointRawFeature.stop)
  return stop_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_stop() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointRawFeature.stop)
  return &stop_;
}
inline const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::stop(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.stop)
  return stop_.Get(index);
}
inline ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_stop() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointRawFeature.stop)
  return stop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::stop() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointRawFeature.stop)
  return stop_;
}

// repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature collision = 15;
inline int SpeedPointRawFeature::collision_size() const {
  return collision_.size();
}
inline void SpeedPointRawFeature::clear_collision() {
  collision_.Clear();
}
inline ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_collision(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointRawFeature.collision)
  return collision_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_collision() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointRawFeature.collision)
  return &collision_;
}
inline const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::collision(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.collision)
  return collision_.Get(index);
}
inline ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_collision() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointRawFeature.collision)
  return collision_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::collision() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointRawFeature.collision)
  return collision_;
}

// repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature nudge = 12;
inline int SpeedPointRawFeature::nudge_size() const {
  return nudge_.size();
}
inline void SpeedPointRawFeature::clear_nudge() {
  nudge_.Clear();
}
inline ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_nudge(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointRawFeature.nudge)
  return nudge_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_nudge() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointRawFeature.nudge)
  return &nudge_;
}
inline const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::nudge(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.nudge)
  return nudge_.Get(index);
}
inline ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_nudge() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointRawFeature.nudge)
  return nudge_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::nudge() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointRawFeature.nudge)
  return nudge_;
}

// repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_front = 16;
inline int SpeedPointRawFeature::sidepass_front_size() const {
  return sidepass_front_.size();
}
inline void SpeedPointRawFeature::clear_sidepass_front() {
  sidepass_front_.Clear();
}
inline ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_sidepass_front(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointRawFeature.sidepass_front)
  return sidepass_front_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_sidepass_front() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointRawFeature.sidepass_front)
  return &sidepass_front_;
}
inline const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::sidepass_front(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.sidepass_front)
  return sidepass_front_.Get(index);
}
inline ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_sidepass_front() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointRawFeature.sidepass_front)
  return sidepass_front_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::sidepass_front() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointRawFeature.sidepass_front)
  return sidepass_front_;
}

// repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature sidepass_rear = 17;
inline int SpeedPointRawFeature::sidepass_rear_size() const {
  return sidepass_rear_.size();
}
inline void SpeedPointRawFeature::clear_sidepass_rear() {
  sidepass_rear_.Clear();
}
inline ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_sidepass_rear(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointRawFeature.sidepass_rear)
  return sidepass_rear_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_sidepass_rear() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointRawFeature.sidepass_rear)
  return &sidepass_rear_;
}
inline const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::sidepass_rear(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.sidepass_rear)
  return sidepass_rear_.Get(index);
}
inline ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_sidepass_rear() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointRawFeature.sidepass_rear)
  return sidepass_rear_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::sidepass_rear() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointRawFeature.sidepass_rear)
  return sidepass_rear_;
}

// repeated .apollo.planning.autotuning.SpeedPointRawFeature.ObjectDecisionFeature keep_clear = 18;
inline int SpeedPointRawFeature::keep_clear_size() const {
  return keep_clear_.size();
}
inline void SpeedPointRawFeature::clear_keep_clear() {
  keep_clear_.Clear();
}
inline ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::mutable_keep_clear(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.SpeedPointRawFeature.keep_clear)
  return keep_clear_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >*
SpeedPointRawFeature::mutable_keep_clear() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.SpeedPointRawFeature.keep_clear)
  return &keep_clear_;
}
inline const ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature& SpeedPointRawFeature::keep_clear(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.SpeedPointRawFeature.keep_clear)
  return keep_clear_.Get(index);
}
inline ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature* SpeedPointRawFeature::add_keep_clear() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.SpeedPointRawFeature.keep_clear)
  return keep_clear_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::SpeedPointRawFeature_ObjectDecisionFeature >&
SpeedPointRawFeature::keep_clear() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.SpeedPointRawFeature.keep_clear)
  return keep_clear_;
}

// -------------------------------------------------------------------

// ObstacleSTRawData_STPointPair

// optional double s_lower = 1;
inline bool ObstacleSTRawData_STPointPair::has_s_lower() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstacleSTRawData_STPointPair::set_has_s_lower() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObstacleSTRawData_STPointPair::clear_has_s_lower() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObstacleSTRawData_STPointPair::clear_s_lower() {
  s_lower_ = 0;
  clear_has_s_lower();
}
inline double ObstacleSTRawData_STPointPair::s_lower() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.STPointPair.s_lower)
  return s_lower_;
}
inline void ObstacleSTRawData_STPointPair::set_s_lower(double value) {
  set_has_s_lower();
  s_lower_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.ObstacleSTRawData.STPointPair.s_lower)
}

// optional double s_upper = 2;
inline bool ObstacleSTRawData_STPointPair::has_s_upper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObstacleSTRawData_STPointPair::set_has_s_upper() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObstacleSTRawData_STPointPair::clear_has_s_upper() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObstacleSTRawData_STPointPair::clear_s_upper() {
  s_upper_ = 0;
  clear_has_s_upper();
}
inline double ObstacleSTRawData_STPointPair::s_upper() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.STPointPair.s_upper)
  return s_upper_;
}
inline void ObstacleSTRawData_STPointPair::set_s_upper(double value) {
  set_has_s_upper();
  s_upper_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.ObstacleSTRawData.STPointPair.s_upper)
}

// optional double t = 3;
inline bool ObstacleSTRawData_STPointPair::has_t() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObstacleSTRawData_STPointPair::set_has_t() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObstacleSTRawData_STPointPair::clear_has_t() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObstacleSTRawData_STPointPair::clear_t() {
  t_ = 0;
  clear_has_t();
}
inline double ObstacleSTRawData_STPointPair::t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.STPointPair.t)
  return t_;
}
inline void ObstacleSTRawData_STPointPair::set_t(double value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.ObstacleSTRawData.STPointPair.t)
}

// optional double l = 4 [default = 10];
inline bool ObstacleSTRawData_STPointPair::has_l() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObstacleSTRawData_STPointPair::set_has_l() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObstacleSTRawData_STPointPair::clear_has_l() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObstacleSTRawData_STPointPair::clear_l() {
  l_ = 10;
  clear_has_l();
}
inline double ObstacleSTRawData_STPointPair::l() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.STPointPair.l)
  return l_;
}
inline void ObstacleSTRawData_STPointPair::set_l(double value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.ObstacleSTRawData.STPointPair.l)
}

// -------------------------------------------------------------------

// ObstacleSTRawData_ObstacleSTData

// optional int32 id = 1;
inline bool ObstacleSTRawData_ObstacleSTData::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObstacleSTRawData_ObstacleSTData::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObstacleSTRawData_ObstacleSTData::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObstacleSTRawData_ObstacleSTData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ObstacleSTRawData_ObstacleSTData::id() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.id)
  return id_;
}
inline void ObstacleSTRawData_ObstacleSTData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.id)
}

// optional double speed = 2;
inline bool ObstacleSTRawData_ObstacleSTData::has_speed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstacleSTRawData_ObstacleSTData::set_has_speed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObstacleSTRawData_ObstacleSTData::clear_has_speed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObstacleSTRawData_ObstacleSTData::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double ObstacleSTRawData_ObstacleSTData::speed() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.speed)
  return speed_;
}
inline void ObstacleSTRawData_ObstacleSTData::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.speed)
}

// optional bool is_virtual = 3;
inline bool ObstacleSTRawData_ObstacleSTData::has_is_virtual() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObstacleSTRawData_ObstacleSTData::set_has_is_virtual() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObstacleSTRawData_ObstacleSTData::clear_has_is_virtual() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObstacleSTRawData_ObstacleSTData::clear_is_virtual() {
  is_virtual_ = false;
  clear_has_is_virtual();
}
inline bool ObstacleSTRawData_ObstacleSTData::is_virtual() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.is_virtual)
  return is_virtual_;
}
inline void ObstacleSTRawData_ObstacleSTData::set_is_virtual(bool value) {
  set_has_is_virtual();
  is_virtual_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.is_virtual)
}

// optional double probability = 4;
inline bool ObstacleSTRawData_ObstacleSTData::has_probability() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObstacleSTRawData_ObstacleSTData::set_has_probability() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObstacleSTRawData_ObstacleSTData::clear_has_probability() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObstacleSTRawData_ObstacleSTData::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
inline double ObstacleSTRawData_ObstacleSTData::probability() const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.probability)
  return probability_;
}
inline void ObstacleSTRawData_ObstacleSTData::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.probability)
}

// repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair polygon = 8;
inline int ObstacleSTRawData_ObstacleSTData::polygon_size() const {
  return polygon_.size();
}
inline void ObstacleSTRawData_ObstacleSTData::clear_polygon() {
  polygon_.Clear();
}
inline ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair* ObstacleSTRawData_ObstacleSTData::mutable_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.polygon)
  return polygon_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair >*
ObstacleSTRawData_ObstacleSTData::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.polygon)
  return &polygon_;
}
inline const ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair& ObstacleSTRawData_ObstacleSTData::polygon(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.polygon)
  return polygon_.Get(index);
}
inline ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair* ObstacleSTRawData_ObstacleSTData::add_polygon() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.polygon)
  return polygon_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair >&
ObstacleSTRawData_ObstacleSTData::polygon() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.polygon)
  return polygon_;
}

// repeated .apollo.planning.autotuning.ObstacleSTRawData.STPointPair distribution = 9;
inline int ObstacleSTRawData_ObstacleSTData::distribution_size() const {
  return distribution_.size();
}
inline void ObstacleSTRawData_ObstacleSTData::clear_distribution() {
  distribution_.Clear();
}
inline ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair* ObstacleSTRawData_ObstacleSTData::mutable_distribution(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.distribution)
  return distribution_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair >*
ObstacleSTRawData_ObstacleSTData::mutable_distribution() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.distribution)
  return &distribution_;
}
inline const ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair& ObstacleSTRawData_ObstacleSTData::distribution(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.distribution)
  return distribution_.Get(index);
}
inline ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair* ObstacleSTRawData_ObstacleSTData::add_distribution() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.distribution)
  return distribution_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_STPointPair >&
ObstacleSTRawData_ObstacleSTData::distribution() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData.distribution)
  return distribution_;
}

// -------------------------------------------------------------------

// ObstacleSTRawData

// repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_data = 1;
inline int ObstacleSTRawData::obstacle_st_data_size() const {
  return obstacle_st_data_.size();
}
inline void ObstacleSTRawData::clear_obstacle_st_data() {
  obstacle_st_data_.Clear();
}
inline ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData::mutable_obstacle_st_data(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_data)
  return obstacle_st_data_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >*
ObstacleSTRawData::mutable_obstacle_st_data() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_data)
  return &obstacle_st_data_;
}
inline const ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData& ObstacleSTRawData::obstacle_st_data(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_data)
  return obstacle_st_data_.Get(index);
}
inline ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData::add_obstacle_st_data() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_data)
  return obstacle_st_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >&
ObstacleSTRawData::obstacle_st_data() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_data)
  return obstacle_st_data_;
}

// repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_nudge = 2;
inline int ObstacleSTRawData::obstacle_st_nudge_size() const {
  return obstacle_st_nudge_.size();
}
inline void ObstacleSTRawData::clear_obstacle_st_nudge() {
  obstacle_st_nudge_.Clear();
}
inline ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData::mutable_obstacle_st_nudge(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_nudge)
  return obstacle_st_nudge_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >*
ObstacleSTRawData::mutable_obstacle_st_nudge() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_nudge)
  return &obstacle_st_nudge_;
}
inline const ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData& ObstacleSTRawData::obstacle_st_nudge(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_nudge)
  return obstacle_st_nudge_.Get(index);
}
inline ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData::add_obstacle_st_nudge() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_nudge)
  return obstacle_st_nudge_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >&
ObstacleSTRawData::obstacle_st_nudge() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_nudge)
  return obstacle_st_nudge_;
}

// repeated .apollo.planning.autotuning.ObstacleSTRawData.ObstacleSTData obstacle_st_sidepass = 3;
inline int ObstacleSTRawData::obstacle_st_sidepass_size() const {
  return obstacle_st_sidepass_.size();
}
inline void ObstacleSTRawData::clear_obstacle_st_sidepass() {
  obstacle_st_sidepass_.Clear();
}
inline ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData::mutable_obstacle_st_sidepass(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_sidepass)
  return obstacle_st_sidepass_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >*
ObstacleSTRawData::mutable_obstacle_st_sidepass() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_sidepass)
  return &obstacle_st_sidepass_;
}
inline const ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData& ObstacleSTRawData::obstacle_st_sidepass(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_sidepass)
  return obstacle_st_sidepass_.Get(index);
}
inline ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData* ObstacleSTRawData::add_obstacle_st_sidepass() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_sidepass)
  return obstacle_st_sidepass_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::ObstacleSTRawData_ObstacleSTData >&
ObstacleSTRawData::obstacle_st_sidepass() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.ObstacleSTRawData.obstacle_st_sidepass)
  return obstacle_st_sidepass_;
}

// -------------------------------------------------------------------

// TrajectoryPointRawFeature

// optional .apollo.planning.autotuning.PathPointRawFeature path_feature = 1;
inline bool TrajectoryPointRawFeature::has_path_feature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrajectoryPointRawFeature::set_has_path_feature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrajectoryPointRawFeature::clear_has_path_feature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrajectoryPointRawFeature::clear_path_feature() {
  if (path_feature_ != NULL) path_feature_->Clear();
  clear_has_path_feature();
}
inline const ::apollo::planning::autotuning::PathPointRawFeature& TrajectoryPointRawFeature::_internal_path_feature() const {
  return *path_feature_;
}
inline const ::apollo::planning::autotuning::PathPointRawFeature& TrajectoryPointRawFeature::path_feature() const {
  const ::apollo::planning::autotuning::PathPointRawFeature* p = path_feature_;
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.TrajectoryPointRawFeature.path_feature)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::autotuning::PathPointRawFeature*>(
      &::apollo::planning::autotuning::_PathPointRawFeature_default_instance_);
}
inline ::apollo::planning::autotuning::PathPointRawFeature* TrajectoryPointRawFeature::release_path_feature() {
  // @@protoc_insertion_point(field_release:apollo.planning.autotuning.TrajectoryPointRawFeature.path_feature)
  clear_has_path_feature();
  ::apollo::planning::autotuning::PathPointRawFeature* temp = path_feature_;
  path_feature_ = NULL;
  return temp;
}
inline ::apollo::planning::autotuning::PathPointRawFeature* TrajectoryPointRawFeature::mutable_path_feature() {
  set_has_path_feature();
  if (path_feature_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::autotuning::PathPointRawFeature>(GetArenaNoVirtual());
    path_feature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.TrajectoryPointRawFeature.path_feature)
  return path_feature_;
}
inline void TrajectoryPointRawFeature::set_allocated_path_feature(::apollo::planning::autotuning::PathPointRawFeature* path_feature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete path_feature_;
  }
  if (path_feature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      path_feature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path_feature, submessage_arena);
    }
    set_has_path_feature();
  } else {
    clear_has_path_feature();
  }
  path_feature_ = path_feature;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.autotuning.TrajectoryPointRawFeature.path_feature)
}

// optional .apollo.planning.autotuning.SpeedPointRawFeature speed_feature = 2;
inline bool TrajectoryPointRawFeature::has_speed_feature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrajectoryPointRawFeature::set_has_speed_feature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrajectoryPointRawFeature::clear_has_speed_feature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrajectoryPointRawFeature::clear_speed_feature() {
  if (speed_feature_ != NULL) speed_feature_->Clear();
  clear_has_speed_feature();
}
inline const ::apollo::planning::autotuning::SpeedPointRawFeature& TrajectoryPointRawFeature::_internal_speed_feature() const {
  return *speed_feature_;
}
inline const ::apollo::planning::autotuning::SpeedPointRawFeature& TrajectoryPointRawFeature::speed_feature() const {
  const ::apollo::planning::autotuning::SpeedPointRawFeature* p = speed_feature_;
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.TrajectoryPointRawFeature.speed_feature)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::autotuning::SpeedPointRawFeature*>(
      &::apollo::planning::autotuning::_SpeedPointRawFeature_default_instance_);
}
inline ::apollo::planning::autotuning::SpeedPointRawFeature* TrajectoryPointRawFeature::release_speed_feature() {
  // @@protoc_insertion_point(field_release:apollo.planning.autotuning.TrajectoryPointRawFeature.speed_feature)
  clear_has_speed_feature();
  ::apollo::planning::autotuning::SpeedPointRawFeature* temp = speed_feature_;
  speed_feature_ = NULL;
  return temp;
}
inline ::apollo::planning::autotuning::SpeedPointRawFeature* TrajectoryPointRawFeature::mutable_speed_feature() {
  set_has_speed_feature();
  if (speed_feature_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::autotuning::SpeedPointRawFeature>(GetArenaNoVirtual());
    speed_feature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.TrajectoryPointRawFeature.speed_feature)
  return speed_feature_;
}
inline void TrajectoryPointRawFeature::set_allocated_speed_feature(::apollo::planning::autotuning::SpeedPointRawFeature* speed_feature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete speed_feature_;
  }
  if (speed_feature) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      speed_feature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speed_feature, submessage_arena);
    }
    set_has_speed_feature();
  } else {
    clear_has_speed_feature();
  }
  speed_feature_ = speed_feature;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.autotuning.TrajectoryPointRawFeature.speed_feature)
}

// -------------------------------------------------------------------

// TrajectoryRawFeature

// repeated .apollo.planning.autotuning.TrajectoryPointRawFeature point_feature = 1;
inline int TrajectoryRawFeature::point_feature_size() const {
  return point_feature_.size();
}
inline void TrajectoryRawFeature::clear_point_feature() {
  point_feature_.Clear();
}
inline ::apollo::planning::autotuning::TrajectoryPointRawFeature* TrajectoryRawFeature::mutable_point_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.TrajectoryRawFeature.point_feature)
  return point_feature_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::TrajectoryPointRawFeature >*
TrajectoryRawFeature::mutable_point_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.autotuning.TrajectoryRawFeature.point_feature)
  return &point_feature_;
}
inline const ::apollo::planning::autotuning::TrajectoryPointRawFeature& TrajectoryRawFeature::point_feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.TrajectoryRawFeature.point_feature)
  return point_feature_.Get(index);
}
inline ::apollo::planning::autotuning::TrajectoryPointRawFeature* TrajectoryRawFeature::add_point_feature() {
  // @@protoc_insertion_point(field_add:apollo.planning.autotuning.TrajectoryRawFeature.point_feature)
  return point_feature_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::autotuning::TrajectoryPointRawFeature >&
TrajectoryRawFeature::point_feature() const {
  // @@protoc_insertion_point(field_list:apollo.planning.autotuning.TrajectoryRawFeature.point_feature)
  return point_feature_;
}

// optional .apollo.planning.autotuning.ObstacleSTRawData st_raw_data = 2;
inline bool TrajectoryRawFeature::has_st_raw_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrajectoryRawFeature::set_has_st_raw_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrajectoryRawFeature::clear_has_st_raw_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrajectoryRawFeature::clear_st_raw_data() {
  if (st_raw_data_ != NULL) st_raw_data_->Clear();
  clear_has_st_raw_data();
}
inline const ::apollo::planning::autotuning::ObstacleSTRawData& TrajectoryRawFeature::_internal_st_raw_data() const {
  return *st_raw_data_;
}
inline const ::apollo::planning::autotuning::ObstacleSTRawData& TrajectoryRawFeature::st_raw_data() const {
  const ::apollo::planning::autotuning::ObstacleSTRawData* p = st_raw_data_;
  // @@protoc_insertion_point(field_get:apollo.planning.autotuning.TrajectoryRawFeature.st_raw_data)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::autotuning::ObstacleSTRawData*>(
      &::apollo::planning::autotuning::_ObstacleSTRawData_default_instance_);
}
inline ::apollo::planning::autotuning::ObstacleSTRawData* TrajectoryRawFeature::release_st_raw_data() {
  // @@protoc_insertion_point(field_release:apollo.planning.autotuning.TrajectoryRawFeature.st_raw_data)
  clear_has_st_raw_data();
  ::apollo::planning::autotuning::ObstacleSTRawData* temp = st_raw_data_;
  st_raw_data_ = NULL;
  return temp;
}
inline ::apollo::planning::autotuning::ObstacleSTRawData* TrajectoryRawFeature::mutable_st_raw_data() {
  set_has_st_raw_data();
  if (st_raw_data_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::autotuning::ObstacleSTRawData>(GetArenaNoVirtual());
    st_raw_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.autotuning.TrajectoryRawFeature.st_raw_data)
  return st_raw_data_;
}
inline void TrajectoryRawFeature::set_allocated_st_raw_data(::apollo::planning::autotuning::ObstacleSTRawData* st_raw_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete st_raw_data_;
  }
  if (st_raw_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      st_raw_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, st_raw_data, submessage_arena);
    }
    set_has_st_raw_data();
  } else {
    clear_has_st_raw_data();
  }
  st_raw_data_ = st_raw_data;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.autotuning.TrajectoryRawFeature.st_raw_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace autotuning
}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fauto_5ftuning_5fraw_5ffeature_2eproto
