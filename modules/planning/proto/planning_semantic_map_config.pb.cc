// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_semantic_map_config.proto

#include "modules/planning/proto/planning_semantic_map_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace apollo {
namespace planning {
class PlanningSemanticMapConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlanningSemanticMapConfig>
      _instance;
} _PlanningSemanticMapConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
namespace protobuf_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto {
static void InitDefaultsPlanningSemanticMapConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PlanningSemanticMapConfig_default_instance_;
    new (ptr) ::apollo::planning::PlanningSemanticMapConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PlanningSemanticMapConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlanningSemanticMapConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlanningSemanticMapConfig}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PlanningSemanticMapConfig.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, ego_idx_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, ego_idx_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, max_rand_delta_phi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, max_ego_future_horizon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, max_ego_past_horizon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, max_obs_future_horizon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, max_obs_past_horizon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, base_map_padding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningSemanticMapConfig, city_driving_max_speed_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  1,
  11,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::apollo::planning::PlanningSemanticMapConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PlanningSemanticMapConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/planning/proto/planning_semantic_map_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n9modules/planning/proto/planning_semant"
      "ic_map_config.proto\022\017apollo.planning\"\310\002\n"
      "\031PlanningSemanticMapConfig\022\022\n\nresolution"
      "\030\001 \001(\001\022\016\n\006height\030d \001(\005\022\r\n\005width\030e \001(\005\022\021\n"
      "\tego_idx_x\030f \001(\005\022\021\n\tego_idx_y\030g \001(\005\022\032\n\022m"
      "ax_rand_delta_phi\030h \001(\001\022\036\n\026max_ego_futur"
      "e_horizon\030i \001(\001\022\034\n\024max_ego_past_horizon\030"
      "j \001(\001\022\036\n\026max_obs_future_horizon\030k \001(\001\022\034\n"
      "\024max_obs_past_horizon\030l \001(\001\022\031\n\020base_map_"
      "padding\030\310\001 \001(\005\022\037\n\026city_driving_max_speed"
      "\030\311\001 \001(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 407);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/planning_semantic_map_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto
namespace apollo {
namespace planning {

// ===================================================================

void PlanningSemanticMapConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningSemanticMapConfig::kResolutionFieldNumber;
const int PlanningSemanticMapConfig::kHeightFieldNumber;
const int PlanningSemanticMapConfig::kWidthFieldNumber;
const int PlanningSemanticMapConfig::kEgoIdxXFieldNumber;
const int PlanningSemanticMapConfig::kEgoIdxYFieldNumber;
const int PlanningSemanticMapConfig::kMaxRandDeltaPhiFieldNumber;
const int PlanningSemanticMapConfig::kMaxEgoFutureHorizonFieldNumber;
const int PlanningSemanticMapConfig::kMaxEgoPastHorizonFieldNumber;
const int PlanningSemanticMapConfig::kMaxObsFutureHorizonFieldNumber;
const int PlanningSemanticMapConfig::kMaxObsPastHorizonFieldNumber;
const int PlanningSemanticMapConfig::kBaseMapPaddingFieldNumber;
const int PlanningSemanticMapConfig::kCityDrivingMaxSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningSemanticMapConfig::PlanningSemanticMapConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto::scc_info_PlanningSemanticMapConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlanningSemanticMapConfig)
}
PlanningSemanticMapConfig::PlanningSemanticMapConfig(const PlanningSemanticMapConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&resolution_, &from.resolution_,
    static_cast<size_t>(reinterpret_cast<char*>(&city_driving_max_speed_) -
    reinterpret_cast<char*>(&resolution_)) + sizeof(city_driving_max_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningSemanticMapConfig)
}

void PlanningSemanticMapConfig::SharedCtor() {
  ::memset(&resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&city_driving_max_speed_) -
      reinterpret_cast<char*>(&resolution_)) + sizeof(city_driving_max_speed_));
}

PlanningSemanticMapConfig::~PlanningSemanticMapConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningSemanticMapConfig)
  SharedDtor();
}

void PlanningSemanticMapConfig::SharedDtor() {
}

void PlanningSemanticMapConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlanningSemanticMapConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanningSemanticMapConfig& PlanningSemanticMapConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto::scc_info_PlanningSemanticMapConfig.base);
  return *internal_default_instance();
}


void PlanningSemanticMapConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningSemanticMapConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&resolution_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_ego_future_horizon_) -
        reinterpret_cast<char*>(&resolution_)) + sizeof(max_ego_future_horizon_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&max_ego_past_horizon_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&city_driving_max_speed_) -
        reinterpret_cast<char*>(&max_ego_past_horizon_)) + sizeof(city_driving_max_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlanningSemanticMapConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PlanningSemanticMapConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double resolution = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 808 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ego_idx_x = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 816 & 0xFF */)) {
          set_has_ego_idx_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ego_idx_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ego_idx_y = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 824 & 0xFF */)) {
          set_has_ego_idx_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ego_idx_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_rand_delta_phi = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 833 & 0xFF */)) {
          set_has_max_rand_delta_phi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_rand_delta_phi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_ego_future_horizon = 105;
      case 105: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 841 & 0xFF */)) {
          set_has_max_ego_future_horizon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_ego_future_horizon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_ego_past_horizon = 106;
      case 106: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 849 & 0xFF */)) {
          set_has_max_ego_past_horizon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_ego_past_horizon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_obs_future_horizon = 107;
      case 107: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 857 & 0xFF */)) {
          set_has_max_obs_future_horizon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_obs_future_horizon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_obs_past_horizon = 108;
      case 108: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 865 & 0xFF */)) {
          set_has_max_obs_past_horizon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_obs_past_horizon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 base_map_padding = 200;
      case 200: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 1600 & 0xFF */)) {
          set_has_base_map_padding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_map_padding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double city_driving_max_speed = 201;
      case 201: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 1609 & 0xFF */)) {
          set_has_city_driving_max_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &city_driving_max_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PlanningSemanticMapConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PlanningSemanticMapConfig)
  return false;
#undef DO_
}

void PlanningSemanticMapConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PlanningSemanticMapConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double resolution = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->resolution(), output);
  }

  // optional int32 height = 100;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(100, this->height(), output);
  }

  // optional int32 width = 101;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(101, this->width(), output);
  }

  // optional int32 ego_idx_x = 102;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(102, this->ego_idx_x(), output);
  }

  // optional int32 ego_idx_y = 103;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(103, this->ego_idx_y(), output);
  }

  // optional double max_rand_delta_phi = 104;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(104, this->max_rand_delta_phi(), output);
  }

  // optional double max_ego_future_horizon = 105;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(105, this->max_ego_future_horizon(), output);
  }

  // optional double max_ego_past_horizon = 106;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(106, this->max_ego_past_horizon(), output);
  }

  // optional double max_obs_future_horizon = 107;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(107, this->max_obs_future_horizon(), output);
  }

  // optional double max_obs_past_horizon = 108;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(108, this->max_obs_past_horizon(), output);
  }

  // optional int32 base_map_padding = 200;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(200, this->base_map_padding(), output);
  }

  // optional double city_driving_max_speed = 201;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(201, this->city_driving_max_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PlanningSemanticMapConfig)
}

::google::protobuf::uint8* PlanningSemanticMapConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningSemanticMapConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double resolution = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->resolution(), target);
  }

  // optional int32 height = 100;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(100, this->height(), target);
  }

  // optional int32 width = 101;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(101, this->width(), target);
  }

  // optional int32 ego_idx_x = 102;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(102, this->ego_idx_x(), target);
  }

  // optional int32 ego_idx_y = 103;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(103, this->ego_idx_y(), target);
  }

  // optional double max_rand_delta_phi = 104;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(104, this->max_rand_delta_phi(), target);
  }

  // optional double max_ego_future_horizon = 105;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(105, this->max_ego_future_horizon(), target);
  }

  // optional double max_ego_past_horizon = 106;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(106, this->max_ego_past_horizon(), target);
  }

  // optional double max_obs_future_horizon = 107;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(107, this->max_obs_future_horizon(), target);
  }

  // optional double max_obs_past_horizon = 108;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(108, this->max_obs_past_horizon(), target);
  }

  // optional int32 base_map_padding = 200;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(200, this->base_map_padding(), target);
  }

  // optional double city_driving_max_speed = 201;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(201, this->city_driving_max_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningSemanticMapConfig)
  return target;
}

size_t PlanningSemanticMapConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningSemanticMapConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double resolution = 1;
    if (has_resolution()) {
      total_size += 1 + 8;
    }

    // optional int32 base_map_padding = 200;
    if (has_base_map_padding()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_map_padding());
    }

    // optional int32 height = 100;
    if (has_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 width = 101;
    if (has_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 ego_idx_x = 102;
    if (has_ego_idx_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ego_idx_x());
    }

    // optional int32 ego_idx_y = 103;
    if (has_ego_idx_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ego_idx_y());
    }

    // optional double max_rand_delta_phi = 104;
    if (has_max_rand_delta_phi()) {
      total_size += 2 + 8;
    }

    // optional double max_ego_future_horizon = 105;
    if (has_max_ego_future_horizon()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double max_ego_past_horizon = 106;
    if (has_max_ego_past_horizon()) {
      total_size += 2 + 8;
    }

    // optional double max_obs_future_horizon = 107;
    if (has_max_obs_future_horizon()) {
      total_size += 2 + 8;
    }

    // optional double max_obs_past_horizon = 108;
    if (has_max_obs_past_horizon()) {
      total_size += 2 + 8;
    }

    // optional double city_driving_max_speed = 201;
    if (has_city_driving_max_speed()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningSemanticMapConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlanningSemanticMapConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningSemanticMapConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningSemanticMapConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlanningSemanticMapConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlanningSemanticMapConfig)
    MergeFrom(*source);
  }
}

void PlanningSemanticMapConfig::MergeFrom(const PlanningSemanticMapConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningSemanticMapConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      resolution_ = from.resolution_;
    }
    if (cached_has_bits & 0x00000002u) {
      base_map_padding_ = from.base_map_padding_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      ego_idx_x_ = from.ego_idx_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      ego_idx_y_ = from.ego_idx_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_rand_delta_phi_ = from.max_rand_delta_phi_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_ego_future_horizon_ = from.max_ego_future_horizon_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      max_ego_past_horizon_ = from.max_ego_past_horizon_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_obs_future_horizon_ = from.max_obs_future_horizon_;
    }
    if (cached_has_bits & 0x00000400u) {
      max_obs_past_horizon_ = from.max_obs_past_horizon_;
    }
    if (cached_has_bits & 0x00000800u) {
      city_driving_max_speed_ = from.city_driving_max_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningSemanticMapConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlanningSemanticMapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningSemanticMapConfig::CopyFrom(const PlanningSemanticMapConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningSemanticMapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningSemanticMapConfig::IsInitialized() const {
  return true;
}

void PlanningSemanticMapConfig::Swap(PlanningSemanticMapConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningSemanticMapConfig::InternalSwap(PlanningSemanticMapConfig* other) {
  using std::swap;
  swap(resolution_, other->resolution_);
  swap(base_map_padding_, other->base_map_padding_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(ego_idx_x_, other->ego_idx_x_);
  swap(ego_idx_y_, other->ego_idx_y_);
  swap(max_rand_delta_phi_, other->max_rand_delta_phi_);
  swap(max_ego_future_horizon_, other->max_ego_future_horizon_);
  swap(max_ego_past_horizon_, other->max_ego_past_horizon_);
  swap(max_obs_future_horizon_, other->max_obs_future_horizon_);
  swap(max_obs_past_horizon_, other->max_obs_past_horizon_);
  swap(city_driving_max_speed_, other->city_driving_max_speed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlanningSemanticMapConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fsemantic_5fmap_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PlanningSemanticMapConfig* Arena::CreateMaybeMessage< ::apollo::planning::PlanningSemanticMapConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PlanningSemanticMapConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
