// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/auto_tuning_model_input.proto

#include "modules/planning/proto/auto_tuning_model_input.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PathPointwiseFeature_BoundRelatedFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PathPointwiseFeature_ObstacleFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SpeedPointwiseFeature_ObstacleFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SpeedPointwiseFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PathPointwiseFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TrajectoryPointwiseFeature;
}  // namespace protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto
namespace apollo {
namespace planning {
namespace autotuning {
class PathPointwiseFeature_ObstacleFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathPointwiseFeature_ObstacleFeature>
      _instance;
} _PathPointwiseFeature_ObstacleFeature_default_instance_;
class PathPointwiseFeature_BoundRelatedFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathPointwiseFeature_BoundRelatedFeature>
      _instance;
} _PathPointwiseFeature_BoundRelatedFeature_default_instance_;
class PathPointwiseFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PathPointwiseFeature>
      _instance;
} _PathPointwiseFeature_default_instance_;
class SpeedPointwiseFeature_ObstacleFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedPointwiseFeature_ObstacleFeature>
      _instance;
} _SpeedPointwiseFeature_ObstacleFeature_default_instance_;
class SpeedPointwiseFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpeedPointwiseFeature>
      _instance;
} _SpeedPointwiseFeature_default_instance_;
class TrajectoryPointwiseFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryPointwiseFeature>
      _instance;
} _TrajectoryPointwiseFeature_default_instance_;
class TrajectoryFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryFeature>
      _instance;
} _TrajectoryFeature_default_instance_;
}  // namespace autotuning
}  // namespace planning
}  // namespace apollo
namespace protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto {
static void InitDefaultsPathPointwiseFeature_ObstacleFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_PathPointwiseFeature_ObstacleFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PathPointwiseFeature_ObstacleFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPathPointwiseFeature_ObstacleFeature}, {}};

static void InitDefaultsPathPointwiseFeature_BoundRelatedFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_PathPointwiseFeature_BoundRelatedFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PathPointwiseFeature_BoundRelatedFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPathPointwiseFeature_BoundRelatedFeature}, {}};

static void InitDefaultsPathPointwiseFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_PathPointwiseFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::PathPointwiseFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::PathPointwiseFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PathPointwiseFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPathPointwiseFeature}, {
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::scc_info_PathPointwiseFeature_ObstacleFeature.base,
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::scc_info_PathPointwiseFeature_BoundRelatedFeature.base,}};

static void InitDefaultsSpeedPointwiseFeature_ObstacleFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_SpeedPointwiseFeature_ObstacleFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SpeedPointwiseFeature_ObstacleFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSpeedPointwiseFeature_ObstacleFeature}, {}};

static void InitDefaultsSpeedPointwiseFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_SpeedPointwiseFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::SpeedPointwiseFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::SpeedPointwiseFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SpeedPointwiseFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpeedPointwiseFeature}, {
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::scc_info_SpeedPointwiseFeature_ObstacleFeature.base,}};

static void InitDefaultsTrajectoryPointwiseFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_TrajectoryPointwiseFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::TrajectoryPointwiseFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::TrajectoryPointwiseFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TrajectoryPointwiseFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTrajectoryPointwiseFeature}, {
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::scc_info_PathPointwiseFeature.base,
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::scc_info_SpeedPointwiseFeature.base,}};

static void InitDefaultsTrajectoryFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::autotuning::_TrajectoryFeature_default_instance_;
    new (ptr) ::apollo::planning::autotuning::TrajectoryFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::autotuning::TrajectoryFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrajectoryFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrajectoryFeature}, {
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::scc_info_TrajectoryPointwiseFeature.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PathPointwiseFeature_ObstacleFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PathPointwiseFeature_BoundRelatedFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PathPointwiseFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeedPointwiseFeature_ObstacleFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpeedPointwiseFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrajectoryPointwiseFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrajectoryFeature.base);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature, lateral_distance_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature, bound_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature, crossable_level_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, dl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, ddl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, kappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, obstacle_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, left_bound_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::PathPointwiseFeature, right_bound_feature_),
  2,
  3,
  4,
  5,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, longitudinal_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, obstacle_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, lateral_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature, relative_v_),
  0,
  1,
  4,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, jerk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, follow_obs_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, overtake_obs_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, nudge_obs_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, stop_obs_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, collision_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, virtual_obs_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, lateral_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, path_curvature_abs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, sidepass_front_obs_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::SpeedPointwiseFeature, sidepass_rear_obs_feature_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  8,
  ~0u,
  6,
  7,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointwiseFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointwiseFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointwiseFeature, path_input_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryPointwiseFeature, speed_input_feature_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::autotuning::TrajectoryFeature, point_feature_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature)},
  { 7, 14, sizeof(::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature)},
  { 16, 28, sizeof(::apollo::planning::autotuning::PathPointwiseFeature)},
  { 35, 45, sizeof(::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature)},
  { 50, 71, sizeof(::apollo::planning::autotuning::SpeedPointwiseFeature)},
  { 87, 94, sizeof(::apollo::planning::autotuning::TrajectoryPointwiseFeature)},
  { 96, 102, sizeof(::apollo::planning::autotuning::TrajectoryFeature)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::autotuning::_PathPointwiseFeature_ObstacleFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::autotuning::_PathPointwiseFeature_BoundRelatedFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::autotuning::_PathPointwiseFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::autotuning::_SpeedPointwiseFeature_ObstacleFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::autotuning::_SpeedPointwiseFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::autotuning::_TrajectoryPointwiseFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::autotuning::_TrajectoryFeature_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/planning/proto/auto_tuning_model_input.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n4modules/planning/proto/auto_tuning_mod"
      "el_input.proto\022\032apollo.planning.autotuni"
      "ng\"\371\004\n\024PathPointwiseFeature\022\t\n\001l\030\001 \001(\001\022\n"
      "\n\002dl\030\002 \001(\001\022\013\n\003ddl\030\003 \001(\001\022\r\n\005kappa\030\004 \001(\001\022W"
      "\n\robstacle_info\030\005 \003(\0132@.apollo.planning."
      "autotuning.PathPointwiseFeature.Obstacle"
      "Feature\022`\n\022left_bound_feature\030\006 \001(\0132D.ap"
      "ollo.planning.autotuning.PathPointwiseFe"
      "ature.BoundRelatedFeature\022a\n\023right_bound"
      "_feature\030\007 \001(\0132D.apollo.planning.autotun"
      "ing.PathPointwiseFeature.BoundRelatedFea"
      "ture\032+\n\017ObstacleFeature\022\030\n\020lateral_dista"
      "nce\030\001 \001(\001\032\342\001\n\023BoundRelatedFeature\022\026\n\016bou"
      "nd_distance\030\001 \001(\001\022l\n\017crossable_level\030\002 \001"
      "(\0162S.apollo.planning.autotuning.PathPoin"
      "twiseFeature.BoundRelatedFeature.Crossab"
      "leLevel\"E\n\016CrossableLevel\022\016\n\nCROSS_FREE\020"
      "\000\022\016\n\nCROSS_ABLE\020\001\022\023\n\017CROSS_FORBIDDEN\020\002\"\207"
      "\010\n\025SpeedPointwiseFeature\022\014\n\001s\030\001 \001(\001:\0010\022\014"
      "\n\001t\030\002 \001(\001:\0010\022\014\n\001v\030\003 \001(\001:\0010\022\026\n\013speed_limi"
      "t\030\004 \001(\001:\0010\022\016\n\003acc\030\005 \001(\001:\0010\022\017\n\004jerk\030\006 \001(\001"
      ":\0010\022]\n\022follow_obs_feature\030\007 \003(\0132A.apollo"
      ".planning.autotuning.SpeedPointwiseFeatu"
      "re.ObstacleFeature\022_\n\024overtake_obs_featu"
      "re\030\010 \003(\0132A.apollo.planning.autotuning.Sp"
      "eedPointwiseFeature.ObstacleFeature\022\\\n\021n"
      "udge_obs_feature\030\t \003(\0132A.apollo.planning"
      ".autotuning.SpeedPointwiseFeature.Obstac"
      "leFeature\022[\n\020stop_obs_feature\030\n \003(\0132A.ap"
      "ollo.planning.autotuning.SpeedPointwiseF"
      "eature.ObstacleFeature\022\032\n\017collision_time"
      "s\030\013 \001(\005:\0010\022^\n\023virtual_obs_feature\030\014 \003(\0132"
      "A.apollo.planning.autotuning.SpeedPointw"
      "iseFeature.ObstacleFeature\022\026\n\013lateral_ac"
      "c\030\r \001(\001:\0010\022\035\n\022path_curvature_abs\030\016 \001(\001:\001"
      "0\022e\n\032sidepass_front_obs_feature\030\017 \003(\0132A."
      "apollo.planning.autotuning.SpeedPointwis"
      "eFeature.ObstacleFeature\022d\n\031sidepass_rea"
      "r_obs_feature\030\020 \003(\0132A.apollo.planning.au"
      "totuning.SpeedPointwiseFeature.ObstacleF"
      "eature\032\217\001\n\017ObstacleFeature\022\035\n\025longitudin"
      "al_distance\030\001 \001(\001\022\026\n\016obstacle_speed\030\002 \001("
      "\001\022\034\n\020lateral_distance\030\003 \001(\001:\00210\022\023\n\013proba"
      "bility\030\004 \001(\001\022\022\n\nrelative_v\030\005 \001(\001\"\272\001\n\032Tra"
      "jectoryPointwiseFeature\022L\n\022path_input_fe"
      "ature\030\001 \001(\01320.apollo.planning.autotuning"
      ".PathPointwiseFeature\022N\n\023speed_input_fea"
      "ture\030\002 \001(\01321.apollo.planning.autotuning."
      "SpeedPointwiseFeature\"b\n\021TrajectoryFeatu"
      "re\022M\n\rpoint_feature\030\001 \003(\01326.apollo.plann"
      "ing.autotuning.TrajectoryPointwiseFeatur"
      "e"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2041);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/auto_tuning_model_input.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto
namespace apollo {
namespace planning {
namespace autotuning {
const ::google::protobuf::EnumDescriptor* PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::file_level_enum_descriptors[0];
}
bool PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::CROSS_FREE;
const PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::CROSS_ABLE;
const PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::CROSS_FORBIDDEN;
const PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::CrossableLevel_MIN;
const PathPointwiseFeature_BoundRelatedFeature_CrossableLevel PathPointwiseFeature_BoundRelatedFeature::CrossableLevel_MAX;
const int PathPointwiseFeature_BoundRelatedFeature::CrossableLevel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void PathPointwiseFeature_ObstacleFeature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPointwiseFeature_ObstacleFeature::kLateralDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPointwiseFeature_ObstacleFeature::PathPointwiseFeature_ObstacleFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::scc_info_PathPointwiseFeature_ObstacleFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
}
PathPointwiseFeature_ObstacleFeature::PathPointwiseFeature_ObstacleFeature(const PathPointwiseFeature_ObstacleFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lateral_distance_ = from.lateral_distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
}

void PathPointwiseFeature_ObstacleFeature::SharedCtor() {
  lateral_distance_ = 0;
}

PathPointwiseFeature_ObstacleFeature::~PathPointwiseFeature_ObstacleFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  SharedDtor();
}

void PathPointwiseFeature_ObstacleFeature::SharedDtor() {
}

void PathPointwiseFeature_ObstacleFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PathPointwiseFeature_ObstacleFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathPointwiseFeature_ObstacleFeature& PathPointwiseFeature_ObstacleFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::scc_info_PathPointwiseFeature_ObstacleFeature.base);
  return *internal_default_instance();
}


void PathPointwiseFeature_ObstacleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lateral_distance_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PathPointwiseFeature_ObstacleFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double lateral_distance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_lateral_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  return false;
#undef DO_
}

void PathPointwiseFeature_ObstacleFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lateral_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lateral_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
}

::google::protobuf::uint8* PathPointwiseFeature_ObstacleFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lateral_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->lateral_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  return target;
}

size_t PathPointwiseFeature_ObstacleFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional double lateral_distance = 1;
  if (has_lateral_distance()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathPointwiseFeature_ObstacleFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPointwiseFeature_ObstacleFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPointwiseFeature_ObstacleFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
    MergeFrom(*source);
  }
}

void PathPointwiseFeature_ObstacleFeature::MergeFrom(const PathPointwiseFeature_ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lateral_distance()) {
    set_lateral_distance(from.lateral_distance());
  }
}

void PathPointwiseFeature_ObstacleFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPointwiseFeature_ObstacleFeature::CopyFrom(const PathPointwiseFeature_ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointwiseFeature_ObstacleFeature::IsInitialized() const {
  return true;
}

void PathPointwiseFeature_ObstacleFeature::Swap(PathPointwiseFeature_ObstacleFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPointwiseFeature_ObstacleFeature::InternalSwap(PathPointwiseFeature_ObstacleFeature* other) {
  using std::swap;
  swap(lateral_distance_, other->lateral_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PathPointwiseFeature_ObstacleFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PathPointwiseFeature_BoundRelatedFeature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPointwiseFeature_BoundRelatedFeature::kBoundDistanceFieldNumber;
const int PathPointwiseFeature_BoundRelatedFeature::kCrossableLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPointwiseFeature_BoundRelatedFeature::PathPointwiseFeature_BoundRelatedFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::scc_info_PathPointwiseFeature_BoundRelatedFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
}
PathPointwiseFeature_BoundRelatedFeature::PathPointwiseFeature_BoundRelatedFeature(const PathPointwiseFeature_BoundRelatedFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bound_distance_, &from.bound_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&crossable_level_) -
    reinterpret_cast<char*>(&bound_distance_)) + sizeof(crossable_level_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
}

void PathPointwiseFeature_BoundRelatedFeature::SharedCtor() {
  ::memset(&bound_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crossable_level_) -
      reinterpret_cast<char*>(&bound_distance_)) + sizeof(crossable_level_));
}

PathPointwiseFeature_BoundRelatedFeature::~PathPointwiseFeature_BoundRelatedFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  SharedDtor();
}

void PathPointwiseFeature_BoundRelatedFeature::SharedDtor() {
}

void PathPointwiseFeature_BoundRelatedFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PathPointwiseFeature_BoundRelatedFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathPointwiseFeature_BoundRelatedFeature& PathPointwiseFeature_BoundRelatedFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::scc_info_PathPointwiseFeature_BoundRelatedFeature.base);
  return *internal_default_instance();
}


void PathPointwiseFeature_BoundRelatedFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&bound_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crossable_level_) -
        reinterpret_cast<char*>(&bound_distance_)) + sizeof(crossable_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PathPointwiseFeature_BoundRelatedFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double bound_distance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_bound_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bound_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel crossable_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel_IsValid(value)) {
            set_crossable_level(static_cast< ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature_CrossableLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  return false;
#undef DO_
}

void PathPointwiseFeature_BoundRelatedFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double bound_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->bound_distance(), output);
  }

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel crossable_level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->crossable_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
}

::google::protobuf::uint8* PathPointwiseFeature_BoundRelatedFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double bound_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->bound_distance(), target);
  }

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel crossable_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->crossable_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  return target;
}

size_t PathPointwiseFeature_BoundRelatedFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double bound_distance = 1;
    if (has_bound_distance()) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature.CrossableLevel crossable_level = 2;
    if (has_crossable_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->crossable_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathPointwiseFeature_BoundRelatedFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPointwiseFeature_BoundRelatedFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPointwiseFeature_BoundRelatedFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
    MergeFrom(*source);
  }
}

void PathPointwiseFeature_BoundRelatedFeature::MergeFrom(const PathPointwiseFeature_BoundRelatedFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      bound_distance_ = from.bound_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      crossable_level_ = from.crossable_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PathPointwiseFeature_BoundRelatedFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPointwiseFeature_BoundRelatedFeature::CopyFrom(const PathPointwiseFeature_BoundRelatedFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointwiseFeature_BoundRelatedFeature::IsInitialized() const {
  return true;
}

void PathPointwiseFeature_BoundRelatedFeature::Swap(PathPointwiseFeature_BoundRelatedFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPointwiseFeature_BoundRelatedFeature::InternalSwap(PathPointwiseFeature_BoundRelatedFeature* other) {
  using std::swap;
  swap(bound_distance_, other->bound_distance_);
  swap(crossable_level_, other->crossable_level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PathPointwiseFeature_BoundRelatedFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PathPointwiseFeature::InitAsDefaultInstance() {
  ::apollo::planning::autotuning::_PathPointwiseFeature_default_instance_._instance.get_mutable()->left_bound_feature_ = const_cast< ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature*>(
      ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature::internal_default_instance());
  ::apollo::planning::autotuning::_PathPointwiseFeature_default_instance_._instance.get_mutable()->right_bound_feature_ = const_cast< ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature*>(
      ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathPointwiseFeature::kLFieldNumber;
const int PathPointwiseFeature::kDlFieldNumber;
const int PathPointwiseFeature::kDdlFieldNumber;
const int PathPointwiseFeature::kKappaFieldNumber;
const int PathPointwiseFeature::kObstacleInfoFieldNumber;
const int PathPointwiseFeature::kLeftBoundFeatureFieldNumber;
const int PathPointwiseFeature::kRightBoundFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathPointwiseFeature::PathPointwiseFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::scc_info_PathPointwiseFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.PathPointwiseFeature)
}
PathPointwiseFeature::PathPointwiseFeature(const PathPointwiseFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      obstacle_info_(from.obstacle_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left_bound_feature()) {
    left_bound_feature_ = new ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature(*from.left_bound_feature_);
  } else {
    left_bound_feature_ = NULL;
  }
  if (from.has_right_bound_feature()) {
    right_bound_feature_ = new ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature(*from.right_bound_feature_);
  } else {
    right_bound_feature_ = NULL;
  }
  ::memcpy(&l_, &from.l_,
    static_cast<size_t>(reinterpret_cast<char*>(&kappa_) -
    reinterpret_cast<char*>(&l_)) + sizeof(kappa_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.PathPointwiseFeature)
}

void PathPointwiseFeature::SharedCtor() {
  ::memset(&left_bound_feature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kappa_) -
      reinterpret_cast<char*>(&left_bound_feature_)) + sizeof(kappa_));
}

PathPointwiseFeature::~PathPointwiseFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.PathPointwiseFeature)
  SharedDtor();
}

void PathPointwiseFeature::SharedDtor() {
  if (this != internal_default_instance()) delete left_bound_feature_;
  if (this != internal_default_instance()) delete right_bound_feature_;
}

void PathPointwiseFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PathPointwiseFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PathPointwiseFeature& PathPointwiseFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::scc_info_PathPointwiseFeature.base);
  return *internal_default_instance();
}


void PathPointwiseFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.PathPointwiseFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacle_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(left_bound_feature_ != NULL);
      left_bound_feature_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(right_bound_feature_ != NULL);
      right_bound_feature_->Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&l_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kappa_) -
        reinterpret_cast<char*>(&l_)) + sizeof(kappa_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PathPointwiseFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.PathPointwiseFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double l = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_dl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ddl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_ddl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kappa = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_kappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature obstacle_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_obstacle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature left_bound_feature = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_bound_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature right_bound_feature = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_bound_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.PathPointwiseFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.PathPointwiseFeature)
  return false;
#undef DO_
}

void PathPointwiseFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.PathPointwiseFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double l = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->l(), output);
  }

  // optional double dl = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dl(), output);
  }

  // optional double ddl = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ddl(), output);
  }

  // optional double kappa = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->kappa(), output);
  }

  // repeated .apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature obstacle_info = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->obstacle_info(static_cast<int>(i)),
      output);
  }

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature left_bound_feature = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_left_bound_feature(), output);
  }

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature right_bound_feature = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_right_bound_feature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.PathPointwiseFeature)
}

::google::protobuf::uint8* PathPointwiseFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.PathPointwiseFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double l = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->l(), target);
  }

  // optional double dl = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dl(), target);
  }

  // optional double ddl = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ddl(), target);
  }

  // optional double kappa = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->kappa(), target);
  }

  // repeated .apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature obstacle_info = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->obstacle_info(static_cast<int>(i)), deterministic, target);
  }

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature left_bound_feature = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_left_bound_feature(), deterministic, target);
  }

  // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature right_bound_feature = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_right_bound_feature(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.PathPointwiseFeature)
  return target;
}

size_t PathPointwiseFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.PathPointwiseFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.autotuning.PathPointwiseFeature.ObstacleFeature obstacle_info = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacle_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->obstacle_info(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature left_bound_feature = 6;
    if (has_left_bound_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *left_bound_feature_);
    }

    // optional .apollo.planning.autotuning.PathPointwiseFeature.BoundRelatedFeature right_bound_feature = 7;
    if (has_right_bound_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *right_bound_feature_);
    }

    // optional double l = 1;
    if (has_l()) {
      total_size += 1 + 8;
    }

    // optional double dl = 2;
    if (has_dl()) {
      total_size += 1 + 8;
    }

    // optional double ddl = 3;
    if (has_ddl()) {
      total_size += 1 + 8;
    }

    // optional double kappa = 4;
    if (has_kappa()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathPointwiseFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const PathPointwiseFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathPointwiseFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.PathPointwiseFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.PathPointwiseFeature)
    MergeFrom(*source);
  }
}

void PathPointwiseFeature::MergeFrom(const PathPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.PathPointwiseFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_info_.MergeFrom(from.obstacle_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_left_bound_feature()->::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature::MergeFrom(from.left_bound_feature());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_right_bound_feature()->::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature::MergeFrom(from.right_bound_feature());
    }
    if (cached_has_bits & 0x00000004u) {
      l_ = from.l_;
    }
    if (cached_has_bits & 0x00000008u) {
      dl_ = from.dl_;
    }
    if (cached_has_bits & 0x00000010u) {
      ddl_ = from.ddl_;
    }
    if (cached_has_bits & 0x00000020u) {
      kappa_ = from.kappa_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PathPointwiseFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathPointwiseFeature::CopyFrom(const PathPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.PathPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathPointwiseFeature::IsInitialized() const {
  return true;
}

void PathPointwiseFeature::Swap(PathPointwiseFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathPointwiseFeature::InternalSwap(PathPointwiseFeature* other) {
  using std::swap;
  CastToBase(&obstacle_info_)->InternalSwap(CastToBase(&other->obstacle_info_));
  swap(left_bound_feature_, other->left_bound_feature_);
  swap(right_bound_feature_, other->right_bound_feature_);
  swap(l_, other->l_);
  swap(dl_, other->dl_);
  swap(ddl_, other->ddl_);
  swap(kappa_, other->kappa_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PathPointwiseFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeedPointwiseFeature_ObstacleFeature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedPointwiseFeature_ObstacleFeature::kLongitudinalDistanceFieldNumber;
const int SpeedPointwiseFeature_ObstacleFeature::kObstacleSpeedFieldNumber;
const int SpeedPointwiseFeature_ObstacleFeature::kLateralDistanceFieldNumber;
const int SpeedPointwiseFeature_ObstacleFeature::kProbabilityFieldNumber;
const int SpeedPointwiseFeature_ObstacleFeature::kRelativeVFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedPointwiseFeature_ObstacleFeature::SpeedPointwiseFeature_ObstacleFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::scc_info_SpeedPointwiseFeature_ObstacleFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
}
SpeedPointwiseFeature_ObstacleFeature::SpeedPointwiseFeature_ObstacleFeature(const SpeedPointwiseFeature_ObstacleFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitudinal_distance_, &from.longitudinal_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&lateral_distance_) -
    reinterpret_cast<char*>(&longitudinal_distance_)) + sizeof(lateral_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
}

void SpeedPointwiseFeature_ObstacleFeature::SharedCtor() {
  ::memset(&longitudinal_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_v_) -
      reinterpret_cast<char*>(&longitudinal_distance_)) + sizeof(relative_v_));
  lateral_distance_ = 10;
}

SpeedPointwiseFeature_ObstacleFeature::~SpeedPointwiseFeature_ObstacleFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  SharedDtor();
}

void SpeedPointwiseFeature_ObstacleFeature::SharedDtor() {
}

void SpeedPointwiseFeature_ObstacleFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeedPointwiseFeature_ObstacleFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedPointwiseFeature_ObstacleFeature& SpeedPointwiseFeature_ObstacleFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::scc_info_SpeedPointwiseFeature_ObstacleFeature.base);
  return *internal_default_instance();
}


void SpeedPointwiseFeature_ObstacleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&longitudinal_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&relative_v_) -
        reinterpret_cast<char*>(&longitudinal_distance_)) + sizeof(relative_v_));
    lateral_distance_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedPointwiseFeature_ObstacleFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double longitudinal_distance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_longitudinal_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitudinal_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double obstacle_speed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_obstacle_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_distance = 3 [default = 10];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_lateral_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double probability = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double relative_v = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_relative_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  return false;
#undef DO_
}

void SpeedPointwiseFeature_ObstacleFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double longitudinal_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longitudinal_distance(), output);
  }

  // optional double obstacle_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->obstacle_speed(), output);
  }

  // optional double lateral_distance = 3 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lateral_distance(), output);
  }

  // optional double probability = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->probability(), output);
  }

  // optional double relative_v = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->relative_v(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
}

::google::protobuf::uint8* SpeedPointwiseFeature_ObstacleFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double longitudinal_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->longitudinal_distance(), target);
  }

  // optional double obstacle_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->obstacle_speed(), target);
  }

  // optional double lateral_distance = 3 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lateral_distance(), target);
  }

  // optional double probability = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->probability(), target);
  }

  // optional double relative_v = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->relative_v(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  return target;
}

size_t SpeedPointwiseFeature_ObstacleFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional double longitudinal_distance = 1;
    if (has_longitudinal_distance()) {
      total_size += 1 + 8;
    }

    // optional double obstacle_speed = 2;
    if (has_obstacle_speed()) {
      total_size += 1 + 8;
    }

    // optional double probability = 4;
    if (has_probability()) {
      total_size += 1 + 8;
    }

    // optional double relative_v = 5;
    if (has_relative_v()) {
      total_size += 1 + 8;
    }

    // optional double lateral_distance = 3 [default = 10];
    if (has_lateral_distance()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedPointwiseFeature_ObstacleFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedPointwiseFeature_ObstacleFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedPointwiseFeature_ObstacleFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
    MergeFrom(*source);
  }
}

void SpeedPointwiseFeature_ObstacleFeature::MergeFrom(const SpeedPointwiseFeature_ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      longitudinal_distance_ = from.longitudinal_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      obstacle_speed_ = from.obstacle_speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      probability_ = from.probability_;
    }
    if (cached_has_bits & 0x00000008u) {
      relative_v_ = from.relative_v_;
    }
    if (cached_has_bits & 0x00000010u) {
      lateral_distance_ = from.lateral_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpeedPointwiseFeature_ObstacleFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPointwiseFeature_ObstacleFeature::CopyFrom(const SpeedPointwiseFeature_ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPointwiseFeature_ObstacleFeature::IsInitialized() const {
  return true;
}

void SpeedPointwiseFeature_ObstacleFeature::Swap(SpeedPointwiseFeature_ObstacleFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedPointwiseFeature_ObstacleFeature::InternalSwap(SpeedPointwiseFeature_ObstacleFeature* other) {
  using std::swap;
  swap(longitudinal_distance_, other->longitudinal_distance_);
  swap(obstacle_speed_, other->obstacle_speed_);
  swap(probability_, other->probability_);
  swap(relative_v_, other->relative_v_);
  swap(lateral_distance_, other->lateral_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeedPointwiseFeature_ObstacleFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpeedPointwiseFeature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeedPointwiseFeature::kSFieldNumber;
const int SpeedPointwiseFeature::kTFieldNumber;
const int SpeedPointwiseFeature::kVFieldNumber;
const int SpeedPointwiseFeature::kSpeedLimitFieldNumber;
const int SpeedPointwiseFeature::kAccFieldNumber;
const int SpeedPointwiseFeature::kJerkFieldNumber;
const int SpeedPointwiseFeature::kFollowObsFeatureFieldNumber;
const int SpeedPointwiseFeature::kOvertakeObsFeatureFieldNumber;
const int SpeedPointwiseFeature::kNudgeObsFeatureFieldNumber;
const int SpeedPointwiseFeature::kStopObsFeatureFieldNumber;
const int SpeedPointwiseFeature::kCollisionTimesFieldNumber;
const int SpeedPointwiseFeature::kVirtualObsFeatureFieldNumber;
const int SpeedPointwiseFeature::kLateralAccFieldNumber;
const int SpeedPointwiseFeature::kPathCurvatureAbsFieldNumber;
const int SpeedPointwiseFeature::kSidepassFrontObsFeatureFieldNumber;
const int SpeedPointwiseFeature::kSidepassRearObsFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeedPointwiseFeature::SpeedPointwiseFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::scc_info_SpeedPointwiseFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.SpeedPointwiseFeature)
}
SpeedPointwiseFeature::SpeedPointwiseFeature(const SpeedPointwiseFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      follow_obs_feature_(from.follow_obs_feature_),
      overtake_obs_feature_(from.overtake_obs_feature_),
      nudge_obs_feature_(from.nudge_obs_feature_),
      stop_obs_feature_(from.stop_obs_feature_),
      virtual_obs_feature_(from.virtual_obs_feature_),
      sidepass_front_obs_feature_(from.sidepass_front_obs_feature_),
      sidepass_rear_obs_feature_(from.sidepass_rear_obs_feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&collision_times_) -
    reinterpret_cast<char*>(&s_)) + sizeof(collision_times_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.SpeedPointwiseFeature)
}

void SpeedPointwiseFeature::SharedCtor() {
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collision_times_) -
      reinterpret_cast<char*>(&s_)) + sizeof(collision_times_));
}

SpeedPointwiseFeature::~SpeedPointwiseFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.SpeedPointwiseFeature)
  SharedDtor();
}

void SpeedPointwiseFeature::SharedDtor() {
}

void SpeedPointwiseFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpeedPointwiseFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpeedPointwiseFeature& SpeedPointwiseFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::scc_info_SpeedPointwiseFeature.base);
  return *internal_default_instance();
}


void SpeedPointwiseFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  follow_obs_feature_.Clear();
  overtake_obs_feature_.Clear();
  nudge_obs_feature_.Clear();
  stop_obs_feature_.Clear();
  virtual_obs_feature_.Clear();
  sidepass_front_obs_feature_.Clear();
  sidepass_rear_obs_feature_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&path_curvature_abs_) -
        reinterpret_cast<char*>(&s_)) + sizeof(path_curvature_abs_));
  }
  collision_times_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpeedPointwiseFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double t = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double v = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_limit = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_acc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double jerk = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_jerk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jerk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature follow_obs_feature = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_follow_obs_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature overtake_obs_feature = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_overtake_obs_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature nudge_obs_feature = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nudge_obs_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature stop_obs_feature = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stop_obs_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 collision_times = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_collision_times();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collision_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature virtual_obs_feature = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_virtual_obs_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_acc = 13 [default = 0];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_lateral_acc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double path_curvature_abs = 14 [default = 0];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_path_curvature_abs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &path_curvature_abs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_front_obs_feature = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sidepass_front_obs_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_rear_obs_feature = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sidepass_rear_obs_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.SpeedPointwiseFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.SpeedPointwiseFeature)
  return false;
#undef DO_
}

void SpeedPointwiseFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double t = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->t(), output);
  }

  // optional double v = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->v(), output);
  }

  // optional double speed_limit = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed_limit(), output);
  }

  // optional double acc = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->acc(), output);
  }

  // optional double jerk = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->jerk(), output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature follow_obs_feature = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->follow_obs_feature_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->follow_obs_feature(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature overtake_obs_feature = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overtake_obs_feature_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->overtake_obs_feature(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature nudge_obs_feature = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nudge_obs_feature_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->nudge_obs_feature(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature stop_obs_feature = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stop_obs_feature_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->stop_obs_feature(static_cast<int>(i)),
      output);
  }

  // optional int32 collision_times = 11 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->collision_times(), output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature virtual_obs_feature = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->virtual_obs_feature_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->virtual_obs_feature(static_cast<int>(i)),
      output);
  }

  // optional double lateral_acc = 13 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->lateral_acc(), output);
  }

  // optional double path_curvature_abs = 14 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->path_curvature_abs(), output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_front_obs_feature = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sidepass_front_obs_feature_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->sidepass_front_obs_feature(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_rear_obs_feature = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sidepass_rear_obs_feature_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16,
      this->sidepass_rear_obs_feature(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.SpeedPointwiseFeature)
}

::google::protobuf::uint8* SpeedPointwiseFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double t = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->t(), target);
  }

  // optional double v = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->v(), target);
  }

  // optional double speed_limit = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed_limit(), target);
  }

  // optional double acc = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->acc(), target);
  }

  // optional double jerk = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->jerk(), target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature follow_obs_feature = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->follow_obs_feature_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->follow_obs_feature(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature overtake_obs_feature = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overtake_obs_feature_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->overtake_obs_feature(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature nudge_obs_feature = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nudge_obs_feature_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->nudge_obs_feature(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature stop_obs_feature = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stop_obs_feature_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->stop_obs_feature(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 collision_times = 11 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->collision_times(), target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature virtual_obs_feature = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->virtual_obs_feature_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->virtual_obs_feature(static_cast<int>(i)), deterministic, target);
  }

  // optional double lateral_acc = 13 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->lateral_acc(), target);
  }

  // optional double path_curvature_abs = 14 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->path_curvature_abs(), target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_front_obs_feature = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sidepass_front_obs_feature_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->sidepass_front_obs_feature(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_rear_obs_feature = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sidepass_rear_obs_feature_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->sidepass_rear_obs_feature(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.SpeedPointwiseFeature)
  return target;
}

size_t SpeedPointwiseFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature follow_obs_feature = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->follow_obs_feature_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->follow_obs_feature(static_cast<int>(i)));
    }
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature overtake_obs_feature = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->overtake_obs_feature_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->overtake_obs_feature(static_cast<int>(i)));
    }
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature nudge_obs_feature = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->nudge_obs_feature_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nudge_obs_feature(static_cast<int>(i)));
    }
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature stop_obs_feature = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->stop_obs_feature_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stop_obs_feature(static_cast<int>(i)));
    }
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature virtual_obs_feature = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->virtual_obs_feature_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->virtual_obs_feature(static_cast<int>(i)));
    }
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_front_obs_feature = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->sidepass_front_obs_feature_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sidepass_front_obs_feature(static_cast<int>(i)));
    }
  }

  // repeated .apollo.planning.autotuning.SpeedPointwiseFeature.ObstacleFeature sidepass_rear_obs_feature = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->sidepass_rear_obs_feature_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sidepass_rear_obs_feature(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional double s = 1 [default = 0];
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double t = 2 [default = 0];
    if (has_t()) {
      total_size += 1 + 8;
    }

    // optional double v = 3 [default = 0];
    if (has_v()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 4 [default = 0];
    if (has_speed_limit()) {
      total_size += 1 + 8;
    }

    // optional double acc = 5 [default = 0];
    if (has_acc()) {
      total_size += 1 + 8;
    }

    // optional double jerk = 6 [default = 0];
    if (has_jerk()) {
      total_size += 1 + 8;
    }

    // optional double lateral_acc = 13 [default = 0];
    if (has_lateral_acc()) {
      total_size += 1 + 8;
    }

    // optional double path_curvature_abs = 14 [default = 0];
    if (has_path_curvature_abs()) {
      total_size += 1 + 8;
    }

  }
  // optional int32 collision_times = 11 [default = 0];
  if (has_collision_times()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->collision_times());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedPointwiseFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedPointwiseFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeedPointwiseFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.SpeedPointwiseFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.SpeedPointwiseFeature)
    MergeFrom(*source);
  }
}

void SpeedPointwiseFeature::MergeFrom(const SpeedPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  follow_obs_feature_.MergeFrom(from.follow_obs_feature_);
  overtake_obs_feature_.MergeFrom(from.overtake_obs_feature_);
  nudge_obs_feature_.MergeFrom(from.nudge_obs_feature_);
  stop_obs_feature_.MergeFrom(from.stop_obs_feature_);
  virtual_obs_feature_.MergeFrom(from.virtual_obs_feature_);
  sidepass_front_obs_feature_.MergeFrom(from.sidepass_front_obs_feature_);
  sidepass_rear_obs_feature_.MergeFrom(from.sidepass_rear_obs_feature_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      t_ = from.t_;
    }
    if (cached_has_bits & 0x00000004u) {
      v_ = from.v_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_limit_ = from.speed_limit_;
    }
    if (cached_has_bits & 0x00000010u) {
      acc_ = from.acc_;
    }
    if (cached_has_bits & 0x00000020u) {
      jerk_ = from.jerk_;
    }
    if (cached_has_bits & 0x00000040u) {
      lateral_acc_ = from.lateral_acc_;
    }
    if (cached_has_bits & 0x00000080u) {
      path_curvature_abs_ = from.path_curvature_abs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_collision_times(from.collision_times());
  }
}

void SpeedPointwiseFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedPointwiseFeature::CopyFrom(const SpeedPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.SpeedPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedPointwiseFeature::IsInitialized() const {
  return true;
}

void SpeedPointwiseFeature::Swap(SpeedPointwiseFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeedPointwiseFeature::InternalSwap(SpeedPointwiseFeature* other) {
  using std::swap;
  CastToBase(&follow_obs_feature_)->InternalSwap(CastToBase(&other->follow_obs_feature_));
  CastToBase(&overtake_obs_feature_)->InternalSwap(CastToBase(&other->overtake_obs_feature_));
  CastToBase(&nudge_obs_feature_)->InternalSwap(CastToBase(&other->nudge_obs_feature_));
  CastToBase(&stop_obs_feature_)->InternalSwap(CastToBase(&other->stop_obs_feature_));
  CastToBase(&virtual_obs_feature_)->InternalSwap(CastToBase(&other->virtual_obs_feature_));
  CastToBase(&sidepass_front_obs_feature_)->InternalSwap(CastToBase(&other->sidepass_front_obs_feature_));
  CastToBase(&sidepass_rear_obs_feature_)->InternalSwap(CastToBase(&other->sidepass_rear_obs_feature_));
  swap(s_, other->s_);
  swap(t_, other->t_);
  swap(v_, other->v_);
  swap(speed_limit_, other->speed_limit_);
  swap(acc_, other->acc_);
  swap(jerk_, other->jerk_);
  swap(lateral_acc_, other->lateral_acc_);
  swap(path_curvature_abs_, other->path_curvature_abs_);
  swap(collision_times_, other->collision_times_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpeedPointwiseFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrajectoryPointwiseFeature::InitAsDefaultInstance() {
  ::apollo::planning::autotuning::_TrajectoryPointwiseFeature_default_instance_._instance.get_mutable()->path_input_feature_ = const_cast< ::apollo::planning::autotuning::PathPointwiseFeature*>(
      ::apollo::planning::autotuning::PathPointwiseFeature::internal_default_instance());
  ::apollo::planning::autotuning::_TrajectoryPointwiseFeature_default_instance_._instance.get_mutable()->speed_input_feature_ = const_cast< ::apollo::planning::autotuning::SpeedPointwiseFeature*>(
      ::apollo::planning::autotuning::SpeedPointwiseFeature::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryPointwiseFeature::kPathInputFeatureFieldNumber;
const int TrajectoryPointwiseFeature::kSpeedInputFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryPointwiseFeature::TrajectoryPointwiseFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::scc_info_TrajectoryPointwiseFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.TrajectoryPointwiseFeature)
}
TrajectoryPointwiseFeature::TrajectoryPointwiseFeature(const TrajectoryPointwiseFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_path_input_feature()) {
    path_input_feature_ = new ::apollo::planning::autotuning::PathPointwiseFeature(*from.path_input_feature_);
  } else {
    path_input_feature_ = NULL;
  }
  if (from.has_speed_input_feature()) {
    speed_input_feature_ = new ::apollo::planning::autotuning::SpeedPointwiseFeature(*from.speed_input_feature_);
  } else {
    speed_input_feature_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.TrajectoryPointwiseFeature)
}

void TrajectoryPointwiseFeature::SharedCtor() {
  ::memset(&path_input_feature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_input_feature_) -
      reinterpret_cast<char*>(&path_input_feature_)) + sizeof(speed_input_feature_));
}

TrajectoryPointwiseFeature::~TrajectoryPointwiseFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  SharedDtor();
}

void TrajectoryPointwiseFeature::SharedDtor() {
  if (this != internal_default_instance()) delete path_input_feature_;
  if (this != internal_default_instance()) delete speed_input_feature_;
}

void TrajectoryPointwiseFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrajectoryPointwiseFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryPointwiseFeature& TrajectoryPointwiseFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::scc_info_TrajectoryPointwiseFeature.base);
  return *internal_default_instance();
}


void TrajectoryPointwiseFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(path_input_feature_ != NULL);
      path_input_feature_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(speed_input_feature_ != NULL);
      speed_input_feature_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrajectoryPointwiseFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.autotuning.PathPointwiseFeature path_input_feature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path_input_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.autotuning.SpeedPointwiseFeature speed_input_feature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speed_input_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  return false;
#undef DO_
}

void TrajectoryPointwiseFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.autotuning.PathPointwiseFeature path_input_feature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_path_input_feature(), output);
  }

  // optional .apollo.planning.autotuning.SpeedPointwiseFeature speed_input_feature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_speed_input_feature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.TrajectoryPointwiseFeature)
}

::google::protobuf::uint8* TrajectoryPointwiseFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.autotuning.PathPointwiseFeature path_input_feature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_path_input_feature(), deterministic, target);
  }

  // optional .apollo.planning.autotuning.SpeedPointwiseFeature speed_input_feature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_speed_input_feature(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  return target;
}

size_t TrajectoryPointwiseFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.planning.autotuning.PathPointwiseFeature path_input_feature = 1;
    if (has_path_input_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *path_input_feature_);
    }

    // optional .apollo.planning.autotuning.SpeedPointwiseFeature speed_input_feature = 2;
    if (has_speed_input_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *speed_input_feature_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryPointwiseFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPointwiseFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryPointwiseFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.TrajectoryPointwiseFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.TrajectoryPointwiseFeature)
    MergeFrom(*source);
  }
}

void TrajectoryPointwiseFeature::MergeFrom(const TrajectoryPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_path_input_feature()->::apollo::planning::autotuning::PathPointwiseFeature::MergeFrom(from.path_input_feature());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_speed_input_feature()->::apollo::planning::autotuning::SpeedPointwiseFeature::MergeFrom(from.speed_input_feature());
    }
  }
}

void TrajectoryPointwiseFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPointwiseFeature::CopyFrom(const TrajectoryPointwiseFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.TrajectoryPointwiseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPointwiseFeature::IsInitialized() const {
  return true;
}

void TrajectoryPointwiseFeature::Swap(TrajectoryPointwiseFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryPointwiseFeature::InternalSwap(TrajectoryPointwiseFeature* other) {
  using std::swap;
  swap(path_input_feature_, other->path_input_feature_);
  swap(speed_input_feature_, other->speed_input_feature_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrajectoryPointwiseFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrajectoryFeature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryFeature::kPointFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryFeature::TrajectoryFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::scc_info_TrajectoryFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.autotuning.TrajectoryFeature)
}
TrajectoryFeature::TrajectoryFeature(const TrajectoryFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      point_feature_(from.point_feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.autotuning.TrajectoryFeature)
}

void TrajectoryFeature::SharedCtor() {
}

TrajectoryFeature::~TrajectoryFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.autotuning.TrajectoryFeature)
  SharedDtor();
}

void TrajectoryFeature::SharedDtor() {
}

void TrajectoryFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrajectoryFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryFeature& TrajectoryFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::scc_info_TrajectoryFeature.base);
  return *internal_default_instance();
}


void TrajectoryFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.autotuning.TrajectoryFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_feature_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrajectoryFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.autotuning.TrajectoryFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.autotuning.TrajectoryPointwiseFeature point_feature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_point_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.autotuning.TrajectoryFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.autotuning.TrajectoryFeature)
  return false;
#undef DO_
}

void TrajectoryFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.autotuning.TrajectoryFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.TrajectoryPointwiseFeature point_feature = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_feature_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->point_feature(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.autotuning.TrajectoryFeature)
}

::google::protobuf::uint8* TrajectoryFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.autotuning.TrajectoryFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.autotuning.TrajectoryPointwiseFeature point_feature = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_feature_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->point_feature(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.autotuning.TrajectoryFeature)
  return target;
}

size_t TrajectoryFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.autotuning.TrajectoryFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.autotuning.TrajectoryPointwiseFeature point_feature = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->point_feature_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->point_feature(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.autotuning.TrajectoryFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.autotuning.TrajectoryFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.autotuning.TrajectoryFeature)
    MergeFrom(*source);
  }
}

void TrajectoryFeature::MergeFrom(const TrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.autotuning.TrajectoryFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_feature_.MergeFrom(from.point_feature_);
}

void TrajectoryFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.autotuning.TrajectoryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryFeature::CopyFrom(const TrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.autotuning.TrajectoryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryFeature::IsInitialized() const {
  return true;
}

void TrajectoryFeature::Swap(TrajectoryFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryFeature::InternalSwap(TrajectoryFeature* other) {
  using std::swap;
  CastToBase(&point_feature_)->InternalSwap(CastToBase(&other->point_feature_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrajectoryFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fauto_5ftuning_5fmodel_5finput_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace autotuning
}  // namespace planning
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::PathPointwiseFeature_ObstacleFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::PathPointwiseFeature_BoundRelatedFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::autotuning::PathPointwiseFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::PathPointwiseFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::PathPointwiseFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::SpeedPointwiseFeature_ObstacleFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::autotuning::SpeedPointwiseFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::SpeedPointwiseFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::SpeedPointwiseFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::autotuning::TrajectoryPointwiseFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::TrajectoryPointwiseFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::TrajectoryPointwiseFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::autotuning::TrajectoryFeature* Arena::CreateMaybeMessage< ::apollo::planning::autotuning::TrajectoryFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::autotuning::TrajectoryFeature >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
