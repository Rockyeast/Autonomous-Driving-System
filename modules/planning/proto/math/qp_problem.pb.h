// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/math/qp_problem.proto

#ifndef PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto
#define PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto 

namespace protobuf_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto
namespace apollo {
namespace planning {
class QPMatrix;
class QPMatrixDefaultTypeInternal;
extern QPMatrixDefaultTypeInternal _QPMatrix_default_instance_;
class QuadraticProgrammingProblem;
class QuadraticProgrammingProblemDefaultTypeInternal;
extern QuadraticProgrammingProblemDefaultTypeInternal _QuadraticProgrammingProblem_default_instance_;
class QuadraticProgrammingProblemSet;
class QuadraticProgrammingProblemSetDefaultTypeInternal;
extern QuadraticProgrammingProblemSetDefaultTypeInternal _QuadraticProgrammingProblemSet_default_instance_;
}  // namespace planning
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::planning::QPMatrix* Arena::CreateMaybeMessage<::apollo::planning::QPMatrix>(Arena*);
template<> ::apollo::planning::QuadraticProgrammingProblem* Arena::CreateMaybeMessage<::apollo::planning::QuadraticProgrammingProblem>(Arena*);
template<> ::apollo::planning::QuadraticProgrammingProblemSet* Arena::CreateMaybeMessage<::apollo::planning::QuadraticProgrammingProblemSet>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace planning {

// ===================================================================

class QuadraticProgrammingProblem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.QuadraticProgrammingProblem) */ {
 public:
  QuadraticProgrammingProblem();
  virtual ~QuadraticProgrammingProblem();

  QuadraticProgrammingProblem(const QuadraticProgrammingProblem& from);

  inline QuadraticProgrammingProblem& operator=(const QuadraticProgrammingProblem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuadraticProgrammingProblem(QuadraticProgrammingProblem&& from) noexcept
    : QuadraticProgrammingProblem() {
    *this = ::std::move(from);
  }

  inline QuadraticProgrammingProblem& operator=(QuadraticProgrammingProblem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuadraticProgrammingProblem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuadraticProgrammingProblem* internal_default_instance() {
    return reinterpret_cast<const QuadraticProgrammingProblem*>(
               &_QuadraticProgrammingProblem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(QuadraticProgrammingProblem* other);
  friend void swap(QuadraticProgrammingProblem& a, QuadraticProgrammingProblem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuadraticProgrammingProblem* New() const final {
    return CreateMaybeMessage<QuadraticProgrammingProblem>(NULL);
  }

  QuadraticProgrammingProblem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuadraticProgrammingProblem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuadraticProgrammingProblem& from);
  void MergeFrom(const QuadraticProgrammingProblem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuadraticProgrammingProblem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double bias = 3;
  int bias_size() const;
  void clear_bias();
  static const int kBiasFieldNumber = 3;
  double bias(int index) const;
  void set_bias(int index, double value);
  void add_bias(double value);
  const ::google::protobuf::RepeatedField< double >&
      bias() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_bias();

  // repeated double equality_value = 5;
  int equality_value_size() const;
  void clear_equality_value();
  static const int kEqualityValueFieldNumber = 5;
  double equality_value(int index) const;
  void set_equality_value(int index, double value);
  void add_equality_value(double value);
  const ::google::protobuf::RepeatedField< double >&
      equality_value() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_equality_value();

  // repeated double inequality_value = 7;
  int inequality_value_size() const;
  void clear_inequality_value();
  static const int kInequalityValueFieldNumber = 7;
  double inequality_value(int index) const;
  void set_inequality_value(int index, double value);
  void add_inequality_value(double value);
  const ::google::protobuf::RepeatedField< double >&
      inequality_value() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_inequality_value();

  // repeated double input_marker = 8;
  int input_marker_size() const;
  void clear_input_marker();
  static const int kInputMarkerFieldNumber = 8;
  double input_marker(int index) const;
  void set_input_marker(int index, double value);
  void add_input_marker(double value);
  const ::google::protobuf::RepeatedField< double >&
      input_marker() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_input_marker();

  // repeated double optimal_param = 9;
  int optimal_param_size() const;
  void clear_optimal_param();
  static const int kOptimalParamFieldNumber = 9;
  double optimal_param(int index) const;
  void set_optimal_param(int index, double value);
  void add_optimal_param(double value);
  const ::google::protobuf::RepeatedField< double >&
      optimal_param() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_optimal_param();

  // optional .apollo.planning.QPMatrix quadratic_matrix = 2;
  bool has_quadratic_matrix() const;
  void clear_quadratic_matrix();
  static const int kQuadraticMatrixFieldNumber = 2;
  private:
  const ::apollo::planning::QPMatrix& _internal_quadratic_matrix() const;
  public:
  const ::apollo::planning::QPMatrix& quadratic_matrix() const;
  ::apollo::planning::QPMatrix* release_quadratic_matrix();
  ::apollo::planning::QPMatrix* mutable_quadratic_matrix();
  void set_allocated_quadratic_matrix(::apollo::planning::QPMatrix* quadratic_matrix);

  // optional .apollo.planning.QPMatrix equality_matrix = 4;
  bool has_equality_matrix() const;
  void clear_equality_matrix();
  static const int kEqualityMatrixFieldNumber = 4;
  private:
  const ::apollo::planning::QPMatrix& _internal_equality_matrix() const;
  public:
  const ::apollo::planning::QPMatrix& equality_matrix() const;
  ::apollo::planning::QPMatrix* release_equality_matrix();
  ::apollo::planning::QPMatrix* mutable_equality_matrix();
  void set_allocated_equality_matrix(::apollo::planning::QPMatrix* equality_matrix);

  // optional .apollo.planning.QPMatrix inequality_matrix = 6;
  bool has_inequality_matrix() const;
  void clear_inequality_matrix();
  static const int kInequalityMatrixFieldNumber = 6;
  private:
  const ::apollo::planning::QPMatrix& _internal_inequality_matrix() const;
  public:
  const ::apollo::planning::QPMatrix& inequality_matrix() const;
  ::apollo::planning::QPMatrix* release_inequality_matrix();
  ::apollo::planning::QPMatrix* mutable_inequality_matrix();
  void set_allocated_inequality_matrix(::apollo::planning::QPMatrix* inequality_matrix);

  // optional int32 param_size = 1;
  bool has_param_size() const;
  void clear_param_size();
  static const int kParamSizeFieldNumber = 1;
  ::google::protobuf::int32 param_size() const;
  void set_param_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.planning.QuadraticProgrammingProblem)
 private:
  void set_has_param_size();
  void clear_has_param_size();
  void set_has_quadratic_matrix();
  void clear_has_quadratic_matrix();
  void set_has_equality_matrix();
  void clear_has_equality_matrix();
  void set_has_inequality_matrix();
  void clear_has_inequality_matrix();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< double > bias_;
  ::google::protobuf::RepeatedField< double > equality_value_;
  ::google::protobuf::RepeatedField< double > inequality_value_;
  ::google::protobuf::RepeatedField< double > input_marker_;
  ::google::protobuf::RepeatedField< double > optimal_param_;
  ::apollo::planning::QPMatrix* quadratic_matrix_;
  ::apollo::planning::QPMatrix* equality_matrix_;
  ::apollo::planning::QPMatrix* inequality_matrix_;
  ::google::protobuf::int32 param_size_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QPMatrix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.QPMatrix) */ {
 public:
  QPMatrix();
  virtual ~QPMatrix();

  QPMatrix(const QPMatrix& from);

  inline QPMatrix& operator=(const QPMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QPMatrix(QPMatrix&& from) noexcept
    : QPMatrix() {
    *this = ::std::move(from);
  }

  inline QPMatrix& operator=(QPMatrix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QPMatrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QPMatrix* internal_default_instance() {
    return reinterpret_cast<const QPMatrix*>(
               &_QPMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(QPMatrix* other);
  friend void swap(QPMatrix& a, QPMatrix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QPMatrix* New() const final {
    return CreateMaybeMessage<QPMatrix>(NULL);
  }

  QPMatrix* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QPMatrix>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QPMatrix& from);
  void MergeFrom(const QPMatrix& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QPMatrix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double element = 3;
  int element_size() const;
  void clear_element();
  static const int kElementFieldNumber = 3;
  double element(int index) const;
  void set_element(int index, double value);
  void add_element(double value);
  const ::google::protobuf::RepeatedField< double >&
      element() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_element();

  // optional int32 row_size = 1;
  bool has_row_size() const;
  void clear_row_size();
  static const int kRowSizeFieldNumber = 1;
  ::google::protobuf::int32 row_size() const;
  void set_row_size(::google::protobuf::int32 value);

  // optional int32 col_size = 2;
  bool has_col_size() const;
  void clear_col_size();
  static const int kColSizeFieldNumber = 2;
  ::google::protobuf::int32 col_size() const;
  void set_col_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.planning.QPMatrix)
 private:
  void set_has_row_size();
  void clear_has_row_size();
  void set_has_col_size();
  void clear_has_col_size();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< double > element_;
  ::google::protobuf::int32 row_size_;
  ::google::protobuf::int32 col_size_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuadraticProgrammingProblemSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.QuadraticProgrammingProblemSet) */ {
 public:
  QuadraticProgrammingProblemSet();
  virtual ~QuadraticProgrammingProblemSet();

  QuadraticProgrammingProblemSet(const QuadraticProgrammingProblemSet& from);

  inline QuadraticProgrammingProblemSet& operator=(const QuadraticProgrammingProblemSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuadraticProgrammingProblemSet(QuadraticProgrammingProblemSet&& from) noexcept
    : QuadraticProgrammingProblemSet() {
    *this = ::std::move(from);
  }

  inline QuadraticProgrammingProblemSet& operator=(QuadraticProgrammingProblemSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuadraticProgrammingProblemSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuadraticProgrammingProblemSet* internal_default_instance() {
    return reinterpret_cast<const QuadraticProgrammingProblemSet*>(
               &_QuadraticProgrammingProblemSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(QuadraticProgrammingProblemSet* other);
  friend void swap(QuadraticProgrammingProblemSet& a, QuadraticProgrammingProblemSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuadraticProgrammingProblemSet* New() const final {
    return CreateMaybeMessage<QuadraticProgrammingProblemSet>(NULL);
  }

  QuadraticProgrammingProblemSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuadraticProgrammingProblemSet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuadraticProgrammingProblemSet& from);
  void MergeFrom(const QuadraticProgrammingProblemSet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuadraticProgrammingProblemSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.planning.QuadraticProgrammingProblem problem = 1;
  int problem_size() const;
  void clear_problem();
  static const int kProblemFieldNumber = 1;
  ::apollo::planning::QuadraticProgrammingProblem* mutable_problem(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::QuadraticProgrammingProblem >*
      mutable_problem();
  const ::apollo::planning::QuadraticProgrammingProblem& problem(int index) const;
  ::apollo::planning::QuadraticProgrammingProblem* add_problem();
  const ::google::protobuf::RepeatedPtrField< ::apollo::planning::QuadraticProgrammingProblem >&
      problem() const;

  // @@protoc_insertion_point(class_scope:apollo.planning.QuadraticProgrammingProblemSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::planning::QuadraticProgrammingProblem > problem_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QuadraticProgrammingProblem

// optional int32 param_size = 1;
inline bool QuadraticProgrammingProblem::has_param_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuadraticProgrammingProblem::set_has_param_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuadraticProgrammingProblem::clear_has_param_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuadraticProgrammingProblem::clear_param_size() {
  param_size_ = 0;
  clear_has_param_size();
}
inline ::google::protobuf::int32 QuadraticProgrammingProblem::param_size() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QuadraticProgrammingProblem.param_size)
  return param_size_;
}
inline void QuadraticProgrammingProblem::set_param_size(::google::protobuf::int32 value) {
  set_has_param_size();
  param_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QuadraticProgrammingProblem.param_size)
}

// optional .apollo.planning.QPMatrix quadratic_matrix = 2;
inline bool QuadraticProgrammingProblem::has_quadratic_matrix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuadraticProgrammingProblem::set_has_quadratic_matrix() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuadraticProgrammingProblem::clear_has_quadratic_matrix() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuadraticProgrammingProblem::clear_quadratic_matrix() {
  if (quadratic_matrix_ != NULL) quadratic_matrix_->Clear();
  clear_has_quadratic_matrix();
}
inline const ::apollo::planning::QPMatrix& QuadraticProgrammingProblem::_internal_quadratic_matrix() const {
  return *quadratic_matrix_;
}
inline const ::apollo::planning::QPMatrix& QuadraticProgrammingProblem::quadratic_matrix() const {
  const ::apollo::planning::QPMatrix* p = quadratic_matrix_;
  // @@protoc_insertion_point(field_get:apollo.planning.QuadraticProgrammingProblem.quadratic_matrix)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::QPMatrix*>(
      &::apollo::planning::_QPMatrix_default_instance_);
}
inline ::apollo::planning::QPMatrix* QuadraticProgrammingProblem::release_quadratic_matrix() {
  // @@protoc_insertion_point(field_release:apollo.planning.QuadraticProgrammingProblem.quadratic_matrix)
  clear_has_quadratic_matrix();
  ::apollo::planning::QPMatrix* temp = quadratic_matrix_;
  quadratic_matrix_ = NULL;
  return temp;
}
inline ::apollo::planning::QPMatrix* QuadraticProgrammingProblem::mutable_quadratic_matrix() {
  set_has_quadratic_matrix();
  if (quadratic_matrix_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::QPMatrix>(GetArenaNoVirtual());
    quadratic_matrix_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.QuadraticProgrammingProblem.quadratic_matrix)
  return quadratic_matrix_;
}
inline void QuadraticProgrammingProblem::set_allocated_quadratic_matrix(::apollo::planning::QPMatrix* quadratic_matrix) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete quadratic_matrix_;
  }
  if (quadratic_matrix) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      quadratic_matrix = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quadratic_matrix, submessage_arena);
    }
    set_has_quadratic_matrix();
  } else {
    clear_has_quadratic_matrix();
  }
  quadratic_matrix_ = quadratic_matrix;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.QuadraticProgrammingProblem.quadratic_matrix)
}

// repeated double bias = 3;
inline int QuadraticProgrammingProblem::bias_size() const {
  return bias_.size();
}
inline void QuadraticProgrammingProblem::clear_bias() {
  bias_.Clear();
}
inline double QuadraticProgrammingProblem::bias(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.QuadraticProgrammingProblem.bias)
  return bias_.Get(index);
}
inline void QuadraticProgrammingProblem::set_bias(int index, double value) {
  bias_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.QuadraticProgrammingProblem.bias)
}
inline void QuadraticProgrammingProblem::add_bias(double value) {
  bias_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.QuadraticProgrammingProblem.bias)
}
inline const ::google::protobuf::RepeatedField< double >&
QuadraticProgrammingProblem::bias() const {
  // @@protoc_insertion_point(field_list:apollo.planning.QuadraticProgrammingProblem.bias)
  return bias_;
}
inline ::google::protobuf::RepeatedField< double >*
QuadraticProgrammingProblem::mutable_bias() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.QuadraticProgrammingProblem.bias)
  return &bias_;
}

// optional .apollo.planning.QPMatrix equality_matrix = 4;
inline bool QuadraticProgrammingProblem::has_equality_matrix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuadraticProgrammingProblem::set_has_equality_matrix() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuadraticProgrammingProblem::clear_has_equality_matrix() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuadraticProgrammingProblem::clear_equality_matrix() {
  if (equality_matrix_ != NULL) equality_matrix_->Clear();
  clear_has_equality_matrix();
}
inline const ::apollo::planning::QPMatrix& QuadraticProgrammingProblem::_internal_equality_matrix() const {
  return *equality_matrix_;
}
inline const ::apollo::planning::QPMatrix& QuadraticProgrammingProblem::equality_matrix() const {
  const ::apollo::planning::QPMatrix* p = equality_matrix_;
  // @@protoc_insertion_point(field_get:apollo.planning.QuadraticProgrammingProblem.equality_matrix)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::QPMatrix*>(
      &::apollo::planning::_QPMatrix_default_instance_);
}
inline ::apollo::planning::QPMatrix* QuadraticProgrammingProblem::release_equality_matrix() {
  // @@protoc_insertion_point(field_release:apollo.planning.QuadraticProgrammingProblem.equality_matrix)
  clear_has_equality_matrix();
  ::apollo::planning::QPMatrix* temp = equality_matrix_;
  equality_matrix_ = NULL;
  return temp;
}
inline ::apollo::planning::QPMatrix* QuadraticProgrammingProblem::mutable_equality_matrix() {
  set_has_equality_matrix();
  if (equality_matrix_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::QPMatrix>(GetArenaNoVirtual());
    equality_matrix_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.QuadraticProgrammingProblem.equality_matrix)
  return equality_matrix_;
}
inline void QuadraticProgrammingProblem::set_allocated_equality_matrix(::apollo::planning::QPMatrix* equality_matrix) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete equality_matrix_;
  }
  if (equality_matrix) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      equality_matrix = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, equality_matrix, submessage_arena);
    }
    set_has_equality_matrix();
  } else {
    clear_has_equality_matrix();
  }
  equality_matrix_ = equality_matrix;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.QuadraticProgrammingProblem.equality_matrix)
}

// repeated double equality_value = 5;
inline int QuadraticProgrammingProblem::equality_value_size() const {
  return equality_value_.size();
}
inline void QuadraticProgrammingProblem::clear_equality_value() {
  equality_value_.Clear();
}
inline double QuadraticProgrammingProblem::equality_value(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.QuadraticProgrammingProblem.equality_value)
  return equality_value_.Get(index);
}
inline void QuadraticProgrammingProblem::set_equality_value(int index, double value) {
  equality_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.QuadraticProgrammingProblem.equality_value)
}
inline void QuadraticProgrammingProblem::add_equality_value(double value) {
  equality_value_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.QuadraticProgrammingProblem.equality_value)
}
inline const ::google::protobuf::RepeatedField< double >&
QuadraticProgrammingProblem::equality_value() const {
  // @@protoc_insertion_point(field_list:apollo.planning.QuadraticProgrammingProblem.equality_value)
  return equality_value_;
}
inline ::google::protobuf::RepeatedField< double >*
QuadraticProgrammingProblem::mutable_equality_value() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.QuadraticProgrammingProblem.equality_value)
  return &equality_value_;
}

// optional .apollo.planning.QPMatrix inequality_matrix = 6;
inline bool QuadraticProgrammingProblem::has_inequality_matrix() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuadraticProgrammingProblem::set_has_inequality_matrix() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuadraticProgrammingProblem::clear_has_inequality_matrix() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuadraticProgrammingProblem::clear_inequality_matrix() {
  if (inequality_matrix_ != NULL) inequality_matrix_->Clear();
  clear_has_inequality_matrix();
}
inline const ::apollo::planning::QPMatrix& QuadraticProgrammingProblem::_internal_inequality_matrix() const {
  return *inequality_matrix_;
}
inline const ::apollo::planning::QPMatrix& QuadraticProgrammingProblem::inequality_matrix() const {
  const ::apollo::planning::QPMatrix* p = inequality_matrix_;
  // @@protoc_insertion_point(field_get:apollo.planning.QuadraticProgrammingProblem.inequality_matrix)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::QPMatrix*>(
      &::apollo::planning::_QPMatrix_default_instance_);
}
inline ::apollo::planning::QPMatrix* QuadraticProgrammingProblem::release_inequality_matrix() {
  // @@protoc_insertion_point(field_release:apollo.planning.QuadraticProgrammingProblem.inequality_matrix)
  clear_has_inequality_matrix();
  ::apollo::planning::QPMatrix* temp = inequality_matrix_;
  inequality_matrix_ = NULL;
  return temp;
}
inline ::apollo::planning::QPMatrix* QuadraticProgrammingProblem::mutable_inequality_matrix() {
  set_has_inequality_matrix();
  if (inequality_matrix_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::QPMatrix>(GetArenaNoVirtual());
    inequality_matrix_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.QuadraticProgrammingProblem.inequality_matrix)
  return inequality_matrix_;
}
inline void QuadraticProgrammingProblem::set_allocated_inequality_matrix(::apollo::planning::QPMatrix* inequality_matrix) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete inequality_matrix_;
  }
  if (inequality_matrix) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inequality_matrix = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inequality_matrix, submessage_arena);
    }
    set_has_inequality_matrix();
  } else {
    clear_has_inequality_matrix();
  }
  inequality_matrix_ = inequality_matrix;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.QuadraticProgrammingProblem.inequality_matrix)
}

// repeated double inequality_value = 7;
inline int QuadraticProgrammingProblem::inequality_value_size() const {
  return inequality_value_.size();
}
inline void QuadraticProgrammingProblem::clear_inequality_value() {
  inequality_value_.Clear();
}
inline double QuadraticProgrammingProblem::inequality_value(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.QuadraticProgrammingProblem.inequality_value)
  return inequality_value_.Get(index);
}
inline void QuadraticProgrammingProblem::set_inequality_value(int index, double value) {
  inequality_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.QuadraticProgrammingProblem.inequality_value)
}
inline void QuadraticProgrammingProblem::add_inequality_value(double value) {
  inequality_value_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.QuadraticProgrammingProblem.inequality_value)
}
inline const ::google::protobuf::RepeatedField< double >&
QuadraticProgrammingProblem::inequality_value() const {
  // @@protoc_insertion_point(field_list:apollo.planning.QuadraticProgrammingProblem.inequality_value)
  return inequality_value_;
}
inline ::google::protobuf::RepeatedField< double >*
QuadraticProgrammingProblem::mutable_inequality_value() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.QuadraticProgrammingProblem.inequality_value)
  return &inequality_value_;
}

// repeated double input_marker = 8;
inline int QuadraticProgrammingProblem::input_marker_size() const {
  return input_marker_.size();
}
inline void QuadraticProgrammingProblem::clear_input_marker() {
  input_marker_.Clear();
}
inline double QuadraticProgrammingProblem::input_marker(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.QuadraticProgrammingProblem.input_marker)
  return input_marker_.Get(index);
}
inline void QuadraticProgrammingProblem::set_input_marker(int index, double value) {
  input_marker_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.QuadraticProgrammingProblem.input_marker)
}
inline void QuadraticProgrammingProblem::add_input_marker(double value) {
  input_marker_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.QuadraticProgrammingProblem.input_marker)
}
inline const ::google::protobuf::RepeatedField< double >&
QuadraticProgrammingProblem::input_marker() const {
  // @@protoc_insertion_point(field_list:apollo.planning.QuadraticProgrammingProblem.input_marker)
  return input_marker_;
}
inline ::google::protobuf::RepeatedField< double >*
QuadraticProgrammingProblem::mutable_input_marker() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.QuadraticProgrammingProblem.input_marker)
  return &input_marker_;
}

// repeated double optimal_param = 9;
inline int QuadraticProgrammingProblem::optimal_param_size() const {
  return optimal_param_.size();
}
inline void QuadraticProgrammingProblem::clear_optimal_param() {
  optimal_param_.Clear();
}
inline double QuadraticProgrammingProblem::optimal_param(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.QuadraticProgrammingProblem.optimal_param)
  return optimal_param_.Get(index);
}
inline void QuadraticProgrammingProblem::set_optimal_param(int index, double value) {
  optimal_param_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.QuadraticProgrammingProblem.optimal_param)
}
inline void QuadraticProgrammingProblem::add_optimal_param(double value) {
  optimal_param_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.QuadraticProgrammingProblem.optimal_param)
}
inline const ::google::protobuf::RepeatedField< double >&
QuadraticProgrammingProblem::optimal_param() const {
  // @@protoc_insertion_point(field_list:apollo.planning.QuadraticProgrammingProblem.optimal_param)
  return optimal_param_;
}
inline ::google::protobuf::RepeatedField< double >*
QuadraticProgrammingProblem::mutable_optimal_param() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.QuadraticProgrammingProblem.optimal_param)
  return &optimal_param_;
}

// -------------------------------------------------------------------

// QPMatrix

// optional int32 row_size = 1;
inline bool QPMatrix::has_row_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QPMatrix::set_has_row_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QPMatrix::clear_has_row_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QPMatrix::clear_row_size() {
  row_size_ = 0;
  clear_has_row_size();
}
inline ::google::protobuf::int32 QPMatrix::row_size() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QPMatrix.row_size)
  return row_size_;
}
inline void QPMatrix::set_row_size(::google::protobuf::int32 value) {
  set_has_row_size();
  row_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QPMatrix.row_size)
}

// optional int32 col_size = 2;
inline bool QPMatrix::has_col_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QPMatrix::set_has_col_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QPMatrix::clear_has_col_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QPMatrix::clear_col_size() {
  col_size_ = 0;
  clear_has_col_size();
}
inline ::google::protobuf::int32 QPMatrix::col_size() const {
  // @@protoc_insertion_point(field_get:apollo.planning.QPMatrix.col_size)
  return col_size_;
}
inline void QPMatrix::set_col_size(::google::protobuf::int32 value) {
  set_has_col_size();
  col_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.QPMatrix.col_size)
}

// repeated double element = 3;
inline int QPMatrix::element_size() const {
  return element_.size();
}
inline void QPMatrix::clear_element() {
  element_.Clear();
}
inline double QPMatrix::element(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.QPMatrix.element)
  return element_.Get(index);
}
inline void QPMatrix::set_element(int index, double value) {
  element_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.planning.QPMatrix.element)
}
inline void QPMatrix::add_element(double value) {
  element_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.planning.QPMatrix.element)
}
inline const ::google::protobuf::RepeatedField< double >&
QPMatrix::element() const {
  // @@protoc_insertion_point(field_list:apollo.planning.QPMatrix.element)
  return element_;
}
inline ::google::protobuf::RepeatedField< double >*
QPMatrix::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.QPMatrix.element)
  return &element_;
}

// -------------------------------------------------------------------

// QuadraticProgrammingProblemSet

// repeated .apollo.planning.QuadraticProgrammingProblem problem = 1;
inline int QuadraticProgrammingProblemSet::problem_size() const {
  return problem_.size();
}
inline void QuadraticProgrammingProblemSet::clear_problem() {
  problem_.Clear();
}
inline ::apollo::planning::QuadraticProgrammingProblem* QuadraticProgrammingProblemSet::mutable_problem(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.planning.QuadraticProgrammingProblemSet.problem)
  return problem_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::planning::QuadraticProgrammingProblem >*
QuadraticProgrammingProblemSet::mutable_problem() {
  // @@protoc_insertion_point(field_mutable_list:apollo.planning.QuadraticProgrammingProblemSet.problem)
  return &problem_;
}
inline const ::apollo::planning::QuadraticProgrammingProblem& QuadraticProgrammingProblemSet::problem(int index) const {
  // @@protoc_insertion_point(field_get:apollo.planning.QuadraticProgrammingProblemSet.problem)
  return problem_.Get(index);
}
inline ::apollo::planning::QuadraticProgrammingProblem* QuadraticProgrammingProblemSet::add_problem() {
  // @@protoc_insertion_point(field_add:apollo.planning.QuadraticProgrammingProblemSet.problem)
  return problem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::planning::QuadraticProgrammingProblem >&
QuadraticProgrammingProblemSet::problem() const {
  // @@protoc_insertion_point(field_list:apollo.planning.QuadraticProgrammingProblemSet.problem)
  return problem_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fmath_2fqp_5fproblem_2eproto
