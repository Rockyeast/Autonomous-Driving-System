// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/open_space_task_config.proto

#include "modules/planning/proto/open_space_task_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HybridAStarConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IpoptSolverConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DistanceApproachTrajectorySmootherConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DualVariableConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_OpenSpaceTrajectoryOptimizerConfig;
}  // namespace protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto
namespace protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_PlannerOpenSpaceConfig;
}  // namespace protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto
namespace apollo {
namespace planning {
class OpenSpaceFallBackDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenSpaceFallBackDeciderConfig>
      _instance;
} _OpenSpaceFallBackDeciderConfig_default_instance_;
class OpenSpacePreStopDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenSpacePreStopDeciderConfig>
      _instance;
} _OpenSpacePreStopDeciderConfig_default_instance_;
class OpenSpaceRoiDeciderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenSpaceRoiDeciderConfig>
      _instance;
} _OpenSpaceRoiDeciderConfig_default_instance_;
class OpenSpaceTrajectoryPartitionConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenSpaceTrajectoryPartitionConfig>
      _instance;
} _OpenSpaceTrajectoryPartitionConfig_default_instance_;
class OpenSpaceTrajectoryProviderConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenSpaceTrajectoryProviderConfig>
      _instance;
} _OpenSpaceTrajectoryProviderConfig_default_instance_;
class OpenSpaceTrajectoryOptimizerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenSpaceTrajectoryOptimizerConfig>
      _instance;
} _OpenSpaceTrajectoryOptimizerConfig_default_instance_;
class HybridAStarConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HybridAStarConfig>
      _instance;
} _HybridAStarConfig_default_instance_;
class DualVariableConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DualVariableConfig>
      _instance;
} _DualVariableConfig_default_instance_;
class DistanceApproachTrajectorySmootherConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DistanceApproachTrajectorySmootherConfig>
      _instance;
} _DistanceApproachTrajectorySmootherConfig_default_instance_;
class IpoptSolverConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IpoptSolverConfig>
      _instance;
} _IpoptSolverConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
namespace protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto {
static void InitDefaultsOpenSpaceFallBackDeciderConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_OpenSpaceFallBackDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::OpenSpaceFallBackDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::OpenSpaceFallBackDeciderConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpenSpaceFallBackDeciderConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpenSpaceFallBackDeciderConfig}, {}};

static void InitDefaultsOpenSpacePreStopDeciderConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_OpenSpacePreStopDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::OpenSpacePreStopDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::OpenSpacePreStopDeciderConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpenSpacePreStopDeciderConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpenSpacePreStopDeciderConfig}, {}};

static void InitDefaultsOpenSpaceRoiDeciderConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_OpenSpaceRoiDeciderConfig_default_instance_;
    new (ptr) ::apollo::planning::OpenSpaceRoiDeciderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::OpenSpaceRoiDeciderConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpenSpaceRoiDeciderConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpenSpaceRoiDeciderConfig}, {}};

static void InitDefaultsOpenSpaceTrajectoryPartitionConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_OpenSpaceTrajectoryPartitionConfig_default_instance_;
    new (ptr) ::apollo::planning::OpenSpaceTrajectoryPartitionConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::OpenSpaceTrajectoryPartitionConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OpenSpaceTrajectoryPartitionConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOpenSpaceTrajectoryPartitionConfig}, {}};

static void InitDefaultsOpenSpaceTrajectoryProviderConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_OpenSpaceTrajectoryProviderConfig_default_instance_;
    new (ptr) ::apollo::planning::OpenSpaceTrajectoryProviderConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::OpenSpaceTrajectoryProviderConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OpenSpaceTrajectoryProviderConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOpenSpaceTrajectoryProviderConfig}, {
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_OpenSpaceTrajectoryOptimizerConfig.base,}};

static void InitDefaultsOpenSpaceTrajectoryOptimizerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_OpenSpaceTrajectoryOptimizerConfig_default_instance_;
    new (ptr) ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_OpenSpaceTrajectoryOptimizerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsOpenSpaceTrajectoryOptimizerConfig}, {
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_HybridAStarConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_DualVariableConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_DistanceApproachTrajectorySmootherConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::scc_info_PlannerOpenSpaceConfig.base,}};

static void InitDefaultsHybridAStarConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_HybridAStarConfig_default_instance_;
    new (ptr) ::apollo::planning::HybridAStarConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::HybridAStarConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HybridAStarConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHybridAStarConfig}, {}};

static void InitDefaultsDualVariableConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_DualVariableConfig_default_instance_;
    new (ptr) ::apollo::planning::DualVariableConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::DualVariableConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DualVariableConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDualVariableConfig}, {
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_IpoptSolverConfig.base,}};

static void InitDefaultsDistanceApproachTrajectorySmootherConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_DistanceApproachTrajectorySmootherConfig_default_instance_;
    new (ptr) ::apollo::planning::DistanceApproachTrajectorySmootherConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::DistanceApproachTrajectorySmootherConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DistanceApproachTrajectorySmootherConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDistanceApproachTrajectorySmootherConfig}, {
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_IpoptSolverConfig.base,}};

static void InitDefaultsIpoptSolverConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_IpoptSolverConfig_default_instance_;
    new (ptr) ::apollo::planning::IpoptSolverConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::IpoptSolverConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IpoptSolverConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIpoptSolverConfig}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_OpenSpaceFallBackDeciderConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpenSpacePreStopDeciderConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpenSpaceRoiDeciderConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpenSpaceTrajectoryPartitionConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpenSpaceTrajectoryProviderConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpenSpaceTrajectoryOptimizerConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HybridAStarConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DualVariableConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DistanceApproachTrajectorySmootherConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IpoptSolverConfig.base);
}

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceFallBackDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceFallBackDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceFallBackDeciderConfig, open_space_prediction_time_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceFallBackDeciderConfig, open_space_fallback_collision_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceFallBackDeciderConfig, open_space_fallback_stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceFallBackDeciderConfig, open_space_fallback_collision_time_buffer_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpacePreStopDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpacePreStopDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpacePreStopDeciderConfig, stop_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpacePreStopDeciderConfig, rightaway_stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpacePreStopDeciderConfig, stop_distance_to_target_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, roi_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, roi_longitudinal_range_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, roi_longitudinal_range_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, parking_start_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, parking_inwards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, enable_perception_obstacles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, parking_depth_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, roi_line_segment_min_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, roi_line_segment_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, roi_line_segment_length_from_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, perception_obstacle_filtering_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, perception_obstacle_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, curb_heading_tangent_change_upper_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, end_pose_s_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, parallel_park_end_x_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, extend_right_x_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceRoiDeciderConfig, extend_left_x_buffer_),
  0,
  6,
  7,
  8,
  1,
  2,
  9,
  10,
  11,
  12,
  13,
  3,
  14,
  15,
  16,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, gear_shift_max_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, gear_shift_unit_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, gear_shift_period_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, interpolated_pieces_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, initial_gear_check_horizon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, heading_search_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, heading_track_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, distance_search_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, heading_offset_to_midpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, lateral_offset_to_midpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, longitudinal_offset_to_midpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, vehicle_box_iou_threshold_to_midpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryPartitionConfig, linear_velocity_threshold_on_ego_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  7,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryProviderConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryProviderConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryProviderConfig, open_space_trajectory_optimizer_config_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, hybrid_a_star_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, dual_variable_warm_start_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, distance_approach_trajectory_smoother_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, delta_t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, is_near_destination_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig, planner_open_space_config_),
  0,
  1,
  2,
  4,
  5,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, xy_grid_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, phi_grid_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, next_node_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, step_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, traj_forward_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, traj_back_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, traj_gear_switch_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, traj_steer_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, traj_steer_change_penalty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, grid_a_star_xy_resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::HybridAStarConfig, node_radius_),
  2,
  3,
  4,
  5,
  0,
  1,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DualVariableConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DualVariableConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DualVariableConfig, weight_d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DualVariableConfig, ipopt_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DualVariableConfig, qp_format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DualVariableConfig, min_safety_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DualVariableConfig, debug_osqp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DualVariableConfig, beta_),
  4,
  0,
  2,
  1,
  3,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_steer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_steer_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_a_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_phi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_steer_stitching_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_a_stitching_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_first_order_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, weight_second_order_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, min_safety_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, max_speed_forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, max_speed_reverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, max_acceleration_forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, max_acceleration_reverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, min_time_sample_scaling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, max_time_sample_scaling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, use_fix_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, ipopt_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, enable_constraint_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, enable_hand_derivative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, enable_derivative_check_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::DistanceApproachTrajectorySmootherConfig, enable_initial_final_check_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  19,
  20,
  21,
  22,
  23,
  24,
  14,
  0,
  15,
  16,
  17,
  18,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_print_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, mumps_mem_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, mumps_pivtol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_max_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_tol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_acceptable_constr_viol_tol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_min_hessian_perturbation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_jacobian_regularization_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_print_timing_statistics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_alpha_for_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_recalc_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::IpoptSolverConfig, ipopt_mu_init_),
  3,
  4,
  5,
  10,
  6,
  7,
  8,
  9,
  0,
  1,
  2,
  11,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::apollo::planning::OpenSpaceFallBackDeciderConfig)},
  { 13, 21, sizeof(::apollo::planning::OpenSpacePreStopDeciderConfig)},
  { 24, 46, sizeof(::apollo::planning::OpenSpaceRoiDeciderConfig)},
  { 63, 81, sizeof(::apollo::planning::OpenSpaceTrajectoryPartitionConfig)},
  { 94, 100, sizeof(::apollo::planning::OpenSpaceTrajectoryProviderConfig)},
  { 101, 112, sizeof(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig)},
  { 118, 134, sizeof(::apollo::planning::HybridAStarConfig)},
  { 145, 156, sizeof(::apollo::planning::DualVariableConfig)},
  { 162, 192, sizeof(::apollo::planning::DistanceApproachTrajectorySmootherConfig)},
  { 217, 234, sizeof(::apollo::planning::IpoptSolverConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_OpenSpaceFallBackDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_OpenSpacePreStopDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_OpenSpaceRoiDeciderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_OpenSpaceTrajectoryPartitionConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_OpenSpaceTrajectoryProviderConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_OpenSpaceTrajectoryOptimizerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_HybridAStarConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_DualVariableConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_DistanceApproachTrajectorySmootherConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_IpoptSolverConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/planning/proto/open_space_task_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n3modules/planning/proto/open_space_task"
      "_config.proto\022\017apollo.planning\0326modules/"
      "planning/proto/planner_open_space_config"
      ".proto\"\346\001\n\036OpenSpaceFallBackDeciderConfi"
      "g\022,\n!open_space_prediction_time_period\030\001"
      " \001(\001:\0015\0221\n&open_space_fallback_collision"
      "_distance\030\002 \001(\001:\0015\022,\n!open_space_fallbac"
      "k_stop_distance\030\003 \001(\001:\0012\0225\n)open_space_f"
      "allback_collision_time_buffer\030\004 \001(\001:\00210\""
      "\235\002\n\035OpenSpacePreStopDeciderConfig\022J\n\tsto"
      "p_type\030\001 \001(\01627.apollo.planning.OpenSpace"
      "PreStopDeciderConfig.StopType\022\"\n\027rightaw"
      "ay_stop_distance\030\002 \001(\001:\0012\022\"\n\027stop_distan"
      "ce_to_target\030\003 \001(\001:\0015\"h\n\010StopType\022\017\n\013NOT"
      "_DEFINED\020\000\022\013\n\007PARKING\020\001\022\r\n\tPULL_OVER\020\002\022\030"
      "\n\024NARROW_STREET_U_TURN\020\003\022\025\n\021DEAD_END_PRE"
      "_STOP\020\004\"\302\006\n\031OpenSpaceRoiDeciderConfig\022D\n"
      "\010roi_type\030\001 \001(\01622.apollo.planning.OpenSp"
      "aceRoiDeciderConfig.RoiType\022(\n\034roi_longi"
      "tudinal_range_start\030\002 \001(\001:\00210\022&\n\032roi_lon"
      "gitudinal_range_end\030\003 \001(\001:\00210\022\036\n\023parking"
      "_start_range\030\004 \001(\001:\0017\022\036\n\017parking_inwards"
      "\030\005 \001(\010:\005false\022#\n\033enable_perception_obsta"
      "cles\030\006 \001(\010\022!\n\024parking_depth_buffer\030\007 \001(\001"
      ":\0030.1\022\'\n\032roi_line_segment_min_angle\030\010 \001("
      "\001:\0030.3\022\"\n\027roi_line_segment_length\030\t \001(\001:"
      "\0011\022,\n roi_line_segment_length_from_map\030\n"
      " \001(\001:\00210\0224\n&perception_obstacle_filterin"
      "g_distance\030\013 \001(\001:\0041000\022\"\n\032perception_obs"
      "tacle_buffer\030\014 \001(\001\0222\n\'curb_heading_tange"
      "nt_change_upper_limit\030\r \001(\001:\0011\022\037\n\023end_po"
      "se_s_distance\030\016 \001(\001:\00210\022\'\n\032parallel_park"
      "_end_x_buffer\030\017 \001(\001:\0030.2\022 \n\025extend_right"
      "_x_buffer\030\020 \001(\001:\0010\022\037\n\024extend_left_x_buff"
      "er\030\021 \001(\001:\0010\"o\n\007RoiType\022\017\n\013NOT_DEFINED\020\000\022"
      "\013\n\007PARKING\020\001\022\r\n\tPULL_OVER\020\002\022\017\n\013PARK_AND_"
      "GO\020\003\022\030\n\024NARROW_STREET_U_TURN\020\004\022\014\n\010DEAD_E"
      "ND\020\005\"\202\004\n\"OpenSpaceTrajectoryPartitionCon"
      "fig\022\030\n\020gear_shift_max_t\030\001 \001(\001\022\031\n\021gear_sh"
      "ift_unit_t\030\002 \001(\001\022\"\n\032gear_shift_period_du"
      "ration\030\003 \001(\001\022\037\n\027interpolated_pieces_num\030"
      "\004 \001(\004\022\"\n\032initial_gear_check_horizon\030\005 \001("
      "\004\022\034\n\024heading_search_range\030\006 \001(\001\022\033\n\023headi"
      "ng_track_range\030\007 \001(\001\022$\n\025distance_search_"
      "range\030\010 \001(\001:\0051e-06\022\"\n\032heading_offset_to_"
      "midpoint\030\t \001(\001\022\'\n\032lateral_offset_to_midp"
      "oint\030\n \001(\001:\0030.1\022,\n\037longitudinal_offset_t"
      "o_midpoint\030\013 \001(\001:\0030.1\0223\n%vehicle_box_iou"
      "_threshold_to_midpoint\030\014 \001(\001:\0040.95\022-\n li"
      "near_velocity_threshold_on_ego\030\r \001(\001:\0030."
      "2\"\210\001\n!OpenSpaceTrajectoryProviderConfig\022"
      "c\n&open_space_trajectory_optimizer_confi"
      "g\030\001 \001(\01323.apollo.planning.OpenSpaceTraje"
      "ctoryOptimizerConfig\"\265\003\n\"OpenSpaceTrajec"
      "toryOptimizerConfig\022@\n\024hybrid_a_star_con"
      "fig\030\001 \001(\0132\".apollo.planning.HybridAStarC"
      "onfig\022L\n\037dual_variable_warm_start_config"
      "\030\002 \001(\0132#.apollo.planning.DualVariableCon"
      "fig\022o\n,distance_approach_trajectory_smoo"
      "ther_config\030\003 \001(\01329.apollo.planning.Dist"
      "anceApproachTrajectorySmootherConfig\022\024\n\007"
      "delta_t\030\004 \001(\002:\0030.5\022,\n\035is_near_destinatio"
      "n_threshold\030\005 \001(\001:\0050.001\022J\n\031planner_open"
      "_space_config\030\006 \001(\0132\'.apollo.planning.Pl"
      "annerOpenSpaceConfig\"\371\002\n\021HybridAStarConf"
      "ig\022\037\n\022xy_grid_resolution\030\001 \001(\001:\0030.2\022!\n\023p"
      "hi_grid_resolution\030\002 \001(\001:\0040.05\022\031\n\rnext_n"
      "ode_num\030\003 \001(\004:\00210\022\026\n\tstep_size\030\004 \001(\001:\0030."
      "5\022\037\n\024traj_forward_penalty\030\005 \001(\001:\0010\022\034\n\021tr"
      "aj_back_penalty\030\006 \001(\001:\0010\022$\n\030traj_gear_sw"
      "itch_penalty\030\007 \001(\001:\00210\022\037\n\022traj_steer_pen"
      "alty\030\010 \001(\001:\003100\022%\n\031traj_steer_change_pen"
      "alty\030\t \001(\001:\00210\022&\n\031grid_a_star_xy_resolut"
      "ion\030\017 \001(\001:\0030.1\022\030\n\013node_radius\030\020 \001(\001:\0030.5"
      "\"\345\001\n\022DualVariableConfig\022\023\n\010weight_d\030\001 \001("
      "\001:\0011\0228\n\014ipopt_config\030\002 \001(\0132\".apollo.plan"
      "ning.IpoptSolverConfig\0224\n\tqp_format\030\003 \001("
      "\0162!.apollo.planning.DualVariableMode\022\036\n\023"
      "min_safety_distance\030\004 \001(\001:\0010\022\031\n\ndebug_os"
      "qp\030\005 \001(\010:\005false\022\017\n\004beta\030\006 \001(\001:\0011\"\242\006\n(Dis"
      "tanceApproachTrajectorySmootherConfig\022\024\n"
      "\014weight_steer\030\001 \001(\001\022\020\n\010weight_a\030\002 \001(\001\022\031\n"
      "\021weight_steer_rate\030\003 \001(\001\022\025\n\rweight_a_rat"
      "e\030\004 \001(\001\022\020\n\010weight_x\030\005 \001(\001\022\020\n\010weight_y\030\006 "
      "\001(\001\022\022\n\nweight_phi\030\007 \001(\001\022\020\n\010weight_v\030\010 \001("
      "\001\022\036\n\026weight_steer_stitching\030\t \001(\001\022\032\n\022wei"
      "ght_a_stitching\030\n \001(\001\022\037\n\027weight_first_or"
      "der_time\030\013 \001(\001\022 \n\030weight_second_order_ti"
      "me\030\014 \001(\001\022\036\n\023min_safety_distance\030\r \001(\001:\0010"
      "\022\034\n\021max_speed_forward\030\016 \001(\001:\0013\022\034\n\021max_sp"
      "eed_reverse\030\017 \001(\001:\0012\022#\n\030max_acceleration"
      "_forward\030\020 \001(\001:\0012\022#\n\030max_acceleration_re"
      "verse\030\021 \001(\001:\0012\022$\n\027min_time_sample_scalin"
      "g\030\022 \001(\001:\0030.1\022#\n\027max_time_sample_scaling\030"
      "\023 \001(\001:\00210\022\033\n\014use_fix_time\030\024 \001(\010:\005false\0228"
      "\n\014ipopt_config\030\025 \001(\0132\".apollo.planning.I"
      "poptSolverConfig\022\037\n\027enable_constraint_ch"
      "eck\030\026 \001(\010\022\036\n\026enable_hand_derivative\030\027 \001("
      "\010\022\037\n\027enable_derivative_check\030\030 \001(\010\022)\n\032en"
      "able_initial_final_check\030\031 \001(\010:\005false\"\377\002"
      "\n\021IpoptSolverConfig\022\031\n\021ipopt_print_level"
      "\030\001 \001(\005\022\031\n\021mumps_mem_percent\030\002 \001(\005\022\024\n\014mum"
      "ps_pivtol\030\003 \001(\001\022\026\n\016ipopt_max_iter\030\004 \001(\005\022"
      "\021\n\tipopt_tol\030\005 \001(\001\022(\n ipopt_acceptable_c"
      "onstr_viol_tol\030\006 \001(\001\022&\n\036ipopt_min_hessia"
      "n_perturbation\030\007 \001(\001\022+\n#ipopt_jacobian_r"
      "egularization_value\030\010 \001(\001\022%\n\035ipopt_print"
      "_timing_statistics\030\t \001(\t\022\031\n\021ipopt_alpha_"
      "for_y\030\n \001(\t\022\026\n\016ipopt_recalc_y\030\013 \001(\t\022\032\n\ri"
      "popt_mu_init\030\014 \001(\001:\0030.1*w\n\020DualVariableM"
      "ode\022\027\n\023DUAL_VARIABLE_IPOPT\020\000\022\031\n\025DUAL_VAR"
      "IABLE_IPOPTQP\020\001\022\026\n\022DUAL_VARIABLE_OSQP\020\002\022"
      "\027\n\023DUAL_VARIABLE_DEBUG\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4504);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/open_space_task_config.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fplanning_2fproto_2fplanner_5fopen_5fspace_5fconfig_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto
namespace apollo {
namespace planning {
const ::google::protobuf::EnumDescriptor* OpenSpacePreStopDeciderConfig_StopType_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool OpenSpacePreStopDeciderConfig_StopType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OpenSpacePreStopDeciderConfig_StopType OpenSpacePreStopDeciderConfig::NOT_DEFINED;
const OpenSpacePreStopDeciderConfig_StopType OpenSpacePreStopDeciderConfig::PARKING;
const OpenSpacePreStopDeciderConfig_StopType OpenSpacePreStopDeciderConfig::PULL_OVER;
const OpenSpacePreStopDeciderConfig_StopType OpenSpacePreStopDeciderConfig::NARROW_STREET_U_TURN;
const OpenSpacePreStopDeciderConfig_StopType OpenSpacePreStopDeciderConfig::DEAD_END_PRE_STOP;
const OpenSpacePreStopDeciderConfig_StopType OpenSpacePreStopDeciderConfig::StopType_MIN;
const OpenSpacePreStopDeciderConfig_StopType OpenSpacePreStopDeciderConfig::StopType_MAX;
const int OpenSpacePreStopDeciderConfig::StopType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* OpenSpaceRoiDeciderConfig_RoiType_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_enum_descriptors[1];
}
bool OpenSpaceRoiDeciderConfig_RoiType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::NOT_DEFINED;
const OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::PARKING;
const OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::PULL_OVER;
const OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::PARK_AND_GO;
const OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::NARROW_STREET_U_TURN;
const OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::DEAD_END;
const OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::RoiType_MIN;
const OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::RoiType_MAX;
const int OpenSpaceRoiDeciderConfig::RoiType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DualVariableMode_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_enum_descriptors[2];
}
bool DualVariableMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void OpenSpaceFallBackDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenSpaceFallBackDeciderConfig::kOpenSpacePredictionTimePeriodFieldNumber;
const int OpenSpaceFallBackDeciderConfig::kOpenSpaceFallbackCollisionDistanceFieldNumber;
const int OpenSpaceFallBackDeciderConfig::kOpenSpaceFallbackStopDistanceFieldNumber;
const int OpenSpaceFallBackDeciderConfig::kOpenSpaceFallbackCollisionTimeBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenSpaceFallBackDeciderConfig::OpenSpaceFallBackDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_OpenSpaceFallBackDeciderConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.OpenSpaceFallBackDeciderConfig)
}
OpenSpaceFallBackDeciderConfig::OpenSpaceFallBackDeciderConfig(const OpenSpaceFallBackDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&open_space_prediction_time_period_, &from.open_space_prediction_time_period_,
    static_cast<size_t>(reinterpret_cast<char*>(&open_space_fallback_collision_time_buffer_) -
    reinterpret_cast<char*>(&open_space_prediction_time_period_)) + sizeof(open_space_fallback_collision_time_buffer_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OpenSpaceFallBackDeciderConfig)
}

void OpenSpaceFallBackDeciderConfig::SharedCtor() {
  open_space_prediction_time_period_ = 5;
  open_space_fallback_collision_distance_ = 5;
  open_space_fallback_stop_distance_ = 2;
  open_space_fallback_collision_time_buffer_ = 10;
}

OpenSpaceFallBackDeciderConfig::~OpenSpaceFallBackDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.OpenSpaceFallBackDeciderConfig)
  SharedDtor();
}

void OpenSpaceFallBackDeciderConfig::SharedDtor() {
}

void OpenSpaceFallBackDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpenSpaceFallBackDeciderConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenSpaceFallBackDeciderConfig& OpenSpaceFallBackDeciderConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_OpenSpaceFallBackDeciderConfig.base);
  return *internal_default_instance();
}


void OpenSpaceFallBackDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OpenSpaceFallBackDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    open_space_prediction_time_period_ = 5;
    open_space_fallback_collision_distance_ = 5;
    open_space_fallback_stop_distance_ = 2;
    open_space_fallback_collision_time_buffer_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OpenSpaceFallBackDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.OpenSpaceFallBackDeciderConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double open_space_prediction_time_period = 1 [default = 5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_open_space_prediction_time_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_space_prediction_time_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double open_space_fallback_collision_distance = 2 [default = 5];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_open_space_fallback_collision_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_space_fallback_collision_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double open_space_fallback_stop_distance = 3 [default = 2];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_open_space_fallback_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_space_fallback_stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double open_space_fallback_collision_time_buffer = 4 [default = 10];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_open_space_fallback_collision_time_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &open_space_fallback_collision_time_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.OpenSpaceFallBackDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.OpenSpaceFallBackDeciderConfig)
  return false;
#undef DO_
}

void OpenSpaceFallBackDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.OpenSpaceFallBackDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double open_space_prediction_time_period = 1 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->open_space_prediction_time_period(), output);
  }

  // optional double open_space_fallback_collision_distance = 2 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->open_space_fallback_collision_distance(), output);
  }

  // optional double open_space_fallback_stop_distance = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->open_space_fallback_stop_distance(), output);
  }

  // optional double open_space_fallback_collision_time_buffer = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->open_space_fallback_collision_time_buffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.OpenSpaceFallBackDeciderConfig)
}

::google::protobuf::uint8* OpenSpaceFallBackDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OpenSpaceFallBackDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double open_space_prediction_time_period = 1 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->open_space_prediction_time_period(), target);
  }

  // optional double open_space_fallback_collision_distance = 2 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->open_space_fallback_collision_distance(), target);
  }

  // optional double open_space_fallback_stop_distance = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->open_space_fallback_stop_distance(), target);
  }

  // optional double open_space_fallback_collision_time_buffer = 4 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->open_space_fallback_collision_time_buffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OpenSpaceFallBackDeciderConfig)
  return target;
}

size_t OpenSpaceFallBackDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OpenSpaceFallBackDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double open_space_prediction_time_period = 1 [default = 5];
    if (has_open_space_prediction_time_period()) {
      total_size += 1 + 8;
    }

    // optional double open_space_fallback_collision_distance = 2 [default = 5];
    if (has_open_space_fallback_collision_distance()) {
      total_size += 1 + 8;
    }

    // optional double open_space_fallback_stop_distance = 3 [default = 2];
    if (has_open_space_fallback_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double open_space_fallback_collision_time_buffer = 4 [default = 10];
    if (has_open_space_fallback_collision_time_buffer()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenSpaceFallBackDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.OpenSpaceFallBackDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenSpaceFallBackDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenSpaceFallBackDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.OpenSpaceFallBackDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.OpenSpaceFallBackDeciderConfig)
    MergeFrom(*source);
  }
}

void OpenSpaceFallBackDeciderConfig::MergeFrom(const OpenSpaceFallBackDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OpenSpaceFallBackDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      open_space_prediction_time_period_ = from.open_space_prediction_time_period_;
    }
    if (cached_has_bits & 0x00000002u) {
      open_space_fallback_collision_distance_ = from.open_space_fallback_collision_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      open_space_fallback_stop_distance_ = from.open_space_fallback_stop_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      open_space_fallback_collision_time_buffer_ = from.open_space_fallback_collision_time_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpenSpaceFallBackDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.OpenSpaceFallBackDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSpaceFallBackDeciderConfig::CopyFrom(const OpenSpaceFallBackDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OpenSpaceFallBackDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpaceFallBackDeciderConfig::IsInitialized() const {
  return true;
}

void OpenSpaceFallBackDeciderConfig::Swap(OpenSpaceFallBackDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenSpaceFallBackDeciderConfig::InternalSwap(OpenSpaceFallBackDeciderConfig* other) {
  using std::swap;
  swap(open_space_prediction_time_period_, other->open_space_prediction_time_period_);
  swap(open_space_fallback_collision_distance_, other->open_space_fallback_collision_distance_);
  swap(open_space_fallback_stop_distance_, other->open_space_fallback_stop_distance_);
  swap(open_space_fallback_collision_time_buffer_, other->open_space_fallback_collision_time_buffer_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpenSpaceFallBackDeciderConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OpenSpacePreStopDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenSpacePreStopDeciderConfig::kStopTypeFieldNumber;
const int OpenSpacePreStopDeciderConfig::kRightawayStopDistanceFieldNumber;
const int OpenSpacePreStopDeciderConfig::kStopDistanceToTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenSpacePreStopDeciderConfig::OpenSpacePreStopDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_OpenSpacePreStopDeciderConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.OpenSpacePreStopDeciderConfig)
}
OpenSpacePreStopDeciderConfig::OpenSpacePreStopDeciderConfig(const OpenSpacePreStopDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stop_type_, &from.stop_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_distance_to_target_) -
    reinterpret_cast<char*>(&stop_type_)) + sizeof(stop_distance_to_target_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OpenSpacePreStopDeciderConfig)
}

void OpenSpacePreStopDeciderConfig::SharedCtor() {
  stop_type_ = 0;
  rightaway_stop_distance_ = 2;
  stop_distance_to_target_ = 5;
}

OpenSpacePreStopDeciderConfig::~OpenSpacePreStopDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.OpenSpacePreStopDeciderConfig)
  SharedDtor();
}

void OpenSpacePreStopDeciderConfig::SharedDtor() {
}

void OpenSpacePreStopDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpenSpacePreStopDeciderConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenSpacePreStopDeciderConfig& OpenSpacePreStopDeciderConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_OpenSpacePreStopDeciderConfig.base);
  return *internal_default_instance();
}


void OpenSpacePreStopDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OpenSpacePreStopDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    stop_type_ = 0;
    rightaway_stop_distance_ = 2;
    stop_distance_to_target_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OpenSpacePreStopDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.OpenSpacePreStopDeciderConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.OpenSpacePreStopDeciderConfig.StopType stop_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::OpenSpacePreStopDeciderConfig_StopType_IsValid(value)) {
            set_stop_type(static_cast< ::apollo::planning::OpenSpacePreStopDeciderConfig_StopType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rightaway_stop_distance = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_rightaway_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rightaway_stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_distance_to_target = 3 [default = 5];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_stop_distance_to_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_to_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.OpenSpacePreStopDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.OpenSpacePreStopDeciderConfig)
  return false;
#undef DO_
}

void OpenSpacePreStopDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.OpenSpacePreStopDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.OpenSpacePreStopDeciderConfig.StopType stop_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stop_type(), output);
  }

  // optional double rightaway_stop_distance = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rightaway_stop_distance(), output);
  }

  // optional double stop_distance_to_target = 3 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->stop_distance_to_target(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.OpenSpacePreStopDeciderConfig)
}

::google::protobuf::uint8* OpenSpacePreStopDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OpenSpacePreStopDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.OpenSpacePreStopDeciderConfig.StopType stop_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stop_type(), target);
  }

  // optional double rightaway_stop_distance = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rightaway_stop_distance(), target);
  }

  // optional double stop_distance_to_target = 3 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->stop_distance_to_target(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OpenSpacePreStopDeciderConfig)
  return target;
}

size_t OpenSpacePreStopDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OpenSpacePreStopDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.planning.OpenSpacePreStopDeciderConfig.StopType stop_type = 1;
    if (has_stop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stop_type());
    }

    // optional double rightaway_stop_distance = 2 [default = 2];
    if (has_rightaway_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double stop_distance_to_target = 3 [default = 5];
    if (has_stop_distance_to_target()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenSpacePreStopDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.OpenSpacePreStopDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenSpacePreStopDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenSpacePreStopDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.OpenSpacePreStopDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.OpenSpacePreStopDeciderConfig)
    MergeFrom(*source);
  }
}

void OpenSpacePreStopDeciderConfig::MergeFrom(const OpenSpacePreStopDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OpenSpacePreStopDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      stop_type_ = from.stop_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      rightaway_stop_distance_ = from.rightaway_stop_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      stop_distance_to_target_ = from.stop_distance_to_target_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpenSpacePreStopDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.OpenSpacePreStopDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSpacePreStopDeciderConfig::CopyFrom(const OpenSpacePreStopDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OpenSpacePreStopDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpacePreStopDeciderConfig::IsInitialized() const {
  return true;
}

void OpenSpacePreStopDeciderConfig::Swap(OpenSpacePreStopDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenSpacePreStopDeciderConfig::InternalSwap(OpenSpacePreStopDeciderConfig* other) {
  using std::swap;
  swap(stop_type_, other->stop_type_);
  swap(rightaway_stop_distance_, other->rightaway_stop_distance_);
  swap(stop_distance_to_target_, other->stop_distance_to_target_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpenSpacePreStopDeciderConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OpenSpaceRoiDeciderConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenSpaceRoiDeciderConfig::kRoiTypeFieldNumber;
const int OpenSpaceRoiDeciderConfig::kRoiLongitudinalRangeStartFieldNumber;
const int OpenSpaceRoiDeciderConfig::kRoiLongitudinalRangeEndFieldNumber;
const int OpenSpaceRoiDeciderConfig::kParkingStartRangeFieldNumber;
const int OpenSpaceRoiDeciderConfig::kParkingInwardsFieldNumber;
const int OpenSpaceRoiDeciderConfig::kEnablePerceptionObstaclesFieldNumber;
const int OpenSpaceRoiDeciderConfig::kParkingDepthBufferFieldNumber;
const int OpenSpaceRoiDeciderConfig::kRoiLineSegmentMinAngleFieldNumber;
const int OpenSpaceRoiDeciderConfig::kRoiLineSegmentLengthFieldNumber;
const int OpenSpaceRoiDeciderConfig::kRoiLineSegmentLengthFromMapFieldNumber;
const int OpenSpaceRoiDeciderConfig::kPerceptionObstacleFilteringDistanceFieldNumber;
const int OpenSpaceRoiDeciderConfig::kPerceptionObstacleBufferFieldNumber;
const int OpenSpaceRoiDeciderConfig::kCurbHeadingTangentChangeUpperLimitFieldNumber;
const int OpenSpaceRoiDeciderConfig::kEndPoseSDistanceFieldNumber;
const int OpenSpaceRoiDeciderConfig::kParallelParkEndXBufferFieldNumber;
const int OpenSpaceRoiDeciderConfig::kExtendRightXBufferFieldNumber;
const int OpenSpaceRoiDeciderConfig::kExtendLeftXBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenSpaceRoiDeciderConfig::OpenSpaceRoiDeciderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_OpenSpaceRoiDeciderConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.OpenSpaceRoiDeciderConfig)
}
OpenSpaceRoiDeciderConfig::OpenSpaceRoiDeciderConfig(const OpenSpaceRoiDeciderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roi_type_, &from.roi_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&parallel_park_end_x_buffer_) -
    reinterpret_cast<char*>(&roi_type_)) + sizeof(parallel_park_end_x_buffer_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OpenSpaceRoiDeciderConfig)
}

void OpenSpaceRoiDeciderConfig::SharedCtor() {
  ::memset(&roi_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extend_left_x_buffer_) -
      reinterpret_cast<char*>(&roi_type_)) + sizeof(extend_left_x_buffer_));
  roi_longitudinal_range_start_ = 10;
  roi_longitudinal_range_end_ = 10;
  parking_start_range_ = 7;
  parking_depth_buffer_ = 0.1;
  roi_line_segment_min_angle_ = 0.3;
  roi_line_segment_length_ = 1;
  roi_line_segment_length_from_map_ = 10;
  perception_obstacle_filtering_distance_ = 1000;
  curb_heading_tangent_change_upper_limit_ = 1;
  end_pose_s_distance_ = 10;
  parallel_park_end_x_buffer_ = 0.2;
}

OpenSpaceRoiDeciderConfig::~OpenSpaceRoiDeciderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.OpenSpaceRoiDeciderConfig)
  SharedDtor();
}

void OpenSpaceRoiDeciderConfig::SharedDtor() {
}

void OpenSpaceRoiDeciderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpenSpaceRoiDeciderConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenSpaceRoiDeciderConfig& OpenSpaceRoiDeciderConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_OpenSpaceRoiDeciderConfig.base);
  return *internal_default_instance();
}


void OpenSpaceRoiDeciderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&roi_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&extend_left_x_buffer_) -
        reinterpret_cast<char*>(&roi_type_)) + sizeof(extend_left_x_buffer_));
    roi_longitudinal_range_start_ = 10;
    roi_longitudinal_range_end_ = 10;
  }
  if (cached_has_bits & 65280u) {
    parking_start_range_ = 7;
    parking_depth_buffer_ = 0.1;
    roi_line_segment_min_angle_ = 0.3;
    roi_line_segment_length_ = 1;
    roi_line_segment_length_from_map_ = 10;
    perception_obstacle_filtering_distance_ = 1000;
    curb_heading_tangent_change_upper_limit_ = 1;
    end_pose_s_distance_ = 10;
  }
  parallel_park_end_x_buffer_ = 0.2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OpenSpaceRoiDeciderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.OpenSpaceRoiDeciderConfig.RoiType roi_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType_IsValid(value)) {
            set_roi_type(static_cast< ::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double roi_longitudinal_range_start = 2 [default = 10];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_roi_longitudinal_range_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roi_longitudinal_range_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double roi_longitudinal_range_end = 3 [default = 10];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_roi_longitudinal_range_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roi_longitudinal_range_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double parking_start_range = 4 [default = 7];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_parking_start_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &parking_start_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool parking_inwards = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_parking_inwards();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parking_inwards_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_perception_obstacles = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_enable_perception_obstacles();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_perception_obstacles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double parking_depth_buffer = 7 [default = 0.1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_parking_depth_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &parking_depth_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double roi_line_segment_min_angle = 8 [default = 0.3];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_roi_line_segment_min_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roi_line_segment_min_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double roi_line_segment_length = 9 [default = 1];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_roi_line_segment_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roi_line_segment_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double roi_line_segment_length_from_map = 10 [default = 10];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_roi_line_segment_length_from_map();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roi_line_segment_length_from_map_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double perception_obstacle_filtering_distance = 11 [default = 1000];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_perception_obstacle_filtering_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &perception_obstacle_filtering_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double perception_obstacle_buffer = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_perception_obstacle_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &perception_obstacle_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double curb_heading_tangent_change_upper_limit = 13 [default = 1];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_curb_heading_tangent_change_upper_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curb_heading_tangent_change_upper_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double end_pose_s_distance = 14 [default = 10];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_end_pose_s_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_pose_s_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double parallel_park_end_x_buffer = 15 [default = 0.2];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_parallel_park_end_x_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &parallel_park_end_x_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double extend_right_x_buffer = 16 [default = 0];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_extend_right_x_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &extend_right_x_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double extend_left_x_buffer = 17 [default = 0];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_extend_left_x_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &extend_left_x_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.OpenSpaceRoiDeciderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.OpenSpaceRoiDeciderConfig)
  return false;
#undef DO_
}

void OpenSpaceRoiDeciderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.OpenSpaceRoiDeciderConfig.RoiType roi_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->roi_type(), output);
  }

  // optional double roi_longitudinal_range_start = 2 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->roi_longitudinal_range_start(), output);
  }

  // optional double roi_longitudinal_range_end = 3 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->roi_longitudinal_range_end(), output);
  }

  // optional double parking_start_range = 4 [default = 7];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->parking_start_range(), output);
  }

  // optional bool parking_inwards = 5 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->parking_inwards(), output);
  }

  // optional bool enable_perception_obstacles = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->enable_perception_obstacles(), output);
  }

  // optional double parking_depth_buffer = 7 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->parking_depth_buffer(), output);
  }

  // optional double roi_line_segment_min_angle = 8 [default = 0.3];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->roi_line_segment_min_angle(), output);
  }

  // optional double roi_line_segment_length = 9 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->roi_line_segment_length(), output);
  }

  // optional double roi_line_segment_length_from_map = 10 [default = 10];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->roi_line_segment_length_from_map(), output);
  }

  // optional double perception_obstacle_filtering_distance = 11 [default = 1000];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->perception_obstacle_filtering_distance(), output);
  }

  // optional double perception_obstacle_buffer = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->perception_obstacle_buffer(), output);
  }

  // optional double curb_heading_tangent_change_upper_limit = 13 [default = 1];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->curb_heading_tangent_change_upper_limit(), output);
  }

  // optional double end_pose_s_distance = 14 [default = 10];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->end_pose_s_distance(), output);
  }

  // optional double parallel_park_end_x_buffer = 15 [default = 0.2];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->parallel_park_end_x_buffer(), output);
  }

  // optional double extend_right_x_buffer = 16 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->extend_right_x_buffer(), output);
  }

  // optional double extend_left_x_buffer = 17 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->extend_left_x_buffer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.OpenSpaceRoiDeciderConfig)
}

::google::protobuf::uint8* OpenSpaceRoiDeciderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.OpenSpaceRoiDeciderConfig.RoiType roi_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->roi_type(), target);
  }

  // optional double roi_longitudinal_range_start = 2 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->roi_longitudinal_range_start(), target);
  }

  // optional double roi_longitudinal_range_end = 3 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->roi_longitudinal_range_end(), target);
  }

  // optional double parking_start_range = 4 [default = 7];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->parking_start_range(), target);
  }

  // optional bool parking_inwards = 5 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->parking_inwards(), target);
  }

  // optional bool enable_perception_obstacles = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->enable_perception_obstacles(), target);
  }

  // optional double parking_depth_buffer = 7 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->parking_depth_buffer(), target);
  }

  // optional double roi_line_segment_min_angle = 8 [default = 0.3];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->roi_line_segment_min_angle(), target);
  }

  // optional double roi_line_segment_length = 9 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->roi_line_segment_length(), target);
  }

  // optional double roi_line_segment_length_from_map = 10 [default = 10];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->roi_line_segment_length_from_map(), target);
  }

  // optional double perception_obstacle_filtering_distance = 11 [default = 1000];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->perception_obstacle_filtering_distance(), target);
  }

  // optional double perception_obstacle_buffer = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->perception_obstacle_buffer(), target);
  }

  // optional double curb_heading_tangent_change_upper_limit = 13 [default = 1];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->curb_heading_tangent_change_upper_limit(), target);
  }

  // optional double end_pose_s_distance = 14 [default = 10];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->end_pose_s_distance(), target);
  }

  // optional double parallel_park_end_x_buffer = 15 [default = 0.2];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->parallel_park_end_x_buffer(), target);
  }

  // optional double extend_right_x_buffer = 16 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->extend_right_x_buffer(), target);
  }

  // optional double extend_left_x_buffer = 17 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->extend_left_x_buffer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OpenSpaceRoiDeciderConfig)
  return target;
}

size_t OpenSpaceRoiDeciderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.planning.OpenSpaceRoiDeciderConfig.RoiType roi_type = 1;
    if (has_roi_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roi_type());
    }

    // optional bool parking_inwards = 5 [default = false];
    if (has_parking_inwards()) {
      total_size += 1 + 1;
    }

    // optional bool enable_perception_obstacles = 6;
    if (has_enable_perception_obstacles()) {
      total_size += 1 + 1;
    }

    // optional double perception_obstacle_buffer = 12;
    if (has_perception_obstacle_buffer()) {
      total_size += 1 + 8;
    }

    // optional double extend_right_x_buffer = 16 [default = 0];
    if (has_extend_right_x_buffer()) {
      total_size += 2 + 8;
    }

    // optional double extend_left_x_buffer = 17 [default = 0];
    if (has_extend_left_x_buffer()) {
      total_size += 2 + 8;
    }

    // optional double roi_longitudinal_range_start = 2 [default = 10];
    if (has_roi_longitudinal_range_start()) {
      total_size += 1 + 8;
    }

    // optional double roi_longitudinal_range_end = 3 [default = 10];
    if (has_roi_longitudinal_range_end()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double parking_start_range = 4 [default = 7];
    if (has_parking_start_range()) {
      total_size += 1 + 8;
    }

    // optional double parking_depth_buffer = 7 [default = 0.1];
    if (has_parking_depth_buffer()) {
      total_size += 1 + 8;
    }

    // optional double roi_line_segment_min_angle = 8 [default = 0.3];
    if (has_roi_line_segment_min_angle()) {
      total_size += 1 + 8;
    }

    // optional double roi_line_segment_length = 9 [default = 1];
    if (has_roi_line_segment_length()) {
      total_size += 1 + 8;
    }

    // optional double roi_line_segment_length_from_map = 10 [default = 10];
    if (has_roi_line_segment_length_from_map()) {
      total_size += 1 + 8;
    }

    // optional double perception_obstacle_filtering_distance = 11 [default = 1000];
    if (has_perception_obstacle_filtering_distance()) {
      total_size += 1 + 8;
    }

    // optional double curb_heading_tangent_change_upper_limit = 13 [default = 1];
    if (has_curb_heading_tangent_change_upper_limit()) {
      total_size += 1 + 8;
    }

    // optional double end_pose_s_distance = 14 [default = 10];
    if (has_end_pose_s_distance()) {
      total_size += 1 + 8;
    }

  }
  // optional double parallel_park_end_x_buffer = 15 [default = 0.2];
  if (has_parallel_park_end_x_buffer()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenSpaceRoiDeciderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenSpaceRoiDeciderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenSpaceRoiDeciderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.OpenSpaceRoiDeciderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.OpenSpaceRoiDeciderConfig)
    MergeFrom(*source);
  }
}

void OpenSpaceRoiDeciderConfig::MergeFrom(const OpenSpaceRoiDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      roi_type_ = from.roi_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      parking_inwards_ = from.parking_inwards_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_perception_obstacles_ = from.enable_perception_obstacles_;
    }
    if (cached_has_bits & 0x00000008u) {
      perception_obstacle_buffer_ = from.perception_obstacle_buffer_;
    }
    if (cached_has_bits & 0x00000010u) {
      extend_right_x_buffer_ = from.extend_right_x_buffer_;
    }
    if (cached_has_bits & 0x00000020u) {
      extend_left_x_buffer_ = from.extend_left_x_buffer_;
    }
    if (cached_has_bits & 0x00000040u) {
      roi_longitudinal_range_start_ = from.roi_longitudinal_range_start_;
    }
    if (cached_has_bits & 0x00000080u) {
      roi_longitudinal_range_end_ = from.roi_longitudinal_range_end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      parking_start_range_ = from.parking_start_range_;
    }
    if (cached_has_bits & 0x00000200u) {
      parking_depth_buffer_ = from.parking_depth_buffer_;
    }
    if (cached_has_bits & 0x00000400u) {
      roi_line_segment_min_angle_ = from.roi_line_segment_min_angle_;
    }
    if (cached_has_bits & 0x00000800u) {
      roi_line_segment_length_ = from.roi_line_segment_length_;
    }
    if (cached_has_bits & 0x00001000u) {
      roi_line_segment_length_from_map_ = from.roi_line_segment_length_from_map_;
    }
    if (cached_has_bits & 0x00002000u) {
      perception_obstacle_filtering_distance_ = from.perception_obstacle_filtering_distance_;
    }
    if (cached_has_bits & 0x00004000u) {
      curb_heading_tangent_change_upper_limit_ = from.curb_heading_tangent_change_upper_limit_;
    }
    if (cached_has_bits & 0x00008000u) {
      end_pose_s_distance_ = from.end_pose_s_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_parallel_park_end_x_buffer(from.parallel_park_end_x_buffer());
  }
}

void OpenSpaceRoiDeciderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSpaceRoiDeciderConfig::CopyFrom(const OpenSpaceRoiDeciderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OpenSpaceRoiDeciderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpaceRoiDeciderConfig::IsInitialized() const {
  return true;
}

void OpenSpaceRoiDeciderConfig::Swap(OpenSpaceRoiDeciderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenSpaceRoiDeciderConfig::InternalSwap(OpenSpaceRoiDeciderConfig* other) {
  using std::swap;
  swap(roi_type_, other->roi_type_);
  swap(parking_inwards_, other->parking_inwards_);
  swap(enable_perception_obstacles_, other->enable_perception_obstacles_);
  swap(perception_obstacle_buffer_, other->perception_obstacle_buffer_);
  swap(extend_right_x_buffer_, other->extend_right_x_buffer_);
  swap(extend_left_x_buffer_, other->extend_left_x_buffer_);
  swap(roi_longitudinal_range_start_, other->roi_longitudinal_range_start_);
  swap(roi_longitudinal_range_end_, other->roi_longitudinal_range_end_);
  swap(parking_start_range_, other->parking_start_range_);
  swap(parking_depth_buffer_, other->parking_depth_buffer_);
  swap(roi_line_segment_min_angle_, other->roi_line_segment_min_angle_);
  swap(roi_line_segment_length_, other->roi_line_segment_length_);
  swap(roi_line_segment_length_from_map_, other->roi_line_segment_length_from_map_);
  swap(perception_obstacle_filtering_distance_, other->perception_obstacle_filtering_distance_);
  swap(curb_heading_tangent_change_upper_limit_, other->curb_heading_tangent_change_upper_limit_);
  swap(end_pose_s_distance_, other->end_pose_s_distance_);
  swap(parallel_park_end_x_buffer_, other->parallel_park_end_x_buffer_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpenSpaceRoiDeciderConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OpenSpaceTrajectoryPartitionConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenSpaceTrajectoryPartitionConfig::kGearShiftMaxTFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kGearShiftUnitTFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kGearShiftPeriodDurationFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kInterpolatedPiecesNumFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kInitialGearCheckHorizonFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kHeadingSearchRangeFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kHeadingTrackRangeFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kDistanceSearchRangeFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kHeadingOffsetToMidpointFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kLateralOffsetToMidpointFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kLongitudinalOffsetToMidpointFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kVehicleBoxIouThresholdToMidpointFieldNumber;
const int OpenSpaceTrajectoryPartitionConfig::kLinearVelocityThresholdOnEgoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenSpaceTrajectoryPartitionConfig::OpenSpaceTrajectoryPartitionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_OpenSpaceTrajectoryPartitionConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
}
OpenSpaceTrajectoryPartitionConfig::OpenSpaceTrajectoryPartitionConfig(const OpenSpaceTrajectoryPartitionConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gear_shift_max_t_, &from.gear_shift_max_t_,
    static_cast<size_t>(reinterpret_cast<char*>(&linear_velocity_threshold_on_ego_) -
    reinterpret_cast<char*>(&gear_shift_max_t_)) + sizeof(linear_velocity_threshold_on_ego_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
}

void OpenSpaceTrajectoryPartitionConfig::SharedCtor() {
  ::memset(&gear_shift_max_t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_offset_to_midpoint_) -
      reinterpret_cast<char*>(&gear_shift_max_t_)) + sizeof(heading_offset_to_midpoint_));
  distance_search_range_ = 1e-06;
  lateral_offset_to_midpoint_ = 0.1;
  longitudinal_offset_to_midpoint_ = 0.1;
  vehicle_box_iou_threshold_to_midpoint_ = 0.95;
  linear_velocity_threshold_on_ego_ = 0.2;
}

OpenSpaceTrajectoryPartitionConfig::~OpenSpaceTrajectoryPartitionConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  SharedDtor();
}

void OpenSpaceTrajectoryPartitionConfig::SharedDtor() {
}

void OpenSpaceTrajectoryPartitionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpenSpaceTrajectoryPartitionConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenSpaceTrajectoryPartitionConfig& OpenSpaceTrajectoryPartitionConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_OpenSpaceTrajectoryPartitionConfig.base);
  return *internal_default_instance();
}


void OpenSpaceTrajectoryPartitionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&gear_shift_max_t_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_offset_to_midpoint_) -
        reinterpret_cast<char*>(&gear_shift_max_t_)) + sizeof(heading_offset_to_midpoint_));
  }
  if (cached_has_bits & 7936u) {
    distance_search_range_ = 1e-06;
    lateral_offset_to_midpoint_ = 0.1;
    longitudinal_offset_to_midpoint_ = 0.1;
    vehicle_box_iou_threshold_to_midpoint_ = 0.95;
    linear_velocity_threshold_on_ego_ = 0.2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OpenSpaceTrajectoryPartitionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double gear_shift_max_t = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_gear_shift_max_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gear_shift_max_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gear_shift_unit_t = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_gear_shift_unit_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gear_shift_unit_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gear_shift_period_duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_gear_shift_period_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gear_shift_period_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 interpolated_pieces_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_interpolated_pieces_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &interpolated_pieces_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 initial_gear_check_horizon = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_initial_gear_check_horizon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &initial_gear_check_horizon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading_search_range = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_heading_search_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_search_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading_track_range = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_heading_track_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_track_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance_search_range = 8 [default = 1e-06];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_distance_search_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_search_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading_offset_to_midpoint = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_heading_offset_to_midpoint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_offset_to_midpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_offset_to_midpoint = 10 [default = 0.1];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_lateral_offset_to_midpoint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_offset_to_midpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_longitudinal_offset_to_midpoint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitudinal_offset_to_midpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_vehicle_box_iou_threshold_to_midpoint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_box_iou_threshold_to_midpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double linear_velocity_threshold_on_ego = 13 [default = 0.2];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_linear_velocity_threshold_on_ego();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &linear_velocity_threshold_on_ego_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  return false;
#undef DO_
}

void OpenSpaceTrajectoryPartitionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double gear_shift_max_t = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->gear_shift_max_t(), output);
  }

  // optional double gear_shift_unit_t = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->gear_shift_unit_t(), output);
  }

  // optional double gear_shift_period_duration = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->gear_shift_period_duration(), output);
  }

  // optional uint64 interpolated_pieces_num = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->interpolated_pieces_num(), output);
  }

  // optional uint64 initial_gear_check_horizon = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->initial_gear_check_horizon(), output);
  }

  // optional double heading_search_range = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->heading_search_range(), output);
  }

  // optional double heading_track_range = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->heading_track_range(), output);
  }

  // optional double distance_search_range = 8 [default = 1e-06];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->distance_search_range(), output);
  }

  // optional double heading_offset_to_midpoint = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->heading_offset_to_midpoint(), output);
  }

  // optional double lateral_offset_to_midpoint = 10 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->lateral_offset_to_midpoint(), output);
  }

  // optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->longitudinal_offset_to_midpoint(), output);
  }

  // optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->vehicle_box_iou_threshold_to_midpoint(), output);
  }

  // optional double linear_velocity_threshold_on_ego = 13 [default = 0.2];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->linear_velocity_threshold_on_ego(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
}

::google::protobuf::uint8* OpenSpaceTrajectoryPartitionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double gear_shift_max_t = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->gear_shift_max_t(), target);
  }

  // optional double gear_shift_unit_t = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->gear_shift_unit_t(), target);
  }

  // optional double gear_shift_period_duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->gear_shift_period_duration(), target);
  }

  // optional uint64 interpolated_pieces_num = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->interpolated_pieces_num(), target);
  }

  // optional uint64 initial_gear_check_horizon = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->initial_gear_check_horizon(), target);
  }

  // optional double heading_search_range = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->heading_search_range(), target);
  }

  // optional double heading_track_range = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->heading_track_range(), target);
  }

  // optional double distance_search_range = 8 [default = 1e-06];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->distance_search_range(), target);
  }

  // optional double heading_offset_to_midpoint = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->heading_offset_to_midpoint(), target);
  }

  // optional double lateral_offset_to_midpoint = 10 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->lateral_offset_to_midpoint(), target);
  }

  // optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->longitudinal_offset_to_midpoint(), target);
  }

  // optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->vehicle_box_iou_threshold_to_midpoint(), target);
  }

  // optional double linear_velocity_threshold_on_ego = 13 [default = 0.2];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->linear_velocity_threshold_on_ego(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  return target;
}

size_t OpenSpaceTrajectoryPartitionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double gear_shift_max_t = 1;
    if (has_gear_shift_max_t()) {
      total_size += 1 + 8;
    }

    // optional double gear_shift_unit_t = 2;
    if (has_gear_shift_unit_t()) {
      total_size += 1 + 8;
    }

    // optional double gear_shift_period_duration = 3;
    if (has_gear_shift_period_duration()) {
      total_size += 1 + 8;
    }

    // optional uint64 interpolated_pieces_num = 4;
    if (has_interpolated_pieces_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->interpolated_pieces_num());
    }

    // optional uint64 initial_gear_check_horizon = 5;
    if (has_initial_gear_check_horizon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->initial_gear_check_horizon());
    }

    // optional double heading_search_range = 6;
    if (has_heading_search_range()) {
      total_size += 1 + 8;
    }

    // optional double heading_track_range = 7;
    if (has_heading_track_range()) {
      total_size += 1 + 8;
    }

    // optional double heading_offset_to_midpoint = 9;
    if (has_heading_offset_to_midpoint()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional double distance_search_range = 8 [default = 1e-06];
    if (has_distance_search_range()) {
      total_size += 1 + 8;
    }

    // optional double lateral_offset_to_midpoint = 10 [default = 0.1];
    if (has_lateral_offset_to_midpoint()) {
      total_size += 1 + 8;
    }

    // optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
    if (has_longitudinal_offset_to_midpoint()) {
      total_size += 1 + 8;
    }

    // optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
    if (has_vehicle_box_iou_threshold_to_midpoint()) {
      total_size += 1 + 8;
    }

    // optional double linear_velocity_threshold_on_ego = 13 [default = 0.2];
    if (has_linear_velocity_threshold_on_ego()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenSpaceTrajectoryPartitionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenSpaceTrajectoryPartitionConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenSpaceTrajectoryPartitionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
    MergeFrom(*source);
  }
}

void OpenSpaceTrajectoryPartitionConfig::MergeFrom(const OpenSpaceTrajectoryPartitionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      gear_shift_max_t_ = from.gear_shift_max_t_;
    }
    if (cached_has_bits & 0x00000002u) {
      gear_shift_unit_t_ = from.gear_shift_unit_t_;
    }
    if (cached_has_bits & 0x00000004u) {
      gear_shift_period_duration_ = from.gear_shift_period_duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      interpolated_pieces_num_ = from.interpolated_pieces_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      initial_gear_check_horizon_ = from.initial_gear_check_horizon_;
    }
    if (cached_has_bits & 0x00000020u) {
      heading_search_range_ = from.heading_search_range_;
    }
    if (cached_has_bits & 0x00000040u) {
      heading_track_range_ = from.heading_track_range_;
    }
    if (cached_has_bits & 0x00000080u) {
      heading_offset_to_midpoint_ = from.heading_offset_to_midpoint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      distance_search_range_ = from.distance_search_range_;
    }
    if (cached_has_bits & 0x00000200u) {
      lateral_offset_to_midpoint_ = from.lateral_offset_to_midpoint_;
    }
    if (cached_has_bits & 0x00000400u) {
      longitudinal_offset_to_midpoint_ = from.longitudinal_offset_to_midpoint_;
    }
    if (cached_has_bits & 0x00000800u) {
      vehicle_box_iou_threshold_to_midpoint_ = from.vehicle_box_iou_threshold_to_midpoint_;
    }
    if (cached_has_bits & 0x00001000u) {
      linear_velocity_threshold_on_ego_ = from.linear_velocity_threshold_on_ego_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpenSpaceTrajectoryPartitionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSpaceTrajectoryPartitionConfig::CopyFrom(const OpenSpaceTrajectoryPartitionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpaceTrajectoryPartitionConfig::IsInitialized() const {
  return true;
}

void OpenSpaceTrajectoryPartitionConfig::Swap(OpenSpaceTrajectoryPartitionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenSpaceTrajectoryPartitionConfig::InternalSwap(OpenSpaceTrajectoryPartitionConfig* other) {
  using std::swap;
  swap(gear_shift_max_t_, other->gear_shift_max_t_);
  swap(gear_shift_unit_t_, other->gear_shift_unit_t_);
  swap(gear_shift_period_duration_, other->gear_shift_period_duration_);
  swap(interpolated_pieces_num_, other->interpolated_pieces_num_);
  swap(initial_gear_check_horizon_, other->initial_gear_check_horizon_);
  swap(heading_search_range_, other->heading_search_range_);
  swap(heading_track_range_, other->heading_track_range_);
  swap(heading_offset_to_midpoint_, other->heading_offset_to_midpoint_);
  swap(distance_search_range_, other->distance_search_range_);
  swap(lateral_offset_to_midpoint_, other->lateral_offset_to_midpoint_);
  swap(longitudinal_offset_to_midpoint_, other->longitudinal_offset_to_midpoint_);
  swap(vehicle_box_iou_threshold_to_midpoint_, other->vehicle_box_iou_threshold_to_midpoint_);
  swap(linear_velocity_threshold_on_ego_, other->linear_velocity_threshold_on_ego_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpenSpaceTrajectoryPartitionConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OpenSpaceTrajectoryProviderConfig::InitAsDefaultInstance() {
  ::apollo::planning::_OpenSpaceTrajectoryProviderConfig_default_instance_._instance.get_mutable()->open_space_trajectory_optimizer_config_ = const_cast< ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig*>(
      ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenSpaceTrajectoryProviderConfig::kOpenSpaceTrajectoryOptimizerConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenSpaceTrajectoryProviderConfig::OpenSpaceTrajectoryProviderConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_OpenSpaceTrajectoryProviderConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.OpenSpaceTrajectoryProviderConfig)
}
OpenSpaceTrajectoryProviderConfig::OpenSpaceTrajectoryProviderConfig(const OpenSpaceTrajectoryProviderConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_open_space_trajectory_optimizer_config()) {
    open_space_trajectory_optimizer_config_ = new ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig(*from.open_space_trajectory_optimizer_config_);
  } else {
    open_space_trajectory_optimizer_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OpenSpaceTrajectoryProviderConfig)
}

void OpenSpaceTrajectoryProviderConfig::SharedCtor() {
  open_space_trajectory_optimizer_config_ = NULL;
}

OpenSpaceTrajectoryProviderConfig::~OpenSpaceTrajectoryProviderConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  SharedDtor();
}

void OpenSpaceTrajectoryProviderConfig::SharedDtor() {
  if (this != internal_default_instance()) delete open_space_trajectory_optimizer_config_;
}

void OpenSpaceTrajectoryProviderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpenSpaceTrajectoryProviderConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenSpaceTrajectoryProviderConfig& OpenSpaceTrajectoryProviderConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_OpenSpaceTrajectoryProviderConfig.base);
  return *internal_default_instance();
}


void OpenSpaceTrajectoryProviderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(open_space_trajectory_optimizer_config_ != NULL);
    open_space_trajectory_optimizer_config_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OpenSpaceTrajectoryProviderConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_open_space_trajectory_optimizer_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  return false;
#undef DO_
}

void OpenSpaceTrajectoryProviderConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_open_space_trajectory_optimizer_config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.OpenSpaceTrajectoryProviderConfig)
}

::google::protobuf::uint8* OpenSpaceTrajectoryProviderConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_open_space_trajectory_optimizer_config(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  return target;
}

size_t OpenSpaceTrajectoryProviderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .apollo.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
  if (has_open_space_trajectory_optimizer_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *open_space_trajectory_optimizer_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenSpaceTrajectoryProviderConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenSpaceTrajectoryProviderConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenSpaceTrajectoryProviderConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.OpenSpaceTrajectoryProviderConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.OpenSpaceTrajectoryProviderConfig)
    MergeFrom(*source);
  }
}

void OpenSpaceTrajectoryProviderConfig::MergeFrom(const OpenSpaceTrajectoryProviderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_open_space_trajectory_optimizer_config()) {
    mutable_open_space_trajectory_optimizer_config()->::apollo::planning::OpenSpaceTrajectoryOptimizerConfig::MergeFrom(from.open_space_trajectory_optimizer_config());
  }
}

void OpenSpaceTrajectoryProviderConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSpaceTrajectoryProviderConfig::CopyFrom(const OpenSpaceTrajectoryProviderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OpenSpaceTrajectoryProviderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpaceTrajectoryProviderConfig::IsInitialized() const {
  return true;
}

void OpenSpaceTrajectoryProviderConfig::Swap(OpenSpaceTrajectoryProviderConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenSpaceTrajectoryProviderConfig::InternalSwap(OpenSpaceTrajectoryProviderConfig* other) {
  using std::swap;
  swap(open_space_trajectory_optimizer_config_, other->open_space_trajectory_optimizer_config_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpenSpaceTrajectoryProviderConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OpenSpaceTrajectoryOptimizerConfig::InitAsDefaultInstance() {
  ::apollo::planning::_OpenSpaceTrajectoryOptimizerConfig_default_instance_._instance.get_mutable()->hybrid_a_star_config_ = const_cast< ::apollo::planning::HybridAStarConfig*>(
      ::apollo::planning::HybridAStarConfig::internal_default_instance());
  ::apollo::planning::_OpenSpaceTrajectoryOptimizerConfig_default_instance_._instance.get_mutable()->dual_variable_warm_start_config_ = const_cast< ::apollo::planning::DualVariableConfig*>(
      ::apollo::planning::DualVariableConfig::internal_default_instance());
  ::apollo::planning::_OpenSpaceTrajectoryOptimizerConfig_default_instance_._instance.get_mutable()->distance_approach_trajectory_smoother_config_ = const_cast< ::apollo::planning::DistanceApproachTrajectorySmootherConfig*>(
      ::apollo::planning::DistanceApproachTrajectorySmootherConfig::internal_default_instance());
  ::apollo::planning::_OpenSpaceTrajectoryOptimizerConfig_default_instance_._instance.get_mutable()->planner_open_space_config_ = const_cast< ::apollo::planning::PlannerOpenSpaceConfig*>(
      ::apollo::planning::PlannerOpenSpaceConfig::internal_default_instance());
}
void OpenSpaceTrajectoryOptimizerConfig::clear_planner_open_space_config() {
  if (planner_open_space_config_ != NULL) planner_open_space_config_->Clear();
  clear_has_planner_open_space_config();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenSpaceTrajectoryOptimizerConfig::kHybridAStarConfigFieldNumber;
const int OpenSpaceTrajectoryOptimizerConfig::kDualVariableWarmStartConfigFieldNumber;
const int OpenSpaceTrajectoryOptimizerConfig::kDistanceApproachTrajectorySmootherConfigFieldNumber;
const int OpenSpaceTrajectoryOptimizerConfig::kDeltaTFieldNumber;
const int OpenSpaceTrajectoryOptimizerConfig::kIsNearDestinationThresholdFieldNumber;
const int OpenSpaceTrajectoryOptimizerConfig::kPlannerOpenSpaceConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenSpaceTrajectoryOptimizerConfig::OpenSpaceTrajectoryOptimizerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_OpenSpaceTrajectoryOptimizerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
}
OpenSpaceTrajectoryOptimizerConfig::OpenSpaceTrajectoryOptimizerConfig(const OpenSpaceTrajectoryOptimizerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hybrid_a_star_config()) {
    hybrid_a_star_config_ = new ::apollo::planning::HybridAStarConfig(*from.hybrid_a_star_config_);
  } else {
    hybrid_a_star_config_ = NULL;
  }
  if (from.has_dual_variable_warm_start_config()) {
    dual_variable_warm_start_config_ = new ::apollo::planning::DualVariableConfig(*from.dual_variable_warm_start_config_);
  } else {
    dual_variable_warm_start_config_ = NULL;
  }
  if (from.has_distance_approach_trajectory_smoother_config()) {
    distance_approach_trajectory_smoother_config_ = new ::apollo::planning::DistanceApproachTrajectorySmootherConfig(*from.distance_approach_trajectory_smoother_config_);
  } else {
    distance_approach_trajectory_smoother_config_ = NULL;
  }
  if (from.has_planner_open_space_config()) {
    planner_open_space_config_ = new ::apollo::planning::PlannerOpenSpaceConfig(*from.planner_open_space_config_);
  } else {
    planner_open_space_config_ = NULL;
  }
  ::memcpy(&delta_t_, &from.delta_t_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_near_destination_threshold_) -
    reinterpret_cast<char*>(&delta_t_)) + sizeof(is_near_destination_threshold_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
}

void OpenSpaceTrajectoryOptimizerConfig::SharedCtor() {
  ::memset(&hybrid_a_star_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&planner_open_space_config_) -
      reinterpret_cast<char*>(&hybrid_a_star_config_)) + sizeof(planner_open_space_config_));
  delta_t_ = 0.5f;
  is_near_destination_threshold_ = 0.001;
}

OpenSpaceTrajectoryOptimizerConfig::~OpenSpaceTrajectoryOptimizerConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  SharedDtor();
}

void OpenSpaceTrajectoryOptimizerConfig::SharedDtor() {
  if (this != internal_default_instance()) delete hybrid_a_star_config_;
  if (this != internal_default_instance()) delete dual_variable_warm_start_config_;
  if (this != internal_default_instance()) delete distance_approach_trajectory_smoother_config_;
  if (this != internal_default_instance()) delete planner_open_space_config_;
}

void OpenSpaceTrajectoryOptimizerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpenSpaceTrajectoryOptimizerConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenSpaceTrajectoryOptimizerConfig& OpenSpaceTrajectoryOptimizerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_OpenSpaceTrajectoryOptimizerConfig.base);
  return *internal_default_instance();
}


void OpenSpaceTrajectoryOptimizerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(hybrid_a_star_config_ != NULL);
      hybrid_a_star_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dual_variable_warm_start_config_ != NULL);
      dual_variable_warm_start_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(distance_approach_trajectory_smoother_config_ != NULL);
      distance_approach_trajectory_smoother_config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(planner_open_space_config_ != NULL);
      planner_open_space_config_->Clear();
    }
    delta_t_ = 0.5f;
    is_near_destination_threshold_ = 0.001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OpenSpaceTrajectoryOptimizerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.HybridAStarConfig hybrid_a_star_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hybrid_a_star_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.DualVariableConfig dual_variable_warm_start_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dual_variable_warm_start_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_distance_approach_trajectory_smoother_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float delta_t = 4 [default = 0.5];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_delta_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double is_near_destination_threshold = 5 [default = 0.001];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_is_near_destination_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &is_near_destination_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_planner_open_space_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  return false;
#undef DO_
}

void OpenSpaceTrajectoryOptimizerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.HybridAStarConfig hybrid_a_star_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_hybrid_a_star_config(), output);
  }

  // optional .apollo.planning.DualVariableConfig dual_variable_warm_start_config = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_dual_variable_warm_start_config(), output);
  }

  // optional .apollo.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_distance_approach_trajectory_smoother_config(), output);
  }

  // optional float delta_t = 4 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->delta_t(), output);
  }

  // optional double is_near_destination_threshold = 5 [default = 0.001];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->is_near_destination_threshold(), output);
  }

  // optional .apollo.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_planner_open_space_config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
}

::google::protobuf::uint8* OpenSpaceTrajectoryOptimizerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.HybridAStarConfig hybrid_a_star_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_hybrid_a_star_config(), deterministic, target);
  }

  // optional .apollo.planning.DualVariableConfig dual_variable_warm_start_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_dual_variable_warm_start_config(), deterministic, target);
  }

  // optional .apollo.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_distance_approach_trajectory_smoother_config(), deterministic, target);
  }

  // optional float delta_t = 4 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->delta_t(), target);
  }

  // optional double is_near_destination_threshold = 5 [default = 0.001];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->is_near_destination_threshold(), target);
  }

  // optional .apollo.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_planner_open_space_config(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  return target;
}

size_t OpenSpaceTrajectoryOptimizerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .apollo.planning.HybridAStarConfig hybrid_a_star_config = 1;
    if (has_hybrid_a_star_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *hybrid_a_star_config_);
    }

    // optional .apollo.planning.DualVariableConfig dual_variable_warm_start_config = 2;
    if (has_dual_variable_warm_start_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dual_variable_warm_start_config_);
    }

    // optional .apollo.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
    if (has_distance_approach_trajectory_smoother_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *distance_approach_trajectory_smoother_config_);
    }

    // optional .apollo.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
    if (has_planner_open_space_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *planner_open_space_config_);
    }

    // optional float delta_t = 4 [default = 0.5];
    if (has_delta_t()) {
      total_size += 1 + 4;
    }

    // optional double is_near_destination_threshold = 5 [default = 0.001];
    if (has_is_near_destination_threshold()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenSpaceTrajectoryOptimizerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenSpaceTrajectoryOptimizerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenSpaceTrajectoryOptimizerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
    MergeFrom(*source);
  }
}

void OpenSpaceTrajectoryOptimizerConfig::MergeFrom(const OpenSpaceTrajectoryOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_hybrid_a_star_config()->::apollo::planning::HybridAStarConfig::MergeFrom(from.hybrid_a_star_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dual_variable_warm_start_config()->::apollo::planning::DualVariableConfig::MergeFrom(from.dual_variable_warm_start_config());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_distance_approach_trajectory_smoother_config()->::apollo::planning::DistanceApproachTrajectorySmootherConfig::MergeFrom(from.distance_approach_trajectory_smoother_config());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_planner_open_space_config()->::apollo::planning::PlannerOpenSpaceConfig::MergeFrom(from.planner_open_space_config());
    }
    if (cached_has_bits & 0x00000010u) {
      delta_t_ = from.delta_t_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_near_destination_threshold_ = from.is_near_destination_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpenSpaceTrajectoryOptimizerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSpaceTrajectoryOptimizerConfig::CopyFrom(const OpenSpaceTrajectoryOptimizerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSpaceTrajectoryOptimizerConfig::IsInitialized() const {
  return true;
}

void OpenSpaceTrajectoryOptimizerConfig::Swap(OpenSpaceTrajectoryOptimizerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenSpaceTrajectoryOptimizerConfig::InternalSwap(OpenSpaceTrajectoryOptimizerConfig* other) {
  using std::swap;
  swap(hybrid_a_star_config_, other->hybrid_a_star_config_);
  swap(dual_variable_warm_start_config_, other->dual_variable_warm_start_config_);
  swap(distance_approach_trajectory_smoother_config_, other->distance_approach_trajectory_smoother_config_);
  swap(planner_open_space_config_, other->planner_open_space_config_);
  swap(delta_t_, other->delta_t_);
  swap(is_near_destination_threshold_, other->is_near_destination_threshold_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpenSpaceTrajectoryOptimizerConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HybridAStarConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HybridAStarConfig::kXyGridResolutionFieldNumber;
const int HybridAStarConfig::kPhiGridResolutionFieldNumber;
const int HybridAStarConfig::kNextNodeNumFieldNumber;
const int HybridAStarConfig::kStepSizeFieldNumber;
const int HybridAStarConfig::kTrajForwardPenaltyFieldNumber;
const int HybridAStarConfig::kTrajBackPenaltyFieldNumber;
const int HybridAStarConfig::kTrajGearSwitchPenaltyFieldNumber;
const int HybridAStarConfig::kTrajSteerPenaltyFieldNumber;
const int HybridAStarConfig::kTrajSteerChangePenaltyFieldNumber;
const int HybridAStarConfig::kGridAStarXyResolutionFieldNumber;
const int HybridAStarConfig::kNodeRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HybridAStarConfig::HybridAStarConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_HybridAStarConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.HybridAStarConfig)
}
HybridAStarConfig::HybridAStarConfig(const HybridAStarConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&traj_forward_penalty_, &from.traj_forward_penalty_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_radius_) -
    reinterpret_cast<char*>(&traj_forward_penalty_)) + sizeof(node_radius_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.HybridAStarConfig)
}

void HybridAStarConfig::SharedCtor() {
  ::memset(&traj_forward_penalty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&traj_back_penalty_) -
      reinterpret_cast<char*>(&traj_forward_penalty_)) + sizeof(traj_back_penalty_));
  xy_grid_resolution_ = 0.2;
  phi_grid_resolution_ = 0.05;
  next_node_num_ = GOOGLE_ULONGLONG(10);
  step_size_ = 0.5;
  traj_gear_switch_penalty_ = 10;
  traj_steer_penalty_ = 100;
  traj_steer_change_penalty_ = 10;
  grid_a_star_xy_resolution_ = 0.1;
  node_radius_ = 0.5;
}

HybridAStarConfig::~HybridAStarConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.HybridAStarConfig)
  SharedDtor();
}

void HybridAStarConfig::SharedDtor() {
}

void HybridAStarConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HybridAStarConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HybridAStarConfig& HybridAStarConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_HybridAStarConfig.base);
  return *internal_default_instance();
}


void HybridAStarConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.HybridAStarConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&traj_forward_penalty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&traj_back_penalty_) -
        reinterpret_cast<char*>(&traj_forward_penalty_)) + sizeof(traj_back_penalty_));
    xy_grid_resolution_ = 0.2;
    phi_grid_resolution_ = 0.05;
    next_node_num_ = GOOGLE_ULONGLONG(10);
    step_size_ = 0.5;
    traj_gear_switch_penalty_ = 10;
    traj_steer_penalty_ = 100;
  }
  if (cached_has_bits & 1792u) {
    traj_steer_change_penalty_ = 10;
    grid_a_star_xy_resolution_ = 0.1;
    node_radius_ = 0.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HybridAStarConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.HybridAStarConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double xy_grid_resolution = 1 [default = 0.2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_xy_grid_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xy_grid_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double phi_grid_resolution = 2 [default = 0.05];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_phi_grid_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_grid_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 next_node_num = 3 [default = 10];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_next_node_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_node_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double step_size = 4 [default = 0.5];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_step_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_forward_penalty = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_traj_forward_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_forward_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_back_penalty = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_traj_back_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_back_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_gear_switch_penalty = 7 [default = 10];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_traj_gear_switch_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_gear_switch_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_steer_penalty = 8 [default = 100];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_traj_steer_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_steer_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traj_steer_change_penalty = 9 [default = 10];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_traj_steer_change_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traj_steer_change_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_grid_a_star_xy_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &grid_a_star_xy_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double node_radius = 16 [default = 0.5];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_node_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &node_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.HybridAStarConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.HybridAStarConfig)
  return false;
#undef DO_
}

void HybridAStarConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.HybridAStarConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xy_grid_resolution = 1 [default = 0.2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->xy_grid_resolution(), output);
  }

  // optional double phi_grid_resolution = 2 [default = 0.05];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->phi_grid_resolution(), output);
  }

  // optional uint64 next_node_num = 3 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->next_node_num(), output);
  }

  // optional double step_size = 4 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->step_size(), output);
  }

  // optional double traj_forward_penalty = 5 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->traj_forward_penalty(), output);
  }

  // optional double traj_back_penalty = 6 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->traj_back_penalty(), output);
  }

  // optional double traj_gear_switch_penalty = 7 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->traj_gear_switch_penalty(), output);
  }

  // optional double traj_steer_penalty = 8 [default = 100];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->traj_steer_penalty(), output);
  }

  // optional double traj_steer_change_penalty = 9 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->traj_steer_change_penalty(), output);
  }

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->grid_a_star_xy_resolution(), output);
  }

  // optional double node_radius = 16 [default = 0.5];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->node_radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.HybridAStarConfig)
}

::google::protobuf::uint8* HybridAStarConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.HybridAStarConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double xy_grid_resolution = 1 [default = 0.2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->xy_grid_resolution(), target);
  }

  // optional double phi_grid_resolution = 2 [default = 0.05];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->phi_grid_resolution(), target);
  }

  // optional uint64 next_node_num = 3 [default = 10];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->next_node_num(), target);
  }

  // optional double step_size = 4 [default = 0.5];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->step_size(), target);
  }

  // optional double traj_forward_penalty = 5 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->traj_forward_penalty(), target);
  }

  // optional double traj_back_penalty = 6 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->traj_back_penalty(), target);
  }

  // optional double traj_gear_switch_penalty = 7 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->traj_gear_switch_penalty(), target);
  }

  // optional double traj_steer_penalty = 8 [default = 100];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->traj_steer_penalty(), target);
  }

  // optional double traj_steer_change_penalty = 9 [default = 10];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->traj_steer_change_penalty(), target);
  }

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->grid_a_star_xy_resolution(), target);
  }

  // optional double node_radius = 16 [default = 0.5];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->node_radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.HybridAStarConfig)
  return target;
}

size_t HybridAStarConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.HybridAStarConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double traj_forward_penalty = 5 [default = 0];
    if (has_traj_forward_penalty()) {
      total_size += 1 + 8;
    }

    // optional double traj_back_penalty = 6 [default = 0];
    if (has_traj_back_penalty()) {
      total_size += 1 + 8;
    }

    // optional double xy_grid_resolution = 1 [default = 0.2];
    if (has_xy_grid_resolution()) {
      total_size += 1 + 8;
    }

    // optional double phi_grid_resolution = 2 [default = 0.05];
    if (has_phi_grid_resolution()) {
      total_size += 1 + 8;
    }

    // optional uint64 next_node_num = 3 [default = 10];
    if (has_next_node_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_node_num());
    }

    // optional double step_size = 4 [default = 0.5];
    if (has_step_size()) {
      total_size += 1 + 8;
    }

    // optional double traj_gear_switch_penalty = 7 [default = 10];
    if (has_traj_gear_switch_penalty()) {
      total_size += 1 + 8;
    }

    // optional double traj_steer_penalty = 8 [default = 100];
    if (has_traj_steer_penalty()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional double traj_steer_change_penalty = 9 [default = 10];
    if (has_traj_steer_change_penalty()) {
      total_size += 1 + 8;
    }

    // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
    if (has_grid_a_star_xy_resolution()) {
      total_size += 1 + 8;
    }

    // optional double node_radius = 16 [default = 0.5];
    if (has_node_radius()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HybridAStarConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.HybridAStarConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const HybridAStarConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HybridAStarConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.HybridAStarConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.HybridAStarConfig)
    MergeFrom(*source);
  }
}

void HybridAStarConfig::MergeFrom(const HybridAStarConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.HybridAStarConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      traj_forward_penalty_ = from.traj_forward_penalty_;
    }
    if (cached_has_bits & 0x00000002u) {
      traj_back_penalty_ = from.traj_back_penalty_;
    }
    if (cached_has_bits & 0x00000004u) {
      xy_grid_resolution_ = from.xy_grid_resolution_;
    }
    if (cached_has_bits & 0x00000008u) {
      phi_grid_resolution_ = from.phi_grid_resolution_;
    }
    if (cached_has_bits & 0x00000010u) {
      next_node_num_ = from.next_node_num_;
    }
    if (cached_has_bits & 0x00000020u) {
      step_size_ = from.step_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      traj_gear_switch_penalty_ = from.traj_gear_switch_penalty_;
    }
    if (cached_has_bits & 0x00000080u) {
      traj_steer_penalty_ = from.traj_steer_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      traj_steer_change_penalty_ = from.traj_steer_change_penalty_;
    }
    if (cached_has_bits & 0x00000200u) {
      grid_a_star_xy_resolution_ = from.grid_a_star_xy_resolution_;
    }
    if (cached_has_bits & 0x00000400u) {
      node_radius_ = from.node_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HybridAStarConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.HybridAStarConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HybridAStarConfig::CopyFrom(const HybridAStarConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.HybridAStarConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HybridAStarConfig::IsInitialized() const {
  return true;
}

void HybridAStarConfig::Swap(HybridAStarConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HybridAStarConfig::InternalSwap(HybridAStarConfig* other) {
  using std::swap;
  swap(traj_forward_penalty_, other->traj_forward_penalty_);
  swap(traj_back_penalty_, other->traj_back_penalty_);
  swap(xy_grid_resolution_, other->xy_grid_resolution_);
  swap(phi_grid_resolution_, other->phi_grid_resolution_);
  swap(next_node_num_, other->next_node_num_);
  swap(step_size_, other->step_size_);
  swap(traj_gear_switch_penalty_, other->traj_gear_switch_penalty_);
  swap(traj_steer_penalty_, other->traj_steer_penalty_);
  swap(traj_steer_change_penalty_, other->traj_steer_change_penalty_);
  swap(grid_a_star_xy_resolution_, other->grid_a_star_xy_resolution_);
  swap(node_radius_, other->node_radius_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HybridAStarConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DualVariableConfig::InitAsDefaultInstance() {
  ::apollo::planning::_DualVariableConfig_default_instance_._instance.get_mutable()->ipopt_config_ = const_cast< ::apollo::planning::IpoptSolverConfig*>(
      ::apollo::planning::IpoptSolverConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DualVariableConfig::kWeightDFieldNumber;
const int DualVariableConfig::kIpoptConfigFieldNumber;
const int DualVariableConfig::kQpFormatFieldNumber;
const int DualVariableConfig::kMinSafetyDistanceFieldNumber;
const int DualVariableConfig::kDebugOsqpFieldNumber;
const int DualVariableConfig::kBetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DualVariableConfig::DualVariableConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_DualVariableConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DualVariableConfig)
}
DualVariableConfig::DualVariableConfig(const DualVariableConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ipopt_config()) {
    ipopt_config_ = new ::apollo::planning::IpoptSolverConfig(*from.ipopt_config_);
  } else {
    ipopt_config_ = NULL;
  }
  ::memcpy(&min_safety_distance_, &from.min_safety_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&beta_) -
    reinterpret_cast<char*>(&min_safety_distance_)) + sizeof(beta_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DualVariableConfig)
}

void DualVariableConfig::SharedCtor() {
  ::memset(&ipopt_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debug_osqp_) -
      reinterpret_cast<char*>(&ipopt_config_)) + sizeof(debug_osqp_));
  weight_d_ = 1;
  beta_ = 1;
}

DualVariableConfig::~DualVariableConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DualVariableConfig)
  SharedDtor();
}

void DualVariableConfig::SharedDtor() {
  if (this != internal_default_instance()) delete ipopt_config_;
}

void DualVariableConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DualVariableConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DualVariableConfig& DualVariableConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_DualVariableConfig.base);
  return *internal_default_instance();
}


void DualVariableConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DualVariableConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ipopt_config_ != NULL);
    ipopt_config_->Clear();
  }
  if (cached_has_bits & 62u) {
    ::memset(&min_safety_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&debug_osqp_) -
        reinterpret_cast<char*>(&min_safety_distance_)) + sizeof(debug_osqp_));
    weight_d_ = 1;
    beta_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DualVariableConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.DualVariableConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double weight_d = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_weight_d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.IpoptSolverConfig ipopt_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ipopt_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.DualVariableMode qp_format = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::DualVariableMode_IsValid(value)) {
            set_qp_format(static_cast< ::apollo::planning::DualVariableMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_safety_distance = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_min_safety_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_safety_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool debug_osqp = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_debug_osqp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_osqp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double beta = 6 [default = 1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_beta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.DualVariableConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.DualVariableConfig)
  return false;
#undef DO_
}

void DualVariableConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.DualVariableConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_d = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight_d(), output);
  }

  // optional .apollo.planning.IpoptSolverConfig ipopt_config = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_ipopt_config(), output);
  }

  // optional .apollo.planning.DualVariableMode qp_format = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->qp_format(), output);
  }

  // optional double min_safety_distance = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min_safety_distance(), output);
  }

  // optional bool debug_osqp = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->debug_osqp(), output);
  }

  // optional double beta = 6 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->beta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.DualVariableConfig)
}

::google::protobuf::uint8* DualVariableConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DualVariableConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_d = 1 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight_d(), target);
  }

  // optional .apollo.planning.IpoptSolverConfig ipopt_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_ipopt_config(), deterministic, target);
  }

  // optional .apollo.planning.DualVariableMode qp_format = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->qp_format(), target);
  }

  // optional double min_safety_distance = 4 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min_safety_distance(), target);
  }

  // optional bool debug_osqp = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->debug_osqp(), target);
  }

  // optional double beta = 6 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->beta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DualVariableConfig)
  return target;
}

size_t DualVariableConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DualVariableConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .apollo.planning.IpoptSolverConfig ipopt_config = 2;
    if (has_ipopt_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ipopt_config_);
    }

    // optional double min_safety_distance = 4 [default = 0];
    if (has_min_safety_distance()) {
      total_size += 1 + 8;
    }

    // optional .apollo.planning.DualVariableMode qp_format = 3;
    if (has_qp_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->qp_format());
    }

    // optional bool debug_osqp = 5 [default = false];
    if (has_debug_osqp()) {
      total_size += 1 + 1;
    }

    // optional double weight_d = 1 [default = 1];
    if (has_weight_d()) {
      total_size += 1 + 8;
    }

    // optional double beta = 6 [default = 1];
    if (has_beta()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DualVariableConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DualVariableConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DualVariableConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DualVariableConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DualVariableConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DualVariableConfig)
    MergeFrom(*source);
  }
}

void DualVariableConfig::MergeFrom(const DualVariableConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DualVariableConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ipopt_config()->::apollo::planning::IpoptSolverConfig::MergeFrom(from.ipopt_config());
    }
    if (cached_has_bits & 0x00000002u) {
      min_safety_distance_ = from.min_safety_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      qp_format_ = from.qp_format_;
    }
    if (cached_has_bits & 0x00000008u) {
      debug_osqp_ = from.debug_osqp_;
    }
    if (cached_has_bits & 0x00000010u) {
      weight_d_ = from.weight_d_;
    }
    if (cached_has_bits & 0x00000020u) {
      beta_ = from.beta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DualVariableConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DualVariableConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DualVariableConfig::CopyFrom(const DualVariableConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DualVariableConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DualVariableConfig::IsInitialized() const {
  return true;
}

void DualVariableConfig::Swap(DualVariableConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DualVariableConfig::InternalSwap(DualVariableConfig* other) {
  using std::swap;
  swap(ipopt_config_, other->ipopt_config_);
  swap(min_safety_distance_, other->min_safety_distance_);
  swap(qp_format_, other->qp_format_);
  swap(debug_osqp_, other->debug_osqp_);
  swap(weight_d_, other->weight_d_);
  swap(beta_, other->beta_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DualVariableConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DistanceApproachTrajectorySmootherConfig::InitAsDefaultInstance() {
  ::apollo::planning::_DistanceApproachTrajectorySmootherConfig_default_instance_._instance.get_mutable()->ipopt_config_ = const_cast< ::apollo::planning::IpoptSolverConfig*>(
      ::apollo::planning::IpoptSolverConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistanceApproachTrajectorySmootherConfig::kWeightSteerFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightAFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightSteerRateFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightARateFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightXFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightYFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightPhiFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightVFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightSteerStitchingFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightAStitchingFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightFirstOrderTimeFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kWeightSecondOrderTimeFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kMinSafetyDistanceFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kMaxSpeedForwardFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kMaxSpeedReverseFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kMaxAccelerationForwardFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kMaxAccelerationReverseFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kMinTimeSampleScalingFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kMaxTimeSampleScalingFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kUseFixTimeFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kIpoptConfigFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kEnableConstraintCheckFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kEnableHandDerivativeFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kEnableDerivativeCheckFieldNumber;
const int DistanceApproachTrajectorySmootherConfig::kEnableInitialFinalCheckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistanceApproachTrajectorySmootherConfig::DistanceApproachTrajectorySmootherConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_DistanceApproachTrajectorySmootherConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.DistanceApproachTrajectorySmootherConfig)
}
DistanceApproachTrajectorySmootherConfig::DistanceApproachTrajectorySmootherConfig(const DistanceApproachTrajectorySmootherConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ipopt_config()) {
    ipopt_config_ = new ::apollo::planning::IpoptSolverConfig(*from.ipopt_config_);
  } else {
    ipopt_config_ = NULL;
  }
  ::memcpy(&weight_steer_, &from.weight_steer_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_time_sample_scaling_) -
    reinterpret_cast<char*>(&weight_steer_)) + sizeof(max_time_sample_scaling_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.DistanceApproachTrajectorySmootherConfig)
}

void DistanceApproachTrajectorySmootherConfig::SharedCtor() {
  ::memset(&ipopt_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_initial_final_check_) -
      reinterpret_cast<char*>(&ipopt_config_)) + sizeof(enable_initial_final_check_));
  max_speed_forward_ = 3;
  max_speed_reverse_ = 2;
  max_acceleration_forward_ = 2;
  max_acceleration_reverse_ = 2;
  min_time_sample_scaling_ = 0.1;
  max_time_sample_scaling_ = 10;
}

DistanceApproachTrajectorySmootherConfig::~DistanceApproachTrajectorySmootherConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  SharedDtor();
}

void DistanceApproachTrajectorySmootherConfig::SharedDtor() {
  if (this != internal_default_instance()) delete ipopt_config_;
}

void DistanceApproachTrajectorySmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DistanceApproachTrajectorySmootherConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DistanceApproachTrajectorySmootherConfig& DistanceApproachTrajectorySmootherConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_DistanceApproachTrajectorySmootherConfig.base);
  return *internal_default_instance();
}


void DistanceApproachTrajectorySmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ipopt_config_ != NULL);
    ipopt_config_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&weight_steer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_phi_) -
        reinterpret_cast<char*>(&weight_steer_)) + sizeof(weight_phi_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&weight_v_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_constraint_check_) -
        reinterpret_cast<char*>(&weight_v_)) + sizeof(enable_constraint_check_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&enable_hand_derivative_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enable_initial_final_check_) -
        reinterpret_cast<char*>(&enable_hand_derivative_)) + sizeof(enable_initial_final_check_));
    max_speed_forward_ = 3;
    max_speed_reverse_ = 2;
    max_acceleration_forward_ = 2;
    max_acceleration_reverse_ = 2;
    min_time_sample_scaling_ = 0.1;
  }
  max_time_sample_scaling_ = 10;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DistanceApproachTrajectorySmootherConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double weight_steer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_weight_steer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_steer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_a = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_weight_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_steer_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_weight_steer_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_steer_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_a_rate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_weight_a_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_a_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_weight_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_weight_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_phi = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_weight_phi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_phi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_v = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_weight_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_steer_stitching = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_weight_steer_stitching();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_steer_stitching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_a_stitching = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_weight_a_stitching();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_a_stitching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_first_order_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_weight_first_order_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_first_order_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double weight_second_order_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_weight_second_order_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_second_order_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_safety_distance = 13 [default = 0];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_min_safety_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_safety_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_speed_forward = 14 [default = 3];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_max_speed_forward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_speed_forward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_speed_reverse = 15 [default = 2];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_max_speed_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_speed_reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acceleration_forward = 16 [default = 2];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_max_acceleration_forward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_forward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_acceleration_reverse = 17 [default = 2];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_max_acceleration_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_time_sample_scaling = 18 [default = 0.1];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_min_time_sample_scaling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_time_sample_scaling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_time_sample_scaling = 19 [default = 10];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {
          set_has_max_time_sample_scaling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_time_sample_scaling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_fix_time = 20 [default = false];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_use_fix_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_fix_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.IpoptSolverConfig ipopt_config = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ipopt_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_constraint_check = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_enable_constraint_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_constraint_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_hand_derivative = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_enable_hand_derivative();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_hand_derivative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_derivative_check = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_enable_derivative_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_derivative_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_initial_final_check = 25 [default = false];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_enable_initial_final_check();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_initial_final_check_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  return false;
#undef DO_
}

void DistanceApproachTrajectorySmootherConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_steer = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->weight_steer(), output);
  }

  // optional double weight_a = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->weight_a(), output);
  }

  // optional double weight_steer_rate = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->weight_steer_rate(), output);
  }

  // optional double weight_a_rate = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->weight_a_rate(), output);
  }

  // optional double weight_x = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->weight_x(), output);
  }

  // optional double weight_y = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->weight_y(), output);
  }

  // optional double weight_phi = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->weight_phi(), output);
  }

  // optional double weight_v = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->weight_v(), output);
  }

  // optional double weight_steer_stitching = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->weight_steer_stitching(), output);
  }

  // optional double weight_a_stitching = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->weight_a_stitching(), output);
  }

  // optional double weight_first_order_time = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->weight_first_order_time(), output);
  }

  // optional double weight_second_order_time = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->weight_second_order_time(), output);
  }

  // optional double min_safety_distance = 13 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->min_safety_distance(), output);
  }

  // optional double max_speed_forward = 14 [default = 3];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->max_speed_forward(), output);
  }

  // optional double max_speed_reverse = 15 [default = 2];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->max_speed_reverse(), output);
  }

  // optional double max_acceleration_forward = 16 [default = 2];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->max_acceleration_forward(), output);
  }

  // optional double max_acceleration_reverse = 17 [default = 2];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->max_acceleration_reverse(), output);
  }

  // optional double min_time_sample_scaling = 18 [default = 0.1];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->min_time_sample_scaling(), output);
  }

  // optional double max_time_sample_scaling = 19 [default = 10];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->max_time_sample_scaling(), output);
  }

  // optional bool use_fix_time = 20 [default = false];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->use_fix_time(), output);
  }

  // optional .apollo.planning.IpoptSolverConfig ipopt_config = 21;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_ipopt_config(), output);
  }

  // optional bool enable_constraint_check = 22;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->enable_constraint_check(), output);
  }

  // optional bool enable_hand_derivative = 23;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->enable_hand_derivative(), output);
  }

  // optional bool enable_derivative_check = 24;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->enable_derivative_check(), output);
  }

  // optional bool enable_initial_final_check = 25 [default = false];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->enable_initial_final_check(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.DistanceApproachTrajectorySmootherConfig)
}

::google::protobuf::uint8* DistanceApproachTrajectorySmootherConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double weight_steer = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->weight_steer(), target);
  }

  // optional double weight_a = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->weight_a(), target);
  }

  // optional double weight_steer_rate = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->weight_steer_rate(), target);
  }

  // optional double weight_a_rate = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->weight_a_rate(), target);
  }

  // optional double weight_x = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->weight_x(), target);
  }

  // optional double weight_y = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->weight_y(), target);
  }

  // optional double weight_phi = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->weight_phi(), target);
  }

  // optional double weight_v = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->weight_v(), target);
  }

  // optional double weight_steer_stitching = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->weight_steer_stitching(), target);
  }

  // optional double weight_a_stitching = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->weight_a_stitching(), target);
  }

  // optional double weight_first_order_time = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->weight_first_order_time(), target);
  }

  // optional double weight_second_order_time = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->weight_second_order_time(), target);
  }

  // optional double min_safety_distance = 13 [default = 0];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->min_safety_distance(), target);
  }

  // optional double max_speed_forward = 14 [default = 3];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->max_speed_forward(), target);
  }

  // optional double max_speed_reverse = 15 [default = 2];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->max_speed_reverse(), target);
  }

  // optional double max_acceleration_forward = 16 [default = 2];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->max_acceleration_forward(), target);
  }

  // optional double max_acceleration_reverse = 17 [default = 2];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->max_acceleration_reverse(), target);
  }

  // optional double min_time_sample_scaling = 18 [default = 0.1];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->min_time_sample_scaling(), target);
  }

  // optional double max_time_sample_scaling = 19 [default = 10];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->max_time_sample_scaling(), target);
  }

  // optional bool use_fix_time = 20 [default = false];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->use_fix_time(), target);
  }

  // optional .apollo.planning.IpoptSolverConfig ipopt_config = 21;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_ipopt_config(), deterministic, target);
  }

  // optional bool enable_constraint_check = 22;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->enable_constraint_check(), target);
  }

  // optional bool enable_hand_derivative = 23;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->enable_hand_derivative(), target);
  }

  // optional bool enable_derivative_check = 24;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->enable_derivative_check(), target);
  }

  // optional bool enable_initial_final_check = 25 [default = false];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->enable_initial_final_check(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  return target;
}

size_t DistanceApproachTrajectorySmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.planning.IpoptSolverConfig ipopt_config = 21;
    if (has_ipopt_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ipopt_config_);
    }

    // optional double weight_steer = 1;
    if (has_weight_steer()) {
      total_size += 1 + 8;
    }

    // optional double weight_a = 2;
    if (has_weight_a()) {
      total_size += 1 + 8;
    }

    // optional double weight_steer_rate = 3;
    if (has_weight_steer_rate()) {
      total_size += 1 + 8;
    }

    // optional double weight_a_rate = 4;
    if (has_weight_a_rate()) {
      total_size += 1 + 8;
    }

    // optional double weight_x = 5;
    if (has_weight_x()) {
      total_size += 1 + 8;
    }

    // optional double weight_y = 6;
    if (has_weight_y()) {
      total_size += 1 + 8;
    }

    // optional double weight_phi = 7;
    if (has_weight_phi()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double weight_v = 8;
    if (has_weight_v()) {
      total_size += 1 + 8;
    }

    // optional double weight_steer_stitching = 9;
    if (has_weight_steer_stitching()) {
      total_size += 1 + 8;
    }

    // optional double weight_a_stitching = 10;
    if (has_weight_a_stitching()) {
      total_size += 1 + 8;
    }

    // optional double weight_first_order_time = 11;
    if (has_weight_first_order_time()) {
      total_size += 1 + 8;
    }

    // optional double weight_second_order_time = 12;
    if (has_weight_second_order_time()) {
      total_size += 1 + 8;
    }

    // optional double min_safety_distance = 13 [default = 0];
    if (has_min_safety_distance()) {
      total_size += 1 + 8;
    }

    // optional bool use_fix_time = 20 [default = false];
    if (has_use_fix_time()) {
      total_size += 2 + 1;
    }

    // optional bool enable_constraint_check = 22;
    if (has_enable_constraint_check()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool enable_hand_derivative = 23;
    if (has_enable_hand_derivative()) {
      total_size += 2 + 1;
    }

    // optional bool enable_derivative_check = 24;
    if (has_enable_derivative_check()) {
      total_size += 2 + 1;
    }

    // optional bool enable_initial_final_check = 25 [default = false];
    if (has_enable_initial_final_check()) {
      total_size += 2 + 1;
    }

    // optional double max_speed_forward = 14 [default = 3];
    if (has_max_speed_forward()) {
      total_size += 1 + 8;
    }

    // optional double max_speed_reverse = 15 [default = 2];
    if (has_max_speed_reverse()) {
      total_size += 1 + 8;
    }

    // optional double max_acceleration_forward = 16 [default = 2];
    if (has_max_acceleration_forward()) {
      total_size += 2 + 8;
    }

    // optional double max_acceleration_reverse = 17 [default = 2];
    if (has_max_acceleration_reverse()) {
      total_size += 2 + 8;
    }

    // optional double min_time_sample_scaling = 18 [default = 0.1];
    if (has_min_time_sample_scaling()) {
      total_size += 2 + 8;
    }

  }
  // optional double max_time_sample_scaling = 19 [default = 10];
  if (has_max_time_sample_scaling()) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistanceApproachTrajectorySmootherConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DistanceApproachTrajectorySmootherConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DistanceApproachTrajectorySmootherConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.DistanceApproachTrajectorySmootherConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.DistanceApproachTrajectorySmootherConfig)
    MergeFrom(*source);
  }
}

void DistanceApproachTrajectorySmootherConfig::MergeFrom(const DistanceApproachTrajectorySmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ipopt_config()->::apollo::planning::IpoptSolverConfig::MergeFrom(from.ipopt_config());
    }
    if (cached_has_bits & 0x00000002u) {
      weight_steer_ = from.weight_steer_;
    }
    if (cached_has_bits & 0x00000004u) {
      weight_a_ = from.weight_a_;
    }
    if (cached_has_bits & 0x00000008u) {
      weight_steer_rate_ = from.weight_steer_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      weight_a_rate_ = from.weight_a_rate_;
    }
    if (cached_has_bits & 0x00000020u) {
      weight_x_ = from.weight_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      weight_y_ = from.weight_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      weight_phi_ = from.weight_phi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      weight_v_ = from.weight_v_;
    }
    if (cached_has_bits & 0x00000200u) {
      weight_steer_stitching_ = from.weight_steer_stitching_;
    }
    if (cached_has_bits & 0x00000400u) {
      weight_a_stitching_ = from.weight_a_stitching_;
    }
    if (cached_has_bits & 0x00000800u) {
      weight_first_order_time_ = from.weight_first_order_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      weight_second_order_time_ = from.weight_second_order_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      min_safety_distance_ = from.min_safety_distance_;
    }
    if (cached_has_bits & 0x00004000u) {
      use_fix_time_ = from.use_fix_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      enable_constraint_check_ = from.enable_constraint_check_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      enable_hand_derivative_ = from.enable_hand_derivative_;
    }
    if (cached_has_bits & 0x00020000u) {
      enable_derivative_check_ = from.enable_derivative_check_;
    }
    if (cached_has_bits & 0x00040000u) {
      enable_initial_final_check_ = from.enable_initial_final_check_;
    }
    if (cached_has_bits & 0x00080000u) {
      max_speed_forward_ = from.max_speed_forward_;
    }
    if (cached_has_bits & 0x00100000u) {
      max_speed_reverse_ = from.max_speed_reverse_;
    }
    if (cached_has_bits & 0x00200000u) {
      max_acceleration_forward_ = from.max_acceleration_forward_;
    }
    if (cached_has_bits & 0x00400000u) {
      max_acceleration_reverse_ = from.max_acceleration_reverse_;
    }
    if (cached_has_bits & 0x00800000u) {
      min_time_sample_scaling_ = from.min_time_sample_scaling_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    set_max_time_sample_scaling(from.max_time_sample_scaling());
  }
}

void DistanceApproachTrajectorySmootherConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistanceApproachTrajectorySmootherConfig::CopyFrom(const DistanceApproachTrajectorySmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.DistanceApproachTrajectorySmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceApproachTrajectorySmootherConfig::IsInitialized() const {
  return true;
}

void DistanceApproachTrajectorySmootherConfig::Swap(DistanceApproachTrajectorySmootherConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistanceApproachTrajectorySmootherConfig::InternalSwap(DistanceApproachTrajectorySmootherConfig* other) {
  using std::swap;
  swap(ipopt_config_, other->ipopt_config_);
  swap(weight_steer_, other->weight_steer_);
  swap(weight_a_, other->weight_a_);
  swap(weight_steer_rate_, other->weight_steer_rate_);
  swap(weight_a_rate_, other->weight_a_rate_);
  swap(weight_x_, other->weight_x_);
  swap(weight_y_, other->weight_y_);
  swap(weight_phi_, other->weight_phi_);
  swap(weight_v_, other->weight_v_);
  swap(weight_steer_stitching_, other->weight_steer_stitching_);
  swap(weight_a_stitching_, other->weight_a_stitching_);
  swap(weight_first_order_time_, other->weight_first_order_time_);
  swap(weight_second_order_time_, other->weight_second_order_time_);
  swap(min_safety_distance_, other->min_safety_distance_);
  swap(use_fix_time_, other->use_fix_time_);
  swap(enable_constraint_check_, other->enable_constraint_check_);
  swap(enable_hand_derivative_, other->enable_hand_derivative_);
  swap(enable_derivative_check_, other->enable_derivative_check_);
  swap(enable_initial_final_check_, other->enable_initial_final_check_);
  swap(max_speed_forward_, other->max_speed_forward_);
  swap(max_speed_reverse_, other->max_speed_reverse_);
  swap(max_acceleration_forward_, other->max_acceleration_forward_);
  swap(max_acceleration_reverse_, other->max_acceleration_reverse_);
  swap(min_time_sample_scaling_, other->min_time_sample_scaling_);
  swap(max_time_sample_scaling_, other->max_time_sample_scaling_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DistanceApproachTrajectorySmootherConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IpoptSolverConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IpoptSolverConfig::kIpoptPrintLevelFieldNumber;
const int IpoptSolverConfig::kMumpsMemPercentFieldNumber;
const int IpoptSolverConfig::kMumpsPivtolFieldNumber;
const int IpoptSolverConfig::kIpoptMaxIterFieldNumber;
const int IpoptSolverConfig::kIpoptTolFieldNumber;
const int IpoptSolverConfig::kIpoptAcceptableConstrViolTolFieldNumber;
const int IpoptSolverConfig::kIpoptMinHessianPerturbationFieldNumber;
const int IpoptSolverConfig::kIpoptJacobianRegularizationValueFieldNumber;
const int IpoptSolverConfig::kIpoptPrintTimingStatisticsFieldNumber;
const int IpoptSolverConfig::kIpoptAlphaForYFieldNumber;
const int IpoptSolverConfig::kIpoptRecalcYFieldNumber;
const int IpoptSolverConfig::kIpoptMuInitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IpoptSolverConfig::IpoptSolverConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_IpoptSolverConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.IpoptSolverConfig)
}
IpoptSolverConfig::IpoptSolverConfig(const IpoptSolverConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ipopt_print_timing_statistics_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ipopt_print_timing_statistics()) {
    ipopt_print_timing_statistics_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_print_timing_statistics_);
  }
  ipopt_alpha_for_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ipopt_alpha_for_y()) {
    ipopt_alpha_for_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_alpha_for_y_);
  }
  ipopt_recalc_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ipopt_recalc_y()) {
    ipopt_recalc_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_recalc_y_);
  }
  ::memcpy(&ipopt_print_level_, &from.ipopt_print_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipopt_mu_init_) -
    reinterpret_cast<char*>(&ipopt_print_level_)) + sizeof(ipopt_mu_init_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.IpoptSolverConfig)
}

void IpoptSolverConfig::SharedCtor() {
  ipopt_print_timing_statistics_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipopt_alpha_for_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipopt_recalc_y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ipopt_print_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipopt_max_iter_) -
      reinterpret_cast<char*>(&ipopt_print_level_)) + sizeof(ipopt_max_iter_));
  ipopt_mu_init_ = 0.1;
}

IpoptSolverConfig::~IpoptSolverConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.IpoptSolverConfig)
  SharedDtor();
}

void IpoptSolverConfig::SharedDtor() {
  ipopt_print_timing_statistics_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipopt_alpha_for_y_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ipopt_recalc_y_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IpoptSolverConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IpoptSolverConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IpoptSolverConfig& IpoptSolverConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_IpoptSolverConfig.base);
  return *internal_default_instance();
}


void IpoptSolverConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.IpoptSolverConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ipopt_print_timing_statistics_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ipopt_alpha_for_y_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      ipopt_recalc_y_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&ipopt_print_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ipopt_acceptable_constr_viol_tol_) -
        reinterpret_cast<char*>(&ipopt_print_level_)) + sizeof(ipopt_acceptable_constr_viol_tol_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&ipopt_min_hessian_perturbation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ipopt_max_iter_) -
        reinterpret_cast<char*>(&ipopt_min_hessian_perturbation_)) + sizeof(ipopt_max_iter_));
    ipopt_mu_init_ = 0.1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IpoptSolverConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.IpoptSolverConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ipopt_print_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ipopt_print_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipopt_print_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mumps_mem_percent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_mumps_mem_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mumps_mem_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double mumps_pivtol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_mumps_pivtol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mumps_pivtol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ipopt_max_iter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ipopt_max_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipopt_max_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipopt_tol = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_ipopt_tol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipopt_tol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipopt_acceptable_constr_viol_tol = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_ipopt_acceptable_constr_viol_tol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipopt_acceptable_constr_viol_tol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipopt_min_hessian_perturbation = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_ipopt_min_hessian_perturbation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipopt_min_hessian_perturbation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipopt_jacobian_regularization_value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_ipopt_jacobian_regularization_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipopt_jacobian_regularization_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ipopt_print_timing_statistics = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipopt_print_timing_statistics()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipopt_print_timing_statistics().data(), static_cast<int>(this->ipopt_print_timing_statistics().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ipopt_alpha_for_y = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipopt_alpha_for_y()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipopt_alpha_for_y().data(), static_cast<int>(this->ipopt_alpha_for_y().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ipopt_recalc_y = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipopt_recalc_y()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ipopt_recalc_y().data(), static_cast<int>(this->ipopt_recalc_y().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.IpoptSolverConfig.ipopt_recalc_y");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipopt_mu_init = 12 [default = 0.1];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_ipopt_mu_init();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipopt_mu_init_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.IpoptSolverConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.IpoptSolverConfig)
  return false;
#undef DO_
}

void IpoptSolverConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.IpoptSolverConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ipopt_print_level = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ipopt_print_level(), output);
  }

  // optional int32 mumps_mem_percent = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mumps_mem_percent(), output);
  }

  // optional double mumps_pivtol = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->mumps_pivtol(), output);
  }

  // optional int32 ipopt_max_iter = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ipopt_max_iter(), output);
  }

  // optional double ipopt_tol = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ipopt_tol(), output);
  }

  // optional double ipopt_acceptable_constr_viol_tol = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ipopt_acceptable_constr_viol_tol(), output);
  }

  // optional double ipopt_min_hessian_perturbation = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->ipopt_min_hessian_perturbation(), output);
  }

  // optional double ipopt_jacobian_regularization_value = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->ipopt_jacobian_regularization_value(), output);
  }

  // optional string ipopt_print_timing_statistics = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_print_timing_statistics().data(), static_cast<int>(this->ipopt_print_timing_statistics().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->ipopt_print_timing_statistics(), output);
  }

  // optional string ipopt_alpha_for_y = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_alpha_for_y().data(), static_cast<int>(this->ipopt_alpha_for_y().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ipopt_alpha_for_y(), output);
  }

  // optional string ipopt_recalc_y = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_recalc_y().data(), static_cast<int>(this->ipopt_recalc_y().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptSolverConfig.ipopt_recalc_y");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->ipopt_recalc_y(), output);
  }

  // optional double ipopt_mu_init = 12 [default = 0.1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->ipopt_mu_init(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.IpoptSolverConfig)
}

::google::protobuf::uint8* IpoptSolverConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.IpoptSolverConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ipopt_print_level = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ipopt_print_level(), target);
  }

  // optional int32 mumps_mem_percent = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mumps_mem_percent(), target);
  }

  // optional double mumps_pivtol = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->mumps_pivtol(), target);
  }

  // optional int32 ipopt_max_iter = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ipopt_max_iter(), target);
  }

  // optional double ipopt_tol = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ipopt_tol(), target);
  }

  // optional double ipopt_acceptable_constr_viol_tol = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ipopt_acceptable_constr_viol_tol(), target);
  }

  // optional double ipopt_min_hessian_perturbation = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->ipopt_min_hessian_perturbation(), target);
  }

  // optional double ipopt_jacobian_regularization_value = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->ipopt_jacobian_regularization_value(), target);
  }

  // optional string ipopt_print_timing_statistics = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_print_timing_statistics().data(), static_cast<int>(this->ipopt_print_timing_statistics().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ipopt_print_timing_statistics(), target);
  }

  // optional string ipopt_alpha_for_y = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_alpha_for_y().data(), static_cast<int>(this->ipopt_alpha_for_y().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ipopt_alpha_for_y(), target);
  }

  // optional string ipopt_recalc_y = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ipopt_recalc_y().data(), static_cast<int>(this->ipopt_recalc_y().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.IpoptSolverConfig.ipopt_recalc_y");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->ipopt_recalc_y(), target);
  }

  // optional double ipopt_mu_init = 12 [default = 0.1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->ipopt_mu_init(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.IpoptSolverConfig)
  return target;
}

size_t IpoptSolverConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.IpoptSolverConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string ipopt_print_timing_statistics = 9;
    if (has_ipopt_print_timing_statistics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipopt_print_timing_statistics());
    }

    // optional string ipopt_alpha_for_y = 10;
    if (has_ipopt_alpha_for_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipopt_alpha_for_y());
    }

    // optional string ipopt_recalc_y = 11;
    if (has_ipopt_recalc_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipopt_recalc_y());
    }

    // optional int32 ipopt_print_level = 1;
    if (has_ipopt_print_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ipopt_print_level());
    }

    // optional int32 mumps_mem_percent = 2;
    if (has_mumps_mem_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mumps_mem_percent());
    }

    // optional double mumps_pivtol = 3;
    if (has_mumps_pivtol()) {
      total_size += 1 + 8;
    }

    // optional double ipopt_tol = 5;
    if (has_ipopt_tol()) {
      total_size += 1 + 8;
    }

    // optional double ipopt_acceptable_constr_viol_tol = 6;
    if (has_ipopt_acceptable_constr_viol_tol()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double ipopt_min_hessian_perturbation = 7;
    if (has_ipopt_min_hessian_perturbation()) {
      total_size += 1 + 8;
    }

    // optional double ipopt_jacobian_regularization_value = 8;
    if (has_ipopt_jacobian_regularization_value()) {
      total_size += 1 + 8;
    }

    // optional int32 ipopt_max_iter = 4;
    if (has_ipopt_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ipopt_max_iter());
    }

    // optional double ipopt_mu_init = 12 [default = 0.1];
    if (has_ipopt_mu_init()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IpoptSolverConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.IpoptSolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const IpoptSolverConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IpoptSolverConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.IpoptSolverConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.IpoptSolverConfig)
    MergeFrom(*source);
  }
}

void IpoptSolverConfig::MergeFrom(const IpoptSolverConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.IpoptSolverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ipopt_print_timing_statistics();
      ipopt_print_timing_statistics_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_print_timing_statistics_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ipopt_alpha_for_y();
      ipopt_alpha_for_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_alpha_for_y_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_ipopt_recalc_y();
      ipopt_recalc_y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ipopt_recalc_y_);
    }
    if (cached_has_bits & 0x00000008u) {
      ipopt_print_level_ = from.ipopt_print_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      mumps_mem_percent_ = from.mumps_mem_percent_;
    }
    if (cached_has_bits & 0x00000020u) {
      mumps_pivtol_ = from.mumps_pivtol_;
    }
    if (cached_has_bits & 0x00000040u) {
      ipopt_tol_ = from.ipopt_tol_;
    }
    if (cached_has_bits & 0x00000080u) {
      ipopt_acceptable_constr_viol_tol_ = from.ipopt_acceptable_constr_viol_tol_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      ipopt_min_hessian_perturbation_ = from.ipopt_min_hessian_perturbation_;
    }
    if (cached_has_bits & 0x00000200u) {
      ipopt_jacobian_regularization_value_ = from.ipopt_jacobian_regularization_value_;
    }
    if (cached_has_bits & 0x00000400u) {
      ipopt_max_iter_ = from.ipopt_max_iter_;
    }
    if (cached_has_bits & 0x00000800u) {
      ipopt_mu_init_ = from.ipopt_mu_init_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IpoptSolverConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.IpoptSolverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpoptSolverConfig::CopyFrom(const IpoptSolverConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.IpoptSolverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpoptSolverConfig::IsInitialized() const {
  return true;
}

void IpoptSolverConfig::Swap(IpoptSolverConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IpoptSolverConfig::InternalSwap(IpoptSolverConfig* other) {
  using std::swap;
  ipopt_print_timing_statistics_.Swap(&other->ipopt_print_timing_statistics_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipopt_alpha_for_y_.Swap(&other->ipopt_alpha_for_y_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipopt_recalc_y_.Swap(&other->ipopt_recalc_y_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ipopt_print_level_, other->ipopt_print_level_);
  swap(mumps_mem_percent_, other->mumps_mem_percent_);
  swap(mumps_pivtol_, other->mumps_pivtol_);
  swap(ipopt_tol_, other->ipopt_tol_);
  swap(ipopt_acceptable_constr_viol_tol_, other->ipopt_acceptable_constr_viol_tol_);
  swap(ipopt_min_hessian_perturbation_, other->ipopt_min_hessian_perturbation_);
  swap(ipopt_jacobian_regularization_value_, other->ipopt_jacobian_regularization_value_);
  swap(ipopt_max_iter_, other->ipopt_max_iter_);
  swap(ipopt_mu_init_, other->ipopt_mu_init_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IpoptSolverConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::OpenSpaceFallBackDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::OpenSpaceFallBackDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::OpenSpaceFallBackDeciderConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::OpenSpacePreStopDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::OpenSpacePreStopDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::OpenSpacePreStopDeciderConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::OpenSpaceRoiDeciderConfig* Arena::CreateMaybeMessage< ::apollo::planning::OpenSpaceRoiDeciderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::OpenSpaceRoiDeciderConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::OpenSpaceTrajectoryPartitionConfig* Arena::CreateMaybeMessage< ::apollo::planning::OpenSpaceTrajectoryPartitionConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::OpenSpaceTrajectoryPartitionConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::OpenSpaceTrajectoryProviderConfig* Arena::CreateMaybeMessage< ::apollo::planning::OpenSpaceTrajectoryProviderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::OpenSpaceTrajectoryProviderConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* Arena::CreateMaybeMessage< ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::HybridAStarConfig* Arena::CreateMaybeMessage< ::apollo::planning::HybridAStarConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::HybridAStarConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::DualVariableConfig* Arena::CreateMaybeMessage< ::apollo::planning::DualVariableConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::DualVariableConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::DistanceApproachTrajectorySmootherConfig* Arena::CreateMaybeMessage< ::apollo::planning::DistanceApproachTrajectorySmootherConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::DistanceApproachTrajectorySmootherConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::IpoptSolverConfig* Arena::CreateMaybeMessage< ::apollo::planning::IpoptSolverConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::IpoptSolverConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
