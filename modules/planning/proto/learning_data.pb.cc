// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/learning_data.proto

#include "modules/planning/proto/learning_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point3D;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PointENU;
}  // namespace protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto
namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fheader_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto
namespace protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GaussianInfo;
}  // namespace protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto
namespace protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChassisFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CommonPathPointFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OverlapFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TrafficLightFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LearningOutput;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PerceptionObstacleFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PlanningTag;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PredictionTrajectoryFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RoutingFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrafficLightDetectionFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrajectoryPointFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ADCTrajectoryPoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CommonTrajectoryPointFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LocalizationFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ObstacleFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ObstacleTrajectoryFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RoutingResponseFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_PredictionObstacleFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_LearningDataFrame;
}  // namespace protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto
namespace protobuf_modules_2fprediction_2fproto_2ffeature_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2ffeature_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ObstaclePriority;
}  // namespace protobuf_modules_2fprediction_2fproto_2ffeature_2eproto
namespace protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ObstacleIntent;
}  // namespace protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto
namespace protobuf_modules_2frouting_2fproto_2frouting_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2frouting_2fproto_2frouting_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Measurement;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2frouting_2fproto_2frouting_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RoadSegment;
}  // namespace protobuf_modules_2frouting_2fproto_2frouting_2eproto
namespace apollo {
namespace planning {
class OverlapFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OverlapFeature>
      _instance;
} _OverlapFeature_default_instance_;
class PlanningTagDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlanningTag>
      _instance;
} _PlanningTag_default_instance_;
class ChassisFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChassisFeature>
      _instance;
} _ChassisFeature_default_instance_;
class LocalizationFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocalizationFeature>
      _instance;
} _LocalizationFeature_default_instance_;
class CommonPathPointFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommonPathPointFeature>
      _instance;
} _CommonPathPointFeature_default_instance_;
class CommonTrajectoryPointFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommonTrajectoryPointFeature>
      _instance;
} _CommonTrajectoryPointFeature_default_instance_;
class TrajectoryPointFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryPointFeature>
      _instance;
} _TrajectoryPointFeature_default_instance_;
class PerceptionObstacleFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerceptionObstacleFeature>
      _instance;
} _PerceptionObstacleFeature_default_instance_;
class ObstacleTrajectoryFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObstacleTrajectoryFeature>
      _instance;
} _ObstacleTrajectoryFeature_default_instance_;
class PredictionTrajectoryFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PredictionTrajectoryFeature>
      _instance;
} _PredictionTrajectoryFeature_default_instance_;
class PredictionObstacleFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PredictionObstacleFeature>
      _instance;
} _PredictionObstacleFeature_default_instance_;
class ObstacleFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObstacleFeature>
      _instance;
} _ObstacleFeature_default_instance_;
class RoutingResponseFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoutingResponseFeature>
      _instance;
} _RoutingResponseFeature_default_instance_;
class RoutingFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoutingFeature>
      _instance;
} _RoutingFeature_default_instance_;
class TrafficLightFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightFeature>
      _instance;
} _TrafficLightFeature_default_instance_;
class TrafficLightDetectionFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightDetectionFeature>
      _instance;
} _TrafficLightDetectionFeature_default_instance_;
class ADCTrajectoryPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ADCTrajectoryPoint>
      _instance;
} _ADCTrajectoryPoint_default_instance_;
class LearningOutputDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LearningOutput>
      _instance;
} _LearningOutput_default_instance_;
class LearningDataFrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LearningDataFrame>
      _instance;
} _LearningDataFrame_default_instance_;
class LearningDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LearningData>
      _instance;
} _LearningData_default_instance_;
class PlanningLearningDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlanningLearningData>
      _instance;
} _PlanningLearningData_default_instance_;
}  // namespace planning
}  // namespace apollo
namespace protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto {
static void InitDefaultsOverlapFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_OverlapFeature_default_instance_;
    new (ptr) ::apollo::planning::OverlapFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::OverlapFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OverlapFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOverlapFeature}, {}};

static void InitDefaultsPlanningTag() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PlanningTag_default_instance_;
    new (ptr) ::apollo::planning::PlanningTag();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PlanningTag::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PlanningTag =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPlanningTag}, {
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_OverlapFeature.base,}};

static void InitDefaultsChassisFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ChassisFeature_default_instance_;
    new (ptr) ::apollo::planning::ChassisFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ChassisFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChassisFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChassisFeature}, {}};

static void InitDefaultsLocalizationFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_LocalizationFeature_default_instance_;
    new (ptr) ::apollo::planning::LocalizationFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::LocalizationFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LocalizationFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLocalizationFeature}, {
      &protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::scc_info_PointENU.base,
      &protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::scc_info_Point3D.base,}};

static void InitDefaultsCommonPathPointFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_CommonPathPointFeature_default_instance_;
    new (ptr) ::apollo::planning::CommonPathPointFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::CommonPathPointFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CommonPathPointFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommonPathPointFeature}, {}};

static void InitDefaultsCommonTrajectoryPointFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_CommonTrajectoryPointFeature_default_instance_;
    new (ptr) ::apollo::planning::CommonTrajectoryPointFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::CommonTrajectoryPointFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CommonTrajectoryPointFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCommonTrajectoryPointFeature}, {
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_CommonPathPointFeature.base,
      &protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::scc_info_GaussianInfo.base,}};

static void InitDefaultsTrajectoryPointFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_TrajectoryPointFeature_default_instance_;
    new (ptr) ::apollo::planning::TrajectoryPointFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::TrajectoryPointFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrajectoryPointFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrajectoryPointFeature}, {
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_CommonTrajectoryPointFeature.base,}};

static void InitDefaultsPerceptionObstacleFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PerceptionObstacleFeature_default_instance_;
    new (ptr) ::apollo::planning::PerceptionObstacleFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PerceptionObstacleFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PerceptionObstacleFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPerceptionObstacleFeature}, {
      &protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::scc_info_Point3D.base,}};

static void InitDefaultsObstacleTrajectoryFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ObstacleTrajectoryFeature_default_instance_;
    new (ptr) ::apollo::planning::ObstacleTrajectoryFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ObstacleTrajectoryFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ObstacleTrajectoryFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsObstacleTrajectoryFeature}, {
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_PerceptionObstacleFeature.base,
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_TrajectoryPointFeature.base,}};

static void InitDefaultsPredictionTrajectoryFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PredictionTrajectoryFeature_default_instance_;
    new (ptr) ::apollo::planning::PredictionTrajectoryFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PredictionTrajectoryFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PredictionTrajectoryFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPredictionTrajectoryFeature}, {
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_TrajectoryPointFeature.base,}};

static void InitDefaultsPredictionObstacleFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PredictionObstacleFeature_default_instance_;
    new (ptr) ::apollo::planning::PredictionObstacleFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PredictionObstacleFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_PredictionObstacleFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPredictionObstacleFeature}, {
      &protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::scc_info_ObstacleIntent.base,
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_ObstaclePriority.base,
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_PredictionTrajectoryFeature.base,}};

static void InitDefaultsObstacleFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ObstacleFeature_default_instance_;
    new (ptr) ::apollo::planning::ObstacleFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ObstacleFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ObstacleFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsObstacleFeature}, {
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_ObstacleTrajectoryFeature.base,
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_PredictionObstacleFeature.base,}};

static void InitDefaultsRoutingResponseFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_RoutingResponseFeature_default_instance_;
    new (ptr) ::apollo::planning::RoutingResponseFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::RoutingResponseFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RoutingResponseFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRoutingResponseFeature}, {
      &protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_RoadSegment.base,
      &protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_Measurement.base,}};

static void InitDefaultsRoutingFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_RoutingFeature_default_instance_;
    new (ptr) ::apollo::planning::RoutingFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::RoutingFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RoutingFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRoutingFeature}, {
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_RoutingResponseFeature.base,}};

static void InitDefaultsTrafficLightFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_TrafficLightFeature_default_instance_;
    new (ptr) ::apollo::planning::TrafficLightFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::TrafficLightFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficLightFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficLightFeature}, {}};

static void InitDefaultsTrafficLightDetectionFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_TrafficLightDetectionFeature_default_instance_;
    new (ptr) ::apollo::planning::TrafficLightDetectionFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::TrafficLightDetectionFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrafficLightDetectionFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrafficLightDetectionFeature}, {
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_TrafficLightFeature.base,}};

static void InitDefaultsADCTrajectoryPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ADCTrajectoryPoint_default_instance_;
    new (ptr) ::apollo::planning::ADCTrajectoryPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ADCTrajectoryPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ADCTrajectoryPoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsADCTrajectoryPoint}, {
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_PlanningTag.base,
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_CommonTrajectoryPointFeature.base,}};

static void InitDefaultsLearningOutput() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_LearningOutput_default_instance_;
    new (ptr) ::apollo::planning::LearningOutput();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::LearningOutput::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LearningOutput =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLearningOutput}, {
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_TrajectoryPointFeature.base,}};

static void InitDefaultsLearningDataFrame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_LearningDataFrame_default_instance_;
    new (ptr) ::apollo::planning::LearningDataFrame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::LearningDataFrame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_LearningDataFrame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsLearningDataFrame}, {
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_PlanningTag.base,
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_ChassisFeature.base,
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_LocalizationFeature.base,
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_ObstacleFeature.base,
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_RoutingFeature.base,
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_TrafficLightDetectionFeature.base,
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_ADCTrajectoryPoint.base,
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_LearningOutput.base,}};

static void InitDefaultsLearningData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_LearningData_default_instance_;
    new (ptr) ::apollo::planning::LearningData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::LearningData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LearningData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLearningData}, {
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_LearningDataFrame.base,}};

static void InitDefaultsPlanningLearningData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PlanningLearningData_default_instance_;
    new (ptr) ::apollo::planning::PlanningLearningData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PlanningLearningData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PlanningLearningData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPlanningLearningData}, {
      &protobuf_modules_2fcommon_2fproto_2fheader_2eproto::scc_info_Header.base,
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_LearningDataFrame.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_OverlapFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlanningTag.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChassisFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocalizationFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommonPathPointFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommonTrajectoryPointFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrajectoryPointFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerceptionObstacleFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObstacleTrajectoryFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PredictionTrajectoryFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PredictionObstacleFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObstacleFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoutingResponseFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoutingFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficLightFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficLightDetectionFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ADCTrajectoryPoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LearningOutput.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LearningDataFrame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LearningData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlanningLearningData.base);
}

::google::protobuf::Metadata file_level_metadata[21];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OverlapFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OverlapFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OverlapFeature, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::OverlapFeature, distance_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningTag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningTag, lane_turn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningTag, clear_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningTag, crosswalk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningTag, pnc_junction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningTag, signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningTag, stop_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningTag, yield_sign_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ChassisFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ChassisFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ChassisFeature, message_timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ChassisFeature, speed_mps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ChassisFeature, throttle_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ChassisFeature, brake_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ChassisFeature, steering_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ChassisFeature, gear_location_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LocalizationFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LocalizationFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LocalizationFeature, message_timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LocalizationFeature, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LocalizationFeature, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LocalizationFeature, linear_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LocalizationFeature, linear_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LocalizationFeature, angular_velocity_),
  4,
  0,
  5,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CommonPathPointFeature, lane_id_),
  1,
  2,
  3,
  4,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, path_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, relative_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::CommonTrajectoryPointFeature, gaussian_info_),
  0,
  2,
  3,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrajectoryPointFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrajectoryPointFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrajectoryPointFeature, timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrajectoryPointFeature, trajectory_point_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PerceptionObstacleFeature, polygon_point_),
  3,
  0,
  4,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ObstacleTrajectoryFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ObstacleTrajectoryFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ObstacleTrajectoryFeature, perception_obstacle_history_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ObstacleTrajectoryFeature, evaluated_trajectory_point_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PredictionTrajectoryFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PredictionTrajectoryFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PredictionTrajectoryFeature, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PredictionTrajectoryFeature, trajectory_point_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, predicted_period_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, intent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, is_static_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PredictionObstacleFeature, trajectory_),
  2,
  3,
  0,
  1,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ObstacleFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ObstacleFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ObstacleFeature, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ObstacleFeature, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ObstacleFeature, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ObstacleFeature, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ObstacleFeature, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ObstacleFeature, obstacle_trajectory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ObstacleFeature, obstacle_prediction_),
  4,
  2,
  3,
  6,
  5,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RoutingResponseFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RoutingResponseFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RoutingResponseFeature, road_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RoutingResponseFeature, measurement_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RoutingFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RoutingFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RoutingFeature, routing_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RoutingFeature, local_routing_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RoutingFeature, local_routing_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, tracking_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, blink_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightFeature, remaining_time_),
  1,
  0,
  5,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightDetectionFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightDetectionFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightDetectionFeature, message_timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TrafficLightDetectionFeature, traffic_light_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, planning_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ADCTrajectoryPoint, trajectory_point_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningOutput, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningOutput, adc_future_trajectory_point_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningDataFrame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningDataFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningDataFrame, message_timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningDataFrame, frame_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningDataFrame, map_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningDataFrame, planning_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningDataFrame, chassis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningDataFrame, localization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningDataFrame, obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningDataFrame, routing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningDataFrame, traffic_light_detection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningDataFrame, adc_trajectory_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningDataFrame, output_),
  7,
  8,
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  ~0u,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::LearningData, learning_data_frame_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningLearningData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningLearningData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningLearningData, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningLearningData, learning_data_frame_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::planning::OverlapFeature)},
  { 9, 21, sizeof(::apollo::planning::PlanningTag)},
  { 28, 39, sizeof(::apollo::planning::ChassisFeature)},
  { 45, 56, sizeof(::apollo::planning::LocalizationFeature)},
  { 62, 73, sizeof(::apollo::planning::CommonPathPointFeature)},
  { 79, 89, sizeof(::apollo::planning::CommonTrajectoryPointFeature)},
  { 94, 101, sizeof(::apollo::planning::TrajectoryPointFeature)},
  { 103, 114, sizeof(::apollo::planning::PerceptionObstacleFeature)},
  { 120, 127, sizeof(::apollo::planning::ObstacleTrajectoryFeature)},
  { 129, 136, sizeof(::apollo::planning::PredictionTrajectoryFeature)},
  { 138, 149, sizeof(::apollo::planning::PredictionObstacleFeature)},
  { 155, 167, sizeof(::apollo::planning::ObstacleFeature)},
  { 174, 181, sizeof(::apollo::planning::RoutingResponseFeature)},
  { 183, 191, sizeof(::apollo::planning::RoutingFeature)},
  { 194, 205, sizeof(::apollo::planning::TrafficLightFeature)},
  { 211, 218, sizeof(::apollo::planning::TrafficLightDetectionFeature)},
  { 220, 228, sizeof(::apollo::planning::ADCTrajectoryPoint)},
  { 231, 237, sizeof(::apollo::planning::LearningOutput)},
  { 238, 254, sizeof(::apollo::planning::LearningDataFrame)},
  { 265, 271, sizeof(::apollo::planning::LearningData)},
  { 272, 279, sizeof(::apollo::planning::PlanningLearningData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_OverlapFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PlanningTag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ChassisFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_LocalizationFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_CommonPathPointFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_CommonTrajectoryPointFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_TrajectoryPointFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PerceptionObstacleFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ObstacleTrajectoryFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PredictionTrajectoryFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PredictionObstacleFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ObstacleFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_RoutingResponseFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_RoutingFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_TrafficLightFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_TrafficLightDetectionFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ADCTrajectoryPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_LearningOutput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_LearningDataFrame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_LearningData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PlanningLearningData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/planning/proto/learning_data.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 21);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n*modules/planning/proto/learning_data.p"
      "roto\022\017apollo.planning\032\"modules/canbus/pr"
      "oto/chassis.proto\032#modules/common/proto/"
      "geometry.proto\032!modules/common/proto/hea"
      "der.proto\032$modules/common/proto/pnc_poin"
      "t.proto\032 modules/map/proto/map_lane.prot"
      "o\0322modules/perception/proto/perception_o"
      "bstacle.proto\032&modules/prediction/proto/"
      "feature.proto\0322modules/prediction/proto/"
      "prediction_obstacle.proto\0326modules/perce"
      "ption/proto/traffic_light_detection.prot"
      "o\032#modules/routing/proto/routing.proto\"."
      "\n\016OverlapFeature\022\n\n\002id\030\001 \001(\t\022\020\n\010distance"
      "\030\002 \001(\001\"\367\002\n\013PlanningTag\022.\n\tlane_turn\030\001 \001("
      "\0162\033.apollo.hdmap.Lane.LaneTurn\0223\n\nclear_"
      "area\030\002 \001(\0132\037.apollo.planning.OverlapFeat"
      "ure\0222\n\tcrosswalk\030\003 \001(\0132\037.apollo.planning"
      ".OverlapFeature\0225\n\014pnc_junction\030\004 \001(\0132\037."
      "apollo.planning.OverlapFeature\022/\n\006signal"
      "\030\005 \001(\0132\037.apollo.planning.OverlapFeature\022"
      "2\n\tstop_sign\030\006 \001(\0132\037.apollo.planning.Ove"
      "rlapFeature\0223\n\nyield_sign\030\007 \001(\0132\037.apollo"
      ".planning.OverlapFeature\"\322\001\n\016ChassisFeat"
      "ure\022\035\n\025message_timestamp_sec\030\001 \001(\001\022\021\n\tsp"
      "eed_mps\030\002 \001(\002\022\033\n\023throttle_percentage\030\003 \001"
      "(\002\022\030\n\020brake_percentage\030\004 \001(\002\022\033\n\023steering"
      "_percentage\030\005 \001(\002\022:\n\rgear_location\030\006 \001(\016"
      "2#.apollo.canbus.Chassis.GearPosition\"\210\002"
      "\n\023LocalizationFeature\022\035\n\025message_timesta"
      "mp_sec\030\001 \001(\001\022)\n\010position\030\002 \001(\0132\027.apollo."
      "common.PointENU\022\017\n\007heading\030\003 \001(\001\022/\n\017line"
      "ar_velocity\030\004 \001(\0132\026.apollo.common.Point3"
      "D\0223\n\023linear_acceleration\030\005 \001(\0132\026.apollo."
      "common.Point3D\0220\n\020angular_velocity\030\006 \001(\013"
      "2\026.apollo.common.Point3D\"d\n\026CommonPathPo"
      "intFeature\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 "
      "\001(\001\022\r\n\005theta\030\004 \001(\001\022\t\n\001s\030\005 \001(\001\022\017\n\007lane_id"
      "\030\006 \001(\t\"\274\001\n\034CommonTrajectoryPointFeature\022"
      ";\n\npath_point\030\001 \001(\0132\'.apollo.planning.Co"
      "mmonPathPointFeature\022\t\n\001v\030\002 \001(\001\022\t\n\001a\030\003 \001"
      "(\001\022\025\n\rrelative_time\030\004 \001(\001\0222\n\rgaussian_in"
      "fo\030\005 \001(\0132\033.apollo.common.GaussianInfo\"x\n"
      "\026TrajectoryPointFeature\022\025\n\rtimestamp_sec"
      "\030\001 \001(\001\022G\n\020trajectory_point\030\002 \001(\0132-.apoll"
      "o.planning.CommonTrajectoryPointFeature\""
      "\362\001\n\031PerceptionObstacleFeature\022\025\n\rtimesta"
      "mp_sec\030\001 \001(\001\022(\n\010position\030\002 \001(\0132\026.apollo."
      "common.Point3D\022\r\n\005theta\030\003 \001(\001\022(\n\010velocit"
      "y\030\004 \001(\0132\026.apollo.common.Point3D\022,\n\014accel"
      "eration\030\005 \001(\0132\026.apollo.common.Point3D\022-\n"
      "\rpolygon_point\030\006 \003(\0132\026.apollo.common.Poi"
      "nt3D\"\271\001\n\031ObstacleTrajectoryFeature\022O\n\033pe"
      "rception_obstacle_history\030\001 \003(\0132*.apollo"
      ".planning.PerceptionObstacleFeature\022K\n\032e"
      "valuated_trajectory_point\030\002 \003(\0132\'.apollo"
      ".planning.TrajectoryPointFeature\"u\n\033Pred"
      "ictionTrajectoryFeature\022\023\n\013probability\030\001"
      " \001(\001\022A\n\020trajectory_point\030\002 \003(\0132\'.apollo."
      "planning.TrajectoryPointFeature\"\222\002\n\031Pred"
      "ictionObstacleFeature\022\025\n\rtimestamp_sec\030\001"
      " \001(\001\022\030\n\020predicted_period\030\002 \001(\001\0221\n\006intent"
      "\030\003 \001(\0132!.apollo.prediction.ObstacleInten"
      "t\0225\n\010priority\030\004 \001(\0132#.apollo.prediction."
      "ObstaclePriority\022\030\n\tis_static\030\005 \001(\010:\005fal"
      "se\022@\n\ntrajectory\030\006 \003(\0132,.apollo.planning"
      ".PredictionTrajectoryFeature\"\230\002\n\017Obstacl"
      "eFeature\022\n\n\002id\030\001 \001(\005\022\016\n\006length\030\002 \001(\001\022\r\n\005"
      "width\030\003 \001(\001\022\016\n\006height\030\004 \001(\001\0228\n\004type\030\005 \001("
      "\0162*.apollo.perception.PerceptionObstacle"
      ".Type\022G\n\023obstacle_trajectory\030\006 \001(\0132*.apo"
      "llo.planning.ObstacleTrajectoryFeature\022G"
      "\n\023obstacle_prediction\030\007 \001(\0132*.apollo.pla"
      "nning.PredictionObstacleFeature\"u\n\026Routi"
      "ngResponseFeature\022)\n\004road\030\001 \003(\0132\033.apollo"
      ".routing.RoadSegment\0220\n\013measurement\030\002 \001("
      "\0132\033.apollo.routing.Measurement\"\262\001\n\016Routi"
      "ngFeature\022A\n\020routing_response\030\001 \001(\0132\'.ap"
      "ollo.planning.RoutingResponseFeature\022\035\n\025"
      "local_routing_lane_id\030\002 \003(\t\022>\n\rlocal_rou"
      "ting\030\003 \001(\0132\'.apollo.planning.RoutingResp"
      "onseFeature\"\254\001\n\023TrafficLightFeature\0224\n\005c"
      "olor\030\001 \001(\0162%.apollo.perception.TrafficLi"
      "ght.Color\022\n\n\002id\030\002 \001(\t\022\025\n\nconfidence\030\003 \001("
      "\001:\0011\022\025\n\rtracking_time\030\004 \001(\001\022\r\n\005blink\030\005 \001"
      "(\010\022\026\n\016remaining_time\030\006 \001(\001\"z\n\034TrafficLig"
      "htDetectionFeature\022\035\n\025message_timestamp_"
      "sec\030\001 \001(\001\022;\n\rtraffic_light\030\002 \003(\0132$.apoll"
      "o.planning.TrafficLightFeature\"\250\001\n\022ADCTr"
      "ajectoryPoint\022\025\n\rtimestamp_sec\030\001 \001(\001\0222\n\014"
      "planning_tag\030\002 \001(\0132\034.apollo.planning.Pla"
      "nningTag\022G\n\020trajectory_point\030\003 \001(\0132-.apo"
      "llo.planning.CommonTrajectoryPointFeatur"
      "e\"^\n\016LearningOutput\022L\n\033adc_future_trajec"
      "tory_point\030\001 \003(\0132\'.apollo.planning.Traje"
      "ctoryPointFeature\"\243\004\n\021LearningDataFrame\022"
      "\035\n\025message_timestamp_sec\030\001 \001(\001\022\021\n\tframe_"
      "num\030\002 \001(\r\022\020\n\010map_name\030\003 \001(\t\0222\n\014planning_"
      "tag\030\004 \001(\0132\034.apollo.planning.PlanningTag\022"
      "0\n\007chassis\030\005 \001(\0132\037.apollo.planning.Chass"
      "isFeature\022:\n\014localization\030\006 \001(\0132$.apollo"
      ".planning.LocalizationFeature\0222\n\010obstacl"
      "e\030\007 \003(\0132 .apollo.planning.ObstacleFeatur"
      "e\0220\n\007routing\030\010 \001(\0132\037.apollo.planning.Rou"
      "tingFeature\022N\n\027traffic_light_detection\030\t"
      " \001(\0132-.apollo.planning.TrafficLightDetec"
      "tionFeature\022A\n\024adc_trajectory_point\030\n \003("
      "\0132#.apollo.planning.ADCTrajectoryPoint\022/"
      "\n\006output\030\013 \001(\0132\037.apollo.planning.Learnin"
      "gOutput\"O\n\014LearningData\022\?\n\023learning_data"
      "_frame\030\001 \003(\0132\".apollo.planning.LearningD"
      "ataFrame\"~\n\024PlanningLearningData\022%\n\006head"
      "er\030\001 \001(\0132\025.apollo.common.Header\022\?\n\023learn"
      "ing_data_frame\030\002 \001(\0132\".apollo.planning.L"
      "earningDataFrame"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4536);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/learning_data.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::AddDescriptors();
  ::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::AddDescriptors();
  ::protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::AddDescriptors();
  ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::AddDescriptors();
  ::protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::AddDescriptors();
  ::protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::AddDescriptors();
  ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto
namespace apollo {
namespace planning {

// ===================================================================

void OverlapFeature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OverlapFeature::kIdFieldNumber;
const int OverlapFeature::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OverlapFeature::OverlapFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_OverlapFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.OverlapFeature)
}
OverlapFeature::OverlapFeature(const OverlapFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.OverlapFeature)
}

void OverlapFeature::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distance_ = 0;
}

OverlapFeature::~OverlapFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.OverlapFeature)
  SharedDtor();
}

void OverlapFeature::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OverlapFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OverlapFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OverlapFeature& OverlapFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_OverlapFeature.base);
  return *internal_default_instance();
}


void OverlapFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.OverlapFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  distance_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OverlapFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.OverlapFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.OverlapFeature.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.OverlapFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.OverlapFeature)
  return false;
#undef DO_
}

void OverlapFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.OverlapFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.OverlapFeature.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double distance = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.OverlapFeature)
}

::google::protobuf::uint8* OverlapFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.OverlapFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.OverlapFeature.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double distance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.OverlapFeature)
  return target;
}

size_t OverlapFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.OverlapFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double distance = 2;
    if (has_distance()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OverlapFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.OverlapFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const OverlapFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OverlapFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.OverlapFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.OverlapFeature)
    MergeFrom(*source);
  }
}

void OverlapFeature::MergeFrom(const OverlapFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.OverlapFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OverlapFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.OverlapFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OverlapFeature::CopyFrom(const OverlapFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.OverlapFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverlapFeature::IsInitialized() const {
  return true;
}

void OverlapFeature::Swap(OverlapFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OverlapFeature::InternalSwap(OverlapFeature* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(distance_, other->distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OverlapFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlanningTag::InitAsDefaultInstance() {
  ::apollo::planning::_PlanningTag_default_instance_._instance.get_mutable()->clear_area_ = const_cast< ::apollo::planning::OverlapFeature*>(
      ::apollo::planning::OverlapFeature::internal_default_instance());
  ::apollo::planning::_PlanningTag_default_instance_._instance.get_mutable()->crosswalk_ = const_cast< ::apollo::planning::OverlapFeature*>(
      ::apollo::planning::OverlapFeature::internal_default_instance());
  ::apollo::planning::_PlanningTag_default_instance_._instance.get_mutable()->pnc_junction_ = const_cast< ::apollo::planning::OverlapFeature*>(
      ::apollo::planning::OverlapFeature::internal_default_instance());
  ::apollo::planning::_PlanningTag_default_instance_._instance.get_mutable()->signal_ = const_cast< ::apollo::planning::OverlapFeature*>(
      ::apollo::planning::OverlapFeature::internal_default_instance());
  ::apollo::planning::_PlanningTag_default_instance_._instance.get_mutable()->stop_sign_ = const_cast< ::apollo::planning::OverlapFeature*>(
      ::apollo::planning::OverlapFeature::internal_default_instance());
  ::apollo::planning::_PlanningTag_default_instance_._instance.get_mutable()->yield_sign_ = const_cast< ::apollo::planning::OverlapFeature*>(
      ::apollo::planning::OverlapFeature::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningTag::kLaneTurnFieldNumber;
const int PlanningTag::kClearAreaFieldNumber;
const int PlanningTag::kCrosswalkFieldNumber;
const int PlanningTag::kPncJunctionFieldNumber;
const int PlanningTag::kSignalFieldNumber;
const int PlanningTag::kStopSignFieldNumber;
const int PlanningTag::kYieldSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningTag::PlanningTag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_PlanningTag.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlanningTag)
}
PlanningTag::PlanningTag(const PlanningTag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_clear_area()) {
    clear_area_ = new ::apollo::planning::OverlapFeature(*from.clear_area_);
  } else {
    clear_area_ = NULL;
  }
  if (from.has_crosswalk()) {
    crosswalk_ = new ::apollo::planning::OverlapFeature(*from.crosswalk_);
  } else {
    crosswalk_ = NULL;
  }
  if (from.has_pnc_junction()) {
    pnc_junction_ = new ::apollo::planning::OverlapFeature(*from.pnc_junction_);
  } else {
    pnc_junction_ = NULL;
  }
  if (from.has_signal()) {
    signal_ = new ::apollo::planning::OverlapFeature(*from.signal_);
  } else {
    signal_ = NULL;
  }
  if (from.has_stop_sign()) {
    stop_sign_ = new ::apollo::planning::OverlapFeature(*from.stop_sign_);
  } else {
    stop_sign_ = NULL;
  }
  if (from.has_yield_sign()) {
    yield_sign_ = new ::apollo::planning::OverlapFeature(*from.yield_sign_);
  } else {
    yield_sign_ = NULL;
  }
  lane_turn_ = from.lane_turn_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningTag)
}

void PlanningTag::SharedCtor() {
  ::memset(&clear_area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yield_sign_) -
      reinterpret_cast<char*>(&clear_area_)) + sizeof(yield_sign_));
  lane_turn_ = 1;
}

PlanningTag::~PlanningTag() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningTag)
  SharedDtor();
}

void PlanningTag::SharedDtor() {
  if (this != internal_default_instance()) delete clear_area_;
  if (this != internal_default_instance()) delete crosswalk_;
  if (this != internal_default_instance()) delete pnc_junction_;
  if (this != internal_default_instance()) delete signal_;
  if (this != internal_default_instance()) delete stop_sign_;
  if (this != internal_default_instance()) delete yield_sign_;
}

void PlanningTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlanningTag::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanningTag& PlanningTag::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_PlanningTag.base);
  return *internal_default_instance();
}


void PlanningTag::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(clear_area_ != NULL);
      clear_area_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(crosswalk_ != NULL);
      crosswalk_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pnc_junction_ != NULL);
      pnc_junction_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(signal_ != NULL);
      signal_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(stop_sign_ != NULL);
      stop_sign_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(yield_sign_ != NULL);
      yield_sign_->Clear();
    }
    lane_turn_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlanningTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PlanningTag)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Lane.LaneTurn lane_turn = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::hdmap::Lane_LaneTurn_IsValid(value)) {
            set_lane_turn(static_cast< ::apollo::hdmap::Lane_LaneTurn >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.OverlapFeature clear_area = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_clear_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.OverlapFeature crosswalk = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_crosswalk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.OverlapFeature pnc_junction = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pnc_junction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.OverlapFeature signal = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.OverlapFeature stop_sign = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.OverlapFeature yield_sign = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yield_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PlanningTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PlanningTag)
  return false;
#undef DO_
}

void PlanningTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PlanningTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Lane.LaneTurn lane_turn = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->lane_turn(), output);
  }

  // optional .apollo.planning.OverlapFeature clear_area = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_clear_area(), output);
  }

  // optional .apollo.planning.OverlapFeature crosswalk = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_crosswalk(), output);
  }

  // optional .apollo.planning.OverlapFeature pnc_junction = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_pnc_junction(), output);
  }

  // optional .apollo.planning.OverlapFeature signal = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_signal(), output);
  }

  // optional .apollo.planning.OverlapFeature stop_sign = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_stop_sign(), output);
  }

  // optional .apollo.planning.OverlapFeature yield_sign = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_yield_sign(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PlanningTag)
}

::google::protobuf::uint8* PlanningTag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Lane.LaneTurn lane_turn = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->lane_turn(), target);
  }

  // optional .apollo.planning.OverlapFeature clear_area = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_clear_area(), deterministic, target);
  }

  // optional .apollo.planning.OverlapFeature crosswalk = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_crosswalk(), deterministic, target);
  }

  // optional .apollo.planning.OverlapFeature pnc_junction = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_pnc_junction(), deterministic, target);
  }

  // optional .apollo.planning.OverlapFeature signal = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_signal(), deterministic, target);
  }

  // optional .apollo.planning.OverlapFeature stop_sign = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_stop_sign(), deterministic, target);
  }

  // optional .apollo.planning.OverlapFeature yield_sign = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_yield_sign(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningTag)
  return target;
}

size_t PlanningTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningTag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .apollo.planning.OverlapFeature clear_area = 2;
    if (has_clear_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *clear_area_);
    }

    // optional .apollo.planning.OverlapFeature crosswalk = 3;
    if (has_crosswalk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *crosswalk_);
    }

    // optional .apollo.planning.OverlapFeature pnc_junction = 4;
    if (has_pnc_junction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pnc_junction_);
    }

    // optional .apollo.planning.OverlapFeature signal = 5;
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *signal_);
    }

    // optional .apollo.planning.OverlapFeature stop_sign = 6;
    if (has_stop_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stop_sign_);
    }

    // optional .apollo.planning.OverlapFeature yield_sign = 7;
    if (has_yield_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *yield_sign_);
    }

    // optional .apollo.hdmap.Lane.LaneTurn lane_turn = 1;
    if (has_lane_turn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lane_turn());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningTag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlanningTag)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningTag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningTag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlanningTag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlanningTag)
    MergeFrom(*source);
  }
}

void PlanningTag::MergeFrom(const PlanningTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_clear_area()->::apollo::planning::OverlapFeature::MergeFrom(from.clear_area());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_crosswalk()->::apollo::planning::OverlapFeature::MergeFrom(from.crosswalk());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_pnc_junction()->::apollo::planning::OverlapFeature::MergeFrom(from.pnc_junction());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_signal()->::apollo::planning::OverlapFeature::MergeFrom(from.signal());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_stop_sign()->::apollo::planning::OverlapFeature::MergeFrom(from.stop_sign());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_yield_sign()->::apollo::planning::OverlapFeature::MergeFrom(from.yield_sign());
    }
    if (cached_has_bits & 0x00000040u) {
      lane_turn_ = from.lane_turn_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlanningTag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlanningTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningTag::CopyFrom(const PlanningTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningTag::IsInitialized() const {
  return true;
}

void PlanningTag::Swap(PlanningTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningTag::InternalSwap(PlanningTag* other) {
  using std::swap;
  swap(clear_area_, other->clear_area_);
  swap(crosswalk_, other->crosswalk_);
  swap(pnc_junction_, other->pnc_junction_);
  swap(signal_, other->signal_);
  swap(stop_sign_, other->stop_sign_);
  swap(yield_sign_, other->yield_sign_);
  swap(lane_turn_, other->lane_turn_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlanningTag::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChassisFeature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChassisFeature::kMessageTimestampSecFieldNumber;
const int ChassisFeature::kSpeedMpsFieldNumber;
const int ChassisFeature::kThrottlePercentageFieldNumber;
const int ChassisFeature::kBrakePercentageFieldNumber;
const int ChassisFeature::kSteeringPercentageFieldNumber;
const int ChassisFeature::kGearLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChassisFeature::ChassisFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_ChassisFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ChassisFeature)
}
ChassisFeature::ChassisFeature(const ChassisFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&message_timestamp_sec_, &from.message_timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_location_) -
    reinterpret_cast<char*>(&message_timestamp_sec_)) + sizeof(gear_location_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ChassisFeature)
}

void ChassisFeature::SharedCtor() {
  ::memset(&message_timestamp_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_location_) -
      reinterpret_cast<char*>(&message_timestamp_sec_)) + sizeof(gear_location_));
}

ChassisFeature::~ChassisFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.ChassisFeature)
  SharedDtor();
}

void ChassisFeature::SharedDtor() {
}

void ChassisFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChassisFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChassisFeature& ChassisFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_ChassisFeature.base);
  return *internal_default_instance();
}


void ChassisFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ChassisFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&message_timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gear_location_) -
        reinterpret_cast<char*>(&message_timestamp_sec_)) + sizeof(gear_location_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChassisFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ChassisFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double message_timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_message_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &message_timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed_mps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_speed_mps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_mps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float throttle_percentage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_throttle_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float brake_percentage = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_brake_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brake_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_percentage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_steering_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.GearPosition gear_location = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear_location(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ChassisFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ChassisFeature)
  return false;
#undef DO_
}

void ChassisFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ChassisFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->message_timestamp_sec(), output);
  }

  // optional float speed_mps = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->speed_mps(), output);
  }

  // optional float throttle_percentage = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->throttle_percentage(), output);
  }

  // optional float brake_percentage = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->brake_percentage(), output);
  }

  // optional float steering_percentage = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->steering_percentage(), output);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->gear_location(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ChassisFeature)
}

::google::protobuf::uint8* ChassisFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ChassisFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->message_timestamp_sec(), target);
  }

  // optional float speed_mps = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->speed_mps(), target);
  }

  // optional float throttle_percentage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->throttle_percentage(), target);
  }

  // optional float brake_percentage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->brake_percentage(), target);
  }

  // optional float steering_percentage = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->steering_percentage(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->gear_location(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ChassisFeature)
  return target;
}

size_t ChassisFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ChassisFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional double message_timestamp_sec = 1;
    if (has_message_timestamp_sec()) {
      total_size += 1 + 8;
    }

    // optional float speed_mps = 2;
    if (has_speed_mps()) {
      total_size += 1 + 4;
    }

    // optional float throttle_percentage = 3;
    if (has_throttle_percentage()) {
      total_size += 1 + 4;
    }

    // optional float brake_percentage = 4;
    if (has_brake_percentage()) {
      total_size += 1 + 4;
    }

    // optional float steering_percentage = 5;
    if (has_steering_percentage()) {
      total_size += 1 + 4;
    }

    // optional .apollo.canbus.Chassis.GearPosition gear_location = 6;
    if (has_gear_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_location());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChassisFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ChassisFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const ChassisFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChassisFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ChassisFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ChassisFeature)
    MergeFrom(*source);
  }
}

void ChassisFeature::MergeFrom(const ChassisFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ChassisFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      message_timestamp_sec_ = from.message_timestamp_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      speed_mps_ = from.speed_mps_;
    }
    if (cached_has_bits & 0x00000004u) {
      throttle_percentage_ = from.throttle_percentage_;
    }
    if (cached_has_bits & 0x00000008u) {
      brake_percentage_ = from.brake_percentage_;
    }
    if (cached_has_bits & 0x00000010u) {
      steering_percentage_ = from.steering_percentage_;
    }
    if (cached_has_bits & 0x00000020u) {
      gear_location_ = from.gear_location_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChassisFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ChassisFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisFeature::CopyFrom(const ChassisFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ChassisFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisFeature::IsInitialized() const {
  return true;
}

void ChassisFeature::Swap(ChassisFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChassisFeature::InternalSwap(ChassisFeature* other) {
  using std::swap;
  swap(message_timestamp_sec_, other->message_timestamp_sec_);
  swap(speed_mps_, other->speed_mps_);
  swap(throttle_percentage_, other->throttle_percentage_);
  swap(brake_percentage_, other->brake_percentage_);
  swap(steering_percentage_, other->steering_percentage_);
  swap(gear_location_, other->gear_location_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChassisFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LocalizationFeature::InitAsDefaultInstance() {
  ::apollo::planning::_LocalizationFeature_default_instance_._instance.get_mutable()->position_ = const_cast< ::apollo::common::PointENU*>(
      ::apollo::common::PointENU::internal_default_instance());
  ::apollo::planning::_LocalizationFeature_default_instance_._instance.get_mutable()->linear_velocity_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::planning::_LocalizationFeature_default_instance_._instance.get_mutable()->linear_acceleration_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::planning::_LocalizationFeature_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
}
void LocalizationFeature::clear_position() {
  if (position_ != NULL) position_->Clear();
  clear_has_position();
}
void LocalizationFeature::clear_linear_velocity() {
  if (linear_velocity_ != NULL) linear_velocity_->Clear();
  clear_has_linear_velocity();
}
void LocalizationFeature::clear_linear_acceleration() {
  if (linear_acceleration_ != NULL) linear_acceleration_->Clear();
  clear_has_linear_acceleration();
}
void LocalizationFeature::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->Clear();
  clear_has_angular_velocity();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalizationFeature::kMessageTimestampSecFieldNumber;
const int LocalizationFeature::kPositionFieldNumber;
const int LocalizationFeature::kHeadingFieldNumber;
const int LocalizationFeature::kLinearVelocityFieldNumber;
const int LocalizationFeature::kLinearAccelerationFieldNumber;
const int LocalizationFeature::kAngularVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalizationFeature::LocalizationFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_LocalizationFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.LocalizationFeature)
}
LocalizationFeature::LocalizationFeature(const LocalizationFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::apollo::common::PointENU(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_linear_velocity()) {
    linear_velocity_ = new ::apollo::common::Point3D(*from.linear_velocity_);
  } else {
    linear_velocity_ = NULL;
  }
  if (from.has_linear_acceleration()) {
    linear_acceleration_ = new ::apollo::common::Point3D(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = NULL;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::apollo::common::Point3D(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  ::memcpy(&message_timestamp_sec_, &from.message_timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&message_timestamp_sec_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LocalizationFeature)
}

void LocalizationFeature::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&position_)) + sizeof(heading_));
}

LocalizationFeature::~LocalizationFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.LocalizationFeature)
  SharedDtor();
}

void LocalizationFeature::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete linear_acceleration_;
  if (this != internal_default_instance()) delete angular_velocity_;
}

void LocalizationFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LocalizationFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocalizationFeature& LocalizationFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_LocalizationFeature.base);
  return *internal_default_instance();
}


void LocalizationFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LocalizationFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(linear_velocity_ != NULL);
      linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(linear_acceleration_ != NULL);
      linear_acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(angular_velocity_ != NULL);
      angular_velocity_->Clear();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&message_timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_) -
        reinterpret_cast<char*>(&message_timestamp_sec_)) + sizeof(heading_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocalizationFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.LocalizationFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double message_timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_message_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &message_timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.PointENU position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D linear_velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D linear_acceleration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D angular_velocity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.LocalizationFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.LocalizationFeature)
  return false;
#undef DO_
}

void LocalizationFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.LocalizationFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->message_timestamp_sec(), output);
  }

  // optional .apollo.common.PointENU position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_position(), output);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->heading(), output);
  }

  // optional .apollo.common.Point3D linear_velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_linear_velocity(), output);
  }

  // optional .apollo.common.Point3D linear_acceleration = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_linear_acceleration(), output);
  }

  // optional .apollo.common.Point3D angular_velocity = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_angular_velocity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.LocalizationFeature)
}

::google::protobuf::uint8* LocalizationFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LocalizationFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->message_timestamp_sec(), target);
  }

  // optional .apollo.common.PointENU position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_position(), deterministic, target);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->heading(), target);
  }

  // optional .apollo.common.Point3D linear_velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_linear_velocity(), deterministic, target);
  }

  // optional .apollo.common.Point3D linear_acceleration = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_linear_acceleration(), deterministic, target);
  }

  // optional .apollo.common.Point3D angular_velocity = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_angular_velocity(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LocalizationFeature)
  return target;
}

size_t LocalizationFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LocalizationFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .apollo.common.PointENU position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .apollo.common.Point3D linear_velocity = 4;
    if (has_linear_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *linear_velocity_);
    }

    // optional .apollo.common.Point3D linear_acceleration = 5;
    if (has_linear_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *linear_acceleration_);
    }

    // optional .apollo.common.Point3D angular_velocity = 6;
    if (has_angular_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *angular_velocity_);
    }

    // optional double message_timestamp_sec = 1;
    if (has_message_timestamp_sec()) {
      total_size += 1 + 8;
    }

    // optional double heading = 3;
    if (has_heading()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalizationFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.LocalizationFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalizationFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalizationFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.LocalizationFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.LocalizationFeature)
    MergeFrom(*source);
  }
}

void LocalizationFeature::MergeFrom(const LocalizationFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LocalizationFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::apollo::common::PointENU::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_linear_velocity()->::apollo::common::Point3D::MergeFrom(from.linear_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_linear_acceleration()->::apollo::common::Point3D::MergeFrom(from.linear_acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_angular_velocity()->::apollo::common::Point3D::MergeFrom(from.angular_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      message_timestamp_sec_ = from.message_timestamp_sec_;
    }
    if (cached_has_bits & 0x00000020u) {
      heading_ = from.heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocalizationFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.LocalizationFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationFeature::CopyFrom(const LocalizationFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LocalizationFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationFeature::IsInitialized() const {
  return true;
}

void LocalizationFeature::Swap(LocalizationFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalizationFeature::InternalSwap(LocalizationFeature* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(linear_velocity_, other->linear_velocity_);
  swap(linear_acceleration_, other->linear_acceleration_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(message_timestamp_sec_, other->message_timestamp_sec_);
  swap(heading_, other->heading_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LocalizationFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommonPathPointFeature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonPathPointFeature::kXFieldNumber;
const int CommonPathPointFeature::kYFieldNumber;
const int CommonPathPointFeature::kZFieldNumber;
const int CommonPathPointFeature::kThetaFieldNumber;
const int CommonPathPointFeature::kSFieldNumber;
const int CommonPathPointFeature::kLaneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonPathPointFeature::CommonPathPointFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_CommonPathPointFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.CommonPathPointFeature)
}
CommonPathPointFeature::CommonPathPointFeature(const CommonPathPointFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lane_id()) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&s_) -
    reinterpret_cast<char*>(&x_)) + sizeof(s_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CommonPathPointFeature)
}

void CommonPathPointFeature::SharedCtor() {
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&x_)) + sizeof(s_));
}

CommonPathPointFeature::~CommonPathPointFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.CommonPathPointFeature)
  SharedDtor();
}

void CommonPathPointFeature::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommonPathPointFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommonPathPointFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommonPathPointFeature& CommonPathPointFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_CommonPathPointFeature.base);
  return *internal_default_instance();
}


void CommonPathPointFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CommonPathPointFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lane_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&s_) -
        reinterpret_cast<char*>(&x_)) + sizeof(s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommonPathPointFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.CommonPathPointFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double s = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lane_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.CommonPathPointFeature.lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.CommonPathPointFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.CommonPathPointFeature)
  return false;
#undef DO_
}

void CommonPathPointFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.CommonPathPointFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double theta = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->theta(), output);
  }

  // optional double s = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->s(), output);
  }

  // optional string lane_id = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.CommonPathPointFeature.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->lane_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.CommonPathPointFeature)
}

::google::protobuf::uint8* CommonPathPointFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CommonPathPointFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double theta = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->theta(), target);
  }

  // optional double s = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->s(), target);
  }

  // optional string lane_id = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.CommonPathPointFeature.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lane_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CommonPathPointFeature)
  return target;
}

size_t CommonPathPointFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CommonPathPointFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string lane_id = 6;
    if (has_lane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lane_id());
    }

    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double theta = 4;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional double s = 5;
    if (has_s()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonPathPointFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.CommonPathPointFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonPathPointFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonPathPointFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.CommonPathPointFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.CommonPathPointFeature)
    MergeFrom(*source);
  }
}

void CommonPathPointFeature::MergeFrom(const CommonPathPointFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CommonPathPointFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_lane_id();
      lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000010u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000020u) {
      s_ = from.s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommonPathPointFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.CommonPathPointFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonPathPointFeature::CopyFrom(const CommonPathPointFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CommonPathPointFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonPathPointFeature::IsInitialized() const {
  return true;
}

void CommonPathPointFeature::Swap(CommonPathPointFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonPathPointFeature::InternalSwap(CommonPathPointFeature* other) {
  using std::swap;
  lane_id_.Swap(&other->lane_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(theta_, other->theta_);
  swap(s_, other->s_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommonPathPointFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommonTrajectoryPointFeature::InitAsDefaultInstance() {
  ::apollo::planning::_CommonTrajectoryPointFeature_default_instance_._instance.get_mutable()->path_point_ = const_cast< ::apollo::planning::CommonPathPointFeature*>(
      ::apollo::planning::CommonPathPointFeature::internal_default_instance());
  ::apollo::planning::_CommonTrajectoryPointFeature_default_instance_._instance.get_mutable()->gaussian_info_ = const_cast< ::apollo::common::GaussianInfo*>(
      ::apollo::common::GaussianInfo::internal_default_instance());
}
void CommonTrajectoryPointFeature::clear_gaussian_info() {
  if (gaussian_info_ != NULL) gaussian_info_->Clear();
  clear_has_gaussian_info();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonTrajectoryPointFeature::kPathPointFieldNumber;
const int CommonTrajectoryPointFeature::kVFieldNumber;
const int CommonTrajectoryPointFeature::kAFieldNumber;
const int CommonTrajectoryPointFeature::kRelativeTimeFieldNumber;
const int CommonTrajectoryPointFeature::kGaussianInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonTrajectoryPointFeature::CommonTrajectoryPointFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_CommonTrajectoryPointFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.CommonTrajectoryPointFeature)
}
CommonTrajectoryPointFeature::CommonTrajectoryPointFeature(const CommonTrajectoryPointFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_path_point()) {
    path_point_ = new ::apollo::planning::CommonPathPointFeature(*from.path_point_);
  } else {
    path_point_ = NULL;
  }
  if (from.has_gaussian_info()) {
    gaussian_info_ = new ::apollo::common::GaussianInfo(*from.gaussian_info_);
  } else {
    gaussian_info_ = NULL;
  }
  ::memcpy(&v_, &from.v_,
    static_cast<size_t>(reinterpret_cast<char*>(&relative_time_) -
    reinterpret_cast<char*>(&v_)) + sizeof(relative_time_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.CommonTrajectoryPointFeature)
}

void CommonTrajectoryPointFeature::SharedCtor() {
  ::memset(&path_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_time_) -
      reinterpret_cast<char*>(&path_point_)) + sizeof(relative_time_));
}

CommonTrajectoryPointFeature::~CommonTrajectoryPointFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.CommonTrajectoryPointFeature)
  SharedDtor();
}

void CommonTrajectoryPointFeature::SharedDtor() {
  if (this != internal_default_instance()) delete path_point_;
  if (this != internal_default_instance()) delete gaussian_info_;
}

void CommonTrajectoryPointFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommonTrajectoryPointFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommonTrajectoryPointFeature& CommonTrajectoryPointFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_CommonTrajectoryPointFeature.base);
  return *internal_default_instance();
}


void CommonTrajectoryPointFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.CommonTrajectoryPointFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(path_point_ != NULL);
      path_point_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gaussian_info_ != NULL);
      gaussian_info_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&v_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&relative_time_) -
        reinterpret_cast<char*>(&v_)) + sizeof(relative_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommonTrajectoryPointFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.CommonTrajectoryPointFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.CommonPathPointFeature path_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double v = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double a = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double relative_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_relative_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.GaussianInfo gaussian_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gaussian_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.CommonTrajectoryPointFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.CommonTrajectoryPointFeature)
  return false;
#undef DO_
}

void CommonTrajectoryPointFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.CommonTrajectoryPointFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.CommonPathPointFeature path_point = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_path_point(), output);
  }

  // optional double v = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->v(), output);
  }

  // optional double a = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->a(), output);
  }

  // optional double relative_time = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->relative_time(), output);
  }

  // optional .apollo.common.GaussianInfo gaussian_info = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_gaussian_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.CommonTrajectoryPointFeature)
}

::google::protobuf::uint8* CommonTrajectoryPointFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.CommonTrajectoryPointFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.CommonPathPointFeature path_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_path_point(), deterministic, target);
  }

  // optional double v = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->v(), target);
  }

  // optional double a = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->a(), target);
  }

  // optional double relative_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->relative_time(), target);
  }

  // optional .apollo.common.GaussianInfo gaussian_info = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_gaussian_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.CommonTrajectoryPointFeature)
  return target;
}

size_t CommonTrajectoryPointFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.CommonTrajectoryPointFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .apollo.planning.CommonPathPointFeature path_point = 1;
    if (has_path_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *path_point_);
    }

    // optional .apollo.common.GaussianInfo gaussian_info = 5;
    if (has_gaussian_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gaussian_info_);
    }

    // optional double v = 2;
    if (has_v()) {
      total_size += 1 + 8;
    }

    // optional double a = 3;
    if (has_a()) {
      total_size += 1 + 8;
    }

    // optional double relative_time = 4;
    if (has_relative_time()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonTrajectoryPointFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.CommonTrajectoryPointFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonTrajectoryPointFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonTrajectoryPointFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.CommonTrajectoryPointFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.CommonTrajectoryPointFeature)
    MergeFrom(*source);
  }
}

void CommonTrajectoryPointFeature::MergeFrom(const CommonTrajectoryPointFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.CommonTrajectoryPointFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_path_point()->::apollo::planning::CommonPathPointFeature::MergeFrom(from.path_point());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_gaussian_info()->::apollo::common::GaussianInfo::MergeFrom(from.gaussian_info());
    }
    if (cached_has_bits & 0x00000004u) {
      v_ = from.v_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000010u) {
      relative_time_ = from.relative_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommonTrajectoryPointFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.CommonTrajectoryPointFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonTrajectoryPointFeature::CopyFrom(const CommonTrajectoryPointFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.CommonTrajectoryPointFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonTrajectoryPointFeature::IsInitialized() const {
  return true;
}

void CommonTrajectoryPointFeature::Swap(CommonTrajectoryPointFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonTrajectoryPointFeature::InternalSwap(CommonTrajectoryPointFeature* other) {
  using std::swap;
  swap(path_point_, other->path_point_);
  swap(gaussian_info_, other->gaussian_info_);
  swap(v_, other->v_);
  swap(a_, other->a_);
  swap(relative_time_, other->relative_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommonTrajectoryPointFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrajectoryPointFeature::InitAsDefaultInstance() {
  ::apollo::planning::_TrajectoryPointFeature_default_instance_._instance.get_mutable()->trajectory_point_ = const_cast< ::apollo::planning::CommonTrajectoryPointFeature*>(
      ::apollo::planning::CommonTrajectoryPointFeature::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryPointFeature::kTimestampSecFieldNumber;
const int TrajectoryPointFeature::kTrajectoryPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryPointFeature::TrajectoryPointFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_TrajectoryPointFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TrajectoryPointFeature)
}
TrajectoryPointFeature::TrajectoryPointFeature(const TrajectoryPointFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trajectory_point()) {
    trajectory_point_ = new ::apollo::planning::CommonTrajectoryPointFeature(*from.trajectory_point_);
  } else {
    trajectory_point_ = NULL;
  }
  timestamp_sec_ = from.timestamp_sec_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrajectoryPointFeature)
}

void TrajectoryPointFeature::SharedCtor() {
  ::memset(&trajectory_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_sec_) -
      reinterpret_cast<char*>(&trajectory_point_)) + sizeof(timestamp_sec_));
}

TrajectoryPointFeature::~TrajectoryPointFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrajectoryPointFeature)
  SharedDtor();
}

void TrajectoryPointFeature::SharedDtor() {
  if (this != internal_default_instance()) delete trajectory_point_;
}

void TrajectoryPointFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrajectoryPointFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryPointFeature& TrajectoryPointFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_TrajectoryPointFeature.base);
  return *internal_default_instance();
}


void TrajectoryPointFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrajectoryPointFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(trajectory_point_ != NULL);
    trajectory_point_->Clear();
  }
  timestamp_sec_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrajectoryPointFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.TrajectoryPointFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.CommonTrajectoryPointFeature trajectory_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.TrajectoryPointFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.TrajectoryPointFeature)
  return false;
#undef DO_
}

void TrajectoryPointFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.TrajectoryPointFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp_sec(), output);
  }

  // optional .apollo.planning.CommonTrajectoryPointFeature trajectory_point = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_trajectory_point(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.TrajectoryPointFeature)
}

::google::protobuf::uint8* TrajectoryPointFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrajectoryPointFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp_sec(), target);
  }

  // optional .apollo.planning.CommonTrajectoryPointFeature trajectory_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_trajectory_point(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrajectoryPointFeature)
  return target;
}

size_t TrajectoryPointFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrajectoryPointFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.planning.CommonTrajectoryPointFeature trajectory_point = 2;
    if (has_trajectory_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *trajectory_point_);
    }

    // optional double timestamp_sec = 1;
    if (has_timestamp_sec()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryPointFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TrajectoryPointFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPointFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryPointFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TrajectoryPointFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TrajectoryPointFeature)
    MergeFrom(*source);
  }
}

void TrajectoryPointFeature::MergeFrom(const TrajectoryPointFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrajectoryPointFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_trajectory_point()->::apollo::planning::CommonTrajectoryPointFeature::MergeFrom(from.trajectory_point());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrajectoryPointFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TrajectoryPointFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPointFeature::CopyFrom(const TrajectoryPointFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrajectoryPointFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPointFeature::IsInitialized() const {
  return true;
}

void TrajectoryPointFeature::Swap(TrajectoryPointFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryPointFeature::InternalSwap(TrajectoryPointFeature* other) {
  using std::swap;
  swap(trajectory_point_, other->trajectory_point_);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrajectoryPointFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PerceptionObstacleFeature::InitAsDefaultInstance() {
  ::apollo::planning::_PerceptionObstacleFeature_default_instance_._instance.get_mutable()->position_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::planning::_PerceptionObstacleFeature_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::planning::_PerceptionObstacleFeature_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
}
void PerceptionObstacleFeature::clear_position() {
  if (position_ != NULL) position_->Clear();
  clear_has_position();
}
void PerceptionObstacleFeature::clear_velocity() {
  if (velocity_ != NULL) velocity_->Clear();
  clear_has_velocity();
}
void PerceptionObstacleFeature::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->Clear();
  clear_has_acceleration();
}
void PerceptionObstacleFeature::clear_polygon_point() {
  polygon_point_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptionObstacleFeature::kTimestampSecFieldNumber;
const int PerceptionObstacleFeature::kPositionFieldNumber;
const int PerceptionObstacleFeature::kThetaFieldNumber;
const int PerceptionObstacleFeature::kVelocityFieldNumber;
const int PerceptionObstacleFeature::kAccelerationFieldNumber;
const int PerceptionObstacleFeature::kPolygonPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptionObstacleFeature::PerceptionObstacleFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_PerceptionObstacleFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PerceptionObstacleFeature)
}
PerceptionObstacleFeature::PerceptionObstacleFeature(const PerceptionObstacleFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      polygon_point_(from.polygon_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::apollo::common::Point3D(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::apollo::common::Point3D(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::apollo::common::Point3D(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  ::memcpy(&timestamp_sec_, &from.timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&theta_) -
    reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(theta_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PerceptionObstacleFeature)
}

void PerceptionObstacleFeature::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_) -
      reinterpret_cast<char*>(&position_)) + sizeof(theta_));
}

PerceptionObstacleFeature::~PerceptionObstacleFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.PerceptionObstacleFeature)
  SharedDtor();
}

void PerceptionObstacleFeature::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
}

void PerceptionObstacleFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PerceptionObstacleFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PerceptionObstacleFeature& PerceptionObstacleFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_PerceptionObstacleFeature.base);
  return *internal_default_instance();
}


void PerceptionObstacleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PerceptionObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(acceleration_ != NULL);
      acceleration_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&theta_) -
        reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(theta_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerceptionObstacleFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PerceptionObstacleFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D acceleration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.Point3D polygon_point = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_polygon_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PerceptionObstacleFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PerceptionObstacleFeature)
  return false;
#undef DO_
}

void PerceptionObstacleFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PerceptionObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp_sec(), output);
  }

  // optional .apollo.common.Point3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_position(), output);
  }

  // optional double theta = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->theta(), output);
  }

  // optional .apollo.common.Point3D velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_velocity(), output);
  }

  // optional .apollo.common.Point3D acceleration = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_acceleration(), output);
  }

  // repeated .apollo.common.Point3D polygon_point = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->polygon_point(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PerceptionObstacleFeature)
}

::google::protobuf::uint8* PerceptionObstacleFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PerceptionObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp_sec(), target);
  }

  // optional .apollo.common.Point3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_position(), deterministic, target);
  }

  // optional double theta = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->theta(), target);
  }

  // optional .apollo.common.Point3D velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_velocity(), deterministic, target);
  }

  // optional .apollo.common.Point3D acceleration = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_acceleration(), deterministic, target);
  }

  // repeated .apollo.common.Point3D polygon_point = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->polygon_point(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PerceptionObstacleFeature)
  return target;
}

size_t PerceptionObstacleFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PerceptionObstacleFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.common.Point3D polygon_point = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->polygon_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->polygon_point(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .apollo.common.Point3D position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .apollo.common.Point3D velocity = 4;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional .apollo.common.Point3D acceleration = 5;
    if (has_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *acceleration_);
    }

    // optional double timestamp_sec = 1;
    if (has_timestamp_sec()) {
      total_size += 1 + 8;
    }

    // optional double theta = 3;
    if (has_theta()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerceptionObstacleFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PerceptionObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptionObstacleFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PerceptionObstacleFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PerceptionObstacleFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PerceptionObstacleFeature)
    MergeFrom(*source);
  }
}

void PerceptionObstacleFeature::MergeFrom(const PerceptionObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PerceptionObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_point_.MergeFrom(from.polygon_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::apollo::common::Point3D::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_velocity()->::apollo::common::Point3D::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_acceleration()->::apollo::common::Point3D::MergeFrom(from.acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    if (cached_has_bits & 0x00000010u) {
      theta_ = from.theta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerceptionObstacleFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PerceptionObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptionObstacleFeature::CopyFrom(const PerceptionObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PerceptionObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacleFeature::IsInitialized() const {
  return true;
}

void PerceptionObstacleFeature::Swap(PerceptionObstacleFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptionObstacleFeature::InternalSwap(PerceptionObstacleFeature* other) {
  using std::swap;
  CastToBase(&polygon_point_)->InternalSwap(CastToBase(&other->polygon_point_));
  swap(position_, other->position_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(theta_, other->theta_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PerceptionObstacleFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObstacleTrajectoryFeature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleTrajectoryFeature::kPerceptionObstacleHistoryFieldNumber;
const int ObstacleTrajectoryFeature::kEvaluatedTrajectoryPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleTrajectoryFeature::ObstacleTrajectoryFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_ObstacleTrajectoryFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObstacleTrajectoryFeature)
}
ObstacleTrajectoryFeature::ObstacleTrajectoryFeature(const ObstacleTrajectoryFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      perception_obstacle_history_(from.perception_obstacle_history_),
      evaluated_trajectory_point_(from.evaluated_trajectory_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObstacleTrajectoryFeature)
}

void ObstacleTrajectoryFeature::SharedCtor() {
}

ObstacleTrajectoryFeature::~ObstacleTrajectoryFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObstacleTrajectoryFeature)
  SharedDtor();
}

void ObstacleTrajectoryFeature::SharedDtor() {
}

void ObstacleTrajectoryFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ObstacleTrajectoryFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleTrajectoryFeature& ObstacleTrajectoryFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_ObstacleTrajectoryFeature.base);
  return *internal_default_instance();
}


void ObstacleTrajectoryFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObstacleTrajectoryFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perception_obstacle_history_.Clear();
  evaluated_trajectory_point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObstacleTrajectoryFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ObstacleTrajectoryFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.PerceptionObstacleFeature perception_obstacle_history = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_perception_obstacle_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.TrajectoryPointFeature evaluated_trajectory_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_evaluated_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ObstacleTrajectoryFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ObstacleTrajectoryFeature)
  return false;
#undef DO_
}

void ObstacleTrajectoryFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ObstacleTrajectoryFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.PerceptionObstacleFeature perception_obstacle_history = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perception_obstacle_history_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->perception_obstacle_history(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.planning.TrajectoryPointFeature evaluated_trajectory_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->evaluated_trajectory_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->evaluated_trajectory_point(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ObstacleTrajectoryFeature)
}

::google::protobuf::uint8* ObstacleTrajectoryFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObstacleTrajectoryFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.PerceptionObstacleFeature perception_obstacle_history = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perception_obstacle_history_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->perception_obstacle_history(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.planning.TrajectoryPointFeature evaluated_trajectory_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->evaluated_trajectory_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->evaluated_trajectory_point(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObstacleTrajectoryFeature)
  return target;
}

size_t ObstacleTrajectoryFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObstacleTrajectoryFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.PerceptionObstacleFeature perception_obstacle_history = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->perception_obstacle_history_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->perception_obstacle_history(static_cast<int>(i)));
    }
  }

  // repeated .apollo.planning.TrajectoryPointFeature evaluated_trajectory_point = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->evaluated_trajectory_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->evaluated_trajectory_point(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleTrajectoryFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObstacleTrajectoryFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleTrajectoryFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleTrajectoryFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObstacleTrajectoryFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObstacleTrajectoryFeature)
    MergeFrom(*source);
  }
}

void ObstacleTrajectoryFeature::MergeFrom(const ObstacleTrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObstacleTrajectoryFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perception_obstacle_history_.MergeFrom(from.perception_obstacle_history_);
  evaluated_trajectory_point_.MergeFrom(from.evaluated_trajectory_point_);
}

void ObstacleTrajectoryFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObstacleTrajectoryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleTrajectoryFeature::CopyFrom(const ObstacleTrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObstacleTrajectoryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleTrajectoryFeature::IsInitialized() const {
  return true;
}

void ObstacleTrajectoryFeature::Swap(ObstacleTrajectoryFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleTrajectoryFeature::InternalSwap(ObstacleTrajectoryFeature* other) {
  using std::swap;
  CastToBase(&perception_obstacle_history_)->InternalSwap(CastToBase(&other->perception_obstacle_history_));
  CastToBase(&evaluated_trajectory_point_)->InternalSwap(CastToBase(&other->evaluated_trajectory_point_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ObstacleTrajectoryFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PredictionTrajectoryFeature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictionTrajectoryFeature::kProbabilityFieldNumber;
const int PredictionTrajectoryFeature::kTrajectoryPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictionTrajectoryFeature::PredictionTrajectoryFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_PredictionTrajectoryFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PredictionTrajectoryFeature)
}
PredictionTrajectoryFeature::PredictionTrajectoryFeature(const PredictionTrajectoryFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      trajectory_point_(from.trajectory_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PredictionTrajectoryFeature)
}

void PredictionTrajectoryFeature::SharedCtor() {
  probability_ = 0;
}

PredictionTrajectoryFeature::~PredictionTrajectoryFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.PredictionTrajectoryFeature)
  SharedDtor();
}

void PredictionTrajectoryFeature::SharedDtor() {
}

void PredictionTrajectoryFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PredictionTrajectoryFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PredictionTrajectoryFeature& PredictionTrajectoryFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_PredictionTrajectoryFeature.base);
  return *internal_default_instance();
}


void PredictionTrajectoryFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PredictionTrajectoryFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_point_.Clear();
  probability_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PredictionTrajectoryFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PredictionTrajectoryFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double probability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.TrajectoryPointFeature trajectory_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PredictionTrajectoryFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PredictionTrajectoryFeature)
  return false;
#undef DO_
}

void PredictionTrajectoryFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PredictionTrajectoryFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // repeated .apollo.planning.TrajectoryPointFeature trajectory_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->trajectory_point(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PredictionTrajectoryFeature)
}

::google::protobuf::uint8* PredictionTrajectoryFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PredictionTrajectoryFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // repeated .apollo.planning.TrajectoryPointFeature trajectory_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->trajectory_point(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PredictionTrajectoryFeature)
  return target;
}

size_t PredictionTrajectoryFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PredictionTrajectoryFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.TrajectoryPointFeature trajectory_point = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectory_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trajectory_point(static_cast<int>(i)));
    }
  }

  // optional double probability = 1;
  if (has_probability()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictionTrajectoryFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PredictionTrajectoryFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictionTrajectoryFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PredictionTrajectoryFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PredictionTrajectoryFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PredictionTrajectoryFeature)
    MergeFrom(*source);
  }
}

void PredictionTrajectoryFeature::MergeFrom(const PredictionTrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PredictionTrajectoryFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  if (from.has_probability()) {
    set_probability(from.probability());
  }
}

void PredictionTrajectoryFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PredictionTrajectoryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictionTrajectoryFeature::CopyFrom(const PredictionTrajectoryFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PredictionTrajectoryFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionTrajectoryFeature::IsInitialized() const {
  return true;
}

void PredictionTrajectoryFeature::Swap(PredictionTrajectoryFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictionTrajectoryFeature::InternalSwap(PredictionTrajectoryFeature* other) {
  using std::swap;
  CastToBase(&trajectory_point_)->InternalSwap(CastToBase(&other->trajectory_point_));
  swap(probability_, other->probability_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PredictionTrajectoryFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PredictionObstacleFeature::InitAsDefaultInstance() {
  ::apollo::planning::_PredictionObstacleFeature_default_instance_._instance.get_mutable()->intent_ = const_cast< ::apollo::prediction::ObstacleIntent*>(
      ::apollo::prediction::ObstacleIntent::internal_default_instance());
  ::apollo::planning::_PredictionObstacleFeature_default_instance_._instance.get_mutable()->priority_ = const_cast< ::apollo::prediction::ObstaclePriority*>(
      ::apollo::prediction::ObstaclePriority::internal_default_instance());
}
void PredictionObstacleFeature::clear_intent() {
  if (intent_ != NULL) intent_->Clear();
  clear_has_intent();
}
void PredictionObstacleFeature::clear_priority() {
  if (priority_ != NULL) priority_->Clear();
  clear_has_priority();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictionObstacleFeature::kTimestampSecFieldNumber;
const int PredictionObstacleFeature::kPredictedPeriodFieldNumber;
const int PredictionObstacleFeature::kIntentFieldNumber;
const int PredictionObstacleFeature::kPriorityFieldNumber;
const int PredictionObstacleFeature::kIsStaticFieldNumber;
const int PredictionObstacleFeature::kTrajectoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictionObstacleFeature::PredictionObstacleFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_PredictionObstacleFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PredictionObstacleFeature)
}
PredictionObstacleFeature::PredictionObstacleFeature(const PredictionObstacleFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      trajectory_(from.trajectory_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_intent()) {
    intent_ = new ::apollo::prediction::ObstacleIntent(*from.intent_);
  } else {
    intent_ = NULL;
  }
  if (from.has_priority()) {
    priority_ = new ::apollo::prediction::ObstaclePriority(*from.priority_);
  } else {
    priority_ = NULL;
  }
  ::memcpy(&timestamp_sec_, &from.timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_static_) -
    reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(is_static_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PredictionObstacleFeature)
}

void PredictionObstacleFeature::SharedCtor() {
  ::memset(&intent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_static_) -
      reinterpret_cast<char*>(&intent_)) + sizeof(is_static_));
}

PredictionObstacleFeature::~PredictionObstacleFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.PredictionObstacleFeature)
  SharedDtor();
}

void PredictionObstacleFeature::SharedDtor() {
  if (this != internal_default_instance()) delete intent_;
  if (this != internal_default_instance()) delete priority_;
}

void PredictionObstacleFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PredictionObstacleFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PredictionObstacleFeature& PredictionObstacleFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_PredictionObstacleFeature.base);
  return *internal_default_instance();
}


void PredictionObstacleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PredictionObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(intent_ != NULL);
      intent_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(priority_ != NULL);
      priority_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_static_) -
        reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(is_static_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PredictionObstacleFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PredictionObstacleFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double predicted_period = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_predicted_period();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &predicted_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.prediction.ObstacleIntent intent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_intent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.prediction.ObstaclePriority priority = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_priority()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_static = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_is_static();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_static_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.PredictionTrajectoryFeature trajectory = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PredictionObstacleFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PredictionObstacleFeature)
  return false;
#undef DO_
}

void PredictionObstacleFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PredictionObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp_sec(), output);
  }

  // optional double predicted_period = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->predicted_period(), output);
  }

  // optional .apollo.prediction.ObstacleIntent intent = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_intent(), output);
  }

  // optional .apollo.prediction.ObstaclePriority priority = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_priority(), output);
  }

  // optional bool is_static = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_static(), output);
  }

  // repeated .apollo.planning.PredictionTrajectoryFeature trajectory = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->trajectory(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PredictionObstacleFeature)
}

::google::protobuf::uint8* PredictionObstacleFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PredictionObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp_sec(), target);
  }

  // optional double predicted_period = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->predicted_period(), target);
  }

  // optional .apollo.prediction.ObstacleIntent intent = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_intent(), deterministic, target);
  }

  // optional .apollo.prediction.ObstaclePriority priority = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_priority(), deterministic, target);
  }

  // optional bool is_static = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_static(), target);
  }

  // repeated .apollo.planning.PredictionTrajectoryFeature trajectory = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->trajectory(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PredictionObstacleFeature)
  return target;
}

size_t PredictionObstacleFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PredictionObstacleFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.PredictionTrajectoryFeature trajectory = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectory_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trajectory(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .apollo.prediction.ObstacleIntent intent = 3;
    if (has_intent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *intent_);
    }

    // optional .apollo.prediction.ObstaclePriority priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *priority_);
    }

    // optional double timestamp_sec = 1;
    if (has_timestamp_sec()) {
      total_size += 1 + 8;
    }

    // optional double predicted_period = 2;
    if (has_predicted_period()) {
      total_size += 1 + 8;
    }

    // optional bool is_static = 5 [default = false];
    if (has_is_static()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictionObstacleFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PredictionObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictionObstacleFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PredictionObstacleFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PredictionObstacleFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PredictionObstacleFeature)
    MergeFrom(*source);
  }
}

void PredictionObstacleFeature::MergeFrom(const PredictionObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PredictionObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_.MergeFrom(from.trajectory_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_intent()->::apollo::prediction::ObstacleIntent::MergeFrom(from.intent());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_priority()->::apollo::prediction::ObstaclePriority::MergeFrom(from.priority());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    if (cached_has_bits & 0x00000008u) {
      predicted_period_ = from.predicted_period_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_static_ = from.is_static_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PredictionObstacleFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PredictionObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictionObstacleFeature::CopyFrom(const PredictionObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PredictionObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionObstacleFeature::IsInitialized() const {
  return true;
}

void PredictionObstacleFeature::Swap(PredictionObstacleFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictionObstacleFeature::InternalSwap(PredictionObstacleFeature* other) {
  using std::swap;
  CastToBase(&trajectory_)->InternalSwap(CastToBase(&other->trajectory_));
  swap(intent_, other->intent_);
  swap(priority_, other->priority_);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(predicted_period_, other->predicted_period_);
  swap(is_static_, other->is_static_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PredictionObstacleFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObstacleFeature::InitAsDefaultInstance() {
  ::apollo::planning::_ObstacleFeature_default_instance_._instance.get_mutable()->obstacle_trajectory_ = const_cast< ::apollo::planning::ObstacleTrajectoryFeature*>(
      ::apollo::planning::ObstacleTrajectoryFeature::internal_default_instance());
  ::apollo::planning::_ObstacleFeature_default_instance_._instance.get_mutable()->obstacle_prediction_ = const_cast< ::apollo::planning::PredictionObstacleFeature*>(
      ::apollo::planning::PredictionObstacleFeature::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleFeature::kIdFieldNumber;
const int ObstacleFeature::kLengthFieldNumber;
const int ObstacleFeature::kWidthFieldNumber;
const int ObstacleFeature::kHeightFieldNumber;
const int ObstacleFeature::kTypeFieldNumber;
const int ObstacleFeature::kObstacleTrajectoryFieldNumber;
const int ObstacleFeature::kObstaclePredictionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleFeature::ObstacleFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_ObstacleFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ObstacleFeature)
}
ObstacleFeature::ObstacleFeature(const ObstacleFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_obstacle_trajectory()) {
    obstacle_trajectory_ = new ::apollo::planning::ObstacleTrajectoryFeature(*from.obstacle_trajectory_);
  } else {
    obstacle_trajectory_ = NULL;
  }
  if (from.has_obstacle_prediction()) {
    obstacle_prediction_ = new ::apollo::planning::PredictionObstacleFeature(*from.obstacle_prediction_);
  } else {
    obstacle_prediction_ = NULL;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&length_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ObstacleFeature)
}

void ObstacleFeature::SharedCtor() {
  ::memset(&obstacle_trajectory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&obstacle_trajectory_)) + sizeof(height_));
}

ObstacleFeature::~ObstacleFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.ObstacleFeature)
  SharedDtor();
}

void ObstacleFeature::SharedDtor() {
  if (this != internal_default_instance()) delete obstacle_trajectory_;
  if (this != internal_default_instance()) delete obstacle_prediction_;
}

void ObstacleFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ObstacleFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleFeature& ObstacleFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_ObstacleFeature.base);
  return *internal_default_instance();
}


void ObstacleFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(obstacle_trajectory_ != NULL);
      obstacle_trajectory_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(obstacle_prediction_ != NULL);
      obstacle_prediction_->Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&length_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObstacleFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ObstacleFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.PerceptionObstacle.Type type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::PerceptionObstacle_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::perception::PerceptionObstacle_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ObstacleTrajectoryFeature obstacle_trajectory = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obstacle_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PredictionObstacleFeature obstacle_prediction = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obstacle_prediction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ObstacleFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ObstacleFeature)
  return false;
#undef DO_
}

void ObstacleFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->length(), output);
  }

  // optional double width = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->width(), output);
  }

  // optional double height = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->height(), output);
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional .apollo.planning.ObstacleTrajectoryFeature obstacle_trajectory = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_obstacle_trajectory(), output);
  }

  // optional .apollo.planning.PredictionObstacleFeature obstacle_prediction = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_obstacle_prediction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ObstacleFeature)
}

::google::protobuf::uint8* ObstacleFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ObstacleFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->length(), target);
  }

  // optional double width = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->width(), target);
  }

  // optional double height = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->height(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional .apollo.planning.ObstacleTrajectoryFeature obstacle_trajectory = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_obstacle_trajectory(), deterministic, target);
  }

  // optional .apollo.planning.PredictionObstacleFeature obstacle_prediction = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_obstacle_prediction(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ObstacleFeature)
  return target;
}

size_t ObstacleFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ObstacleFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .apollo.planning.ObstacleTrajectoryFeature obstacle_trajectory = 6;
    if (has_obstacle_trajectory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *obstacle_trajectory_);
    }

    // optional .apollo.planning.PredictionObstacleFeature obstacle_prediction = 7;
    if (has_obstacle_prediction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *obstacle_prediction_);
    }

    // optional double length = 2;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double width = 3;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .apollo.perception.PerceptionObstacle.Type type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double height = 4;
    if (has_height()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ObstacleFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ObstacleFeature)
    MergeFrom(*source);
  }
}

void ObstacleFeature::MergeFrom(const ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ObstacleFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_obstacle_trajectory()->::apollo::planning::ObstacleTrajectoryFeature::MergeFrom(from.obstacle_trajectory());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_obstacle_prediction()->::apollo::planning::PredictionObstacleFeature::MergeFrom(from.obstacle_prediction());
    }
    if (cached_has_bits & 0x00000004u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObstacleFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleFeature::CopyFrom(const ObstacleFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ObstacleFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleFeature::IsInitialized() const {
  return true;
}

void ObstacleFeature::Swap(ObstacleFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleFeature::InternalSwap(ObstacleFeature* other) {
  using std::swap;
  swap(obstacle_trajectory_, other->obstacle_trajectory_);
  swap(obstacle_prediction_, other->obstacle_prediction_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ObstacleFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoutingResponseFeature::InitAsDefaultInstance() {
  ::apollo::planning::_RoutingResponseFeature_default_instance_._instance.get_mutable()->measurement_ = const_cast< ::apollo::routing::Measurement*>(
      ::apollo::routing::Measurement::internal_default_instance());
}
void RoutingResponseFeature::clear_road() {
  road_.Clear();
}
void RoutingResponseFeature::clear_measurement() {
  if (measurement_ != NULL) measurement_->Clear();
  clear_has_measurement();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoutingResponseFeature::kRoadFieldNumber;
const int RoutingResponseFeature::kMeasurementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoutingResponseFeature::RoutingResponseFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_RoutingResponseFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.RoutingResponseFeature)
}
RoutingResponseFeature::RoutingResponseFeature(const RoutingResponseFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      road_(from.road_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_measurement()) {
    measurement_ = new ::apollo::routing::Measurement(*from.measurement_);
  } else {
    measurement_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.RoutingResponseFeature)
}

void RoutingResponseFeature::SharedCtor() {
  measurement_ = NULL;
}

RoutingResponseFeature::~RoutingResponseFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.RoutingResponseFeature)
  SharedDtor();
}

void RoutingResponseFeature::SharedDtor() {
  if (this != internal_default_instance()) delete measurement_;
}

void RoutingResponseFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoutingResponseFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoutingResponseFeature& RoutingResponseFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_RoutingResponseFeature.base);
  return *internal_default_instance();
}


void RoutingResponseFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.RoutingResponseFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(measurement_ != NULL);
    measurement_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoutingResponseFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.RoutingResponseFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.routing.RoadSegment road = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_road()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.routing.Measurement measurement = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_measurement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.RoutingResponseFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.RoutingResponseFeature)
  return false;
#undef DO_
}

void RoutingResponseFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.RoutingResponseFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.routing.RoadSegment road = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->road(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.routing.Measurement measurement = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_measurement(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.RoutingResponseFeature)
}

::google::protobuf::uint8* RoutingResponseFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.RoutingResponseFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.routing.RoadSegment road = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->road(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.routing.Measurement measurement = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_measurement(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.RoutingResponseFeature)
  return target;
}

size_t RoutingResponseFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.RoutingResponseFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.routing.RoadSegment road = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->road_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road(static_cast<int>(i)));
    }
  }

  // optional .apollo.routing.Measurement measurement = 2;
  if (has_measurement()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *measurement_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingResponseFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.RoutingResponseFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingResponseFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoutingResponseFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.RoutingResponseFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.RoutingResponseFeature)
    MergeFrom(*source);
  }
}

void RoutingResponseFeature::MergeFrom(const RoutingResponseFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.RoutingResponseFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_.MergeFrom(from.road_);
  if (from.has_measurement()) {
    mutable_measurement()->::apollo::routing::Measurement::MergeFrom(from.measurement());
  }
}

void RoutingResponseFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.RoutingResponseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingResponseFeature::CopyFrom(const RoutingResponseFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.RoutingResponseFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingResponseFeature::IsInitialized() const {
  return true;
}

void RoutingResponseFeature::Swap(RoutingResponseFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoutingResponseFeature::InternalSwap(RoutingResponseFeature* other) {
  using std::swap;
  CastToBase(&road_)->InternalSwap(CastToBase(&other->road_));
  swap(measurement_, other->measurement_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoutingResponseFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoutingFeature::InitAsDefaultInstance() {
  ::apollo::planning::_RoutingFeature_default_instance_._instance.get_mutable()->routing_response_ = const_cast< ::apollo::planning::RoutingResponseFeature*>(
      ::apollo::planning::RoutingResponseFeature::internal_default_instance());
  ::apollo::planning::_RoutingFeature_default_instance_._instance.get_mutable()->local_routing_ = const_cast< ::apollo::planning::RoutingResponseFeature*>(
      ::apollo::planning::RoutingResponseFeature::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoutingFeature::kRoutingResponseFieldNumber;
const int RoutingFeature::kLocalRoutingLaneIdFieldNumber;
const int RoutingFeature::kLocalRoutingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoutingFeature::RoutingFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_RoutingFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.RoutingFeature)
}
RoutingFeature::RoutingFeature(const RoutingFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      local_routing_lane_id_(from.local_routing_lane_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_routing_response()) {
    routing_response_ = new ::apollo::planning::RoutingResponseFeature(*from.routing_response_);
  } else {
    routing_response_ = NULL;
  }
  if (from.has_local_routing()) {
    local_routing_ = new ::apollo::planning::RoutingResponseFeature(*from.local_routing_);
  } else {
    local_routing_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.RoutingFeature)
}

void RoutingFeature::SharedCtor() {
  ::memset(&routing_response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_routing_) -
      reinterpret_cast<char*>(&routing_response_)) + sizeof(local_routing_));
}

RoutingFeature::~RoutingFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.RoutingFeature)
  SharedDtor();
}

void RoutingFeature::SharedDtor() {
  if (this != internal_default_instance()) delete routing_response_;
  if (this != internal_default_instance()) delete local_routing_;
}

void RoutingFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoutingFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoutingFeature& RoutingFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_RoutingFeature.base);
  return *internal_default_instance();
}


void RoutingFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.RoutingFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  local_routing_lane_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(routing_response_ != NULL);
      routing_response_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(local_routing_ != NULL);
      local_routing_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoutingFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.RoutingFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.RoutingResponseFeature routing_response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_routing_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string local_routing_lane_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_local_routing_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->local_routing_lane_id(this->local_routing_lane_id_size() - 1).data(),
            static_cast<int>(this->local_routing_lane_id(this->local_routing_lane_id_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.RoutingFeature.local_routing_lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.RoutingResponseFeature local_routing = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_routing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.RoutingFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.RoutingFeature)
  return false;
#undef DO_
}

void RoutingFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.RoutingFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.RoutingResponseFeature routing_response = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_routing_response(), output);
  }

  // repeated string local_routing_lane_id = 2;
  for (int i = 0, n = this->local_routing_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_routing_lane_id(i).data(), static_cast<int>(this->local_routing_lane_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.RoutingFeature.local_routing_lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->local_routing_lane_id(i), output);
  }

  // optional .apollo.planning.RoutingResponseFeature local_routing = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_local_routing(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.RoutingFeature)
}

::google::protobuf::uint8* RoutingFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.RoutingFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.RoutingResponseFeature routing_response = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_routing_response(), deterministic, target);
  }

  // repeated string local_routing_lane_id = 2;
  for (int i = 0, n = this->local_routing_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_routing_lane_id(i).data(), static_cast<int>(this->local_routing_lane_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.RoutingFeature.local_routing_lane_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->local_routing_lane_id(i), target);
  }

  // optional .apollo.planning.RoutingResponseFeature local_routing = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_local_routing(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.RoutingFeature)
  return target;
}

size_t RoutingFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.RoutingFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string local_routing_lane_id = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->local_routing_lane_id_size());
  for (int i = 0, n = this->local_routing_lane_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->local_routing_lane_id(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.planning.RoutingResponseFeature routing_response = 1;
    if (has_routing_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *routing_response_);
    }

    // optional .apollo.planning.RoutingResponseFeature local_routing = 3;
    if (has_local_routing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *local_routing_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.RoutingFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoutingFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.RoutingFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.RoutingFeature)
    MergeFrom(*source);
  }
}

void RoutingFeature::MergeFrom(const RoutingFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.RoutingFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  local_routing_lane_id_.MergeFrom(from.local_routing_lane_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_routing_response()->::apollo::planning::RoutingResponseFeature::MergeFrom(from.routing_response());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_local_routing()->::apollo::planning::RoutingResponseFeature::MergeFrom(from.local_routing());
    }
  }
}

void RoutingFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.RoutingFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingFeature::CopyFrom(const RoutingFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.RoutingFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingFeature::IsInitialized() const {
  return true;
}

void RoutingFeature::Swap(RoutingFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoutingFeature::InternalSwap(RoutingFeature* other) {
  using std::swap;
  local_routing_lane_id_.InternalSwap(CastToBase(&other->local_routing_lane_id_));
  swap(routing_response_, other->routing_response_);
  swap(local_routing_, other->local_routing_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoutingFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficLightFeature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightFeature::kColorFieldNumber;
const int TrafficLightFeature::kIdFieldNumber;
const int TrafficLightFeature::kConfidenceFieldNumber;
const int TrafficLightFeature::kTrackingTimeFieldNumber;
const int TrafficLightFeature::kBlinkFieldNumber;
const int TrafficLightFeature::kRemainingTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightFeature::TrafficLightFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_TrafficLightFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TrafficLightFeature)
}
TrafficLightFeature::TrafficLightFeature(const TrafficLightFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&color_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrafficLightFeature)
}

void TrafficLightFeature::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_time_) -
      reinterpret_cast<char*>(&color_)) + sizeof(remaining_time_));
  confidence_ = 1;
}

TrafficLightFeature::~TrafficLightFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrafficLightFeature)
  SharedDtor();
}

void TrafficLightFeature::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrafficLightFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficLightFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightFeature& TrafficLightFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_TrafficLightFeature.base);
  return *internal_default_instance();
}


void TrafficLightFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrafficLightFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remaining_time_) -
        reinterpret_cast<char*>(&color_)) + sizeof(remaining_time_));
    confidence_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLightFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.TrafficLightFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.TrafficLight.Color color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::TrafficLight_Color_IsValid(value)) {
            set_color(static_cast< ::apollo::perception::TrafficLight_Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.TrafficLightFeature.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double confidence = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tracking_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_tracking_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool blink = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_blink();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blink_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double remaining_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_remaining_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &remaining_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.TrafficLightFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.TrafficLightFeature)
  return false;
#undef DO_
}

void TrafficLightFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.TrafficLightFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.TrafficLight.Color color = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->color(), output);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TrafficLightFeature.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional double confidence = 3 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->confidence(), output);
  }

  // optional double tracking_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->tracking_time(), output);
  }

  // optional bool blink = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->blink(), output);
  }

  // optional double remaining_time = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->remaining_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.TrafficLightFeature)
}

::google::protobuf::uint8* TrafficLightFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrafficLightFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.TrafficLight.Color color = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->color(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TrafficLightFeature.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional double confidence = 3 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->confidence(), target);
  }

  // optional double tracking_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->tracking_time(), target);
  }

  // optional bool blink = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->blink(), target);
  }

  // optional double remaining_time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->remaining_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrafficLightFeature)
  return target;
}

size_t TrafficLightFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrafficLightFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .apollo.perception.TrafficLight.Color color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // optional bool blink = 5;
    if (has_blink()) {
      total_size += 1 + 1;
    }

    // optional double tracking_time = 4;
    if (has_tracking_time()) {
      total_size += 1 + 8;
    }

    // optional double remaining_time = 6;
    if (has_remaining_time()) {
      total_size += 1 + 8;
    }

    // optional double confidence = 3 [default = 1];
    if (has_confidence()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLightFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TrafficLightFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TrafficLightFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TrafficLightFeature)
    MergeFrom(*source);
  }
}

void TrafficLightFeature::MergeFrom(const TrafficLightFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrafficLightFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      blink_ = from.blink_;
    }
    if (cached_has_bits & 0x00000008u) {
      tracking_time_ = from.tracking_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      remaining_time_ = from.remaining_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLightFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TrafficLightFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightFeature::CopyFrom(const TrafficLightFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrafficLightFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightFeature::IsInitialized() const {
  return true;
}

void TrafficLightFeature::Swap(TrafficLightFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightFeature::InternalSwap(TrafficLightFeature* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(color_, other->color_);
  swap(blink_, other->blink_);
  swap(tracking_time_, other->tracking_time_);
  swap(remaining_time_, other->remaining_time_);
  swap(confidence_, other->confidence_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficLightFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficLightDetectionFeature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightDetectionFeature::kMessageTimestampSecFieldNumber;
const int TrafficLightDetectionFeature::kTrafficLightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightDetectionFeature::TrafficLightDetectionFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_TrafficLightDetectionFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TrafficLightDetectionFeature)
}
TrafficLightDetectionFeature::TrafficLightDetectionFeature(const TrafficLightDetectionFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      traffic_light_(from.traffic_light_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_timestamp_sec_ = from.message_timestamp_sec_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TrafficLightDetectionFeature)
}

void TrafficLightDetectionFeature::SharedCtor() {
  message_timestamp_sec_ = 0;
}

TrafficLightDetectionFeature::~TrafficLightDetectionFeature() {
  // @@protoc_insertion_point(destructor:apollo.planning.TrafficLightDetectionFeature)
  SharedDtor();
}

void TrafficLightDetectionFeature::SharedDtor() {
}

void TrafficLightDetectionFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficLightDetectionFeature::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightDetectionFeature& TrafficLightDetectionFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_TrafficLightDetectionFeature.base);
  return *internal_default_instance();
}


void TrafficLightDetectionFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TrafficLightDetectionFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traffic_light_.Clear();
  message_timestamp_sec_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLightDetectionFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.TrafficLightDetectionFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double message_timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_message_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &message_timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.TrafficLightFeature traffic_light = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_traffic_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.TrafficLightDetectionFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.TrafficLightDetectionFeature)
  return false;
#undef DO_
}

void TrafficLightDetectionFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.TrafficLightDetectionFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->message_timestamp_sec(), output);
  }

  // repeated .apollo.planning.TrafficLightFeature traffic_light = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_light_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->traffic_light(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.TrafficLightDetectionFeature)
}

::google::protobuf::uint8* TrafficLightDetectionFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TrafficLightDetectionFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->message_timestamp_sec(), target);
  }

  // repeated .apollo.planning.TrafficLightFeature traffic_light = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_light_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->traffic_light(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TrafficLightDetectionFeature)
  return target;
}

size_t TrafficLightDetectionFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TrafficLightDetectionFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.TrafficLightFeature traffic_light = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_light_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->traffic_light(static_cast<int>(i)));
    }
  }

  // optional double message_timestamp_sec = 1;
  if (has_message_timestamp_sec()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLightDetectionFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TrafficLightDetectionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightDetectionFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightDetectionFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TrafficLightDetectionFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TrafficLightDetectionFeature)
    MergeFrom(*source);
  }
}

void TrafficLightDetectionFeature::MergeFrom(const TrafficLightDetectionFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TrafficLightDetectionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traffic_light_.MergeFrom(from.traffic_light_);
  if (from.has_message_timestamp_sec()) {
    set_message_timestamp_sec(from.message_timestamp_sec());
  }
}

void TrafficLightDetectionFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TrafficLightDetectionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightDetectionFeature::CopyFrom(const TrafficLightDetectionFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TrafficLightDetectionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightDetectionFeature::IsInitialized() const {
  return true;
}

void TrafficLightDetectionFeature::Swap(TrafficLightDetectionFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightDetectionFeature::InternalSwap(TrafficLightDetectionFeature* other) {
  using std::swap;
  CastToBase(&traffic_light_)->InternalSwap(CastToBase(&other->traffic_light_));
  swap(message_timestamp_sec_, other->message_timestamp_sec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficLightDetectionFeature::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ADCTrajectoryPoint::InitAsDefaultInstance() {
  ::apollo::planning::_ADCTrajectoryPoint_default_instance_._instance.get_mutable()->planning_tag_ = const_cast< ::apollo::planning::PlanningTag*>(
      ::apollo::planning::PlanningTag::internal_default_instance());
  ::apollo::planning::_ADCTrajectoryPoint_default_instance_._instance.get_mutable()->trajectory_point_ = const_cast< ::apollo::planning::CommonTrajectoryPointFeature*>(
      ::apollo::planning::CommonTrajectoryPointFeature::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADCTrajectoryPoint::kTimestampSecFieldNumber;
const int ADCTrajectoryPoint::kPlanningTagFieldNumber;
const int ADCTrajectoryPoint::kTrajectoryPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADCTrajectoryPoint::ADCTrajectoryPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_ADCTrajectoryPoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ADCTrajectoryPoint)
}
ADCTrajectoryPoint::ADCTrajectoryPoint(const ADCTrajectoryPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_planning_tag()) {
    planning_tag_ = new ::apollo::planning::PlanningTag(*from.planning_tag_);
  } else {
    planning_tag_ = NULL;
  }
  if (from.has_trajectory_point()) {
    trajectory_point_ = new ::apollo::planning::CommonTrajectoryPointFeature(*from.trajectory_point_);
  } else {
    trajectory_point_ = NULL;
  }
  timestamp_sec_ = from.timestamp_sec_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ADCTrajectoryPoint)
}

void ADCTrajectoryPoint::SharedCtor() {
  ::memset(&planning_tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_sec_) -
      reinterpret_cast<char*>(&planning_tag_)) + sizeof(timestamp_sec_));
}

ADCTrajectoryPoint::~ADCTrajectoryPoint() {
  // @@protoc_insertion_point(destructor:apollo.planning.ADCTrajectoryPoint)
  SharedDtor();
}

void ADCTrajectoryPoint::SharedDtor() {
  if (this != internal_default_instance()) delete planning_tag_;
  if (this != internal_default_instance()) delete trajectory_point_;
}

void ADCTrajectoryPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ADCTrajectoryPoint::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ADCTrajectoryPoint& ADCTrajectoryPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_ADCTrajectoryPoint.base);
  return *internal_default_instance();
}


void ADCTrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ADCTrajectoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(planning_tag_ != NULL);
      planning_tag_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(trajectory_point_ != NULL);
      trajectory_point_->Clear();
    }
  }
  timestamp_sec_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ADCTrajectoryPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ADCTrajectoryPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PlanningTag planning_tag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_planning_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.CommonTrajectoryPointFeature trajectory_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ADCTrajectoryPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ADCTrajectoryPoint)
  return false;
#undef DO_
}

void ADCTrajectoryPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ADCTrajectoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp_sec(), output);
  }

  // optional .apollo.planning.PlanningTag planning_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_planning_tag(), output);
  }

  // optional .apollo.planning.CommonTrajectoryPointFeature trajectory_point = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_trajectory_point(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ADCTrajectoryPoint)
}

::google::protobuf::uint8* ADCTrajectoryPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ADCTrajectoryPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp_sec(), target);
  }

  // optional .apollo.planning.PlanningTag planning_tag = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_planning_tag(), deterministic, target);
  }

  // optional .apollo.planning.CommonTrajectoryPointFeature trajectory_point = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_trajectory_point(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ADCTrajectoryPoint)
  return target;
}

size_t ADCTrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ADCTrajectoryPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.planning.PlanningTag planning_tag = 2;
    if (has_planning_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *planning_tag_);
    }

    // optional .apollo.planning.CommonTrajectoryPointFeature trajectory_point = 3;
    if (has_trajectory_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *trajectory_point_);
    }

    // optional double timestamp_sec = 1;
    if (has_timestamp_sec()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ADCTrajectoryPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ADCTrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ADCTrajectoryPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ADCTrajectoryPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ADCTrajectoryPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ADCTrajectoryPoint)
    MergeFrom(*source);
  }
}

void ADCTrajectoryPoint::MergeFrom(const ADCTrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ADCTrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_planning_tag()->::apollo::planning::PlanningTag::MergeFrom(from.planning_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_trajectory_point()->::apollo::planning::CommonTrajectoryPointFeature::MergeFrom(from.trajectory_point());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ADCTrajectoryPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ADCTrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ADCTrajectoryPoint::CopyFrom(const ADCTrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ADCTrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectoryPoint::IsInitialized() const {
  return true;
}

void ADCTrajectoryPoint::Swap(ADCTrajectoryPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADCTrajectoryPoint::InternalSwap(ADCTrajectoryPoint* other) {
  using std::swap;
  swap(planning_tag_, other->planning_tag_);
  swap(trajectory_point_, other->trajectory_point_);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ADCTrajectoryPoint::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LearningOutput::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LearningOutput::kAdcFutureTrajectoryPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LearningOutput::LearningOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_LearningOutput.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.LearningOutput)
}
LearningOutput::LearningOutput(const LearningOutput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      adc_future_trajectory_point_(from.adc_future_trajectory_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LearningOutput)
}

void LearningOutput::SharedCtor() {
}

LearningOutput::~LearningOutput() {
  // @@protoc_insertion_point(destructor:apollo.planning.LearningOutput)
  SharedDtor();
}

void LearningOutput::SharedDtor() {
}

void LearningOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LearningOutput::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LearningOutput& LearningOutput::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_LearningOutput.base);
  return *internal_default_instance();
}


void LearningOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LearningOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  adc_future_trajectory_point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LearningOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.LearningOutput)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.TrajectoryPointFeature adc_future_trajectory_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_adc_future_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.LearningOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.LearningOutput)
  return false;
#undef DO_
}

void LearningOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.LearningOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.TrajectoryPointFeature adc_future_trajectory_point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->adc_future_trajectory_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->adc_future_trajectory_point(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.LearningOutput)
}

::google::protobuf::uint8* LearningOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LearningOutput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.TrajectoryPointFeature adc_future_trajectory_point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->adc_future_trajectory_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->adc_future_trajectory_point(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LearningOutput)
  return target;
}

size_t LearningOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LearningOutput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.TrajectoryPointFeature adc_future_trajectory_point = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->adc_future_trajectory_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->adc_future_trajectory_point(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LearningOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.LearningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const LearningOutput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LearningOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.LearningOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.LearningOutput)
    MergeFrom(*source);
  }
}

void LearningOutput::MergeFrom(const LearningOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LearningOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  adc_future_trajectory_point_.MergeFrom(from.adc_future_trajectory_point_);
}

void LearningOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.LearningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearningOutput::CopyFrom(const LearningOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LearningOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningOutput::IsInitialized() const {
  return true;
}

void LearningOutput::Swap(LearningOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LearningOutput::InternalSwap(LearningOutput* other) {
  using std::swap;
  CastToBase(&adc_future_trajectory_point_)->InternalSwap(CastToBase(&other->adc_future_trajectory_point_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LearningOutput::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LearningDataFrame::InitAsDefaultInstance() {
  ::apollo::planning::_LearningDataFrame_default_instance_._instance.get_mutable()->planning_tag_ = const_cast< ::apollo::planning::PlanningTag*>(
      ::apollo::planning::PlanningTag::internal_default_instance());
  ::apollo::planning::_LearningDataFrame_default_instance_._instance.get_mutable()->chassis_ = const_cast< ::apollo::planning::ChassisFeature*>(
      ::apollo::planning::ChassisFeature::internal_default_instance());
  ::apollo::planning::_LearningDataFrame_default_instance_._instance.get_mutable()->localization_ = const_cast< ::apollo::planning::LocalizationFeature*>(
      ::apollo::planning::LocalizationFeature::internal_default_instance());
  ::apollo::planning::_LearningDataFrame_default_instance_._instance.get_mutable()->routing_ = const_cast< ::apollo::planning::RoutingFeature*>(
      ::apollo::planning::RoutingFeature::internal_default_instance());
  ::apollo::planning::_LearningDataFrame_default_instance_._instance.get_mutable()->traffic_light_detection_ = const_cast< ::apollo::planning::TrafficLightDetectionFeature*>(
      ::apollo::planning::TrafficLightDetectionFeature::internal_default_instance());
  ::apollo::planning::_LearningDataFrame_default_instance_._instance.get_mutable()->output_ = const_cast< ::apollo::planning::LearningOutput*>(
      ::apollo::planning::LearningOutput::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LearningDataFrame::kMessageTimestampSecFieldNumber;
const int LearningDataFrame::kFrameNumFieldNumber;
const int LearningDataFrame::kMapNameFieldNumber;
const int LearningDataFrame::kPlanningTagFieldNumber;
const int LearningDataFrame::kChassisFieldNumber;
const int LearningDataFrame::kLocalizationFieldNumber;
const int LearningDataFrame::kObstacleFieldNumber;
const int LearningDataFrame::kRoutingFieldNumber;
const int LearningDataFrame::kTrafficLightDetectionFieldNumber;
const int LearningDataFrame::kAdcTrajectoryPointFieldNumber;
const int LearningDataFrame::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LearningDataFrame::LearningDataFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_LearningDataFrame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.LearningDataFrame)
}
LearningDataFrame::LearningDataFrame(const LearningDataFrame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      obstacle_(from.obstacle_),
      adc_trajectory_point_(from.adc_trajectory_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_name()) {
    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  if (from.has_planning_tag()) {
    planning_tag_ = new ::apollo::planning::PlanningTag(*from.planning_tag_);
  } else {
    planning_tag_ = NULL;
  }
  if (from.has_chassis()) {
    chassis_ = new ::apollo::planning::ChassisFeature(*from.chassis_);
  } else {
    chassis_ = NULL;
  }
  if (from.has_localization()) {
    localization_ = new ::apollo::planning::LocalizationFeature(*from.localization_);
  } else {
    localization_ = NULL;
  }
  if (from.has_routing()) {
    routing_ = new ::apollo::planning::RoutingFeature(*from.routing_);
  } else {
    routing_ = NULL;
  }
  if (from.has_traffic_light_detection()) {
    traffic_light_detection_ = new ::apollo::planning::TrafficLightDetectionFeature(*from.traffic_light_detection_);
  } else {
    traffic_light_detection_ = NULL;
  }
  if (from.has_output()) {
    output_ = new ::apollo::planning::LearningOutput(*from.output_);
  } else {
    output_ = NULL;
  }
  ::memcpy(&message_timestamp_sec_, &from.message_timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_num_) -
    reinterpret_cast<char*>(&message_timestamp_sec_)) + sizeof(frame_num_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LearningDataFrame)
}

void LearningDataFrame::SharedCtor() {
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&planning_tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_num_) -
      reinterpret_cast<char*>(&planning_tag_)) + sizeof(frame_num_));
}

LearningDataFrame::~LearningDataFrame() {
  // @@protoc_insertion_point(destructor:apollo.planning.LearningDataFrame)
  SharedDtor();
}

void LearningDataFrame::SharedDtor() {
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete planning_tag_;
  if (this != internal_default_instance()) delete chassis_;
  if (this != internal_default_instance()) delete localization_;
  if (this != internal_default_instance()) delete routing_;
  if (this != internal_default_instance()) delete traffic_light_detection_;
  if (this != internal_default_instance()) delete output_;
}

void LearningDataFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LearningDataFrame::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LearningDataFrame& LearningDataFrame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_LearningDataFrame.base);
  return *internal_default_instance();
}


void LearningDataFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LearningDataFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacle_.Clear();
  adc_trajectory_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      map_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(planning_tag_ != NULL);
      planning_tag_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(chassis_ != NULL);
      chassis_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(localization_ != NULL);
      localization_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(routing_ != NULL);
      routing_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(traffic_light_detection_ != NULL);
      traffic_light_detection_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(output_ != NULL);
      output_->Clear();
    }
  }
  message_timestamp_sec_ = 0;
  frame_num_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LearningDataFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.LearningDataFrame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double message_timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_message_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &message_timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 frame_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_frame_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), static_cast<int>(this->map_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.LearningDataFrame.map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PlanningTag planning_tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_planning_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ChassisFeature chassis = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chassis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.LocalizationFeature localization = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_localization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.ObstacleFeature obstacle = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.RoutingFeature routing = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_routing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.TrafficLightDetectionFeature traffic_light_detection = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_traffic_light_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_adc_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.LearningOutput output = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.LearningDataFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.LearningDataFrame)
  return false;
#undef DO_
}

void LearningDataFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.LearningDataFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->message_timestamp_sec(), output);
  }

  // optional uint32 frame_num = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->frame_num(), output);
  }

  // optional string map_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.LearningDataFrame.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->map_name(), output);
  }

  // optional .apollo.planning.PlanningTag planning_tag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_planning_tag(), output);
  }

  // optional .apollo.planning.ChassisFeature chassis = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_chassis(), output);
  }

  // optional .apollo.planning.LocalizationFeature localization = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_localization(), output);
  }

  // repeated .apollo.planning.ObstacleFeature obstacle = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->obstacle(static_cast<int>(i)),
      output);
  }

  // optional .apollo.planning.RoutingFeature routing = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_routing(), output);
  }

  // optional .apollo.planning.TrafficLightDetectionFeature traffic_light_detection = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_traffic_light_detection(), output);
  }

  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->adc_trajectory_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->adc_trajectory_point(static_cast<int>(i)),
      output);
  }

  // optional .apollo.planning.LearningOutput output = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_output(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.LearningDataFrame)
}

::google::protobuf::uint8* LearningDataFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LearningDataFrame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double message_timestamp_sec = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->message_timestamp_sec(), target);
  }

  // optional uint32 frame_num = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->frame_num(), target);
  }

  // optional string map_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.LearningDataFrame.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->map_name(), target);
  }

  // optional .apollo.planning.PlanningTag planning_tag = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_planning_tag(), deterministic, target);
  }

  // optional .apollo.planning.ChassisFeature chassis = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_chassis(), deterministic, target);
  }

  // optional .apollo.planning.LocalizationFeature localization = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_localization(), deterministic, target);
  }

  // repeated .apollo.planning.ObstacleFeature obstacle = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacle_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->obstacle(static_cast<int>(i)), deterministic, target);
  }

  // optional .apollo.planning.RoutingFeature routing = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_routing(), deterministic, target);
  }

  // optional .apollo.planning.TrafficLightDetectionFeature traffic_light_detection = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_traffic_light_detection(), deterministic, target);
  }

  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->adc_trajectory_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->adc_trajectory_point(static_cast<int>(i)), deterministic, target);
  }

  // optional .apollo.planning.LearningOutput output = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_output(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LearningDataFrame)
  return target;
}

size_t LearningDataFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LearningDataFrame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.ObstacleFeature obstacle = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacle_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->obstacle(static_cast<int>(i)));
    }
  }

  // repeated .apollo.planning.ADCTrajectoryPoint adc_trajectory_point = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->adc_trajectory_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->adc_trajectory_point(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string map_name = 3;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional .apollo.planning.PlanningTag planning_tag = 4;
    if (has_planning_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *planning_tag_);
    }

    // optional .apollo.planning.ChassisFeature chassis = 5;
    if (has_chassis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *chassis_);
    }

    // optional .apollo.planning.LocalizationFeature localization = 6;
    if (has_localization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *localization_);
    }

    // optional .apollo.planning.RoutingFeature routing = 8;
    if (has_routing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *routing_);
    }

    // optional .apollo.planning.TrafficLightDetectionFeature traffic_light_detection = 9;
    if (has_traffic_light_detection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *traffic_light_detection_);
    }

    // optional .apollo.planning.LearningOutput output = 11;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *output_);
    }

    // optional double message_timestamp_sec = 1;
    if (has_message_timestamp_sec()) {
      total_size += 1 + 8;
    }

  }
  // optional uint32 frame_num = 2;
  if (has_frame_num()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LearningDataFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.LearningDataFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const LearningDataFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LearningDataFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.LearningDataFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.LearningDataFrame)
    MergeFrom(*source);
  }
}

void LearningDataFrame::MergeFrom(const LearningDataFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LearningDataFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_.MergeFrom(from.obstacle_);
  adc_trajectory_point_.MergeFrom(from.adc_trajectory_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_map_name();
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_planning_tag()->::apollo::planning::PlanningTag::MergeFrom(from.planning_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_chassis()->::apollo::planning::ChassisFeature::MergeFrom(from.chassis());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_localization()->::apollo::planning::LocalizationFeature::MergeFrom(from.localization());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_routing()->::apollo::planning::RoutingFeature::MergeFrom(from.routing());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_traffic_light_detection()->::apollo::planning::TrafficLightDetectionFeature::MergeFrom(from.traffic_light_detection());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_output()->::apollo::planning::LearningOutput::MergeFrom(from.output());
    }
    if (cached_has_bits & 0x00000080u) {
      message_timestamp_sec_ = from.message_timestamp_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_frame_num(from.frame_num());
  }
}

void LearningDataFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.LearningDataFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearningDataFrame::CopyFrom(const LearningDataFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LearningDataFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningDataFrame::IsInitialized() const {
  return true;
}

void LearningDataFrame::Swap(LearningDataFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LearningDataFrame::InternalSwap(LearningDataFrame* other) {
  using std::swap;
  CastToBase(&obstacle_)->InternalSwap(CastToBase(&other->obstacle_));
  CastToBase(&adc_trajectory_point_)->InternalSwap(CastToBase(&other->adc_trajectory_point_));
  map_name_.Swap(&other->map_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(planning_tag_, other->planning_tag_);
  swap(chassis_, other->chassis_);
  swap(localization_, other->localization_);
  swap(routing_, other->routing_);
  swap(traffic_light_detection_, other->traffic_light_detection_);
  swap(output_, other->output_);
  swap(message_timestamp_sec_, other->message_timestamp_sec_);
  swap(frame_num_, other->frame_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LearningDataFrame::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LearningData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LearningData::kLearningDataFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LearningData::LearningData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_LearningData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.LearningData)
}
LearningData::LearningData(const LearningData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      learning_data_frame_(from.learning_data_frame_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.LearningData)
}

void LearningData::SharedCtor() {
}

LearningData::~LearningData() {
  // @@protoc_insertion_point(destructor:apollo.planning.LearningData)
  SharedDtor();
}

void LearningData::SharedDtor() {
}

void LearningData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LearningData::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LearningData& LearningData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_LearningData.base);
  return *internal_default_instance();
}


void LearningData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.LearningData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  learning_data_frame_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LearningData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.LearningData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.LearningDataFrame learning_data_frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_learning_data_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.LearningData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.LearningData)
  return false;
#undef DO_
}

void LearningData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.LearningData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.LearningDataFrame learning_data_frame = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->learning_data_frame_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->learning_data_frame(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.LearningData)
}

::google::protobuf::uint8* LearningData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.LearningData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.LearningDataFrame learning_data_frame = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->learning_data_frame_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->learning_data_frame(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.LearningData)
  return target;
}

size_t LearningData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.LearningData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.LearningDataFrame learning_data_frame = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->learning_data_frame_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->learning_data_frame(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LearningData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.LearningData)
  GOOGLE_DCHECK_NE(&from, this);
  const LearningData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LearningData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.LearningData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.LearningData)
    MergeFrom(*source);
  }
}

void LearningData::MergeFrom(const LearningData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.LearningData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  learning_data_frame_.MergeFrom(from.learning_data_frame_);
}

void LearningData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.LearningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearningData::CopyFrom(const LearningData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.LearningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearningData::IsInitialized() const {
  return true;
}

void LearningData::Swap(LearningData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LearningData::InternalSwap(LearningData* other) {
  using std::swap;
  CastToBase(&learning_data_frame_)->InternalSwap(CastToBase(&other->learning_data_frame_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LearningData::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlanningLearningData::InitAsDefaultInstance() {
  ::apollo::planning::_PlanningLearningData_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::planning::_PlanningLearningData_default_instance_._instance.get_mutable()->learning_data_frame_ = const_cast< ::apollo::planning::LearningDataFrame*>(
      ::apollo::planning::LearningDataFrame::internal_default_instance());
}
void PlanningLearningData::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningLearningData::kHeaderFieldNumber;
const int PlanningLearningData::kLearningDataFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningLearningData::PlanningLearningData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_PlanningLearningData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlanningLearningData)
}
PlanningLearningData::PlanningLearningData(const PlanningLearningData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_learning_data_frame()) {
    learning_data_frame_ = new ::apollo::planning::LearningDataFrame(*from.learning_data_frame_);
  } else {
    learning_data_frame_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningLearningData)
}

void PlanningLearningData::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&learning_data_frame_) -
      reinterpret_cast<char*>(&header_)) + sizeof(learning_data_frame_));
}

PlanningLearningData::~PlanningLearningData() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningLearningData)
  SharedDtor();
}

void PlanningLearningData::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete learning_data_frame_;
}

void PlanningLearningData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlanningLearningData::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanningLearningData& PlanningLearningData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::scc_info_PlanningLearningData.base);
  return *internal_default_instance();
}


void PlanningLearningData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningLearningData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(learning_data_frame_ != NULL);
      learning_data_frame_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlanningLearningData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PlanningLearningData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.LearningDataFrame learning_data_frame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_learning_data_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PlanningLearningData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PlanningLearningData)
  return false;
#undef DO_
}

void PlanningLearningData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PlanningLearningData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional .apollo.planning.LearningDataFrame learning_data_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_learning_data_frame(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PlanningLearningData)
}

::google::protobuf::uint8* PlanningLearningData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningLearningData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional .apollo.planning.LearningDataFrame learning_data_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_learning_data_frame(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningLearningData)
  return target;
}

size_t PlanningLearningData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningLearningData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.planning.LearningDataFrame learning_data_frame = 2;
    if (has_learning_data_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *learning_data_frame_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningLearningData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlanningLearningData)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningLearningData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningLearningData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlanningLearningData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlanningLearningData)
    MergeFrom(*source);
  }
}

void PlanningLearningData::MergeFrom(const PlanningLearningData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningLearningData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_learning_data_frame()->::apollo::planning::LearningDataFrame::MergeFrom(from.learning_data_frame());
    }
  }
}

void PlanningLearningData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlanningLearningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningLearningData::CopyFrom(const PlanningLearningData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningLearningData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningLearningData::IsInitialized() const {
  return true;
}

void PlanningLearningData::Swap(PlanningLearningData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningLearningData::InternalSwap(PlanningLearningData* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(learning_data_frame_, other->learning_data_frame_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlanningLearningData::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2flearning_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::OverlapFeature* Arena::CreateMaybeMessage< ::apollo::planning::OverlapFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::OverlapFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PlanningTag* Arena::CreateMaybeMessage< ::apollo::planning::PlanningTag >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PlanningTag >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ChassisFeature* Arena::CreateMaybeMessage< ::apollo::planning::ChassisFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ChassisFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::LocalizationFeature* Arena::CreateMaybeMessage< ::apollo::planning::LocalizationFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::LocalizationFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::CommonPathPointFeature* Arena::CreateMaybeMessage< ::apollo::planning::CommonPathPointFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::CommonPathPointFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::CommonTrajectoryPointFeature* Arena::CreateMaybeMessage< ::apollo::planning::CommonTrajectoryPointFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::CommonTrajectoryPointFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::TrajectoryPointFeature* Arena::CreateMaybeMessage< ::apollo::planning::TrajectoryPointFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::TrajectoryPointFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PerceptionObstacleFeature* Arena::CreateMaybeMessage< ::apollo::planning::PerceptionObstacleFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PerceptionObstacleFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ObstacleTrajectoryFeature* Arena::CreateMaybeMessage< ::apollo::planning::ObstacleTrajectoryFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ObstacleTrajectoryFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PredictionTrajectoryFeature* Arena::CreateMaybeMessage< ::apollo::planning::PredictionTrajectoryFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PredictionTrajectoryFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PredictionObstacleFeature* Arena::CreateMaybeMessage< ::apollo::planning::PredictionObstacleFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PredictionObstacleFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ObstacleFeature* Arena::CreateMaybeMessage< ::apollo::planning::ObstacleFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ObstacleFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::RoutingResponseFeature* Arena::CreateMaybeMessage< ::apollo::planning::RoutingResponseFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::RoutingResponseFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::RoutingFeature* Arena::CreateMaybeMessage< ::apollo::planning::RoutingFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::RoutingFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::TrafficLightFeature* Arena::CreateMaybeMessage< ::apollo::planning::TrafficLightFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::TrafficLightFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::TrafficLightDetectionFeature* Arena::CreateMaybeMessage< ::apollo::planning::TrafficLightDetectionFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::TrafficLightDetectionFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ADCTrajectoryPoint* Arena::CreateMaybeMessage< ::apollo::planning::ADCTrajectoryPoint >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ADCTrajectoryPoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::LearningOutput* Arena::CreateMaybeMessage< ::apollo::planning::LearningOutput >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::LearningOutput >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::LearningDataFrame* Arena::CreateMaybeMessage< ::apollo::planning::LearningDataFrame >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::LearningDataFrame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::LearningData* Arena::CreateMaybeMessage< ::apollo::planning::LearningData >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::LearningData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PlanningLearningData* Arena::CreateMaybeMessage< ::apollo::planning::PlanningLearningData >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PlanningLearningData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
