// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/planning_config.proto

#include "modules/planning/proto/planning_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OpenSpaceFallBackDeciderConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OpenSpacePreStopDeciderConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OpenSpaceRoiDeciderConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OpenSpaceTrajectoryPartitionConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OpenSpaceTrajectoryProviderConfig;
}  // namespace protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto
namespace protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlannerPublicRoadConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RtkPlanningConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioBareIntersectionUnprotectedConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioDeadEndTurnAroundConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioEmergencyPullOverConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioEmergencyStopConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioLaneFollowConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioLearningModelSampleConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioNarrowStreetUTurnConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioParkAndGoConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioPullOverConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioStopSignUnprotectedConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioTrafficLightProtectedConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioTrafficLightUnprotectedLeftTurnConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioTrafficLightUnprotectedRightTurnConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioValetParkingConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioYieldSignConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TopicConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NavigationPlanningConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ScenarioConfig_StageConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_StandardPlanningConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<24> scc_info_TaskConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_PlannerNaviConfig;
}  // namespace protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto
namespace protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CreepDeciderConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LaneChangeDeciderConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LearningModelInferenceTaskConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LearningModelInferenceTrajectoryTaskConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NaviObstacleDeciderConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NaviSpeedDeciderConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NewTestDeciderConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PathAssessmentDeciderConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PathBoundsDeciderConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PathDeciderConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PathLaneBorrowDeciderConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PathReferenceDeciderConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PathReuseDeciderConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PiecewiseJerkNonlinearSpeedOptimizerConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PiecewiseJerkSpeedOptimizerConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RuleBasedStopDeciderConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_STBoundsDeciderConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SpeedBoundsDeciderConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StGenerateDeciderConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NaviPathDeciderConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PiecewiseJerkPathOptimizerConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SpeedHeuristicOptimizerConfig;
}  // namespace protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto
namespace apollo {
namespace planning {
class TaskConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskConfig>
      _instance;
  const ::apollo::planning::CreepDeciderConfig* creep_decider_config_;
  const ::apollo::planning::LaneChangeDeciderConfig* lane_change_decider_config_;
  const ::apollo::planning::OpenSpaceFallBackDeciderConfig* open_space_fallback_decider_config_;
  const ::apollo::planning::OpenSpacePreStopDeciderConfig* open_space_pre_stop_decider_config_;
  const ::apollo::planning::OpenSpaceRoiDeciderConfig* open_space_roi_decider_config_;
  const ::apollo::planning::PathAssessmentDeciderConfig* path_assessment_decider_config_;
  const ::apollo::planning::PathBoundsDeciderConfig* path_bounds_decider_config_;
  const ::apollo::planning::PathDeciderConfig* path_decider_config_;
  const ::apollo::planning::PathLaneBorrowDeciderConfig* path_lane_borrow_decider_config_;
  const ::apollo::planning::PathReferenceDeciderConfig* path_reference_decider_config_;
  const ::apollo::planning::PathReuseDeciderConfig* path_reuse_decider_config_;
  const ::apollo::planning::RuleBasedStopDeciderConfig* rule_based_stop_decider_config_;
  const ::apollo::planning::SpeedBoundsDeciderConfig* speed_bounds_decider_config_;
  const ::apollo::planning::STBoundsDeciderConfig* st_bounds_decider_config_;
  const ::apollo::planning::OpenSpaceTrajectoryPartitionConfig* open_space_trajectory_partition_config_;
  const ::apollo::planning::OpenSpaceTrajectoryProviderConfig* open_space_trajectory_provider_config_;
  const ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* piecewise_jerk_nonlinear_speed_optimizer_config_;
  const ::apollo::planning::PiecewiseJerkPathOptimizerConfig* piecewise_jerk_path_optimizer_config_;
  const ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* piecewise_jerk_speed_optimizer_config_;
  const ::apollo::planning::SpeedHeuristicOptimizerConfig* speed_heuristic_optimizer_config_;
  const ::apollo::planning::LearningModelInferenceTaskConfig* learning_model_inference_task_config_;
  const ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* learning_model_inference_trajectory_task_config_;
  const ::apollo::planning::NewTestDeciderConfig* new_test_decider_config_;
  const ::apollo::planning::StGenerateDeciderConfig* st_generate_decider_config_;
} _TaskConfig_default_instance_;
class ScenarioBareIntersectionUnprotectedConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScenarioBareIntersectionUnprotectedConfig>
      _instance;
} _ScenarioBareIntersectionUnprotectedConfig_default_instance_;
class ScenarioEmergencyPullOverConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScenarioEmergencyPullOverConfig>
      _instance;
} _ScenarioEmergencyPullOverConfig_default_instance_;
class ScenarioEmergencyStopConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScenarioEmergencyStopConfig>
      _instance;
} _ScenarioEmergencyStopConfig_default_instance_;
class ScenarioLaneFollowConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScenarioLaneFollowConfig>
      _instance;
} _ScenarioLaneFollowConfig_default_instance_;
class ScenarioLearningModelSampleConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScenarioLearningModelSampleConfig>
      _instance;
} _ScenarioLearningModelSampleConfig_default_instance_;
class ScenarioNarrowStreetUTurnConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScenarioNarrowStreetUTurnConfig>
      _instance;
} _ScenarioNarrowStreetUTurnConfig_default_instance_;
class ScenarioParkAndGoConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScenarioParkAndGoConfig>
      _instance;
} _ScenarioParkAndGoConfig_default_instance_;
class ScenarioPullOverConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScenarioPullOverConfig>
      _instance;
} _ScenarioPullOverConfig_default_instance_;
class ScenarioStopSignUnprotectedConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScenarioStopSignUnprotectedConfig>
      _instance;
} _ScenarioStopSignUnprotectedConfig_default_instance_;
class ScenarioTrafficLightProtectedConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScenarioTrafficLightProtectedConfig>
      _instance;
} _ScenarioTrafficLightProtectedConfig_default_instance_;
class ScenarioTrafficLightUnprotectedLeftTurnConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScenarioTrafficLightUnprotectedLeftTurnConfig>
      _instance;
} _ScenarioTrafficLightUnprotectedLeftTurnConfig_default_instance_;
class ScenarioTrafficLightUnprotectedRightTurnConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScenarioTrafficLightUnprotectedRightTurnConfig>
      _instance;
} _ScenarioTrafficLightUnprotectedRightTurnConfig_default_instance_;
class ScenarioValetParkingConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScenarioValetParkingConfig>
      _instance;
} _ScenarioValetParkingConfig_default_instance_;
class ScenarioDeadEndTurnAroundConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScenarioDeadEndTurnAroundConfig>
      _instance;
} _ScenarioDeadEndTurnAroundConfig_default_instance_;
class ScenarioYieldSignConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScenarioYieldSignConfig>
      _instance;
} _ScenarioYieldSignConfig_default_instance_;
class ScenarioConfig_StageConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScenarioConfig_StageConfig>
      _instance;
} _ScenarioConfig_StageConfig_default_instance_;
class ScenarioConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ScenarioConfig>
      _instance;
  const ::apollo::planning::ScenarioLaneFollowConfig* lane_follow_config_;
  const ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* bare_intersection_unprotected_config_;
  const ::apollo::planning::ScenarioEmergencyPullOverConfig* emergency_pull_over_config_;
  const ::apollo::planning::ScenarioEmergencyStopConfig* emergency_stop_config_;
  const ::apollo::planning::ScenarioLearningModelSampleConfig* learning_model_sample_config_;
  const ::apollo::planning::ScenarioNarrowStreetUTurnConfig* narrow_street_u_turn_config_;
  const ::apollo::planning::ScenarioParkAndGoConfig* park_and_go_config_;
  const ::apollo::planning::ScenarioPullOverConfig* pull_over_config_;
  const ::apollo::planning::ScenarioStopSignUnprotectedConfig* stop_sign_unprotected_config_;
  const ::apollo::planning::ScenarioTrafficLightProtectedConfig* traffic_light_protected_config_;
  const ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* traffic_light_unprotected_left_turn_config_;
  const ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* traffic_light_unprotected_right_turn_config_;
  const ::apollo::planning::ScenarioValetParkingConfig* valet_parking_config_;
  const ::apollo::planning::ScenarioYieldSignConfig* yield_sign_config_;
  const ::apollo::planning::ScenarioDeadEndTurnAroundConfig* deadend_turnaround_config_;
} _ScenarioConfig_default_instance_;
class PlannerPublicRoadConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlannerPublicRoadConfig>
      _instance;
} _PlannerPublicRoadConfig_default_instance_;
class PlannerNaviConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlannerNaviConfig>
      _instance;
} _PlannerNaviConfig_default_instance_;
class RtkPlanningConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RtkPlanningConfig>
      _instance;
} _RtkPlanningConfig_default_instance_;
class StandardPlanningConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StandardPlanningConfig>
      _instance;
} _StandardPlanningConfig_default_instance_;
class NavigationPlanningConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NavigationPlanningConfig>
      _instance;
} _NavigationPlanningConfig_default_instance_;
class TopicConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TopicConfig>
      _instance;
} _TopicConfig_default_instance_;
class PlanningConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlanningConfig>
      _instance;
  const ::apollo::planning::RtkPlanningConfig* rtk_planning_config_;
  const ::apollo::planning::StandardPlanningConfig* standard_planning_config_;
  const ::apollo::planning::NavigationPlanningConfig* navigation_planning_config_;
} _PlanningConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
namespace protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto {
static void InitDefaultsTaskConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_TaskConfig_default_instance_;
    new (ptr) ::apollo::planning::TaskConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::TaskConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<24> scc_info_TaskConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 24, InitDefaultsTaskConfig}, {
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_CreepDeciderConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_LaneChangeDeciderConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_OpenSpaceFallBackDeciderConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_OpenSpacePreStopDeciderConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_OpenSpaceRoiDeciderConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_PathAssessmentDeciderConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_PathBoundsDeciderConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_PathDeciderConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_PathLaneBorrowDeciderConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_PathReferenceDeciderConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_PathReuseDeciderConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_RuleBasedStopDeciderConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_SpeedBoundsDeciderConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_STBoundsDeciderConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_OpenSpaceTrajectoryPartitionConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::scc_info_OpenSpaceTrajectoryProviderConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_PiecewiseJerkNonlinearSpeedOptimizerConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_PiecewiseJerkPathOptimizerConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_PiecewiseJerkSpeedOptimizerConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_SpeedHeuristicOptimizerConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_LearningModelInferenceTaskConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_LearningModelInferenceTrajectoryTaskConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_NewTestDeciderConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_StGenerateDeciderConfig.base,}};

static void InitDefaultsScenarioBareIntersectionUnprotectedConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioBareIntersectionUnprotectedConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioBareIntersectionUnprotectedConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenarioBareIntersectionUnprotectedConfig}, {}};

static void InitDefaultsScenarioEmergencyPullOverConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioEmergencyPullOverConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioEmergencyPullOverConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioEmergencyPullOverConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioEmergencyPullOverConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenarioEmergencyPullOverConfig}, {}};

static void InitDefaultsScenarioEmergencyStopConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioEmergencyStopConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioEmergencyStopConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioEmergencyStopConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioEmergencyStopConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenarioEmergencyStopConfig}, {}};

static void InitDefaultsScenarioLaneFollowConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioLaneFollowConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioLaneFollowConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioLaneFollowConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioLaneFollowConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenarioLaneFollowConfig}, {}};

static void InitDefaultsScenarioLearningModelSampleConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioLearningModelSampleConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioLearningModelSampleConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioLearningModelSampleConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioLearningModelSampleConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenarioLearningModelSampleConfig}, {}};

static void InitDefaultsScenarioNarrowStreetUTurnConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioNarrowStreetUTurnConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioNarrowStreetUTurnConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioNarrowStreetUTurnConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioNarrowStreetUTurnConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenarioNarrowStreetUTurnConfig}, {}};

static void InitDefaultsScenarioParkAndGoConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioParkAndGoConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioParkAndGoConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioParkAndGoConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioParkAndGoConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenarioParkAndGoConfig}, {}};

static void InitDefaultsScenarioPullOverConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioPullOverConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioPullOverConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioPullOverConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioPullOverConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenarioPullOverConfig}, {}};

static void InitDefaultsScenarioStopSignUnprotectedConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioStopSignUnprotectedConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioStopSignUnprotectedConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioStopSignUnprotectedConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioStopSignUnprotectedConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenarioStopSignUnprotectedConfig}, {}};

static void InitDefaultsScenarioTrafficLightProtectedConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioTrafficLightProtectedConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioTrafficLightProtectedConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioTrafficLightProtectedConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioTrafficLightProtectedConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenarioTrafficLightProtectedConfig}, {}};

static void InitDefaultsScenarioTrafficLightUnprotectedLeftTurnConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioTrafficLightUnprotectedLeftTurnConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioTrafficLightUnprotectedLeftTurnConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenarioTrafficLightUnprotectedLeftTurnConfig}, {}};

static void InitDefaultsScenarioTrafficLightUnprotectedRightTurnConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioTrafficLightUnprotectedRightTurnConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioTrafficLightUnprotectedRightTurnConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenarioTrafficLightUnprotectedRightTurnConfig}, {}};

static void InitDefaultsScenarioValetParkingConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioValetParkingConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioValetParkingConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioValetParkingConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioValetParkingConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenarioValetParkingConfig}, {}};

static void InitDefaultsScenarioDeadEndTurnAroundConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioDeadEndTurnAroundConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioDeadEndTurnAroundConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioDeadEndTurnAroundConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioDeadEndTurnAroundConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenarioDeadEndTurnAroundConfig}, {}};

static void InitDefaultsScenarioYieldSignConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioYieldSignConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioYieldSignConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioYieldSignConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ScenarioYieldSignConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsScenarioYieldSignConfig}, {}};

static void InitDefaultsScenarioConfig_StageConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioConfig_StageConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioConfig_StageConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioConfig_StageConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ScenarioConfig_StageConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsScenarioConfig_StageConfig}, {
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_TaskConfig.base,}};

static void InitDefaultsScenarioConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_ScenarioConfig_default_instance_;
    new (ptr) ::apollo::planning::ScenarioConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::ScenarioConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<16> scc_info_ScenarioConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 16, InitDefaultsScenarioConfig}, {
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioLaneFollowConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioBareIntersectionUnprotectedConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioEmergencyPullOverConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioEmergencyStopConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioLearningModelSampleConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioNarrowStreetUTurnConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioParkAndGoConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioPullOverConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioStopSignUnprotectedConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioTrafficLightProtectedConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioTrafficLightUnprotectedLeftTurnConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioTrafficLightUnprotectedRightTurnConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioValetParkingConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioYieldSignConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioDeadEndTurnAroundConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioConfig_StageConfig.base,}};

static void InitDefaultsPlannerPublicRoadConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PlannerPublicRoadConfig_default_instance_;
    new (ptr) ::apollo::planning::PlannerPublicRoadConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PlannerPublicRoadConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlannerPublicRoadConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlannerPublicRoadConfig}, {}};

static void InitDefaultsPlannerNaviConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PlannerNaviConfig_default_instance_;
    new (ptr) ::apollo::planning::PlannerNaviConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PlannerNaviConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_PlannerNaviConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPlannerNaviConfig}, {
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_NaviPathDeciderConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_NaviSpeedDeciderConfig.base,
      &protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::scc_info_NaviObstacleDeciderConfig.base,}};

static void InitDefaultsRtkPlanningConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_RtkPlanningConfig_default_instance_;
    new (ptr) ::apollo::planning::RtkPlanningConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::RtkPlanningConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RtkPlanningConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRtkPlanningConfig}, {}};

static void InitDefaultsStandardPlanningConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_StandardPlanningConfig_default_instance_;
    new (ptr) ::apollo::planning::StandardPlanningConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::StandardPlanningConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StandardPlanningConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStandardPlanningConfig}, {
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_PlannerPublicRoadConfig.base,}};

static void InitDefaultsNavigationPlanningConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_NavigationPlanningConfig_default_instance_;
    new (ptr) ::apollo::planning::NavigationPlanningConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::NavigationPlanningConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NavigationPlanningConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNavigationPlanningConfig}, {
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_PlannerNaviConfig.base,}};

static void InitDefaultsTopicConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_TopicConfig_default_instance_;
    new (ptr) ::apollo::planning::TopicConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::TopicConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TopicConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTopicConfig}, {}};

static void InitDefaultsPlanningConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::planning::_PlanningConfig_default_instance_;
    new (ptr) ::apollo::planning::PlanningConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::planning::PlanningConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_PlanningConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsPlanningConfig}, {
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_TopicConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_RtkPlanningConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_StandardPlanningConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_NavigationPlanningConfig.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_TaskConfig.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TaskConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScenarioBareIntersectionUnprotectedConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScenarioEmergencyPullOverConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScenarioEmergencyStopConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScenarioLaneFollowConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScenarioLearningModelSampleConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScenarioNarrowStreetUTurnConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScenarioParkAndGoConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScenarioPullOverConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScenarioStopSignUnprotectedConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScenarioTrafficLightProtectedConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScenarioTrafficLightUnprotectedLeftTurnConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScenarioTrafficLightUnprotectedRightTurnConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScenarioValetParkingConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScenarioDeadEndTurnAroundConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScenarioYieldSignConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScenarioConfig_StageConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ScenarioConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlannerPublicRoadConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlannerNaviConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RtkPlanningConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StandardPlanningConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NavigationPlanningConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TopicConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlanningConfig.base);
}

::google::protobuf::Metadata file_level_metadata[25];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TaskConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TaskConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TaskConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TaskConfig, task_type_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, creep_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, lane_change_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, open_space_fallback_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, open_space_pre_stop_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, open_space_roi_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, path_assessment_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, path_bounds_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, path_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, path_lane_borrow_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, path_reference_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, path_reuse_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, rule_based_stop_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, speed_bounds_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, st_bounds_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, open_space_trajectory_partition_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, open_space_trajectory_provider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, piecewise_jerk_nonlinear_speed_optimizer_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, piecewise_jerk_path_optimizer_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, piecewise_jerk_speed_optimizer_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, speed_heuristic_optimizer_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, learning_model_inference_task_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, learning_model_inference_trajectory_task_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, new_test_decider_config_),
  offsetof(::apollo::planning::TaskConfigDefaultTypeInternal, st_generate_decider_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TaskConfig, task_config_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, start_bare_intersection_scenario_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, enable_explicit_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, min_pass_s_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, approach_cruise_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, stop_timeout_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig, creep_timeout_sec_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioEmergencyPullOverConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioEmergencyPullOverConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioEmergencyPullOverConfig, max_stop_deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioEmergencyPullOverConfig, slow_down_deceleration_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioEmergencyPullOverConfig, target_slow_down_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioEmergencyPullOverConfig, stop_distance_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioEmergencyStopConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioEmergencyStopConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioEmergencyStopConfig, max_stop_deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioEmergencyStopConfig, stop_distance_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioLaneFollowConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioLaneFollowConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioLearningModelSampleConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioLearningModelSampleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioNarrowStreetUTurnConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioNarrowStreetUTurnConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioParkAndGoConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioParkAndGoConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioParkAndGoConfig, front_obstacle_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioParkAndGoConfig, heading_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioParkAndGoConfig, min_dist_to_dest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioParkAndGoConfig, max_steering_percentage_when_cruise_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, start_pull_over_scenario_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, pull_over_min_distance_buffer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, max_distance_stop_search_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, max_s_error_to_end_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, max_l_error_to_end_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, max_theta_error_to_end_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, max_distance_error_to_end_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, pass_destination_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, max_valid_stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioPullOverConfig, s_distance_to_stop_for_open_space_parking_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, start_stop_sign_scenario_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, watch_vehicle_max_valid_stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, max_valid_stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, stop_duration_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, min_pass_s_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, stop_timeout_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioStopSignUnprotectedConfig, creep_timeout_sec_),
  1,
  2,
  3,
  5,
  4,
  6,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightProtectedConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightProtectedConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightProtectedConfig, start_traffic_light_scenario_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightProtectedConfig, max_valid_stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightProtectedConfig, min_pass_s_distance_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, start_traffic_light_scenario_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, approach_cruise_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, max_valid_stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, min_pass_s_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, creep_timeout_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig, max_adc_speed_before_creep_),
  1,
  2,
  3,
  4,
  0,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, start_traffic_light_scenario_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, enable_right_turn_on_red_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, max_valid_stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, min_pass_s_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, red_light_right_turn_stop_duration_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, creep_timeout_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig, max_adc_speed_before_creep_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioValetParkingConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioValetParkingConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioValetParkingConfig, parking_spot_range_to_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioValetParkingConfig, max_valid_stop_distance_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioDeadEndTurnAroundConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioDeadEndTurnAroundConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioDeadEndTurnAroundConfig, dead_end_start_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioDeadEndTurnAroundConfig, max_valid_stop_distance_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioYieldSignConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioYieldSignConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioYieldSignConfig, start_yield_sign_scenario_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioYieldSignConfig, max_valid_stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioYieldSignConfig, min_pass_s_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioYieldSignConfig, creep_timeout_sec_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioConfig_StageConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioConfig_StageConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioConfig_StageConfig, stage_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioConfig_StageConfig, enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioConfig_StageConfig, task_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioConfig_StageConfig, task_config_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioConfig, scenario_type_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, lane_follow_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, bare_intersection_unprotected_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, emergency_pull_over_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, emergency_stop_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, learning_model_sample_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, narrow_street_u_turn_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, park_and_go_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, pull_over_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, stop_sign_unprotected_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, traffic_light_protected_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, traffic_light_unprotected_left_turn_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, traffic_light_unprotected_right_turn_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, valet_parking_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, yield_sign_config_),
  offsetof(::apollo::planning::ScenarioConfigDefaultTypeInternal, deadend_turnaround_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioConfig, stage_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioConfig, stage_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::ScenarioConfig, scenario_config_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerPublicRoadConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerPublicRoadConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerNaviConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerNaviConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerNaviConfig, task_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerNaviConfig, navi_path_decider_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerNaviConfig, navi_speed_decider_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlannerNaviConfig, navi_obstacle_decider_config_),
  ~0u,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RtkPlanningConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RtkPlanningConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::RtkPlanningConfig, planner_type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::StandardPlanningConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::StandardPlanningConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::StandardPlanningConfig, planner_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::StandardPlanningConfig, planner_public_road_config_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NavigationPlanningConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NavigationPlanningConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NavigationPlanningConfig, planner_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::NavigationPlanningConfig, planner_navi_config_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TopicConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TopicConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TopicConfig, chassis_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TopicConfig, hmi_status_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TopicConfig, localization_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TopicConfig, planning_pad_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TopicConfig, planning_trajectory_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TopicConfig, prediction_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TopicConfig, relative_map_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TopicConfig, routing_request_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TopicConfig, routing_response_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TopicConfig, story_telling_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TopicConfig, traffic_light_detection_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::TopicConfig, planning_learning_data_topic_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningConfig, topic_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningConfig, learning_mode_),
  offsetof(::apollo::planning::PlanningConfigDefaultTypeInternal, rtk_planning_config_),
  offsetof(::apollo::planning::PlanningConfigDefaultTypeInternal, standard_planning_config_),
  offsetof(::apollo::planning::PlanningConfigDefaultTypeInternal, navigation_planning_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningConfig, default_task_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::planning::PlanningConfig, planning_config_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 31, sizeof(::apollo::planning::TaskConfig)},
  { 56, 68, sizeof(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig)},
  { 75, 84, sizeof(::apollo::planning::ScenarioEmergencyPullOverConfig)},
  { 88, 95, sizeof(::apollo::planning::ScenarioEmergencyStopConfig)},
  { 97, 102, sizeof(::apollo::planning::ScenarioLaneFollowConfig)},
  { 102, 107, sizeof(::apollo::planning::ScenarioLearningModelSampleConfig)},
  { 107, 112, sizeof(::apollo::planning::ScenarioNarrowStreetUTurnConfig)},
  { 112, 121, sizeof(::apollo::planning::ScenarioParkAndGoConfig)},
  { 125, 140, sizeof(::apollo::planning::ScenarioPullOverConfig)},
  { 150, 162, sizeof(::apollo::planning::ScenarioStopSignUnprotectedConfig)},
  { 169, 177, sizeof(::apollo::planning::ScenarioTrafficLightProtectedConfig)},
  { 180, 191, sizeof(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig)},
  { 197, 209, sizeof(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig)},
  { 216, 223, sizeof(::apollo::planning::ScenarioValetParkingConfig)},
  { 225, 232, sizeof(::apollo::planning::ScenarioDeadEndTurnAroundConfig)},
  { 234, 243, sizeof(::apollo::planning::ScenarioYieldSignConfig)},
  { 247, 256, sizeof(::apollo::planning::ScenarioConfig_StageConfig)},
  { 260, 284, sizeof(::apollo::planning::ScenarioConfig)},
  { 302, 307, sizeof(::apollo::planning::PlannerPublicRoadConfig)},
  { 307, 316, sizeof(::apollo::planning::PlannerNaviConfig)},
  { 320, 326, sizeof(::apollo::planning::RtkPlanningConfig)},
  { 327, 334, sizeof(::apollo::planning::StandardPlanningConfig)},
  { 336, 343, sizeof(::apollo::planning::NavigationPlanningConfig)},
  { 345, 362, sizeof(::apollo::planning::TopicConfig)},
  { 374, 386, sizeof(::apollo::planning::PlanningConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_TaskConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ScenarioBareIntersectionUnprotectedConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ScenarioEmergencyPullOverConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ScenarioEmergencyStopConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ScenarioLaneFollowConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ScenarioLearningModelSampleConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ScenarioNarrowStreetUTurnConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ScenarioParkAndGoConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ScenarioPullOverConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ScenarioStopSignUnprotectedConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ScenarioTrafficLightProtectedConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ScenarioTrafficLightUnprotectedLeftTurnConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ScenarioTrafficLightUnprotectedRightTurnConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ScenarioValetParkingConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ScenarioDeadEndTurnAroundConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ScenarioYieldSignConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ScenarioConfig_StageConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_ScenarioConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PlannerPublicRoadConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PlannerNaviConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_RtkPlanningConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_StandardPlanningConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_NavigationPlanningConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_TopicConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::planning::_PlanningConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/planning/proto/planning_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 25);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n,modules/planning/proto/planning_config"
      ".proto\022\017apollo.planning\0323modules/plannin"
      "g/proto/open_space_task_config.proto\032(mo"
      "dules/planning/proto/task_config.proto\"\246"
      "\030\n\nTaskConfig\0227\n\ttask_type\030\001 \001(\0162$.apoll"
      "o.planning.TaskConfig.TaskType\022C\n\024creep_"
      "decider_config\030\002 \001(\0132#.apollo.planning.C"
      "reepDeciderConfigH\000\022N\n\032lane_change_decid"
      "er_config\030\003 \001(\0132(.apollo.planning.LaneCh"
      "angeDeciderConfigH\000\022]\n\"open_space_fallba"
      "ck_decider_config\030\004 \001(\0132/.apollo.plannin"
      "g.OpenSpaceFallBackDeciderConfigH\000\022\\\n\"op"
      "en_space_pre_stop_decider_config\030\005 \001(\0132."
      ".apollo.planning.OpenSpacePreStopDecider"
      "ConfigH\000\022S\n\035open_space_roi_decider_confi"
      "g\030\006 \001(\0132*.apollo.planning.OpenSpaceRoiDe"
      "ciderConfigH\000\022V\n\036path_assessment_decider"
      "_config\030\007 \001(\0132,.apollo.planning.PathAsse"
      "ssmentDeciderConfigH\000\022N\n\032path_bounds_dec"
      "ider_config\030\010 \001(\0132(.apollo.planning.Path"
      "BoundsDeciderConfigH\000\022A\n\023path_decider_co"
      "nfig\030\t \001(\0132\".apollo.planning.PathDecider"
      "ConfigH\000\022W\n\037path_lane_borrow_decider_con"
      "fig\030\n \001(\0132,.apollo.planning.PathLaneBorr"
      "owDeciderConfigH\000\022T\n\035path_reference_deci"
      "der_config\030\013 \001(\0132+.apollo.planning.PathR"
      "eferenceDeciderConfigH\000\022L\n\031path_reuse_de"
      "cider_config\030\014 \001(\0132\'.apollo.planning.Pat"
      "hReuseDeciderConfigH\000\022U\n\036rule_based_stop"
      "_decider_config\030\r \001(\0132+.apollo.planning."
      "RuleBasedStopDeciderConfigH\000\022P\n\033speed_bo"
      "unds_decider_config\030\016 \001(\0132).apollo.plann"
      "ing.SpeedBoundsDeciderConfigH\000\022J\n\030st_bou"
      "nds_decider_config\030\017 \001(\0132&.apollo.planni"
      "ng.STBoundsDeciderConfigH\000\022e\n&open_space"
      "_trajectory_partition_config\030\020 \001(\01323.apo"
      "llo.planning.OpenSpaceTrajectoryPartitio"
      "nConfigH\000\022c\n%open_space_trajectory_provi"
      "der_config\030\021 \001(\01322.apollo.planning.OpenS"
      "paceTrajectoryProviderConfigH\000\022v\n/piecew"
      "ise_jerk_nonlinear_speed_optimizer_confi"
      "g\030\022 \001(\0132;.apollo.planning.PiecewiseJerkN"
      "onlinearSpeedOptimizerConfigH\000\022a\n$piecew"
      "ise_jerk_path_optimizer_config\030\023 \001(\01321.a"
      "pollo.planning.PiecewiseJerkPathOptimize"
      "rConfigH\000\022c\n%piecewise_jerk_speed_optimi"
      "zer_config\030\024 \001(\01322.apollo.planning.Piece"
      "wiseJerkSpeedOptimizerConfigH\000\022Z\n speed_"
      "heuristic_optimizer_config\030\025 \001(\0132..apoll"
      "o.planning.SpeedHeuristicOptimizerConfig"
      "H\000\022a\n$learning_model_inference_task_conf"
      "ig\030\026 \001(\01321.apollo.planning.LearningModel"
      "InferenceTaskConfigH\000\022v\n/learning_model_"
      "inference_trajectory_task_config\030\027 \001(\0132;"
      ".apollo.planning.LearningModelInferenceT"
      "rajectoryTaskConfigH\000\022H\n\027new_test_decide"
      "r_config\030\030 \001(\0132%.apollo.planning.NewTest"
      "DeciderConfigH\000\022N\n\032st_generate_decider_c"
      "onfig\030\031 \001(\0132(.apollo.planning.StGenerate"
      "DeciderConfigH\000\"\356\006\n\010TaskType\022\021\n\rCREEP_DE"
      "CIDER\020\001\022\027\n\023LANE_CHANGE_DECIDER\020\002\022\031\n\025NAVI"
      "_OBSTACLE_DECIDER\020\003\022\025\n\021NAVI_PATH_DECIDER"
      "\020\004\022\026\n\022NAVI_SPEED_DECIDER\020\005\022\037\n\033OPEN_SPACE"
      "_FALLBACK_DECIDER\020\006\022\037\n\033OPEN_SPACE_PRE_ST"
      "OP_DECIDER\020\007\022\032\n\026OPEN_SPACE_ROI_DECIDER\020\010"
      "\022\033\n\027PATH_ASSESSMENT_DECIDER\020\t\022\027\n\023PATH_BO"
      "UNDS_DECIDER\020\n\022\020\n\014PATH_DECIDER\020\013\022\034\n\030PATH"
      "_LANE_BORROW_DECIDER\020\014\022\032\n\026PATH_REFERENCE"
      "_DECIDER\020\r\022\026\n\022PATH_REUSE_DECIDER\020\016\022\017\n\013RS"
      "S_DECIDER\020\017\022\033\n\027RULE_BASED_STOP_DECIDER\020\020"
      "\022\037\n\033SPEED_BOUNDS_PRIORI_DECIDER\020\021\022\036\n\032SPE"
      "ED_BOUNDS_FINAL_DECIDER\020\022\022\021\n\rSPEED_DECID"
      "ER\020\023\022\025\n\021ST_BOUNDS_DECIDER\020\024\022#\n\037OPEN_SPAC"
      "E_TRAJECTORY_PARTITION\020\025\022\"\n\036OPEN_SPACE_T"
      "RAJECTORY_PROVIDER\020\026\022,\n(PIECEWISE_JERK_N"
      "ONLINEAR_SPEED_OPTIMIZER\020\027\022!\n\035PIECEWISE_"
      "JERK_PATH_OPTIMIZER\020\030\022\"\n\036PIECEWISE_JERK_"
      "SPEED_OPTIMIZER\020\031\022\035\n\031SPEED_HEURISTIC_OPT"
      "IMIZER\020\032\022!\n\035LEARNING_MODEL_INFERENCE_TAS"
      "K\020\033\022,\n(LEARNING_MODEL_INFERENCE_TRAJECTO"
      "RY_TASK\020\034\022\024\n\020NEW_TEST_DECIDER\020\035\022\027\n\023ST_GE"
      "NERATE_DECIDER\020\036B\r\n\013task_config\"\246\002\n)Scen"
      "arioBareIntersectionUnprotectedConfig\0225\n"
      ")start_bare_intersection_scenario_distan"
      "ce\030\001 \001(\001:\00225\022#\n\024enable_explicit_stop\030\002 \001"
      "(\010:\005false\022\036\n\023min_pass_s_distance\030\003 \001(\001:\001"
      "3\022%\n\025approach_cruise_speed\030\004 \001(\001:\0066.7056"
      "\022\032\n\rstop_distance\030\005 \001(\001:\0030.5\022\033\n\020stop_tim"
      "eout_sec\030\006 \001(\002:\0018\022\035\n\021creep_timeout_sec\030\007"
      " \001(\002:\00210\"\254\001\n\037ScenarioEmergencyPullOverCo"
      "nfig\022 \n\025max_stop_deceleration\030\001 \001(\001:\0013\022&"
      "\n\033slow_down_deceleration_time\030\002 \001(\001:\0013\022#"
      "\n\026target_slow_down_speed\030\003 \001(\001:\0032.5\022\032\n\rs"
      "top_distance\030\004 \001(\001:\0031.5\"Y\n\033ScenarioEmerg"
      "encyStopConfig\022 \n\025max_stop_deceleration\030"
      "\001 \001(\001:\0016\022\030\n\rstop_distance\030\002 \001(\001:\0011\"\032\n\030Sc"
      "enarioLaneFollowConfig\"#\n!ScenarioLearni"
      "ngModelSampleConfig\"!\n\037ScenarioNarrowStr"
      "eetUTurnConfig\"\247\001\n\027ScenarioParkAndGoConf"
      "ig\022 \n\025front_obstacle_buffer\030\001 \001(\001:\0014\022\033\n\016"
      "heading_buffer\030\002 \001(\001:\0030.5\022\034\n\020min_dist_to"
      "_dest\030\003 \001(\001:\00225\022/\n#max_steering_percenta"
      "ge_when_cruise\030\004 \001(\001:\00290\"\301\003\n\026ScenarioPul"
      "lOverConfig\022-\n!start_pull_over_scenario_"
      "distance\030\001 \001(\001:\00250\022)\n\035pull_over_min_dist"
      "ance_buffer\030\002 \001(\001:\00210\022$\n\030max_distance_st"
      "op_search\030\003 \001(\001:\00225\022%\n\030max_s_error_to_en"
      "d_point\030\004 \001(\001:\0030.2\022%\n\030max_l_error_to_end"
      "_point\030\005 \001(\001:\0030.5\022)\n\034max_theta_error_to_"
      "end_point\030\006 \001(\001:\0030.2\022,\n\037max_distance_err"
      "or_to_end_point\030\007 \001(\001:\0030.2\022&\n\032pass_desti"
      "nation_threshold\030\010 \001(\001:\00210\022\"\n\027max_valid_"
      "stop_distance\030\t \001(\001:\0011\0224\n)s_distance_to_"
      "stop_for_open_space_parking\030\n \001(\001:\0017\"\243\002\n"
      "!ScenarioStopSignUnprotectedConfig\022,\n!st"
      "art_stop_sign_scenario_distance\030\001 \001(\001:\0015"
      "\0220\n%watch_vehicle_max_valid_stop_distanc"
      "e\030\002 \001(\001:\0015\022$\n\027max_valid_stop_distance\030\003 "
      "\001(\001:\0033.5\022\034\n\021stop_duration_sec\030\004 \001(\002:\0011\022\036"
      "\n\023min_pass_s_distance\030\005 \001(\001:\0013\022\033\n\020stop_t"
      "imeout_sec\030\006 \001(\002:\0018\022\035\n\021creep_timeout_sec"
      "\030\007 \001(\002:\00210\"\233\001\n#ScenarioTrafficLightProte"
      "ctedConfig\0220\n%start_traffic_light_scenar"
      "io_distance\030\001 \001(\001:\0015\022\"\n\027max_valid_stop_d"
      "istance\030\002 \001(\001:\0012\022\036\n\023min_pass_s_distance\030"
      "\003 \001(\001:\0013\"\225\002\n-ScenarioTrafficLightUnprote"
      "ctedLeftTurnConfig\0220\n%start_traffic_ligh"
      "t_scenario_distance\030\001 \001(\001:\0015\022#\n\025approach"
      "_cruise_speed\030\002 \001(\001:\0042.78\022$\n\027max_valid_s"
      "top_distance\030\003 \001(\001:\0033.5\022\036\n\023min_pass_s_di"
      "stance\030\004 \001(\001:\0013\022\035\n\021creep_timeout_sec\030\005 \001"
      "(\002:\00210\022(\n\032max_adc_speed_before_creep\030\006 \001"
      "(\001:\0045.56\"\312\002\n.ScenarioTrafficLightUnprote"
      "ctedRightTurnConfig\0220\n%start_traffic_lig"
      "ht_scenario_distance\030\001 \001(\001:\0015\022\'\n\030enable_"
      "right_turn_on_red\030\002 \001(\010:\005false\022$\n\027max_va"
      "lid_stop_distance\030\003 \001(\001:\0033.5\022\036\n\023min_pass"
      "_s_distance\030\004 \001(\001:\0013\0221\n&red_light_right_"
      "turn_stop_duration_sec\030\005 \001(\002:\0013\022\035\n\021creep"
      "_timeout_sec\030\006 \001(\002:\00210\022%\n\032max_adc_speed_"
      "before_creep\030\007 \001(\001:\0013\"i\n\032ScenarioValetPa"
      "rkingConfig\022\'\n\033parking_spot_range_to_sta"
      "rt\030\001 \001(\001:\00220\022\"\n\027max_valid_stop_distance\030"
      "\002 \001(\001:\0011\"g\n\037ScenarioDeadEndTurnAroundCon"
      "fig\022 \n\024dead_end_start_range\030\001 \001(\001:\00220\022\"\n"
      "\027max_valid_stop_distance\030\002 \001(\001:\0011\"\256\001\n\027Sc"
      "enarioYieldSignConfig\022.\n\"start_yield_sig"
      "n_scenario_distance\030\001 \001(\001:\00210\022$\n\027max_val"
      "id_stop_distance\030\002 \001(\001:\0034.5\022\036\n\023min_pass_"
      "s_distance\030\003 \001(\001:\0013\022\035\n\021creep_timeout_sec"
      "\030\004 \001(\002:\00210\"\266\033\n\016ScenarioConfig\022C\n\rscenari"
      "o_type\030\001 \001(\0162,.apollo.planning.ScenarioC"
      "onfig.ScenarioType\022G\n\022lane_follow_config"
      "\030\002 \001(\0132).apollo.planning.ScenarioLaneFol"
      "lowConfigH\000\022j\n$bare_intersection_unprote"
      "cted_config\030\003 \001(\0132:.apollo.planning.Scen"
      "arioBareIntersectionUnprotectedConfigH\000\022"
      "V\n\032emergency_pull_over_config\030\004 \001(\01320.ap"
      "ollo.planning.ScenarioEmergencyPullOverC"
      "onfigH\000\022M\n\025emergency_stop_config\030\005 \001(\0132,"
      ".apollo.planning.ScenarioEmergencyStopCo"
      "nfigH\000\022Z\n\034learning_model_sample_config\030\006"
      " \001(\01322.apollo.planning.ScenarioLearningM"
      "odelSampleConfigH\000\022W\n\033narrow_street_u_tu"
      "rn_config\030\007 \001(\01320.apollo.planning.Scenar"
      "ioNarrowStreetUTurnConfigH\000\022F\n\022park_and_"
      "go_config\030\010 \001(\0132(.apollo.planning.Scenar"
      "ioParkAndGoConfigH\000\022C\n\020pull_over_config\030"
      "\t \001(\0132\'.apollo.planning.ScenarioPullOver"
      "ConfigH\000\022Z\n\034stop_sign_unprotected_config"
      "\030\n \001(\01322.apollo.planning.ScenarioStopSig"
      "nUnprotectedConfigH\000\022^\n\036traffic_light_pr"
      "otected_config\030\013 \001(\01324.apollo.planning.S"
      "cenarioTrafficLightProtectedConfigH\000\022t\n*"
      "traffic_light_unprotected_left_turn_conf"
      "ig\030\014 \001(\0132>.apollo.planning.ScenarioTraff"
      "icLightUnprotectedLeftTurnConfigH\000\022v\n+tr"
      "affic_light_unprotected_right_turn_confi"
      "g\030\r \001(\0132\?.apollo.planning.ScenarioTraffi"
      "cLightUnprotectedRightTurnConfigH\000\022K\n\024va"
      "let_parking_config\030\016 \001(\0132+.apollo.planni"
      "ng.ScenarioValetParkingConfigH\000\022E\n\021yield"
      "_sign_config\030\017 \001(\0132(.apollo.planning.Sce"
      "narioYieldSignConfigH\000\022U\n\031deadend_turnar"
      "ound_config\030\022 \001(\01320.apollo.planning.Scen"
      "arioDeadEndTurnAroundConfigH\000\022=\n\nstage_t"
      "ype\030\020 \003(\0162).apollo.planning.ScenarioConf"
      "ig.StageType\022A\n\014stage_config\030\021 \003(\0132+.apo"
      "llo.planning.ScenarioConfig.StageConfig\032"
      "\316\001\n\013StageConfig\022=\n\nstage_type\030\001 \001(\0162).ap"
      "ollo.planning.ScenarioConfig.StageType\022\025"
      "\n\007enabled\030\002 \001(\010:\004true\0227\n\ttask_type\030\003 \003(\016"
      "2$.apollo.planning.TaskConfig.TaskType\0220"
      "\n\013task_config\030\004 \003(\0132\033.apollo.planning.Ta"
      "skConfig\"\243\003\n\014ScenarioType\022\017\n\013LANE_FOLLOW"
      "\020\000\022!\n\035BARE_INTERSECTION_UNPROTECTED\020\002\022\027\n"
      "\023STOP_SIGN_PROTECTED\020\003\022\031\n\025STOP_SIGN_UNPR"
      "OTECTED\020\004\022\033\n\027TRAFFIC_LIGHT_PROTECTED\020\005\022\'"
      "\n#TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN\020\006\022"
      "(\n$TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN\020"
      "\007\022\016\n\nYIELD_SIGN\020\010\022\r\n\tPULL_OVER\020\t\022\021\n\rVALE"
      "T_PARKING\020\n\022\027\n\023EMERGENCY_PULL_OVER\020\013\022\022\n\016"
      "EMERGENCY_STOP\020\014\022\030\n\024NARROW_STREET_U_TURN"
      "\020\r\022\017\n\013PARK_AND_GO\020\016\022\031\n\025LEARNING_MODEL_SA"
      "MPLE\020\017\022\026\n\022DEADEND_TURNAROUND\020\020\"\237\n\n\tStage"
      "Type\022\014\n\010NO_STAGE\020\000\022\035\n\031LANE_FOLLOW_DEFAUL"
      "T_STAGE\020\001\022+\n&BARE_INTERSECTION_UNPROTECT"
      "ED_APPROACH\020\310\001\0226\n1BARE_INTERSECTION_UNPR"
      "OTECTED_INTERSECTION_CRUISE\020\311\001\022#\n\036STOP_S"
      "IGN_UNPROTECTED_PRE_STOP\020\254\002\022\037\n\032STOP_SIGN"
      "_UNPROTECTED_STOP\020\255\002\022 \n\033STOP_SIGN_UNPROT"
      "ECTED_CREEP\020\256\002\022.\n)STOP_SIGN_UNPROTECTED_"
      "INTERSECTION_CRUISE\020\257\002\022%\n TRAFFIC_LIGHT_"
      "PROTECTED_APPROACH\020\220\003\0220\n+TRAFFIC_LIGHT_P"
      "ROTECTED_INTERSECTION_CRUISE\020\221\003\0221\n,TRAFF"
      "IC_LIGHT_UNPROTECTED_LEFT_TURN_APPROACH\020"
      "\232\003\022.\n)TRAFFIC_LIGHT_UNPROTECTED_LEFT_TUR"
      "N_CREEP\020\233\003\022<\n7TRAFFIC_LIGHT_UNPROTECTED_"
      "LEFT_TURN_INTERSECTION_CRUISE\020\234\003\022.\n)TRAF"
      "FIC_LIGHT_UNPROTECTED_RIGHT_TURN_STOP\020\244\003"
      "\022/\n*TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN"
      "_CREEP\020\245\003\022=\n8TRAFFIC_LIGHT_UNPROTECTED_R"
      "IGHT_TURN_INTERSECTION_CRUISE\020\246\003\022\027\n\022PULL"
      "_OVER_APPROACH\020\364\003\022%\n PULL_OVER_RETRY_APP"
      "ROACH_PARKING\020\365\003\022\034\n\027PULL_OVER_RETRY_PARK"
      "ING\020\366\003\022\"\n\035EMERGENCY_PULL_OVER_SLOW_DOWN\020"
      "\330\004\022!\n\034EMERGENCY_PULL_OVER_APPROACH\020\331\004\022 \n"
      "\033EMERGENCY_PULL_OVER_STANDBY\020\332\004\022\034\n\027EMERG"
      "ENCY_STOP_APPROACH\020\342\004\022\033\n\026EMERGENCY_STOP_"
      "STANDBY\020\343\004\022+\n&VALET_PARKING_APPROACHING_"
      "PARKING_SPOT\020\274\005\022\032\n\025VALET_PARKING_PARKING"
      "\020\275\005\0221\n,DEADEND_TURNAROUND_APPROACHING_TU"
      "RNING_POINT\020\314\010\022\037\n\032DEADEND_TURNAROUND_TUR"
      "NING\020\315\010\022\026\n\021PARK_AND_GO_CHECK\020\240\006\022\027\n\022PARK_"
      "AND_GO_CRUISE\020\241\006\022\027\n\022PARK_AND_GO_ADJUST\020\242"
      "\006\022\033\n\026PARK_AND_GO_PRE_CRUISE\020\243\006\022\030\n\023YIELD_"
      "SIGN_APPROACH\020\204\007\022\025\n\020YIELD_SIGN_CREEP\020\205\007\022"
      "\027\n\022LEARNING_MODEL_RUN\020\350\007B\021\n\017scenario_con"
      "fig\"\031\n\027PlannerPublicRoadConfig\"\257\002\n\021Plann"
      "erNaviConfig\0222\n\004task\030\001 \003(\0162$.apollo.plan"
      "ning.TaskConfig.TaskType\022H\n\030navi_path_de"
      "cider_config\030\002 \001(\0132&.apollo.planning.Nav"
      "iPathDeciderConfig\022J\n\031navi_speed_decider"
      "_config\030\003 \001(\0132\'.apollo.planning.NaviSpee"
      "dDeciderConfig\022P\n\034navi_obstacle_decider_"
      "config\030\004 \001(\0132*.apollo.planning.NaviObsta"
      "cleDeciderConfig\"G\n\021RtkPlanningConfig\0222\n"
      "\014planner_type\030\001 \001(\0162\034.apollo.planning.Pl"
      "annerType\"\232\001\n\026StandardPlanningConfig\0222\n\014"
      "planner_type\030\001 \003(\0162\034.apollo.planning.Pla"
      "nnerType\022L\n\032planner_public_road_config\030\002"
      " \001(\0132(.apollo.planning.PlannerPublicRoad"
      "Config\"\217\001\n\030NavigationPlanningConfig\0222\n\014p"
      "lanner_type\030\001 \003(\0162\034.apollo.planning.Plan"
      "nerType\022\?\n\023planner_navi_config\030\004 \001(\0132\".a"
      "pollo.planning.PlannerNaviConfig\"\370\002\n\013Top"
      "icConfig\022\025\n\rchassis_topic\030\001 \001(\t\022\030\n\020hmi_s"
      "tatus_topic\030\002 \001(\t\022\032\n\022localization_topic\030"
      "\003 \001(\t\022\032\n\022planning_pad_topic\030\004 \001(\t\022!\n\031pla"
      "nning_trajectory_topic\030\005 \001(\t\022\030\n\020predicti"
      "on_topic\030\006 \001(\t\022\032\n\022relative_map_topic\030\007 \001"
      "(\t\022\035\n\025routing_request_topic\030\010 \001(\t\022\036\n\026rou"
      "ting_response_topic\030\t \001(\t\022\033\n\023story_telli"
      "ng_topic\030\n \001(\t\022%\n\035traffic_light_detectio"
      "n_topic\030\013 \001(\t\022$\n\034planning_learning_data_"
      "topic\030\014 \001(\t\"\251\004\n\016PlanningConfig\0222\n\014topic_"
      "config\030\001 \001(\0132\034.apollo.planning.TopicConf"
      "ig\022K\n\rlearning_mode\030\002 \001(\01624.apollo.plann"
      "ing.PlanningConfig.PlanningLearningMode\022"
      "A\n\023rtk_planning_config\030\003 \001(\0132\".apollo.pl"
      "anning.RtkPlanningConfigH\000\022K\n\030standard_p"
      "lanning_config\030\004 \001(\0132\'.apollo.planning.S"
      "tandardPlanningConfigH\000\022O\n\032navigation_pl"
      "anning_config\030\005 \001(\0132).apollo.planning.Na"
      "vigationPlanningConfigH\000\0228\n\023default_task"
      "_config\030\006 \003(\0132\033.apollo.planning.TaskConf"
      "ig\"h\n\024PlanningLearningMode\022\017\n\013NO_LEARNIN"
      "G\020\000\022\007\n\003E2E\020\001\022\n\n\006HYBRID\020\002\022\013\n\007RL_TEST\020\003\022\014\n"
      "\010E2E_TEST\020\004\022\017\n\013HYBRID_TEST\020\005B\021\n\017planning"
      "_config*>\n\013PlannerType\022\007\n\003RTK\020\000\022\017\n\013PUBLI"
      "C_ROAD\020\001\022\010\n\004NAVI\020\002\022\013\n\007LATTICE\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 11231);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/planning/proto/planning_config.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::AddDescriptors();
  ::protobuf_modules_2fplanning_2fproto_2ftask_5fconfig_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto
namespace apollo {
namespace planning {
const ::google::protobuf::EnumDescriptor* TaskConfig_TaskType_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool TaskConfig_TaskType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TaskConfig_TaskType TaskConfig::CREEP_DECIDER;
const TaskConfig_TaskType TaskConfig::LANE_CHANGE_DECIDER;
const TaskConfig_TaskType TaskConfig::NAVI_OBSTACLE_DECIDER;
const TaskConfig_TaskType TaskConfig::NAVI_PATH_DECIDER;
const TaskConfig_TaskType TaskConfig::NAVI_SPEED_DECIDER;
const TaskConfig_TaskType TaskConfig::OPEN_SPACE_FALLBACK_DECIDER;
const TaskConfig_TaskType TaskConfig::OPEN_SPACE_PRE_STOP_DECIDER;
const TaskConfig_TaskType TaskConfig::OPEN_SPACE_ROI_DECIDER;
const TaskConfig_TaskType TaskConfig::PATH_ASSESSMENT_DECIDER;
const TaskConfig_TaskType TaskConfig::PATH_BOUNDS_DECIDER;
const TaskConfig_TaskType TaskConfig::PATH_DECIDER;
const TaskConfig_TaskType TaskConfig::PATH_LANE_BORROW_DECIDER;
const TaskConfig_TaskType TaskConfig::PATH_REFERENCE_DECIDER;
const TaskConfig_TaskType TaskConfig::PATH_REUSE_DECIDER;
const TaskConfig_TaskType TaskConfig::RSS_DECIDER;
const TaskConfig_TaskType TaskConfig::RULE_BASED_STOP_DECIDER;
const TaskConfig_TaskType TaskConfig::SPEED_BOUNDS_PRIORI_DECIDER;
const TaskConfig_TaskType TaskConfig::SPEED_BOUNDS_FINAL_DECIDER;
const TaskConfig_TaskType TaskConfig::SPEED_DECIDER;
const TaskConfig_TaskType TaskConfig::ST_BOUNDS_DECIDER;
const TaskConfig_TaskType TaskConfig::OPEN_SPACE_TRAJECTORY_PARTITION;
const TaskConfig_TaskType TaskConfig::OPEN_SPACE_TRAJECTORY_PROVIDER;
const TaskConfig_TaskType TaskConfig::PIECEWISE_JERK_NONLINEAR_SPEED_OPTIMIZER;
const TaskConfig_TaskType TaskConfig::PIECEWISE_JERK_PATH_OPTIMIZER;
const TaskConfig_TaskType TaskConfig::PIECEWISE_JERK_SPEED_OPTIMIZER;
const TaskConfig_TaskType TaskConfig::SPEED_HEURISTIC_OPTIMIZER;
const TaskConfig_TaskType TaskConfig::LEARNING_MODEL_INFERENCE_TASK;
const TaskConfig_TaskType TaskConfig::LEARNING_MODEL_INFERENCE_TRAJECTORY_TASK;
const TaskConfig_TaskType TaskConfig::NEW_TEST_DECIDER;
const TaskConfig_TaskType TaskConfig::ST_GENERATE_DECIDER;
const TaskConfig_TaskType TaskConfig::TaskType_MIN;
const TaskConfig_TaskType TaskConfig::TaskType_MAX;
const int TaskConfig::TaskType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ScenarioConfig_ScenarioType_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_enum_descriptors[1];
}
bool ScenarioConfig_ScenarioType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ScenarioConfig_ScenarioType ScenarioConfig::LANE_FOLLOW;
const ScenarioConfig_ScenarioType ScenarioConfig::BARE_INTERSECTION_UNPROTECTED;
const ScenarioConfig_ScenarioType ScenarioConfig::STOP_SIGN_PROTECTED;
const ScenarioConfig_ScenarioType ScenarioConfig::STOP_SIGN_UNPROTECTED;
const ScenarioConfig_ScenarioType ScenarioConfig::TRAFFIC_LIGHT_PROTECTED;
const ScenarioConfig_ScenarioType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN;
const ScenarioConfig_ScenarioType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN;
const ScenarioConfig_ScenarioType ScenarioConfig::YIELD_SIGN;
const ScenarioConfig_ScenarioType ScenarioConfig::PULL_OVER;
const ScenarioConfig_ScenarioType ScenarioConfig::VALET_PARKING;
const ScenarioConfig_ScenarioType ScenarioConfig::EMERGENCY_PULL_OVER;
const ScenarioConfig_ScenarioType ScenarioConfig::EMERGENCY_STOP;
const ScenarioConfig_ScenarioType ScenarioConfig::NARROW_STREET_U_TURN;
const ScenarioConfig_ScenarioType ScenarioConfig::PARK_AND_GO;
const ScenarioConfig_ScenarioType ScenarioConfig::LEARNING_MODEL_SAMPLE;
const ScenarioConfig_ScenarioType ScenarioConfig::DEADEND_TURNAROUND;
const ScenarioConfig_ScenarioType ScenarioConfig::ScenarioType_MIN;
const ScenarioConfig_ScenarioType ScenarioConfig::ScenarioType_MAX;
const int ScenarioConfig::ScenarioType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ScenarioConfig_StageType_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_enum_descriptors[2];
}
bool ScenarioConfig_StageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 200:
    case 201:
    case 300:
    case 301:
    case 302:
    case 303:
    case 400:
    case 401:
    case 410:
    case 411:
    case 412:
    case 420:
    case 421:
    case 422:
    case 500:
    case 501:
    case 502:
    case 600:
    case 601:
    case 602:
    case 610:
    case 611:
    case 700:
    case 701:
    case 800:
    case 801:
    case 802:
    case 803:
    case 900:
    case 901:
    case 1000:
    case 1100:
    case 1101:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ScenarioConfig_StageType ScenarioConfig::NO_STAGE;
const ScenarioConfig_StageType ScenarioConfig::LANE_FOLLOW_DEFAULT_STAGE;
const ScenarioConfig_StageType ScenarioConfig::BARE_INTERSECTION_UNPROTECTED_APPROACH;
const ScenarioConfig_StageType ScenarioConfig::BARE_INTERSECTION_UNPROTECTED_INTERSECTION_CRUISE;
const ScenarioConfig_StageType ScenarioConfig::STOP_SIGN_UNPROTECTED_PRE_STOP;
const ScenarioConfig_StageType ScenarioConfig::STOP_SIGN_UNPROTECTED_STOP;
const ScenarioConfig_StageType ScenarioConfig::STOP_SIGN_UNPROTECTED_CREEP;
const ScenarioConfig_StageType ScenarioConfig::STOP_SIGN_UNPROTECTED_INTERSECTION_CRUISE;
const ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_PROTECTED_APPROACH;
const ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_PROTECTED_INTERSECTION_CRUISE;
const ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_APPROACH;
const ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_CREEP;
const ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_LEFT_TURN_INTERSECTION_CRUISE;
const ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_STOP;
const ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_CREEP;
const ScenarioConfig_StageType ScenarioConfig::TRAFFIC_LIGHT_UNPROTECTED_RIGHT_TURN_INTERSECTION_CRUISE;
const ScenarioConfig_StageType ScenarioConfig::PULL_OVER_APPROACH;
const ScenarioConfig_StageType ScenarioConfig::PULL_OVER_RETRY_APPROACH_PARKING;
const ScenarioConfig_StageType ScenarioConfig::PULL_OVER_RETRY_PARKING;
const ScenarioConfig_StageType ScenarioConfig::EMERGENCY_PULL_OVER_SLOW_DOWN;
const ScenarioConfig_StageType ScenarioConfig::EMERGENCY_PULL_OVER_APPROACH;
const ScenarioConfig_StageType ScenarioConfig::EMERGENCY_PULL_OVER_STANDBY;
const ScenarioConfig_StageType ScenarioConfig::EMERGENCY_STOP_APPROACH;
const ScenarioConfig_StageType ScenarioConfig::EMERGENCY_STOP_STANDBY;
const ScenarioConfig_StageType ScenarioConfig::VALET_PARKING_APPROACHING_PARKING_SPOT;
const ScenarioConfig_StageType ScenarioConfig::VALET_PARKING_PARKING;
const ScenarioConfig_StageType ScenarioConfig::DEADEND_TURNAROUND_APPROACHING_TURNING_POINT;
const ScenarioConfig_StageType ScenarioConfig::DEADEND_TURNAROUND_TURNING;
const ScenarioConfig_StageType ScenarioConfig::PARK_AND_GO_CHECK;
const ScenarioConfig_StageType ScenarioConfig::PARK_AND_GO_CRUISE;
const ScenarioConfig_StageType ScenarioConfig::PARK_AND_GO_ADJUST;
const ScenarioConfig_StageType ScenarioConfig::PARK_AND_GO_PRE_CRUISE;
const ScenarioConfig_StageType ScenarioConfig::YIELD_SIGN_APPROACH;
const ScenarioConfig_StageType ScenarioConfig::YIELD_SIGN_CREEP;
const ScenarioConfig_StageType ScenarioConfig::LEARNING_MODEL_RUN;
const ScenarioConfig_StageType ScenarioConfig::StageType_MIN;
const ScenarioConfig_StageType ScenarioConfig::StageType_MAX;
const int ScenarioConfig::StageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PlanningConfig_PlanningLearningMode_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_enum_descriptors[3];
}
bool PlanningConfig_PlanningLearningMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PlanningConfig_PlanningLearningMode PlanningConfig::NO_LEARNING;
const PlanningConfig_PlanningLearningMode PlanningConfig::E2E;
const PlanningConfig_PlanningLearningMode PlanningConfig::HYBRID;
const PlanningConfig_PlanningLearningMode PlanningConfig::RL_TEST;
const PlanningConfig_PlanningLearningMode PlanningConfig::E2E_TEST;
const PlanningConfig_PlanningLearningMode PlanningConfig::HYBRID_TEST;
const PlanningConfig_PlanningLearningMode PlanningConfig::PlanningLearningMode_MIN;
const PlanningConfig_PlanningLearningMode PlanningConfig::PlanningLearningMode_MAX;
const int PlanningConfig::PlanningLearningMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PlannerType_descriptor() {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_enum_descriptors[4];
}
bool PlannerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TaskConfig::InitAsDefaultInstance() {
  ::apollo::planning::_TaskConfig_default_instance_.creep_decider_config_ = const_cast< ::apollo::planning::CreepDeciderConfig*>(
      ::apollo::planning::CreepDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.lane_change_decider_config_ = const_cast< ::apollo::planning::LaneChangeDeciderConfig*>(
      ::apollo::planning::LaneChangeDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.open_space_fallback_decider_config_ = const_cast< ::apollo::planning::OpenSpaceFallBackDeciderConfig*>(
      ::apollo::planning::OpenSpaceFallBackDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.open_space_pre_stop_decider_config_ = const_cast< ::apollo::planning::OpenSpacePreStopDeciderConfig*>(
      ::apollo::planning::OpenSpacePreStopDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.open_space_roi_decider_config_ = const_cast< ::apollo::planning::OpenSpaceRoiDeciderConfig*>(
      ::apollo::planning::OpenSpaceRoiDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.path_assessment_decider_config_ = const_cast< ::apollo::planning::PathAssessmentDeciderConfig*>(
      ::apollo::planning::PathAssessmentDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.path_bounds_decider_config_ = const_cast< ::apollo::planning::PathBoundsDeciderConfig*>(
      ::apollo::planning::PathBoundsDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.path_decider_config_ = const_cast< ::apollo::planning::PathDeciderConfig*>(
      ::apollo::planning::PathDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.path_lane_borrow_decider_config_ = const_cast< ::apollo::planning::PathLaneBorrowDeciderConfig*>(
      ::apollo::planning::PathLaneBorrowDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.path_reference_decider_config_ = const_cast< ::apollo::planning::PathReferenceDeciderConfig*>(
      ::apollo::planning::PathReferenceDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.path_reuse_decider_config_ = const_cast< ::apollo::planning::PathReuseDeciderConfig*>(
      ::apollo::planning::PathReuseDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.rule_based_stop_decider_config_ = const_cast< ::apollo::planning::RuleBasedStopDeciderConfig*>(
      ::apollo::planning::RuleBasedStopDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.speed_bounds_decider_config_ = const_cast< ::apollo::planning::SpeedBoundsDeciderConfig*>(
      ::apollo::planning::SpeedBoundsDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.st_bounds_decider_config_ = const_cast< ::apollo::planning::STBoundsDeciderConfig*>(
      ::apollo::planning::STBoundsDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.open_space_trajectory_partition_config_ = const_cast< ::apollo::planning::OpenSpaceTrajectoryPartitionConfig*>(
      ::apollo::planning::OpenSpaceTrajectoryPartitionConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.open_space_trajectory_provider_config_ = const_cast< ::apollo::planning::OpenSpaceTrajectoryProviderConfig*>(
      ::apollo::planning::OpenSpaceTrajectoryProviderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.piecewise_jerk_nonlinear_speed_optimizer_config_ = const_cast< ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig*>(
      ::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.piecewise_jerk_path_optimizer_config_ = const_cast< ::apollo::planning::PiecewiseJerkPathOptimizerConfig*>(
      ::apollo::planning::PiecewiseJerkPathOptimizerConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.piecewise_jerk_speed_optimizer_config_ = const_cast< ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig*>(
      ::apollo::planning::PiecewiseJerkSpeedOptimizerConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.speed_heuristic_optimizer_config_ = const_cast< ::apollo::planning::SpeedHeuristicOptimizerConfig*>(
      ::apollo::planning::SpeedHeuristicOptimizerConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.learning_model_inference_task_config_ = const_cast< ::apollo::planning::LearningModelInferenceTaskConfig*>(
      ::apollo::planning::LearningModelInferenceTaskConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.learning_model_inference_trajectory_task_config_ = const_cast< ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig*>(
      ::apollo::planning::LearningModelInferenceTrajectoryTaskConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.new_test_decider_config_ = const_cast< ::apollo::planning::NewTestDeciderConfig*>(
      ::apollo::planning::NewTestDeciderConfig::internal_default_instance());
  ::apollo::planning::_TaskConfig_default_instance_.st_generate_decider_config_ = const_cast< ::apollo::planning::StGenerateDeciderConfig*>(
      ::apollo::planning::StGenerateDeciderConfig::internal_default_instance());
}
void TaskConfig::set_allocated_creep_decider_config(::apollo::planning::CreepDeciderConfig* creep_decider_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (creep_decider_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      creep_decider_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, creep_decider_config, submessage_arena);
    }
    set_has_creep_decider_config();
    task_config_.creep_decider_config_ = creep_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.creep_decider_config)
}
void TaskConfig::clear_creep_decider_config() {
  if (has_creep_decider_config()) {
    delete task_config_.creep_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_lane_change_decider_config(::apollo::planning::LaneChangeDeciderConfig* lane_change_decider_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (lane_change_decider_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lane_change_decider_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lane_change_decider_config, submessage_arena);
    }
    set_has_lane_change_decider_config();
    task_config_.lane_change_decider_config_ = lane_change_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.lane_change_decider_config)
}
void TaskConfig::clear_lane_change_decider_config() {
  if (has_lane_change_decider_config()) {
    delete task_config_.lane_change_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_open_space_fallback_decider_config(::apollo::planning::OpenSpaceFallBackDeciderConfig* open_space_fallback_decider_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (open_space_fallback_decider_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      open_space_fallback_decider_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, open_space_fallback_decider_config, submessage_arena);
    }
    set_has_open_space_fallback_decider_config();
    task_config_.open_space_fallback_decider_config_ = open_space_fallback_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.open_space_fallback_decider_config)
}
void TaskConfig::clear_open_space_fallback_decider_config() {
  if (has_open_space_fallback_decider_config()) {
    delete task_config_.open_space_fallback_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_open_space_pre_stop_decider_config(::apollo::planning::OpenSpacePreStopDeciderConfig* open_space_pre_stop_decider_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (open_space_pre_stop_decider_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      open_space_pre_stop_decider_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, open_space_pre_stop_decider_config, submessage_arena);
    }
    set_has_open_space_pre_stop_decider_config();
    task_config_.open_space_pre_stop_decider_config_ = open_space_pre_stop_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.open_space_pre_stop_decider_config)
}
void TaskConfig::clear_open_space_pre_stop_decider_config() {
  if (has_open_space_pre_stop_decider_config()) {
    delete task_config_.open_space_pre_stop_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_open_space_roi_decider_config(::apollo::planning::OpenSpaceRoiDeciderConfig* open_space_roi_decider_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (open_space_roi_decider_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      open_space_roi_decider_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, open_space_roi_decider_config, submessage_arena);
    }
    set_has_open_space_roi_decider_config();
    task_config_.open_space_roi_decider_config_ = open_space_roi_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.open_space_roi_decider_config)
}
void TaskConfig::clear_open_space_roi_decider_config() {
  if (has_open_space_roi_decider_config()) {
    delete task_config_.open_space_roi_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_path_assessment_decider_config(::apollo::planning::PathAssessmentDeciderConfig* path_assessment_decider_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (path_assessment_decider_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      path_assessment_decider_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path_assessment_decider_config, submessage_arena);
    }
    set_has_path_assessment_decider_config();
    task_config_.path_assessment_decider_config_ = path_assessment_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.path_assessment_decider_config)
}
void TaskConfig::clear_path_assessment_decider_config() {
  if (has_path_assessment_decider_config()) {
    delete task_config_.path_assessment_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_path_bounds_decider_config(::apollo::planning::PathBoundsDeciderConfig* path_bounds_decider_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (path_bounds_decider_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      path_bounds_decider_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path_bounds_decider_config, submessage_arena);
    }
    set_has_path_bounds_decider_config();
    task_config_.path_bounds_decider_config_ = path_bounds_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.path_bounds_decider_config)
}
void TaskConfig::clear_path_bounds_decider_config() {
  if (has_path_bounds_decider_config()) {
    delete task_config_.path_bounds_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_path_decider_config(::apollo::planning::PathDeciderConfig* path_decider_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (path_decider_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      path_decider_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path_decider_config, submessage_arena);
    }
    set_has_path_decider_config();
    task_config_.path_decider_config_ = path_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.path_decider_config)
}
void TaskConfig::clear_path_decider_config() {
  if (has_path_decider_config()) {
    delete task_config_.path_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_path_lane_borrow_decider_config(::apollo::planning::PathLaneBorrowDeciderConfig* path_lane_borrow_decider_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (path_lane_borrow_decider_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      path_lane_borrow_decider_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path_lane_borrow_decider_config, submessage_arena);
    }
    set_has_path_lane_borrow_decider_config();
    task_config_.path_lane_borrow_decider_config_ = path_lane_borrow_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.path_lane_borrow_decider_config)
}
void TaskConfig::clear_path_lane_borrow_decider_config() {
  if (has_path_lane_borrow_decider_config()) {
    delete task_config_.path_lane_borrow_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_path_reference_decider_config(::apollo::planning::PathReferenceDeciderConfig* path_reference_decider_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (path_reference_decider_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      path_reference_decider_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path_reference_decider_config, submessage_arena);
    }
    set_has_path_reference_decider_config();
    task_config_.path_reference_decider_config_ = path_reference_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.path_reference_decider_config)
}
void TaskConfig::clear_path_reference_decider_config() {
  if (has_path_reference_decider_config()) {
    delete task_config_.path_reference_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_path_reuse_decider_config(::apollo::planning::PathReuseDeciderConfig* path_reuse_decider_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (path_reuse_decider_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      path_reuse_decider_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path_reuse_decider_config, submessage_arena);
    }
    set_has_path_reuse_decider_config();
    task_config_.path_reuse_decider_config_ = path_reuse_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.path_reuse_decider_config)
}
void TaskConfig::clear_path_reuse_decider_config() {
  if (has_path_reuse_decider_config()) {
    delete task_config_.path_reuse_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_rule_based_stop_decider_config(::apollo::planning::RuleBasedStopDeciderConfig* rule_based_stop_decider_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (rule_based_stop_decider_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rule_based_stop_decider_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rule_based_stop_decider_config, submessage_arena);
    }
    set_has_rule_based_stop_decider_config();
    task_config_.rule_based_stop_decider_config_ = rule_based_stop_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.rule_based_stop_decider_config)
}
void TaskConfig::clear_rule_based_stop_decider_config() {
  if (has_rule_based_stop_decider_config()) {
    delete task_config_.rule_based_stop_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_speed_bounds_decider_config(::apollo::planning::SpeedBoundsDeciderConfig* speed_bounds_decider_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (speed_bounds_decider_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      speed_bounds_decider_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speed_bounds_decider_config, submessage_arena);
    }
    set_has_speed_bounds_decider_config();
    task_config_.speed_bounds_decider_config_ = speed_bounds_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.speed_bounds_decider_config)
}
void TaskConfig::clear_speed_bounds_decider_config() {
  if (has_speed_bounds_decider_config()) {
    delete task_config_.speed_bounds_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_st_bounds_decider_config(::apollo::planning::STBoundsDeciderConfig* st_bounds_decider_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (st_bounds_decider_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      st_bounds_decider_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, st_bounds_decider_config, submessage_arena);
    }
    set_has_st_bounds_decider_config();
    task_config_.st_bounds_decider_config_ = st_bounds_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.st_bounds_decider_config)
}
void TaskConfig::clear_st_bounds_decider_config() {
  if (has_st_bounds_decider_config()) {
    delete task_config_.st_bounds_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_open_space_trajectory_partition_config(::apollo::planning::OpenSpaceTrajectoryPartitionConfig* open_space_trajectory_partition_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (open_space_trajectory_partition_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      open_space_trajectory_partition_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, open_space_trajectory_partition_config, submessage_arena);
    }
    set_has_open_space_trajectory_partition_config();
    task_config_.open_space_trajectory_partition_config_ = open_space_trajectory_partition_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.open_space_trajectory_partition_config)
}
void TaskConfig::clear_open_space_trajectory_partition_config() {
  if (has_open_space_trajectory_partition_config()) {
    delete task_config_.open_space_trajectory_partition_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_open_space_trajectory_provider_config(::apollo::planning::OpenSpaceTrajectoryProviderConfig* open_space_trajectory_provider_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (open_space_trajectory_provider_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      open_space_trajectory_provider_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, open_space_trajectory_provider_config, submessage_arena);
    }
    set_has_open_space_trajectory_provider_config();
    task_config_.open_space_trajectory_provider_config_ = open_space_trajectory_provider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.open_space_trajectory_provider_config)
}
void TaskConfig::clear_open_space_trajectory_provider_config() {
  if (has_open_space_trajectory_provider_config()) {
    delete task_config_.open_space_trajectory_provider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_piecewise_jerk_nonlinear_speed_optimizer_config(::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig* piecewise_jerk_nonlinear_speed_optimizer_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (piecewise_jerk_nonlinear_speed_optimizer_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      piecewise_jerk_nonlinear_speed_optimizer_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, piecewise_jerk_nonlinear_speed_optimizer_config, submessage_arena);
    }
    set_has_piecewise_jerk_nonlinear_speed_optimizer_config();
    task_config_.piecewise_jerk_nonlinear_speed_optimizer_config_ = piecewise_jerk_nonlinear_speed_optimizer_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.piecewise_jerk_nonlinear_speed_optimizer_config)
}
void TaskConfig::clear_piecewise_jerk_nonlinear_speed_optimizer_config() {
  if (has_piecewise_jerk_nonlinear_speed_optimizer_config()) {
    delete task_config_.piecewise_jerk_nonlinear_speed_optimizer_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_piecewise_jerk_path_optimizer_config(::apollo::planning::PiecewiseJerkPathOptimizerConfig* piecewise_jerk_path_optimizer_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (piecewise_jerk_path_optimizer_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      piecewise_jerk_path_optimizer_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, piecewise_jerk_path_optimizer_config, submessage_arena);
    }
    set_has_piecewise_jerk_path_optimizer_config();
    task_config_.piecewise_jerk_path_optimizer_config_ = piecewise_jerk_path_optimizer_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.piecewise_jerk_path_optimizer_config)
}
void TaskConfig::clear_piecewise_jerk_path_optimizer_config() {
  if (has_piecewise_jerk_path_optimizer_config()) {
    delete task_config_.piecewise_jerk_path_optimizer_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_piecewise_jerk_speed_optimizer_config(::apollo::planning::PiecewiseJerkSpeedOptimizerConfig* piecewise_jerk_speed_optimizer_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (piecewise_jerk_speed_optimizer_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      piecewise_jerk_speed_optimizer_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, piecewise_jerk_speed_optimizer_config, submessage_arena);
    }
    set_has_piecewise_jerk_speed_optimizer_config();
    task_config_.piecewise_jerk_speed_optimizer_config_ = piecewise_jerk_speed_optimizer_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.piecewise_jerk_speed_optimizer_config)
}
void TaskConfig::clear_piecewise_jerk_speed_optimizer_config() {
  if (has_piecewise_jerk_speed_optimizer_config()) {
    delete task_config_.piecewise_jerk_speed_optimizer_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_speed_heuristic_optimizer_config(::apollo::planning::SpeedHeuristicOptimizerConfig* speed_heuristic_optimizer_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (speed_heuristic_optimizer_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      speed_heuristic_optimizer_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speed_heuristic_optimizer_config, submessage_arena);
    }
    set_has_speed_heuristic_optimizer_config();
    task_config_.speed_heuristic_optimizer_config_ = speed_heuristic_optimizer_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.speed_heuristic_optimizer_config)
}
void TaskConfig::clear_speed_heuristic_optimizer_config() {
  if (has_speed_heuristic_optimizer_config()) {
    delete task_config_.speed_heuristic_optimizer_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_learning_model_inference_task_config(::apollo::planning::LearningModelInferenceTaskConfig* learning_model_inference_task_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (learning_model_inference_task_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      learning_model_inference_task_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, learning_model_inference_task_config, submessage_arena);
    }
    set_has_learning_model_inference_task_config();
    task_config_.learning_model_inference_task_config_ = learning_model_inference_task_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.learning_model_inference_task_config)
}
void TaskConfig::clear_learning_model_inference_task_config() {
  if (has_learning_model_inference_task_config()) {
    delete task_config_.learning_model_inference_task_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_learning_model_inference_trajectory_task_config(::apollo::planning::LearningModelInferenceTrajectoryTaskConfig* learning_model_inference_trajectory_task_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (learning_model_inference_trajectory_task_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      learning_model_inference_trajectory_task_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, learning_model_inference_trajectory_task_config, submessage_arena);
    }
    set_has_learning_model_inference_trajectory_task_config();
    task_config_.learning_model_inference_trajectory_task_config_ = learning_model_inference_trajectory_task_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.learning_model_inference_trajectory_task_config)
}
void TaskConfig::clear_learning_model_inference_trajectory_task_config() {
  if (has_learning_model_inference_trajectory_task_config()) {
    delete task_config_.learning_model_inference_trajectory_task_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_new_test_decider_config(::apollo::planning::NewTestDeciderConfig* new_test_decider_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (new_test_decider_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      new_test_decider_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_test_decider_config, submessage_arena);
    }
    set_has_new_test_decider_config();
    task_config_.new_test_decider_config_ = new_test_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.new_test_decider_config)
}
void TaskConfig::clear_new_test_decider_config() {
  if (has_new_test_decider_config()) {
    delete task_config_.new_test_decider_config_;
    clear_has_task_config();
  }
}
void TaskConfig::set_allocated_st_generate_decider_config(::apollo::planning::StGenerateDeciderConfig* st_generate_decider_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_task_config();
  if (st_generate_decider_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      st_generate_decider_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, st_generate_decider_config, submessage_arena);
    }
    set_has_st_generate_decider_config();
    task_config_.st_generate_decider_config_ = st_generate_decider_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.TaskConfig.st_generate_decider_config)
}
void TaskConfig::clear_st_generate_decider_config() {
  if (has_st_generate_decider_config()) {
    delete task_config_.st_generate_decider_config_;
    clear_has_task_config();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskConfig::kTaskTypeFieldNumber;
const int TaskConfig::kCreepDeciderConfigFieldNumber;
const int TaskConfig::kLaneChangeDeciderConfigFieldNumber;
const int TaskConfig::kOpenSpaceFallbackDeciderConfigFieldNumber;
const int TaskConfig::kOpenSpacePreStopDeciderConfigFieldNumber;
const int TaskConfig::kOpenSpaceRoiDeciderConfigFieldNumber;
const int TaskConfig::kPathAssessmentDeciderConfigFieldNumber;
const int TaskConfig::kPathBoundsDeciderConfigFieldNumber;
const int TaskConfig::kPathDeciderConfigFieldNumber;
const int TaskConfig::kPathLaneBorrowDeciderConfigFieldNumber;
const int TaskConfig::kPathReferenceDeciderConfigFieldNumber;
const int TaskConfig::kPathReuseDeciderConfigFieldNumber;
const int TaskConfig::kRuleBasedStopDeciderConfigFieldNumber;
const int TaskConfig::kSpeedBoundsDeciderConfigFieldNumber;
const int TaskConfig::kStBoundsDeciderConfigFieldNumber;
const int TaskConfig::kOpenSpaceTrajectoryPartitionConfigFieldNumber;
const int TaskConfig::kOpenSpaceTrajectoryProviderConfigFieldNumber;
const int TaskConfig::kPiecewiseJerkNonlinearSpeedOptimizerConfigFieldNumber;
const int TaskConfig::kPiecewiseJerkPathOptimizerConfigFieldNumber;
const int TaskConfig::kPiecewiseJerkSpeedOptimizerConfigFieldNumber;
const int TaskConfig::kSpeedHeuristicOptimizerConfigFieldNumber;
const int TaskConfig::kLearningModelInferenceTaskConfigFieldNumber;
const int TaskConfig::kLearningModelInferenceTrajectoryTaskConfigFieldNumber;
const int TaskConfig::kNewTestDeciderConfigFieldNumber;
const int TaskConfig::kStGenerateDeciderConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskConfig::TaskConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_TaskConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TaskConfig)
}
TaskConfig::TaskConfig(const TaskConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_type_ = from.task_type_;
  clear_has_task_config();
  switch (from.task_config_case()) {
    case kCreepDeciderConfig: {
      mutable_creep_decider_config()->::apollo::planning::CreepDeciderConfig::MergeFrom(from.creep_decider_config());
      break;
    }
    case kLaneChangeDeciderConfig: {
      mutable_lane_change_decider_config()->::apollo::planning::LaneChangeDeciderConfig::MergeFrom(from.lane_change_decider_config());
      break;
    }
    case kOpenSpaceFallbackDeciderConfig: {
      mutable_open_space_fallback_decider_config()->::apollo::planning::OpenSpaceFallBackDeciderConfig::MergeFrom(from.open_space_fallback_decider_config());
      break;
    }
    case kOpenSpacePreStopDeciderConfig: {
      mutable_open_space_pre_stop_decider_config()->::apollo::planning::OpenSpacePreStopDeciderConfig::MergeFrom(from.open_space_pre_stop_decider_config());
      break;
    }
    case kOpenSpaceRoiDeciderConfig: {
      mutable_open_space_roi_decider_config()->::apollo::planning::OpenSpaceRoiDeciderConfig::MergeFrom(from.open_space_roi_decider_config());
      break;
    }
    case kPathAssessmentDeciderConfig: {
      mutable_path_assessment_decider_config()->::apollo::planning::PathAssessmentDeciderConfig::MergeFrom(from.path_assessment_decider_config());
      break;
    }
    case kPathBoundsDeciderConfig: {
      mutable_path_bounds_decider_config()->::apollo::planning::PathBoundsDeciderConfig::MergeFrom(from.path_bounds_decider_config());
      break;
    }
    case kPathDeciderConfig: {
      mutable_path_decider_config()->::apollo::planning::PathDeciderConfig::MergeFrom(from.path_decider_config());
      break;
    }
    case kPathLaneBorrowDeciderConfig: {
      mutable_path_lane_borrow_decider_config()->::apollo::planning::PathLaneBorrowDeciderConfig::MergeFrom(from.path_lane_borrow_decider_config());
      break;
    }
    case kPathReferenceDeciderConfig: {
      mutable_path_reference_decider_config()->::apollo::planning::PathReferenceDeciderConfig::MergeFrom(from.path_reference_decider_config());
      break;
    }
    case kPathReuseDeciderConfig: {
      mutable_path_reuse_decider_config()->::apollo::planning::PathReuseDeciderConfig::MergeFrom(from.path_reuse_decider_config());
      break;
    }
    case kRuleBasedStopDeciderConfig: {
      mutable_rule_based_stop_decider_config()->::apollo::planning::RuleBasedStopDeciderConfig::MergeFrom(from.rule_based_stop_decider_config());
      break;
    }
    case kSpeedBoundsDeciderConfig: {
      mutable_speed_bounds_decider_config()->::apollo::planning::SpeedBoundsDeciderConfig::MergeFrom(from.speed_bounds_decider_config());
      break;
    }
    case kStBoundsDeciderConfig: {
      mutable_st_bounds_decider_config()->::apollo::planning::STBoundsDeciderConfig::MergeFrom(from.st_bounds_decider_config());
      break;
    }
    case kOpenSpaceTrajectoryPartitionConfig: {
      mutable_open_space_trajectory_partition_config()->::apollo::planning::OpenSpaceTrajectoryPartitionConfig::MergeFrom(from.open_space_trajectory_partition_config());
      break;
    }
    case kOpenSpaceTrajectoryProviderConfig: {
      mutable_open_space_trajectory_provider_config()->::apollo::planning::OpenSpaceTrajectoryProviderConfig::MergeFrom(from.open_space_trajectory_provider_config());
      break;
    }
    case kPiecewiseJerkNonlinearSpeedOptimizerConfig: {
      mutable_piecewise_jerk_nonlinear_speed_optimizer_config()->::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig::MergeFrom(from.piecewise_jerk_nonlinear_speed_optimizer_config());
      break;
    }
    case kPiecewiseJerkPathOptimizerConfig: {
      mutable_piecewise_jerk_path_optimizer_config()->::apollo::planning::PiecewiseJerkPathOptimizerConfig::MergeFrom(from.piecewise_jerk_path_optimizer_config());
      break;
    }
    case kPiecewiseJerkSpeedOptimizerConfig: {
      mutable_piecewise_jerk_speed_optimizer_config()->::apollo::planning::PiecewiseJerkSpeedOptimizerConfig::MergeFrom(from.piecewise_jerk_speed_optimizer_config());
      break;
    }
    case kSpeedHeuristicOptimizerConfig: {
      mutable_speed_heuristic_optimizer_config()->::apollo::planning::SpeedHeuristicOptimizerConfig::MergeFrom(from.speed_heuristic_optimizer_config());
      break;
    }
    case kLearningModelInferenceTaskConfig: {
      mutable_learning_model_inference_task_config()->::apollo::planning::LearningModelInferenceTaskConfig::MergeFrom(from.learning_model_inference_task_config());
      break;
    }
    case kLearningModelInferenceTrajectoryTaskConfig: {
      mutable_learning_model_inference_trajectory_task_config()->::apollo::planning::LearningModelInferenceTrajectoryTaskConfig::MergeFrom(from.learning_model_inference_trajectory_task_config());
      break;
    }
    case kNewTestDeciderConfig: {
      mutable_new_test_decider_config()->::apollo::planning::NewTestDeciderConfig::MergeFrom(from.new_test_decider_config());
      break;
    }
    case kStGenerateDeciderConfig: {
      mutable_st_generate_decider_config()->::apollo::planning::StGenerateDeciderConfig::MergeFrom(from.st_generate_decider_config());
      break;
    }
    case TASK_CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TaskConfig)
}

void TaskConfig::SharedCtor() {
  task_type_ = 1;
  clear_has_task_config();
}

TaskConfig::~TaskConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.TaskConfig)
  SharedDtor();
}

void TaskConfig::SharedDtor() {
  if (has_task_config()) {
    clear_task_config();
  }
}

void TaskConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TaskConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskConfig& TaskConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_TaskConfig.base);
  return *internal_default_instance();
}


void TaskConfig::clear_task_config() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.TaskConfig)
  switch (task_config_case()) {
    case kCreepDeciderConfig: {
      delete task_config_.creep_decider_config_;
      break;
    }
    case kLaneChangeDeciderConfig: {
      delete task_config_.lane_change_decider_config_;
      break;
    }
    case kOpenSpaceFallbackDeciderConfig: {
      delete task_config_.open_space_fallback_decider_config_;
      break;
    }
    case kOpenSpacePreStopDeciderConfig: {
      delete task_config_.open_space_pre_stop_decider_config_;
      break;
    }
    case kOpenSpaceRoiDeciderConfig: {
      delete task_config_.open_space_roi_decider_config_;
      break;
    }
    case kPathAssessmentDeciderConfig: {
      delete task_config_.path_assessment_decider_config_;
      break;
    }
    case kPathBoundsDeciderConfig: {
      delete task_config_.path_bounds_decider_config_;
      break;
    }
    case kPathDeciderConfig: {
      delete task_config_.path_decider_config_;
      break;
    }
    case kPathLaneBorrowDeciderConfig: {
      delete task_config_.path_lane_borrow_decider_config_;
      break;
    }
    case kPathReferenceDeciderConfig: {
      delete task_config_.path_reference_decider_config_;
      break;
    }
    case kPathReuseDeciderConfig: {
      delete task_config_.path_reuse_decider_config_;
      break;
    }
    case kRuleBasedStopDeciderConfig: {
      delete task_config_.rule_based_stop_decider_config_;
      break;
    }
    case kSpeedBoundsDeciderConfig: {
      delete task_config_.speed_bounds_decider_config_;
      break;
    }
    case kStBoundsDeciderConfig: {
      delete task_config_.st_bounds_decider_config_;
      break;
    }
    case kOpenSpaceTrajectoryPartitionConfig: {
      delete task_config_.open_space_trajectory_partition_config_;
      break;
    }
    case kOpenSpaceTrajectoryProviderConfig: {
      delete task_config_.open_space_trajectory_provider_config_;
      break;
    }
    case kPiecewiseJerkNonlinearSpeedOptimizerConfig: {
      delete task_config_.piecewise_jerk_nonlinear_speed_optimizer_config_;
      break;
    }
    case kPiecewiseJerkPathOptimizerConfig: {
      delete task_config_.piecewise_jerk_path_optimizer_config_;
      break;
    }
    case kPiecewiseJerkSpeedOptimizerConfig: {
      delete task_config_.piecewise_jerk_speed_optimizer_config_;
      break;
    }
    case kSpeedHeuristicOptimizerConfig: {
      delete task_config_.speed_heuristic_optimizer_config_;
      break;
    }
    case kLearningModelInferenceTaskConfig: {
      delete task_config_.learning_model_inference_task_config_;
      break;
    }
    case kLearningModelInferenceTrajectoryTaskConfig: {
      delete task_config_.learning_model_inference_trajectory_task_config_;
      break;
    }
    case kNewTestDeciderConfig: {
      delete task_config_.new_test_decider_config_;
      break;
    }
    case kStGenerateDeciderConfig: {
      delete task_config_.st_generate_decider_config_;
      break;
    }
    case TASK_CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TASK_CONFIG_NOT_SET;
}


void TaskConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TaskConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_type_ = 1;
  clear_task_config();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.TaskConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.TaskConfig.TaskType task_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::TaskConfig_TaskType_IsValid(value)) {
            set_task_type(static_cast< ::apollo::planning::TaskConfig_TaskType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.CreepDeciderConfig creep_decider_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_creep_decider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.LaneChangeDeciderConfig lane_change_decider_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_change_decider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.OpenSpaceFallBackDeciderConfig open_space_fallback_decider_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_open_space_fallback_decider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.OpenSpacePreStopDeciderConfig open_space_pre_stop_decider_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_open_space_pre_stop_decider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.OpenSpaceRoiDeciderConfig open_space_roi_decider_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_open_space_roi_decider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PathAssessmentDeciderConfig path_assessment_decider_config = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path_assessment_decider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PathBoundsDeciderConfig path_bounds_decider_config = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path_bounds_decider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PathDeciderConfig path_decider_config = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path_decider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PathLaneBorrowDeciderConfig path_lane_borrow_decider_config = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path_lane_borrow_decider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PathReferenceDeciderConfig path_reference_decider_config = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path_reference_decider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PathReuseDeciderConfig path_reuse_decider_config = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path_reuse_decider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.RuleBasedStopDeciderConfig rule_based_stop_decider_config = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rule_based_stop_decider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.SpeedBoundsDeciderConfig speed_bounds_decider_config = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speed_bounds_decider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.STBoundsDeciderConfig st_bounds_decider_config = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_st_bounds_decider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.OpenSpaceTrajectoryPartitionConfig open_space_trajectory_partition_config = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_open_space_trajectory_partition_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.OpenSpaceTrajectoryProviderConfig open_space_trajectory_provider_config = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_open_space_trajectory_provider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig piecewise_jerk_nonlinear_speed_optimizer_config = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_piecewise_jerk_nonlinear_speed_optimizer_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PiecewiseJerkPathOptimizerConfig piecewise_jerk_path_optimizer_config = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_piecewise_jerk_path_optimizer_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig piecewise_jerk_speed_optimizer_config = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_piecewise_jerk_speed_optimizer_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.SpeedHeuristicOptimizerConfig speed_heuristic_optimizer_config = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_speed_heuristic_optimizer_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.LearningModelInferenceTaskConfig learning_model_inference_task_config = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_learning_model_inference_task_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.LearningModelInferenceTrajectoryTaskConfig learning_model_inference_trajectory_task_config = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_learning_model_inference_trajectory_task_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.NewTestDeciderConfig new_test_decider_config = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_new_test_decider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.StGenerateDeciderConfig st_generate_decider_config = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_st_generate_decider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.TaskConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.TaskConfig)
  return false;
#undef DO_
}

void TaskConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.TaskConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.TaskConfig.TaskType task_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->task_type(), output);
  }

  switch (task_config_case()) {
    case kCreepDeciderConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_creep_decider_config(), output);
      break;
    case kLaneChangeDeciderConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_lane_change_decider_config(), output);
      break;
    case kOpenSpaceFallbackDeciderConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_open_space_fallback_decider_config(), output);
      break;
    case kOpenSpacePreStopDeciderConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_open_space_pre_stop_decider_config(), output);
      break;
    case kOpenSpaceRoiDeciderConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, this->_internal_open_space_roi_decider_config(), output);
      break;
    case kPathAssessmentDeciderConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, this->_internal_path_assessment_decider_config(), output);
      break;
    case kPathBoundsDeciderConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, this->_internal_path_bounds_decider_config(), output);
      break;
    case kPathDeciderConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, this->_internal_path_decider_config(), output);
      break;
    case kPathLaneBorrowDeciderConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, this->_internal_path_lane_borrow_decider_config(), output);
      break;
    case kPathReferenceDeciderConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, this->_internal_path_reference_decider_config(), output);
      break;
    case kPathReuseDeciderConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, this->_internal_path_reuse_decider_config(), output);
      break;
    case kRuleBasedStopDeciderConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, this->_internal_rule_based_stop_decider_config(), output);
      break;
    case kSpeedBoundsDeciderConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        14, this->_internal_speed_bounds_decider_config(), output);
      break;
    case kStBoundsDeciderConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        15, this->_internal_st_bounds_decider_config(), output);
      break;
    case kOpenSpaceTrajectoryPartitionConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        16, this->_internal_open_space_trajectory_partition_config(), output);
      break;
    case kOpenSpaceTrajectoryProviderConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        17, this->_internal_open_space_trajectory_provider_config(), output);
      break;
    case kPiecewiseJerkNonlinearSpeedOptimizerConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        18, this->_internal_piecewise_jerk_nonlinear_speed_optimizer_config(), output);
      break;
    case kPiecewiseJerkPathOptimizerConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        19, this->_internal_piecewise_jerk_path_optimizer_config(), output);
      break;
    case kPiecewiseJerkSpeedOptimizerConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        20, this->_internal_piecewise_jerk_speed_optimizer_config(), output);
      break;
    case kSpeedHeuristicOptimizerConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        21, this->_internal_speed_heuristic_optimizer_config(), output);
      break;
    case kLearningModelInferenceTaskConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        22, this->_internal_learning_model_inference_task_config(), output);
      break;
    case kLearningModelInferenceTrajectoryTaskConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        23, this->_internal_learning_model_inference_trajectory_task_config(), output);
      break;
    case kNewTestDeciderConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        24, this->_internal_new_test_decider_config(), output);
      break;
    case kStGenerateDeciderConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        25, this->_internal_st_generate_decider_config(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.TaskConfig)
}

::google::protobuf::uint8* TaskConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TaskConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.TaskConfig.TaskType task_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->task_type(), target);
  }

  switch (task_config_case()) {
    case kCreepDeciderConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_creep_decider_config(), deterministic, target);
      break;
    case kLaneChangeDeciderConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_lane_change_decider_config(), deterministic, target);
      break;
    case kOpenSpaceFallbackDeciderConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_open_space_fallback_decider_config(), deterministic, target);
      break;
    case kOpenSpacePreStopDeciderConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_open_space_pre_stop_decider_config(), deterministic, target);
      break;
    case kOpenSpaceRoiDeciderConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, this->_internal_open_space_roi_decider_config(), deterministic, target);
      break;
    case kPathAssessmentDeciderConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, this->_internal_path_assessment_decider_config(), deterministic, target);
      break;
    case kPathBoundsDeciderConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, this->_internal_path_bounds_decider_config(), deterministic, target);
      break;
    case kPathDeciderConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          9, this->_internal_path_decider_config(), deterministic, target);
      break;
    case kPathLaneBorrowDeciderConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          10, this->_internal_path_lane_borrow_decider_config(), deterministic, target);
      break;
    case kPathReferenceDeciderConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          11, this->_internal_path_reference_decider_config(), deterministic, target);
      break;
    case kPathReuseDeciderConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          12, this->_internal_path_reuse_decider_config(), deterministic, target);
      break;
    case kRuleBasedStopDeciderConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          13, this->_internal_rule_based_stop_decider_config(), deterministic, target);
      break;
    case kSpeedBoundsDeciderConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          14, this->_internal_speed_bounds_decider_config(), deterministic, target);
      break;
    case kStBoundsDeciderConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          15, this->_internal_st_bounds_decider_config(), deterministic, target);
      break;
    case kOpenSpaceTrajectoryPartitionConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          16, this->_internal_open_space_trajectory_partition_config(), deterministic, target);
      break;
    case kOpenSpaceTrajectoryProviderConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          17, this->_internal_open_space_trajectory_provider_config(), deterministic, target);
      break;
    case kPiecewiseJerkNonlinearSpeedOptimizerConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          18, this->_internal_piecewise_jerk_nonlinear_speed_optimizer_config(), deterministic, target);
      break;
    case kPiecewiseJerkPathOptimizerConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          19, this->_internal_piecewise_jerk_path_optimizer_config(), deterministic, target);
      break;
    case kPiecewiseJerkSpeedOptimizerConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          20, this->_internal_piecewise_jerk_speed_optimizer_config(), deterministic, target);
      break;
    case kSpeedHeuristicOptimizerConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          21, this->_internal_speed_heuristic_optimizer_config(), deterministic, target);
      break;
    case kLearningModelInferenceTaskConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          22, this->_internal_learning_model_inference_task_config(), deterministic, target);
      break;
    case kLearningModelInferenceTrajectoryTaskConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          23, this->_internal_learning_model_inference_trajectory_task_config(), deterministic, target);
      break;
    case kNewTestDeciderConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          24, this->_internal_new_test_decider_config(), deterministic, target);
      break;
    case kStGenerateDeciderConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          25, this->_internal_st_generate_decider_config(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TaskConfig)
  return target;
}

size_t TaskConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TaskConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .apollo.planning.TaskConfig.TaskType task_type = 1;
  if (has_task_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->task_type());
  }

  switch (task_config_case()) {
    // optional .apollo.planning.CreepDeciderConfig creep_decider_config = 2;
    case kCreepDeciderConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.creep_decider_config_);
      break;
    }
    // optional .apollo.planning.LaneChangeDeciderConfig lane_change_decider_config = 3;
    case kLaneChangeDeciderConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.lane_change_decider_config_);
      break;
    }
    // optional .apollo.planning.OpenSpaceFallBackDeciderConfig open_space_fallback_decider_config = 4;
    case kOpenSpaceFallbackDeciderConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.open_space_fallback_decider_config_);
      break;
    }
    // optional .apollo.planning.OpenSpacePreStopDeciderConfig open_space_pre_stop_decider_config = 5;
    case kOpenSpacePreStopDeciderConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.open_space_pre_stop_decider_config_);
      break;
    }
    // optional .apollo.planning.OpenSpaceRoiDeciderConfig open_space_roi_decider_config = 6;
    case kOpenSpaceRoiDeciderConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.open_space_roi_decider_config_);
      break;
    }
    // optional .apollo.planning.PathAssessmentDeciderConfig path_assessment_decider_config = 7;
    case kPathAssessmentDeciderConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.path_assessment_decider_config_);
      break;
    }
    // optional .apollo.planning.PathBoundsDeciderConfig path_bounds_decider_config = 8;
    case kPathBoundsDeciderConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.path_bounds_decider_config_);
      break;
    }
    // optional .apollo.planning.PathDeciderConfig path_decider_config = 9;
    case kPathDeciderConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.path_decider_config_);
      break;
    }
    // optional .apollo.planning.PathLaneBorrowDeciderConfig path_lane_borrow_decider_config = 10;
    case kPathLaneBorrowDeciderConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.path_lane_borrow_decider_config_);
      break;
    }
    // optional .apollo.planning.PathReferenceDeciderConfig path_reference_decider_config = 11;
    case kPathReferenceDeciderConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.path_reference_decider_config_);
      break;
    }
    // optional .apollo.planning.PathReuseDeciderConfig path_reuse_decider_config = 12;
    case kPathReuseDeciderConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.path_reuse_decider_config_);
      break;
    }
    // optional .apollo.planning.RuleBasedStopDeciderConfig rule_based_stop_decider_config = 13;
    case kRuleBasedStopDeciderConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.rule_based_stop_decider_config_);
      break;
    }
    // optional .apollo.planning.SpeedBoundsDeciderConfig speed_bounds_decider_config = 14;
    case kSpeedBoundsDeciderConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.speed_bounds_decider_config_);
      break;
    }
    // optional .apollo.planning.STBoundsDeciderConfig st_bounds_decider_config = 15;
    case kStBoundsDeciderConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.st_bounds_decider_config_);
      break;
    }
    // optional .apollo.planning.OpenSpaceTrajectoryPartitionConfig open_space_trajectory_partition_config = 16;
    case kOpenSpaceTrajectoryPartitionConfig: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.open_space_trajectory_partition_config_);
      break;
    }
    // optional .apollo.planning.OpenSpaceTrajectoryProviderConfig open_space_trajectory_provider_config = 17;
    case kOpenSpaceTrajectoryProviderConfig: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.open_space_trajectory_provider_config_);
      break;
    }
    // optional .apollo.planning.PiecewiseJerkNonlinearSpeedOptimizerConfig piecewise_jerk_nonlinear_speed_optimizer_config = 18;
    case kPiecewiseJerkNonlinearSpeedOptimizerConfig: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.piecewise_jerk_nonlinear_speed_optimizer_config_);
      break;
    }
    // optional .apollo.planning.PiecewiseJerkPathOptimizerConfig piecewise_jerk_path_optimizer_config = 19;
    case kPiecewiseJerkPathOptimizerConfig: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.piecewise_jerk_path_optimizer_config_);
      break;
    }
    // optional .apollo.planning.PiecewiseJerkSpeedOptimizerConfig piecewise_jerk_speed_optimizer_config = 20;
    case kPiecewiseJerkSpeedOptimizerConfig: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.piecewise_jerk_speed_optimizer_config_);
      break;
    }
    // optional .apollo.planning.SpeedHeuristicOptimizerConfig speed_heuristic_optimizer_config = 21;
    case kSpeedHeuristicOptimizerConfig: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.speed_heuristic_optimizer_config_);
      break;
    }
    // optional .apollo.planning.LearningModelInferenceTaskConfig learning_model_inference_task_config = 22;
    case kLearningModelInferenceTaskConfig: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.learning_model_inference_task_config_);
      break;
    }
    // optional .apollo.planning.LearningModelInferenceTrajectoryTaskConfig learning_model_inference_trajectory_task_config = 23;
    case kLearningModelInferenceTrajectoryTaskConfig: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.learning_model_inference_trajectory_task_config_);
      break;
    }
    // optional .apollo.planning.NewTestDeciderConfig new_test_decider_config = 24;
    case kNewTestDeciderConfig: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.new_test_decider_config_);
      break;
    }
    // optional .apollo.planning.StGenerateDeciderConfig st_generate_decider_config = 25;
    case kStGenerateDeciderConfig: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_config_.st_generate_decider_config_);
      break;
    }
    case TASK_CONFIG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TaskConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TaskConfig)
    MergeFrom(*source);
  }
}

void TaskConfig::MergeFrom(const TaskConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_type()) {
    set_task_type(from.task_type());
  }
  switch (from.task_config_case()) {
    case kCreepDeciderConfig: {
      mutable_creep_decider_config()->::apollo::planning::CreepDeciderConfig::MergeFrom(from.creep_decider_config());
      break;
    }
    case kLaneChangeDeciderConfig: {
      mutable_lane_change_decider_config()->::apollo::planning::LaneChangeDeciderConfig::MergeFrom(from.lane_change_decider_config());
      break;
    }
    case kOpenSpaceFallbackDeciderConfig: {
      mutable_open_space_fallback_decider_config()->::apollo::planning::OpenSpaceFallBackDeciderConfig::MergeFrom(from.open_space_fallback_decider_config());
      break;
    }
    case kOpenSpacePreStopDeciderConfig: {
      mutable_open_space_pre_stop_decider_config()->::apollo::planning::OpenSpacePreStopDeciderConfig::MergeFrom(from.open_space_pre_stop_decider_config());
      break;
    }
    case kOpenSpaceRoiDeciderConfig: {
      mutable_open_space_roi_decider_config()->::apollo::planning::OpenSpaceRoiDeciderConfig::MergeFrom(from.open_space_roi_decider_config());
      break;
    }
    case kPathAssessmentDeciderConfig: {
      mutable_path_assessment_decider_config()->::apollo::planning::PathAssessmentDeciderConfig::MergeFrom(from.path_assessment_decider_config());
      break;
    }
    case kPathBoundsDeciderConfig: {
      mutable_path_bounds_decider_config()->::apollo::planning::PathBoundsDeciderConfig::MergeFrom(from.path_bounds_decider_config());
      break;
    }
    case kPathDeciderConfig: {
      mutable_path_decider_config()->::apollo::planning::PathDeciderConfig::MergeFrom(from.path_decider_config());
      break;
    }
    case kPathLaneBorrowDeciderConfig: {
      mutable_path_lane_borrow_decider_config()->::apollo::planning::PathLaneBorrowDeciderConfig::MergeFrom(from.path_lane_borrow_decider_config());
      break;
    }
    case kPathReferenceDeciderConfig: {
      mutable_path_reference_decider_config()->::apollo::planning::PathReferenceDeciderConfig::MergeFrom(from.path_reference_decider_config());
      break;
    }
    case kPathReuseDeciderConfig: {
      mutable_path_reuse_decider_config()->::apollo::planning::PathReuseDeciderConfig::MergeFrom(from.path_reuse_decider_config());
      break;
    }
    case kRuleBasedStopDeciderConfig: {
      mutable_rule_based_stop_decider_config()->::apollo::planning::RuleBasedStopDeciderConfig::MergeFrom(from.rule_based_stop_decider_config());
      break;
    }
    case kSpeedBoundsDeciderConfig: {
      mutable_speed_bounds_decider_config()->::apollo::planning::SpeedBoundsDeciderConfig::MergeFrom(from.speed_bounds_decider_config());
      break;
    }
    case kStBoundsDeciderConfig: {
      mutable_st_bounds_decider_config()->::apollo::planning::STBoundsDeciderConfig::MergeFrom(from.st_bounds_decider_config());
      break;
    }
    case kOpenSpaceTrajectoryPartitionConfig: {
      mutable_open_space_trajectory_partition_config()->::apollo::planning::OpenSpaceTrajectoryPartitionConfig::MergeFrom(from.open_space_trajectory_partition_config());
      break;
    }
    case kOpenSpaceTrajectoryProviderConfig: {
      mutable_open_space_trajectory_provider_config()->::apollo::planning::OpenSpaceTrajectoryProviderConfig::MergeFrom(from.open_space_trajectory_provider_config());
      break;
    }
    case kPiecewiseJerkNonlinearSpeedOptimizerConfig: {
      mutable_piecewise_jerk_nonlinear_speed_optimizer_config()->::apollo::planning::PiecewiseJerkNonlinearSpeedOptimizerConfig::MergeFrom(from.piecewise_jerk_nonlinear_speed_optimizer_config());
      break;
    }
    case kPiecewiseJerkPathOptimizerConfig: {
      mutable_piecewise_jerk_path_optimizer_config()->::apollo::planning::PiecewiseJerkPathOptimizerConfig::MergeFrom(from.piecewise_jerk_path_optimizer_config());
      break;
    }
    case kPiecewiseJerkSpeedOptimizerConfig: {
      mutable_piecewise_jerk_speed_optimizer_config()->::apollo::planning::PiecewiseJerkSpeedOptimizerConfig::MergeFrom(from.piecewise_jerk_speed_optimizer_config());
      break;
    }
    case kSpeedHeuristicOptimizerConfig: {
      mutable_speed_heuristic_optimizer_config()->::apollo::planning::SpeedHeuristicOptimizerConfig::MergeFrom(from.speed_heuristic_optimizer_config());
      break;
    }
    case kLearningModelInferenceTaskConfig: {
      mutable_learning_model_inference_task_config()->::apollo::planning::LearningModelInferenceTaskConfig::MergeFrom(from.learning_model_inference_task_config());
      break;
    }
    case kLearningModelInferenceTrajectoryTaskConfig: {
      mutable_learning_model_inference_trajectory_task_config()->::apollo::planning::LearningModelInferenceTrajectoryTaskConfig::MergeFrom(from.learning_model_inference_trajectory_task_config());
      break;
    }
    case kNewTestDeciderConfig: {
      mutable_new_test_decider_config()->::apollo::planning::NewTestDeciderConfig::MergeFrom(from.new_test_decider_config());
      break;
    }
    case kStGenerateDeciderConfig: {
      mutable_st_generate_decider_config()->::apollo::planning::StGenerateDeciderConfig::MergeFrom(from.st_generate_decider_config());
      break;
    }
    case TASK_CONFIG_NOT_SET: {
      break;
    }
  }
}

void TaskConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskConfig::CopyFrom(const TaskConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskConfig::IsInitialized() const {
  return true;
}

void TaskConfig::Swap(TaskConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskConfig::InternalSwap(TaskConfig* other) {
  using std::swap;
  swap(task_type_, other->task_type_);
  swap(task_config_, other->task_config_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TaskConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScenarioBareIntersectionUnprotectedConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioBareIntersectionUnprotectedConfig::kStartBareIntersectionScenarioDistanceFieldNumber;
const int ScenarioBareIntersectionUnprotectedConfig::kEnableExplicitStopFieldNumber;
const int ScenarioBareIntersectionUnprotectedConfig::kMinPassSDistanceFieldNumber;
const int ScenarioBareIntersectionUnprotectedConfig::kApproachCruiseSpeedFieldNumber;
const int ScenarioBareIntersectionUnprotectedConfig::kStopDistanceFieldNumber;
const int ScenarioBareIntersectionUnprotectedConfig::kStopTimeoutSecFieldNumber;
const int ScenarioBareIntersectionUnprotectedConfig::kCreepTimeoutSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioBareIntersectionUnprotectedConfig::ScenarioBareIntersectionUnprotectedConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioBareIntersectionUnprotectedConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
}
ScenarioBareIntersectionUnprotectedConfig::ScenarioBareIntersectionUnprotectedConfig(const ScenarioBareIntersectionUnprotectedConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enable_explicit_stop_, &from.enable_explicit_stop_,
    static_cast<size_t>(reinterpret_cast<char*>(&creep_timeout_sec_) -
    reinterpret_cast<char*>(&enable_explicit_stop_)) + sizeof(creep_timeout_sec_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
}

void ScenarioBareIntersectionUnprotectedConfig::SharedCtor() {
  enable_explicit_stop_ = false;
  start_bare_intersection_scenario_distance_ = 25;
  min_pass_s_distance_ = 3;
  approach_cruise_speed_ = 6.7056;
  stop_distance_ = 0.5;
  stop_timeout_sec_ = 8;
  creep_timeout_sec_ = 10;
}

ScenarioBareIntersectionUnprotectedConfig::~ScenarioBareIntersectionUnprotectedConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  SharedDtor();
}

void ScenarioBareIntersectionUnprotectedConfig::SharedDtor() {
}

void ScenarioBareIntersectionUnprotectedConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScenarioBareIntersectionUnprotectedConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioBareIntersectionUnprotectedConfig& ScenarioBareIntersectionUnprotectedConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioBareIntersectionUnprotectedConfig.base);
  return *internal_default_instance();
}


void ScenarioBareIntersectionUnprotectedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    enable_explicit_stop_ = false;
    start_bare_intersection_scenario_distance_ = 25;
    min_pass_s_distance_ = 3;
    approach_cruise_speed_ = 6.7056;
    stop_distance_ = 0.5;
    stop_timeout_sec_ = 8;
    creep_timeout_sec_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScenarioBareIntersectionUnprotectedConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double start_bare_intersection_scenario_distance = 1 [default = 25];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_start_bare_intersection_scenario_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_bare_intersection_scenario_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_explicit_stop = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_enable_explicit_stop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_explicit_stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_pass_s_distance = 3 [default = 3];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_min_pass_s_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_pass_s_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double approach_cruise_speed = 4 [default = 6.7056];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_approach_cruise_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &approach_cruise_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_distance = 5 [default = 0.5];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float stop_timeout_sec = 6 [default = 8];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_stop_timeout_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stop_timeout_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float creep_timeout_sec = 7 [default = 10];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_creep_timeout_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &creep_timeout_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  return false;
#undef DO_
}

void ScenarioBareIntersectionUnprotectedConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_bare_intersection_scenario_distance = 1 [default = 25];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start_bare_intersection_scenario_distance(), output);
  }

  // optional bool enable_explicit_stop = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable_explicit_stop(), output);
  }

  // optional double min_pass_s_distance = 3 [default = 3];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min_pass_s_distance(), output);
  }

  // optional double approach_cruise_speed = 4 [default = 6.7056];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->approach_cruise_speed(), output);
  }

  // optional double stop_distance = 5 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->stop_distance(), output);
  }

  // optional float stop_timeout_sec = 6 [default = 8];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->stop_timeout_sec(), output);
  }

  // optional float creep_timeout_sec = 7 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->creep_timeout_sec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
}

::google::protobuf::uint8* ScenarioBareIntersectionUnprotectedConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_bare_intersection_scenario_distance = 1 [default = 25];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start_bare_intersection_scenario_distance(), target);
  }

  // optional bool enable_explicit_stop = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable_explicit_stop(), target);
  }

  // optional double min_pass_s_distance = 3 [default = 3];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min_pass_s_distance(), target);
  }

  // optional double approach_cruise_speed = 4 [default = 6.7056];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->approach_cruise_speed(), target);
  }

  // optional double stop_distance = 5 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->stop_distance(), target);
  }

  // optional float stop_timeout_sec = 6 [default = 8];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->stop_timeout_sec(), target);
  }

  // optional float creep_timeout_sec = 7 [default = 10];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->creep_timeout_sec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  return target;
}

size_t ScenarioBareIntersectionUnprotectedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bool enable_explicit_stop = 2 [default = false];
    if (has_enable_explicit_stop()) {
      total_size += 1 + 1;
    }

    // optional double start_bare_intersection_scenario_distance = 1 [default = 25];
    if (has_start_bare_intersection_scenario_distance()) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 3 [default = 3];
    if (has_min_pass_s_distance()) {
      total_size += 1 + 8;
    }

    // optional double approach_cruise_speed = 4 [default = 6.7056];
    if (has_approach_cruise_speed()) {
      total_size += 1 + 8;
    }

    // optional double stop_distance = 5 [default = 0.5];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional float stop_timeout_sec = 6 [default = 8];
    if (has_stop_timeout_sec()) {
      total_size += 1 + 4;
    }

    // optional float creep_timeout_sec = 7 [default = 10];
    if (has_creep_timeout_sec()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioBareIntersectionUnprotectedConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioBareIntersectionUnprotectedConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioBareIntersectionUnprotectedConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
    MergeFrom(*source);
  }
}

void ScenarioBareIntersectionUnprotectedConfig::MergeFrom(const ScenarioBareIntersectionUnprotectedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      enable_explicit_stop_ = from.enable_explicit_stop_;
    }
    if (cached_has_bits & 0x00000002u) {
      start_bare_intersection_scenario_distance_ = from.start_bare_intersection_scenario_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_pass_s_distance_ = from.min_pass_s_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      approach_cruise_speed_ = from.approach_cruise_speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      stop_distance_ = from.stop_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      stop_timeout_sec_ = from.stop_timeout_sec_;
    }
    if (cached_has_bits & 0x00000040u) {
      creep_timeout_sec_ = from.creep_timeout_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioBareIntersectionUnprotectedConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioBareIntersectionUnprotectedConfig::CopyFrom(const ScenarioBareIntersectionUnprotectedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioBareIntersectionUnprotectedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioBareIntersectionUnprotectedConfig::IsInitialized() const {
  return true;
}

void ScenarioBareIntersectionUnprotectedConfig::Swap(ScenarioBareIntersectionUnprotectedConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioBareIntersectionUnprotectedConfig::InternalSwap(ScenarioBareIntersectionUnprotectedConfig* other) {
  using std::swap;
  swap(enable_explicit_stop_, other->enable_explicit_stop_);
  swap(start_bare_intersection_scenario_distance_, other->start_bare_intersection_scenario_distance_);
  swap(min_pass_s_distance_, other->min_pass_s_distance_);
  swap(approach_cruise_speed_, other->approach_cruise_speed_);
  swap(stop_distance_, other->stop_distance_);
  swap(stop_timeout_sec_, other->stop_timeout_sec_);
  swap(creep_timeout_sec_, other->creep_timeout_sec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScenarioBareIntersectionUnprotectedConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScenarioEmergencyPullOverConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioEmergencyPullOverConfig::kMaxStopDecelerationFieldNumber;
const int ScenarioEmergencyPullOverConfig::kSlowDownDecelerationTimeFieldNumber;
const int ScenarioEmergencyPullOverConfig::kTargetSlowDownSpeedFieldNumber;
const int ScenarioEmergencyPullOverConfig::kStopDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioEmergencyPullOverConfig::ScenarioEmergencyPullOverConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioEmergencyPullOverConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioEmergencyPullOverConfig)
}
ScenarioEmergencyPullOverConfig::ScenarioEmergencyPullOverConfig(const ScenarioEmergencyPullOverConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_stop_deceleration_, &from.max_stop_deceleration_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_distance_) -
    reinterpret_cast<char*>(&max_stop_deceleration_)) + sizeof(stop_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioEmergencyPullOverConfig)
}

void ScenarioEmergencyPullOverConfig::SharedCtor() {
  max_stop_deceleration_ = 3;
  slow_down_deceleration_time_ = 3;
  target_slow_down_speed_ = 2.5;
  stop_distance_ = 1.5;
}

ScenarioEmergencyPullOverConfig::~ScenarioEmergencyPullOverConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioEmergencyPullOverConfig)
  SharedDtor();
}

void ScenarioEmergencyPullOverConfig::SharedDtor() {
}

void ScenarioEmergencyPullOverConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScenarioEmergencyPullOverConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioEmergencyPullOverConfig& ScenarioEmergencyPullOverConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioEmergencyPullOverConfig.base);
  return *internal_default_instance();
}


void ScenarioEmergencyPullOverConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioEmergencyPullOverConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    max_stop_deceleration_ = 3;
    slow_down_deceleration_time_ = 3;
    target_slow_down_speed_ = 2.5;
    stop_distance_ = 1.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScenarioEmergencyPullOverConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ScenarioEmergencyPullOverConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_stop_deceleration = 1 [default = 3];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_max_stop_deceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_stop_deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double slow_down_deceleration_time = 2 [default = 3];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_slow_down_deceleration_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slow_down_deceleration_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double target_slow_down_speed = 3 [default = 2.5];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_target_slow_down_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &target_slow_down_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_distance = 4 [default = 1.5];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ScenarioEmergencyPullOverConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ScenarioEmergencyPullOverConfig)
  return false;
#undef DO_
}

void ScenarioEmergencyPullOverConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ScenarioEmergencyPullOverConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_stop_deceleration = 1 [default = 3];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_stop_deceleration(), output);
  }

  // optional double slow_down_deceleration_time = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->slow_down_deceleration_time(), output);
  }

  // optional double target_slow_down_speed = 3 [default = 2.5];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->target_slow_down_speed(), output);
  }

  // optional double stop_distance = 4 [default = 1.5];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->stop_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ScenarioEmergencyPullOverConfig)
}

::google::protobuf::uint8* ScenarioEmergencyPullOverConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioEmergencyPullOverConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_stop_deceleration = 1 [default = 3];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_stop_deceleration(), target);
  }

  // optional double slow_down_deceleration_time = 2 [default = 3];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->slow_down_deceleration_time(), target);
  }

  // optional double target_slow_down_speed = 3 [default = 2.5];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->target_slow_down_speed(), target);
  }

  // optional double stop_distance = 4 [default = 1.5];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->stop_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioEmergencyPullOverConfig)
  return target;
}

size_t ScenarioEmergencyPullOverConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioEmergencyPullOverConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double max_stop_deceleration = 1 [default = 3];
    if (has_max_stop_deceleration()) {
      total_size += 1 + 8;
    }

    // optional double slow_down_deceleration_time = 2 [default = 3];
    if (has_slow_down_deceleration_time()) {
      total_size += 1 + 8;
    }

    // optional double target_slow_down_speed = 3 [default = 2.5];
    if (has_target_slow_down_speed()) {
      total_size += 1 + 8;
    }

    // optional double stop_distance = 4 [default = 1.5];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioEmergencyPullOverConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioEmergencyPullOverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioEmergencyPullOverConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioEmergencyPullOverConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioEmergencyPullOverConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioEmergencyPullOverConfig)
    MergeFrom(*source);
  }
}

void ScenarioEmergencyPullOverConfig::MergeFrom(const ScenarioEmergencyPullOverConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioEmergencyPullOverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      max_stop_deceleration_ = from.max_stop_deceleration_;
    }
    if (cached_has_bits & 0x00000002u) {
      slow_down_deceleration_time_ = from.slow_down_deceleration_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_slow_down_speed_ = from.target_slow_down_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      stop_distance_ = from.stop_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioEmergencyPullOverConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioEmergencyPullOverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioEmergencyPullOverConfig::CopyFrom(const ScenarioEmergencyPullOverConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioEmergencyPullOverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioEmergencyPullOverConfig::IsInitialized() const {
  return true;
}

void ScenarioEmergencyPullOverConfig::Swap(ScenarioEmergencyPullOverConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioEmergencyPullOverConfig::InternalSwap(ScenarioEmergencyPullOverConfig* other) {
  using std::swap;
  swap(max_stop_deceleration_, other->max_stop_deceleration_);
  swap(slow_down_deceleration_time_, other->slow_down_deceleration_time_);
  swap(target_slow_down_speed_, other->target_slow_down_speed_);
  swap(stop_distance_, other->stop_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScenarioEmergencyPullOverConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScenarioEmergencyStopConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioEmergencyStopConfig::kMaxStopDecelerationFieldNumber;
const int ScenarioEmergencyStopConfig::kStopDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioEmergencyStopConfig::ScenarioEmergencyStopConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioEmergencyStopConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioEmergencyStopConfig)
}
ScenarioEmergencyStopConfig::ScenarioEmergencyStopConfig(const ScenarioEmergencyStopConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_stop_deceleration_, &from.max_stop_deceleration_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_distance_) -
    reinterpret_cast<char*>(&max_stop_deceleration_)) + sizeof(stop_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioEmergencyStopConfig)
}

void ScenarioEmergencyStopConfig::SharedCtor() {
  max_stop_deceleration_ = 6;
  stop_distance_ = 1;
}

ScenarioEmergencyStopConfig::~ScenarioEmergencyStopConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioEmergencyStopConfig)
  SharedDtor();
}

void ScenarioEmergencyStopConfig::SharedDtor() {
}

void ScenarioEmergencyStopConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScenarioEmergencyStopConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioEmergencyStopConfig& ScenarioEmergencyStopConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioEmergencyStopConfig.base);
  return *internal_default_instance();
}


void ScenarioEmergencyStopConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioEmergencyStopConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    max_stop_deceleration_ = 6;
    stop_distance_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScenarioEmergencyStopConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ScenarioEmergencyStopConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_stop_deceleration = 1 [default = 6];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_max_stop_deceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_stop_deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double stop_distance = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ScenarioEmergencyStopConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ScenarioEmergencyStopConfig)
  return false;
#undef DO_
}

void ScenarioEmergencyStopConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ScenarioEmergencyStopConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_stop_deceleration = 1 [default = 6];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_stop_deceleration(), output);
  }

  // optional double stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->stop_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ScenarioEmergencyStopConfig)
}

::google::protobuf::uint8* ScenarioEmergencyStopConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioEmergencyStopConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double max_stop_deceleration = 1 [default = 6];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_stop_deceleration(), target);
  }

  // optional double stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->stop_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioEmergencyStopConfig)
  return target;
}

size_t ScenarioEmergencyStopConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioEmergencyStopConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double max_stop_deceleration = 1 [default = 6];
    if (has_max_stop_deceleration()) {
      total_size += 1 + 8;
    }

    // optional double stop_distance = 2 [default = 1];
    if (has_stop_distance()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioEmergencyStopConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioEmergencyStopConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioEmergencyStopConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioEmergencyStopConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioEmergencyStopConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioEmergencyStopConfig)
    MergeFrom(*source);
  }
}

void ScenarioEmergencyStopConfig::MergeFrom(const ScenarioEmergencyStopConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioEmergencyStopConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      max_stop_deceleration_ = from.max_stop_deceleration_;
    }
    if (cached_has_bits & 0x00000002u) {
      stop_distance_ = from.stop_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioEmergencyStopConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioEmergencyStopConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioEmergencyStopConfig::CopyFrom(const ScenarioEmergencyStopConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioEmergencyStopConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioEmergencyStopConfig::IsInitialized() const {
  return true;
}

void ScenarioEmergencyStopConfig::Swap(ScenarioEmergencyStopConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioEmergencyStopConfig::InternalSwap(ScenarioEmergencyStopConfig* other) {
  using std::swap;
  swap(max_stop_deceleration_, other->max_stop_deceleration_);
  swap(stop_distance_, other->stop_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScenarioEmergencyStopConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScenarioLaneFollowConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioLaneFollowConfig::ScenarioLaneFollowConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioLaneFollowConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioLaneFollowConfig)
}
ScenarioLaneFollowConfig::ScenarioLaneFollowConfig(const ScenarioLaneFollowConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioLaneFollowConfig)
}

void ScenarioLaneFollowConfig::SharedCtor() {
}

ScenarioLaneFollowConfig::~ScenarioLaneFollowConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioLaneFollowConfig)
  SharedDtor();
}

void ScenarioLaneFollowConfig::SharedDtor() {
}

void ScenarioLaneFollowConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScenarioLaneFollowConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioLaneFollowConfig& ScenarioLaneFollowConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioLaneFollowConfig.base);
  return *internal_default_instance();
}


void ScenarioLaneFollowConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioLaneFollowConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScenarioLaneFollowConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ScenarioLaneFollowConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ScenarioLaneFollowConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ScenarioLaneFollowConfig)
  return false;
#undef DO_
}

void ScenarioLaneFollowConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ScenarioLaneFollowConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ScenarioLaneFollowConfig)
}

::google::protobuf::uint8* ScenarioLaneFollowConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioLaneFollowConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioLaneFollowConfig)
  return target;
}

size_t ScenarioLaneFollowConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioLaneFollowConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioLaneFollowConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioLaneFollowConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioLaneFollowConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioLaneFollowConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioLaneFollowConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioLaneFollowConfig)
    MergeFrom(*source);
  }
}

void ScenarioLaneFollowConfig::MergeFrom(const ScenarioLaneFollowConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioLaneFollowConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ScenarioLaneFollowConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioLaneFollowConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioLaneFollowConfig::CopyFrom(const ScenarioLaneFollowConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioLaneFollowConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioLaneFollowConfig::IsInitialized() const {
  return true;
}

void ScenarioLaneFollowConfig::Swap(ScenarioLaneFollowConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioLaneFollowConfig::InternalSwap(ScenarioLaneFollowConfig* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScenarioLaneFollowConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScenarioLearningModelSampleConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioLearningModelSampleConfig::ScenarioLearningModelSampleConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioLearningModelSampleConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioLearningModelSampleConfig)
}
ScenarioLearningModelSampleConfig::ScenarioLearningModelSampleConfig(const ScenarioLearningModelSampleConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioLearningModelSampleConfig)
}

void ScenarioLearningModelSampleConfig::SharedCtor() {
}

ScenarioLearningModelSampleConfig::~ScenarioLearningModelSampleConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioLearningModelSampleConfig)
  SharedDtor();
}

void ScenarioLearningModelSampleConfig::SharedDtor() {
}

void ScenarioLearningModelSampleConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScenarioLearningModelSampleConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioLearningModelSampleConfig& ScenarioLearningModelSampleConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioLearningModelSampleConfig.base);
  return *internal_default_instance();
}


void ScenarioLearningModelSampleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioLearningModelSampleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScenarioLearningModelSampleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ScenarioLearningModelSampleConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ScenarioLearningModelSampleConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ScenarioLearningModelSampleConfig)
  return false;
#undef DO_
}

void ScenarioLearningModelSampleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ScenarioLearningModelSampleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ScenarioLearningModelSampleConfig)
}

::google::protobuf::uint8* ScenarioLearningModelSampleConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioLearningModelSampleConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioLearningModelSampleConfig)
  return target;
}

size_t ScenarioLearningModelSampleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioLearningModelSampleConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioLearningModelSampleConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioLearningModelSampleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioLearningModelSampleConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioLearningModelSampleConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioLearningModelSampleConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioLearningModelSampleConfig)
    MergeFrom(*source);
  }
}

void ScenarioLearningModelSampleConfig::MergeFrom(const ScenarioLearningModelSampleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioLearningModelSampleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ScenarioLearningModelSampleConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioLearningModelSampleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioLearningModelSampleConfig::CopyFrom(const ScenarioLearningModelSampleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioLearningModelSampleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioLearningModelSampleConfig::IsInitialized() const {
  return true;
}

void ScenarioLearningModelSampleConfig::Swap(ScenarioLearningModelSampleConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioLearningModelSampleConfig::InternalSwap(ScenarioLearningModelSampleConfig* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScenarioLearningModelSampleConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScenarioNarrowStreetUTurnConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioNarrowStreetUTurnConfig::ScenarioNarrowStreetUTurnConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioNarrowStreetUTurnConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioNarrowStreetUTurnConfig)
}
ScenarioNarrowStreetUTurnConfig::ScenarioNarrowStreetUTurnConfig(const ScenarioNarrowStreetUTurnConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioNarrowStreetUTurnConfig)
}

void ScenarioNarrowStreetUTurnConfig::SharedCtor() {
}

ScenarioNarrowStreetUTurnConfig::~ScenarioNarrowStreetUTurnConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  SharedDtor();
}

void ScenarioNarrowStreetUTurnConfig::SharedDtor() {
}

void ScenarioNarrowStreetUTurnConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScenarioNarrowStreetUTurnConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioNarrowStreetUTurnConfig& ScenarioNarrowStreetUTurnConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioNarrowStreetUTurnConfig.base);
  return *internal_default_instance();
}


void ScenarioNarrowStreetUTurnConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScenarioNarrowStreetUTurnConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  return false;
#undef DO_
}

void ScenarioNarrowStreetUTurnConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ScenarioNarrowStreetUTurnConfig)
}

::google::protobuf::uint8* ScenarioNarrowStreetUTurnConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  return target;
}

size_t ScenarioNarrowStreetUTurnConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioNarrowStreetUTurnConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioNarrowStreetUTurnConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioNarrowStreetUTurnConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioNarrowStreetUTurnConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioNarrowStreetUTurnConfig)
    MergeFrom(*source);
  }
}

void ScenarioNarrowStreetUTurnConfig::MergeFrom(const ScenarioNarrowStreetUTurnConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ScenarioNarrowStreetUTurnConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioNarrowStreetUTurnConfig::CopyFrom(const ScenarioNarrowStreetUTurnConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioNarrowStreetUTurnConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioNarrowStreetUTurnConfig::IsInitialized() const {
  return true;
}

void ScenarioNarrowStreetUTurnConfig::Swap(ScenarioNarrowStreetUTurnConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioNarrowStreetUTurnConfig::InternalSwap(ScenarioNarrowStreetUTurnConfig* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScenarioNarrowStreetUTurnConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScenarioParkAndGoConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioParkAndGoConfig::kFrontObstacleBufferFieldNumber;
const int ScenarioParkAndGoConfig::kHeadingBufferFieldNumber;
const int ScenarioParkAndGoConfig::kMinDistToDestFieldNumber;
const int ScenarioParkAndGoConfig::kMaxSteeringPercentageWhenCruiseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioParkAndGoConfig::ScenarioParkAndGoConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioParkAndGoConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioParkAndGoConfig)
}
ScenarioParkAndGoConfig::ScenarioParkAndGoConfig(const ScenarioParkAndGoConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&front_obstacle_buffer_, &from.front_obstacle_buffer_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_steering_percentage_when_cruise_) -
    reinterpret_cast<char*>(&front_obstacle_buffer_)) + sizeof(max_steering_percentage_when_cruise_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioParkAndGoConfig)
}

void ScenarioParkAndGoConfig::SharedCtor() {
  front_obstacle_buffer_ = 4;
  heading_buffer_ = 0.5;
  min_dist_to_dest_ = 25;
  max_steering_percentage_when_cruise_ = 90;
}

ScenarioParkAndGoConfig::~ScenarioParkAndGoConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioParkAndGoConfig)
  SharedDtor();
}

void ScenarioParkAndGoConfig::SharedDtor() {
}

void ScenarioParkAndGoConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScenarioParkAndGoConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioParkAndGoConfig& ScenarioParkAndGoConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioParkAndGoConfig.base);
  return *internal_default_instance();
}


void ScenarioParkAndGoConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioParkAndGoConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    front_obstacle_buffer_ = 4;
    heading_buffer_ = 0.5;
    min_dist_to_dest_ = 25;
    max_steering_percentage_when_cruise_ = 90;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScenarioParkAndGoConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ScenarioParkAndGoConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double front_obstacle_buffer = 1 [default = 4];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_front_obstacle_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &front_obstacle_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading_buffer = 2 [default = 0.5];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_heading_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_dist_to_dest = 3 [default = 25];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_min_dist_to_dest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_dist_to_dest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_steering_percentage_when_cruise = 4 [default = 90];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_max_steering_percentage_when_cruise();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_steering_percentage_when_cruise_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ScenarioParkAndGoConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ScenarioParkAndGoConfig)
  return false;
#undef DO_
}

void ScenarioParkAndGoConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ScenarioParkAndGoConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double front_obstacle_buffer = 1 [default = 4];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->front_obstacle_buffer(), output);
  }

  // optional double heading_buffer = 2 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->heading_buffer(), output);
  }

  // optional double min_dist_to_dest = 3 [default = 25];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min_dist_to_dest(), output);
  }

  // optional double max_steering_percentage_when_cruise = 4 [default = 90];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_steering_percentage_when_cruise(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ScenarioParkAndGoConfig)
}

::google::protobuf::uint8* ScenarioParkAndGoConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioParkAndGoConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double front_obstacle_buffer = 1 [default = 4];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->front_obstacle_buffer(), target);
  }

  // optional double heading_buffer = 2 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->heading_buffer(), target);
  }

  // optional double min_dist_to_dest = 3 [default = 25];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min_dist_to_dest(), target);
  }

  // optional double max_steering_percentage_when_cruise = 4 [default = 90];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_steering_percentage_when_cruise(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioParkAndGoConfig)
  return target;
}

size_t ScenarioParkAndGoConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioParkAndGoConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double front_obstacle_buffer = 1 [default = 4];
    if (has_front_obstacle_buffer()) {
      total_size += 1 + 8;
    }

    // optional double heading_buffer = 2 [default = 0.5];
    if (has_heading_buffer()) {
      total_size += 1 + 8;
    }

    // optional double min_dist_to_dest = 3 [default = 25];
    if (has_min_dist_to_dest()) {
      total_size += 1 + 8;
    }

    // optional double max_steering_percentage_when_cruise = 4 [default = 90];
    if (has_max_steering_percentage_when_cruise()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioParkAndGoConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioParkAndGoConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioParkAndGoConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioParkAndGoConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioParkAndGoConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioParkAndGoConfig)
    MergeFrom(*source);
  }
}

void ScenarioParkAndGoConfig::MergeFrom(const ScenarioParkAndGoConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioParkAndGoConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      front_obstacle_buffer_ = from.front_obstacle_buffer_;
    }
    if (cached_has_bits & 0x00000002u) {
      heading_buffer_ = from.heading_buffer_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_dist_to_dest_ = from.min_dist_to_dest_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_steering_percentage_when_cruise_ = from.max_steering_percentage_when_cruise_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioParkAndGoConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioParkAndGoConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioParkAndGoConfig::CopyFrom(const ScenarioParkAndGoConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioParkAndGoConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioParkAndGoConfig::IsInitialized() const {
  return true;
}

void ScenarioParkAndGoConfig::Swap(ScenarioParkAndGoConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioParkAndGoConfig::InternalSwap(ScenarioParkAndGoConfig* other) {
  using std::swap;
  swap(front_obstacle_buffer_, other->front_obstacle_buffer_);
  swap(heading_buffer_, other->heading_buffer_);
  swap(min_dist_to_dest_, other->min_dist_to_dest_);
  swap(max_steering_percentage_when_cruise_, other->max_steering_percentage_when_cruise_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScenarioParkAndGoConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScenarioPullOverConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioPullOverConfig::kStartPullOverScenarioDistanceFieldNumber;
const int ScenarioPullOverConfig::kPullOverMinDistanceBufferFieldNumber;
const int ScenarioPullOverConfig::kMaxDistanceStopSearchFieldNumber;
const int ScenarioPullOverConfig::kMaxSErrorToEndPointFieldNumber;
const int ScenarioPullOverConfig::kMaxLErrorToEndPointFieldNumber;
const int ScenarioPullOverConfig::kMaxThetaErrorToEndPointFieldNumber;
const int ScenarioPullOverConfig::kMaxDistanceErrorToEndPointFieldNumber;
const int ScenarioPullOverConfig::kPassDestinationThresholdFieldNumber;
const int ScenarioPullOverConfig::kMaxValidStopDistanceFieldNumber;
const int ScenarioPullOverConfig::kSDistanceToStopForOpenSpaceParkingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioPullOverConfig::ScenarioPullOverConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioPullOverConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioPullOverConfig)
}
ScenarioPullOverConfig::ScenarioPullOverConfig(const ScenarioPullOverConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_pull_over_scenario_distance_, &from.start_pull_over_scenario_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&s_distance_to_stop_for_open_space_parking_) -
    reinterpret_cast<char*>(&start_pull_over_scenario_distance_)) + sizeof(s_distance_to_stop_for_open_space_parking_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioPullOverConfig)
}

void ScenarioPullOverConfig::SharedCtor() {
  start_pull_over_scenario_distance_ = 50;
  pull_over_min_distance_buffer_ = 10;
  max_distance_stop_search_ = 25;
  max_s_error_to_end_point_ = 0.2;
  max_l_error_to_end_point_ = 0.5;
  max_theta_error_to_end_point_ = 0.2;
  max_distance_error_to_end_point_ = 0.2;
  pass_destination_threshold_ = 10;
  max_valid_stop_distance_ = 1;
  s_distance_to_stop_for_open_space_parking_ = 7;
}

ScenarioPullOverConfig::~ScenarioPullOverConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioPullOverConfig)
  SharedDtor();
}

void ScenarioPullOverConfig::SharedDtor() {
}

void ScenarioPullOverConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScenarioPullOverConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioPullOverConfig& ScenarioPullOverConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioPullOverConfig.base);
  return *internal_default_instance();
}


void ScenarioPullOverConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioPullOverConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    start_pull_over_scenario_distance_ = 50;
    pull_over_min_distance_buffer_ = 10;
    max_distance_stop_search_ = 25;
    max_s_error_to_end_point_ = 0.2;
    max_l_error_to_end_point_ = 0.5;
    max_theta_error_to_end_point_ = 0.2;
    max_distance_error_to_end_point_ = 0.2;
    pass_destination_threshold_ = 10;
  }
  if (cached_has_bits & 768u) {
    max_valid_stop_distance_ = 1;
    s_distance_to_stop_for_open_space_parking_ = 7;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScenarioPullOverConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ScenarioPullOverConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double start_pull_over_scenario_distance = 1 [default = 50];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_start_pull_over_scenario_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_pull_over_scenario_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pull_over_min_distance_buffer = 2 [default = 10];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_pull_over_min_distance_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pull_over_min_distance_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_distance_stop_search = 3 [default = 25];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_max_distance_stop_search();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_distance_stop_search_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_s_error_to_end_point = 4 [default = 0.2];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_max_s_error_to_end_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_s_error_to_end_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_l_error_to_end_point = 5 [default = 0.5];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_max_l_error_to_end_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_l_error_to_end_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_theta_error_to_end_point = 6 [default = 0.2];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_max_theta_error_to_end_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_theta_error_to_end_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_distance_error_to_end_point = 7 [default = 0.2];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_max_distance_error_to_end_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_distance_error_to_end_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pass_destination_threshold = 8 [default = 10];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_pass_destination_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pass_destination_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_valid_stop_distance = 9 [default = 1];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_max_valid_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_valid_stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double s_distance_to_stop_for_open_space_parking = 10 [default = 7];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_s_distance_to_stop_for_open_space_parking();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_distance_to_stop_for_open_space_parking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ScenarioPullOverConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ScenarioPullOverConfig)
  return false;
#undef DO_
}

void ScenarioPullOverConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ScenarioPullOverConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_pull_over_scenario_distance = 1 [default = 50];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start_pull_over_scenario_distance(), output);
  }

  // optional double pull_over_min_distance_buffer = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pull_over_min_distance_buffer(), output);
  }

  // optional double max_distance_stop_search = 3 [default = 25];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_distance_stop_search(), output);
  }

  // optional double max_s_error_to_end_point = 4 [default = 0.2];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_s_error_to_end_point(), output);
  }

  // optional double max_l_error_to_end_point = 5 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max_l_error_to_end_point(), output);
  }

  // optional double max_theta_error_to_end_point = 6 [default = 0.2];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->max_theta_error_to_end_point(), output);
  }

  // optional double max_distance_error_to_end_point = 7 [default = 0.2];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->max_distance_error_to_end_point(), output);
  }

  // optional double pass_destination_threshold = 8 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->pass_destination_threshold(), output);
  }

  // optional double max_valid_stop_distance = 9 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->max_valid_stop_distance(), output);
  }

  // optional double s_distance_to_stop_for_open_space_parking = 10 [default = 7];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->s_distance_to_stop_for_open_space_parking(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ScenarioPullOverConfig)
}

::google::protobuf::uint8* ScenarioPullOverConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioPullOverConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_pull_over_scenario_distance = 1 [default = 50];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start_pull_over_scenario_distance(), target);
  }

  // optional double pull_over_min_distance_buffer = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pull_over_min_distance_buffer(), target);
  }

  // optional double max_distance_stop_search = 3 [default = 25];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_distance_stop_search(), target);
  }

  // optional double max_s_error_to_end_point = 4 [default = 0.2];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_s_error_to_end_point(), target);
  }

  // optional double max_l_error_to_end_point = 5 [default = 0.5];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max_l_error_to_end_point(), target);
  }

  // optional double max_theta_error_to_end_point = 6 [default = 0.2];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->max_theta_error_to_end_point(), target);
  }

  // optional double max_distance_error_to_end_point = 7 [default = 0.2];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->max_distance_error_to_end_point(), target);
  }

  // optional double pass_destination_threshold = 8 [default = 10];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->pass_destination_threshold(), target);
  }

  // optional double max_valid_stop_distance = 9 [default = 1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->max_valid_stop_distance(), target);
  }

  // optional double s_distance_to_stop_for_open_space_parking = 10 [default = 7];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->s_distance_to_stop_for_open_space_parking(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioPullOverConfig)
  return target;
}

size_t ScenarioPullOverConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioPullOverConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double start_pull_over_scenario_distance = 1 [default = 50];
    if (has_start_pull_over_scenario_distance()) {
      total_size += 1 + 8;
    }

    // optional double pull_over_min_distance_buffer = 2 [default = 10];
    if (has_pull_over_min_distance_buffer()) {
      total_size += 1 + 8;
    }

    // optional double max_distance_stop_search = 3 [default = 25];
    if (has_max_distance_stop_search()) {
      total_size += 1 + 8;
    }

    // optional double max_s_error_to_end_point = 4 [default = 0.2];
    if (has_max_s_error_to_end_point()) {
      total_size += 1 + 8;
    }

    // optional double max_l_error_to_end_point = 5 [default = 0.5];
    if (has_max_l_error_to_end_point()) {
      total_size += 1 + 8;
    }

    // optional double max_theta_error_to_end_point = 6 [default = 0.2];
    if (has_max_theta_error_to_end_point()) {
      total_size += 1 + 8;
    }

    // optional double max_distance_error_to_end_point = 7 [default = 0.2];
    if (has_max_distance_error_to_end_point()) {
      total_size += 1 + 8;
    }

    // optional double pass_destination_threshold = 8 [default = 10];
    if (has_pass_destination_threshold()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional double max_valid_stop_distance = 9 [default = 1];
    if (has_max_valid_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double s_distance_to_stop_for_open_space_parking = 10 [default = 7];
    if (has_s_distance_to_stop_for_open_space_parking()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioPullOverConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioPullOverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioPullOverConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioPullOverConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioPullOverConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioPullOverConfig)
    MergeFrom(*source);
  }
}

void ScenarioPullOverConfig::MergeFrom(const ScenarioPullOverConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioPullOverConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      start_pull_over_scenario_distance_ = from.start_pull_over_scenario_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      pull_over_min_distance_buffer_ = from.pull_over_min_distance_buffer_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_distance_stop_search_ = from.max_distance_stop_search_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_s_error_to_end_point_ = from.max_s_error_to_end_point_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_l_error_to_end_point_ = from.max_l_error_to_end_point_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_theta_error_to_end_point_ = from.max_theta_error_to_end_point_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_distance_error_to_end_point_ = from.max_distance_error_to_end_point_;
    }
    if (cached_has_bits & 0x00000080u) {
      pass_destination_threshold_ = from.pass_destination_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000200u) {
      s_distance_to_stop_for_open_space_parking_ = from.s_distance_to_stop_for_open_space_parking_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioPullOverConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioPullOverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioPullOverConfig::CopyFrom(const ScenarioPullOverConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioPullOverConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioPullOverConfig::IsInitialized() const {
  return true;
}

void ScenarioPullOverConfig::Swap(ScenarioPullOverConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioPullOverConfig::InternalSwap(ScenarioPullOverConfig* other) {
  using std::swap;
  swap(start_pull_over_scenario_distance_, other->start_pull_over_scenario_distance_);
  swap(pull_over_min_distance_buffer_, other->pull_over_min_distance_buffer_);
  swap(max_distance_stop_search_, other->max_distance_stop_search_);
  swap(max_s_error_to_end_point_, other->max_s_error_to_end_point_);
  swap(max_l_error_to_end_point_, other->max_l_error_to_end_point_);
  swap(max_theta_error_to_end_point_, other->max_theta_error_to_end_point_);
  swap(max_distance_error_to_end_point_, other->max_distance_error_to_end_point_);
  swap(pass_destination_threshold_, other->pass_destination_threshold_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(s_distance_to_stop_for_open_space_parking_, other->s_distance_to_stop_for_open_space_parking_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScenarioPullOverConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScenarioStopSignUnprotectedConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioStopSignUnprotectedConfig::kStartStopSignScenarioDistanceFieldNumber;
const int ScenarioStopSignUnprotectedConfig::kWatchVehicleMaxValidStopDistanceFieldNumber;
const int ScenarioStopSignUnprotectedConfig::kMaxValidStopDistanceFieldNumber;
const int ScenarioStopSignUnprotectedConfig::kStopDurationSecFieldNumber;
const int ScenarioStopSignUnprotectedConfig::kMinPassSDistanceFieldNumber;
const int ScenarioStopSignUnprotectedConfig::kStopTimeoutSecFieldNumber;
const int ScenarioStopSignUnprotectedConfig::kCreepTimeoutSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioStopSignUnprotectedConfig::ScenarioStopSignUnprotectedConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioStopSignUnprotectedConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioStopSignUnprotectedConfig)
}
ScenarioStopSignUnprotectedConfig::ScenarioStopSignUnprotectedConfig(const ScenarioStopSignUnprotectedConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&creep_timeout_sec_, &from.creep_timeout_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_timeout_sec_) -
    reinterpret_cast<char*>(&creep_timeout_sec_)) + sizeof(stop_timeout_sec_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioStopSignUnprotectedConfig)
}

void ScenarioStopSignUnprotectedConfig::SharedCtor() {
  creep_timeout_sec_ = 10;
  start_stop_sign_scenario_distance_ = 5;
  watch_vehicle_max_valid_stop_distance_ = 5;
  max_valid_stop_distance_ = 3.5;
  min_pass_s_distance_ = 3;
  stop_duration_sec_ = 1;
  stop_timeout_sec_ = 8;
}

ScenarioStopSignUnprotectedConfig::~ScenarioStopSignUnprotectedConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioStopSignUnprotectedConfig)
  SharedDtor();
}

void ScenarioStopSignUnprotectedConfig::SharedDtor() {
}

void ScenarioStopSignUnprotectedConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScenarioStopSignUnprotectedConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioStopSignUnprotectedConfig& ScenarioStopSignUnprotectedConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioStopSignUnprotectedConfig.base);
  return *internal_default_instance();
}


void ScenarioStopSignUnprotectedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    creep_timeout_sec_ = 10;
    start_stop_sign_scenario_distance_ = 5;
    watch_vehicle_max_valid_stop_distance_ = 5;
    max_valid_stop_distance_ = 3.5;
    min_pass_s_distance_ = 3;
    stop_duration_sec_ = 1;
    stop_timeout_sec_ = 8;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScenarioStopSignUnprotectedConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double start_stop_sign_scenario_distance = 1 [default = 5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_start_stop_sign_scenario_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_stop_sign_scenario_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double watch_vehicle_max_valid_stop_distance = 2 [default = 5];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_watch_vehicle_max_valid_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &watch_vehicle_max_valid_stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_valid_stop_distance = 3 [default = 3.5];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_max_valid_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_valid_stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float stop_duration_sec = 4 [default = 1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_stop_duration_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stop_duration_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_pass_s_distance = 5 [default = 3];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_min_pass_s_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_pass_s_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float stop_timeout_sec = 6 [default = 8];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_stop_timeout_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stop_timeout_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float creep_timeout_sec = 7 [default = 10];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_creep_timeout_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &creep_timeout_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ScenarioStopSignUnprotectedConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ScenarioStopSignUnprotectedConfig)
  return false;
#undef DO_
}

void ScenarioStopSignUnprotectedConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_stop_sign_scenario_distance = 1 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start_stop_sign_scenario_distance(), output);
  }

  // optional double watch_vehicle_max_valid_stop_distance = 2 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->watch_vehicle_max_valid_stop_distance(), output);
  }

  // optional double max_valid_stop_distance = 3 [default = 3.5];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_valid_stop_distance(), output);
  }

  // optional float stop_duration_sec = 4 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->stop_duration_sec(), output);
  }

  // optional double min_pass_s_distance = 5 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->min_pass_s_distance(), output);
  }

  // optional float stop_timeout_sec = 6 [default = 8];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->stop_timeout_sec(), output);
  }

  // optional float creep_timeout_sec = 7 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->creep_timeout_sec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ScenarioStopSignUnprotectedConfig)
}

::google::protobuf::uint8* ScenarioStopSignUnprotectedConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_stop_sign_scenario_distance = 1 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start_stop_sign_scenario_distance(), target);
  }

  // optional double watch_vehicle_max_valid_stop_distance = 2 [default = 5];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->watch_vehicle_max_valid_stop_distance(), target);
  }

  // optional double max_valid_stop_distance = 3 [default = 3.5];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_valid_stop_distance(), target);
  }

  // optional float stop_duration_sec = 4 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->stop_duration_sec(), target);
  }

  // optional double min_pass_s_distance = 5 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->min_pass_s_distance(), target);
  }

  // optional float stop_timeout_sec = 6 [default = 8];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->stop_timeout_sec(), target);
  }

  // optional float creep_timeout_sec = 7 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->creep_timeout_sec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioStopSignUnprotectedConfig)
  return target;
}

size_t ScenarioStopSignUnprotectedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional float creep_timeout_sec = 7 [default = 10];
    if (has_creep_timeout_sec()) {
      total_size += 1 + 4;
    }

    // optional double start_stop_sign_scenario_distance = 1 [default = 5];
    if (has_start_stop_sign_scenario_distance()) {
      total_size += 1 + 8;
    }

    // optional double watch_vehicle_max_valid_stop_distance = 2 [default = 5];
    if (has_watch_vehicle_max_valid_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 3 [default = 3.5];
    if (has_max_valid_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 5 [default = 3];
    if (has_min_pass_s_distance()) {
      total_size += 1 + 8;
    }

    // optional float stop_duration_sec = 4 [default = 1];
    if (has_stop_duration_sec()) {
      total_size += 1 + 4;
    }

    // optional float stop_timeout_sec = 6 [default = 8];
    if (has_stop_timeout_sec()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioStopSignUnprotectedConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioStopSignUnprotectedConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioStopSignUnprotectedConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioStopSignUnprotectedConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioStopSignUnprotectedConfig)
    MergeFrom(*source);
  }
}

void ScenarioStopSignUnprotectedConfig::MergeFrom(const ScenarioStopSignUnprotectedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      creep_timeout_sec_ = from.creep_timeout_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      start_stop_sign_scenario_distance_ = from.start_stop_sign_scenario_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      watch_vehicle_max_valid_stop_distance_ = from.watch_vehicle_max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_pass_s_distance_ = from.min_pass_s_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      stop_duration_sec_ = from.stop_duration_sec_;
    }
    if (cached_has_bits & 0x00000040u) {
      stop_timeout_sec_ = from.stop_timeout_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioStopSignUnprotectedConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioStopSignUnprotectedConfig::CopyFrom(const ScenarioStopSignUnprotectedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioStopSignUnprotectedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioStopSignUnprotectedConfig::IsInitialized() const {
  return true;
}

void ScenarioStopSignUnprotectedConfig::Swap(ScenarioStopSignUnprotectedConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioStopSignUnprotectedConfig::InternalSwap(ScenarioStopSignUnprotectedConfig* other) {
  using std::swap;
  swap(creep_timeout_sec_, other->creep_timeout_sec_);
  swap(start_stop_sign_scenario_distance_, other->start_stop_sign_scenario_distance_);
  swap(watch_vehicle_max_valid_stop_distance_, other->watch_vehicle_max_valid_stop_distance_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(min_pass_s_distance_, other->min_pass_s_distance_);
  swap(stop_duration_sec_, other->stop_duration_sec_);
  swap(stop_timeout_sec_, other->stop_timeout_sec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScenarioStopSignUnprotectedConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScenarioTrafficLightProtectedConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioTrafficLightProtectedConfig::kStartTrafficLightScenarioDistanceFieldNumber;
const int ScenarioTrafficLightProtectedConfig::kMaxValidStopDistanceFieldNumber;
const int ScenarioTrafficLightProtectedConfig::kMinPassSDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioTrafficLightProtectedConfig::ScenarioTrafficLightProtectedConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioTrafficLightProtectedConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioTrafficLightProtectedConfig)
}
ScenarioTrafficLightProtectedConfig::ScenarioTrafficLightProtectedConfig(const ScenarioTrafficLightProtectedConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_traffic_light_scenario_distance_, &from.start_traffic_light_scenario_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_pass_s_distance_) -
    reinterpret_cast<char*>(&start_traffic_light_scenario_distance_)) + sizeof(min_pass_s_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioTrafficLightProtectedConfig)
}

void ScenarioTrafficLightProtectedConfig::SharedCtor() {
  start_traffic_light_scenario_distance_ = 5;
  max_valid_stop_distance_ = 2;
  min_pass_s_distance_ = 3;
}

ScenarioTrafficLightProtectedConfig::~ScenarioTrafficLightProtectedConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioTrafficLightProtectedConfig)
  SharedDtor();
}

void ScenarioTrafficLightProtectedConfig::SharedDtor() {
}

void ScenarioTrafficLightProtectedConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScenarioTrafficLightProtectedConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioTrafficLightProtectedConfig& ScenarioTrafficLightProtectedConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioTrafficLightProtectedConfig.base);
  return *internal_default_instance();
}


void ScenarioTrafficLightProtectedConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    start_traffic_light_scenario_distance_ = 5;
    max_valid_stop_distance_ = 2;
    min_pass_s_distance_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScenarioTrafficLightProtectedConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double start_traffic_light_scenario_distance = 1 [default = 5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_start_traffic_light_scenario_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_traffic_light_scenario_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_valid_stop_distance = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_max_valid_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_valid_stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_pass_s_distance = 3 [default = 3];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_min_pass_s_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_pass_s_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ScenarioTrafficLightProtectedConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ScenarioTrafficLightProtectedConfig)
  return false;
#undef DO_
}

void ScenarioTrafficLightProtectedConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_traffic_light_scenario_distance = 1 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start_traffic_light_scenario_distance(), output);
  }

  // optional double max_valid_stop_distance = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_valid_stop_distance(), output);
  }

  // optional double min_pass_s_distance = 3 [default = 3];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min_pass_s_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ScenarioTrafficLightProtectedConfig)
}

::google::protobuf::uint8* ScenarioTrafficLightProtectedConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_traffic_light_scenario_distance = 1 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start_traffic_light_scenario_distance(), target);
  }

  // optional double max_valid_stop_distance = 2 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_valid_stop_distance(), target);
  }

  // optional double min_pass_s_distance = 3 [default = 3];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min_pass_s_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioTrafficLightProtectedConfig)
  return target;
}

size_t ScenarioTrafficLightProtectedConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double start_traffic_light_scenario_distance = 1 [default = 5];
    if (has_start_traffic_light_scenario_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 2 [default = 2];
    if (has_max_valid_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 3 [default = 3];
    if (has_min_pass_s_distance()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioTrafficLightProtectedConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioTrafficLightProtectedConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioTrafficLightProtectedConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioTrafficLightProtectedConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioTrafficLightProtectedConfig)
    MergeFrom(*source);
  }
}

void ScenarioTrafficLightProtectedConfig::MergeFrom(const ScenarioTrafficLightProtectedConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      start_traffic_light_scenario_distance_ = from.start_traffic_light_scenario_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_pass_s_distance_ = from.min_pass_s_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioTrafficLightProtectedConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioTrafficLightProtectedConfig::CopyFrom(const ScenarioTrafficLightProtectedConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioTrafficLightProtectedConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioTrafficLightProtectedConfig::IsInitialized() const {
  return true;
}

void ScenarioTrafficLightProtectedConfig::Swap(ScenarioTrafficLightProtectedConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioTrafficLightProtectedConfig::InternalSwap(ScenarioTrafficLightProtectedConfig* other) {
  using std::swap;
  swap(start_traffic_light_scenario_distance_, other->start_traffic_light_scenario_distance_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(min_pass_s_distance_, other->min_pass_s_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScenarioTrafficLightProtectedConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScenarioTrafficLightUnprotectedLeftTurnConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioTrafficLightUnprotectedLeftTurnConfig::kStartTrafficLightScenarioDistanceFieldNumber;
const int ScenarioTrafficLightUnprotectedLeftTurnConfig::kApproachCruiseSpeedFieldNumber;
const int ScenarioTrafficLightUnprotectedLeftTurnConfig::kMaxValidStopDistanceFieldNumber;
const int ScenarioTrafficLightUnprotectedLeftTurnConfig::kMinPassSDistanceFieldNumber;
const int ScenarioTrafficLightUnprotectedLeftTurnConfig::kCreepTimeoutSecFieldNumber;
const int ScenarioTrafficLightUnprotectedLeftTurnConfig::kMaxAdcSpeedBeforeCreepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioTrafficLightUnprotectedLeftTurnConfig::ScenarioTrafficLightUnprotectedLeftTurnConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioTrafficLightUnprotectedLeftTurnConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
}
ScenarioTrafficLightUnprotectedLeftTurnConfig::ScenarioTrafficLightUnprotectedLeftTurnConfig(const ScenarioTrafficLightUnprotectedLeftTurnConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&creep_timeout_sec_, &from.creep_timeout_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_adc_speed_before_creep_) -
    reinterpret_cast<char*>(&creep_timeout_sec_)) + sizeof(max_adc_speed_before_creep_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::SharedCtor() {
  creep_timeout_sec_ = 10;
  start_traffic_light_scenario_distance_ = 5;
  approach_cruise_speed_ = 2.78;
  max_valid_stop_distance_ = 3.5;
  min_pass_s_distance_ = 3;
  max_adc_speed_before_creep_ = 5.56;
}

ScenarioTrafficLightUnprotectedLeftTurnConfig::~ScenarioTrafficLightUnprotectedLeftTurnConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  SharedDtor();
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::SharedDtor() {
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScenarioTrafficLightUnprotectedLeftTurnConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioTrafficLightUnprotectedLeftTurnConfig& ScenarioTrafficLightUnprotectedLeftTurnConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioTrafficLightUnprotectedLeftTurnConfig.base);
  return *internal_default_instance();
}


void ScenarioTrafficLightUnprotectedLeftTurnConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    creep_timeout_sec_ = 10;
    start_traffic_light_scenario_distance_ = 5;
    approach_cruise_speed_ = 2.78;
    max_valid_stop_distance_ = 3.5;
    min_pass_s_distance_ = 3;
    max_adc_speed_before_creep_ = 5.56;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScenarioTrafficLightUnprotectedLeftTurnConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double start_traffic_light_scenario_distance = 1 [default = 5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_start_traffic_light_scenario_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_traffic_light_scenario_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double approach_cruise_speed = 2 [default = 2.78];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_approach_cruise_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &approach_cruise_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_valid_stop_distance = 3 [default = 3.5];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_max_valid_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_valid_stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_pass_s_distance = 4 [default = 3];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_min_pass_s_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_pass_s_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float creep_timeout_sec = 5 [default = 10];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_creep_timeout_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &creep_timeout_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_adc_speed_before_creep = 6 [default = 5.56];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_max_adc_speed_before_creep();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_adc_speed_before_creep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  return false;
#undef DO_
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_traffic_light_scenario_distance = 1 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start_traffic_light_scenario_distance(), output);
  }

  // optional double approach_cruise_speed = 2 [default = 2.78];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->approach_cruise_speed(), output);
  }

  // optional double max_valid_stop_distance = 3 [default = 3.5];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_valid_stop_distance(), output);
  }

  // optional double min_pass_s_distance = 4 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min_pass_s_distance(), output);
  }

  // optional float creep_timeout_sec = 5 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->creep_timeout_sec(), output);
  }

  // optional double max_adc_speed_before_creep = 6 [default = 5.56];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->max_adc_speed_before_creep(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
}

::google::protobuf::uint8* ScenarioTrafficLightUnprotectedLeftTurnConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_traffic_light_scenario_distance = 1 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start_traffic_light_scenario_distance(), target);
  }

  // optional double approach_cruise_speed = 2 [default = 2.78];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->approach_cruise_speed(), target);
  }

  // optional double max_valid_stop_distance = 3 [default = 3.5];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_valid_stop_distance(), target);
  }

  // optional double min_pass_s_distance = 4 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min_pass_s_distance(), target);
  }

  // optional float creep_timeout_sec = 5 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->creep_timeout_sec(), target);
  }

  // optional double max_adc_speed_before_creep = 6 [default = 5.56];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->max_adc_speed_before_creep(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  return target;
}

size_t ScenarioTrafficLightUnprotectedLeftTurnConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional float creep_timeout_sec = 5 [default = 10];
    if (has_creep_timeout_sec()) {
      total_size += 1 + 4;
    }

    // optional double start_traffic_light_scenario_distance = 1 [default = 5];
    if (has_start_traffic_light_scenario_distance()) {
      total_size += 1 + 8;
    }

    // optional double approach_cruise_speed = 2 [default = 2.78];
    if (has_approach_cruise_speed()) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 3 [default = 3.5];
    if (has_max_valid_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 4 [default = 3];
    if (has_min_pass_s_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_adc_speed_before_creep = 6 [default = 5.56];
    if (has_max_adc_speed_before_creep()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioTrafficLightUnprotectedLeftTurnConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioTrafficLightUnprotectedLeftTurnConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
    MergeFrom(*source);
  }
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::MergeFrom(const ScenarioTrafficLightUnprotectedLeftTurnConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      creep_timeout_sec_ = from.creep_timeout_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      start_traffic_light_scenario_distance_ = from.start_traffic_light_scenario_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      approach_cruise_speed_ = from.approach_cruise_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_pass_s_distance_ = from.min_pass_s_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_adc_speed_before_creep_ = from.max_adc_speed_before_creep_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::CopyFrom(const ScenarioTrafficLightUnprotectedLeftTurnConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioTrafficLightUnprotectedLeftTurnConfig::IsInitialized() const {
  return true;
}

void ScenarioTrafficLightUnprotectedLeftTurnConfig::Swap(ScenarioTrafficLightUnprotectedLeftTurnConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioTrafficLightUnprotectedLeftTurnConfig::InternalSwap(ScenarioTrafficLightUnprotectedLeftTurnConfig* other) {
  using std::swap;
  swap(creep_timeout_sec_, other->creep_timeout_sec_);
  swap(start_traffic_light_scenario_distance_, other->start_traffic_light_scenario_distance_);
  swap(approach_cruise_speed_, other->approach_cruise_speed_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(min_pass_s_distance_, other->min_pass_s_distance_);
  swap(max_adc_speed_before_creep_, other->max_adc_speed_before_creep_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScenarioTrafficLightUnprotectedLeftTurnConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScenarioTrafficLightUnprotectedRightTurnConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioTrafficLightUnprotectedRightTurnConfig::kStartTrafficLightScenarioDistanceFieldNumber;
const int ScenarioTrafficLightUnprotectedRightTurnConfig::kEnableRightTurnOnRedFieldNumber;
const int ScenarioTrafficLightUnprotectedRightTurnConfig::kMaxValidStopDistanceFieldNumber;
const int ScenarioTrafficLightUnprotectedRightTurnConfig::kMinPassSDistanceFieldNumber;
const int ScenarioTrafficLightUnprotectedRightTurnConfig::kRedLightRightTurnStopDurationSecFieldNumber;
const int ScenarioTrafficLightUnprotectedRightTurnConfig::kCreepTimeoutSecFieldNumber;
const int ScenarioTrafficLightUnprotectedRightTurnConfig::kMaxAdcSpeedBeforeCreepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioTrafficLightUnprotectedRightTurnConfig::ScenarioTrafficLightUnprotectedRightTurnConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioTrafficLightUnprotectedRightTurnConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
}
ScenarioTrafficLightUnprotectedRightTurnConfig::ScenarioTrafficLightUnprotectedRightTurnConfig(const ScenarioTrafficLightUnprotectedRightTurnConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enable_right_turn_on_red_, &from.enable_right_turn_on_red_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_adc_speed_before_creep_) -
    reinterpret_cast<char*>(&enable_right_turn_on_red_)) + sizeof(max_adc_speed_before_creep_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::SharedCtor() {
  enable_right_turn_on_red_ = false;
  start_traffic_light_scenario_distance_ = 5;
  max_valid_stop_distance_ = 3.5;
  min_pass_s_distance_ = 3;
  red_light_right_turn_stop_duration_sec_ = 3;
  creep_timeout_sec_ = 10;
  max_adc_speed_before_creep_ = 3;
}

ScenarioTrafficLightUnprotectedRightTurnConfig::~ScenarioTrafficLightUnprotectedRightTurnConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  SharedDtor();
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::SharedDtor() {
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScenarioTrafficLightUnprotectedRightTurnConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioTrafficLightUnprotectedRightTurnConfig& ScenarioTrafficLightUnprotectedRightTurnConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioTrafficLightUnprotectedRightTurnConfig.base);
  return *internal_default_instance();
}


void ScenarioTrafficLightUnprotectedRightTurnConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    enable_right_turn_on_red_ = false;
    start_traffic_light_scenario_distance_ = 5;
    max_valid_stop_distance_ = 3.5;
    min_pass_s_distance_ = 3;
    red_light_right_turn_stop_duration_sec_ = 3;
    creep_timeout_sec_ = 10;
    max_adc_speed_before_creep_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScenarioTrafficLightUnprotectedRightTurnConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double start_traffic_light_scenario_distance = 1 [default = 5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_start_traffic_light_scenario_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_traffic_light_scenario_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_right_turn_on_red = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_enable_right_turn_on_red();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_right_turn_on_red_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_valid_stop_distance = 3 [default = 3.5];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_max_valid_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_valid_stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_pass_s_distance = 4 [default = 3];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_min_pass_s_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_pass_s_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float red_light_right_turn_stop_duration_sec = 5 [default = 3];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_red_light_right_turn_stop_duration_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &red_light_right_turn_stop_duration_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float creep_timeout_sec = 6 [default = 10];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_creep_timeout_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &creep_timeout_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_adc_speed_before_creep = 7 [default = 3];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_max_adc_speed_before_creep();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_adc_speed_before_creep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  return false;
#undef DO_
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_traffic_light_scenario_distance = 1 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start_traffic_light_scenario_distance(), output);
  }

  // optional bool enable_right_turn_on_red = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable_right_turn_on_red(), output);
  }

  // optional double max_valid_stop_distance = 3 [default = 3.5];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_valid_stop_distance(), output);
  }

  // optional double min_pass_s_distance = 4 [default = 3];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min_pass_s_distance(), output);
  }

  // optional float red_light_right_turn_stop_duration_sec = 5 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->red_light_right_turn_stop_duration_sec(), output);
  }

  // optional float creep_timeout_sec = 6 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->creep_timeout_sec(), output);
  }

  // optional double max_adc_speed_before_creep = 7 [default = 3];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->max_adc_speed_before_creep(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
}

::google::protobuf::uint8* ScenarioTrafficLightUnprotectedRightTurnConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_traffic_light_scenario_distance = 1 [default = 5];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start_traffic_light_scenario_distance(), target);
  }

  // optional bool enable_right_turn_on_red = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable_right_turn_on_red(), target);
  }

  // optional double max_valid_stop_distance = 3 [default = 3.5];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_valid_stop_distance(), target);
  }

  // optional double min_pass_s_distance = 4 [default = 3];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min_pass_s_distance(), target);
  }

  // optional float red_light_right_turn_stop_duration_sec = 5 [default = 3];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->red_light_right_turn_stop_duration_sec(), target);
  }

  // optional float creep_timeout_sec = 6 [default = 10];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->creep_timeout_sec(), target);
  }

  // optional double max_adc_speed_before_creep = 7 [default = 3];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->max_adc_speed_before_creep(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  return target;
}

size_t ScenarioTrafficLightUnprotectedRightTurnConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bool enable_right_turn_on_red = 2 [default = false];
    if (has_enable_right_turn_on_red()) {
      total_size += 1 + 1;
    }

    // optional double start_traffic_light_scenario_distance = 1 [default = 5];
    if (has_start_traffic_light_scenario_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 3 [default = 3.5];
    if (has_max_valid_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 4 [default = 3];
    if (has_min_pass_s_distance()) {
      total_size += 1 + 8;
    }

    // optional float red_light_right_turn_stop_duration_sec = 5 [default = 3];
    if (has_red_light_right_turn_stop_duration_sec()) {
      total_size += 1 + 4;
    }

    // optional float creep_timeout_sec = 6 [default = 10];
    if (has_creep_timeout_sec()) {
      total_size += 1 + 4;
    }

    // optional double max_adc_speed_before_creep = 7 [default = 3];
    if (has_max_adc_speed_before_creep()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioTrafficLightUnprotectedRightTurnConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioTrafficLightUnprotectedRightTurnConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
    MergeFrom(*source);
  }
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::MergeFrom(const ScenarioTrafficLightUnprotectedRightTurnConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      enable_right_turn_on_red_ = from.enable_right_turn_on_red_;
    }
    if (cached_has_bits & 0x00000002u) {
      start_traffic_light_scenario_distance_ = from.start_traffic_light_scenario_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_pass_s_distance_ = from.min_pass_s_distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      red_light_right_turn_stop_duration_sec_ = from.red_light_right_turn_stop_duration_sec_;
    }
    if (cached_has_bits & 0x00000020u) {
      creep_timeout_sec_ = from.creep_timeout_sec_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_adc_speed_before_creep_ = from.max_adc_speed_before_creep_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::CopyFrom(const ScenarioTrafficLightUnprotectedRightTurnConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioTrafficLightUnprotectedRightTurnConfig::IsInitialized() const {
  return true;
}

void ScenarioTrafficLightUnprotectedRightTurnConfig::Swap(ScenarioTrafficLightUnprotectedRightTurnConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioTrafficLightUnprotectedRightTurnConfig::InternalSwap(ScenarioTrafficLightUnprotectedRightTurnConfig* other) {
  using std::swap;
  swap(enable_right_turn_on_red_, other->enable_right_turn_on_red_);
  swap(start_traffic_light_scenario_distance_, other->start_traffic_light_scenario_distance_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(min_pass_s_distance_, other->min_pass_s_distance_);
  swap(red_light_right_turn_stop_duration_sec_, other->red_light_right_turn_stop_duration_sec_);
  swap(creep_timeout_sec_, other->creep_timeout_sec_);
  swap(max_adc_speed_before_creep_, other->max_adc_speed_before_creep_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScenarioTrafficLightUnprotectedRightTurnConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScenarioValetParkingConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioValetParkingConfig::kParkingSpotRangeToStartFieldNumber;
const int ScenarioValetParkingConfig::kMaxValidStopDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioValetParkingConfig::ScenarioValetParkingConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioValetParkingConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioValetParkingConfig)
}
ScenarioValetParkingConfig::ScenarioValetParkingConfig(const ScenarioValetParkingConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&parking_spot_range_to_start_, &from.parking_spot_range_to_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_valid_stop_distance_) -
    reinterpret_cast<char*>(&parking_spot_range_to_start_)) + sizeof(max_valid_stop_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioValetParkingConfig)
}

void ScenarioValetParkingConfig::SharedCtor() {
  parking_spot_range_to_start_ = 20;
  max_valid_stop_distance_ = 1;
}

ScenarioValetParkingConfig::~ScenarioValetParkingConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioValetParkingConfig)
  SharedDtor();
}

void ScenarioValetParkingConfig::SharedDtor() {
}

void ScenarioValetParkingConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScenarioValetParkingConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioValetParkingConfig& ScenarioValetParkingConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioValetParkingConfig.base);
  return *internal_default_instance();
}


void ScenarioValetParkingConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioValetParkingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    parking_spot_range_to_start_ = 20;
    max_valid_stop_distance_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScenarioValetParkingConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ScenarioValetParkingConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double parking_spot_range_to_start = 1 [default = 20];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_parking_spot_range_to_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &parking_spot_range_to_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_valid_stop_distance = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_max_valid_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_valid_stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ScenarioValetParkingConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ScenarioValetParkingConfig)
  return false;
#undef DO_
}

void ScenarioValetParkingConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ScenarioValetParkingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double parking_spot_range_to_start = 1 [default = 20];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->parking_spot_range_to_start(), output);
  }

  // optional double max_valid_stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_valid_stop_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ScenarioValetParkingConfig)
}

::google::protobuf::uint8* ScenarioValetParkingConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioValetParkingConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double parking_spot_range_to_start = 1 [default = 20];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->parking_spot_range_to_start(), target);
  }

  // optional double max_valid_stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_valid_stop_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioValetParkingConfig)
  return target;
}

size_t ScenarioValetParkingConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioValetParkingConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double parking_spot_range_to_start = 1 [default = 20];
    if (has_parking_spot_range_to_start()) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 2 [default = 1];
    if (has_max_valid_stop_distance()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioValetParkingConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioValetParkingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioValetParkingConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioValetParkingConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioValetParkingConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioValetParkingConfig)
    MergeFrom(*source);
  }
}

void ScenarioValetParkingConfig::MergeFrom(const ScenarioValetParkingConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioValetParkingConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      parking_spot_range_to_start_ = from.parking_spot_range_to_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioValetParkingConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioValetParkingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioValetParkingConfig::CopyFrom(const ScenarioValetParkingConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioValetParkingConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioValetParkingConfig::IsInitialized() const {
  return true;
}

void ScenarioValetParkingConfig::Swap(ScenarioValetParkingConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioValetParkingConfig::InternalSwap(ScenarioValetParkingConfig* other) {
  using std::swap;
  swap(parking_spot_range_to_start_, other->parking_spot_range_to_start_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScenarioValetParkingConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScenarioDeadEndTurnAroundConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioDeadEndTurnAroundConfig::kDeadEndStartRangeFieldNumber;
const int ScenarioDeadEndTurnAroundConfig::kMaxValidStopDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioDeadEndTurnAroundConfig::ScenarioDeadEndTurnAroundConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioDeadEndTurnAroundConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioDeadEndTurnAroundConfig)
}
ScenarioDeadEndTurnAroundConfig::ScenarioDeadEndTurnAroundConfig(const ScenarioDeadEndTurnAroundConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dead_end_start_range_, &from.dead_end_start_range_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_valid_stop_distance_) -
    reinterpret_cast<char*>(&dead_end_start_range_)) + sizeof(max_valid_stop_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioDeadEndTurnAroundConfig)
}

void ScenarioDeadEndTurnAroundConfig::SharedCtor() {
  dead_end_start_range_ = 20;
  max_valid_stop_distance_ = 1;
}

ScenarioDeadEndTurnAroundConfig::~ScenarioDeadEndTurnAroundConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioDeadEndTurnAroundConfig)
  SharedDtor();
}

void ScenarioDeadEndTurnAroundConfig::SharedDtor() {
}

void ScenarioDeadEndTurnAroundConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScenarioDeadEndTurnAroundConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioDeadEndTurnAroundConfig& ScenarioDeadEndTurnAroundConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioDeadEndTurnAroundConfig.base);
  return *internal_default_instance();
}


void ScenarioDeadEndTurnAroundConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioDeadEndTurnAroundConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    dead_end_start_range_ = 20;
    max_valid_stop_distance_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScenarioDeadEndTurnAroundConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ScenarioDeadEndTurnAroundConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double dead_end_start_range = 1 [default = 20];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_dead_end_start_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dead_end_start_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_valid_stop_distance = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_max_valid_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_valid_stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ScenarioDeadEndTurnAroundConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ScenarioDeadEndTurnAroundConfig)
  return false;
#undef DO_
}

void ScenarioDeadEndTurnAroundConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ScenarioDeadEndTurnAroundConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double dead_end_start_range = 1 [default = 20];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->dead_end_start_range(), output);
  }

  // optional double max_valid_stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_valid_stop_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ScenarioDeadEndTurnAroundConfig)
}

::google::protobuf::uint8* ScenarioDeadEndTurnAroundConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioDeadEndTurnAroundConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double dead_end_start_range = 1 [default = 20];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->dead_end_start_range(), target);
  }

  // optional double max_valid_stop_distance = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_valid_stop_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioDeadEndTurnAroundConfig)
  return target;
}

size_t ScenarioDeadEndTurnAroundConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioDeadEndTurnAroundConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double dead_end_start_range = 1 [default = 20];
    if (has_dead_end_start_range()) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 2 [default = 1];
    if (has_max_valid_stop_distance()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioDeadEndTurnAroundConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioDeadEndTurnAroundConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioDeadEndTurnAroundConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioDeadEndTurnAroundConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioDeadEndTurnAroundConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioDeadEndTurnAroundConfig)
    MergeFrom(*source);
  }
}

void ScenarioDeadEndTurnAroundConfig::MergeFrom(const ScenarioDeadEndTurnAroundConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioDeadEndTurnAroundConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      dead_end_start_range_ = from.dead_end_start_range_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioDeadEndTurnAroundConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioDeadEndTurnAroundConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioDeadEndTurnAroundConfig::CopyFrom(const ScenarioDeadEndTurnAroundConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioDeadEndTurnAroundConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioDeadEndTurnAroundConfig::IsInitialized() const {
  return true;
}

void ScenarioDeadEndTurnAroundConfig::Swap(ScenarioDeadEndTurnAroundConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioDeadEndTurnAroundConfig::InternalSwap(ScenarioDeadEndTurnAroundConfig* other) {
  using std::swap;
  swap(dead_end_start_range_, other->dead_end_start_range_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScenarioDeadEndTurnAroundConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScenarioYieldSignConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioYieldSignConfig::kStartYieldSignScenarioDistanceFieldNumber;
const int ScenarioYieldSignConfig::kMaxValidStopDistanceFieldNumber;
const int ScenarioYieldSignConfig::kMinPassSDistanceFieldNumber;
const int ScenarioYieldSignConfig::kCreepTimeoutSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioYieldSignConfig::ScenarioYieldSignConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioYieldSignConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioYieldSignConfig)
}
ScenarioYieldSignConfig::ScenarioYieldSignConfig(const ScenarioYieldSignConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&creep_timeout_sec_, &from.creep_timeout_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_pass_s_distance_) -
    reinterpret_cast<char*>(&creep_timeout_sec_)) + sizeof(min_pass_s_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioYieldSignConfig)
}

void ScenarioYieldSignConfig::SharedCtor() {
  creep_timeout_sec_ = 10;
  start_yield_sign_scenario_distance_ = 10;
  max_valid_stop_distance_ = 4.5;
  min_pass_s_distance_ = 3;
}

ScenarioYieldSignConfig::~ScenarioYieldSignConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioYieldSignConfig)
  SharedDtor();
}

void ScenarioYieldSignConfig::SharedDtor() {
}

void ScenarioYieldSignConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScenarioYieldSignConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioYieldSignConfig& ScenarioYieldSignConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioYieldSignConfig.base);
  return *internal_default_instance();
}


void ScenarioYieldSignConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioYieldSignConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    creep_timeout_sec_ = 10;
    start_yield_sign_scenario_distance_ = 10;
    max_valid_stop_distance_ = 4.5;
    min_pass_s_distance_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScenarioYieldSignConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ScenarioYieldSignConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double start_yield_sign_scenario_distance = 1 [default = 10];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_start_yield_sign_scenario_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_yield_sign_scenario_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_valid_stop_distance = 2 [default = 4.5];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_max_valid_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_valid_stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_pass_s_distance = 3 [default = 3];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_min_pass_s_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_pass_s_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float creep_timeout_sec = 4 [default = 10];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_creep_timeout_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &creep_timeout_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ScenarioYieldSignConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ScenarioYieldSignConfig)
  return false;
#undef DO_
}

void ScenarioYieldSignConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ScenarioYieldSignConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_yield_sign_scenario_distance = 1 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start_yield_sign_scenario_distance(), output);
  }

  // optional double max_valid_stop_distance = 2 [default = 4.5];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max_valid_stop_distance(), output);
  }

  // optional double min_pass_s_distance = 3 [default = 3];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min_pass_s_distance(), output);
  }

  // optional float creep_timeout_sec = 4 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->creep_timeout_sec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ScenarioYieldSignConfig)
}

::google::protobuf::uint8* ScenarioYieldSignConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioYieldSignConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_yield_sign_scenario_distance = 1 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start_yield_sign_scenario_distance(), target);
  }

  // optional double max_valid_stop_distance = 2 [default = 4.5];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max_valid_stop_distance(), target);
  }

  // optional double min_pass_s_distance = 3 [default = 3];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min_pass_s_distance(), target);
  }

  // optional float creep_timeout_sec = 4 [default = 10];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->creep_timeout_sec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioYieldSignConfig)
  return target;
}

size_t ScenarioYieldSignConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioYieldSignConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional float creep_timeout_sec = 4 [default = 10];
    if (has_creep_timeout_sec()) {
      total_size += 1 + 4;
    }

    // optional double start_yield_sign_scenario_distance = 1 [default = 10];
    if (has_start_yield_sign_scenario_distance()) {
      total_size += 1 + 8;
    }

    // optional double max_valid_stop_distance = 2 [default = 4.5];
    if (has_max_valid_stop_distance()) {
      total_size += 1 + 8;
    }

    // optional double min_pass_s_distance = 3 [default = 3];
    if (has_min_pass_s_distance()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioYieldSignConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioYieldSignConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioYieldSignConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioYieldSignConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioYieldSignConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioYieldSignConfig)
    MergeFrom(*source);
  }
}

void ScenarioYieldSignConfig::MergeFrom(const ScenarioYieldSignConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioYieldSignConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      creep_timeout_sec_ = from.creep_timeout_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      start_yield_sign_scenario_distance_ = from.start_yield_sign_scenario_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_valid_stop_distance_ = from.max_valid_stop_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_pass_s_distance_ = from.min_pass_s_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioYieldSignConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioYieldSignConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioYieldSignConfig::CopyFrom(const ScenarioYieldSignConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioYieldSignConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioYieldSignConfig::IsInitialized() const {
  return true;
}

void ScenarioYieldSignConfig::Swap(ScenarioYieldSignConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioYieldSignConfig::InternalSwap(ScenarioYieldSignConfig* other) {
  using std::swap;
  swap(creep_timeout_sec_, other->creep_timeout_sec_);
  swap(start_yield_sign_scenario_distance_, other->start_yield_sign_scenario_distance_);
  swap(max_valid_stop_distance_, other->max_valid_stop_distance_);
  swap(min_pass_s_distance_, other->min_pass_s_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScenarioYieldSignConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScenarioConfig_StageConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioConfig_StageConfig::kStageTypeFieldNumber;
const int ScenarioConfig_StageConfig::kEnabledFieldNumber;
const int ScenarioConfig_StageConfig::kTaskTypeFieldNumber;
const int ScenarioConfig_StageConfig::kTaskConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioConfig_StageConfig::ScenarioConfig_StageConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioConfig_StageConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioConfig.StageConfig)
}
ScenarioConfig_StageConfig::ScenarioConfig_StageConfig(const ScenarioConfig_StageConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      task_type_(from.task_type_),
      task_config_(from.task_config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stage_type_, &from.stage_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&stage_type_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioConfig.StageConfig)
}

void ScenarioConfig_StageConfig::SharedCtor() {
  stage_type_ = 0;
  enabled_ = true;
}

ScenarioConfig_StageConfig::~ScenarioConfig_StageConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioConfig.StageConfig)
  SharedDtor();
}

void ScenarioConfig_StageConfig::SharedDtor() {
}

void ScenarioConfig_StageConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScenarioConfig_StageConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioConfig_StageConfig& ScenarioConfig_StageConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioConfig_StageConfig.base);
  return *internal_default_instance();
}


void ScenarioConfig_StageConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioConfig.StageConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_type_.Clear();
  task_config_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    stage_type_ = 0;
    enabled_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScenarioConfig_StageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ScenarioConfig.StageConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.ScenarioConfig.StageType stage_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::ScenarioConfig_StageType_IsValid(value)) {
            set_stage_type(static_cast< ::apollo::planning::ScenarioConfig_StageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enabled = 2 [default = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.TaskConfig.TaskType task_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::TaskConfig_TaskType_IsValid(value)) {
            add_task_type(static_cast< ::apollo::planning::TaskConfig_TaskType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::apollo::planning::TaskConfig_TaskType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_task_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.TaskConfig task_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_task_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ScenarioConfig.StageConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ScenarioConfig.StageConfig)
  return false;
#undef DO_
}

void ScenarioConfig_StageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ScenarioConfig.StageConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.ScenarioConfig.StageType stage_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stage_type(), output);
  }

  // optional bool enabled = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  // repeated .apollo.planning.TaskConfig.TaskType task_type = 3;
  for (int i = 0, n = this->task_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->task_type(i), output);
  }

  // repeated .apollo.planning.TaskConfig task_config = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->task_config_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->task_config(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ScenarioConfig.StageConfig)
}

::google::protobuf::uint8* ScenarioConfig_StageConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioConfig.StageConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.ScenarioConfig.StageType stage_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stage_type(), target);
  }

  // optional bool enabled = 2 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enabled(), target);
  }

  // repeated .apollo.planning.TaskConfig.TaskType task_type = 3;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    3, this->task_type_, target);

  // repeated .apollo.planning.TaskConfig task_config = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->task_config_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->task_config(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioConfig.StageConfig)
  return target;
}

size_t ScenarioConfig_StageConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioConfig.StageConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.TaskConfig.TaskType task_type = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->task_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->task_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .apollo.planning.TaskConfig task_config = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->task_config_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->task_config(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.planning.ScenarioConfig.StageType stage_type = 1;
    if (has_stage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage_type());
    }

    // optional bool enabled = 2 [default = true];
    if (has_enabled()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioConfig_StageConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioConfig.StageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioConfig_StageConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioConfig_StageConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioConfig.StageConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioConfig.StageConfig)
    MergeFrom(*source);
  }
}

void ScenarioConfig_StageConfig::MergeFrom(const ScenarioConfig_StageConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioConfig.StageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_type_.MergeFrom(from.task_type_);
  task_config_.MergeFrom(from.task_config_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      stage_type_ = from.stage_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      enabled_ = from.enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScenarioConfig_StageConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioConfig.StageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioConfig_StageConfig::CopyFrom(const ScenarioConfig_StageConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioConfig.StageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioConfig_StageConfig::IsInitialized() const {
  return true;
}

void ScenarioConfig_StageConfig::Swap(ScenarioConfig_StageConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioConfig_StageConfig::InternalSwap(ScenarioConfig_StageConfig* other) {
  using std::swap;
  task_type_.InternalSwap(&other->task_type_);
  CastToBase(&task_config_)->InternalSwap(CastToBase(&other->task_config_));
  swap(stage_type_, other->stage_type_);
  swap(enabled_, other->enabled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScenarioConfig_StageConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ScenarioConfig::InitAsDefaultInstance() {
  ::apollo::planning::_ScenarioConfig_default_instance_.lane_follow_config_ = const_cast< ::apollo::planning::ScenarioLaneFollowConfig*>(
      ::apollo::planning::ScenarioLaneFollowConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.bare_intersection_unprotected_config_ = const_cast< ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig*>(
      ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.emergency_pull_over_config_ = const_cast< ::apollo::planning::ScenarioEmergencyPullOverConfig*>(
      ::apollo::planning::ScenarioEmergencyPullOverConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.emergency_stop_config_ = const_cast< ::apollo::planning::ScenarioEmergencyStopConfig*>(
      ::apollo::planning::ScenarioEmergencyStopConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.learning_model_sample_config_ = const_cast< ::apollo::planning::ScenarioLearningModelSampleConfig*>(
      ::apollo::planning::ScenarioLearningModelSampleConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.narrow_street_u_turn_config_ = const_cast< ::apollo::planning::ScenarioNarrowStreetUTurnConfig*>(
      ::apollo::planning::ScenarioNarrowStreetUTurnConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.park_and_go_config_ = const_cast< ::apollo::planning::ScenarioParkAndGoConfig*>(
      ::apollo::planning::ScenarioParkAndGoConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.pull_over_config_ = const_cast< ::apollo::planning::ScenarioPullOverConfig*>(
      ::apollo::planning::ScenarioPullOverConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.stop_sign_unprotected_config_ = const_cast< ::apollo::planning::ScenarioStopSignUnprotectedConfig*>(
      ::apollo::planning::ScenarioStopSignUnprotectedConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.traffic_light_protected_config_ = const_cast< ::apollo::planning::ScenarioTrafficLightProtectedConfig*>(
      ::apollo::planning::ScenarioTrafficLightProtectedConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.traffic_light_unprotected_left_turn_config_ = const_cast< ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig*>(
      ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.traffic_light_unprotected_right_turn_config_ = const_cast< ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig*>(
      ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.valet_parking_config_ = const_cast< ::apollo::planning::ScenarioValetParkingConfig*>(
      ::apollo::planning::ScenarioValetParkingConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.yield_sign_config_ = const_cast< ::apollo::planning::ScenarioYieldSignConfig*>(
      ::apollo::planning::ScenarioYieldSignConfig::internal_default_instance());
  ::apollo::planning::_ScenarioConfig_default_instance_.deadend_turnaround_config_ = const_cast< ::apollo::planning::ScenarioDeadEndTurnAroundConfig*>(
      ::apollo::planning::ScenarioDeadEndTurnAroundConfig::internal_default_instance());
}
void ScenarioConfig::set_allocated_lane_follow_config(::apollo::planning::ScenarioLaneFollowConfig* lane_follow_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (lane_follow_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lane_follow_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lane_follow_config, submessage_arena);
    }
    set_has_lane_follow_config();
    scenario_config_.lane_follow_config_ = lane_follow_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.lane_follow_config)
}
void ScenarioConfig::set_allocated_bare_intersection_unprotected_config(::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* bare_intersection_unprotected_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (bare_intersection_unprotected_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bare_intersection_unprotected_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bare_intersection_unprotected_config, submessage_arena);
    }
    set_has_bare_intersection_unprotected_config();
    scenario_config_.bare_intersection_unprotected_config_ = bare_intersection_unprotected_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.bare_intersection_unprotected_config)
}
void ScenarioConfig::set_allocated_emergency_pull_over_config(::apollo::planning::ScenarioEmergencyPullOverConfig* emergency_pull_over_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (emergency_pull_over_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      emergency_pull_over_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, emergency_pull_over_config, submessage_arena);
    }
    set_has_emergency_pull_over_config();
    scenario_config_.emergency_pull_over_config_ = emergency_pull_over_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.emergency_pull_over_config)
}
void ScenarioConfig::set_allocated_emergency_stop_config(::apollo::planning::ScenarioEmergencyStopConfig* emergency_stop_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (emergency_stop_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      emergency_stop_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, emergency_stop_config, submessage_arena);
    }
    set_has_emergency_stop_config();
    scenario_config_.emergency_stop_config_ = emergency_stop_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.emergency_stop_config)
}
void ScenarioConfig::set_allocated_learning_model_sample_config(::apollo::planning::ScenarioLearningModelSampleConfig* learning_model_sample_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (learning_model_sample_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      learning_model_sample_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, learning_model_sample_config, submessage_arena);
    }
    set_has_learning_model_sample_config();
    scenario_config_.learning_model_sample_config_ = learning_model_sample_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.learning_model_sample_config)
}
void ScenarioConfig::set_allocated_narrow_street_u_turn_config(::apollo::planning::ScenarioNarrowStreetUTurnConfig* narrow_street_u_turn_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (narrow_street_u_turn_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      narrow_street_u_turn_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, narrow_street_u_turn_config, submessage_arena);
    }
    set_has_narrow_street_u_turn_config();
    scenario_config_.narrow_street_u_turn_config_ = narrow_street_u_turn_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.narrow_street_u_turn_config)
}
void ScenarioConfig::set_allocated_park_and_go_config(::apollo::planning::ScenarioParkAndGoConfig* park_and_go_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (park_and_go_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      park_and_go_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, park_and_go_config, submessage_arena);
    }
    set_has_park_and_go_config();
    scenario_config_.park_and_go_config_ = park_and_go_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.park_and_go_config)
}
void ScenarioConfig::set_allocated_pull_over_config(::apollo::planning::ScenarioPullOverConfig* pull_over_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (pull_over_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pull_over_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pull_over_config, submessage_arena);
    }
    set_has_pull_over_config();
    scenario_config_.pull_over_config_ = pull_over_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.pull_over_config)
}
void ScenarioConfig::set_allocated_stop_sign_unprotected_config(::apollo::planning::ScenarioStopSignUnprotectedConfig* stop_sign_unprotected_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (stop_sign_unprotected_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stop_sign_unprotected_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stop_sign_unprotected_config, submessage_arena);
    }
    set_has_stop_sign_unprotected_config();
    scenario_config_.stop_sign_unprotected_config_ = stop_sign_unprotected_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.stop_sign_unprotected_config)
}
void ScenarioConfig::set_allocated_traffic_light_protected_config(::apollo::planning::ScenarioTrafficLightProtectedConfig* traffic_light_protected_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (traffic_light_protected_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      traffic_light_protected_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, traffic_light_protected_config, submessage_arena);
    }
    set_has_traffic_light_protected_config();
    scenario_config_.traffic_light_protected_config_ = traffic_light_protected_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.traffic_light_protected_config)
}
void ScenarioConfig::set_allocated_traffic_light_unprotected_left_turn_config(::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* traffic_light_unprotected_left_turn_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (traffic_light_unprotected_left_turn_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      traffic_light_unprotected_left_turn_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, traffic_light_unprotected_left_turn_config, submessage_arena);
    }
    set_has_traffic_light_unprotected_left_turn_config();
    scenario_config_.traffic_light_unprotected_left_turn_config_ = traffic_light_unprotected_left_turn_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.traffic_light_unprotected_left_turn_config)
}
void ScenarioConfig::set_allocated_traffic_light_unprotected_right_turn_config(::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* traffic_light_unprotected_right_turn_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (traffic_light_unprotected_right_turn_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      traffic_light_unprotected_right_turn_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, traffic_light_unprotected_right_turn_config, submessage_arena);
    }
    set_has_traffic_light_unprotected_right_turn_config();
    scenario_config_.traffic_light_unprotected_right_turn_config_ = traffic_light_unprotected_right_turn_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.traffic_light_unprotected_right_turn_config)
}
void ScenarioConfig::set_allocated_valet_parking_config(::apollo::planning::ScenarioValetParkingConfig* valet_parking_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (valet_parking_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      valet_parking_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, valet_parking_config, submessage_arena);
    }
    set_has_valet_parking_config();
    scenario_config_.valet_parking_config_ = valet_parking_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.valet_parking_config)
}
void ScenarioConfig::set_allocated_yield_sign_config(::apollo::planning::ScenarioYieldSignConfig* yield_sign_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (yield_sign_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      yield_sign_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, yield_sign_config, submessage_arena);
    }
    set_has_yield_sign_config();
    scenario_config_.yield_sign_config_ = yield_sign_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.yield_sign_config)
}
void ScenarioConfig::set_allocated_deadend_turnaround_config(::apollo::planning::ScenarioDeadEndTurnAroundConfig* deadend_turnaround_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_scenario_config();
  if (deadend_turnaround_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      deadend_turnaround_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, deadend_turnaround_config, submessage_arena);
    }
    set_has_deadend_turnaround_config();
    scenario_config_.deadend_turnaround_config_ = deadend_turnaround_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.ScenarioConfig.deadend_turnaround_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenarioConfig::kScenarioTypeFieldNumber;
const int ScenarioConfig::kLaneFollowConfigFieldNumber;
const int ScenarioConfig::kBareIntersectionUnprotectedConfigFieldNumber;
const int ScenarioConfig::kEmergencyPullOverConfigFieldNumber;
const int ScenarioConfig::kEmergencyStopConfigFieldNumber;
const int ScenarioConfig::kLearningModelSampleConfigFieldNumber;
const int ScenarioConfig::kNarrowStreetUTurnConfigFieldNumber;
const int ScenarioConfig::kParkAndGoConfigFieldNumber;
const int ScenarioConfig::kPullOverConfigFieldNumber;
const int ScenarioConfig::kStopSignUnprotectedConfigFieldNumber;
const int ScenarioConfig::kTrafficLightProtectedConfigFieldNumber;
const int ScenarioConfig::kTrafficLightUnprotectedLeftTurnConfigFieldNumber;
const int ScenarioConfig::kTrafficLightUnprotectedRightTurnConfigFieldNumber;
const int ScenarioConfig::kValetParkingConfigFieldNumber;
const int ScenarioConfig::kYieldSignConfigFieldNumber;
const int ScenarioConfig::kDeadendTurnaroundConfigFieldNumber;
const int ScenarioConfig::kStageTypeFieldNumber;
const int ScenarioConfig::kStageConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenarioConfig::ScenarioConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.ScenarioConfig)
}
ScenarioConfig::ScenarioConfig(const ScenarioConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      stage_type_(from.stage_type_),
      stage_config_(from.stage_config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scenario_type_ = from.scenario_type_;
  clear_has_scenario_config();
  switch (from.scenario_config_case()) {
    case kLaneFollowConfig: {
      mutable_lane_follow_config()->::apollo::planning::ScenarioLaneFollowConfig::MergeFrom(from.lane_follow_config());
      break;
    }
    case kBareIntersectionUnprotectedConfig: {
      mutable_bare_intersection_unprotected_config()->::apollo::planning::ScenarioBareIntersectionUnprotectedConfig::MergeFrom(from.bare_intersection_unprotected_config());
      break;
    }
    case kEmergencyPullOverConfig: {
      mutable_emergency_pull_over_config()->::apollo::planning::ScenarioEmergencyPullOverConfig::MergeFrom(from.emergency_pull_over_config());
      break;
    }
    case kEmergencyStopConfig: {
      mutable_emergency_stop_config()->::apollo::planning::ScenarioEmergencyStopConfig::MergeFrom(from.emergency_stop_config());
      break;
    }
    case kLearningModelSampleConfig: {
      mutable_learning_model_sample_config()->::apollo::planning::ScenarioLearningModelSampleConfig::MergeFrom(from.learning_model_sample_config());
      break;
    }
    case kNarrowStreetUTurnConfig: {
      mutable_narrow_street_u_turn_config()->::apollo::planning::ScenarioNarrowStreetUTurnConfig::MergeFrom(from.narrow_street_u_turn_config());
      break;
    }
    case kParkAndGoConfig: {
      mutable_park_and_go_config()->::apollo::planning::ScenarioParkAndGoConfig::MergeFrom(from.park_and_go_config());
      break;
    }
    case kPullOverConfig: {
      mutable_pull_over_config()->::apollo::planning::ScenarioPullOverConfig::MergeFrom(from.pull_over_config());
      break;
    }
    case kStopSignUnprotectedConfig: {
      mutable_stop_sign_unprotected_config()->::apollo::planning::ScenarioStopSignUnprotectedConfig::MergeFrom(from.stop_sign_unprotected_config());
      break;
    }
    case kTrafficLightProtectedConfig: {
      mutable_traffic_light_protected_config()->::apollo::planning::ScenarioTrafficLightProtectedConfig::MergeFrom(from.traffic_light_protected_config());
      break;
    }
    case kTrafficLightUnprotectedLeftTurnConfig: {
      mutable_traffic_light_unprotected_left_turn_config()->::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig::MergeFrom(from.traffic_light_unprotected_left_turn_config());
      break;
    }
    case kTrafficLightUnprotectedRightTurnConfig: {
      mutable_traffic_light_unprotected_right_turn_config()->::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig::MergeFrom(from.traffic_light_unprotected_right_turn_config());
      break;
    }
    case kValetParkingConfig: {
      mutable_valet_parking_config()->::apollo::planning::ScenarioValetParkingConfig::MergeFrom(from.valet_parking_config());
      break;
    }
    case kYieldSignConfig: {
      mutable_yield_sign_config()->::apollo::planning::ScenarioYieldSignConfig::MergeFrom(from.yield_sign_config());
      break;
    }
    case kDeadendTurnaroundConfig: {
      mutable_deadend_turnaround_config()->::apollo::planning::ScenarioDeadEndTurnAroundConfig::MergeFrom(from.deadend_turnaround_config());
      break;
    }
    case SCENARIO_CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.ScenarioConfig)
}

void ScenarioConfig::SharedCtor() {
  scenario_type_ = 0;
  clear_has_scenario_config();
}

ScenarioConfig::~ScenarioConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.ScenarioConfig)
  SharedDtor();
}

void ScenarioConfig::SharedDtor() {
  if (has_scenario_config()) {
    clear_scenario_config();
  }
}

void ScenarioConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ScenarioConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenarioConfig& ScenarioConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_ScenarioConfig.base);
  return *internal_default_instance();
}


void ScenarioConfig::clear_scenario_config() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.ScenarioConfig)
  switch (scenario_config_case()) {
    case kLaneFollowConfig: {
      delete scenario_config_.lane_follow_config_;
      break;
    }
    case kBareIntersectionUnprotectedConfig: {
      delete scenario_config_.bare_intersection_unprotected_config_;
      break;
    }
    case kEmergencyPullOverConfig: {
      delete scenario_config_.emergency_pull_over_config_;
      break;
    }
    case kEmergencyStopConfig: {
      delete scenario_config_.emergency_stop_config_;
      break;
    }
    case kLearningModelSampleConfig: {
      delete scenario_config_.learning_model_sample_config_;
      break;
    }
    case kNarrowStreetUTurnConfig: {
      delete scenario_config_.narrow_street_u_turn_config_;
      break;
    }
    case kParkAndGoConfig: {
      delete scenario_config_.park_and_go_config_;
      break;
    }
    case kPullOverConfig: {
      delete scenario_config_.pull_over_config_;
      break;
    }
    case kStopSignUnprotectedConfig: {
      delete scenario_config_.stop_sign_unprotected_config_;
      break;
    }
    case kTrafficLightProtectedConfig: {
      delete scenario_config_.traffic_light_protected_config_;
      break;
    }
    case kTrafficLightUnprotectedLeftTurnConfig: {
      delete scenario_config_.traffic_light_unprotected_left_turn_config_;
      break;
    }
    case kTrafficLightUnprotectedRightTurnConfig: {
      delete scenario_config_.traffic_light_unprotected_right_turn_config_;
      break;
    }
    case kValetParkingConfig: {
      delete scenario_config_.valet_parking_config_;
      break;
    }
    case kYieldSignConfig: {
      delete scenario_config_.yield_sign_config_;
      break;
    }
    case kDeadendTurnaroundConfig: {
      delete scenario_config_.deadend_turnaround_config_;
      break;
    }
    case SCENARIO_CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SCENARIO_CONFIG_NOT_SET;
}


void ScenarioConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.ScenarioConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stage_type_.Clear();
  stage_config_.Clear();
  scenario_type_ = 0;
  clear_scenario_config();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ScenarioConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.ScenarioConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::ScenarioConfig_ScenarioType_IsValid(value)) {
            set_scenario_type(static_cast< ::apollo::planning::ScenarioConfig_ScenarioType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ScenarioLaneFollowConfig lane_follow_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_follow_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ScenarioBareIntersectionUnprotectedConfig bare_intersection_unprotected_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bare_intersection_unprotected_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ScenarioEmergencyPullOverConfig emergency_pull_over_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_emergency_pull_over_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ScenarioEmergencyStopConfig emergency_stop_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_emergency_stop_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ScenarioLearningModelSampleConfig learning_model_sample_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_learning_model_sample_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ScenarioNarrowStreetUTurnConfig narrow_street_u_turn_config = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_narrow_street_u_turn_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ScenarioParkAndGoConfig park_and_go_config = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_park_and_go_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ScenarioPullOverConfig pull_over_config = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pull_over_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ScenarioStopSignUnprotectedConfig stop_sign_unprotected_config = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_sign_unprotected_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ScenarioTrafficLightProtectedConfig traffic_light_protected_config = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_traffic_light_protected_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig traffic_light_unprotected_left_turn_config = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_traffic_light_unprotected_left_turn_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig traffic_light_unprotected_right_turn_config = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_traffic_light_unprotected_right_turn_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ScenarioValetParkingConfig valet_parking_config = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_valet_parking_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ScenarioYieldSignConfig yield_sign_config = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yield_sign_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.ScenarioConfig.StageType stage_type = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::ScenarioConfig_StageType_IsValid(value)) {
            add_stage_type(static_cast< ::apollo::planning::ScenarioConfig_StageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                16, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 16,
                 ::apollo::planning::ScenarioConfig_StageType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_stage_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.ScenarioConfig.StageConfig stage_config = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stage_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.ScenarioDeadEndTurnAroundConfig deadend_turnaround_config = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deadend_turnaround_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.ScenarioConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.ScenarioConfig)
  return false;
#undef DO_
}

void ScenarioConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.ScenarioConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->scenario_type(), output);
  }

  switch (scenario_config_case()) {
    case kLaneFollowConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_lane_follow_config(), output);
      break;
    case kBareIntersectionUnprotectedConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_bare_intersection_unprotected_config(), output);
      break;
    case kEmergencyPullOverConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_emergency_pull_over_config(), output);
      break;
    case kEmergencyStopConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_emergency_stop_config(), output);
      break;
    case kLearningModelSampleConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, this->_internal_learning_model_sample_config(), output);
      break;
    case kNarrowStreetUTurnConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, this->_internal_narrow_street_u_turn_config(), output);
      break;
    case kParkAndGoConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, this->_internal_park_and_go_config(), output);
      break;
    case kPullOverConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, this->_internal_pull_over_config(), output);
      break;
    case kStopSignUnprotectedConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, this->_internal_stop_sign_unprotected_config(), output);
      break;
    case kTrafficLightProtectedConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, this->_internal_traffic_light_protected_config(), output);
      break;
    case kTrafficLightUnprotectedLeftTurnConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, this->_internal_traffic_light_unprotected_left_turn_config(), output);
      break;
    case kTrafficLightUnprotectedRightTurnConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, this->_internal_traffic_light_unprotected_right_turn_config(), output);
      break;
    case kValetParkingConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        14, this->_internal_valet_parking_config(), output);
      break;
    case kYieldSignConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        15, this->_internal_yield_sign_config(), output);
      break;
    default: ;
  }
  // repeated .apollo.planning.ScenarioConfig.StageType stage_type = 16;
  for (int i = 0, n = this->stage_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->stage_type(i), output);
  }

  // repeated .apollo.planning.ScenarioConfig.StageConfig stage_config = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stage_config_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17,
      this->stage_config(static_cast<int>(i)),
      output);
  }

  // optional .apollo.planning.ScenarioDeadEndTurnAroundConfig deadend_turnaround_config = 18;
  if (has_deadend_turnaround_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_internal_deadend_turnaround_config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.ScenarioConfig)
}

::google::protobuf::uint8* ScenarioConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.ScenarioConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->scenario_type(), target);
  }

  switch (scenario_config_case()) {
    case kLaneFollowConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_lane_follow_config(), deterministic, target);
      break;
    case kBareIntersectionUnprotectedConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_bare_intersection_unprotected_config(), deterministic, target);
      break;
    case kEmergencyPullOverConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_emergency_pull_over_config(), deterministic, target);
      break;
    case kEmergencyStopConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_emergency_stop_config(), deterministic, target);
      break;
    case kLearningModelSampleConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, this->_internal_learning_model_sample_config(), deterministic, target);
      break;
    case kNarrowStreetUTurnConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, this->_internal_narrow_street_u_turn_config(), deterministic, target);
      break;
    case kParkAndGoConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, this->_internal_park_and_go_config(), deterministic, target);
      break;
    case kPullOverConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          9, this->_internal_pull_over_config(), deterministic, target);
      break;
    case kStopSignUnprotectedConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          10, this->_internal_stop_sign_unprotected_config(), deterministic, target);
      break;
    case kTrafficLightProtectedConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          11, this->_internal_traffic_light_protected_config(), deterministic, target);
      break;
    case kTrafficLightUnprotectedLeftTurnConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          12, this->_internal_traffic_light_unprotected_left_turn_config(), deterministic, target);
      break;
    case kTrafficLightUnprotectedRightTurnConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          13, this->_internal_traffic_light_unprotected_right_turn_config(), deterministic, target);
      break;
    case kValetParkingConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          14, this->_internal_valet_parking_config(), deterministic, target);
      break;
    case kYieldSignConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          15, this->_internal_yield_sign_config(), deterministic, target);
      break;
    default: ;
  }
  // repeated .apollo.planning.ScenarioConfig.StageType stage_type = 16;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    16, this->stage_type_, target);

  // repeated .apollo.planning.ScenarioConfig.StageConfig stage_config = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stage_config_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->stage_config(static_cast<int>(i)), deterministic, target);
  }

  // optional .apollo.planning.ScenarioDeadEndTurnAroundConfig deadend_turnaround_config = 18;
  if (has_deadend_turnaround_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->_internal_deadend_turnaround_config(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.ScenarioConfig)
  return target;
}

size_t ScenarioConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.ScenarioConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.ScenarioConfig.StageType stage_type = 16;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->stage_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->stage_type(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .apollo.planning.ScenarioConfig.StageConfig stage_config = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->stage_config_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stage_config(static_cast<int>(i)));
    }
  }

  // optional .apollo.planning.ScenarioConfig.ScenarioType scenario_type = 1;
  if (has_scenario_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scenario_type());
  }

  switch (scenario_config_case()) {
    // optional .apollo.planning.ScenarioLaneFollowConfig lane_follow_config = 2;
    case kLaneFollowConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *scenario_config_.lane_follow_config_);
      break;
    }
    // optional .apollo.planning.ScenarioBareIntersectionUnprotectedConfig bare_intersection_unprotected_config = 3;
    case kBareIntersectionUnprotectedConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *scenario_config_.bare_intersection_unprotected_config_);
      break;
    }
    // optional .apollo.planning.ScenarioEmergencyPullOverConfig emergency_pull_over_config = 4;
    case kEmergencyPullOverConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *scenario_config_.emergency_pull_over_config_);
      break;
    }
    // optional .apollo.planning.ScenarioEmergencyStopConfig emergency_stop_config = 5;
    case kEmergencyStopConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *scenario_config_.emergency_stop_config_);
      break;
    }
    // optional .apollo.planning.ScenarioLearningModelSampleConfig learning_model_sample_config = 6;
    case kLearningModelSampleConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *scenario_config_.learning_model_sample_config_);
      break;
    }
    // optional .apollo.planning.ScenarioNarrowStreetUTurnConfig narrow_street_u_turn_config = 7;
    case kNarrowStreetUTurnConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *scenario_config_.narrow_street_u_turn_config_);
      break;
    }
    // optional .apollo.planning.ScenarioParkAndGoConfig park_and_go_config = 8;
    case kParkAndGoConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *scenario_config_.park_and_go_config_);
      break;
    }
    // optional .apollo.planning.ScenarioPullOverConfig pull_over_config = 9;
    case kPullOverConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *scenario_config_.pull_over_config_);
      break;
    }
    // optional .apollo.planning.ScenarioStopSignUnprotectedConfig stop_sign_unprotected_config = 10;
    case kStopSignUnprotectedConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *scenario_config_.stop_sign_unprotected_config_);
      break;
    }
    // optional .apollo.planning.ScenarioTrafficLightProtectedConfig traffic_light_protected_config = 11;
    case kTrafficLightProtectedConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *scenario_config_.traffic_light_protected_config_);
      break;
    }
    // optional .apollo.planning.ScenarioTrafficLightUnprotectedLeftTurnConfig traffic_light_unprotected_left_turn_config = 12;
    case kTrafficLightUnprotectedLeftTurnConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *scenario_config_.traffic_light_unprotected_left_turn_config_);
      break;
    }
    // optional .apollo.planning.ScenarioTrafficLightUnprotectedRightTurnConfig traffic_light_unprotected_right_turn_config = 13;
    case kTrafficLightUnprotectedRightTurnConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *scenario_config_.traffic_light_unprotected_right_turn_config_);
      break;
    }
    // optional .apollo.planning.ScenarioValetParkingConfig valet_parking_config = 14;
    case kValetParkingConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *scenario_config_.valet_parking_config_);
      break;
    }
    // optional .apollo.planning.ScenarioYieldSignConfig yield_sign_config = 15;
    case kYieldSignConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *scenario_config_.yield_sign_config_);
      break;
    }
    // optional .apollo.planning.ScenarioDeadEndTurnAroundConfig deadend_turnaround_config = 18;
    case kDeadendTurnaroundConfig: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *scenario_config_.deadend_turnaround_config_);
      break;
    }
    case SCENARIO_CONFIG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScenarioConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.ScenarioConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenarioConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenarioConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.ScenarioConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.ScenarioConfig)
    MergeFrom(*source);
  }
}

void ScenarioConfig::MergeFrom(const ScenarioConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.ScenarioConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stage_type_.MergeFrom(from.stage_type_);
  stage_config_.MergeFrom(from.stage_config_);
  if (from.has_scenario_type()) {
    set_scenario_type(from.scenario_type());
  }
  switch (from.scenario_config_case()) {
    case kLaneFollowConfig: {
      mutable_lane_follow_config()->::apollo::planning::ScenarioLaneFollowConfig::MergeFrom(from.lane_follow_config());
      break;
    }
    case kBareIntersectionUnprotectedConfig: {
      mutable_bare_intersection_unprotected_config()->::apollo::planning::ScenarioBareIntersectionUnprotectedConfig::MergeFrom(from.bare_intersection_unprotected_config());
      break;
    }
    case kEmergencyPullOverConfig: {
      mutable_emergency_pull_over_config()->::apollo::planning::ScenarioEmergencyPullOverConfig::MergeFrom(from.emergency_pull_over_config());
      break;
    }
    case kEmergencyStopConfig: {
      mutable_emergency_stop_config()->::apollo::planning::ScenarioEmergencyStopConfig::MergeFrom(from.emergency_stop_config());
      break;
    }
    case kLearningModelSampleConfig: {
      mutable_learning_model_sample_config()->::apollo::planning::ScenarioLearningModelSampleConfig::MergeFrom(from.learning_model_sample_config());
      break;
    }
    case kNarrowStreetUTurnConfig: {
      mutable_narrow_street_u_turn_config()->::apollo::planning::ScenarioNarrowStreetUTurnConfig::MergeFrom(from.narrow_street_u_turn_config());
      break;
    }
    case kParkAndGoConfig: {
      mutable_park_and_go_config()->::apollo::planning::ScenarioParkAndGoConfig::MergeFrom(from.park_and_go_config());
      break;
    }
    case kPullOverConfig: {
      mutable_pull_over_config()->::apollo::planning::ScenarioPullOverConfig::MergeFrom(from.pull_over_config());
      break;
    }
    case kStopSignUnprotectedConfig: {
      mutable_stop_sign_unprotected_config()->::apollo::planning::ScenarioStopSignUnprotectedConfig::MergeFrom(from.stop_sign_unprotected_config());
      break;
    }
    case kTrafficLightProtectedConfig: {
      mutable_traffic_light_protected_config()->::apollo::planning::ScenarioTrafficLightProtectedConfig::MergeFrom(from.traffic_light_protected_config());
      break;
    }
    case kTrafficLightUnprotectedLeftTurnConfig: {
      mutable_traffic_light_unprotected_left_turn_config()->::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig::MergeFrom(from.traffic_light_unprotected_left_turn_config());
      break;
    }
    case kTrafficLightUnprotectedRightTurnConfig: {
      mutable_traffic_light_unprotected_right_turn_config()->::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig::MergeFrom(from.traffic_light_unprotected_right_turn_config());
      break;
    }
    case kValetParkingConfig: {
      mutable_valet_parking_config()->::apollo::planning::ScenarioValetParkingConfig::MergeFrom(from.valet_parking_config());
      break;
    }
    case kYieldSignConfig: {
      mutable_yield_sign_config()->::apollo::planning::ScenarioYieldSignConfig::MergeFrom(from.yield_sign_config());
      break;
    }
    case kDeadendTurnaroundConfig: {
      mutable_deadend_turnaround_config()->::apollo::planning::ScenarioDeadEndTurnAroundConfig::MergeFrom(from.deadend_turnaround_config());
      break;
    }
    case SCENARIO_CONFIG_NOT_SET: {
      break;
    }
  }
}

void ScenarioConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.ScenarioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenarioConfig::CopyFrom(const ScenarioConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.ScenarioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenarioConfig::IsInitialized() const {
  return true;
}

void ScenarioConfig::Swap(ScenarioConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenarioConfig::InternalSwap(ScenarioConfig* other) {
  using std::swap;
  stage_type_.InternalSwap(&other->stage_type_);
  CastToBase(&stage_config_)->InternalSwap(CastToBase(&other->stage_config_));
  swap(scenario_type_, other->scenario_type_);
  swap(scenario_config_, other->scenario_config_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ScenarioConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlannerPublicRoadConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlannerPublicRoadConfig::PlannerPublicRoadConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_PlannerPublicRoadConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlannerPublicRoadConfig)
}
PlannerPublicRoadConfig::PlannerPublicRoadConfig(const PlannerPublicRoadConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlannerPublicRoadConfig)
}

void PlannerPublicRoadConfig::SharedCtor() {
}

PlannerPublicRoadConfig::~PlannerPublicRoadConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlannerPublicRoadConfig)
  SharedDtor();
}

void PlannerPublicRoadConfig::SharedDtor() {
}

void PlannerPublicRoadConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlannerPublicRoadConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlannerPublicRoadConfig& PlannerPublicRoadConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_PlannerPublicRoadConfig.base);
  return *internal_default_instance();
}


void PlannerPublicRoadConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlannerPublicRoadConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlannerPublicRoadConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PlannerPublicRoadConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PlannerPublicRoadConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PlannerPublicRoadConfig)
  return false;
#undef DO_
}

void PlannerPublicRoadConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PlannerPublicRoadConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PlannerPublicRoadConfig)
}

::google::protobuf::uint8* PlannerPublicRoadConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlannerPublicRoadConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlannerPublicRoadConfig)
  return target;
}

size_t PlannerPublicRoadConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlannerPublicRoadConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlannerPublicRoadConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlannerPublicRoadConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PlannerPublicRoadConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlannerPublicRoadConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlannerPublicRoadConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlannerPublicRoadConfig)
    MergeFrom(*source);
  }
}

void PlannerPublicRoadConfig::MergeFrom(const PlannerPublicRoadConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlannerPublicRoadConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PlannerPublicRoadConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlannerPublicRoadConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannerPublicRoadConfig::CopyFrom(const PlannerPublicRoadConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlannerPublicRoadConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerPublicRoadConfig::IsInitialized() const {
  return true;
}

void PlannerPublicRoadConfig::Swap(PlannerPublicRoadConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlannerPublicRoadConfig::InternalSwap(PlannerPublicRoadConfig* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlannerPublicRoadConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlannerNaviConfig::InitAsDefaultInstance() {
  ::apollo::planning::_PlannerNaviConfig_default_instance_._instance.get_mutable()->navi_path_decider_config_ = const_cast< ::apollo::planning::NaviPathDeciderConfig*>(
      ::apollo::planning::NaviPathDeciderConfig::internal_default_instance());
  ::apollo::planning::_PlannerNaviConfig_default_instance_._instance.get_mutable()->navi_speed_decider_config_ = const_cast< ::apollo::planning::NaviSpeedDeciderConfig*>(
      ::apollo::planning::NaviSpeedDeciderConfig::internal_default_instance());
  ::apollo::planning::_PlannerNaviConfig_default_instance_._instance.get_mutable()->navi_obstacle_decider_config_ = const_cast< ::apollo::planning::NaviObstacleDeciderConfig*>(
      ::apollo::planning::NaviObstacleDeciderConfig::internal_default_instance());
}
void PlannerNaviConfig::clear_navi_path_decider_config() {
  if (navi_path_decider_config_ != NULL) navi_path_decider_config_->Clear();
  clear_has_navi_path_decider_config();
}
void PlannerNaviConfig::clear_navi_speed_decider_config() {
  if (navi_speed_decider_config_ != NULL) navi_speed_decider_config_->Clear();
  clear_has_navi_speed_decider_config();
}
void PlannerNaviConfig::clear_navi_obstacle_decider_config() {
  if (navi_obstacle_decider_config_ != NULL) navi_obstacle_decider_config_->Clear();
  clear_has_navi_obstacle_decider_config();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlannerNaviConfig::kTaskFieldNumber;
const int PlannerNaviConfig::kNaviPathDeciderConfigFieldNumber;
const int PlannerNaviConfig::kNaviSpeedDeciderConfigFieldNumber;
const int PlannerNaviConfig::kNaviObstacleDeciderConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlannerNaviConfig::PlannerNaviConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_PlannerNaviConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlannerNaviConfig)
}
PlannerNaviConfig::PlannerNaviConfig(const PlannerNaviConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      task_(from.task_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_navi_path_decider_config()) {
    navi_path_decider_config_ = new ::apollo::planning::NaviPathDeciderConfig(*from.navi_path_decider_config_);
  } else {
    navi_path_decider_config_ = NULL;
  }
  if (from.has_navi_speed_decider_config()) {
    navi_speed_decider_config_ = new ::apollo::planning::NaviSpeedDeciderConfig(*from.navi_speed_decider_config_);
  } else {
    navi_speed_decider_config_ = NULL;
  }
  if (from.has_navi_obstacle_decider_config()) {
    navi_obstacle_decider_config_ = new ::apollo::planning::NaviObstacleDeciderConfig(*from.navi_obstacle_decider_config_);
  } else {
    navi_obstacle_decider_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlannerNaviConfig)
}

void PlannerNaviConfig::SharedCtor() {
  ::memset(&navi_path_decider_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&navi_obstacle_decider_config_) -
      reinterpret_cast<char*>(&navi_path_decider_config_)) + sizeof(navi_obstacle_decider_config_));
}

PlannerNaviConfig::~PlannerNaviConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlannerNaviConfig)
  SharedDtor();
}

void PlannerNaviConfig::SharedDtor() {
  if (this != internal_default_instance()) delete navi_path_decider_config_;
  if (this != internal_default_instance()) delete navi_speed_decider_config_;
  if (this != internal_default_instance()) delete navi_obstacle_decider_config_;
}

void PlannerNaviConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlannerNaviConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlannerNaviConfig& PlannerNaviConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_PlannerNaviConfig.base);
  return *internal_default_instance();
}


void PlannerNaviConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlannerNaviConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(navi_path_decider_config_ != NULL);
      navi_path_decider_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(navi_speed_decider_config_ != NULL);
      navi_speed_decider_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(navi_obstacle_decider_config_ != NULL);
      navi_obstacle_decider_config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlannerNaviConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PlannerNaviConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.TaskConfig.TaskType task = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::TaskConfig_TaskType_IsValid(value)) {
            add_task(static_cast< ::apollo::planning::TaskConfig_TaskType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::apollo::planning::TaskConfig_TaskType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_task())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_navi_path_decider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_navi_speed_decider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_navi_obstacle_decider_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PlannerNaviConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PlannerNaviConfig)
  return false;
#undef DO_
}

void PlannerNaviConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PlannerNaviConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.TaskConfig.TaskType task = 1;
  for (int i = 0, n = this->task_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->task(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_navi_path_decider_config(), output);
  }

  // optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_navi_speed_decider_config(), output);
  }

  // optional .apollo.planning.NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_navi_obstacle_decider_config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PlannerNaviConfig)
}

::google::protobuf::uint8* PlannerNaviConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlannerNaviConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.TaskConfig.TaskType task = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->task_, target);

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_navi_path_decider_config(), deterministic, target);
  }

  // optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_navi_speed_decider_config(), deterministic, target);
  }

  // optional .apollo.planning.NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_navi_obstacle_decider_config(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlannerNaviConfig)
  return target;
}

size_t PlannerNaviConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlannerNaviConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.TaskConfig.TaskType task = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->task_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->task(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.planning.NaviPathDeciderConfig navi_path_decider_config = 2;
    if (has_navi_path_decider_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *navi_path_decider_config_);
    }

    // optional .apollo.planning.NaviSpeedDeciderConfig navi_speed_decider_config = 3;
    if (has_navi_speed_decider_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *navi_speed_decider_config_);
    }

    // optional .apollo.planning.NaviObstacleDeciderConfig navi_obstacle_decider_config = 4;
    if (has_navi_obstacle_decider_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *navi_obstacle_decider_config_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlannerNaviConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlannerNaviConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PlannerNaviConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlannerNaviConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlannerNaviConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlannerNaviConfig)
    MergeFrom(*source);
  }
}

void PlannerNaviConfig::MergeFrom(const PlannerNaviConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlannerNaviConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  task_.MergeFrom(from.task_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_navi_path_decider_config()->::apollo::planning::NaviPathDeciderConfig::MergeFrom(from.navi_path_decider_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_navi_speed_decider_config()->::apollo::planning::NaviSpeedDeciderConfig::MergeFrom(from.navi_speed_decider_config());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_navi_obstacle_decider_config()->::apollo::planning::NaviObstacleDeciderConfig::MergeFrom(from.navi_obstacle_decider_config());
    }
  }
}

void PlannerNaviConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlannerNaviConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlannerNaviConfig::CopyFrom(const PlannerNaviConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlannerNaviConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerNaviConfig::IsInitialized() const {
  return true;
}

void PlannerNaviConfig::Swap(PlannerNaviConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlannerNaviConfig::InternalSwap(PlannerNaviConfig* other) {
  using std::swap;
  task_.InternalSwap(&other->task_);
  swap(navi_path_decider_config_, other->navi_path_decider_config_);
  swap(navi_speed_decider_config_, other->navi_speed_decider_config_);
  swap(navi_obstacle_decider_config_, other->navi_obstacle_decider_config_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlannerNaviConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RtkPlanningConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RtkPlanningConfig::kPlannerTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RtkPlanningConfig::RtkPlanningConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_RtkPlanningConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.RtkPlanningConfig)
}
RtkPlanningConfig::RtkPlanningConfig(const RtkPlanningConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  planner_type_ = from.planner_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.planning.RtkPlanningConfig)
}

void RtkPlanningConfig::SharedCtor() {
  planner_type_ = 0;
}

RtkPlanningConfig::~RtkPlanningConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.RtkPlanningConfig)
  SharedDtor();
}

void RtkPlanningConfig::SharedDtor() {
}

void RtkPlanningConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RtkPlanningConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RtkPlanningConfig& RtkPlanningConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_RtkPlanningConfig.base);
  return *internal_default_instance();
}


void RtkPlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.RtkPlanningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  planner_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RtkPlanningConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.RtkPlanningConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.PlannerType planner_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::PlannerType_IsValid(value)) {
            set_planner_type(static_cast< ::apollo::planning::PlannerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.RtkPlanningConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.RtkPlanningConfig)
  return false;
#undef DO_
}

void RtkPlanningConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.RtkPlanningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.PlannerType planner_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->planner_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.RtkPlanningConfig)
}

::google::protobuf::uint8* RtkPlanningConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.RtkPlanningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.PlannerType planner_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->planner_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.RtkPlanningConfig)
  return target;
}

size_t RtkPlanningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.RtkPlanningConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .apollo.planning.PlannerType planner_type = 1;
  if (has_planner_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->planner_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RtkPlanningConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.RtkPlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RtkPlanningConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RtkPlanningConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.RtkPlanningConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.RtkPlanningConfig)
    MergeFrom(*source);
  }
}

void RtkPlanningConfig::MergeFrom(const RtkPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.RtkPlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_planner_type()) {
    set_planner_type(from.planner_type());
  }
}

void RtkPlanningConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.RtkPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtkPlanningConfig::CopyFrom(const RtkPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.RtkPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtkPlanningConfig::IsInitialized() const {
  return true;
}

void RtkPlanningConfig::Swap(RtkPlanningConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RtkPlanningConfig::InternalSwap(RtkPlanningConfig* other) {
  using std::swap;
  swap(planner_type_, other->planner_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RtkPlanningConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StandardPlanningConfig::InitAsDefaultInstance() {
  ::apollo::planning::_StandardPlanningConfig_default_instance_._instance.get_mutable()->planner_public_road_config_ = const_cast< ::apollo::planning::PlannerPublicRoadConfig*>(
      ::apollo::planning::PlannerPublicRoadConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StandardPlanningConfig::kPlannerTypeFieldNumber;
const int StandardPlanningConfig::kPlannerPublicRoadConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StandardPlanningConfig::StandardPlanningConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_StandardPlanningConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.StandardPlanningConfig)
}
StandardPlanningConfig::StandardPlanningConfig(const StandardPlanningConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      planner_type_(from.planner_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_planner_public_road_config()) {
    planner_public_road_config_ = new ::apollo::planning::PlannerPublicRoadConfig(*from.planner_public_road_config_);
  } else {
    planner_public_road_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.StandardPlanningConfig)
}

void StandardPlanningConfig::SharedCtor() {
  planner_public_road_config_ = NULL;
}

StandardPlanningConfig::~StandardPlanningConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.StandardPlanningConfig)
  SharedDtor();
}

void StandardPlanningConfig::SharedDtor() {
  if (this != internal_default_instance()) delete planner_public_road_config_;
}

void StandardPlanningConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StandardPlanningConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StandardPlanningConfig& StandardPlanningConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_StandardPlanningConfig.base);
  return *internal_default_instance();
}


void StandardPlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.StandardPlanningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  planner_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(planner_public_road_config_ != NULL);
    planner_public_road_config_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StandardPlanningConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.StandardPlanningConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.PlannerType planner_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::PlannerType_IsValid(value)) {
            add_planner_type(static_cast< ::apollo::planning::PlannerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::apollo::planning::PlannerType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_planner_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PlannerPublicRoadConfig planner_public_road_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_planner_public_road_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.StandardPlanningConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.StandardPlanningConfig)
  return false;
#undef DO_
}

void StandardPlanningConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.StandardPlanningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.PlannerType planner_type = 1;
  for (int i = 0, n = this->planner_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->planner_type(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.PlannerPublicRoadConfig planner_public_road_config = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_planner_public_road_config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.StandardPlanningConfig)
}

::google::protobuf::uint8* StandardPlanningConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.StandardPlanningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.PlannerType planner_type = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->planner_type_, target);

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.PlannerPublicRoadConfig planner_public_road_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_planner_public_road_config(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.StandardPlanningConfig)
  return target;
}

size_t StandardPlanningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.StandardPlanningConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.PlannerType planner_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->planner_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->planner_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional .apollo.planning.PlannerPublicRoadConfig planner_public_road_config = 2;
  if (has_planner_public_road_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *planner_public_road_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StandardPlanningConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.StandardPlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const StandardPlanningConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StandardPlanningConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.StandardPlanningConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.StandardPlanningConfig)
    MergeFrom(*source);
  }
}

void StandardPlanningConfig::MergeFrom(const StandardPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.StandardPlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  planner_type_.MergeFrom(from.planner_type_);
  if (from.has_planner_public_road_config()) {
    mutable_planner_public_road_config()->::apollo::planning::PlannerPublicRoadConfig::MergeFrom(from.planner_public_road_config());
  }
}

void StandardPlanningConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.StandardPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StandardPlanningConfig::CopyFrom(const StandardPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.StandardPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StandardPlanningConfig::IsInitialized() const {
  return true;
}

void StandardPlanningConfig::Swap(StandardPlanningConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StandardPlanningConfig::InternalSwap(StandardPlanningConfig* other) {
  using std::swap;
  planner_type_.InternalSwap(&other->planner_type_);
  swap(planner_public_road_config_, other->planner_public_road_config_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StandardPlanningConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NavigationPlanningConfig::InitAsDefaultInstance() {
  ::apollo::planning::_NavigationPlanningConfig_default_instance_._instance.get_mutable()->planner_navi_config_ = const_cast< ::apollo::planning::PlannerNaviConfig*>(
      ::apollo::planning::PlannerNaviConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigationPlanningConfig::kPlannerTypeFieldNumber;
const int NavigationPlanningConfig::kPlannerNaviConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigationPlanningConfig::NavigationPlanningConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_NavigationPlanningConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.NavigationPlanningConfig)
}
NavigationPlanningConfig::NavigationPlanningConfig(const NavigationPlanningConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      planner_type_(from.planner_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_planner_navi_config()) {
    planner_navi_config_ = new ::apollo::planning::PlannerNaviConfig(*from.planner_navi_config_);
  } else {
    planner_navi_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.NavigationPlanningConfig)
}

void NavigationPlanningConfig::SharedCtor() {
  planner_navi_config_ = NULL;
}

NavigationPlanningConfig::~NavigationPlanningConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.NavigationPlanningConfig)
  SharedDtor();
}

void NavigationPlanningConfig::SharedDtor() {
  if (this != internal_default_instance()) delete planner_navi_config_;
}

void NavigationPlanningConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NavigationPlanningConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavigationPlanningConfig& NavigationPlanningConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_NavigationPlanningConfig.base);
  return *internal_default_instance();
}


void NavigationPlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.NavigationPlanningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  planner_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(planner_navi_config_ != NULL);
    planner_navi_config_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NavigationPlanningConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.NavigationPlanningConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.planning.PlannerType planner_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::PlannerType_IsValid(value)) {
            add_planner_type(static_cast< ::apollo::planning::PlannerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::apollo::planning::PlannerType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_planner_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_planner_navi_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.NavigationPlanningConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.NavigationPlanningConfig)
  return false;
#undef DO_
}

void NavigationPlanningConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.NavigationPlanningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.PlannerType planner_type = 1;
  for (int i = 0, n = this->planner_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->planner_type(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_planner_navi_config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.NavigationPlanningConfig)
}

::google::protobuf::uint8* NavigationPlanningConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.NavigationPlanningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.planning.PlannerType planner_type = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->planner_type_, target);

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_planner_navi_config(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.NavigationPlanningConfig)
  return target;
}

size_t NavigationPlanningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.NavigationPlanningConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.PlannerType planner_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->planner_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->planner_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional .apollo.planning.PlannerNaviConfig planner_navi_config = 4;
  if (has_planner_navi_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *planner_navi_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationPlanningConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.NavigationPlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationPlanningConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigationPlanningConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.NavigationPlanningConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.NavigationPlanningConfig)
    MergeFrom(*source);
  }
}

void NavigationPlanningConfig::MergeFrom(const NavigationPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.NavigationPlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  planner_type_.MergeFrom(from.planner_type_);
  if (from.has_planner_navi_config()) {
    mutable_planner_navi_config()->::apollo::planning::PlannerNaviConfig::MergeFrom(from.planner_navi_config());
  }
}

void NavigationPlanningConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.NavigationPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationPlanningConfig::CopyFrom(const NavigationPlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.NavigationPlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationPlanningConfig::IsInitialized() const {
  return true;
}

void NavigationPlanningConfig::Swap(NavigationPlanningConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavigationPlanningConfig::InternalSwap(NavigationPlanningConfig* other) {
  using std::swap;
  planner_type_.InternalSwap(&other->planner_type_);
  swap(planner_navi_config_, other->planner_navi_config_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NavigationPlanningConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TopicConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicConfig::kChassisTopicFieldNumber;
const int TopicConfig::kHmiStatusTopicFieldNumber;
const int TopicConfig::kLocalizationTopicFieldNumber;
const int TopicConfig::kPlanningPadTopicFieldNumber;
const int TopicConfig::kPlanningTrajectoryTopicFieldNumber;
const int TopicConfig::kPredictionTopicFieldNumber;
const int TopicConfig::kRelativeMapTopicFieldNumber;
const int TopicConfig::kRoutingRequestTopicFieldNumber;
const int TopicConfig::kRoutingResponseTopicFieldNumber;
const int TopicConfig::kStoryTellingTopicFieldNumber;
const int TopicConfig::kTrafficLightDetectionTopicFieldNumber;
const int TopicConfig::kPlanningLearningDataTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicConfig::TopicConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_TopicConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.TopicConfig)
}
TopicConfig::TopicConfig(const TopicConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chassis_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chassis_topic()) {
    chassis_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chassis_topic_);
  }
  hmi_status_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hmi_status_topic()) {
    hmi_status_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hmi_status_topic_);
  }
  localization_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_localization_topic()) {
    localization_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localization_topic_);
  }
  planning_pad_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_planning_pad_topic()) {
    planning_pad_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.planning_pad_topic_);
  }
  planning_trajectory_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_planning_trajectory_topic()) {
    planning_trajectory_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.planning_trajectory_topic_);
  }
  prediction_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prediction_topic()) {
    prediction_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prediction_topic_);
  }
  relative_map_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_relative_map_topic()) {
    relative_map_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relative_map_topic_);
  }
  routing_request_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_routing_request_topic()) {
    routing_request_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.routing_request_topic_);
  }
  routing_response_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_routing_response_topic()) {
    routing_response_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.routing_response_topic_);
  }
  story_telling_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_story_telling_topic()) {
    story_telling_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.story_telling_topic_);
  }
  traffic_light_detection_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_traffic_light_detection_topic()) {
    traffic_light_detection_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traffic_light_detection_topic_);
  }
  planning_learning_data_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_planning_learning_data_topic()) {
    planning_learning_data_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.planning_learning_data_topic_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.TopicConfig)
}

void TopicConfig::SharedCtor() {
  chassis_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hmi_status_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  localization_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  planning_pad_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  planning_trajectory_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prediction_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relative_map_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  routing_request_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  routing_response_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  story_telling_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_light_detection_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  planning_learning_data_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TopicConfig::~TopicConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.TopicConfig)
  SharedDtor();
}

void TopicConfig::SharedDtor() {
  chassis_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hmi_status_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  localization_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  planning_pad_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  planning_trajectory_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prediction_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relative_map_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  routing_request_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  routing_response_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  story_telling_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  traffic_light_detection_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  planning_learning_data_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TopicConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TopicConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TopicConfig& TopicConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_TopicConfig.base);
  return *internal_default_instance();
}


void TopicConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.TopicConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      chassis_topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      hmi_status_topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      localization_topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      planning_pad_topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      planning_trajectory_topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      prediction_topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      relative_map_topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      routing_request_topic_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      routing_response_topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      story_telling_topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000400u) {
      traffic_light_detection_topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000800u) {
      planning_learning_data_topic_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TopicConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.TopicConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string chassis_topic = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chassis_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chassis_topic().data(), static_cast<int>(this->chassis_topic().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.TopicConfig.chassis_topic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hmi_status_topic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hmi_status_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hmi_status_topic().data(), static_cast<int>(this->hmi_status_topic().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.TopicConfig.hmi_status_topic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string localization_topic = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localization_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->localization_topic().data(), static_cast<int>(this->localization_topic().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.TopicConfig.localization_topic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string planning_pad_topic = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planning_pad_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->planning_pad_topic().data(), static_cast<int>(this->planning_pad_topic().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.TopicConfig.planning_pad_topic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string planning_trajectory_topic = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planning_trajectory_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->planning_trajectory_topic().data(), static_cast<int>(this->planning_trajectory_topic().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.TopicConfig.planning_trajectory_topic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string prediction_topic = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prediction_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prediction_topic().data(), static_cast<int>(this->prediction_topic().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.TopicConfig.prediction_topic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string relative_map_topic = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relative_map_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->relative_map_topic().data(), static_cast<int>(this->relative_map_topic().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.TopicConfig.relative_map_topic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string routing_request_topic = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_routing_request_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->routing_request_topic().data(), static_cast<int>(this->routing_request_topic().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.TopicConfig.routing_request_topic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string routing_response_topic = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_routing_response_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->routing_response_topic().data(), static_cast<int>(this->routing_response_topic().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.TopicConfig.routing_response_topic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string story_telling_topic = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_story_telling_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->story_telling_topic().data(), static_cast<int>(this->story_telling_topic().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.TopicConfig.story_telling_topic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string traffic_light_detection_topic = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traffic_light_detection_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->traffic_light_detection_topic().data(), static_cast<int>(this->traffic_light_detection_topic().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.TopicConfig.traffic_light_detection_topic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string planning_learning_data_topic = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planning_learning_data_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->planning_learning_data_topic().data(), static_cast<int>(this->planning_learning_data_topic().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.planning.TopicConfig.planning_learning_data_topic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.TopicConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.TopicConfig)
  return false;
#undef DO_
}

void TopicConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.TopicConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string chassis_topic = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chassis_topic().data(), static_cast<int>(this->chassis_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.chassis_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->chassis_topic(), output);
  }

  // optional string hmi_status_topic = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hmi_status_topic().data(), static_cast<int>(this->hmi_status_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.hmi_status_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hmi_status_topic(), output);
  }

  // optional string localization_topic = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localization_topic().data(), static_cast<int>(this->localization_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.localization_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->localization_topic(), output);
  }

  // optional string planning_pad_topic = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planning_pad_topic().data(), static_cast<int>(this->planning_pad_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.planning_pad_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->planning_pad_topic(), output);
  }

  // optional string planning_trajectory_topic = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planning_trajectory_topic().data(), static_cast<int>(this->planning_trajectory_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.planning_trajectory_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->planning_trajectory_topic(), output);
  }

  // optional string prediction_topic = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prediction_topic().data(), static_cast<int>(this->prediction_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.prediction_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->prediction_topic(), output);
  }

  // optional string relative_map_topic = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relative_map_topic().data(), static_cast<int>(this->relative_map_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.relative_map_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->relative_map_topic(), output);
  }

  // optional string routing_request_topic = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->routing_request_topic().data(), static_cast<int>(this->routing_request_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.routing_request_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->routing_request_topic(), output);
  }

  // optional string routing_response_topic = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->routing_response_topic().data(), static_cast<int>(this->routing_response_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.routing_response_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->routing_response_topic(), output);
  }

  // optional string story_telling_topic = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->story_telling_topic().data(), static_cast<int>(this->story_telling_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.story_telling_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->story_telling_topic(), output);
  }

  // optional string traffic_light_detection_topic = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->traffic_light_detection_topic().data(), static_cast<int>(this->traffic_light_detection_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.traffic_light_detection_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->traffic_light_detection_topic(), output);
  }

  // optional string planning_learning_data_topic = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planning_learning_data_topic().data(), static_cast<int>(this->planning_learning_data_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.planning_learning_data_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->planning_learning_data_topic(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.TopicConfig)
}

::google::protobuf::uint8* TopicConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.TopicConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string chassis_topic = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chassis_topic().data(), static_cast<int>(this->chassis_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.chassis_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chassis_topic(), target);
  }

  // optional string hmi_status_topic = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hmi_status_topic().data(), static_cast<int>(this->hmi_status_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.hmi_status_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hmi_status_topic(), target);
  }

  // optional string localization_topic = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localization_topic().data(), static_cast<int>(this->localization_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.localization_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->localization_topic(), target);
  }

  // optional string planning_pad_topic = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planning_pad_topic().data(), static_cast<int>(this->planning_pad_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.planning_pad_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->planning_pad_topic(), target);
  }

  // optional string planning_trajectory_topic = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planning_trajectory_topic().data(), static_cast<int>(this->planning_trajectory_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.planning_trajectory_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->planning_trajectory_topic(), target);
  }

  // optional string prediction_topic = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prediction_topic().data(), static_cast<int>(this->prediction_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.prediction_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->prediction_topic(), target);
  }

  // optional string relative_map_topic = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->relative_map_topic().data(), static_cast<int>(this->relative_map_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.relative_map_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->relative_map_topic(), target);
  }

  // optional string routing_request_topic = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->routing_request_topic().data(), static_cast<int>(this->routing_request_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.routing_request_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->routing_request_topic(), target);
  }

  // optional string routing_response_topic = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->routing_response_topic().data(), static_cast<int>(this->routing_response_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.routing_response_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->routing_response_topic(), target);
  }

  // optional string story_telling_topic = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->story_telling_topic().data(), static_cast<int>(this->story_telling_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.story_telling_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->story_telling_topic(), target);
  }

  // optional string traffic_light_detection_topic = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->traffic_light_detection_topic().data(), static_cast<int>(this->traffic_light_detection_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.traffic_light_detection_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->traffic_light_detection_topic(), target);
  }

  // optional string planning_learning_data_topic = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->planning_learning_data_topic().data(), static_cast<int>(this->planning_learning_data_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.planning.TopicConfig.planning_learning_data_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->planning_learning_data_topic(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.TopicConfig)
  return target;
}

size_t TopicConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.TopicConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string chassis_topic = 1;
    if (has_chassis_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chassis_topic());
    }

    // optional string hmi_status_topic = 2;
    if (has_hmi_status_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hmi_status_topic());
    }

    // optional string localization_topic = 3;
    if (has_localization_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localization_topic());
    }

    // optional string planning_pad_topic = 4;
    if (has_planning_pad_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planning_pad_topic());
    }

    // optional string planning_trajectory_topic = 5;
    if (has_planning_trajectory_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planning_trajectory_topic());
    }

    // optional string prediction_topic = 6;
    if (has_prediction_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prediction_topic());
    }

    // optional string relative_map_topic = 7;
    if (has_relative_map_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relative_map_topic());
    }

    // optional string routing_request_topic = 8;
    if (has_routing_request_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->routing_request_topic());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional string routing_response_topic = 9;
    if (has_routing_response_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->routing_response_topic());
    }

    // optional string story_telling_topic = 10;
    if (has_story_telling_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->story_telling_topic());
    }

    // optional string traffic_light_detection_topic = 11;
    if (has_traffic_light_detection_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->traffic_light_detection_topic());
    }

    // optional string planning_learning_data_topic = 12;
    if (has_planning_learning_data_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planning_learning_data_topic());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.TopicConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.TopicConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.TopicConfig)
    MergeFrom(*source);
  }
}

void TopicConfig::MergeFrom(const TopicConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.TopicConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_chassis_topic();
      chassis_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chassis_topic_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hmi_status_topic();
      hmi_status_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hmi_status_topic_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_localization_topic();
      localization_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localization_topic_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_planning_pad_topic();
      planning_pad_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.planning_pad_topic_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_planning_trajectory_topic();
      planning_trajectory_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.planning_trajectory_topic_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_prediction_topic();
      prediction_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prediction_topic_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_relative_map_topic();
      relative_map_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relative_map_topic_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_routing_request_topic();
      routing_request_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.routing_request_topic_);
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_routing_response_topic();
      routing_response_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.routing_response_topic_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_story_telling_topic();
      story_telling_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.story_telling_topic_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_traffic_light_detection_topic();
      traffic_light_detection_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.traffic_light_detection_topic_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_planning_learning_data_topic();
      planning_learning_data_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.planning_learning_data_topic_);
    }
  }
}

void TopicConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.TopicConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicConfig::CopyFrom(const TopicConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.TopicConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicConfig::IsInitialized() const {
  return true;
}

void TopicConfig::Swap(TopicConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicConfig::InternalSwap(TopicConfig* other) {
  using std::swap;
  chassis_topic_.Swap(&other->chassis_topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hmi_status_topic_.Swap(&other->hmi_status_topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  localization_topic_.Swap(&other->localization_topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  planning_pad_topic_.Swap(&other->planning_pad_topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  planning_trajectory_topic_.Swap(&other->planning_trajectory_topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prediction_topic_.Swap(&other->prediction_topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  relative_map_topic_.Swap(&other->relative_map_topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  routing_request_topic_.Swap(&other->routing_request_topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  routing_response_topic_.Swap(&other->routing_response_topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  story_telling_topic_.Swap(&other->story_telling_topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  traffic_light_detection_topic_.Swap(&other->traffic_light_detection_topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  planning_learning_data_topic_.Swap(&other->planning_learning_data_topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TopicConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlanningConfig::InitAsDefaultInstance() {
  ::apollo::planning::_PlanningConfig_default_instance_._instance.get_mutable()->topic_config_ = const_cast< ::apollo::planning::TopicConfig*>(
      ::apollo::planning::TopicConfig::internal_default_instance());
  ::apollo::planning::_PlanningConfig_default_instance_.rtk_planning_config_ = const_cast< ::apollo::planning::RtkPlanningConfig*>(
      ::apollo::planning::RtkPlanningConfig::internal_default_instance());
  ::apollo::planning::_PlanningConfig_default_instance_.standard_planning_config_ = const_cast< ::apollo::planning::StandardPlanningConfig*>(
      ::apollo::planning::StandardPlanningConfig::internal_default_instance());
  ::apollo::planning::_PlanningConfig_default_instance_.navigation_planning_config_ = const_cast< ::apollo::planning::NavigationPlanningConfig*>(
      ::apollo::planning::NavigationPlanningConfig::internal_default_instance());
}
void PlanningConfig::set_allocated_rtk_planning_config(::apollo::planning::RtkPlanningConfig* rtk_planning_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_planning_config();
  if (rtk_planning_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rtk_planning_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rtk_planning_config, submessage_arena);
    }
    set_has_rtk_planning_config();
    planning_config_.rtk_planning_config_ = rtk_planning_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.rtk_planning_config)
}
void PlanningConfig::set_allocated_standard_planning_config(::apollo::planning::StandardPlanningConfig* standard_planning_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_planning_config();
  if (standard_planning_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      standard_planning_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, standard_planning_config, submessage_arena);
    }
    set_has_standard_planning_config();
    planning_config_.standard_planning_config_ = standard_planning_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.standard_planning_config)
}
void PlanningConfig::set_allocated_navigation_planning_config(::apollo::planning::NavigationPlanningConfig* navigation_planning_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_planning_config();
  if (navigation_planning_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      navigation_planning_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, navigation_planning_config, submessage_arena);
    }
    set_has_navigation_planning_config();
    planning_config_.navigation_planning_config_ = navigation_planning_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.PlanningConfig.navigation_planning_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanningConfig::kTopicConfigFieldNumber;
const int PlanningConfig::kLearningModeFieldNumber;
const int PlanningConfig::kRtkPlanningConfigFieldNumber;
const int PlanningConfig::kStandardPlanningConfigFieldNumber;
const int PlanningConfig::kNavigationPlanningConfigFieldNumber;
const int PlanningConfig::kDefaultTaskConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanningConfig::PlanningConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_PlanningConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.planning.PlanningConfig)
}
PlanningConfig::PlanningConfig(const PlanningConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      default_task_config_(from.default_task_config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_topic_config()) {
    topic_config_ = new ::apollo::planning::TopicConfig(*from.topic_config_);
  } else {
    topic_config_ = NULL;
  }
  learning_mode_ = from.learning_mode_;
  clear_has_planning_config();
  switch (from.planning_config_case()) {
    case kRtkPlanningConfig: {
      mutable_rtk_planning_config()->::apollo::planning::RtkPlanningConfig::MergeFrom(from.rtk_planning_config());
      break;
    }
    case kStandardPlanningConfig: {
      mutable_standard_planning_config()->::apollo::planning::StandardPlanningConfig::MergeFrom(from.standard_planning_config());
      break;
    }
    case kNavigationPlanningConfig: {
      mutable_navigation_planning_config()->::apollo::planning::NavigationPlanningConfig::MergeFrom(from.navigation_planning_config());
      break;
    }
    case PLANNING_CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.planning.PlanningConfig)
}

void PlanningConfig::SharedCtor() {
  ::memset(&topic_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&learning_mode_) -
      reinterpret_cast<char*>(&topic_config_)) + sizeof(learning_mode_));
  clear_has_planning_config();
}

PlanningConfig::~PlanningConfig() {
  // @@protoc_insertion_point(destructor:apollo.planning.PlanningConfig)
  SharedDtor();
}

void PlanningConfig::SharedDtor() {
  if (this != internal_default_instance()) delete topic_config_;
  if (has_planning_config()) {
    clear_planning_config();
  }
}

void PlanningConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlanningConfig::descriptor() {
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlanningConfig& PlanningConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::scc_info_PlanningConfig.base);
  return *internal_default_instance();
}


void PlanningConfig::clear_planning_config() {
// @@protoc_insertion_point(one_of_clear_start:apollo.planning.PlanningConfig)
  switch (planning_config_case()) {
    case kRtkPlanningConfig: {
      delete planning_config_.rtk_planning_config_;
      break;
    }
    case kStandardPlanningConfig: {
      delete planning_config_.standard_planning_config_;
      break;
    }
    case kNavigationPlanningConfig: {
      delete planning_config_.navigation_planning_config_;
      break;
    }
    case PLANNING_CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PLANNING_CONFIG_NOT_SET;
}


void PlanningConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.planning.PlanningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  default_task_config_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(topic_config_ != NULL);
    topic_config_->Clear();
  }
  learning_mode_ = 0;
  clear_planning_config();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlanningConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.planning.PlanningConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.planning.TopicConfig topic_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_topic_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.PlanningConfig.PlanningLearningMode learning_mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::planning::PlanningConfig_PlanningLearningMode_IsValid(value)) {
            set_learning_mode(static_cast< ::apollo::planning::PlanningConfig_PlanningLearningMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.RtkPlanningConfig rtk_planning_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rtk_planning_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.StandardPlanningConfig standard_planning_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_standard_planning_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning.NavigationPlanningConfig navigation_planning_config = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_navigation_planning_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.planning.TaskConfig default_task_config = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_default_task_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.planning.PlanningConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.planning.PlanningConfig)
  return false;
#undef DO_
}

void PlanningConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.planning.PlanningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.TopicConfig topic_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_topic_config(), output);
  }

  // optional .apollo.planning.PlanningConfig.PlanningLearningMode learning_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->learning_mode(), output);
  }

  switch (planning_config_case()) {
    case kRtkPlanningConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_rtk_planning_config(), output);
      break;
    case kStandardPlanningConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_standard_planning_config(), output);
      break;
    case kNavigationPlanningConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_navigation_planning_config(), output);
      break;
    default: ;
  }
  // repeated .apollo.planning.TaskConfig default_task_config = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->default_task_config_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->default_task_config(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.planning.PlanningConfig)
}

::google::protobuf::uint8* PlanningConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.planning.PlanningConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.planning.TopicConfig topic_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_topic_config(), deterministic, target);
  }

  // optional .apollo.planning.PlanningConfig.PlanningLearningMode learning_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->learning_mode(), target);
  }

  switch (planning_config_case()) {
    case kRtkPlanningConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_rtk_planning_config(), deterministic, target);
      break;
    case kStandardPlanningConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_standard_planning_config(), deterministic, target);
      break;
    case kNavigationPlanningConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_navigation_planning_config(), deterministic, target);
      break;
    default: ;
  }
  // repeated .apollo.planning.TaskConfig default_task_config = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->default_task_config_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->default_task_config(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.planning.PlanningConfig)
  return target;
}

size_t PlanningConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.planning.PlanningConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.planning.TaskConfig default_task_config = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->default_task_config_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->default_task_config(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.planning.TopicConfig topic_config = 1;
    if (has_topic_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *topic_config_);
    }

    // optional .apollo.planning.PlanningConfig.PlanningLearningMode learning_mode = 2;
    if (has_learning_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->learning_mode());
    }

  }
  switch (planning_config_case()) {
    // optional .apollo.planning.RtkPlanningConfig rtk_planning_config = 3;
    case kRtkPlanningConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *planning_config_.rtk_planning_config_);
      break;
    }
    // optional .apollo.planning.StandardPlanningConfig standard_planning_config = 4;
    case kStandardPlanningConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *planning_config_.standard_planning_config_);
      break;
    }
    // optional .apollo.planning.NavigationPlanningConfig navigation_planning_config = 5;
    case kNavigationPlanningConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *planning_config_.navigation_planning_config_);
      break;
    }
    case PLANNING_CONFIG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanningConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.planning.PlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanningConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanningConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.planning.PlanningConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.planning.PlanningConfig)
    MergeFrom(*source);
  }
}

void PlanningConfig::MergeFrom(const PlanningConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.planning.PlanningConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  default_task_config_.MergeFrom(from.default_task_config_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_topic_config()->::apollo::planning::TopicConfig::MergeFrom(from.topic_config());
    }
    if (cached_has_bits & 0x00000002u) {
      learning_mode_ = from.learning_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.planning_config_case()) {
    case kRtkPlanningConfig: {
      mutable_rtk_planning_config()->::apollo::planning::RtkPlanningConfig::MergeFrom(from.rtk_planning_config());
      break;
    }
    case kStandardPlanningConfig: {
      mutable_standard_planning_config()->::apollo::planning::StandardPlanningConfig::MergeFrom(from.standard_planning_config());
      break;
    }
    case kNavigationPlanningConfig: {
      mutable_navigation_planning_config()->::apollo::planning::NavigationPlanningConfig::MergeFrom(from.navigation_planning_config());
      break;
    }
    case PLANNING_CONFIG_NOT_SET: {
      break;
    }
  }
}

void PlanningConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.planning.PlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanningConfig::CopyFrom(const PlanningConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.planning.PlanningConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanningConfig::IsInitialized() const {
  return true;
}

void PlanningConfig::Swap(PlanningConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanningConfig::InternalSwap(PlanningConfig* other) {
  using std::swap;
  CastToBase(&default_task_config_)->InternalSwap(CastToBase(&other->default_task_config_));
  swap(topic_config_, other->topic_config_);
  swap(learning_mode_, other->learning_mode_);
  swap(planning_config_, other->planning_config_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlanningConfig::GetMetadata() const {
  protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fplanning_2fproto_2fplanning_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::TaskConfig* Arena::CreateMaybeMessage< ::apollo::planning::TaskConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::TaskConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioBareIntersectionUnprotectedConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ScenarioEmergencyPullOverConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioEmergencyPullOverConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioEmergencyPullOverConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ScenarioEmergencyStopConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioEmergencyStopConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioEmergencyStopConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ScenarioLaneFollowConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioLaneFollowConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioLaneFollowConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ScenarioLearningModelSampleConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioLearningModelSampleConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioLearningModelSampleConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ScenarioNarrowStreetUTurnConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioNarrowStreetUTurnConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioNarrowStreetUTurnConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ScenarioParkAndGoConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioParkAndGoConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioParkAndGoConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ScenarioPullOverConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioPullOverConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioPullOverConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ScenarioStopSignUnprotectedConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioStopSignUnprotectedConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioStopSignUnprotectedConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ScenarioTrafficLightProtectedConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioTrafficLightProtectedConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioTrafficLightProtectedConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioTrafficLightUnprotectedLeftTurnConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioTrafficLightUnprotectedRightTurnConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ScenarioValetParkingConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioValetParkingConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioValetParkingConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ScenarioDeadEndTurnAroundConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioDeadEndTurnAroundConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioDeadEndTurnAroundConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ScenarioYieldSignConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioYieldSignConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioYieldSignConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ScenarioConfig_StageConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioConfig_StageConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioConfig_StageConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::ScenarioConfig* Arena::CreateMaybeMessage< ::apollo::planning::ScenarioConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::ScenarioConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PlannerPublicRoadConfig* Arena::CreateMaybeMessage< ::apollo::planning::PlannerPublicRoadConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PlannerPublicRoadConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PlannerNaviConfig* Arena::CreateMaybeMessage< ::apollo::planning::PlannerNaviConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PlannerNaviConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::RtkPlanningConfig* Arena::CreateMaybeMessage< ::apollo::planning::RtkPlanningConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::RtkPlanningConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::StandardPlanningConfig* Arena::CreateMaybeMessage< ::apollo::planning::StandardPlanningConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::StandardPlanningConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::NavigationPlanningConfig* Arena::CreateMaybeMessage< ::apollo::planning::NavigationPlanningConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::NavigationPlanningConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::TopicConfig* Arena::CreateMaybeMessage< ::apollo::planning::TopicConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::TopicConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::planning::PlanningConfig* Arena::CreateMaybeMessage< ::apollo::planning::PlanningConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::planning::PlanningConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
