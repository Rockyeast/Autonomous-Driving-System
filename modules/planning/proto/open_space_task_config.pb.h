// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/planning/proto/open_space_task_config.proto

#ifndef PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto
#define PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/planning/proto/planner_open_space_config.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto 

namespace protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto
namespace apollo {
namespace planning {
class DistanceApproachTrajectorySmootherConfig;
class DistanceApproachTrajectorySmootherConfigDefaultTypeInternal;
extern DistanceApproachTrajectorySmootherConfigDefaultTypeInternal _DistanceApproachTrajectorySmootherConfig_default_instance_;
class DualVariableConfig;
class DualVariableConfigDefaultTypeInternal;
extern DualVariableConfigDefaultTypeInternal _DualVariableConfig_default_instance_;
class HybridAStarConfig;
class HybridAStarConfigDefaultTypeInternal;
extern HybridAStarConfigDefaultTypeInternal _HybridAStarConfig_default_instance_;
class IpoptSolverConfig;
class IpoptSolverConfigDefaultTypeInternal;
extern IpoptSolverConfigDefaultTypeInternal _IpoptSolverConfig_default_instance_;
class OpenSpaceFallBackDeciderConfig;
class OpenSpaceFallBackDeciderConfigDefaultTypeInternal;
extern OpenSpaceFallBackDeciderConfigDefaultTypeInternal _OpenSpaceFallBackDeciderConfig_default_instance_;
class OpenSpacePreStopDeciderConfig;
class OpenSpacePreStopDeciderConfigDefaultTypeInternal;
extern OpenSpacePreStopDeciderConfigDefaultTypeInternal _OpenSpacePreStopDeciderConfig_default_instance_;
class OpenSpaceRoiDeciderConfig;
class OpenSpaceRoiDeciderConfigDefaultTypeInternal;
extern OpenSpaceRoiDeciderConfigDefaultTypeInternal _OpenSpaceRoiDeciderConfig_default_instance_;
class OpenSpaceTrajectoryOptimizerConfig;
class OpenSpaceTrajectoryOptimizerConfigDefaultTypeInternal;
extern OpenSpaceTrajectoryOptimizerConfigDefaultTypeInternal _OpenSpaceTrajectoryOptimizerConfig_default_instance_;
class OpenSpaceTrajectoryPartitionConfig;
class OpenSpaceTrajectoryPartitionConfigDefaultTypeInternal;
extern OpenSpaceTrajectoryPartitionConfigDefaultTypeInternal _OpenSpaceTrajectoryPartitionConfig_default_instance_;
class OpenSpaceTrajectoryProviderConfig;
class OpenSpaceTrajectoryProviderConfigDefaultTypeInternal;
extern OpenSpaceTrajectoryProviderConfigDefaultTypeInternal _OpenSpaceTrajectoryProviderConfig_default_instance_;
}  // namespace planning
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::planning::DistanceApproachTrajectorySmootherConfig* Arena::CreateMaybeMessage<::apollo::planning::DistanceApproachTrajectorySmootherConfig>(Arena*);
template<> ::apollo::planning::DualVariableConfig* Arena::CreateMaybeMessage<::apollo::planning::DualVariableConfig>(Arena*);
template<> ::apollo::planning::HybridAStarConfig* Arena::CreateMaybeMessage<::apollo::planning::HybridAStarConfig>(Arena*);
template<> ::apollo::planning::IpoptSolverConfig* Arena::CreateMaybeMessage<::apollo::planning::IpoptSolverConfig>(Arena*);
template<> ::apollo::planning::OpenSpaceFallBackDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::OpenSpaceFallBackDeciderConfig>(Arena*);
template<> ::apollo::planning::OpenSpacePreStopDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::OpenSpacePreStopDeciderConfig>(Arena*);
template<> ::apollo::planning::OpenSpaceRoiDeciderConfig* Arena::CreateMaybeMessage<::apollo::planning::OpenSpaceRoiDeciderConfig>(Arena*);
template<> ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* Arena::CreateMaybeMessage<::apollo::planning::OpenSpaceTrajectoryOptimizerConfig>(Arena*);
template<> ::apollo::planning::OpenSpaceTrajectoryPartitionConfig* Arena::CreateMaybeMessage<::apollo::planning::OpenSpaceTrajectoryPartitionConfig>(Arena*);
template<> ::apollo::planning::OpenSpaceTrajectoryProviderConfig* Arena::CreateMaybeMessage<::apollo::planning::OpenSpaceTrajectoryProviderConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace planning {

enum OpenSpacePreStopDeciderConfig_StopType {
  OpenSpacePreStopDeciderConfig_StopType_NOT_DEFINED = 0,
  OpenSpacePreStopDeciderConfig_StopType_PARKING = 1,
  OpenSpacePreStopDeciderConfig_StopType_PULL_OVER = 2,
  OpenSpacePreStopDeciderConfig_StopType_NARROW_STREET_U_TURN = 3,
  OpenSpacePreStopDeciderConfig_StopType_DEAD_END_PRE_STOP = 4
};
bool OpenSpacePreStopDeciderConfig_StopType_IsValid(int value);
const OpenSpacePreStopDeciderConfig_StopType OpenSpacePreStopDeciderConfig_StopType_StopType_MIN = OpenSpacePreStopDeciderConfig_StopType_NOT_DEFINED;
const OpenSpacePreStopDeciderConfig_StopType OpenSpacePreStopDeciderConfig_StopType_StopType_MAX = OpenSpacePreStopDeciderConfig_StopType_DEAD_END_PRE_STOP;
const int OpenSpacePreStopDeciderConfig_StopType_StopType_ARRAYSIZE = OpenSpacePreStopDeciderConfig_StopType_StopType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OpenSpacePreStopDeciderConfig_StopType_descriptor();
inline const ::std::string& OpenSpacePreStopDeciderConfig_StopType_Name(OpenSpacePreStopDeciderConfig_StopType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OpenSpacePreStopDeciderConfig_StopType_descriptor(), value);
}
inline bool OpenSpacePreStopDeciderConfig_StopType_Parse(
    const ::std::string& name, OpenSpacePreStopDeciderConfig_StopType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpenSpacePreStopDeciderConfig_StopType>(
    OpenSpacePreStopDeciderConfig_StopType_descriptor(), name, value);
}
enum OpenSpaceRoiDeciderConfig_RoiType {
  OpenSpaceRoiDeciderConfig_RoiType_NOT_DEFINED = 0,
  OpenSpaceRoiDeciderConfig_RoiType_PARKING = 1,
  OpenSpaceRoiDeciderConfig_RoiType_PULL_OVER = 2,
  OpenSpaceRoiDeciderConfig_RoiType_PARK_AND_GO = 3,
  OpenSpaceRoiDeciderConfig_RoiType_NARROW_STREET_U_TURN = 4,
  OpenSpaceRoiDeciderConfig_RoiType_DEAD_END = 5
};
bool OpenSpaceRoiDeciderConfig_RoiType_IsValid(int value);
const OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig_RoiType_RoiType_MIN = OpenSpaceRoiDeciderConfig_RoiType_NOT_DEFINED;
const OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig_RoiType_RoiType_MAX = OpenSpaceRoiDeciderConfig_RoiType_DEAD_END;
const int OpenSpaceRoiDeciderConfig_RoiType_RoiType_ARRAYSIZE = OpenSpaceRoiDeciderConfig_RoiType_RoiType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OpenSpaceRoiDeciderConfig_RoiType_descriptor();
inline const ::std::string& OpenSpaceRoiDeciderConfig_RoiType_Name(OpenSpaceRoiDeciderConfig_RoiType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OpenSpaceRoiDeciderConfig_RoiType_descriptor(), value);
}
inline bool OpenSpaceRoiDeciderConfig_RoiType_Parse(
    const ::std::string& name, OpenSpaceRoiDeciderConfig_RoiType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OpenSpaceRoiDeciderConfig_RoiType>(
    OpenSpaceRoiDeciderConfig_RoiType_descriptor(), name, value);
}
enum DualVariableMode {
  DUAL_VARIABLE_IPOPT = 0,
  DUAL_VARIABLE_IPOPTQP = 1,
  DUAL_VARIABLE_OSQP = 2,
  DUAL_VARIABLE_DEBUG = 3
};
bool DualVariableMode_IsValid(int value);
const DualVariableMode DualVariableMode_MIN = DUAL_VARIABLE_IPOPT;
const DualVariableMode DualVariableMode_MAX = DUAL_VARIABLE_DEBUG;
const int DualVariableMode_ARRAYSIZE = DualVariableMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* DualVariableMode_descriptor();
inline const ::std::string& DualVariableMode_Name(DualVariableMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    DualVariableMode_descriptor(), value);
}
inline bool DualVariableMode_Parse(
    const ::std::string& name, DualVariableMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DualVariableMode>(
    DualVariableMode_descriptor(), name, value);
}
// ===================================================================

class OpenSpaceFallBackDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.OpenSpaceFallBackDeciderConfig) */ {
 public:
  OpenSpaceFallBackDeciderConfig();
  virtual ~OpenSpaceFallBackDeciderConfig();

  OpenSpaceFallBackDeciderConfig(const OpenSpaceFallBackDeciderConfig& from);

  inline OpenSpaceFallBackDeciderConfig& operator=(const OpenSpaceFallBackDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpenSpaceFallBackDeciderConfig(OpenSpaceFallBackDeciderConfig&& from) noexcept
    : OpenSpaceFallBackDeciderConfig() {
    *this = ::std::move(from);
  }

  inline OpenSpaceFallBackDeciderConfig& operator=(OpenSpaceFallBackDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenSpaceFallBackDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenSpaceFallBackDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const OpenSpaceFallBackDeciderConfig*>(
               &_OpenSpaceFallBackDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(OpenSpaceFallBackDeciderConfig* other);
  friend void swap(OpenSpaceFallBackDeciderConfig& a, OpenSpaceFallBackDeciderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenSpaceFallBackDeciderConfig* New() const final {
    return CreateMaybeMessage<OpenSpaceFallBackDeciderConfig>(NULL);
  }

  OpenSpaceFallBackDeciderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OpenSpaceFallBackDeciderConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OpenSpaceFallBackDeciderConfig& from);
  void MergeFrom(const OpenSpaceFallBackDeciderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenSpaceFallBackDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double open_space_prediction_time_period = 1 [default = 5];
  bool has_open_space_prediction_time_period() const;
  void clear_open_space_prediction_time_period();
  static const int kOpenSpacePredictionTimePeriodFieldNumber = 1;
  double open_space_prediction_time_period() const;
  void set_open_space_prediction_time_period(double value);

  // optional double open_space_fallback_collision_distance = 2 [default = 5];
  bool has_open_space_fallback_collision_distance() const;
  void clear_open_space_fallback_collision_distance();
  static const int kOpenSpaceFallbackCollisionDistanceFieldNumber = 2;
  double open_space_fallback_collision_distance() const;
  void set_open_space_fallback_collision_distance(double value);

  // optional double open_space_fallback_stop_distance = 3 [default = 2];
  bool has_open_space_fallback_stop_distance() const;
  void clear_open_space_fallback_stop_distance();
  static const int kOpenSpaceFallbackStopDistanceFieldNumber = 3;
  double open_space_fallback_stop_distance() const;
  void set_open_space_fallback_stop_distance(double value);

  // optional double open_space_fallback_collision_time_buffer = 4 [default = 10];
  bool has_open_space_fallback_collision_time_buffer() const;
  void clear_open_space_fallback_collision_time_buffer();
  static const int kOpenSpaceFallbackCollisionTimeBufferFieldNumber = 4;
  double open_space_fallback_collision_time_buffer() const;
  void set_open_space_fallback_collision_time_buffer(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.OpenSpaceFallBackDeciderConfig)
 private:
  void set_has_open_space_prediction_time_period();
  void clear_has_open_space_prediction_time_period();
  void set_has_open_space_fallback_collision_distance();
  void clear_has_open_space_fallback_collision_distance();
  void set_has_open_space_fallback_stop_distance();
  void clear_has_open_space_fallback_stop_distance();
  void set_has_open_space_fallback_collision_time_buffer();
  void clear_has_open_space_fallback_collision_time_buffer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double open_space_prediction_time_period_;
  double open_space_fallback_collision_distance_;
  double open_space_fallback_stop_distance_;
  double open_space_fallback_collision_time_buffer_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OpenSpacePreStopDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.OpenSpacePreStopDeciderConfig) */ {
 public:
  OpenSpacePreStopDeciderConfig();
  virtual ~OpenSpacePreStopDeciderConfig();

  OpenSpacePreStopDeciderConfig(const OpenSpacePreStopDeciderConfig& from);

  inline OpenSpacePreStopDeciderConfig& operator=(const OpenSpacePreStopDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpenSpacePreStopDeciderConfig(OpenSpacePreStopDeciderConfig&& from) noexcept
    : OpenSpacePreStopDeciderConfig() {
    *this = ::std::move(from);
  }

  inline OpenSpacePreStopDeciderConfig& operator=(OpenSpacePreStopDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenSpacePreStopDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenSpacePreStopDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const OpenSpacePreStopDeciderConfig*>(
               &_OpenSpacePreStopDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(OpenSpacePreStopDeciderConfig* other);
  friend void swap(OpenSpacePreStopDeciderConfig& a, OpenSpacePreStopDeciderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenSpacePreStopDeciderConfig* New() const final {
    return CreateMaybeMessage<OpenSpacePreStopDeciderConfig>(NULL);
  }

  OpenSpacePreStopDeciderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OpenSpacePreStopDeciderConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OpenSpacePreStopDeciderConfig& from);
  void MergeFrom(const OpenSpacePreStopDeciderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenSpacePreStopDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OpenSpacePreStopDeciderConfig_StopType StopType;
  static const StopType NOT_DEFINED =
    OpenSpacePreStopDeciderConfig_StopType_NOT_DEFINED;
  static const StopType PARKING =
    OpenSpacePreStopDeciderConfig_StopType_PARKING;
  static const StopType PULL_OVER =
    OpenSpacePreStopDeciderConfig_StopType_PULL_OVER;
  static const StopType NARROW_STREET_U_TURN =
    OpenSpacePreStopDeciderConfig_StopType_NARROW_STREET_U_TURN;
  static const StopType DEAD_END_PRE_STOP =
    OpenSpacePreStopDeciderConfig_StopType_DEAD_END_PRE_STOP;
  static inline bool StopType_IsValid(int value) {
    return OpenSpacePreStopDeciderConfig_StopType_IsValid(value);
  }
  static const StopType StopType_MIN =
    OpenSpacePreStopDeciderConfig_StopType_StopType_MIN;
  static const StopType StopType_MAX =
    OpenSpacePreStopDeciderConfig_StopType_StopType_MAX;
  static const int StopType_ARRAYSIZE =
    OpenSpacePreStopDeciderConfig_StopType_StopType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StopType_descriptor() {
    return OpenSpacePreStopDeciderConfig_StopType_descriptor();
  }
  static inline const ::std::string& StopType_Name(StopType value) {
    return OpenSpacePreStopDeciderConfig_StopType_Name(value);
  }
  static inline bool StopType_Parse(const ::std::string& name,
      StopType* value) {
    return OpenSpacePreStopDeciderConfig_StopType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.planning.OpenSpacePreStopDeciderConfig.StopType stop_type = 1;
  bool has_stop_type() const;
  void clear_stop_type();
  static const int kStopTypeFieldNumber = 1;
  ::apollo::planning::OpenSpacePreStopDeciderConfig_StopType stop_type() const;
  void set_stop_type(::apollo::planning::OpenSpacePreStopDeciderConfig_StopType value);

  // optional double rightaway_stop_distance = 2 [default = 2];
  bool has_rightaway_stop_distance() const;
  void clear_rightaway_stop_distance();
  static const int kRightawayStopDistanceFieldNumber = 2;
  double rightaway_stop_distance() const;
  void set_rightaway_stop_distance(double value);

  // optional double stop_distance_to_target = 3 [default = 5];
  bool has_stop_distance_to_target() const;
  void clear_stop_distance_to_target();
  static const int kStopDistanceToTargetFieldNumber = 3;
  double stop_distance_to_target() const;
  void set_stop_distance_to_target(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.OpenSpacePreStopDeciderConfig)
 private:
  void set_has_stop_type();
  void clear_has_stop_type();
  void set_has_rightaway_stop_distance();
  void clear_has_rightaway_stop_distance();
  void set_has_stop_distance_to_target();
  void clear_has_stop_distance_to_target();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int stop_type_;
  double rightaway_stop_distance_;
  double stop_distance_to_target_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OpenSpaceRoiDeciderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.OpenSpaceRoiDeciderConfig) */ {
 public:
  OpenSpaceRoiDeciderConfig();
  virtual ~OpenSpaceRoiDeciderConfig();

  OpenSpaceRoiDeciderConfig(const OpenSpaceRoiDeciderConfig& from);

  inline OpenSpaceRoiDeciderConfig& operator=(const OpenSpaceRoiDeciderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpenSpaceRoiDeciderConfig(OpenSpaceRoiDeciderConfig&& from) noexcept
    : OpenSpaceRoiDeciderConfig() {
    *this = ::std::move(from);
  }

  inline OpenSpaceRoiDeciderConfig& operator=(OpenSpaceRoiDeciderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenSpaceRoiDeciderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenSpaceRoiDeciderConfig* internal_default_instance() {
    return reinterpret_cast<const OpenSpaceRoiDeciderConfig*>(
               &_OpenSpaceRoiDeciderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(OpenSpaceRoiDeciderConfig* other);
  friend void swap(OpenSpaceRoiDeciderConfig& a, OpenSpaceRoiDeciderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenSpaceRoiDeciderConfig* New() const final {
    return CreateMaybeMessage<OpenSpaceRoiDeciderConfig>(NULL);
  }

  OpenSpaceRoiDeciderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OpenSpaceRoiDeciderConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OpenSpaceRoiDeciderConfig& from);
  void MergeFrom(const OpenSpaceRoiDeciderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenSpaceRoiDeciderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OpenSpaceRoiDeciderConfig_RoiType RoiType;
  static const RoiType NOT_DEFINED =
    OpenSpaceRoiDeciderConfig_RoiType_NOT_DEFINED;
  static const RoiType PARKING =
    OpenSpaceRoiDeciderConfig_RoiType_PARKING;
  static const RoiType PULL_OVER =
    OpenSpaceRoiDeciderConfig_RoiType_PULL_OVER;
  static const RoiType PARK_AND_GO =
    OpenSpaceRoiDeciderConfig_RoiType_PARK_AND_GO;
  static const RoiType NARROW_STREET_U_TURN =
    OpenSpaceRoiDeciderConfig_RoiType_NARROW_STREET_U_TURN;
  static const RoiType DEAD_END =
    OpenSpaceRoiDeciderConfig_RoiType_DEAD_END;
  static inline bool RoiType_IsValid(int value) {
    return OpenSpaceRoiDeciderConfig_RoiType_IsValid(value);
  }
  static const RoiType RoiType_MIN =
    OpenSpaceRoiDeciderConfig_RoiType_RoiType_MIN;
  static const RoiType RoiType_MAX =
    OpenSpaceRoiDeciderConfig_RoiType_RoiType_MAX;
  static const int RoiType_ARRAYSIZE =
    OpenSpaceRoiDeciderConfig_RoiType_RoiType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RoiType_descriptor() {
    return OpenSpaceRoiDeciderConfig_RoiType_descriptor();
  }
  static inline const ::std::string& RoiType_Name(RoiType value) {
    return OpenSpaceRoiDeciderConfig_RoiType_Name(value);
  }
  static inline bool RoiType_Parse(const ::std::string& name,
      RoiType* value) {
    return OpenSpaceRoiDeciderConfig_RoiType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.planning.OpenSpaceRoiDeciderConfig.RoiType roi_type = 1;
  bool has_roi_type() const;
  void clear_roi_type();
  static const int kRoiTypeFieldNumber = 1;
  ::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType roi_type() const;
  void set_roi_type(::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType value);

  // optional bool parking_inwards = 5 [default = false];
  bool has_parking_inwards() const;
  void clear_parking_inwards();
  static const int kParkingInwardsFieldNumber = 5;
  bool parking_inwards() const;
  void set_parking_inwards(bool value);

  // optional bool enable_perception_obstacles = 6;
  bool has_enable_perception_obstacles() const;
  void clear_enable_perception_obstacles();
  static const int kEnablePerceptionObstaclesFieldNumber = 6;
  bool enable_perception_obstacles() const;
  void set_enable_perception_obstacles(bool value);

  // optional double perception_obstacle_buffer = 12;
  bool has_perception_obstacle_buffer() const;
  void clear_perception_obstacle_buffer();
  static const int kPerceptionObstacleBufferFieldNumber = 12;
  double perception_obstacle_buffer() const;
  void set_perception_obstacle_buffer(double value);

  // optional double extend_right_x_buffer = 16 [default = 0];
  bool has_extend_right_x_buffer() const;
  void clear_extend_right_x_buffer();
  static const int kExtendRightXBufferFieldNumber = 16;
  double extend_right_x_buffer() const;
  void set_extend_right_x_buffer(double value);

  // optional double extend_left_x_buffer = 17 [default = 0];
  bool has_extend_left_x_buffer() const;
  void clear_extend_left_x_buffer();
  static const int kExtendLeftXBufferFieldNumber = 17;
  double extend_left_x_buffer() const;
  void set_extend_left_x_buffer(double value);

  // optional double roi_longitudinal_range_start = 2 [default = 10];
  bool has_roi_longitudinal_range_start() const;
  void clear_roi_longitudinal_range_start();
  static const int kRoiLongitudinalRangeStartFieldNumber = 2;
  double roi_longitudinal_range_start() const;
  void set_roi_longitudinal_range_start(double value);

  // optional double roi_longitudinal_range_end = 3 [default = 10];
  bool has_roi_longitudinal_range_end() const;
  void clear_roi_longitudinal_range_end();
  static const int kRoiLongitudinalRangeEndFieldNumber = 3;
  double roi_longitudinal_range_end() const;
  void set_roi_longitudinal_range_end(double value);

  // optional double parking_start_range = 4 [default = 7];
  bool has_parking_start_range() const;
  void clear_parking_start_range();
  static const int kParkingStartRangeFieldNumber = 4;
  double parking_start_range() const;
  void set_parking_start_range(double value);

  // optional double parking_depth_buffer = 7 [default = 0.1];
  bool has_parking_depth_buffer() const;
  void clear_parking_depth_buffer();
  static const int kParkingDepthBufferFieldNumber = 7;
  double parking_depth_buffer() const;
  void set_parking_depth_buffer(double value);

  // optional double roi_line_segment_min_angle = 8 [default = 0.3];
  bool has_roi_line_segment_min_angle() const;
  void clear_roi_line_segment_min_angle();
  static const int kRoiLineSegmentMinAngleFieldNumber = 8;
  double roi_line_segment_min_angle() const;
  void set_roi_line_segment_min_angle(double value);

  // optional double roi_line_segment_length = 9 [default = 1];
  bool has_roi_line_segment_length() const;
  void clear_roi_line_segment_length();
  static const int kRoiLineSegmentLengthFieldNumber = 9;
  double roi_line_segment_length() const;
  void set_roi_line_segment_length(double value);

  // optional double roi_line_segment_length_from_map = 10 [default = 10];
  bool has_roi_line_segment_length_from_map() const;
  void clear_roi_line_segment_length_from_map();
  static const int kRoiLineSegmentLengthFromMapFieldNumber = 10;
  double roi_line_segment_length_from_map() const;
  void set_roi_line_segment_length_from_map(double value);

  // optional double perception_obstacle_filtering_distance = 11 [default = 1000];
  bool has_perception_obstacle_filtering_distance() const;
  void clear_perception_obstacle_filtering_distance();
  static const int kPerceptionObstacleFilteringDistanceFieldNumber = 11;
  double perception_obstacle_filtering_distance() const;
  void set_perception_obstacle_filtering_distance(double value);

  // optional double curb_heading_tangent_change_upper_limit = 13 [default = 1];
  bool has_curb_heading_tangent_change_upper_limit() const;
  void clear_curb_heading_tangent_change_upper_limit();
  static const int kCurbHeadingTangentChangeUpperLimitFieldNumber = 13;
  double curb_heading_tangent_change_upper_limit() const;
  void set_curb_heading_tangent_change_upper_limit(double value);

  // optional double end_pose_s_distance = 14 [default = 10];
  bool has_end_pose_s_distance() const;
  void clear_end_pose_s_distance();
  static const int kEndPoseSDistanceFieldNumber = 14;
  double end_pose_s_distance() const;
  void set_end_pose_s_distance(double value);

  // optional double parallel_park_end_x_buffer = 15 [default = 0.2];
  bool has_parallel_park_end_x_buffer() const;
  void clear_parallel_park_end_x_buffer();
  static const int kParallelParkEndXBufferFieldNumber = 15;
  double parallel_park_end_x_buffer() const;
  void set_parallel_park_end_x_buffer(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.OpenSpaceRoiDeciderConfig)
 private:
  void set_has_roi_type();
  void clear_has_roi_type();
  void set_has_roi_longitudinal_range_start();
  void clear_has_roi_longitudinal_range_start();
  void set_has_roi_longitudinal_range_end();
  void clear_has_roi_longitudinal_range_end();
  void set_has_parking_start_range();
  void clear_has_parking_start_range();
  void set_has_parking_inwards();
  void clear_has_parking_inwards();
  void set_has_enable_perception_obstacles();
  void clear_has_enable_perception_obstacles();
  void set_has_parking_depth_buffer();
  void clear_has_parking_depth_buffer();
  void set_has_roi_line_segment_min_angle();
  void clear_has_roi_line_segment_min_angle();
  void set_has_roi_line_segment_length();
  void clear_has_roi_line_segment_length();
  void set_has_roi_line_segment_length_from_map();
  void clear_has_roi_line_segment_length_from_map();
  void set_has_perception_obstacle_filtering_distance();
  void clear_has_perception_obstacle_filtering_distance();
  void set_has_perception_obstacle_buffer();
  void clear_has_perception_obstacle_buffer();
  void set_has_curb_heading_tangent_change_upper_limit();
  void clear_has_curb_heading_tangent_change_upper_limit();
  void set_has_end_pose_s_distance();
  void clear_has_end_pose_s_distance();
  void set_has_parallel_park_end_x_buffer();
  void clear_has_parallel_park_end_x_buffer();
  void set_has_extend_right_x_buffer();
  void clear_has_extend_right_x_buffer();
  void set_has_extend_left_x_buffer();
  void clear_has_extend_left_x_buffer();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int roi_type_;
  bool parking_inwards_;
  bool enable_perception_obstacles_;
  double perception_obstacle_buffer_;
  double extend_right_x_buffer_;
  double extend_left_x_buffer_;
  double roi_longitudinal_range_start_;
  double roi_longitudinal_range_end_;
  double parking_start_range_;
  double parking_depth_buffer_;
  double roi_line_segment_min_angle_;
  double roi_line_segment_length_;
  double roi_line_segment_length_from_map_;
  double perception_obstacle_filtering_distance_;
  double curb_heading_tangent_change_upper_limit_;
  double end_pose_s_distance_;
  double parallel_park_end_x_buffer_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OpenSpaceTrajectoryPartitionConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.OpenSpaceTrajectoryPartitionConfig) */ {
 public:
  OpenSpaceTrajectoryPartitionConfig();
  virtual ~OpenSpaceTrajectoryPartitionConfig();

  OpenSpaceTrajectoryPartitionConfig(const OpenSpaceTrajectoryPartitionConfig& from);

  inline OpenSpaceTrajectoryPartitionConfig& operator=(const OpenSpaceTrajectoryPartitionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpenSpaceTrajectoryPartitionConfig(OpenSpaceTrajectoryPartitionConfig&& from) noexcept
    : OpenSpaceTrajectoryPartitionConfig() {
    *this = ::std::move(from);
  }

  inline OpenSpaceTrajectoryPartitionConfig& operator=(OpenSpaceTrajectoryPartitionConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenSpaceTrajectoryPartitionConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenSpaceTrajectoryPartitionConfig* internal_default_instance() {
    return reinterpret_cast<const OpenSpaceTrajectoryPartitionConfig*>(
               &_OpenSpaceTrajectoryPartitionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(OpenSpaceTrajectoryPartitionConfig* other);
  friend void swap(OpenSpaceTrajectoryPartitionConfig& a, OpenSpaceTrajectoryPartitionConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenSpaceTrajectoryPartitionConfig* New() const final {
    return CreateMaybeMessage<OpenSpaceTrajectoryPartitionConfig>(NULL);
  }

  OpenSpaceTrajectoryPartitionConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OpenSpaceTrajectoryPartitionConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OpenSpaceTrajectoryPartitionConfig& from);
  void MergeFrom(const OpenSpaceTrajectoryPartitionConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenSpaceTrajectoryPartitionConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double gear_shift_max_t = 1;
  bool has_gear_shift_max_t() const;
  void clear_gear_shift_max_t();
  static const int kGearShiftMaxTFieldNumber = 1;
  double gear_shift_max_t() const;
  void set_gear_shift_max_t(double value);

  // optional double gear_shift_unit_t = 2;
  bool has_gear_shift_unit_t() const;
  void clear_gear_shift_unit_t();
  static const int kGearShiftUnitTFieldNumber = 2;
  double gear_shift_unit_t() const;
  void set_gear_shift_unit_t(double value);

  // optional double gear_shift_period_duration = 3;
  bool has_gear_shift_period_duration() const;
  void clear_gear_shift_period_duration();
  static const int kGearShiftPeriodDurationFieldNumber = 3;
  double gear_shift_period_duration() const;
  void set_gear_shift_period_duration(double value);

  // optional uint64 interpolated_pieces_num = 4;
  bool has_interpolated_pieces_num() const;
  void clear_interpolated_pieces_num();
  static const int kInterpolatedPiecesNumFieldNumber = 4;
  ::google::protobuf::uint64 interpolated_pieces_num() const;
  void set_interpolated_pieces_num(::google::protobuf::uint64 value);

  // optional uint64 initial_gear_check_horizon = 5;
  bool has_initial_gear_check_horizon() const;
  void clear_initial_gear_check_horizon();
  static const int kInitialGearCheckHorizonFieldNumber = 5;
  ::google::protobuf::uint64 initial_gear_check_horizon() const;
  void set_initial_gear_check_horizon(::google::protobuf::uint64 value);

  // optional double heading_search_range = 6;
  bool has_heading_search_range() const;
  void clear_heading_search_range();
  static const int kHeadingSearchRangeFieldNumber = 6;
  double heading_search_range() const;
  void set_heading_search_range(double value);

  // optional double heading_track_range = 7;
  bool has_heading_track_range() const;
  void clear_heading_track_range();
  static const int kHeadingTrackRangeFieldNumber = 7;
  double heading_track_range() const;
  void set_heading_track_range(double value);

  // optional double heading_offset_to_midpoint = 9;
  bool has_heading_offset_to_midpoint() const;
  void clear_heading_offset_to_midpoint();
  static const int kHeadingOffsetToMidpointFieldNumber = 9;
  double heading_offset_to_midpoint() const;
  void set_heading_offset_to_midpoint(double value);

  // optional double distance_search_range = 8 [default = 1e-06];
  bool has_distance_search_range() const;
  void clear_distance_search_range();
  static const int kDistanceSearchRangeFieldNumber = 8;
  double distance_search_range() const;
  void set_distance_search_range(double value);

  // optional double lateral_offset_to_midpoint = 10 [default = 0.1];
  bool has_lateral_offset_to_midpoint() const;
  void clear_lateral_offset_to_midpoint();
  static const int kLateralOffsetToMidpointFieldNumber = 10;
  double lateral_offset_to_midpoint() const;
  void set_lateral_offset_to_midpoint(double value);

  // optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
  bool has_longitudinal_offset_to_midpoint() const;
  void clear_longitudinal_offset_to_midpoint();
  static const int kLongitudinalOffsetToMidpointFieldNumber = 11;
  double longitudinal_offset_to_midpoint() const;
  void set_longitudinal_offset_to_midpoint(double value);

  // optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
  bool has_vehicle_box_iou_threshold_to_midpoint() const;
  void clear_vehicle_box_iou_threshold_to_midpoint();
  static const int kVehicleBoxIouThresholdToMidpointFieldNumber = 12;
  double vehicle_box_iou_threshold_to_midpoint() const;
  void set_vehicle_box_iou_threshold_to_midpoint(double value);

  // optional double linear_velocity_threshold_on_ego = 13 [default = 0.2];
  bool has_linear_velocity_threshold_on_ego() const;
  void clear_linear_velocity_threshold_on_ego();
  static const int kLinearVelocityThresholdOnEgoFieldNumber = 13;
  double linear_velocity_threshold_on_ego() const;
  void set_linear_velocity_threshold_on_ego(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.OpenSpaceTrajectoryPartitionConfig)
 private:
  void set_has_gear_shift_max_t();
  void clear_has_gear_shift_max_t();
  void set_has_gear_shift_unit_t();
  void clear_has_gear_shift_unit_t();
  void set_has_gear_shift_period_duration();
  void clear_has_gear_shift_period_duration();
  void set_has_interpolated_pieces_num();
  void clear_has_interpolated_pieces_num();
  void set_has_initial_gear_check_horizon();
  void clear_has_initial_gear_check_horizon();
  void set_has_heading_search_range();
  void clear_has_heading_search_range();
  void set_has_heading_track_range();
  void clear_has_heading_track_range();
  void set_has_distance_search_range();
  void clear_has_distance_search_range();
  void set_has_heading_offset_to_midpoint();
  void clear_has_heading_offset_to_midpoint();
  void set_has_lateral_offset_to_midpoint();
  void clear_has_lateral_offset_to_midpoint();
  void set_has_longitudinal_offset_to_midpoint();
  void clear_has_longitudinal_offset_to_midpoint();
  void set_has_vehicle_box_iou_threshold_to_midpoint();
  void clear_has_vehicle_box_iou_threshold_to_midpoint();
  void set_has_linear_velocity_threshold_on_ego();
  void clear_has_linear_velocity_threshold_on_ego();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double gear_shift_max_t_;
  double gear_shift_unit_t_;
  double gear_shift_period_duration_;
  ::google::protobuf::uint64 interpolated_pieces_num_;
  ::google::protobuf::uint64 initial_gear_check_horizon_;
  double heading_search_range_;
  double heading_track_range_;
  double heading_offset_to_midpoint_;
  double distance_search_range_;
  double lateral_offset_to_midpoint_;
  double longitudinal_offset_to_midpoint_;
  double vehicle_box_iou_threshold_to_midpoint_;
  double linear_velocity_threshold_on_ego_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OpenSpaceTrajectoryProviderConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.OpenSpaceTrajectoryProviderConfig) */ {
 public:
  OpenSpaceTrajectoryProviderConfig();
  virtual ~OpenSpaceTrajectoryProviderConfig();

  OpenSpaceTrajectoryProviderConfig(const OpenSpaceTrajectoryProviderConfig& from);

  inline OpenSpaceTrajectoryProviderConfig& operator=(const OpenSpaceTrajectoryProviderConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpenSpaceTrajectoryProviderConfig(OpenSpaceTrajectoryProviderConfig&& from) noexcept
    : OpenSpaceTrajectoryProviderConfig() {
    *this = ::std::move(from);
  }

  inline OpenSpaceTrajectoryProviderConfig& operator=(OpenSpaceTrajectoryProviderConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenSpaceTrajectoryProviderConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenSpaceTrajectoryProviderConfig* internal_default_instance() {
    return reinterpret_cast<const OpenSpaceTrajectoryProviderConfig*>(
               &_OpenSpaceTrajectoryProviderConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(OpenSpaceTrajectoryProviderConfig* other);
  friend void swap(OpenSpaceTrajectoryProviderConfig& a, OpenSpaceTrajectoryProviderConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenSpaceTrajectoryProviderConfig* New() const final {
    return CreateMaybeMessage<OpenSpaceTrajectoryProviderConfig>(NULL);
  }

  OpenSpaceTrajectoryProviderConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OpenSpaceTrajectoryProviderConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OpenSpaceTrajectoryProviderConfig& from);
  void MergeFrom(const OpenSpaceTrajectoryProviderConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenSpaceTrajectoryProviderConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
  bool has_open_space_trajectory_optimizer_config() const;
  void clear_open_space_trajectory_optimizer_config();
  static const int kOpenSpaceTrajectoryOptimizerConfigFieldNumber = 1;
  private:
  const ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig& _internal_open_space_trajectory_optimizer_config() const;
  public:
  const ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig& open_space_trajectory_optimizer_config() const;
  ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* release_open_space_trajectory_optimizer_config();
  ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* mutable_open_space_trajectory_optimizer_config();
  void set_allocated_open_space_trajectory_optimizer_config(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* open_space_trajectory_optimizer_config);

  // @@protoc_insertion_point(class_scope:apollo.planning.OpenSpaceTrajectoryProviderConfig)
 private:
  void set_has_open_space_trajectory_optimizer_config();
  void clear_has_open_space_trajectory_optimizer_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* open_space_trajectory_optimizer_config_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OpenSpaceTrajectoryOptimizerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.OpenSpaceTrajectoryOptimizerConfig) */ {
 public:
  OpenSpaceTrajectoryOptimizerConfig();
  virtual ~OpenSpaceTrajectoryOptimizerConfig();

  OpenSpaceTrajectoryOptimizerConfig(const OpenSpaceTrajectoryOptimizerConfig& from);

  inline OpenSpaceTrajectoryOptimizerConfig& operator=(const OpenSpaceTrajectoryOptimizerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpenSpaceTrajectoryOptimizerConfig(OpenSpaceTrajectoryOptimizerConfig&& from) noexcept
    : OpenSpaceTrajectoryOptimizerConfig() {
    *this = ::std::move(from);
  }

  inline OpenSpaceTrajectoryOptimizerConfig& operator=(OpenSpaceTrajectoryOptimizerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenSpaceTrajectoryOptimizerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenSpaceTrajectoryOptimizerConfig* internal_default_instance() {
    return reinterpret_cast<const OpenSpaceTrajectoryOptimizerConfig*>(
               &_OpenSpaceTrajectoryOptimizerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(OpenSpaceTrajectoryOptimizerConfig* other);
  friend void swap(OpenSpaceTrajectoryOptimizerConfig& a, OpenSpaceTrajectoryOptimizerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenSpaceTrajectoryOptimizerConfig* New() const final {
    return CreateMaybeMessage<OpenSpaceTrajectoryOptimizerConfig>(NULL);
  }

  OpenSpaceTrajectoryOptimizerConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OpenSpaceTrajectoryOptimizerConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OpenSpaceTrajectoryOptimizerConfig& from);
  void MergeFrom(const OpenSpaceTrajectoryOptimizerConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenSpaceTrajectoryOptimizerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.HybridAStarConfig hybrid_a_star_config = 1;
  bool has_hybrid_a_star_config() const;
  void clear_hybrid_a_star_config();
  static const int kHybridAStarConfigFieldNumber = 1;
  private:
  const ::apollo::planning::HybridAStarConfig& _internal_hybrid_a_star_config() const;
  public:
  const ::apollo::planning::HybridAStarConfig& hybrid_a_star_config() const;
  ::apollo::planning::HybridAStarConfig* release_hybrid_a_star_config();
  ::apollo::planning::HybridAStarConfig* mutable_hybrid_a_star_config();
  void set_allocated_hybrid_a_star_config(::apollo::planning::HybridAStarConfig* hybrid_a_star_config);

  // optional .apollo.planning.DualVariableConfig dual_variable_warm_start_config = 2;
  bool has_dual_variable_warm_start_config() const;
  void clear_dual_variable_warm_start_config();
  static const int kDualVariableWarmStartConfigFieldNumber = 2;
  private:
  const ::apollo::planning::DualVariableConfig& _internal_dual_variable_warm_start_config() const;
  public:
  const ::apollo::planning::DualVariableConfig& dual_variable_warm_start_config() const;
  ::apollo::planning::DualVariableConfig* release_dual_variable_warm_start_config();
  ::apollo::planning::DualVariableConfig* mutable_dual_variable_warm_start_config();
  void set_allocated_dual_variable_warm_start_config(::apollo::planning::DualVariableConfig* dual_variable_warm_start_config);

  // optional .apollo.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
  bool has_distance_approach_trajectory_smoother_config() const;
  void clear_distance_approach_trajectory_smoother_config();
  static const int kDistanceApproachTrajectorySmootherConfigFieldNumber = 3;
  private:
  const ::apollo::planning::DistanceApproachTrajectorySmootherConfig& _internal_distance_approach_trajectory_smoother_config() const;
  public:
  const ::apollo::planning::DistanceApproachTrajectorySmootherConfig& distance_approach_trajectory_smoother_config() const;
  ::apollo::planning::DistanceApproachTrajectorySmootherConfig* release_distance_approach_trajectory_smoother_config();
  ::apollo::planning::DistanceApproachTrajectorySmootherConfig* mutable_distance_approach_trajectory_smoother_config();
  void set_allocated_distance_approach_trajectory_smoother_config(::apollo::planning::DistanceApproachTrajectorySmootherConfig* distance_approach_trajectory_smoother_config);

  // optional .apollo.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
  bool has_planner_open_space_config() const;
  void clear_planner_open_space_config();
  static const int kPlannerOpenSpaceConfigFieldNumber = 6;
  private:
  const ::apollo::planning::PlannerOpenSpaceConfig& _internal_planner_open_space_config() const;
  public:
  const ::apollo::planning::PlannerOpenSpaceConfig& planner_open_space_config() const;
  ::apollo::planning::PlannerOpenSpaceConfig* release_planner_open_space_config();
  ::apollo::planning::PlannerOpenSpaceConfig* mutable_planner_open_space_config();
  void set_allocated_planner_open_space_config(::apollo::planning::PlannerOpenSpaceConfig* planner_open_space_config);

  // optional float delta_t = 4 [default = 0.5];
  bool has_delta_t() const;
  void clear_delta_t();
  static const int kDeltaTFieldNumber = 4;
  float delta_t() const;
  void set_delta_t(float value);

  // optional double is_near_destination_threshold = 5 [default = 0.001];
  bool has_is_near_destination_threshold() const;
  void clear_is_near_destination_threshold();
  static const int kIsNearDestinationThresholdFieldNumber = 5;
  double is_near_destination_threshold() const;
  void set_is_near_destination_threshold(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.OpenSpaceTrajectoryOptimizerConfig)
 private:
  void set_has_hybrid_a_star_config();
  void clear_has_hybrid_a_star_config();
  void set_has_dual_variable_warm_start_config();
  void clear_has_dual_variable_warm_start_config();
  void set_has_distance_approach_trajectory_smoother_config();
  void clear_has_distance_approach_trajectory_smoother_config();
  void set_has_delta_t();
  void clear_has_delta_t();
  void set_has_is_near_destination_threshold();
  void clear_has_is_near_destination_threshold();
  void set_has_planner_open_space_config();
  void clear_has_planner_open_space_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::planning::HybridAStarConfig* hybrid_a_star_config_;
  ::apollo::planning::DualVariableConfig* dual_variable_warm_start_config_;
  ::apollo::planning::DistanceApproachTrajectorySmootherConfig* distance_approach_trajectory_smoother_config_;
  ::apollo::planning::PlannerOpenSpaceConfig* planner_open_space_config_;
  float delta_t_;
  double is_near_destination_threshold_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HybridAStarConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.HybridAStarConfig) */ {
 public:
  HybridAStarConfig();
  virtual ~HybridAStarConfig();

  HybridAStarConfig(const HybridAStarConfig& from);

  inline HybridAStarConfig& operator=(const HybridAStarConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HybridAStarConfig(HybridAStarConfig&& from) noexcept
    : HybridAStarConfig() {
    *this = ::std::move(from);
  }

  inline HybridAStarConfig& operator=(HybridAStarConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HybridAStarConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HybridAStarConfig* internal_default_instance() {
    return reinterpret_cast<const HybridAStarConfig*>(
               &_HybridAStarConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(HybridAStarConfig* other);
  friend void swap(HybridAStarConfig& a, HybridAStarConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HybridAStarConfig* New() const final {
    return CreateMaybeMessage<HybridAStarConfig>(NULL);
  }

  HybridAStarConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HybridAStarConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HybridAStarConfig& from);
  void MergeFrom(const HybridAStarConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HybridAStarConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double traj_forward_penalty = 5 [default = 0];
  bool has_traj_forward_penalty() const;
  void clear_traj_forward_penalty();
  static const int kTrajForwardPenaltyFieldNumber = 5;
  double traj_forward_penalty() const;
  void set_traj_forward_penalty(double value);

  // optional double traj_back_penalty = 6 [default = 0];
  bool has_traj_back_penalty() const;
  void clear_traj_back_penalty();
  static const int kTrajBackPenaltyFieldNumber = 6;
  double traj_back_penalty() const;
  void set_traj_back_penalty(double value);

  // optional double xy_grid_resolution = 1 [default = 0.2];
  bool has_xy_grid_resolution() const;
  void clear_xy_grid_resolution();
  static const int kXyGridResolutionFieldNumber = 1;
  double xy_grid_resolution() const;
  void set_xy_grid_resolution(double value);

  // optional double phi_grid_resolution = 2 [default = 0.05];
  bool has_phi_grid_resolution() const;
  void clear_phi_grid_resolution();
  static const int kPhiGridResolutionFieldNumber = 2;
  double phi_grid_resolution() const;
  void set_phi_grid_resolution(double value);

  // optional uint64 next_node_num = 3 [default = 10];
  bool has_next_node_num() const;
  void clear_next_node_num();
  static const int kNextNodeNumFieldNumber = 3;
  ::google::protobuf::uint64 next_node_num() const;
  void set_next_node_num(::google::protobuf::uint64 value);

  // optional double step_size = 4 [default = 0.5];
  bool has_step_size() const;
  void clear_step_size();
  static const int kStepSizeFieldNumber = 4;
  double step_size() const;
  void set_step_size(double value);

  // optional double traj_gear_switch_penalty = 7 [default = 10];
  bool has_traj_gear_switch_penalty() const;
  void clear_traj_gear_switch_penalty();
  static const int kTrajGearSwitchPenaltyFieldNumber = 7;
  double traj_gear_switch_penalty() const;
  void set_traj_gear_switch_penalty(double value);

  // optional double traj_steer_penalty = 8 [default = 100];
  bool has_traj_steer_penalty() const;
  void clear_traj_steer_penalty();
  static const int kTrajSteerPenaltyFieldNumber = 8;
  double traj_steer_penalty() const;
  void set_traj_steer_penalty(double value);

  // optional double traj_steer_change_penalty = 9 [default = 10];
  bool has_traj_steer_change_penalty() const;
  void clear_traj_steer_change_penalty();
  static const int kTrajSteerChangePenaltyFieldNumber = 9;
  double traj_steer_change_penalty() const;
  void set_traj_steer_change_penalty(double value);

  // optional double grid_a_star_xy_resolution = 15 [default = 0.1];
  bool has_grid_a_star_xy_resolution() const;
  void clear_grid_a_star_xy_resolution();
  static const int kGridAStarXyResolutionFieldNumber = 15;
  double grid_a_star_xy_resolution() const;
  void set_grid_a_star_xy_resolution(double value);

  // optional double node_radius = 16 [default = 0.5];
  bool has_node_radius() const;
  void clear_node_radius();
  static const int kNodeRadiusFieldNumber = 16;
  double node_radius() const;
  void set_node_radius(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.HybridAStarConfig)
 private:
  void set_has_xy_grid_resolution();
  void clear_has_xy_grid_resolution();
  void set_has_phi_grid_resolution();
  void clear_has_phi_grid_resolution();
  void set_has_next_node_num();
  void clear_has_next_node_num();
  void set_has_step_size();
  void clear_has_step_size();
  void set_has_traj_forward_penalty();
  void clear_has_traj_forward_penalty();
  void set_has_traj_back_penalty();
  void clear_has_traj_back_penalty();
  void set_has_traj_gear_switch_penalty();
  void clear_has_traj_gear_switch_penalty();
  void set_has_traj_steer_penalty();
  void clear_has_traj_steer_penalty();
  void set_has_traj_steer_change_penalty();
  void clear_has_traj_steer_change_penalty();
  void set_has_grid_a_star_xy_resolution();
  void clear_has_grid_a_star_xy_resolution();
  void set_has_node_radius();
  void clear_has_node_radius();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double traj_forward_penalty_;
  double traj_back_penalty_;
  double xy_grid_resolution_;
  double phi_grid_resolution_;
  ::google::protobuf::uint64 next_node_num_;
  double step_size_;
  double traj_gear_switch_penalty_;
  double traj_steer_penalty_;
  double traj_steer_change_penalty_;
  double grid_a_star_xy_resolution_;
  double node_radius_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DualVariableConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.DualVariableConfig) */ {
 public:
  DualVariableConfig();
  virtual ~DualVariableConfig();

  DualVariableConfig(const DualVariableConfig& from);

  inline DualVariableConfig& operator=(const DualVariableConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DualVariableConfig(DualVariableConfig&& from) noexcept
    : DualVariableConfig() {
    *this = ::std::move(from);
  }

  inline DualVariableConfig& operator=(DualVariableConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DualVariableConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DualVariableConfig* internal_default_instance() {
    return reinterpret_cast<const DualVariableConfig*>(
               &_DualVariableConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DualVariableConfig* other);
  friend void swap(DualVariableConfig& a, DualVariableConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DualVariableConfig* New() const final {
    return CreateMaybeMessage<DualVariableConfig>(NULL);
  }

  DualVariableConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DualVariableConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DualVariableConfig& from);
  void MergeFrom(const DualVariableConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DualVariableConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.IpoptSolverConfig ipopt_config = 2;
  bool has_ipopt_config() const;
  void clear_ipopt_config();
  static const int kIpoptConfigFieldNumber = 2;
  private:
  const ::apollo::planning::IpoptSolverConfig& _internal_ipopt_config() const;
  public:
  const ::apollo::planning::IpoptSolverConfig& ipopt_config() const;
  ::apollo::planning::IpoptSolverConfig* release_ipopt_config();
  ::apollo::planning::IpoptSolverConfig* mutable_ipopt_config();
  void set_allocated_ipopt_config(::apollo::planning::IpoptSolverConfig* ipopt_config);

  // optional double min_safety_distance = 4 [default = 0];
  bool has_min_safety_distance() const;
  void clear_min_safety_distance();
  static const int kMinSafetyDistanceFieldNumber = 4;
  double min_safety_distance() const;
  void set_min_safety_distance(double value);

  // optional .apollo.planning.DualVariableMode qp_format = 3;
  bool has_qp_format() const;
  void clear_qp_format();
  static const int kQpFormatFieldNumber = 3;
  ::apollo::planning::DualVariableMode qp_format() const;
  void set_qp_format(::apollo::planning::DualVariableMode value);

  // optional bool debug_osqp = 5 [default = false];
  bool has_debug_osqp() const;
  void clear_debug_osqp();
  static const int kDebugOsqpFieldNumber = 5;
  bool debug_osqp() const;
  void set_debug_osqp(bool value);

  // optional double weight_d = 1 [default = 1];
  bool has_weight_d() const;
  void clear_weight_d();
  static const int kWeightDFieldNumber = 1;
  double weight_d() const;
  void set_weight_d(double value);

  // optional double beta = 6 [default = 1];
  bool has_beta() const;
  void clear_beta();
  static const int kBetaFieldNumber = 6;
  double beta() const;
  void set_beta(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.DualVariableConfig)
 private:
  void set_has_weight_d();
  void clear_has_weight_d();
  void set_has_ipopt_config();
  void clear_has_ipopt_config();
  void set_has_qp_format();
  void clear_has_qp_format();
  void set_has_min_safety_distance();
  void clear_has_min_safety_distance();
  void set_has_debug_osqp();
  void clear_has_debug_osqp();
  void set_has_beta();
  void clear_has_beta();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::planning::IpoptSolverConfig* ipopt_config_;
  double min_safety_distance_;
  int qp_format_;
  bool debug_osqp_;
  double weight_d_;
  double beta_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DistanceApproachTrajectorySmootherConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.DistanceApproachTrajectorySmootherConfig) */ {
 public:
  DistanceApproachTrajectorySmootherConfig();
  virtual ~DistanceApproachTrajectorySmootherConfig();

  DistanceApproachTrajectorySmootherConfig(const DistanceApproachTrajectorySmootherConfig& from);

  inline DistanceApproachTrajectorySmootherConfig& operator=(const DistanceApproachTrajectorySmootherConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DistanceApproachTrajectorySmootherConfig(DistanceApproachTrajectorySmootherConfig&& from) noexcept
    : DistanceApproachTrajectorySmootherConfig() {
    *this = ::std::move(from);
  }

  inline DistanceApproachTrajectorySmootherConfig& operator=(DistanceApproachTrajectorySmootherConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DistanceApproachTrajectorySmootherConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistanceApproachTrajectorySmootherConfig* internal_default_instance() {
    return reinterpret_cast<const DistanceApproachTrajectorySmootherConfig*>(
               &_DistanceApproachTrajectorySmootherConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DistanceApproachTrajectorySmootherConfig* other);
  friend void swap(DistanceApproachTrajectorySmootherConfig& a, DistanceApproachTrajectorySmootherConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DistanceApproachTrajectorySmootherConfig* New() const final {
    return CreateMaybeMessage<DistanceApproachTrajectorySmootherConfig>(NULL);
  }

  DistanceApproachTrajectorySmootherConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DistanceApproachTrajectorySmootherConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DistanceApproachTrajectorySmootherConfig& from);
  void MergeFrom(const DistanceApproachTrajectorySmootherConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistanceApproachTrajectorySmootherConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.planning.IpoptSolverConfig ipopt_config = 21;
  bool has_ipopt_config() const;
  void clear_ipopt_config();
  static const int kIpoptConfigFieldNumber = 21;
  private:
  const ::apollo::planning::IpoptSolverConfig& _internal_ipopt_config() const;
  public:
  const ::apollo::planning::IpoptSolverConfig& ipopt_config() const;
  ::apollo::planning::IpoptSolverConfig* release_ipopt_config();
  ::apollo::planning::IpoptSolverConfig* mutable_ipopt_config();
  void set_allocated_ipopt_config(::apollo::planning::IpoptSolverConfig* ipopt_config);

  // optional double weight_steer = 1;
  bool has_weight_steer() const;
  void clear_weight_steer();
  static const int kWeightSteerFieldNumber = 1;
  double weight_steer() const;
  void set_weight_steer(double value);

  // optional double weight_a = 2;
  bool has_weight_a() const;
  void clear_weight_a();
  static const int kWeightAFieldNumber = 2;
  double weight_a() const;
  void set_weight_a(double value);

  // optional double weight_steer_rate = 3;
  bool has_weight_steer_rate() const;
  void clear_weight_steer_rate();
  static const int kWeightSteerRateFieldNumber = 3;
  double weight_steer_rate() const;
  void set_weight_steer_rate(double value);

  // optional double weight_a_rate = 4;
  bool has_weight_a_rate() const;
  void clear_weight_a_rate();
  static const int kWeightARateFieldNumber = 4;
  double weight_a_rate() const;
  void set_weight_a_rate(double value);

  // optional double weight_x = 5;
  bool has_weight_x() const;
  void clear_weight_x();
  static const int kWeightXFieldNumber = 5;
  double weight_x() const;
  void set_weight_x(double value);

  // optional double weight_y = 6;
  bool has_weight_y() const;
  void clear_weight_y();
  static const int kWeightYFieldNumber = 6;
  double weight_y() const;
  void set_weight_y(double value);

  // optional double weight_phi = 7;
  bool has_weight_phi() const;
  void clear_weight_phi();
  static const int kWeightPhiFieldNumber = 7;
  double weight_phi() const;
  void set_weight_phi(double value);

  // optional double weight_v = 8;
  bool has_weight_v() const;
  void clear_weight_v();
  static const int kWeightVFieldNumber = 8;
  double weight_v() const;
  void set_weight_v(double value);

  // optional double weight_steer_stitching = 9;
  bool has_weight_steer_stitching() const;
  void clear_weight_steer_stitching();
  static const int kWeightSteerStitchingFieldNumber = 9;
  double weight_steer_stitching() const;
  void set_weight_steer_stitching(double value);

  // optional double weight_a_stitching = 10;
  bool has_weight_a_stitching() const;
  void clear_weight_a_stitching();
  static const int kWeightAStitchingFieldNumber = 10;
  double weight_a_stitching() const;
  void set_weight_a_stitching(double value);

  // optional double weight_first_order_time = 11;
  bool has_weight_first_order_time() const;
  void clear_weight_first_order_time();
  static const int kWeightFirstOrderTimeFieldNumber = 11;
  double weight_first_order_time() const;
  void set_weight_first_order_time(double value);

  // optional double weight_second_order_time = 12;
  bool has_weight_second_order_time() const;
  void clear_weight_second_order_time();
  static const int kWeightSecondOrderTimeFieldNumber = 12;
  double weight_second_order_time() const;
  void set_weight_second_order_time(double value);

  // optional double min_safety_distance = 13 [default = 0];
  bool has_min_safety_distance() const;
  void clear_min_safety_distance();
  static const int kMinSafetyDistanceFieldNumber = 13;
  double min_safety_distance() const;
  void set_min_safety_distance(double value);

  // optional bool use_fix_time = 20 [default = false];
  bool has_use_fix_time() const;
  void clear_use_fix_time();
  static const int kUseFixTimeFieldNumber = 20;
  bool use_fix_time() const;
  void set_use_fix_time(bool value);

  // optional bool enable_constraint_check = 22;
  bool has_enable_constraint_check() const;
  void clear_enable_constraint_check();
  static const int kEnableConstraintCheckFieldNumber = 22;
  bool enable_constraint_check() const;
  void set_enable_constraint_check(bool value);

  // optional bool enable_hand_derivative = 23;
  bool has_enable_hand_derivative() const;
  void clear_enable_hand_derivative();
  static const int kEnableHandDerivativeFieldNumber = 23;
  bool enable_hand_derivative() const;
  void set_enable_hand_derivative(bool value);

  // optional bool enable_derivative_check = 24;
  bool has_enable_derivative_check() const;
  void clear_enable_derivative_check();
  static const int kEnableDerivativeCheckFieldNumber = 24;
  bool enable_derivative_check() const;
  void set_enable_derivative_check(bool value);

  // optional bool enable_initial_final_check = 25 [default = false];
  bool has_enable_initial_final_check() const;
  void clear_enable_initial_final_check();
  static const int kEnableInitialFinalCheckFieldNumber = 25;
  bool enable_initial_final_check() const;
  void set_enable_initial_final_check(bool value);

  // optional double max_speed_forward = 14 [default = 3];
  bool has_max_speed_forward() const;
  void clear_max_speed_forward();
  static const int kMaxSpeedForwardFieldNumber = 14;
  double max_speed_forward() const;
  void set_max_speed_forward(double value);

  // optional double max_speed_reverse = 15 [default = 2];
  bool has_max_speed_reverse() const;
  void clear_max_speed_reverse();
  static const int kMaxSpeedReverseFieldNumber = 15;
  double max_speed_reverse() const;
  void set_max_speed_reverse(double value);

  // optional double max_acceleration_forward = 16 [default = 2];
  bool has_max_acceleration_forward() const;
  void clear_max_acceleration_forward();
  static const int kMaxAccelerationForwardFieldNumber = 16;
  double max_acceleration_forward() const;
  void set_max_acceleration_forward(double value);

  // optional double max_acceleration_reverse = 17 [default = 2];
  bool has_max_acceleration_reverse() const;
  void clear_max_acceleration_reverse();
  static const int kMaxAccelerationReverseFieldNumber = 17;
  double max_acceleration_reverse() const;
  void set_max_acceleration_reverse(double value);

  // optional double min_time_sample_scaling = 18 [default = 0.1];
  bool has_min_time_sample_scaling() const;
  void clear_min_time_sample_scaling();
  static const int kMinTimeSampleScalingFieldNumber = 18;
  double min_time_sample_scaling() const;
  void set_min_time_sample_scaling(double value);

  // optional double max_time_sample_scaling = 19 [default = 10];
  bool has_max_time_sample_scaling() const;
  void clear_max_time_sample_scaling();
  static const int kMaxTimeSampleScalingFieldNumber = 19;
  double max_time_sample_scaling() const;
  void set_max_time_sample_scaling(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.DistanceApproachTrajectorySmootherConfig)
 private:
  void set_has_weight_steer();
  void clear_has_weight_steer();
  void set_has_weight_a();
  void clear_has_weight_a();
  void set_has_weight_steer_rate();
  void clear_has_weight_steer_rate();
  void set_has_weight_a_rate();
  void clear_has_weight_a_rate();
  void set_has_weight_x();
  void clear_has_weight_x();
  void set_has_weight_y();
  void clear_has_weight_y();
  void set_has_weight_phi();
  void clear_has_weight_phi();
  void set_has_weight_v();
  void clear_has_weight_v();
  void set_has_weight_steer_stitching();
  void clear_has_weight_steer_stitching();
  void set_has_weight_a_stitching();
  void clear_has_weight_a_stitching();
  void set_has_weight_first_order_time();
  void clear_has_weight_first_order_time();
  void set_has_weight_second_order_time();
  void clear_has_weight_second_order_time();
  void set_has_min_safety_distance();
  void clear_has_min_safety_distance();
  void set_has_max_speed_forward();
  void clear_has_max_speed_forward();
  void set_has_max_speed_reverse();
  void clear_has_max_speed_reverse();
  void set_has_max_acceleration_forward();
  void clear_has_max_acceleration_forward();
  void set_has_max_acceleration_reverse();
  void clear_has_max_acceleration_reverse();
  void set_has_min_time_sample_scaling();
  void clear_has_min_time_sample_scaling();
  void set_has_max_time_sample_scaling();
  void clear_has_max_time_sample_scaling();
  void set_has_use_fix_time();
  void clear_has_use_fix_time();
  void set_has_ipopt_config();
  void clear_has_ipopt_config();
  void set_has_enable_constraint_check();
  void clear_has_enable_constraint_check();
  void set_has_enable_hand_derivative();
  void clear_has_enable_hand_derivative();
  void set_has_enable_derivative_check();
  void clear_has_enable_derivative_check();
  void set_has_enable_initial_final_check();
  void clear_has_enable_initial_final_check();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::planning::IpoptSolverConfig* ipopt_config_;
  double weight_steer_;
  double weight_a_;
  double weight_steer_rate_;
  double weight_a_rate_;
  double weight_x_;
  double weight_y_;
  double weight_phi_;
  double weight_v_;
  double weight_steer_stitching_;
  double weight_a_stitching_;
  double weight_first_order_time_;
  double weight_second_order_time_;
  double min_safety_distance_;
  bool use_fix_time_;
  bool enable_constraint_check_;
  bool enable_hand_derivative_;
  bool enable_derivative_check_;
  bool enable_initial_final_check_;
  double max_speed_forward_;
  double max_speed_reverse_;
  double max_acceleration_forward_;
  double max_acceleration_reverse_;
  double min_time_sample_scaling_;
  double max_time_sample_scaling_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IpoptSolverConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.planning.IpoptSolverConfig) */ {
 public:
  IpoptSolverConfig();
  virtual ~IpoptSolverConfig();

  IpoptSolverConfig(const IpoptSolverConfig& from);

  inline IpoptSolverConfig& operator=(const IpoptSolverConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IpoptSolverConfig(IpoptSolverConfig&& from) noexcept
    : IpoptSolverConfig() {
    *this = ::std::move(from);
  }

  inline IpoptSolverConfig& operator=(IpoptSolverConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IpoptSolverConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpoptSolverConfig* internal_default_instance() {
    return reinterpret_cast<const IpoptSolverConfig*>(
               &_IpoptSolverConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(IpoptSolverConfig* other);
  friend void swap(IpoptSolverConfig& a, IpoptSolverConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IpoptSolverConfig* New() const final {
    return CreateMaybeMessage<IpoptSolverConfig>(NULL);
  }

  IpoptSolverConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IpoptSolverConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IpoptSolverConfig& from);
  void MergeFrom(const IpoptSolverConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IpoptSolverConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ipopt_print_timing_statistics = 9;
  bool has_ipopt_print_timing_statistics() const;
  void clear_ipopt_print_timing_statistics();
  static const int kIpoptPrintTimingStatisticsFieldNumber = 9;
  const ::std::string& ipopt_print_timing_statistics() const;
  void set_ipopt_print_timing_statistics(const ::std::string& value);
  #if LANG_CXX11
  void set_ipopt_print_timing_statistics(::std::string&& value);
  #endif
  void set_ipopt_print_timing_statistics(const char* value);
  void set_ipopt_print_timing_statistics(const char* value, size_t size);
  ::std::string* mutable_ipopt_print_timing_statistics();
  ::std::string* release_ipopt_print_timing_statistics();
  void set_allocated_ipopt_print_timing_statistics(::std::string* ipopt_print_timing_statistics);

  // optional string ipopt_alpha_for_y = 10;
  bool has_ipopt_alpha_for_y() const;
  void clear_ipopt_alpha_for_y();
  static const int kIpoptAlphaForYFieldNumber = 10;
  const ::std::string& ipopt_alpha_for_y() const;
  void set_ipopt_alpha_for_y(const ::std::string& value);
  #if LANG_CXX11
  void set_ipopt_alpha_for_y(::std::string&& value);
  #endif
  void set_ipopt_alpha_for_y(const char* value);
  void set_ipopt_alpha_for_y(const char* value, size_t size);
  ::std::string* mutable_ipopt_alpha_for_y();
  ::std::string* release_ipopt_alpha_for_y();
  void set_allocated_ipopt_alpha_for_y(::std::string* ipopt_alpha_for_y);

  // optional string ipopt_recalc_y = 11;
  bool has_ipopt_recalc_y() const;
  void clear_ipopt_recalc_y();
  static const int kIpoptRecalcYFieldNumber = 11;
  const ::std::string& ipopt_recalc_y() const;
  void set_ipopt_recalc_y(const ::std::string& value);
  #if LANG_CXX11
  void set_ipopt_recalc_y(::std::string&& value);
  #endif
  void set_ipopt_recalc_y(const char* value);
  void set_ipopt_recalc_y(const char* value, size_t size);
  ::std::string* mutable_ipopt_recalc_y();
  ::std::string* release_ipopt_recalc_y();
  void set_allocated_ipopt_recalc_y(::std::string* ipopt_recalc_y);

  // optional int32 ipopt_print_level = 1;
  bool has_ipopt_print_level() const;
  void clear_ipopt_print_level();
  static const int kIpoptPrintLevelFieldNumber = 1;
  ::google::protobuf::int32 ipopt_print_level() const;
  void set_ipopt_print_level(::google::protobuf::int32 value);

  // optional int32 mumps_mem_percent = 2;
  bool has_mumps_mem_percent() const;
  void clear_mumps_mem_percent();
  static const int kMumpsMemPercentFieldNumber = 2;
  ::google::protobuf::int32 mumps_mem_percent() const;
  void set_mumps_mem_percent(::google::protobuf::int32 value);

  // optional double mumps_pivtol = 3;
  bool has_mumps_pivtol() const;
  void clear_mumps_pivtol();
  static const int kMumpsPivtolFieldNumber = 3;
  double mumps_pivtol() const;
  void set_mumps_pivtol(double value);

  // optional double ipopt_tol = 5;
  bool has_ipopt_tol() const;
  void clear_ipopt_tol();
  static const int kIpoptTolFieldNumber = 5;
  double ipopt_tol() const;
  void set_ipopt_tol(double value);

  // optional double ipopt_acceptable_constr_viol_tol = 6;
  bool has_ipopt_acceptable_constr_viol_tol() const;
  void clear_ipopt_acceptable_constr_viol_tol();
  static const int kIpoptAcceptableConstrViolTolFieldNumber = 6;
  double ipopt_acceptable_constr_viol_tol() const;
  void set_ipopt_acceptable_constr_viol_tol(double value);

  // optional double ipopt_min_hessian_perturbation = 7;
  bool has_ipopt_min_hessian_perturbation() const;
  void clear_ipopt_min_hessian_perturbation();
  static const int kIpoptMinHessianPerturbationFieldNumber = 7;
  double ipopt_min_hessian_perturbation() const;
  void set_ipopt_min_hessian_perturbation(double value);

  // optional double ipopt_jacobian_regularization_value = 8;
  bool has_ipopt_jacobian_regularization_value() const;
  void clear_ipopt_jacobian_regularization_value();
  static const int kIpoptJacobianRegularizationValueFieldNumber = 8;
  double ipopt_jacobian_regularization_value() const;
  void set_ipopt_jacobian_regularization_value(double value);

  // optional int32 ipopt_max_iter = 4;
  bool has_ipopt_max_iter() const;
  void clear_ipopt_max_iter();
  static const int kIpoptMaxIterFieldNumber = 4;
  ::google::protobuf::int32 ipopt_max_iter() const;
  void set_ipopt_max_iter(::google::protobuf::int32 value);

  // optional double ipopt_mu_init = 12 [default = 0.1];
  bool has_ipopt_mu_init() const;
  void clear_ipopt_mu_init();
  static const int kIpoptMuInitFieldNumber = 12;
  double ipopt_mu_init() const;
  void set_ipopt_mu_init(double value);

  // @@protoc_insertion_point(class_scope:apollo.planning.IpoptSolverConfig)
 private:
  void set_has_ipopt_print_level();
  void clear_has_ipopt_print_level();
  void set_has_mumps_mem_percent();
  void clear_has_mumps_mem_percent();
  void set_has_mumps_pivtol();
  void clear_has_mumps_pivtol();
  void set_has_ipopt_max_iter();
  void clear_has_ipopt_max_iter();
  void set_has_ipopt_tol();
  void clear_has_ipopt_tol();
  void set_has_ipopt_acceptable_constr_viol_tol();
  void clear_has_ipopt_acceptable_constr_viol_tol();
  void set_has_ipopt_min_hessian_perturbation();
  void clear_has_ipopt_min_hessian_perturbation();
  void set_has_ipopt_jacobian_regularization_value();
  void clear_has_ipopt_jacobian_regularization_value();
  void set_has_ipopt_print_timing_statistics();
  void clear_has_ipopt_print_timing_statistics();
  void set_has_ipopt_alpha_for_y();
  void clear_has_ipopt_alpha_for_y();
  void set_has_ipopt_recalc_y();
  void clear_has_ipopt_recalc_y();
  void set_has_ipopt_mu_init();
  void clear_has_ipopt_mu_init();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ipopt_print_timing_statistics_;
  ::google::protobuf::internal::ArenaStringPtr ipopt_alpha_for_y_;
  ::google::protobuf::internal::ArenaStringPtr ipopt_recalc_y_;
  ::google::protobuf::int32 ipopt_print_level_;
  ::google::protobuf::int32 mumps_mem_percent_;
  double mumps_pivtol_;
  double ipopt_tol_;
  double ipopt_acceptable_constr_viol_tol_;
  double ipopt_min_hessian_perturbation_;
  double ipopt_jacobian_regularization_value_;
  ::google::protobuf::int32 ipopt_max_iter_;
  double ipopt_mu_init_;
  friend struct ::protobuf_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OpenSpaceFallBackDeciderConfig

// optional double open_space_prediction_time_period = 1 [default = 5];
inline bool OpenSpaceFallBackDeciderConfig::has_open_space_prediction_time_period() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenSpaceFallBackDeciderConfig::set_has_open_space_prediction_time_period() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenSpaceFallBackDeciderConfig::clear_has_open_space_prediction_time_period() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenSpaceFallBackDeciderConfig::clear_open_space_prediction_time_period() {
  open_space_prediction_time_period_ = 5;
  clear_has_open_space_prediction_time_period();
}
inline double OpenSpaceFallBackDeciderConfig::open_space_prediction_time_period() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceFallBackDeciderConfig.open_space_prediction_time_period)
  return open_space_prediction_time_period_;
}
inline void OpenSpaceFallBackDeciderConfig::set_open_space_prediction_time_period(double value) {
  set_has_open_space_prediction_time_period();
  open_space_prediction_time_period_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceFallBackDeciderConfig.open_space_prediction_time_period)
}

// optional double open_space_fallback_collision_distance = 2 [default = 5];
inline bool OpenSpaceFallBackDeciderConfig::has_open_space_fallback_collision_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenSpaceFallBackDeciderConfig::set_has_open_space_fallback_collision_distance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenSpaceFallBackDeciderConfig::clear_has_open_space_fallback_collision_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenSpaceFallBackDeciderConfig::clear_open_space_fallback_collision_distance() {
  open_space_fallback_collision_distance_ = 5;
  clear_has_open_space_fallback_collision_distance();
}
inline double OpenSpaceFallBackDeciderConfig::open_space_fallback_collision_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceFallBackDeciderConfig.open_space_fallback_collision_distance)
  return open_space_fallback_collision_distance_;
}
inline void OpenSpaceFallBackDeciderConfig::set_open_space_fallback_collision_distance(double value) {
  set_has_open_space_fallback_collision_distance();
  open_space_fallback_collision_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceFallBackDeciderConfig.open_space_fallback_collision_distance)
}

// optional double open_space_fallback_stop_distance = 3 [default = 2];
inline bool OpenSpaceFallBackDeciderConfig::has_open_space_fallback_stop_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpenSpaceFallBackDeciderConfig::set_has_open_space_fallback_stop_distance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpenSpaceFallBackDeciderConfig::clear_has_open_space_fallback_stop_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpenSpaceFallBackDeciderConfig::clear_open_space_fallback_stop_distance() {
  open_space_fallback_stop_distance_ = 2;
  clear_has_open_space_fallback_stop_distance();
}
inline double OpenSpaceFallBackDeciderConfig::open_space_fallback_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceFallBackDeciderConfig.open_space_fallback_stop_distance)
  return open_space_fallback_stop_distance_;
}
inline void OpenSpaceFallBackDeciderConfig::set_open_space_fallback_stop_distance(double value) {
  set_has_open_space_fallback_stop_distance();
  open_space_fallback_stop_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceFallBackDeciderConfig.open_space_fallback_stop_distance)
}

// optional double open_space_fallback_collision_time_buffer = 4 [default = 10];
inline bool OpenSpaceFallBackDeciderConfig::has_open_space_fallback_collision_time_buffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OpenSpaceFallBackDeciderConfig::set_has_open_space_fallback_collision_time_buffer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OpenSpaceFallBackDeciderConfig::clear_has_open_space_fallback_collision_time_buffer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OpenSpaceFallBackDeciderConfig::clear_open_space_fallback_collision_time_buffer() {
  open_space_fallback_collision_time_buffer_ = 10;
  clear_has_open_space_fallback_collision_time_buffer();
}
inline double OpenSpaceFallBackDeciderConfig::open_space_fallback_collision_time_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceFallBackDeciderConfig.open_space_fallback_collision_time_buffer)
  return open_space_fallback_collision_time_buffer_;
}
inline void OpenSpaceFallBackDeciderConfig::set_open_space_fallback_collision_time_buffer(double value) {
  set_has_open_space_fallback_collision_time_buffer();
  open_space_fallback_collision_time_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceFallBackDeciderConfig.open_space_fallback_collision_time_buffer)
}

// -------------------------------------------------------------------

// OpenSpacePreStopDeciderConfig

// optional .apollo.planning.OpenSpacePreStopDeciderConfig.StopType stop_type = 1;
inline bool OpenSpacePreStopDeciderConfig::has_stop_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenSpacePreStopDeciderConfig::set_has_stop_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenSpacePreStopDeciderConfig::clear_has_stop_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenSpacePreStopDeciderConfig::clear_stop_type() {
  stop_type_ = 0;
  clear_has_stop_type();
}
inline ::apollo::planning::OpenSpacePreStopDeciderConfig_StopType OpenSpacePreStopDeciderConfig::stop_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpacePreStopDeciderConfig.stop_type)
  return static_cast< ::apollo::planning::OpenSpacePreStopDeciderConfig_StopType >(stop_type_);
}
inline void OpenSpacePreStopDeciderConfig::set_stop_type(::apollo::planning::OpenSpacePreStopDeciderConfig_StopType value) {
  assert(::apollo::planning::OpenSpacePreStopDeciderConfig_StopType_IsValid(value));
  set_has_stop_type();
  stop_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpacePreStopDeciderConfig.stop_type)
}

// optional double rightaway_stop_distance = 2 [default = 2];
inline bool OpenSpacePreStopDeciderConfig::has_rightaway_stop_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenSpacePreStopDeciderConfig::set_has_rightaway_stop_distance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenSpacePreStopDeciderConfig::clear_has_rightaway_stop_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenSpacePreStopDeciderConfig::clear_rightaway_stop_distance() {
  rightaway_stop_distance_ = 2;
  clear_has_rightaway_stop_distance();
}
inline double OpenSpacePreStopDeciderConfig::rightaway_stop_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpacePreStopDeciderConfig.rightaway_stop_distance)
  return rightaway_stop_distance_;
}
inline void OpenSpacePreStopDeciderConfig::set_rightaway_stop_distance(double value) {
  set_has_rightaway_stop_distance();
  rightaway_stop_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpacePreStopDeciderConfig.rightaway_stop_distance)
}

// optional double stop_distance_to_target = 3 [default = 5];
inline bool OpenSpacePreStopDeciderConfig::has_stop_distance_to_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpenSpacePreStopDeciderConfig::set_has_stop_distance_to_target() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpenSpacePreStopDeciderConfig::clear_has_stop_distance_to_target() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpenSpacePreStopDeciderConfig::clear_stop_distance_to_target() {
  stop_distance_to_target_ = 5;
  clear_has_stop_distance_to_target();
}
inline double OpenSpacePreStopDeciderConfig::stop_distance_to_target() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpacePreStopDeciderConfig.stop_distance_to_target)
  return stop_distance_to_target_;
}
inline void OpenSpacePreStopDeciderConfig::set_stop_distance_to_target(double value) {
  set_has_stop_distance_to_target();
  stop_distance_to_target_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpacePreStopDeciderConfig.stop_distance_to_target)
}

// -------------------------------------------------------------------

// OpenSpaceRoiDeciderConfig

// optional .apollo.planning.OpenSpaceRoiDeciderConfig.RoiType roi_type = 1;
inline bool OpenSpaceRoiDeciderConfig::has_roi_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_roi_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_roi_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenSpaceRoiDeciderConfig::clear_roi_type() {
  roi_type_ = 0;
  clear_has_roi_type();
}
inline ::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType OpenSpaceRoiDeciderConfig::roi_type() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.roi_type)
  return static_cast< ::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType >(roi_type_);
}
inline void OpenSpaceRoiDeciderConfig::set_roi_type(::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType value) {
  assert(::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType_IsValid(value));
  set_has_roi_type();
  roi_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.roi_type)
}

// optional double roi_longitudinal_range_start = 2 [default = 10];
inline bool OpenSpaceRoiDeciderConfig::has_roi_longitudinal_range_start() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_roi_longitudinal_range_start() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_roi_longitudinal_range_start() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OpenSpaceRoiDeciderConfig::clear_roi_longitudinal_range_start() {
  roi_longitudinal_range_start_ = 10;
  clear_has_roi_longitudinal_range_start();
}
inline double OpenSpaceRoiDeciderConfig::roi_longitudinal_range_start() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.roi_longitudinal_range_start)
  return roi_longitudinal_range_start_;
}
inline void OpenSpaceRoiDeciderConfig::set_roi_longitudinal_range_start(double value) {
  set_has_roi_longitudinal_range_start();
  roi_longitudinal_range_start_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.roi_longitudinal_range_start)
}

// optional double roi_longitudinal_range_end = 3 [default = 10];
inline bool OpenSpaceRoiDeciderConfig::has_roi_longitudinal_range_end() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_roi_longitudinal_range_end() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_roi_longitudinal_range_end() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OpenSpaceRoiDeciderConfig::clear_roi_longitudinal_range_end() {
  roi_longitudinal_range_end_ = 10;
  clear_has_roi_longitudinal_range_end();
}
inline double OpenSpaceRoiDeciderConfig::roi_longitudinal_range_end() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.roi_longitudinal_range_end)
  return roi_longitudinal_range_end_;
}
inline void OpenSpaceRoiDeciderConfig::set_roi_longitudinal_range_end(double value) {
  set_has_roi_longitudinal_range_end();
  roi_longitudinal_range_end_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.roi_longitudinal_range_end)
}

// optional double parking_start_range = 4 [default = 7];
inline bool OpenSpaceRoiDeciderConfig::has_parking_start_range() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_parking_start_range() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_parking_start_range() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OpenSpaceRoiDeciderConfig::clear_parking_start_range() {
  parking_start_range_ = 7;
  clear_has_parking_start_range();
}
inline double OpenSpaceRoiDeciderConfig::parking_start_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.parking_start_range)
  return parking_start_range_;
}
inline void OpenSpaceRoiDeciderConfig::set_parking_start_range(double value) {
  set_has_parking_start_range();
  parking_start_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.parking_start_range)
}

// optional bool parking_inwards = 5 [default = false];
inline bool OpenSpaceRoiDeciderConfig::has_parking_inwards() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_parking_inwards() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_parking_inwards() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenSpaceRoiDeciderConfig::clear_parking_inwards() {
  parking_inwards_ = false;
  clear_has_parking_inwards();
}
inline bool OpenSpaceRoiDeciderConfig::parking_inwards() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.parking_inwards)
  return parking_inwards_;
}
inline void OpenSpaceRoiDeciderConfig::set_parking_inwards(bool value) {
  set_has_parking_inwards();
  parking_inwards_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.parking_inwards)
}

// optional bool enable_perception_obstacles = 6;
inline bool OpenSpaceRoiDeciderConfig::has_enable_perception_obstacles() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_enable_perception_obstacles() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_enable_perception_obstacles() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpenSpaceRoiDeciderConfig::clear_enable_perception_obstacles() {
  enable_perception_obstacles_ = false;
  clear_has_enable_perception_obstacles();
}
inline bool OpenSpaceRoiDeciderConfig::enable_perception_obstacles() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.enable_perception_obstacles)
  return enable_perception_obstacles_;
}
inline void OpenSpaceRoiDeciderConfig::set_enable_perception_obstacles(bool value) {
  set_has_enable_perception_obstacles();
  enable_perception_obstacles_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.enable_perception_obstacles)
}

// optional double parking_depth_buffer = 7 [default = 0.1];
inline bool OpenSpaceRoiDeciderConfig::has_parking_depth_buffer() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_parking_depth_buffer() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_parking_depth_buffer() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OpenSpaceRoiDeciderConfig::clear_parking_depth_buffer() {
  parking_depth_buffer_ = 0.1;
  clear_has_parking_depth_buffer();
}
inline double OpenSpaceRoiDeciderConfig::parking_depth_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.parking_depth_buffer)
  return parking_depth_buffer_;
}
inline void OpenSpaceRoiDeciderConfig::set_parking_depth_buffer(double value) {
  set_has_parking_depth_buffer();
  parking_depth_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.parking_depth_buffer)
}

// optional double roi_line_segment_min_angle = 8 [default = 0.3];
inline bool OpenSpaceRoiDeciderConfig::has_roi_line_segment_min_angle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_roi_line_segment_min_angle() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_roi_line_segment_min_angle() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OpenSpaceRoiDeciderConfig::clear_roi_line_segment_min_angle() {
  roi_line_segment_min_angle_ = 0.3;
  clear_has_roi_line_segment_min_angle();
}
inline double OpenSpaceRoiDeciderConfig::roi_line_segment_min_angle() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.roi_line_segment_min_angle)
  return roi_line_segment_min_angle_;
}
inline void OpenSpaceRoiDeciderConfig::set_roi_line_segment_min_angle(double value) {
  set_has_roi_line_segment_min_angle();
  roi_line_segment_min_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.roi_line_segment_min_angle)
}

// optional double roi_line_segment_length = 9 [default = 1];
inline bool OpenSpaceRoiDeciderConfig::has_roi_line_segment_length() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_roi_line_segment_length() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_roi_line_segment_length() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OpenSpaceRoiDeciderConfig::clear_roi_line_segment_length() {
  roi_line_segment_length_ = 1;
  clear_has_roi_line_segment_length();
}
inline double OpenSpaceRoiDeciderConfig::roi_line_segment_length() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.roi_line_segment_length)
  return roi_line_segment_length_;
}
inline void OpenSpaceRoiDeciderConfig::set_roi_line_segment_length(double value) {
  set_has_roi_line_segment_length();
  roi_line_segment_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.roi_line_segment_length)
}

// optional double roi_line_segment_length_from_map = 10 [default = 10];
inline bool OpenSpaceRoiDeciderConfig::has_roi_line_segment_length_from_map() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_roi_line_segment_length_from_map() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_roi_line_segment_length_from_map() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OpenSpaceRoiDeciderConfig::clear_roi_line_segment_length_from_map() {
  roi_line_segment_length_from_map_ = 10;
  clear_has_roi_line_segment_length_from_map();
}
inline double OpenSpaceRoiDeciderConfig::roi_line_segment_length_from_map() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.roi_line_segment_length_from_map)
  return roi_line_segment_length_from_map_;
}
inline void OpenSpaceRoiDeciderConfig::set_roi_line_segment_length_from_map(double value) {
  set_has_roi_line_segment_length_from_map();
  roi_line_segment_length_from_map_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.roi_line_segment_length_from_map)
}

// optional double perception_obstacle_filtering_distance = 11 [default = 1000];
inline bool OpenSpaceRoiDeciderConfig::has_perception_obstacle_filtering_distance() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_perception_obstacle_filtering_distance() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_perception_obstacle_filtering_distance() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OpenSpaceRoiDeciderConfig::clear_perception_obstacle_filtering_distance() {
  perception_obstacle_filtering_distance_ = 1000;
  clear_has_perception_obstacle_filtering_distance();
}
inline double OpenSpaceRoiDeciderConfig::perception_obstacle_filtering_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.perception_obstacle_filtering_distance)
  return perception_obstacle_filtering_distance_;
}
inline void OpenSpaceRoiDeciderConfig::set_perception_obstacle_filtering_distance(double value) {
  set_has_perception_obstacle_filtering_distance();
  perception_obstacle_filtering_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.perception_obstacle_filtering_distance)
}

// optional double perception_obstacle_buffer = 12;
inline bool OpenSpaceRoiDeciderConfig::has_perception_obstacle_buffer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_perception_obstacle_buffer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_perception_obstacle_buffer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OpenSpaceRoiDeciderConfig::clear_perception_obstacle_buffer() {
  perception_obstacle_buffer_ = 0;
  clear_has_perception_obstacle_buffer();
}
inline double OpenSpaceRoiDeciderConfig::perception_obstacle_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.perception_obstacle_buffer)
  return perception_obstacle_buffer_;
}
inline void OpenSpaceRoiDeciderConfig::set_perception_obstacle_buffer(double value) {
  set_has_perception_obstacle_buffer();
  perception_obstacle_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.perception_obstacle_buffer)
}

// optional double curb_heading_tangent_change_upper_limit = 13 [default = 1];
inline bool OpenSpaceRoiDeciderConfig::has_curb_heading_tangent_change_upper_limit() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_curb_heading_tangent_change_upper_limit() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_curb_heading_tangent_change_upper_limit() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OpenSpaceRoiDeciderConfig::clear_curb_heading_tangent_change_upper_limit() {
  curb_heading_tangent_change_upper_limit_ = 1;
  clear_has_curb_heading_tangent_change_upper_limit();
}
inline double OpenSpaceRoiDeciderConfig::curb_heading_tangent_change_upper_limit() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.curb_heading_tangent_change_upper_limit)
  return curb_heading_tangent_change_upper_limit_;
}
inline void OpenSpaceRoiDeciderConfig::set_curb_heading_tangent_change_upper_limit(double value) {
  set_has_curb_heading_tangent_change_upper_limit();
  curb_heading_tangent_change_upper_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.curb_heading_tangent_change_upper_limit)
}

// optional double end_pose_s_distance = 14 [default = 10];
inline bool OpenSpaceRoiDeciderConfig::has_end_pose_s_distance() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_end_pose_s_distance() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_end_pose_s_distance() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OpenSpaceRoiDeciderConfig::clear_end_pose_s_distance() {
  end_pose_s_distance_ = 10;
  clear_has_end_pose_s_distance();
}
inline double OpenSpaceRoiDeciderConfig::end_pose_s_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.end_pose_s_distance)
  return end_pose_s_distance_;
}
inline void OpenSpaceRoiDeciderConfig::set_end_pose_s_distance(double value) {
  set_has_end_pose_s_distance();
  end_pose_s_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.end_pose_s_distance)
}

// optional double parallel_park_end_x_buffer = 15 [default = 0.2];
inline bool OpenSpaceRoiDeciderConfig::has_parallel_park_end_x_buffer() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_parallel_park_end_x_buffer() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_parallel_park_end_x_buffer() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OpenSpaceRoiDeciderConfig::clear_parallel_park_end_x_buffer() {
  parallel_park_end_x_buffer_ = 0.2;
  clear_has_parallel_park_end_x_buffer();
}
inline double OpenSpaceRoiDeciderConfig::parallel_park_end_x_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.parallel_park_end_x_buffer)
  return parallel_park_end_x_buffer_;
}
inline void OpenSpaceRoiDeciderConfig::set_parallel_park_end_x_buffer(double value) {
  set_has_parallel_park_end_x_buffer();
  parallel_park_end_x_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.parallel_park_end_x_buffer)
}

// optional double extend_right_x_buffer = 16 [default = 0];
inline bool OpenSpaceRoiDeciderConfig::has_extend_right_x_buffer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_extend_right_x_buffer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_extend_right_x_buffer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OpenSpaceRoiDeciderConfig::clear_extend_right_x_buffer() {
  extend_right_x_buffer_ = 0;
  clear_has_extend_right_x_buffer();
}
inline double OpenSpaceRoiDeciderConfig::extend_right_x_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.extend_right_x_buffer)
  return extend_right_x_buffer_;
}
inline void OpenSpaceRoiDeciderConfig::set_extend_right_x_buffer(double value) {
  set_has_extend_right_x_buffer();
  extend_right_x_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.extend_right_x_buffer)
}

// optional double extend_left_x_buffer = 17 [default = 0];
inline bool OpenSpaceRoiDeciderConfig::has_extend_left_x_buffer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OpenSpaceRoiDeciderConfig::set_has_extend_left_x_buffer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OpenSpaceRoiDeciderConfig::clear_has_extend_left_x_buffer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OpenSpaceRoiDeciderConfig::clear_extend_left_x_buffer() {
  extend_left_x_buffer_ = 0;
  clear_has_extend_left_x_buffer();
}
inline double OpenSpaceRoiDeciderConfig::extend_left_x_buffer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceRoiDeciderConfig.extend_left_x_buffer)
  return extend_left_x_buffer_;
}
inline void OpenSpaceRoiDeciderConfig::set_extend_left_x_buffer(double value) {
  set_has_extend_left_x_buffer();
  extend_left_x_buffer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceRoiDeciderConfig.extend_left_x_buffer)
}

// -------------------------------------------------------------------

// OpenSpaceTrajectoryPartitionConfig

// optional double gear_shift_max_t = 1;
inline bool OpenSpaceTrajectoryPartitionConfig::has_gear_shift_max_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_gear_shift_max_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_gear_shift_max_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_gear_shift_max_t() {
  gear_shift_max_t_ = 0;
  clear_has_gear_shift_max_t();
}
inline double OpenSpaceTrajectoryPartitionConfig::gear_shift_max_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_max_t)
  return gear_shift_max_t_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_gear_shift_max_t(double value) {
  set_has_gear_shift_max_t();
  gear_shift_max_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_max_t)
}

// optional double gear_shift_unit_t = 2;
inline bool OpenSpaceTrajectoryPartitionConfig::has_gear_shift_unit_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_gear_shift_unit_t() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_gear_shift_unit_t() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_gear_shift_unit_t() {
  gear_shift_unit_t_ = 0;
  clear_has_gear_shift_unit_t();
}
inline double OpenSpaceTrajectoryPartitionConfig::gear_shift_unit_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_unit_t)
  return gear_shift_unit_t_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_gear_shift_unit_t(double value) {
  set_has_gear_shift_unit_t();
  gear_shift_unit_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_unit_t)
}

// optional double gear_shift_period_duration = 3;
inline bool OpenSpaceTrajectoryPartitionConfig::has_gear_shift_period_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_gear_shift_period_duration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_gear_shift_period_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_gear_shift_period_duration() {
  gear_shift_period_duration_ = 0;
  clear_has_gear_shift_period_duration();
}
inline double OpenSpaceTrajectoryPartitionConfig::gear_shift_period_duration() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_period_duration)
  return gear_shift_period_duration_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_gear_shift_period_duration(double value) {
  set_has_gear_shift_period_duration();
  gear_shift_period_duration_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.gear_shift_period_duration)
}

// optional uint64 interpolated_pieces_num = 4;
inline bool OpenSpaceTrajectoryPartitionConfig::has_interpolated_pieces_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_interpolated_pieces_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_interpolated_pieces_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_interpolated_pieces_num() {
  interpolated_pieces_num_ = GOOGLE_ULONGLONG(0);
  clear_has_interpolated_pieces_num();
}
inline ::google::protobuf::uint64 OpenSpaceTrajectoryPartitionConfig::interpolated_pieces_num() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.interpolated_pieces_num)
  return interpolated_pieces_num_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_interpolated_pieces_num(::google::protobuf::uint64 value) {
  set_has_interpolated_pieces_num();
  interpolated_pieces_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.interpolated_pieces_num)
}

// optional uint64 initial_gear_check_horizon = 5;
inline bool OpenSpaceTrajectoryPartitionConfig::has_initial_gear_check_horizon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_initial_gear_check_horizon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_initial_gear_check_horizon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_initial_gear_check_horizon() {
  initial_gear_check_horizon_ = GOOGLE_ULONGLONG(0);
  clear_has_initial_gear_check_horizon();
}
inline ::google::protobuf::uint64 OpenSpaceTrajectoryPartitionConfig::initial_gear_check_horizon() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.initial_gear_check_horizon)
  return initial_gear_check_horizon_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_initial_gear_check_horizon(::google::protobuf::uint64 value) {
  set_has_initial_gear_check_horizon();
  initial_gear_check_horizon_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.initial_gear_check_horizon)
}

// optional double heading_search_range = 6;
inline bool OpenSpaceTrajectoryPartitionConfig::has_heading_search_range() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_heading_search_range() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_heading_search_range() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_heading_search_range() {
  heading_search_range_ = 0;
  clear_has_heading_search_range();
}
inline double OpenSpaceTrajectoryPartitionConfig::heading_search_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.heading_search_range)
  return heading_search_range_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_heading_search_range(double value) {
  set_has_heading_search_range();
  heading_search_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.heading_search_range)
}

// optional double heading_track_range = 7;
inline bool OpenSpaceTrajectoryPartitionConfig::has_heading_track_range() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_heading_track_range() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_heading_track_range() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_heading_track_range() {
  heading_track_range_ = 0;
  clear_has_heading_track_range();
}
inline double OpenSpaceTrajectoryPartitionConfig::heading_track_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.heading_track_range)
  return heading_track_range_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_heading_track_range(double value) {
  set_has_heading_track_range();
  heading_track_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.heading_track_range)
}

// optional double distance_search_range = 8 [default = 1e-06];
inline bool OpenSpaceTrajectoryPartitionConfig::has_distance_search_range() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_distance_search_range() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_distance_search_range() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_distance_search_range() {
  distance_search_range_ = 1e-06;
  clear_has_distance_search_range();
}
inline double OpenSpaceTrajectoryPartitionConfig::distance_search_range() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.distance_search_range)
  return distance_search_range_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_distance_search_range(double value) {
  set_has_distance_search_range();
  distance_search_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.distance_search_range)
}

// optional double heading_offset_to_midpoint = 9;
inline bool OpenSpaceTrajectoryPartitionConfig::has_heading_offset_to_midpoint() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_heading_offset_to_midpoint() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_heading_offset_to_midpoint() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_heading_offset_to_midpoint() {
  heading_offset_to_midpoint_ = 0;
  clear_has_heading_offset_to_midpoint();
}
inline double OpenSpaceTrajectoryPartitionConfig::heading_offset_to_midpoint() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.heading_offset_to_midpoint)
  return heading_offset_to_midpoint_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_heading_offset_to_midpoint(double value) {
  set_has_heading_offset_to_midpoint();
  heading_offset_to_midpoint_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.heading_offset_to_midpoint)
}

// optional double lateral_offset_to_midpoint = 10 [default = 0.1];
inline bool OpenSpaceTrajectoryPartitionConfig::has_lateral_offset_to_midpoint() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_lateral_offset_to_midpoint() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_lateral_offset_to_midpoint() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_lateral_offset_to_midpoint() {
  lateral_offset_to_midpoint_ = 0.1;
  clear_has_lateral_offset_to_midpoint();
}
inline double OpenSpaceTrajectoryPartitionConfig::lateral_offset_to_midpoint() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.lateral_offset_to_midpoint)
  return lateral_offset_to_midpoint_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_lateral_offset_to_midpoint(double value) {
  set_has_lateral_offset_to_midpoint();
  lateral_offset_to_midpoint_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.lateral_offset_to_midpoint)
}

// optional double longitudinal_offset_to_midpoint = 11 [default = 0.1];
inline bool OpenSpaceTrajectoryPartitionConfig::has_longitudinal_offset_to_midpoint() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_longitudinal_offset_to_midpoint() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_longitudinal_offset_to_midpoint() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_longitudinal_offset_to_midpoint() {
  longitudinal_offset_to_midpoint_ = 0.1;
  clear_has_longitudinal_offset_to_midpoint();
}
inline double OpenSpaceTrajectoryPartitionConfig::longitudinal_offset_to_midpoint() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.longitudinal_offset_to_midpoint)
  return longitudinal_offset_to_midpoint_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_longitudinal_offset_to_midpoint(double value) {
  set_has_longitudinal_offset_to_midpoint();
  longitudinal_offset_to_midpoint_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.longitudinal_offset_to_midpoint)
}

// optional double vehicle_box_iou_threshold_to_midpoint = 12 [default = 0.95];
inline bool OpenSpaceTrajectoryPartitionConfig::has_vehicle_box_iou_threshold_to_midpoint() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_vehicle_box_iou_threshold_to_midpoint() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_vehicle_box_iou_threshold_to_midpoint() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_vehicle_box_iou_threshold_to_midpoint() {
  vehicle_box_iou_threshold_to_midpoint_ = 0.95;
  clear_has_vehicle_box_iou_threshold_to_midpoint();
}
inline double OpenSpaceTrajectoryPartitionConfig::vehicle_box_iou_threshold_to_midpoint() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.vehicle_box_iou_threshold_to_midpoint)
  return vehicle_box_iou_threshold_to_midpoint_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_vehicle_box_iou_threshold_to_midpoint(double value) {
  set_has_vehicle_box_iou_threshold_to_midpoint();
  vehicle_box_iou_threshold_to_midpoint_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.vehicle_box_iou_threshold_to_midpoint)
}

// optional double linear_velocity_threshold_on_ego = 13 [default = 0.2];
inline bool OpenSpaceTrajectoryPartitionConfig::has_linear_velocity_threshold_on_ego() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_has_linear_velocity_threshold_on_ego() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_has_linear_velocity_threshold_on_ego() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OpenSpaceTrajectoryPartitionConfig::clear_linear_velocity_threshold_on_ego() {
  linear_velocity_threshold_on_ego_ = 0.2;
  clear_has_linear_velocity_threshold_on_ego();
}
inline double OpenSpaceTrajectoryPartitionConfig::linear_velocity_threshold_on_ego() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryPartitionConfig.linear_velocity_threshold_on_ego)
  return linear_velocity_threshold_on_ego_;
}
inline void OpenSpaceTrajectoryPartitionConfig::set_linear_velocity_threshold_on_ego(double value) {
  set_has_linear_velocity_threshold_on_ego();
  linear_velocity_threshold_on_ego_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryPartitionConfig.linear_velocity_threshold_on_ego)
}

// -------------------------------------------------------------------

// OpenSpaceTrajectoryProviderConfig

// optional .apollo.planning.OpenSpaceTrajectoryOptimizerConfig open_space_trajectory_optimizer_config = 1;
inline bool OpenSpaceTrajectoryProviderConfig::has_open_space_trajectory_optimizer_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenSpaceTrajectoryProviderConfig::set_has_open_space_trajectory_optimizer_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenSpaceTrajectoryProviderConfig::clear_has_open_space_trajectory_optimizer_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenSpaceTrajectoryProviderConfig::clear_open_space_trajectory_optimizer_config() {
  if (open_space_trajectory_optimizer_config_ != NULL) open_space_trajectory_optimizer_config_->Clear();
  clear_has_open_space_trajectory_optimizer_config();
}
inline const ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig& OpenSpaceTrajectoryProviderConfig::_internal_open_space_trajectory_optimizer_config() const {
  return *open_space_trajectory_optimizer_config_;
}
inline const ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig& OpenSpaceTrajectoryProviderConfig::open_space_trajectory_optimizer_config() const {
  const ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* p = open_space_trajectory_optimizer_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryProviderConfig.open_space_trajectory_optimizer_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig*>(
      &::apollo::planning::_OpenSpaceTrajectoryOptimizerConfig_default_instance_);
}
inline ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* OpenSpaceTrajectoryProviderConfig::release_open_space_trajectory_optimizer_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.OpenSpaceTrajectoryProviderConfig.open_space_trajectory_optimizer_config)
  clear_has_open_space_trajectory_optimizer_config();
  ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* temp = open_space_trajectory_optimizer_config_;
  open_space_trajectory_optimizer_config_ = NULL;
  return temp;
}
inline ::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* OpenSpaceTrajectoryProviderConfig::mutable_open_space_trajectory_optimizer_config() {
  set_has_open_space_trajectory_optimizer_config();
  if (open_space_trajectory_optimizer_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::OpenSpaceTrajectoryOptimizerConfig>(GetArenaNoVirtual());
    open_space_trajectory_optimizer_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.OpenSpaceTrajectoryProviderConfig.open_space_trajectory_optimizer_config)
  return open_space_trajectory_optimizer_config_;
}
inline void OpenSpaceTrajectoryProviderConfig::set_allocated_open_space_trajectory_optimizer_config(::apollo::planning::OpenSpaceTrajectoryOptimizerConfig* open_space_trajectory_optimizer_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete open_space_trajectory_optimizer_config_;
  }
  if (open_space_trajectory_optimizer_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      open_space_trajectory_optimizer_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, open_space_trajectory_optimizer_config, submessage_arena);
    }
    set_has_open_space_trajectory_optimizer_config();
  } else {
    clear_has_open_space_trajectory_optimizer_config();
  }
  open_space_trajectory_optimizer_config_ = open_space_trajectory_optimizer_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.OpenSpaceTrajectoryProviderConfig.open_space_trajectory_optimizer_config)
}

// -------------------------------------------------------------------

// OpenSpaceTrajectoryOptimizerConfig

// optional .apollo.planning.HybridAStarConfig hybrid_a_star_config = 1;
inline bool OpenSpaceTrajectoryOptimizerConfig::has_hybrid_a_star_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_has_hybrid_a_star_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_has_hybrid_a_star_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_hybrid_a_star_config() {
  if (hybrid_a_star_config_ != NULL) hybrid_a_star_config_->Clear();
  clear_has_hybrid_a_star_config();
}
inline const ::apollo::planning::HybridAStarConfig& OpenSpaceTrajectoryOptimizerConfig::_internal_hybrid_a_star_config() const {
  return *hybrid_a_star_config_;
}
inline const ::apollo::planning::HybridAStarConfig& OpenSpaceTrajectoryOptimizerConfig::hybrid_a_star_config() const {
  const ::apollo::planning::HybridAStarConfig* p = hybrid_a_star_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.hybrid_a_star_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::HybridAStarConfig*>(
      &::apollo::planning::_HybridAStarConfig_default_instance_);
}
inline ::apollo::planning::HybridAStarConfig* OpenSpaceTrajectoryOptimizerConfig::release_hybrid_a_star_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.hybrid_a_star_config)
  clear_has_hybrid_a_star_config();
  ::apollo::planning::HybridAStarConfig* temp = hybrid_a_star_config_;
  hybrid_a_star_config_ = NULL;
  return temp;
}
inline ::apollo::planning::HybridAStarConfig* OpenSpaceTrajectoryOptimizerConfig::mutable_hybrid_a_star_config() {
  set_has_hybrid_a_star_config();
  if (hybrid_a_star_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::HybridAStarConfig>(GetArenaNoVirtual());
    hybrid_a_star_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.hybrid_a_star_config)
  return hybrid_a_star_config_;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_allocated_hybrid_a_star_config(::apollo::planning::HybridAStarConfig* hybrid_a_star_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hybrid_a_star_config_;
  }
  if (hybrid_a_star_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hybrid_a_star_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hybrid_a_star_config, submessage_arena);
    }
    set_has_hybrid_a_star_config();
  } else {
    clear_has_hybrid_a_star_config();
  }
  hybrid_a_star_config_ = hybrid_a_star_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.hybrid_a_star_config)
}

// optional .apollo.planning.DualVariableConfig dual_variable_warm_start_config = 2;
inline bool OpenSpaceTrajectoryOptimizerConfig::has_dual_variable_warm_start_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_has_dual_variable_warm_start_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_has_dual_variable_warm_start_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_dual_variable_warm_start_config() {
  if (dual_variable_warm_start_config_ != NULL) dual_variable_warm_start_config_->Clear();
  clear_has_dual_variable_warm_start_config();
}
inline const ::apollo::planning::DualVariableConfig& OpenSpaceTrajectoryOptimizerConfig::_internal_dual_variable_warm_start_config() const {
  return *dual_variable_warm_start_config_;
}
inline const ::apollo::planning::DualVariableConfig& OpenSpaceTrajectoryOptimizerConfig::dual_variable_warm_start_config() const {
  const ::apollo::planning::DualVariableConfig* p = dual_variable_warm_start_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.dual_variable_warm_start_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::DualVariableConfig*>(
      &::apollo::planning::_DualVariableConfig_default_instance_);
}
inline ::apollo::planning::DualVariableConfig* OpenSpaceTrajectoryOptimizerConfig::release_dual_variable_warm_start_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.dual_variable_warm_start_config)
  clear_has_dual_variable_warm_start_config();
  ::apollo::planning::DualVariableConfig* temp = dual_variable_warm_start_config_;
  dual_variable_warm_start_config_ = NULL;
  return temp;
}
inline ::apollo::planning::DualVariableConfig* OpenSpaceTrajectoryOptimizerConfig::mutable_dual_variable_warm_start_config() {
  set_has_dual_variable_warm_start_config();
  if (dual_variable_warm_start_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::DualVariableConfig>(GetArenaNoVirtual());
    dual_variable_warm_start_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.dual_variable_warm_start_config)
  return dual_variable_warm_start_config_;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_allocated_dual_variable_warm_start_config(::apollo::planning::DualVariableConfig* dual_variable_warm_start_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dual_variable_warm_start_config_;
  }
  if (dual_variable_warm_start_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dual_variable_warm_start_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dual_variable_warm_start_config, submessage_arena);
    }
    set_has_dual_variable_warm_start_config();
  } else {
    clear_has_dual_variable_warm_start_config();
  }
  dual_variable_warm_start_config_ = dual_variable_warm_start_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.dual_variable_warm_start_config)
}

// optional .apollo.planning.DistanceApproachTrajectorySmootherConfig distance_approach_trajectory_smoother_config = 3;
inline bool OpenSpaceTrajectoryOptimizerConfig::has_distance_approach_trajectory_smoother_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_has_distance_approach_trajectory_smoother_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_has_distance_approach_trajectory_smoother_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_distance_approach_trajectory_smoother_config() {
  if (distance_approach_trajectory_smoother_config_ != NULL) distance_approach_trajectory_smoother_config_->Clear();
  clear_has_distance_approach_trajectory_smoother_config();
}
inline const ::apollo::planning::DistanceApproachTrajectorySmootherConfig& OpenSpaceTrajectoryOptimizerConfig::_internal_distance_approach_trajectory_smoother_config() const {
  return *distance_approach_trajectory_smoother_config_;
}
inline const ::apollo::planning::DistanceApproachTrajectorySmootherConfig& OpenSpaceTrajectoryOptimizerConfig::distance_approach_trajectory_smoother_config() const {
  const ::apollo::planning::DistanceApproachTrajectorySmootherConfig* p = distance_approach_trajectory_smoother_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.distance_approach_trajectory_smoother_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::DistanceApproachTrajectorySmootherConfig*>(
      &::apollo::planning::_DistanceApproachTrajectorySmootherConfig_default_instance_);
}
inline ::apollo::planning::DistanceApproachTrajectorySmootherConfig* OpenSpaceTrajectoryOptimizerConfig::release_distance_approach_trajectory_smoother_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.distance_approach_trajectory_smoother_config)
  clear_has_distance_approach_trajectory_smoother_config();
  ::apollo::planning::DistanceApproachTrajectorySmootherConfig* temp = distance_approach_trajectory_smoother_config_;
  distance_approach_trajectory_smoother_config_ = NULL;
  return temp;
}
inline ::apollo::planning::DistanceApproachTrajectorySmootherConfig* OpenSpaceTrajectoryOptimizerConfig::mutable_distance_approach_trajectory_smoother_config() {
  set_has_distance_approach_trajectory_smoother_config();
  if (distance_approach_trajectory_smoother_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::DistanceApproachTrajectorySmootherConfig>(GetArenaNoVirtual());
    distance_approach_trajectory_smoother_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.distance_approach_trajectory_smoother_config)
  return distance_approach_trajectory_smoother_config_;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_allocated_distance_approach_trajectory_smoother_config(::apollo::planning::DistanceApproachTrajectorySmootherConfig* distance_approach_trajectory_smoother_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete distance_approach_trajectory_smoother_config_;
  }
  if (distance_approach_trajectory_smoother_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      distance_approach_trajectory_smoother_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, distance_approach_trajectory_smoother_config, submessage_arena);
    }
    set_has_distance_approach_trajectory_smoother_config();
  } else {
    clear_has_distance_approach_trajectory_smoother_config();
  }
  distance_approach_trajectory_smoother_config_ = distance_approach_trajectory_smoother_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.distance_approach_trajectory_smoother_config)
}

// optional float delta_t = 4 [default = 0.5];
inline bool OpenSpaceTrajectoryOptimizerConfig::has_delta_t() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_has_delta_t() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_has_delta_t() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_delta_t() {
  delta_t_ = 0.5f;
  clear_has_delta_t();
}
inline float OpenSpaceTrajectoryOptimizerConfig::delta_t() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.delta_t)
  return delta_t_;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_delta_t(float value) {
  set_has_delta_t();
  delta_t_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.delta_t)
}

// optional double is_near_destination_threshold = 5 [default = 0.001];
inline bool OpenSpaceTrajectoryOptimizerConfig::has_is_near_destination_threshold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_has_is_near_destination_threshold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_has_is_near_destination_threshold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_is_near_destination_threshold() {
  is_near_destination_threshold_ = 0.001;
  clear_has_is_near_destination_threshold();
}
inline double OpenSpaceTrajectoryOptimizerConfig::is_near_destination_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.is_near_destination_threshold)
  return is_near_destination_threshold_;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_is_near_destination_threshold(double value) {
  set_has_is_near_destination_threshold();
  is_near_destination_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.is_near_destination_threshold)
}

// optional .apollo.planning.PlannerOpenSpaceConfig planner_open_space_config = 6;
inline bool OpenSpaceTrajectoryOptimizerConfig::has_planner_open_space_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_has_planner_open_space_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OpenSpaceTrajectoryOptimizerConfig::clear_has_planner_open_space_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::planning::PlannerOpenSpaceConfig& OpenSpaceTrajectoryOptimizerConfig::_internal_planner_open_space_config() const {
  return *planner_open_space_config_;
}
inline const ::apollo::planning::PlannerOpenSpaceConfig& OpenSpaceTrajectoryOptimizerConfig::planner_open_space_config() const {
  const ::apollo::planning::PlannerOpenSpaceConfig* p = planner_open_space_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.planner_open_space_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::PlannerOpenSpaceConfig*>(
      &::apollo::planning::_PlannerOpenSpaceConfig_default_instance_);
}
inline ::apollo::planning::PlannerOpenSpaceConfig* OpenSpaceTrajectoryOptimizerConfig::release_planner_open_space_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.planner_open_space_config)
  clear_has_planner_open_space_config();
  ::apollo::planning::PlannerOpenSpaceConfig* temp = planner_open_space_config_;
  planner_open_space_config_ = NULL;
  return temp;
}
inline ::apollo::planning::PlannerOpenSpaceConfig* OpenSpaceTrajectoryOptimizerConfig::mutable_planner_open_space_config() {
  set_has_planner_open_space_config();
  if (planner_open_space_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::PlannerOpenSpaceConfig>(GetArenaNoVirtual());
    planner_open_space_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.planner_open_space_config)
  return planner_open_space_config_;
}
inline void OpenSpaceTrajectoryOptimizerConfig::set_allocated_planner_open_space_config(::apollo::planning::PlannerOpenSpaceConfig* planner_open_space_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(planner_open_space_config_);
  }
  if (planner_open_space_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      planner_open_space_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, planner_open_space_config, submessage_arena);
    }
    set_has_planner_open_space_config();
  } else {
    clear_has_planner_open_space_config();
  }
  planner_open_space_config_ = planner_open_space_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.OpenSpaceTrajectoryOptimizerConfig.planner_open_space_config)
}

// -------------------------------------------------------------------

// HybridAStarConfig

// optional double xy_grid_resolution = 1 [default = 0.2];
inline bool HybridAStarConfig::has_xy_grid_resolution() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HybridAStarConfig::set_has_xy_grid_resolution() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HybridAStarConfig::clear_has_xy_grid_resolution() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HybridAStarConfig::clear_xy_grid_resolution() {
  xy_grid_resolution_ = 0.2;
  clear_has_xy_grid_resolution();
}
inline double HybridAStarConfig::xy_grid_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.xy_grid_resolution)
  return xy_grid_resolution_;
}
inline void HybridAStarConfig::set_xy_grid_resolution(double value) {
  set_has_xy_grid_resolution();
  xy_grid_resolution_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.xy_grid_resolution)
}

// optional double phi_grid_resolution = 2 [default = 0.05];
inline bool HybridAStarConfig::has_phi_grid_resolution() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HybridAStarConfig::set_has_phi_grid_resolution() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HybridAStarConfig::clear_has_phi_grid_resolution() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HybridAStarConfig::clear_phi_grid_resolution() {
  phi_grid_resolution_ = 0.05;
  clear_has_phi_grid_resolution();
}
inline double HybridAStarConfig::phi_grid_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.phi_grid_resolution)
  return phi_grid_resolution_;
}
inline void HybridAStarConfig::set_phi_grid_resolution(double value) {
  set_has_phi_grid_resolution();
  phi_grid_resolution_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.phi_grid_resolution)
}

// optional uint64 next_node_num = 3 [default = 10];
inline bool HybridAStarConfig::has_next_node_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HybridAStarConfig::set_has_next_node_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HybridAStarConfig::clear_has_next_node_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HybridAStarConfig::clear_next_node_num() {
  next_node_num_ = GOOGLE_ULONGLONG(10);
  clear_has_next_node_num();
}
inline ::google::protobuf::uint64 HybridAStarConfig::next_node_num() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.next_node_num)
  return next_node_num_;
}
inline void HybridAStarConfig::set_next_node_num(::google::protobuf::uint64 value) {
  set_has_next_node_num();
  next_node_num_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.next_node_num)
}

// optional double step_size = 4 [default = 0.5];
inline bool HybridAStarConfig::has_step_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HybridAStarConfig::set_has_step_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HybridAStarConfig::clear_has_step_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HybridAStarConfig::clear_step_size() {
  step_size_ = 0.5;
  clear_has_step_size();
}
inline double HybridAStarConfig::step_size() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.step_size)
  return step_size_;
}
inline void HybridAStarConfig::set_step_size(double value) {
  set_has_step_size();
  step_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.step_size)
}

// optional double traj_forward_penalty = 5 [default = 0];
inline bool HybridAStarConfig::has_traj_forward_penalty() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HybridAStarConfig::set_has_traj_forward_penalty() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HybridAStarConfig::clear_has_traj_forward_penalty() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HybridAStarConfig::clear_traj_forward_penalty() {
  traj_forward_penalty_ = 0;
  clear_has_traj_forward_penalty();
}
inline double HybridAStarConfig::traj_forward_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.traj_forward_penalty)
  return traj_forward_penalty_;
}
inline void HybridAStarConfig::set_traj_forward_penalty(double value) {
  set_has_traj_forward_penalty();
  traj_forward_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.traj_forward_penalty)
}

// optional double traj_back_penalty = 6 [default = 0];
inline bool HybridAStarConfig::has_traj_back_penalty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HybridAStarConfig::set_has_traj_back_penalty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HybridAStarConfig::clear_has_traj_back_penalty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HybridAStarConfig::clear_traj_back_penalty() {
  traj_back_penalty_ = 0;
  clear_has_traj_back_penalty();
}
inline double HybridAStarConfig::traj_back_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.traj_back_penalty)
  return traj_back_penalty_;
}
inline void HybridAStarConfig::set_traj_back_penalty(double value) {
  set_has_traj_back_penalty();
  traj_back_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.traj_back_penalty)
}

// optional double traj_gear_switch_penalty = 7 [default = 10];
inline bool HybridAStarConfig::has_traj_gear_switch_penalty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HybridAStarConfig::set_has_traj_gear_switch_penalty() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HybridAStarConfig::clear_has_traj_gear_switch_penalty() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HybridAStarConfig::clear_traj_gear_switch_penalty() {
  traj_gear_switch_penalty_ = 10;
  clear_has_traj_gear_switch_penalty();
}
inline double HybridAStarConfig::traj_gear_switch_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.traj_gear_switch_penalty)
  return traj_gear_switch_penalty_;
}
inline void HybridAStarConfig::set_traj_gear_switch_penalty(double value) {
  set_has_traj_gear_switch_penalty();
  traj_gear_switch_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.traj_gear_switch_penalty)
}

// optional double traj_steer_penalty = 8 [default = 100];
inline bool HybridAStarConfig::has_traj_steer_penalty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HybridAStarConfig::set_has_traj_steer_penalty() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HybridAStarConfig::clear_has_traj_steer_penalty() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HybridAStarConfig::clear_traj_steer_penalty() {
  traj_steer_penalty_ = 100;
  clear_has_traj_steer_penalty();
}
inline double HybridAStarConfig::traj_steer_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.traj_steer_penalty)
  return traj_steer_penalty_;
}
inline void HybridAStarConfig::set_traj_steer_penalty(double value) {
  set_has_traj_steer_penalty();
  traj_steer_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.traj_steer_penalty)
}

// optional double traj_steer_change_penalty = 9 [default = 10];
inline bool HybridAStarConfig::has_traj_steer_change_penalty() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HybridAStarConfig::set_has_traj_steer_change_penalty() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HybridAStarConfig::clear_has_traj_steer_change_penalty() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HybridAStarConfig::clear_traj_steer_change_penalty() {
  traj_steer_change_penalty_ = 10;
  clear_has_traj_steer_change_penalty();
}
inline double HybridAStarConfig::traj_steer_change_penalty() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.traj_steer_change_penalty)
  return traj_steer_change_penalty_;
}
inline void HybridAStarConfig::set_traj_steer_change_penalty(double value) {
  set_has_traj_steer_change_penalty();
  traj_steer_change_penalty_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.traj_steer_change_penalty)
}

// optional double grid_a_star_xy_resolution = 15 [default = 0.1];
inline bool HybridAStarConfig::has_grid_a_star_xy_resolution() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HybridAStarConfig::set_has_grid_a_star_xy_resolution() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HybridAStarConfig::clear_has_grid_a_star_xy_resolution() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HybridAStarConfig::clear_grid_a_star_xy_resolution() {
  grid_a_star_xy_resolution_ = 0.1;
  clear_has_grid_a_star_xy_resolution();
}
inline double HybridAStarConfig::grid_a_star_xy_resolution() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.grid_a_star_xy_resolution)
  return grid_a_star_xy_resolution_;
}
inline void HybridAStarConfig::set_grid_a_star_xy_resolution(double value) {
  set_has_grid_a_star_xy_resolution();
  grid_a_star_xy_resolution_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.grid_a_star_xy_resolution)
}

// optional double node_radius = 16 [default = 0.5];
inline bool HybridAStarConfig::has_node_radius() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HybridAStarConfig::set_has_node_radius() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HybridAStarConfig::clear_has_node_radius() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HybridAStarConfig::clear_node_radius() {
  node_radius_ = 0.5;
  clear_has_node_radius();
}
inline double HybridAStarConfig::node_radius() const {
  // @@protoc_insertion_point(field_get:apollo.planning.HybridAStarConfig.node_radius)
  return node_radius_;
}
inline void HybridAStarConfig::set_node_radius(double value) {
  set_has_node_radius();
  node_radius_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.HybridAStarConfig.node_radius)
}

// -------------------------------------------------------------------

// DualVariableConfig

// optional double weight_d = 1 [default = 1];
inline bool DualVariableConfig::has_weight_d() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DualVariableConfig::set_has_weight_d() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DualVariableConfig::clear_has_weight_d() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DualVariableConfig::clear_weight_d() {
  weight_d_ = 1;
  clear_has_weight_d();
}
inline double DualVariableConfig::weight_d() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableConfig.weight_d)
  return weight_d_;
}
inline void DualVariableConfig::set_weight_d(double value) {
  set_has_weight_d();
  weight_d_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DualVariableConfig.weight_d)
}

// optional .apollo.planning.IpoptSolverConfig ipopt_config = 2;
inline bool DualVariableConfig::has_ipopt_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DualVariableConfig::set_has_ipopt_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DualVariableConfig::clear_has_ipopt_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DualVariableConfig::clear_ipopt_config() {
  if (ipopt_config_ != NULL) ipopt_config_->Clear();
  clear_has_ipopt_config();
}
inline const ::apollo::planning::IpoptSolverConfig& DualVariableConfig::_internal_ipopt_config() const {
  return *ipopt_config_;
}
inline const ::apollo::planning::IpoptSolverConfig& DualVariableConfig::ipopt_config() const {
  const ::apollo::planning::IpoptSolverConfig* p = ipopt_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableConfig.ipopt_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::IpoptSolverConfig*>(
      &::apollo::planning::_IpoptSolverConfig_default_instance_);
}
inline ::apollo::planning::IpoptSolverConfig* DualVariableConfig::release_ipopt_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.DualVariableConfig.ipopt_config)
  clear_has_ipopt_config();
  ::apollo::planning::IpoptSolverConfig* temp = ipopt_config_;
  ipopt_config_ = NULL;
  return temp;
}
inline ::apollo::planning::IpoptSolverConfig* DualVariableConfig::mutable_ipopt_config() {
  set_has_ipopt_config();
  if (ipopt_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::IpoptSolverConfig>(GetArenaNoVirtual());
    ipopt_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.DualVariableConfig.ipopt_config)
  return ipopt_config_;
}
inline void DualVariableConfig::set_allocated_ipopt_config(::apollo::planning::IpoptSolverConfig* ipopt_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ipopt_config_;
  }
  if (ipopt_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ipopt_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ipopt_config, submessage_arena);
    }
    set_has_ipopt_config();
  } else {
    clear_has_ipopt_config();
  }
  ipopt_config_ = ipopt_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DualVariableConfig.ipopt_config)
}

// optional .apollo.planning.DualVariableMode qp_format = 3;
inline bool DualVariableConfig::has_qp_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DualVariableConfig::set_has_qp_format() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DualVariableConfig::clear_has_qp_format() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DualVariableConfig::clear_qp_format() {
  qp_format_ = 0;
  clear_has_qp_format();
}
inline ::apollo::planning::DualVariableMode DualVariableConfig::qp_format() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableConfig.qp_format)
  return static_cast< ::apollo::planning::DualVariableMode >(qp_format_);
}
inline void DualVariableConfig::set_qp_format(::apollo::planning::DualVariableMode value) {
  assert(::apollo::planning::DualVariableMode_IsValid(value));
  set_has_qp_format();
  qp_format_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DualVariableConfig.qp_format)
}

// optional double min_safety_distance = 4 [default = 0];
inline bool DualVariableConfig::has_min_safety_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DualVariableConfig::set_has_min_safety_distance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DualVariableConfig::clear_has_min_safety_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DualVariableConfig::clear_min_safety_distance() {
  min_safety_distance_ = 0;
  clear_has_min_safety_distance();
}
inline double DualVariableConfig::min_safety_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableConfig.min_safety_distance)
  return min_safety_distance_;
}
inline void DualVariableConfig::set_min_safety_distance(double value) {
  set_has_min_safety_distance();
  min_safety_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DualVariableConfig.min_safety_distance)
}

// optional bool debug_osqp = 5 [default = false];
inline bool DualVariableConfig::has_debug_osqp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DualVariableConfig::set_has_debug_osqp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DualVariableConfig::clear_has_debug_osqp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DualVariableConfig::clear_debug_osqp() {
  debug_osqp_ = false;
  clear_has_debug_osqp();
}
inline bool DualVariableConfig::debug_osqp() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableConfig.debug_osqp)
  return debug_osqp_;
}
inline void DualVariableConfig::set_debug_osqp(bool value) {
  set_has_debug_osqp();
  debug_osqp_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DualVariableConfig.debug_osqp)
}

// optional double beta = 6 [default = 1];
inline bool DualVariableConfig::has_beta() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DualVariableConfig::set_has_beta() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DualVariableConfig::clear_has_beta() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DualVariableConfig::clear_beta() {
  beta_ = 1;
  clear_has_beta();
}
inline double DualVariableConfig::beta() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DualVariableConfig.beta)
  return beta_;
}
inline void DualVariableConfig::set_beta(double value) {
  set_has_beta();
  beta_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DualVariableConfig.beta)
}

// -------------------------------------------------------------------

// DistanceApproachTrajectorySmootherConfig

// optional double weight_steer = 1;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_steer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_steer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_steer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_steer() {
  weight_steer_ = 0;
  clear_has_weight_steer();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_steer() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_steer)
  return weight_steer_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_steer(double value) {
  set_has_weight_steer();
  weight_steer_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_steer)
}

// optional double weight_a = 2;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_a() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_a() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_a() {
  weight_a_ = 0;
  clear_has_weight_a();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_a() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_a)
  return weight_a_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_a(double value) {
  set_has_weight_a();
  weight_a_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_a)
}

// optional double weight_steer_rate = 3;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_steer_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_steer_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_steer_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_steer_rate() {
  weight_steer_rate_ = 0;
  clear_has_weight_steer_rate();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_steer_rate() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_steer_rate)
  return weight_steer_rate_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_steer_rate(double value) {
  set_has_weight_steer_rate();
  weight_steer_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_steer_rate)
}

// optional double weight_a_rate = 4;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_a_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_a_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_a_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_a_rate() {
  weight_a_rate_ = 0;
  clear_has_weight_a_rate();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_a_rate() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_a_rate)
  return weight_a_rate_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_a_rate(double value) {
  set_has_weight_a_rate();
  weight_a_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_a_rate)
}

// optional double weight_x = 5;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_x() {
  weight_x_ = 0;
  clear_has_weight_x();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_x() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_x)
  return weight_x_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_x(double value) {
  set_has_weight_x();
  weight_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_x)
}

// optional double weight_y = 6;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_y() {
  weight_y_ = 0;
  clear_has_weight_y();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_y)
  return weight_y_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_y(double value) {
  set_has_weight_y();
  weight_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_y)
}

// optional double weight_phi = 7;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_phi() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_phi() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_phi() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_phi() {
  weight_phi_ = 0;
  clear_has_weight_phi();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_phi() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_phi)
  return weight_phi_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_phi(double value) {
  set_has_weight_phi();
  weight_phi_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_phi)
}

// optional double weight_v = 8;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_v() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_v() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_v() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_v() {
  weight_v_ = 0;
  clear_has_weight_v();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_v() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_v)
  return weight_v_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_v(double value) {
  set_has_weight_v();
  weight_v_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_v)
}

// optional double weight_steer_stitching = 9;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_steer_stitching() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_steer_stitching() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_steer_stitching() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_steer_stitching() {
  weight_steer_stitching_ = 0;
  clear_has_weight_steer_stitching();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_steer_stitching() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_steer_stitching)
  return weight_steer_stitching_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_steer_stitching(double value) {
  set_has_weight_steer_stitching();
  weight_steer_stitching_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_steer_stitching)
}

// optional double weight_a_stitching = 10;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_a_stitching() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_a_stitching() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_a_stitching() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_a_stitching() {
  weight_a_stitching_ = 0;
  clear_has_weight_a_stitching();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_a_stitching() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_a_stitching)
  return weight_a_stitching_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_a_stitching(double value) {
  set_has_weight_a_stitching();
  weight_a_stitching_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_a_stitching)
}

// optional double weight_first_order_time = 11;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_first_order_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_first_order_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_first_order_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_first_order_time() {
  weight_first_order_time_ = 0;
  clear_has_weight_first_order_time();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_first_order_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_first_order_time)
  return weight_first_order_time_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_first_order_time(double value) {
  set_has_weight_first_order_time();
  weight_first_order_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_first_order_time)
}

// optional double weight_second_order_time = 12;
inline bool DistanceApproachTrajectorySmootherConfig::has_weight_second_order_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_weight_second_order_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_weight_second_order_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_weight_second_order_time() {
  weight_second_order_time_ = 0;
  clear_has_weight_second_order_time();
}
inline double DistanceApproachTrajectorySmootherConfig::weight_second_order_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_second_order_time)
  return weight_second_order_time_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_weight_second_order_time(double value) {
  set_has_weight_second_order_time();
  weight_second_order_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.weight_second_order_time)
}

// optional double min_safety_distance = 13 [default = 0];
inline bool DistanceApproachTrajectorySmootherConfig::has_min_safety_distance() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_min_safety_distance() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_min_safety_distance() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_min_safety_distance() {
  min_safety_distance_ = 0;
  clear_has_min_safety_distance();
}
inline double DistanceApproachTrajectorySmootherConfig::min_safety_distance() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.min_safety_distance)
  return min_safety_distance_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_min_safety_distance(double value) {
  set_has_min_safety_distance();
  min_safety_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.min_safety_distance)
}

// optional double max_speed_forward = 14 [default = 3];
inline bool DistanceApproachTrajectorySmootherConfig::has_max_speed_forward() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_max_speed_forward() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_max_speed_forward() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_max_speed_forward() {
  max_speed_forward_ = 3;
  clear_has_max_speed_forward();
}
inline double DistanceApproachTrajectorySmootherConfig::max_speed_forward() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.max_speed_forward)
  return max_speed_forward_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_max_speed_forward(double value) {
  set_has_max_speed_forward();
  max_speed_forward_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.max_speed_forward)
}

// optional double max_speed_reverse = 15 [default = 2];
inline bool DistanceApproachTrajectorySmootherConfig::has_max_speed_reverse() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_max_speed_reverse() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_max_speed_reverse() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_max_speed_reverse() {
  max_speed_reverse_ = 2;
  clear_has_max_speed_reverse();
}
inline double DistanceApproachTrajectorySmootherConfig::max_speed_reverse() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.max_speed_reverse)
  return max_speed_reverse_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_max_speed_reverse(double value) {
  set_has_max_speed_reverse();
  max_speed_reverse_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.max_speed_reverse)
}

// optional double max_acceleration_forward = 16 [default = 2];
inline bool DistanceApproachTrajectorySmootherConfig::has_max_acceleration_forward() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_max_acceleration_forward() {
  _has_bits_[0] |= 0x00200000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_max_acceleration_forward() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_max_acceleration_forward() {
  max_acceleration_forward_ = 2;
  clear_has_max_acceleration_forward();
}
inline double DistanceApproachTrajectorySmootherConfig::max_acceleration_forward() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.max_acceleration_forward)
  return max_acceleration_forward_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_max_acceleration_forward(double value) {
  set_has_max_acceleration_forward();
  max_acceleration_forward_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.max_acceleration_forward)
}

// optional double max_acceleration_reverse = 17 [default = 2];
inline bool DistanceApproachTrajectorySmootherConfig::has_max_acceleration_reverse() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_max_acceleration_reverse() {
  _has_bits_[0] |= 0x00400000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_max_acceleration_reverse() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_max_acceleration_reverse() {
  max_acceleration_reverse_ = 2;
  clear_has_max_acceleration_reverse();
}
inline double DistanceApproachTrajectorySmootherConfig::max_acceleration_reverse() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.max_acceleration_reverse)
  return max_acceleration_reverse_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_max_acceleration_reverse(double value) {
  set_has_max_acceleration_reverse();
  max_acceleration_reverse_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.max_acceleration_reverse)
}

// optional double min_time_sample_scaling = 18 [default = 0.1];
inline bool DistanceApproachTrajectorySmootherConfig::has_min_time_sample_scaling() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_min_time_sample_scaling() {
  _has_bits_[0] |= 0x00800000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_min_time_sample_scaling() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_min_time_sample_scaling() {
  min_time_sample_scaling_ = 0.1;
  clear_has_min_time_sample_scaling();
}
inline double DistanceApproachTrajectorySmootherConfig::min_time_sample_scaling() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.min_time_sample_scaling)
  return min_time_sample_scaling_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_min_time_sample_scaling(double value) {
  set_has_min_time_sample_scaling();
  min_time_sample_scaling_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.min_time_sample_scaling)
}

// optional double max_time_sample_scaling = 19 [default = 10];
inline bool DistanceApproachTrajectorySmootherConfig::has_max_time_sample_scaling() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_max_time_sample_scaling() {
  _has_bits_[0] |= 0x01000000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_max_time_sample_scaling() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_max_time_sample_scaling() {
  max_time_sample_scaling_ = 10;
  clear_has_max_time_sample_scaling();
}
inline double DistanceApproachTrajectorySmootherConfig::max_time_sample_scaling() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.max_time_sample_scaling)
  return max_time_sample_scaling_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_max_time_sample_scaling(double value) {
  set_has_max_time_sample_scaling();
  max_time_sample_scaling_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.max_time_sample_scaling)
}

// optional bool use_fix_time = 20 [default = false];
inline bool DistanceApproachTrajectorySmootherConfig::has_use_fix_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_use_fix_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_use_fix_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_use_fix_time() {
  use_fix_time_ = false;
  clear_has_use_fix_time();
}
inline bool DistanceApproachTrajectorySmootherConfig::use_fix_time() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.use_fix_time)
  return use_fix_time_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_use_fix_time(bool value) {
  set_has_use_fix_time();
  use_fix_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.use_fix_time)
}

// optional .apollo.planning.IpoptSolverConfig ipopt_config = 21;
inline bool DistanceApproachTrajectorySmootherConfig::has_ipopt_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_ipopt_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_ipopt_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_ipopt_config() {
  if (ipopt_config_ != NULL) ipopt_config_->Clear();
  clear_has_ipopt_config();
}
inline const ::apollo::planning::IpoptSolverConfig& DistanceApproachTrajectorySmootherConfig::_internal_ipopt_config() const {
  return *ipopt_config_;
}
inline const ::apollo::planning::IpoptSolverConfig& DistanceApproachTrajectorySmootherConfig::ipopt_config() const {
  const ::apollo::planning::IpoptSolverConfig* p = ipopt_config_;
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.ipopt_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::planning::IpoptSolverConfig*>(
      &::apollo::planning::_IpoptSolverConfig_default_instance_);
}
inline ::apollo::planning::IpoptSolverConfig* DistanceApproachTrajectorySmootherConfig::release_ipopt_config() {
  // @@protoc_insertion_point(field_release:apollo.planning.DistanceApproachTrajectorySmootherConfig.ipopt_config)
  clear_has_ipopt_config();
  ::apollo::planning::IpoptSolverConfig* temp = ipopt_config_;
  ipopt_config_ = NULL;
  return temp;
}
inline ::apollo::planning::IpoptSolverConfig* DistanceApproachTrajectorySmootherConfig::mutable_ipopt_config() {
  set_has_ipopt_config();
  if (ipopt_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::planning::IpoptSolverConfig>(GetArenaNoVirtual());
    ipopt_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.planning.DistanceApproachTrajectorySmootherConfig.ipopt_config)
  return ipopt_config_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_allocated_ipopt_config(::apollo::planning::IpoptSolverConfig* ipopt_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ipopt_config_;
  }
  if (ipopt_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ipopt_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ipopt_config, submessage_arena);
    }
    set_has_ipopt_config();
  } else {
    clear_has_ipopt_config();
  }
  ipopt_config_ = ipopt_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.DistanceApproachTrajectorySmootherConfig.ipopt_config)
}

// optional bool enable_constraint_check = 22;
inline bool DistanceApproachTrajectorySmootherConfig::has_enable_constraint_check() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_enable_constraint_check() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_enable_constraint_check() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_enable_constraint_check() {
  enable_constraint_check_ = false;
  clear_has_enable_constraint_check();
}
inline bool DistanceApproachTrajectorySmootherConfig::enable_constraint_check() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.enable_constraint_check)
  return enable_constraint_check_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_enable_constraint_check(bool value) {
  set_has_enable_constraint_check();
  enable_constraint_check_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.enable_constraint_check)
}

// optional bool enable_hand_derivative = 23;
inline bool DistanceApproachTrajectorySmootherConfig::has_enable_hand_derivative() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_enable_hand_derivative() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_enable_hand_derivative() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_enable_hand_derivative() {
  enable_hand_derivative_ = false;
  clear_has_enable_hand_derivative();
}
inline bool DistanceApproachTrajectorySmootherConfig::enable_hand_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.enable_hand_derivative)
  return enable_hand_derivative_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_enable_hand_derivative(bool value) {
  set_has_enable_hand_derivative();
  enable_hand_derivative_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.enable_hand_derivative)
}

// optional bool enable_derivative_check = 24;
inline bool DistanceApproachTrajectorySmootherConfig::has_enable_derivative_check() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_enable_derivative_check() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_enable_derivative_check() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_enable_derivative_check() {
  enable_derivative_check_ = false;
  clear_has_enable_derivative_check();
}
inline bool DistanceApproachTrajectorySmootherConfig::enable_derivative_check() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.enable_derivative_check)
  return enable_derivative_check_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_enable_derivative_check(bool value) {
  set_has_enable_derivative_check();
  enable_derivative_check_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.enable_derivative_check)
}

// optional bool enable_initial_final_check = 25 [default = false];
inline bool DistanceApproachTrajectorySmootherConfig::has_enable_initial_final_check() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DistanceApproachTrajectorySmootherConfig::set_has_enable_initial_final_check() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_has_enable_initial_final_check() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DistanceApproachTrajectorySmootherConfig::clear_enable_initial_final_check() {
  enable_initial_final_check_ = false;
  clear_has_enable_initial_final_check();
}
inline bool DistanceApproachTrajectorySmootherConfig::enable_initial_final_check() const {
  // @@protoc_insertion_point(field_get:apollo.planning.DistanceApproachTrajectorySmootherConfig.enable_initial_final_check)
  return enable_initial_final_check_;
}
inline void DistanceApproachTrajectorySmootherConfig::set_enable_initial_final_check(bool value) {
  set_has_enable_initial_final_check();
  enable_initial_final_check_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.DistanceApproachTrajectorySmootherConfig.enable_initial_final_check)
}

// -------------------------------------------------------------------

// IpoptSolverConfig

// optional int32 ipopt_print_level = 1;
inline bool IpoptSolverConfig::has_ipopt_print_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IpoptSolverConfig::set_has_ipopt_print_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IpoptSolverConfig::clear_has_ipopt_print_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IpoptSolverConfig::clear_ipopt_print_level() {
  ipopt_print_level_ = 0;
  clear_has_ipopt_print_level();
}
inline ::google::protobuf::int32 IpoptSolverConfig::ipopt_print_level() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.ipopt_print_level)
  return ipopt_print_level_;
}
inline void IpoptSolverConfig::set_ipopt_print_level(::google::protobuf::int32 value) {
  set_has_ipopt_print_level();
  ipopt_print_level_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.ipopt_print_level)
}

// optional int32 mumps_mem_percent = 2;
inline bool IpoptSolverConfig::has_mumps_mem_percent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IpoptSolverConfig::set_has_mumps_mem_percent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void IpoptSolverConfig::clear_has_mumps_mem_percent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void IpoptSolverConfig::clear_mumps_mem_percent() {
  mumps_mem_percent_ = 0;
  clear_has_mumps_mem_percent();
}
inline ::google::protobuf::int32 IpoptSolverConfig::mumps_mem_percent() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.mumps_mem_percent)
  return mumps_mem_percent_;
}
inline void IpoptSolverConfig::set_mumps_mem_percent(::google::protobuf::int32 value) {
  set_has_mumps_mem_percent();
  mumps_mem_percent_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.mumps_mem_percent)
}

// optional double mumps_pivtol = 3;
inline bool IpoptSolverConfig::has_mumps_pivtol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IpoptSolverConfig::set_has_mumps_pivtol() {
  _has_bits_[0] |= 0x00000020u;
}
inline void IpoptSolverConfig::clear_has_mumps_pivtol() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void IpoptSolverConfig::clear_mumps_pivtol() {
  mumps_pivtol_ = 0;
  clear_has_mumps_pivtol();
}
inline double IpoptSolverConfig::mumps_pivtol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.mumps_pivtol)
  return mumps_pivtol_;
}
inline void IpoptSolverConfig::set_mumps_pivtol(double value) {
  set_has_mumps_pivtol();
  mumps_pivtol_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.mumps_pivtol)
}

// optional int32 ipopt_max_iter = 4;
inline bool IpoptSolverConfig::has_ipopt_max_iter() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void IpoptSolverConfig::set_has_ipopt_max_iter() {
  _has_bits_[0] |= 0x00000400u;
}
inline void IpoptSolverConfig::clear_has_ipopt_max_iter() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void IpoptSolverConfig::clear_ipopt_max_iter() {
  ipopt_max_iter_ = 0;
  clear_has_ipopt_max_iter();
}
inline ::google::protobuf::int32 IpoptSolverConfig::ipopt_max_iter() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.ipopt_max_iter)
  return ipopt_max_iter_;
}
inline void IpoptSolverConfig::set_ipopt_max_iter(::google::protobuf::int32 value) {
  set_has_ipopt_max_iter();
  ipopt_max_iter_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.ipopt_max_iter)
}

// optional double ipopt_tol = 5;
inline bool IpoptSolverConfig::has_ipopt_tol() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IpoptSolverConfig::set_has_ipopt_tol() {
  _has_bits_[0] |= 0x00000040u;
}
inline void IpoptSolverConfig::clear_has_ipopt_tol() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void IpoptSolverConfig::clear_ipopt_tol() {
  ipopt_tol_ = 0;
  clear_has_ipopt_tol();
}
inline double IpoptSolverConfig::ipopt_tol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.ipopt_tol)
  return ipopt_tol_;
}
inline void IpoptSolverConfig::set_ipopt_tol(double value) {
  set_has_ipopt_tol();
  ipopt_tol_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.ipopt_tol)
}

// optional double ipopt_acceptable_constr_viol_tol = 6;
inline bool IpoptSolverConfig::has_ipopt_acceptable_constr_viol_tol() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IpoptSolverConfig::set_has_ipopt_acceptable_constr_viol_tol() {
  _has_bits_[0] |= 0x00000080u;
}
inline void IpoptSolverConfig::clear_has_ipopt_acceptable_constr_viol_tol() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void IpoptSolverConfig::clear_ipopt_acceptable_constr_viol_tol() {
  ipopt_acceptable_constr_viol_tol_ = 0;
  clear_has_ipopt_acceptable_constr_viol_tol();
}
inline double IpoptSolverConfig::ipopt_acceptable_constr_viol_tol() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.ipopt_acceptable_constr_viol_tol)
  return ipopt_acceptable_constr_viol_tol_;
}
inline void IpoptSolverConfig::set_ipopt_acceptable_constr_viol_tol(double value) {
  set_has_ipopt_acceptable_constr_viol_tol();
  ipopt_acceptable_constr_viol_tol_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.ipopt_acceptable_constr_viol_tol)
}

// optional double ipopt_min_hessian_perturbation = 7;
inline bool IpoptSolverConfig::has_ipopt_min_hessian_perturbation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IpoptSolverConfig::set_has_ipopt_min_hessian_perturbation() {
  _has_bits_[0] |= 0x00000100u;
}
inline void IpoptSolverConfig::clear_has_ipopt_min_hessian_perturbation() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void IpoptSolverConfig::clear_ipopt_min_hessian_perturbation() {
  ipopt_min_hessian_perturbation_ = 0;
  clear_has_ipopt_min_hessian_perturbation();
}
inline double IpoptSolverConfig::ipopt_min_hessian_perturbation() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.ipopt_min_hessian_perturbation)
  return ipopt_min_hessian_perturbation_;
}
inline void IpoptSolverConfig::set_ipopt_min_hessian_perturbation(double value) {
  set_has_ipopt_min_hessian_perturbation();
  ipopt_min_hessian_perturbation_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.ipopt_min_hessian_perturbation)
}

// optional double ipopt_jacobian_regularization_value = 8;
inline bool IpoptSolverConfig::has_ipopt_jacobian_regularization_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void IpoptSolverConfig::set_has_ipopt_jacobian_regularization_value() {
  _has_bits_[0] |= 0x00000200u;
}
inline void IpoptSolverConfig::clear_has_ipopt_jacobian_regularization_value() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void IpoptSolverConfig::clear_ipopt_jacobian_regularization_value() {
  ipopt_jacobian_regularization_value_ = 0;
  clear_has_ipopt_jacobian_regularization_value();
}
inline double IpoptSolverConfig::ipopt_jacobian_regularization_value() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.ipopt_jacobian_regularization_value)
  return ipopt_jacobian_regularization_value_;
}
inline void IpoptSolverConfig::set_ipopt_jacobian_regularization_value(double value) {
  set_has_ipopt_jacobian_regularization_value();
  ipopt_jacobian_regularization_value_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.ipopt_jacobian_regularization_value)
}

// optional string ipopt_print_timing_statistics = 9;
inline bool IpoptSolverConfig::has_ipopt_print_timing_statistics() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IpoptSolverConfig::set_has_ipopt_print_timing_statistics() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IpoptSolverConfig::clear_has_ipopt_print_timing_statistics() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IpoptSolverConfig::clear_ipopt_print_timing_statistics() {
  ipopt_print_timing_statistics_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipopt_print_timing_statistics();
}
inline const ::std::string& IpoptSolverConfig::ipopt_print_timing_statistics() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
  return ipopt_print_timing_statistics_.GetNoArena();
}
inline void IpoptSolverConfig::set_ipopt_print_timing_statistics(const ::std::string& value) {
  set_has_ipopt_print_timing_statistics();
  ipopt_print_timing_statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
}
#if LANG_CXX11
inline void IpoptSolverConfig::set_ipopt_print_timing_statistics(::std::string&& value) {
  set_has_ipopt_print_timing_statistics();
  ipopt_print_timing_statistics_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
}
#endif
inline void IpoptSolverConfig::set_ipopt_print_timing_statistics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ipopt_print_timing_statistics();
  ipopt_print_timing_statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
}
inline void IpoptSolverConfig::set_ipopt_print_timing_statistics(const char* value, size_t size) {
  set_has_ipopt_print_timing_statistics();
  ipopt_print_timing_statistics_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
}
inline ::std::string* IpoptSolverConfig::mutable_ipopt_print_timing_statistics() {
  set_has_ipopt_print_timing_statistics();
  // @@protoc_insertion_point(field_mutable:apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
  return ipopt_print_timing_statistics_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpoptSolverConfig::release_ipopt_print_timing_statistics() {
  // @@protoc_insertion_point(field_release:apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
  if (!has_ipopt_print_timing_statistics()) {
    return NULL;
  }
  clear_has_ipopt_print_timing_statistics();
  return ipopt_print_timing_statistics_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpoptSolverConfig::set_allocated_ipopt_print_timing_statistics(::std::string* ipopt_print_timing_statistics) {
  if (ipopt_print_timing_statistics != NULL) {
    set_has_ipopt_print_timing_statistics();
  } else {
    clear_has_ipopt_print_timing_statistics();
  }
  ipopt_print_timing_statistics_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipopt_print_timing_statistics);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.IpoptSolverConfig.ipopt_print_timing_statistics)
}

// optional string ipopt_alpha_for_y = 10;
inline bool IpoptSolverConfig::has_ipopt_alpha_for_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IpoptSolverConfig::set_has_ipopt_alpha_for_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IpoptSolverConfig::clear_has_ipopt_alpha_for_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IpoptSolverConfig::clear_ipopt_alpha_for_y() {
  ipopt_alpha_for_y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipopt_alpha_for_y();
}
inline const ::std::string& IpoptSolverConfig::ipopt_alpha_for_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y)
  return ipopt_alpha_for_y_.GetNoArena();
}
inline void IpoptSolverConfig::set_ipopt_alpha_for_y(const ::std::string& value) {
  set_has_ipopt_alpha_for_y();
  ipopt_alpha_for_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y)
}
#if LANG_CXX11
inline void IpoptSolverConfig::set_ipopt_alpha_for_y(::std::string&& value) {
  set_has_ipopt_alpha_for_y();
  ipopt_alpha_for_y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y)
}
#endif
inline void IpoptSolverConfig::set_ipopt_alpha_for_y(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ipopt_alpha_for_y();
  ipopt_alpha_for_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y)
}
inline void IpoptSolverConfig::set_ipopt_alpha_for_y(const char* value, size_t size) {
  set_has_ipopt_alpha_for_y();
  ipopt_alpha_for_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y)
}
inline ::std::string* IpoptSolverConfig::mutable_ipopt_alpha_for_y() {
  set_has_ipopt_alpha_for_y();
  // @@protoc_insertion_point(field_mutable:apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y)
  return ipopt_alpha_for_y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpoptSolverConfig::release_ipopt_alpha_for_y() {
  // @@protoc_insertion_point(field_release:apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y)
  if (!has_ipopt_alpha_for_y()) {
    return NULL;
  }
  clear_has_ipopt_alpha_for_y();
  return ipopt_alpha_for_y_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpoptSolverConfig::set_allocated_ipopt_alpha_for_y(::std::string* ipopt_alpha_for_y) {
  if (ipopt_alpha_for_y != NULL) {
    set_has_ipopt_alpha_for_y();
  } else {
    clear_has_ipopt_alpha_for_y();
  }
  ipopt_alpha_for_y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipopt_alpha_for_y);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.IpoptSolverConfig.ipopt_alpha_for_y)
}

// optional string ipopt_recalc_y = 11;
inline bool IpoptSolverConfig::has_ipopt_recalc_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IpoptSolverConfig::set_has_ipopt_recalc_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IpoptSolverConfig::clear_has_ipopt_recalc_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IpoptSolverConfig::clear_ipopt_recalc_y() {
  ipopt_recalc_y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ipopt_recalc_y();
}
inline const ::std::string& IpoptSolverConfig::ipopt_recalc_y() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.ipopt_recalc_y)
  return ipopt_recalc_y_.GetNoArena();
}
inline void IpoptSolverConfig::set_ipopt_recalc_y(const ::std::string& value) {
  set_has_ipopt_recalc_y();
  ipopt_recalc_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.ipopt_recalc_y)
}
#if LANG_CXX11
inline void IpoptSolverConfig::set_ipopt_recalc_y(::std::string&& value) {
  set_has_ipopt_recalc_y();
  ipopt_recalc_y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.planning.IpoptSolverConfig.ipopt_recalc_y)
}
#endif
inline void IpoptSolverConfig::set_ipopt_recalc_y(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ipopt_recalc_y();
  ipopt_recalc_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.planning.IpoptSolverConfig.ipopt_recalc_y)
}
inline void IpoptSolverConfig::set_ipopt_recalc_y(const char* value, size_t size) {
  set_has_ipopt_recalc_y();
  ipopt_recalc_y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.planning.IpoptSolverConfig.ipopt_recalc_y)
}
inline ::std::string* IpoptSolverConfig::mutable_ipopt_recalc_y() {
  set_has_ipopt_recalc_y();
  // @@protoc_insertion_point(field_mutable:apollo.planning.IpoptSolverConfig.ipopt_recalc_y)
  return ipopt_recalc_y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IpoptSolverConfig::release_ipopt_recalc_y() {
  // @@protoc_insertion_point(field_release:apollo.planning.IpoptSolverConfig.ipopt_recalc_y)
  if (!has_ipopt_recalc_y()) {
    return NULL;
  }
  clear_has_ipopt_recalc_y();
  return ipopt_recalc_y_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IpoptSolverConfig::set_allocated_ipopt_recalc_y(::std::string* ipopt_recalc_y) {
  if (ipopt_recalc_y != NULL) {
    set_has_ipopt_recalc_y();
  } else {
    clear_has_ipopt_recalc_y();
  }
  ipopt_recalc_y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipopt_recalc_y);
  // @@protoc_insertion_point(field_set_allocated:apollo.planning.IpoptSolverConfig.ipopt_recalc_y)
}

// optional double ipopt_mu_init = 12 [default = 0.1];
inline bool IpoptSolverConfig::has_ipopt_mu_init() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void IpoptSolverConfig::set_has_ipopt_mu_init() {
  _has_bits_[0] |= 0x00000800u;
}
inline void IpoptSolverConfig::clear_has_ipopt_mu_init() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void IpoptSolverConfig::clear_ipopt_mu_init() {
  ipopt_mu_init_ = 0.1;
  clear_has_ipopt_mu_init();
}
inline double IpoptSolverConfig::ipopt_mu_init() const {
  // @@protoc_insertion_point(field_get:apollo.planning.IpoptSolverConfig.ipopt_mu_init)
  return ipopt_mu_init_;
}
inline void IpoptSolverConfig::set_ipopt_mu_init(double value) {
  set_has_ipopt_mu_init();
  ipopt_mu_init_ = value;
  // @@protoc_insertion_point(field_set:apollo.planning.IpoptSolverConfig.ipopt_mu_init)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::planning::OpenSpacePreStopDeciderConfig_StopType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::OpenSpacePreStopDeciderConfig_StopType>() {
  return ::apollo::planning::OpenSpacePreStopDeciderConfig_StopType_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType>() {
  return ::apollo::planning::OpenSpaceRoiDeciderConfig_RoiType_descriptor();
}
template <> struct is_proto_enum< ::apollo::planning::DualVariableMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::planning::DualVariableMode>() {
  return ::apollo::planning::DualVariableMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fplanning_2fproto_2fopen_5fspace_5ftask_5fconfig_2eproto
