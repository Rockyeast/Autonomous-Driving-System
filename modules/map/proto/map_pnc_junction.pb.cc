// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_pnc_junction.proto

#include "modules/map/proto/map_pnc_junction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Polygon;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Id;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Passage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PassageGroup;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto
namespace apollo {
namespace hdmap {
class PassageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Passage>
      _instance;
} _Passage_default_instance_;
class PassageGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PassageGroup>
      _instance;
} _PassageGroup_default_instance_;
class PNCJunctionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PNCJunction>
      _instance;
} _PNCJunction_default_instance_;
}  // namespace hdmap
}  // namespace apollo
namespace protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto {
static void InitDefaultsPassage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_Passage_default_instance_;
    new (ptr) ::apollo::hdmap::Passage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::Passage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Passage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPassage}, {
      &protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::scc_info_Id.base,}};

static void InitDefaultsPassageGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_PassageGroup_default_instance_;
    new (ptr) ::apollo::hdmap::PassageGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::PassageGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PassageGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPassageGroup}, {
      &protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::scc_info_Id.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::scc_info_Passage.base,}};

static void InitDefaultsPNCJunction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_PNCJunction_default_instance_;
    new (ptr) ::apollo::hdmap::PNCJunction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::PNCJunction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_PNCJunction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPNCJunction}, {
      &protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::scc_info_Id.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::scc_info_Polygon.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::scc_info_PassageGroup.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Passage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PassageGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PNCJunction.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Passage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Passage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Passage, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Passage, signal_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Passage, yield_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Passage, stop_sign_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Passage, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Passage, type_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::PassageGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::PassageGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::PassageGroup, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::PassageGroup, passage_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::PNCJunction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::PNCJunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::PNCJunction, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::PNCJunction, polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::PNCJunction, overlap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::PNCJunction, passage_group_),
  0,
  1,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::apollo::hdmap::Passage)},
  { 17, 24, sizeof(::apollo::hdmap::PassageGroup)},
  { 26, 35, sizeof(::apollo::hdmap::PNCJunction)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::hdmap::_Passage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::hdmap::_PassageGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::hdmap::_PNCJunction_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/map/proto/map_pnc_junction.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n(modules/map/proto/map_pnc_junction.pro"
      "to\022\014apollo.hdmap\032\036modules/map/proto/map_"
      "id.proto\032$modules/map/proto/map_geometry"
      ".proto\"\222\002\n\007Passage\022\034\n\002id\030\001 \001(\0132\020.apollo."
      "hdmap.Id\022#\n\tsignal_id\030\002 \003(\0132\020.apollo.hdm"
      "ap.Id\022\"\n\010yield_id\030\003 \003(\0132\020.apollo.hdmap.I"
      "d\022&\n\014stop_sign_id\030\004 \003(\0132\020.apollo.hdmap.I"
      "d\022!\n\007lane_id\030\005 \003(\0132\020.apollo.hdmap.Id\022(\n\004"
      "type\030\006 \001(\0162\032.apollo.hdmap.Passage.Type\"+"
      "\n\004Type\022\013\n\007UNKNOWN\020\000\022\014\n\010ENTRANCE\020\001\022\010\n\004EXI"
      "T\020\002\"T\n\014PassageGroup\022\034\n\002id\030\001 \001(\0132\020.apollo"
      ".hdmap.Id\022&\n\007passage\030\002 \003(\0132\025.apollo.hdma"
      "p.Passage\"\254\001\n\013PNCJunction\022\034\n\002id\030\001 \001(\0132\020."
      "apollo.hdmap.Id\022&\n\007polygon\030\002 \001(\0132\025.apoll"
      "o.hdmap.Polygon\022$\n\noverlap_id\030\003 \003(\0132\020.ap"
      "ollo.hdmap.Id\0221\n\rpassage_group\030\004 \003(\0132\032.a"
      "pollo.hdmap.PassageGroup"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 664);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/map/proto/map_pnc_junction.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto
namespace apollo {
namespace hdmap {
const ::google::protobuf::EnumDescriptor* Passage_Type_descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::file_level_enum_descriptors[0];
}
bool Passage_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Passage_Type Passage::UNKNOWN;
const Passage_Type Passage::ENTRANCE;
const Passage_Type Passage::EXIT;
const Passage_Type Passage::Type_MIN;
const Passage_Type Passage::Type_MAX;
const int Passage::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Passage::InitAsDefaultInstance() {
  ::apollo::hdmap::_Passage_default_instance_._instance.get_mutable()->id_ = const_cast< ::apollo::hdmap::Id*>(
      ::apollo::hdmap::Id::internal_default_instance());
}
void Passage::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
void Passage::clear_signal_id() {
  signal_id_.Clear();
}
void Passage::clear_yield_id() {
  yield_id_.Clear();
}
void Passage::clear_stop_sign_id() {
  stop_sign_id_.Clear();
}
void Passage::clear_lane_id() {
  lane_id_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Passage::kIdFieldNumber;
const int Passage::kSignalIdFieldNumber;
const int Passage::kYieldIdFieldNumber;
const int Passage::kStopSignIdFieldNumber;
const int Passage::kLaneIdFieldNumber;
const int Passage::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Passage::Passage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::scc_info_Passage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.Passage)
}
Passage::Passage(const Passage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      signal_id_(from.signal_id_),
      yield_id_(from.yield_id_),
      stop_sign_id_(from.stop_sign_id_),
      lane_id_(from.lane_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::apollo::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Passage)
}

void Passage::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

Passage::~Passage() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Passage)
  SharedDtor();
}

void Passage::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void Passage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Passage::descriptor() {
  ::protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Passage& Passage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::scc_info_Passage.base);
  return *internal_default_instance();
}


void Passage::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Passage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signal_id_.Clear();
  yield_id_.Clear();
  stop_sign_id_.Clear();
  lane_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_ != NULL);
    id_->Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Passage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.Passage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Id signal_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_signal_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Id yield_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_yield_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Id stop_sign_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stop_sign_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Id lane_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.Passage.Type type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::hdmap::Passage_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::hdmap::Passage_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.Passage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.Passage)
  return false;
#undef DO_
}

void Passage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.Passage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // repeated .apollo.hdmap.Id signal_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signal_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->signal_id(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.Id yield_id = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->yield_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->yield_id(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.Id stop_sign_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stop_sign_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->stop_sign_id(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.Id lane_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->lane_id(static_cast<int>(i)),
      output);
  }

  // optional .apollo.hdmap.Passage.Type type = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.Passage)
}

::google::protobuf::uint8* Passage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Passage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // repeated .apollo.hdmap.Id signal_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signal_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->signal_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.Id yield_id = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->yield_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->yield_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.Id stop_sign_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stop_sign_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->stop_sign_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.Id lane_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->lane_id(static_cast<int>(i)), deterministic, target);
  }

  // optional .apollo.hdmap.Passage.Type type = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Passage)
  return target;
}

size_t Passage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Passage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.hdmap.Id signal_id = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->signal_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->signal_id(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.Id yield_id = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->yield_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->yield_id(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.Id stop_sign_id = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->stop_sign_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stop_sign_id(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.Id lane_id = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_id(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .apollo.hdmap.Passage.Type type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Passage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.Passage)
  GOOGLE_DCHECK_NE(&from, this);
  const Passage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Passage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.Passage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.Passage)
    MergeFrom(*source);
  }
}

void Passage::MergeFrom(const Passage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Passage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_id_.MergeFrom(from.signal_id_);
  yield_id_.MergeFrom(from.yield_id_);
  stop_sign_id_.MergeFrom(from.stop_sign_id_);
  lane_id_.MergeFrom(from.lane_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::apollo::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Passage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.Passage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Passage::CopyFrom(const Passage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Passage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Passage::IsInitialized() const {
  return true;
}

void Passage::Swap(Passage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Passage::InternalSwap(Passage* other) {
  using std::swap;
  CastToBase(&signal_id_)->InternalSwap(CastToBase(&other->signal_id_));
  CastToBase(&yield_id_)->InternalSwap(CastToBase(&other->yield_id_));
  CastToBase(&stop_sign_id_)->InternalSwap(CastToBase(&other->stop_sign_id_));
  CastToBase(&lane_id_)->InternalSwap(CastToBase(&other->lane_id_));
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Passage::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PassageGroup::InitAsDefaultInstance() {
  ::apollo::hdmap::_PassageGroup_default_instance_._instance.get_mutable()->id_ = const_cast< ::apollo::hdmap::Id*>(
      ::apollo::hdmap::Id::internal_default_instance());
}
void PassageGroup::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PassageGroup::kIdFieldNumber;
const int PassageGroup::kPassageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PassageGroup::PassageGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::scc_info_PassageGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.PassageGroup)
}
PassageGroup::PassageGroup(const PassageGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      passage_(from.passage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::apollo::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.PassageGroup)
}

void PassageGroup::SharedCtor() {
  id_ = NULL;
}

PassageGroup::~PassageGroup() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.PassageGroup)
  SharedDtor();
}

void PassageGroup::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void PassageGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PassageGroup::descriptor() {
  ::protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PassageGroup& PassageGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::scc_info_PassageGroup.base);
  return *internal_default_instance();
}


void PassageGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.PassageGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  passage_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_ != NULL);
    id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PassageGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.PassageGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Passage passage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_passage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.PassageGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.PassageGroup)
  return false;
#undef DO_
}

void PassageGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.PassageGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // repeated .apollo.hdmap.Passage passage = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->passage_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->passage(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.PassageGroup)
}

::google::protobuf::uint8* PassageGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.PassageGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // repeated .apollo.hdmap.Passage passage = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->passage_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->passage(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.PassageGroup)
  return target;
}

size_t PassageGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.PassageGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.hdmap.Passage passage = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->passage_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->passage(static_cast<int>(i)));
    }
  }

  // optional .apollo.hdmap.Id id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PassageGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.PassageGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const PassageGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PassageGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.PassageGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.PassageGroup)
    MergeFrom(*source);
  }
}

void PassageGroup::MergeFrom(const PassageGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.PassageGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  passage_.MergeFrom(from.passage_);
  if (from.has_id()) {
    mutable_id()->::apollo::hdmap::Id::MergeFrom(from.id());
  }
}

void PassageGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.PassageGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassageGroup::CopyFrom(const PassageGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.PassageGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassageGroup::IsInitialized() const {
  return true;
}

void PassageGroup::Swap(PassageGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PassageGroup::InternalSwap(PassageGroup* other) {
  using std::swap;
  CastToBase(&passage_)->InternalSwap(CastToBase(&other->passage_));
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PassageGroup::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PNCJunction::InitAsDefaultInstance() {
  ::apollo::hdmap::_PNCJunction_default_instance_._instance.get_mutable()->id_ = const_cast< ::apollo::hdmap::Id*>(
      ::apollo::hdmap::Id::internal_default_instance());
  ::apollo::hdmap::_PNCJunction_default_instance_._instance.get_mutable()->polygon_ = const_cast< ::apollo::hdmap::Polygon*>(
      ::apollo::hdmap::Polygon::internal_default_instance());
}
void PNCJunction::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
void PNCJunction::clear_polygon() {
  if (polygon_ != NULL) polygon_->Clear();
  clear_has_polygon();
}
void PNCJunction::clear_overlap_id() {
  overlap_id_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PNCJunction::kIdFieldNumber;
const int PNCJunction::kPolygonFieldNumber;
const int PNCJunction::kOverlapIdFieldNumber;
const int PNCJunction::kPassageGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PNCJunction::PNCJunction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::scc_info_PNCJunction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.PNCJunction)
}
PNCJunction::PNCJunction(const PNCJunction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      overlap_id_(from.overlap_id_),
      passage_group_(from.passage_group_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::apollo::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::apollo::hdmap::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.PNCJunction)
}

void PNCJunction::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&polygon_) -
      reinterpret_cast<char*>(&id_)) + sizeof(polygon_));
}

PNCJunction::~PNCJunction() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.PNCJunction)
  SharedDtor();
}

void PNCJunction::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete polygon_;
}

void PNCJunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PNCJunction::descriptor() {
  ::protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PNCJunction& PNCJunction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::scc_info_PNCJunction.base);
  return *internal_default_instance();
}


void PNCJunction::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.PNCJunction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  overlap_id_.Clear();
  passage_group_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PNCJunction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.PNCJunction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.Polygon polygon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Id overlap_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_overlap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.PassageGroup passage_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_passage_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.PNCJunction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.PNCJunction)
  return false;
#undef DO_
}

void PNCJunction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.PNCJunction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // optional .apollo.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_polygon(), output);
  }

  // repeated .apollo.hdmap.Id overlap_id = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overlap_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->overlap_id(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.PassageGroup passage_group = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->passage_group_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->passage_group(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.PNCJunction)
}

::google::protobuf::uint8* PNCJunction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.PNCJunction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // optional .apollo.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_polygon(), deterministic, target);
  }

  // repeated .apollo.hdmap.Id overlap_id = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overlap_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->overlap_id(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.PassageGroup passage_group = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->passage_group_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->passage_group(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.PNCJunction)
  return target;
}

size_t PNCJunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.PNCJunction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.hdmap.Id overlap_id = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->overlap_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->overlap_id(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.PassageGroup passage_group = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->passage_group_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->passage_group(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .apollo.hdmap.Polygon polygon = 2;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *polygon_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PNCJunction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.PNCJunction)
  GOOGLE_DCHECK_NE(&from, this);
  const PNCJunction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PNCJunction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.PNCJunction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.PNCJunction)
    MergeFrom(*source);
  }
}

void PNCJunction::MergeFrom(const PNCJunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.PNCJunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  overlap_id_.MergeFrom(from.overlap_id_);
  passage_group_.MergeFrom(from.passage_group_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::apollo::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_polygon()->::apollo::hdmap::Polygon::MergeFrom(from.polygon());
    }
  }
}

void PNCJunction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.PNCJunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNCJunction::CopyFrom(const PNCJunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.PNCJunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNCJunction::IsInitialized() const {
  return true;
}

void PNCJunction::Swap(PNCJunction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PNCJunction::InternalSwap(PNCJunction* other) {
  using std::swap;
  CastToBase(&overlap_id_)->InternalSwap(CastToBase(&other->overlap_id_));
  CastToBase(&passage_group_)->InternalSwap(CastToBase(&other->passage_group_));
  swap(id_, other->id_);
  swap(polygon_, other->polygon_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PNCJunction::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::hdmap::Passage* Arena::CreateMaybeMessage< ::apollo::hdmap::Passage >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::Passage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::hdmap::PassageGroup* Arena::CreateMaybeMessage< ::apollo::hdmap::PassageGroup >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::PassageGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::hdmap::PNCJunction* Arena::CreateMaybeMessage< ::apollo::hdmap::PNCJunction >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::PNCJunction >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
