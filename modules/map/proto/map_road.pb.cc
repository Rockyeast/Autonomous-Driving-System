// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_road.proto

#include "modules/map/proto/map_road.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Curve;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Id;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BoundaryEdge;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BoundaryPolygon;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RoadBoundary;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RoadSection;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto
namespace apollo {
namespace hdmap {
class BoundaryEdgeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BoundaryEdge>
      _instance;
} _BoundaryEdge_default_instance_;
class BoundaryPolygonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BoundaryPolygon>
      _instance;
} _BoundaryPolygon_default_instance_;
class RoadBoundaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadBoundary>
      _instance;
} _RoadBoundary_default_instance_;
class RoadROIBoundaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadROIBoundary>
      _instance;
} _RoadROIBoundary_default_instance_;
class RoadSectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadSection>
      _instance;
} _RoadSection_default_instance_;
class RoadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Road>
      _instance;
} _Road_default_instance_;
}  // namespace hdmap
}  // namespace apollo
namespace protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto {
static void InitDefaultsBoundaryEdge() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_BoundaryEdge_default_instance_;
    new (ptr) ::apollo::hdmap::BoundaryEdge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::BoundaryEdge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BoundaryEdge =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBoundaryEdge}, {
      &protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::scc_info_Curve.base,}};

static void InitDefaultsBoundaryPolygon() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_BoundaryPolygon_default_instance_;
    new (ptr) ::apollo::hdmap::BoundaryPolygon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::BoundaryPolygon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BoundaryPolygon =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBoundaryPolygon}, {
      &protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::scc_info_BoundaryEdge.base,}};

static void InitDefaultsRoadBoundary() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_RoadBoundary_default_instance_;
    new (ptr) ::apollo::hdmap::RoadBoundary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::RoadBoundary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RoadBoundary =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRoadBoundary}, {
      &protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::scc_info_BoundaryPolygon.base,}};

static void InitDefaultsRoadROIBoundary() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_RoadROIBoundary_default_instance_;
    new (ptr) ::apollo::hdmap::RoadROIBoundary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::RoadROIBoundary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RoadROIBoundary =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRoadROIBoundary}, {
      &protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::scc_info_Id.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::scc_info_RoadBoundary.base,}};

static void InitDefaultsRoadSection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_RoadSection_default_instance_;
    new (ptr) ::apollo::hdmap::RoadSection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::RoadSection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RoadSection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRoadSection}, {
      &protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::scc_info_Id.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::scc_info_RoadBoundary.base,}};

static void InitDefaultsRoad() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_Road_default_instance_;
    new (ptr) ::apollo::hdmap::Road();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::Road::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Road =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRoad}, {
      &protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::scc_info_Id.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::scc_info_RoadSection.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_BoundaryEdge.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BoundaryPolygon.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoadBoundary.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoadROIBoundary.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoadSection.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Road.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::BoundaryEdge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::BoundaryEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::BoundaryEdge, curve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::BoundaryEdge, type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::BoundaryPolygon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::BoundaryPolygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::BoundaryPolygon, edge_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::RoadBoundary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::RoadBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::RoadBoundary, outer_polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::RoadBoundary, hole_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::RoadROIBoundary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::RoadROIBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::RoadROIBoundary, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::RoadROIBoundary, road_boundaries_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::RoadSection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::RoadSection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::RoadSection, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::RoadSection, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::RoadSection, boundary_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Road, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Road, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Road, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Road, section_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Road, junction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Road, type_),
  0,
  ~0u,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::hdmap::BoundaryEdge)},
  { 9, 15, sizeof(::apollo::hdmap::BoundaryPolygon)},
  { 16, 23, sizeof(::apollo::hdmap::RoadBoundary)},
  { 25, 32, sizeof(::apollo::hdmap::RoadROIBoundary)},
  { 34, 42, sizeof(::apollo::hdmap::RoadSection)},
  { 45, 54, sizeof(::apollo::hdmap::Road)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::hdmap::_BoundaryEdge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::hdmap::_BoundaryPolygon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::hdmap::_RoadBoundary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::hdmap::_RoadROIBoundary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::hdmap::_RoadSection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::hdmap::_Road_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/map/proto/map_road.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n modules/map/proto/map_road.proto\022\014apol"
      "lo.hdmap\032$modules/map/proto/map_geometry"
      ".proto\032\036modules/map/proto/map_id.proto\"\251"
      "\001\n\014BoundaryEdge\022\"\n\005curve\030\001 \001(\0132\023.apollo."
      "hdmap.Curve\022-\n\004type\030\002 \001(\0162\037.apollo.hdmap"
      ".BoundaryEdge.Type\"F\n\004Type\022\013\n\007UNKNOWN\020\000\022"
      "\n\n\006NORMAL\020\001\022\021\n\rLEFT_BOUNDARY\020\002\022\022\n\016RIGHT_"
      "BOUNDARY\020\003\";\n\017BoundaryPolygon\022(\n\004edge\030\001 "
      "\003(\0132\032.apollo.hdmap.BoundaryEdge\"q\n\014RoadB"
      "oundary\0224\n\router_polygon\030\001 \001(\0132\035.apollo."
      "hdmap.BoundaryPolygon\022+\n\004hole\030\002 \003(\0132\035.ap"
      "ollo.hdmap.BoundaryPolygon\"d\n\017RoadROIBou"
      "ndary\022\034\n\002id\030\001 \001(\0132\020.apollo.hdmap.Id\0223\n\017r"
      "oad_boundaries\030\002 \003(\0132\032.apollo.hdmap.Road"
      "Boundary\"|\n\013RoadSection\022\034\n\002id\030\001 \001(\0132\020.ap"
      "ollo.hdmap.Id\022!\n\007lane_id\030\002 \003(\0132\020.apollo."
      "hdmap.Id\022,\n\010boundary\030\003 \001(\0132\032.apollo.hdma"
      "p.RoadBoundary\"\331\001\n\004Road\022\034\n\002id\030\001 \001(\0132\020.ap"
      "ollo.hdmap.Id\022*\n\007section\030\002 \003(\0132\031.apollo."
      "hdmap.RoadSection\022%\n\013junction_id\030\003 \001(\0132\020"
      ".apollo.hdmap.Id\022%\n\004type\030\004 \001(\0162\027.apollo."
      "hdmap.Road.Type\"9\n\004Type\022\013\n\007UNKNOWN\020\000\022\013\n\007"
      "HIGHWAY\020\001\022\r\n\tCITY_ROAD\020\002\022\010\n\004PARK\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 914);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/map/proto/map_road.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto
namespace apollo {
namespace hdmap {
const ::google::protobuf::EnumDescriptor* BoundaryEdge_Type_descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_enum_descriptors[0];
}
bool BoundaryEdge_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BoundaryEdge_Type BoundaryEdge::UNKNOWN;
const BoundaryEdge_Type BoundaryEdge::NORMAL;
const BoundaryEdge_Type BoundaryEdge::LEFT_BOUNDARY;
const BoundaryEdge_Type BoundaryEdge::RIGHT_BOUNDARY;
const BoundaryEdge_Type BoundaryEdge::Type_MIN;
const BoundaryEdge_Type BoundaryEdge::Type_MAX;
const int BoundaryEdge::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Road_Type_descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_enum_descriptors[1];
}
bool Road_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Road_Type Road::UNKNOWN;
const Road_Type Road::HIGHWAY;
const Road_Type Road::CITY_ROAD;
const Road_Type Road::PARK;
const Road_Type Road::Type_MIN;
const Road_Type Road::Type_MAX;
const int Road::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void BoundaryEdge::InitAsDefaultInstance() {
  ::apollo::hdmap::_BoundaryEdge_default_instance_._instance.get_mutable()->curve_ = const_cast< ::apollo::hdmap::Curve*>(
      ::apollo::hdmap::Curve::internal_default_instance());
}
void BoundaryEdge::clear_curve() {
  if (curve_ != NULL) curve_->Clear();
  clear_has_curve();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundaryEdge::kCurveFieldNumber;
const int BoundaryEdge::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundaryEdge::BoundaryEdge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::scc_info_BoundaryEdge.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.BoundaryEdge)
}
BoundaryEdge::BoundaryEdge(const BoundaryEdge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_curve()) {
    curve_ = new ::apollo::hdmap::Curve(*from.curve_);
  } else {
    curve_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.BoundaryEdge)
}

void BoundaryEdge::SharedCtor() {
  ::memset(&curve_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&curve_)) + sizeof(type_));
}

BoundaryEdge::~BoundaryEdge() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.BoundaryEdge)
  SharedDtor();
}

void BoundaryEdge::SharedDtor() {
  if (this != internal_default_instance()) delete curve_;
}

void BoundaryEdge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BoundaryEdge::descriptor() {
  ::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BoundaryEdge& BoundaryEdge::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::scc_info_BoundaryEdge.base);
  return *internal_default_instance();
}


void BoundaryEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.BoundaryEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(curve_ != NULL);
    curve_->Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BoundaryEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.BoundaryEdge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Curve curve = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.BoundaryEdge.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::hdmap::BoundaryEdge_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::hdmap::BoundaryEdge_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.BoundaryEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.BoundaryEdge)
  return false;
#undef DO_
}

void BoundaryEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.BoundaryEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Curve curve = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_curve(), output);
  }

  // optional .apollo.hdmap.BoundaryEdge.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.BoundaryEdge)
}

::google::protobuf::uint8* BoundaryEdge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.BoundaryEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Curve curve = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_curve(), deterministic, target);
  }

  // optional .apollo.hdmap.BoundaryEdge.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.BoundaryEdge)
  return target;
}

size_t BoundaryEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.BoundaryEdge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.hdmap.Curve curve = 1;
    if (has_curve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *curve_);
    }

    // optional .apollo.hdmap.BoundaryEdge.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundaryEdge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.BoundaryEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundaryEdge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoundaryEdge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.BoundaryEdge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.BoundaryEdge)
    MergeFrom(*source);
  }
}

void BoundaryEdge::MergeFrom(const BoundaryEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.BoundaryEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_curve()->::apollo::hdmap::Curve::MergeFrom(from.curve());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BoundaryEdge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.BoundaryEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryEdge::CopyFrom(const BoundaryEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.BoundaryEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryEdge::IsInitialized() const {
  return true;
}

void BoundaryEdge::Swap(BoundaryEdge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundaryEdge::InternalSwap(BoundaryEdge* other) {
  using std::swap;
  swap(curve_, other->curve_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BoundaryEdge::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BoundaryPolygon::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundaryPolygon::kEdgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundaryPolygon::BoundaryPolygon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::scc_info_BoundaryPolygon.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.BoundaryPolygon)
}
BoundaryPolygon::BoundaryPolygon(const BoundaryPolygon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      edge_(from.edge_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.BoundaryPolygon)
}

void BoundaryPolygon::SharedCtor() {
}

BoundaryPolygon::~BoundaryPolygon() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.BoundaryPolygon)
  SharedDtor();
}

void BoundaryPolygon::SharedDtor() {
}

void BoundaryPolygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BoundaryPolygon::descriptor() {
  ::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BoundaryPolygon& BoundaryPolygon::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::scc_info_BoundaryPolygon.base);
  return *internal_default_instance();
}


void BoundaryPolygon::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.BoundaryPolygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edge_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BoundaryPolygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.BoundaryPolygon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.hdmap.BoundaryEdge edge = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_edge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.BoundaryPolygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.BoundaryPolygon)
  return false;
#undef DO_
}

void BoundaryPolygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.BoundaryPolygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.hdmap.BoundaryEdge edge = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edge_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->edge(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.BoundaryPolygon)
}

::google::protobuf::uint8* BoundaryPolygon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.BoundaryPolygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.hdmap.BoundaryEdge edge = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edge_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->edge(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.BoundaryPolygon)
  return target;
}

size_t BoundaryPolygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.BoundaryPolygon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.hdmap.BoundaryEdge edge = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->edge_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->edge(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundaryPolygon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.BoundaryPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundaryPolygon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoundaryPolygon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.BoundaryPolygon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.BoundaryPolygon)
    MergeFrom(*source);
  }
}

void BoundaryPolygon::MergeFrom(const BoundaryPolygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.BoundaryPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edge_.MergeFrom(from.edge_);
}

void BoundaryPolygon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.BoundaryPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryPolygon::CopyFrom(const BoundaryPolygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.BoundaryPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryPolygon::IsInitialized() const {
  return true;
}

void BoundaryPolygon::Swap(BoundaryPolygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundaryPolygon::InternalSwap(BoundaryPolygon* other) {
  using std::swap;
  CastToBase(&edge_)->InternalSwap(CastToBase(&other->edge_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BoundaryPolygon::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadBoundary::InitAsDefaultInstance() {
  ::apollo::hdmap::_RoadBoundary_default_instance_._instance.get_mutable()->outer_polygon_ = const_cast< ::apollo::hdmap::BoundaryPolygon*>(
      ::apollo::hdmap::BoundaryPolygon::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadBoundary::kOuterPolygonFieldNumber;
const int RoadBoundary::kHoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadBoundary::RoadBoundary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::scc_info_RoadBoundary.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.RoadBoundary)
}
RoadBoundary::RoadBoundary(const RoadBoundary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      hole_(from.hole_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_outer_polygon()) {
    outer_polygon_ = new ::apollo::hdmap::BoundaryPolygon(*from.outer_polygon_);
  } else {
    outer_polygon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.RoadBoundary)
}

void RoadBoundary::SharedCtor() {
  outer_polygon_ = NULL;
}

RoadBoundary::~RoadBoundary() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.RoadBoundary)
  SharedDtor();
}

void RoadBoundary::SharedDtor() {
  if (this != internal_default_instance()) delete outer_polygon_;
}

void RoadBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoadBoundary::descriptor() {
  ::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadBoundary& RoadBoundary::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::scc_info_RoadBoundary.base);
  return *internal_default_instance();
}


void RoadBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.RoadBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hole_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(outer_polygon_ != NULL);
    outer_polygon_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoadBoundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.RoadBoundary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.BoundaryPolygon outer_polygon = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_outer_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.BoundaryPolygon hole = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_hole()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.RoadBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.RoadBoundary)
  return false;
#undef DO_
}

void RoadBoundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.RoadBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.BoundaryPolygon outer_polygon = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_outer_polygon(), output);
  }

  // repeated .apollo.hdmap.BoundaryPolygon hole = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->hole(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.RoadBoundary)
}

::google::protobuf::uint8* RoadBoundary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.RoadBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.BoundaryPolygon outer_polygon = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_outer_polygon(), deterministic, target);
  }

  // repeated .apollo.hdmap.BoundaryPolygon hole = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hole_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->hole(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.RoadBoundary)
  return target;
}

size_t RoadBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.RoadBoundary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.hdmap.BoundaryPolygon hole = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->hole_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hole(static_cast<int>(i)));
    }
  }

  // optional .apollo.hdmap.BoundaryPolygon outer_polygon = 1;
  if (has_outer_polygon()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *outer_polygon_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadBoundary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.RoadBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadBoundary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadBoundary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.RoadBoundary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.RoadBoundary)
    MergeFrom(*source);
  }
}

void RoadBoundary::MergeFrom(const RoadBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.RoadBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hole_.MergeFrom(from.hole_);
  if (from.has_outer_polygon()) {
    mutable_outer_polygon()->::apollo::hdmap::BoundaryPolygon::MergeFrom(from.outer_polygon());
  }
}

void RoadBoundary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.RoadBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadBoundary::CopyFrom(const RoadBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.RoadBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadBoundary::IsInitialized() const {
  return true;
}

void RoadBoundary::Swap(RoadBoundary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadBoundary::InternalSwap(RoadBoundary* other) {
  using std::swap;
  CastToBase(&hole_)->InternalSwap(CastToBase(&other->hole_));
  swap(outer_polygon_, other->outer_polygon_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoadBoundary::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadROIBoundary::InitAsDefaultInstance() {
  ::apollo::hdmap::_RoadROIBoundary_default_instance_._instance.get_mutable()->id_ = const_cast< ::apollo::hdmap::Id*>(
      ::apollo::hdmap::Id::internal_default_instance());
}
void RoadROIBoundary::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadROIBoundary::kIdFieldNumber;
const int RoadROIBoundary::kRoadBoundariesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadROIBoundary::RoadROIBoundary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::scc_info_RoadROIBoundary.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.RoadROIBoundary)
}
RoadROIBoundary::RoadROIBoundary(const RoadROIBoundary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      road_boundaries_(from.road_boundaries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::apollo::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.RoadROIBoundary)
}

void RoadROIBoundary::SharedCtor() {
  id_ = NULL;
}

RoadROIBoundary::~RoadROIBoundary() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.RoadROIBoundary)
  SharedDtor();
}

void RoadROIBoundary::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void RoadROIBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoadROIBoundary::descriptor() {
  ::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadROIBoundary& RoadROIBoundary::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::scc_info_RoadROIBoundary.base);
  return *internal_default_instance();
}


void RoadROIBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.RoadROIBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_boundaries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_ != NULL);
    id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoadROIBoundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.RoadROIBoundary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.RoadBoundary road_boundaries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_road_boundaries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.RoadROIBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.RoadROIBoundary)
  return false;
#undef DO_
}

void RoadROIBoundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.RoadROIBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // repeated .apollo.hdmap.RoadBoundary road_boundaries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_boundaries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->road_boundaries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.RoadROIBoundary)
}

::google::protobuf::uint8* RoadROIBoundary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.RoadROIBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // repeated .apollo.hdmap.RoadBoundary road_boundaries = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_boundaries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->road_boundaries(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.RoadROIBoundary)
  return target;
}

size_t RoadROIBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.RoadROIBoundary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.hdmap.RoadBoundary road_boundaries = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->road_boundaries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road_boundaries(static_cast<int>(i)));
    }
  }

  // optional .apollo.hdmap.Id id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadROIBoundary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.RoadROIBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadROIBoundary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadROIBoundary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.RoadROIBoundary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.RoadROIBoundary)
    MergeFrom(*source);
  }
}

void RoadROIBoundary::MergeFrom(const RoadROIBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.RoadROIBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_boundaries_.MergeFrom(from.road_boundaries_);
  if (from.has_id()) {
    mutable_id()->::apollo::hdmap::Id::MergeFrom(from.id());
  }
}

void RoadROIBoundary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.RoadROIBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadROIBoundary::CopyFrom(const RoadROIBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.RoadROIBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadROIBoundary::IsInitialized() const {
  return true;
}

void RoadROIBoundary::Swap(RoadROIBoundary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadROIBoundary::InternalSwap(RoadROIBoundary* other) {
  using std::swap;
  CastToBase(&road_boundaries_)->InternalSwap(CastToBase(&other->road_boundaries_));
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoadROIBoundary::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadSection::InitAsDefaultInstance() {
  ::apollo::hdmap::_RoadSection_default_instance_._instance.get_mutable()->id_ = const_cast< ::apollo::hdmap::Id*>(
      ::apollo::hdmap::Id::internal_default_instance());
  ::apollo::hdmap::_RoadSection_default_instance_._instance.get_mutable()->boundary_ = const_cast< ::apollo::hdmap::RoadBoundary*>(
      ::apollo::hdmap::RoadBoundary::internal_default_instance());
}
void RoadSection::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
void RoadSection::clear_lane_id() {
  lane_id_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadSection::kIdFieldNumber;
const int RoadSection::kLaneIdFieldNumber;
const int RoadSection::kBoundaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadSection::RoadSection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::scc_info_RoadSection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.RoadSection)
}
RoadSection::RoadSection(const RoadSection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      lane_id_(from.lane_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::apollo::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_boundary()) {
    boundary_ = new ::apollo::hdmap::RoadBoundary(*from.boundary_);
  } else {
    boundary_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.RoadSection)
}

void RoadSection::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boundary_) -
      reinterpret_cast<char*>(&id_)) + sizeof(boundary_));
}

RoadSection::~RoadSection() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.RoadSection)
  SharedDtor();
}

void RoadSection::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete boundary_;
}

void RoadSection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoadSection::descriptor() {
  ::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadSection& RoadSection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::scc_info_RoadSection.base);
  return *internal_default_instance();
}


void RoadSection::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.RoadSection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(boundary_ != NULL);
      boundary_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoadSection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.RoadSection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Id lane_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.RoadBoundary boundary = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.RoadSection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.RoadSection)
  return false;
#undef DO_
}

void RoadSection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.RoadSection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // repeated .apollo.hdmap.Id lane_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->lane_id(static_cast<int>(i)),
      output);
  }

  // optional .apollo.hdmap.RoadBoundary boundary = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_boundary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.RoadSection)
}

::google::protobuf::uint8* RoadSection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.RoadSection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // repeated .apollo.hdmap.Id lane_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->lane_id(static_cast<int>(i)), deterministic, target);
  }

  // optional .apollo.hdmap.RoadBoundary boundary = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_boundary(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.RoadSection)
  return target;
}

size_t RoadSection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.RoadSection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.hdmap.Id lane_id = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_id(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .apollo.hdmap.RoadBoundary boundary = 3;
    if (has_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *boundary_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadSection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.RoadSection)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadSection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadSection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.RoadSection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.RoadSection)
    MergeFrom(*source);
  }
}

void RoadSection::MergeFrom(const RoadSection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.RoadSection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_id_.MergeFrom(from.lane_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::apollo::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_boundary()->::apollo::hdmap::RoadBoundary::MergeFrom(from.boundary());
    }
  }
}

void RoadSection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.RoadSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadSection::CopyFrom(const RoadSection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.RoadSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSection::IsInitialized() const {
  return true;
}

void RoadSection::Swap(RoadSection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadSection::InternalSwap(RoadSection* other) {
  using std::swap;
  CastToBase(&lane_id_)->InternalSwap(CastToBase(&other->lane_id_));
  swap(id_, other->id_);
  swap(boundary_, other->boundary_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoadSection::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Road::InitAsDefaultInstance() {
  ::apollo::hdmap::_Road_default_instance_._instance.get_mutable()->id_ = const_cast< ::apollo::hdmap::Id*>(
      ::apollo::hdmap::Id::internal_default_instance());
  ::apollo::hdmap::_Road_default_instance_._instance.get_mutable()->junction_id_ = const_cast< ::apollo::hdmap::Id*>(
      ::apollo::hdmap::Id::internal_default_instance());
}
void Road::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
void Road::clear_junction_id() {
  if (junction_id_ != NULL) junction_id_->Clear();
  clear_has_junction_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Road::kIdFieldNumber;
const int Road::kSectionFieldNumber;
const int Road::kJunctionIdFieldNumber;
const int Road::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Road::Road()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::scc_info_Road.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.Road)
}
Road::Road(const Road& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      section_(from.section_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::apollo::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_junction_id()) {
    junction_id_ = new ::apollo::hdmap::Id(*from.junction_id_);
  } else {
    junction_id_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Road)
}

void Road::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

Road::~Road() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Road)
  SharedDtor();
}

void Road::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete junction_id_;
}

void Road::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Road::descriptor() {
  ::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Road& Road::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::scc_info_Road.base);
  return *internal_default_instance();
}


void Road::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Road)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  section_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(junction_id_ != NULL);
      junction_id_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Road::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.Road)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.RoadSection section = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_section()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.Id junction_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_junction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.Road.Type type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::hdmap::Road_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::hdmap::Road_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.Road)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.Road)
  return false;
#undef DO_
}

void Road::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.Road)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // repeated .apollo.hdmap.RoadSection section = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->section_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->section(static_cast<int>(i)),
      output);
  }

  // optional .apollo.hdmap.Id junction_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_junction_id(), output);
  }

  // optional .apollo.hdmap.Road.Type type = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.Road)
}

::google::protobuf::uint8* Road::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Road)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // repeated .apollo.hdmap.RoadSection section = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->section_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->section(static_cast<int>(i)), deterministic, target);
  }

  // optional .apollo.hdmap.Id junction_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_junction_id(), deterministic, target);
  }

  // optional .apollo.hdmap.Road.Type type = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Road)
  return target;
}

size_t Road::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Road)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.hdmap.RoadSection section = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->section_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->section(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *id_);
    }

    // optional .apollo.hdmap.Id junction_id = 3;
    if (has_junction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *junction_id_);
    }

    // optional .apollo.hdmap.Road.Type type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Road::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.Road)
  GOOGLE_DCHECK_NE(&from, this);
  const Road* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Road>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.Road)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.Road)
    MergeFrom(*source);
  }
}

void Road::MergeFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Road)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  section_.MergeFrom(from.section_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::apollo::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_junction_id()->::apollo::hdmap::Id::MergeFrom(from.junction_id());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Road::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Road::CopyFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Road::IsInitialized() const {
  return true;
}

void Road::Swap(Road* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Road::InternalSwap(Road* other) {
  using std::swap;
  CastToBase(&section_)->InternalSwap(CastToBase(&other->section_));
  swap(id_, other->id_);
  swap(junction_id_, other->junction_id_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Road::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::hdmap::BoundaryEdge* Arena::CreateMaybeMessage< ::apollo::hdmap::BoundaryEdge >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::BoundaryEdge >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::hdmap::BoundaryPolygon* Arena::CreateMaybeMessage< ::apollo::hdmap::BoundaryPolygon >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::BoundaryPolygon >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::hdmap::RoadBoundary* Arena::CreateMaybeMessage< ::apollo::hdmap::RoadBoundary >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::RoadBoundary >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::hdmap::RoadROIBoundary* Arena::CreateMaybeMessage< ::apollo::hdmap::RoadROIBoundary >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::RoadROIBoundary >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::hdmap::RoadSection* Arena::CreateMaybeMessage< ::apollo::hdmap::RoadSection >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::RoadSection >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::hdmap::Road* Arena::CreateMaybeMessage< ::apollo::hdmap::Road >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::Road >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
