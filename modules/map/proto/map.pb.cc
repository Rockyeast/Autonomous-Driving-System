// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map.proto

#include "modules/map/proto/map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fmap_2fproto_2fmap_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Projection;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_5fclear_5farea_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5fclear_5farea_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ClearArea;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fclear_5farea_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_5fcrosswalk_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5fcrosswalk_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Crosswalk;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fcrosswalk_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_5fjunction_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5fjunction_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Junction;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fjunction_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Lane;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_5foverlap_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5foverlap_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Overlap;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5foverlap_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ParkingSpace;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_PNCJunction;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Road;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_5frsu_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5frsu_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RSU;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5frsu_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_5fsignal_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5fsignal_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_Signal;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fsignal_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_5fspeed_5fbump_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5fspeed_5fbump_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SpeedBump;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fspeed_5fbump_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_5fstop_5fsign_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5fstop_5fsign_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_StopSign;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fstop_5fsign_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_5fyield_5fsign_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5fyield_5fsign_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_YieldSign;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fyield_5fsign_2eproto
namespace apollo {
namespace hdmap {
class ProjectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Projection>
      _instance;
} _Projection_default_instance_;
class HeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Header>
      _instance;
} _Header_default_instance_;
class MapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Map>
      _instance;
} _Map_default_instance_;
}  // namespace hdmap
}  // namespace apollo
namespace protobuf_modules_2fmap_2fproto_2fmap_2eproto {
static void InitDefaultsProjection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_Projection_default_instance_;
    new (ptr) ::apollo::hdmap::Projection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::Projection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Projection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProjection}, {}};

static void InitDefaultsHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_Header_default_instance_;
    new (ptr) ::apollo::hdmap::Header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Header =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHeader}, {
      &protobuf_modules_2fmap_2fproto_2fmap_2eproto::scc_info_Projection.base,}};

static void InitDefaultsMap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_Map_default_instance_;
    new (ptr) ::apollo::hdmap::Map();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::Map::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<14> scc_info_Map =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 14, InitDefaultsMap}, {
      &protobuf_modules_2fmap_2fproto_2fmap_2eproto::scc_info_Header.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5fcrosswalk_2eproto::scc_info_Crosswalk.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5fjunction_2eproto::scc_info_Junction.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::scc_info_Lane.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5fstop_5fsign_2eproto::scc_info_StopSign.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5fsignal_2eproto::scc_info_Signal.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5fyield_5fsign_2eproto::scc_info_YieldSign.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5foverlap_2eproto::scc_info_Overlap.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5fclear_5farea_2eproto::scc_info_ClearArea.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5fspeed_5fbump_2eproto::scc_info_SpeedBump.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::scc_info_Road.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto::scc_info_ParkingSpace.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::scc_info_PNCJunction.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5frsu_2eproto::scc_info_RSU.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Projection.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Header.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Map.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Projection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Projection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Projection, proj_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Header, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Header, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Header, date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Header, projection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Header, district_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Header, generation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Header, rev_major_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Header, rev_minor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Header, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Header, top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Header, right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Header, bottom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Header, vendor_),
  0,
  1,
  7,
  2,
  3,
  4,
  5,
  8,
  9,
  10,
  11,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Map, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Map, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Map, crosswalk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Map, junction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Map, lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Map, stop_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Map, signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Map, yield_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Map, overlap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Map, clear_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Map, speed_bump_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Map, road_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Map, parking_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Map, pnc_junction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::hdmap::Map, rsu_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::apollo::hdmap::Projection)},
  { 7, 24, sizeof(::apollo::hdmap::Header)},
  { 36, 55, sizeof(::apollo::hdmap::Map)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::hdmap::_Projection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::hdmap::_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::hdmap::_Map_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/map/proto/map.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033modules/map/proto/map.proto\022\014apollo.hd"
      "map\032&modules/map/proto/map_clear_area.pr"
      "oto\032%modules/map/proto/map_crosswalk.pro"
      "to\032$modules/map/proto/map_junction.proto"
      "\032 modules/map/proto/map_lane.proto\032#modu"
      "les/map/proto/map_overlap.proto\032\"modules"
      "/map/proto/map_signal.proto\032&modules/map"
      "/proto/map_speed_bump.proto\032%modules/map"
      "/proto/map_stop_sign.proto\032&modules/map/"
      "proto/map_yield_sign.proto\032 modules/map/"
      "proto/map_road.proto\032)modules/map/proto/"
      "map_parking_space.proto\032(modules/map/pro"
      "to/map_pnc_junction.proto\032\037modules/map/p"
      "roto/map_rsu.proto\"\032\n\nProjection\022\014\n\004proj"
      "\030\001 \001(\t\"\353\001\n\006Header\022\017\n\007version\030\001 \001(\014\022\014\n\004da"
      "te\030\002 \001(\014\022,\n\nprojection\030\003 \001(\0132\030.apollo.hd"
      "map.Projection\022\020\n\010district\030\004 \001(\014\022\022\n\ngene"
      "ration\030\005 \001(\014\022\021\n\trev_major\030\006 \001(\014\022\021\n\trev_m"
      "inor\030\007 \001(\014\022\014\n\004left\030\010 \001(\001\022\013\n\003top\030\t \001(\001\022\r\n"
      "\005right\030\n \001(\001\022\016\n\006bottom\030\013 \001(\001\022\016\n\006vendor\030\014"
      " \001(\014\"\304\004\n\003Map\022$\n\006header\030\001 \001(\0132\024.apollo.hd"
      "map.Header\022*\n\tcrosswalk\030\002 \003(\0132\027.apollo.h"
      "dmap.Crosswalk\022(\n\010junction\030\003 \003(\0132\026.apoll"
      "o.hdmap.Junction\022 \n\004lane\030\004 \003(\0132\022.apollo."
      "hdmap.Lane\022)\n\tstop_sign\030\005 \003(\0132\026.apollo.h"
      "dmap.StopSign\022$\n\006signal\030\006 \003(\0132\024.apollo.h"
      "dmap.Signal\022&\n\005yield\030\007 \003(\0132\027.apollo.hdma"
      "p.YieldSign\022&\n\007overlap\030\010 \003(\0132\025.apollo.hd"
      "map.Overlap\022+\n\nclear_area\030\t \003(\0132\027.apollo"
      ".hdmap.ClearArea\022+\n\nspeed_bump\030\n \003(\0132\027.a"
      "pollo.hdmap.SpeedBump\022 \n\004road\030\013 \003(\0132\022.ap"
      "ollo.hdmap.Road\0221\n\rparking_space\030\014 \003(\0132\032"
      ".apollo.hdmap.ParkingSpace\022/\n\014pnc_juncti"
      "on\030\r \003(\0132\031.apollo.hdmap.PNCJunction\022\036\n\003r"
      "su\030\016 \003(\0132\021.apollo.hdmap.RSU"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1387);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/map/proto/map.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fmap_2fproto_2fmap_5fclear_5farea_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_5fcrosswalk_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_5fjunction_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_5foverlap_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_5fsignal_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_5fspeed_5fbump_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_5fstop_5fsign_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_5fyield_5fsign_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_5frsu_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_2eproto
namespace apollo {
namespace hdmap {

// ===================================================================

void Projection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Projection::kProjFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Projection::Projection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fmap_2fproto_2fmap_2eproto::scc_info_Projection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.Projection)
}
Projection::Projection(const Projection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proj_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_proj()) {
    proj_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proj_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Projection)
}

void Projection::SharedCtor() {
  proj_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Projection::~Projection() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Projection)
  SharedDtor();
}

void Projection::SharedDtor() {
  proj_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Projection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Projection::descriptor() {
  ::protobuf_modules_2fmap_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Projection& Projection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fmap_2fproto_2fmap_2eproto::scc_info_Projection.base);
  return *internal_default_instance();
}


void Projection::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Projection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    proj_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Projection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.Projection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string proj = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proj()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proj().data(), static_cast<int>(this->proj().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.hdmap.Projection.proj");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.Projection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.Projection)
  return false;
#undef DO_
}

void Projection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.Projection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string proj = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proj().data(), static_cast<int>(this->proj().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.hdmap.Projection.proj");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->proj(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.Projection)
}

::google::protobuf::uint8* Projection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Projection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string proj = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proj().data(), static_cast<int>(this->proj().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.hdmap.Projection.proj");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->proj(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Projection)
  return target;
}

size_t Projection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Projection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string proj = 1;
  if (has_proj()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proj());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Projection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.Projection)
  GOOGLE_DCHECK_NE(&from, this);
  const Projection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Projection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.Projection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.Projection)
    MergeFrom(*source);
  }
}

void Projection::MergeFrom(const Projection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Projection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_proj()) {
    set_has_proj();
    proj_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proj_);
  }
}

void Projection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Projection::CopyFrom(const Projection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Projection::IsInitialized() const {
  return true;
}

void Projection::Swap(Projection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Projection::InternalSwap(Projection* other) {
  using std::swap;
  proj_.Swap(&other->proj_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Projection::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Header::InitAsDefaultInstance() {
  ::apollo::hdmap::_Header_default_instance_._instance.get_mutable()->projection_ = const_cast< ::apollo::hdmap::Projection*>(
      ::apollo::hdmap::Projection::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kVersionFieldNumber;
const int Header::kDateFieldNumber;
const int Header::kProjectionFieldNumber;
const int Header::kDistrictFieldNumber;
const int Header::kGenerationFieldNumber;
const int Header::kRevMajorFieldNumber;
const int Header::kRevMinorFieldNumber;
const int Header::kLeftFieldNumber;
const int Header::kTopFieldNumber;
const int Header::kRightFieldNumber;
const int Header::kBottomFieldNumber;
const int Header::kVendorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fmap_2fproto_2fmap_2eproto::scc_info_Header.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_date()) {
    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  district_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_district()) {
    district_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.district_);
  }
  generation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_generation()) {
    generation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generation_);
  }
  rev_major_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rev_major()) {
    rev_major_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rev_major_);
  }
  rev_minor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rev_minor()) {
    rev_minor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rev_minor_);
  }
  vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vendor()) {
    vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_);
  }
  if (from.has_projection()) {
    projection_ = new ::apollo::hdmap::Projection(*from.projection_);
  } else {
    projection_ = NULL;
  }
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Header)
}

void Header::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  district_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rev_major_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rev_minor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&projection_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_) -
      reinterpret_cast<char*>(&projection_)) + sizeof(bottom_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  district_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rev_major_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rev_minor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete projection_;
}

void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  ::protobuf_modules_2fmap_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fmap_2fproto_2fmap_2eproto::scc_info_Header.base);
  return *internal_default_instance();
}


void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      date_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      district_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      generation_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      rev_major_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      rev_minor_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      vendor_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(projection_ != NULL);
      projection_->Clear();
    }
  }
  if (cached_has_bits & 3840u) {
    ::memset(&left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bottom_) -
        reinterpret_cast<char*>(&left_)) + sizeof(bottom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.Header)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes date = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.Projection projection = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_projection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes district = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_district()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes generation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_generation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rev_major = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rev_major()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rev_minor = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rev_minor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double left = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double top = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_top();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double right = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double bottom = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_bottom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes vendor = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vendor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->version(), output);
  }

  // optional bytes date = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->date(), output);
  }

  // optional .apollo.hdmap.Projection projection = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_projection(), output);
  }

  // optional bytes district = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->district(), output);
  }

  // optional bytes generation = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->generation(), output);
  }

  // optional bytes rev_major = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->rev_major(), output);
  }

  // optional bytes rev_minor = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->rev_minor(), output);
  }

  // optional double left = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->left(), output);
  }

  // optional double top = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->top(), output);
  }

  // optional double right = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->right(), output);
  }

  // optional double bottom = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->bottom(), output);
  }

  // optional bytes vendor = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->vendor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes version = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->version(), target);
  }

  // optional bytes date = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->date(), target);
  }

  // optional .apollo.hdmap.Projection projection = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_projection(), deterministic, target);
  }

  // optional bytes district = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->district(), target);
  }

  // optional bytes generation = 5;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->generation(), target);
  }

  // optional bytes rev_major = 6;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->rev_major(), target);
  }

  // optional bytes rev_minor = 7;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->rev_minor(), target);
  }

  // optional double left = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->left(), target);
  }

  // optional double top = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->top(), target);
  }

  // optional double right = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->right(), target);
  }

  // optional double bottom = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->bottom(), target);
  }

  // optional bytes vendor = 12;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->vendor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Header)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

    // optional bytes date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->date());
    }

    // optional bytes district = 4;
    if (has_district()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->district());
    }

    // optional bytes generation = 5;
    if (has_generation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->generation());
    }

    // optional bytes rev_major = 6;
    if (has_rev_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rev_major());
    }

    // optional bytes rev_minor = 7;
    if (has_rev_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rev_minor());
    }

    // optional bytes vendor = 12;
    if (has_vendor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vendor());
    }

    // optional .apollo.hdmap.Projection projection = 3;
    if (has_projection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *projection_);
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double left = 8;
    if (has_left()) {
      total_size += 1 + 8;
    }

    // optional double top = 9;
    if (has_top()) {
      total_size += 1 + 8;
    }

    // optional double right = 10;
    if (has_right()) {
      total_size += 1 + 8;
    }

    // optional double bottom = 11;
    if (has_bottom()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_date();
      date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_district();
      district_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.district_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_generation();
      generation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generation_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_rev_major();
      rev_major_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rev_major_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_rev_minor();
      rev_minor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rev_minor_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_vendor();
      vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_projection()->::apollo::hdmap::Projection::MergeFrom(from.projection());
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000200u) {
      top_ = from.top_;
    }
    if (cached_has_bits & 0x00000400u) {
      right_ = from.right_;
    }
    if (cached_has_bits & 0x00000800u) {
      bottom_ = from.bottom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  date_.Swap(&other->date_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  district_.Swap(&other->district_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  generation_.Swap(&other->generation_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rev_major_.Swap(&other->rev_major_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rev_minor_.Swap(&other->rev_minor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vendor_.Swap(&other->vendor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(projection_, other->projection_);
  swap(left_, other->left_);
  swap(top_, other->top_);
  swap(right_, other->right_);
  swap(bottom_, other->bottom_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Map::InitAsDefaultInstance() {
  ::apollo::hdmap::_Map_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::hdmap::Header*>(
      ::apollo::hdmap::Header::internal_default_instance());
}
void Map::clear_crosswalk() {
  crosswalk_.Clear();
}
void Map::clear_junction() {
  junction_.Clear();
}
void Map::clear_lane() {
  lane_.Clear();
}
void Map::clear_stop_sign() {
  stop_sign_.Clear();
}
void Map::clear_signal() {
  signal_.Clear();
}
void Map::clear_yield() {
  yield_.Clear();
}
void Map::clear_overlap() {
  overlap_.Clear();
}
void Map::clear_clear_area() {
  clear_area_.Clear();
}
void Map::clear_speed_bump() {
  speed_bump_.Clear();
}
void Map::clear_road() {
  road_.Clear();
}
void Map::clear_parking_space() {
  parking_space_.Clear();
}
void Map::clear_pnc_junction() {
  pnc_junction_.Clear();
}
void Map::clear_rsu() {
  rsu_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Map::kHeaderFieldNumber;
const int Map::kCrosswalkFieldNumber;
const int Map::kJunctionFieldNumber;
const int Map::kLaneFieldNumber;
const int Map::kStopSignFieldNumber;
const int Map::kSignalFieldNumber;
const int Map::kYieldFieldNumber;
const int Map::kOverlapFieldNumber;
const int Map::kClearAreaFieldNumber;
const int Map::kSpeedBumpFieldNumber;
const int Map::kRoadFieldNumber;
const int Map::kParkingSpaceFieldNumber;
const int Map::kPncJunctionFieldNumber;
const int Map::kRsuFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Map::Map()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fmap_2fproto_2fmap_2eproto::scc_info_Map.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.Map)
}
Map::Map(const Map& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      crosswalk_(from.crosswalk_),
      junction_(from.junction_),
      lane_(from.lane_),
      stop_sign_(from.stop_sign_),
      signal_(from.signal_),
      yield_(from.yield_),
      overlap_(from.overlap_),
      clear_area_(from.clear_area_),
      speed_bump_(from.speed_bump_),
      road_(from.road_),
      parking_space_(from.parking_space_),
      pnc_junction_(from.pnc_junction_),
      rsu_(from.rsu_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::hdmap::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.Map)
}

void Map::SharedCtor() {
  header_ = NULL;
}

Map::~Map() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.Map)
  SharedDtor();
}

void Map::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void Map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Map::descriptor() {
  ::protobuf_modules_2fmap_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Map& Map::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fmap_2fproto_2fmap_2eproto::scc_info_Map.base);
  return *internal_default_instance();
}


void Map::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.Map)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crosswalk_.Clear();
  junction_.Clear();
  lane_.Clear();
  stop_sign_.Clear();
  signal_.Clear();
  yield_.Clear();
  overlap_.Clear();
  clear_area_.Clear();
  speed_bump_.Clear();
  road_.Clear();
  parking_space_.Clear();
  pnc_junction_.Clear();
  rsu_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.hdmap.Map)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.hdmap.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Crosswalk crosswalk = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_crosswalk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Junction junction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_junction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Lane lane = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.StopSign stop_sign = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stop_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Signal signal = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.YieldSign yield = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_yield()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Overlap overlap = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_overlap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.ClearArea clear_area = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_clear_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.SpeedBump speed_bump = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_speed_bump()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.Road road = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_road()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.ParkingSpace parking_space = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_parking_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.PNCJunction pnc_junction = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pnc_junction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.hdmap.RSU rsu = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rsu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.hdmap.Map)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.hdmap.Map)
  return false;
#undef DO_
}

void Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.hdmap.Map)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // repeated .apollo.hdmap.Crosswalk crosswalk = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crosswalk_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->crosswalk(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.Junction junction = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->junction_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->junction(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.Lane lane = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->lane(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.StopSign stop_sign = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stop_sign_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->stop_sign(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.Signal signal = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signal_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->signal(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.YieldSign yield = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->yield_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->yield(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.Overlap overlap = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overlap_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->overlap(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.ClearArea clear_area = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->clear_area_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->clear_area(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.SpeedBump speed_bump = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speed_bump_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->speed_bump(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.Road road = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->road(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.ParkingSpace parking_space = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parking_space_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->parking_space(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.PNCJunction pnc_junction = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pnc_junction_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->pnc_junction(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.hdmap.RSU rsu = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rsu_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->rsu(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.hdmap.Map)
}

::google::protobuf::uint8* Map::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.Map)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // repeated .apollo.hdmap.Crosswalk crosswalk = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crosswalk_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->crosswalk(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.Junction junction = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->junction_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->junction(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.Lane lane = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->lane(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.StopSign stop_sign = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stop_sign_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->stop_sign(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.Signal signal = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signal_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->signal(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.YieldSign yield = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->yield_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->yield(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.Overlap overlap = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overlap_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->overlap(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.ClearArea clear_area = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->clear_area_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->clear_area(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.SpeedBump speed_bump = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->speed_bump_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->speed_bump(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.Road road = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->road(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.ParkingSpace parking_space = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parking_space_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->parking_space(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.PNCJunction pnc_junction = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pnc_junction_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->pnc_junction(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.hdmap.RSU rsu = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rsu_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->rsu(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.Map)
  return target;
}

size_t Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.Map)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.hdmap.Crosswalk crosswalk = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->crosswalk_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->crosswalk(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.Junction junction = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->junction_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->junction(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.Lane lane = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.StopSign stop_sign = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->stop_sign_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stop_sign(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.Signal signal = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->signal_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->signal(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.YieldSign yield = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->yield_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->yield(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.Overlap overlap = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->overlap_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->overlap(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.ClearArea clear_area = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->clear_area_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->clear_area(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.SpeedBump speed_bump = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->speed_bump_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->speed_bump(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.Road road = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->road_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.ParkingSpace parking_space = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->parking_space_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->parking_space(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.PNCJunction pnc_junction = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->pnc_junction_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pnc_junction(static_cast<int>(i)));
    }
  }

  // repeated .apollo.hdmap.RSU rsu = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->rsu_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rsu(static_cast<int>(i)));
    }
  }

  // optional .apollo.hdmap.Header header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.Map)
  GOOGLE_DCHECK_NE(&from, this);
  const Map* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Map>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.Map)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.Map)
    MergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.Map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  crosswalk_.MergeFrom(from.crosswalk_);
  junction_.MergeFrom(from.junction_);
  lane_.MergeFrom(from.lane_);
  stop_sign_.MergeFrom(from.stop_sign_);
  signal_.MergeFrom(from.signal_);
  yield_.MergeFrom(from.yield_);
  overlap_.MergeFrom(from.overlap_);
  clear_area_.MergeFrom(from.clear_area_);
  speed_bump_.MergeFrom(from.speed_bump_);
  road_.MergeFrom(from.road_);
  parking_space_.MergeFrom(from.parking_space_);
  pnc_junction_.MergeFrom(from.pnc_junction_);
  rsu_.MergeFrom(from.rsu_);
  if (from.has_header()) {
    mutable_header()->::apollo::hdmap::Header::MergeFrom(from.header());
  }
}

void Map::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  return true;
}

void Map::Swap(Map* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Map::InternalSwap(Map* other) {
  using std::swap;
  CastToBase(&crosswalk_)->InternalSwap(CastToBase(&other->crosswalk_));
  CastToBase(&junction_)->InternalSwap(CastToBase(&other->junction_));
  CastToBase(&lane_)->InternalSwap(CastToBase(&other->lane_));
  CastToBase(&stop_sign_)->InternalSwap(CastToBase(&other->stop_sign_));
  CastToBase(&signal_)->InternalSwap(CastToBase(&other->signal_));
  CastToBase(&yield_)->InternalSwap(CastToBase(&other->yield_));
  CastToBase(&overlap_)->InternalSwap(CastToBase(&other->overlap_));
  CastToBase(&clear_area_)->InternalSwap(CastToBase(&other->clear_area_));
  CastToBase(&speed_bump_)->InternalSwap(CastToBase(&other->speed_bump_));
  CastToBase(&road_)->InternalSwap(CastToBase(&other->road_));
  CastToBase(&parking_space_)->InternalSwap(CastToBase(&other->parking_space_));
  CastToBase(&pnc_junction_)->InternalSwap(CastToBase(&other->pnc_junction_));
  CastToBase(&rsu_)->InternalSwap(CastToBase(&other->rsu_));
  swap(header_, other->header_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Map::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::hdmap::Projection* Arena::CreateMaybeMessage< ::apollo::hdmap::Projection >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::Projection >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::hdmap::Header* Arena::CreateMaybeMessage< ::apollo::hdmap::Header >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::Header >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::hdmap::Map* Arena::CreateMaybeMessage< ::apollo::hdmap::Map >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::Map >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
