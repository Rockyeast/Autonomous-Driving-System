// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map.proto

#ifndef PROTOBUF_INCLUDED_modules_2fmap_2fproto_2fmap_2eproto
#define PROTOBUF_INCLUDED_modules_2fmap_2fproto_2fmap_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/map/proto/map_clear_area.pb.h"
#include "modules/map/proto/map_crosswalk.pb.h"
#include "modules/map/proto/map_junction.pb.h"
#include "modules/map/proto/map_lane.pb.h"
#include "modules/map/proto/map_overlap.pb.h"
#include "modules/map/proto/map_signal.pb.h"
#include "modules/map/proto/map_speed_bump.pb.h"
#include "modules/map/proto/map_stop_sign.pb.h"
#include "modules/map/proto/map_yield_sign.pb.h"
#include "modules/map/proto/map_road.pb.h"
#include "modules/map/proto/map_parking_space.pb.h"
#include "modules/map/proto/map_pnc_junction.pb.h"
#include "modules/map/proto/map_rsu.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_2eproto 

namespace protobuf_modules_2fmap_2fproto_2fmap_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_2eproto
namespace apollo {
namespace hdmap {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Map;
class MapDefaultTypeInternal;
extern MapDefaultTypeInternal _Map_default_instance_;
class Projection;
class ProjectionDefaultTypeInternal;
extern ProjectionDefaultTypeInternal _Projection_default_instance_;
}  // namespace hdmap
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::hdmap::Header* Arena::CreateMaybeMessage<::apollo::hdmap::Header>(Arena*);
template<> ::apollo::hdmap::Map* Arena::CreateMaybeMessage<::apollo::hdmap::Map>(Arena*);
template<> ::apollo::hdmap::Projection* Arena::CreateMaybeMessage<::apollo::hdmap::Projection>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace hdmap {

// ===================================================================

class Projection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.Projection) */ {
 public:
  Projection();
  virtual ~Projection();

  Projection(const Projection& from);

  inline Projection& operator=(const Projection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Projection(Projection&& from) noexcept
    : Projection() {
    *this = ::std::move(from);
  }

  inline Projection& operator=(Projection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Projection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Projection* internal_default_instance() {
    return reinterpret_cast<const Projection*>(
               &_Projection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Projection* other);
  friend void swap(Projection& a, Projection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Projection* New() const final {
    return CreateMaybeMessage<Projection>(NULL);
  }

  Projection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Projection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Projection& from);
  void MergeFrom(const Projection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Projection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string proj = 1;
  bool has_proj() const;
  void clear_proj();
  static const int kProjFieldNumber = 1;
  const ::std::string& proj() const;
  void set_proj(const ::std::string& value);
  #if LANG_CXX11
  void set_proj(::std::string&& value);
  #endif
  void set_proj(const char* value);
  void set_proj(const char* value, size_t size);
  ::std::string* mutable_proj();
  ::std::string* release_proj();
  void set_allocated_proj(::std::string* proj);

  // @@protoc_insertion_point(class_scope:apollo.hdmap.Projection)
 private:
  void set_has_proj();
  void clear_has_proj();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr proj_;
  friend struct ::protobuf_modules_2fmap_2fproto_2fmap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(NULL);
  }

  Header* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const void* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional bytes date = 2;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 2;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  #if LANG_CXX11
  void set_date(::std::string&& value);
  #endif
  void set_date(const char* value);
  void set_date(const void* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // optional bytes district = 4;
  bool has_district() const;
  void clear_district();
  static const int kDistrictFieldNumber = 4;
  const ::std::string& district() const;
  void set_district(const ::std::string& value);
  #if LANG_CXX11
  void set_district(::std::string&& value);
  #endif
  void set_district(const char* value);
  void set_district(const void* value, size_t size);
  ::std::string* mutable_district();
  ::std::string* release_district();
  void set_allocated_district(::std::string* district);

  // optional bytes generation = 5;
  bool has_generation() const;
  void clear_generation();
  static const int kGenerationFieldNumber = 5;
  const ::std::string& generation() const;
  void set_generation(const ::std::string& value);
  #if LANG_CXX11
  void set_generation(::std::string&& value);
  #endif
  void set_generation(const char* value);
  void set_generation(const void* value, size_t size);
  ::std::string* mutable_generation();
  ::std::string* release_generation();
  void set_allocated_generation(::std::string* generation);

  // optional bytes rev_major = 6;
  bool has_rev_major() const;
  void clear_rev_major();
  static const int kRevMajorFieldNumber = 6;
  const ::std::string& rev_major() const;
  void set_rev_major(const ::std::string& value);
  #if LANG_CXX11
  void set_rev_major(::std::string&& value);
  #endif
  void set_rev_major(const char* value);
  void set_rev_major(const void* value, size_t size);
  ::std::string* mutable_rev_major();
  ::std::string* release_rev_major();
  void set_allocated_rev_major(::std::string* rev_major);

  // optional bytes rev_minor = 7;
  bool has_rev_minor() const;
  void clear_rev_minor();
  static const int kRevMinorFieldNumber = 7;
  const ::std::string& rev_minor() const;
  void set_rev_minor(const ::std::string& value);
  #if LANG_CXX11
  void set_rev_minor(::std::string&& value);
  #endif
  void set_rev_minor(const char* value);
  void set_rev_minor(const void* value, size_t size);
  ::std::string* mutable_rev_minor();
  ::std::string* release_rev_minor();
  void set_allocated_rev_minor(::std::string* rev_minor);

  // optional bytes vendor = 12;
  bool has_vendor() const;
  void clear_vendor();
  static const int kVendorFieldNumber = 12;
  const ::std::string& vendor() const;
  void set_vendor(const ::std::string& value);
  #if LANG_CXX11
  void set_vendor(::std::string&& value);
  #endif
  void set_vendor(const char* value);
  void set_vendor(const void* value, size_t size);
  ::std::string* mutable_vendor();
  ::std::string* release_vendor();
  void set_allocated_vendor(::std::string* vendor);

  // optional .apollo.hdmap.Projection projection = 3;
  bool has_projection() const;
  void clear_projection();
  static const int kProjectionFieldNumber = 3;
  private:
  const ::apollo::hdmap::Projection& _internal_projection() const;
  public:
  const ::apollo::hdmap::Projection& projection() const;
  ::apollo::hdmap::Projection* release_projection();
  ::apollo::hdmap::Projection* mutable_projection();
  void set_allocated_projection(::apollo::hdmap::Projection* projection);

  // optional double left = 8;
  bool has_left() const;
  void clear_left();
  static const int kLeftFieldNumber = 8;
  double left() const;
  void set_left(double value);

  // optional double top = 9;
  bool has_top() const;
  void clear_top();
  static const int kTopFieldNumber = 9;
  double top() const;
  void set_top(double value);

  // optional double right = 10;
  bool has_right() const;
  void clear_right();
  static const int kRightFieldNumber = 10;
  double right() const;
  void set_right(double value);

  // optional double bottom = 11;
  bool has_bottom() const;
  void clear_bottom();
  static const int kBottomFieldNumber = 11;
  double bottom() const;
  void set_bottom(double value);

  // @@protoc_insertion_point(class_scope:apollo.hdmap.Header)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_date();
  void clear_has_date();
  void set_has_projection();
  void clear_has_projection();
  void set_has_district();
  void clear_has_district();
  void set_has_generation();
  void clear_has_generation();
  void set_has_rev_major();
  void clear_has_rev_major();
  void set_has_rev_minor();
  void clear_has_rev_minor();
  void set_has_left();
  void clear_has_left();
  void set_has_top();
  void clear_has_top();
  void set_has_right();
  void clear_has_right();
  void set_has_bottom();
  void clear_has_bottom();
  void set_has_vendor();
  void clear_has_vendor();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::internal::ArenaStringPtr district_;
  ::google::protobuf::internal::ArenaStringPtr generation_;
  ::google::protobuf::internal::ArenaStringPtr rev_major_;
  ::google::protobuf::internal::ArenaStringPtr rev_minor_;
  ::google::protobuf::internal::ArenaStringPtr vendor_;
  ::apollo::hdmap::Projection* projection_;
  double left_;
  double top_;
  double right_;
  double bottom_;
  friend struct ::protobuf_modules_2fmap_2fproto_2fmap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Map : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.Map) */ {
 public:
  Map();
  virtual ~Map();

  Map(const Map& from);

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Map(Map&& from) noexcept
    : Map() {
    *this = ::std::move(from);
  }

  inline Map& operator=(Map&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map* internal_default_instance() {
    return reinterpret_cast<const Map*>(
               &_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Map* other);
  friend void swap(Map& a, Map& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Map* New() const final {
    return CreateMaybeMessage<Map>(NULL);
  }

  Map* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Map>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.hdmap.Crosswalk crosswalk = 2;
  int crosswalk_size() const;
  void clear_crosswalk();
  static const int kCrosswalkFieldNumber = 2;
  ::apollo::hdmap::Crosswalk* mutable_crosswalk(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Crosswalk >*
      mutable_crosswalk();
  const ::apollo::hdmap::Crosswalk& crosswalk(int index) const;
  ::apollo::hdmap::Crosswalk* add_crosswalk();
  const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Crosswalk >&
      crosswalk() const;

  // repeated .apollo.hdmap.Junction junction = 3;
  int junction_size() const;
  void clear_junction();
  static const int kJunctionFieldNumber = 3;
  ::apollo::hdmap::Junction* mutable_junction(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Junction >*
      mutable_junction();
  const ::apollo::hdmap::Junction& junction(int index) const;
  ::apollo::hdmap::Junction* add_junction();
  const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Junction >&
      junction() const;

  // repeated .apollo.hdmap.Lane lane = 4;
  int lane_size() const;
  void clear_lane();
  static const int kLaneFieldNumber = 4;
  ::apollo::hdmap::Lane* mutable_lane(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Lane >*
      mutable_lane();
  const ::apollo::hdmap::Lane& lane(int index) const;
  ::apollo::hdmap::Lane* add_lane();
  const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Lane >&
      lane() const;

  // repeated .apollo.hdmap.StopSign stop_sign = 5;
  int stop_sign_size() const;
  void clear_stop_sign();
  static const int kStopSignFieldNumber = 5;
  ::apollo::hdmap::StopSign* mutable_stop_sign(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::StopSign >*
      mutable_stop_sign();
  const ::apollo::hdmap::StopSign& stop_sign(int index) const;
  ::apollo::hdmap::StopSign* add_stop_sign();
  const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::StopSign >&
      stop_sign() const;

  // repeated .apollo.hdmap.Signal signal = 6;
  int signal_size() const;
  void clear_signal();
  static const int kSignalFieldNumber = 6;
  ::apollo::hdmap::Signal* mutable_signal(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Signal >*
      mutable_signal();
  const ::apollo::hdmap::Signal& signal(int index) const;
  ::apollo::hdmap::Signal* add_signal();
  const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Signal >&
      signal() const;

  // repeated .apollo.hdmap.YieldSign yield = 7;
  int yield_size() const;
  void clear_yield();
  static const int kYieldFieldNumber = 7;
  ::apollo::hdmap::YieldSign* mutable_yield(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::YieldSign >*
      mutable_yield();
  const ::apollo::hdmap::YieldSign& yield(int index) const;
  ::apollo::hdmap::YieldSign* add_yield();
  const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::YieldSign >&
      yield() const;

  // repeated .apollo.hdmap.Overlap overlap = 8;
  int overlap_size() const;
  void clear_overlap();
  static const int kOverlapFieldNumber = 8;
  ::apollo::hdmap::Overlap* mutable_overlap(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Overlap >*
      mutable_overlap();
  const ::apollo::hdmap::Overlap& overlap(int index) const;
  ::apollo::hdmap::Overlap* add_overlap();
  const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Overlap >&
      overlap() const;

  // repeated .apollo.hdmap.ClearArea clear_area = 9;
  int clear_area_size() const;
  void clear_clear_area();
  static const int kClearAreaFieldNumber = 9;
  ::apollo::hdmap::ClearArea* mutable_clear_area(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::ClearArea >*
      mutable_clear_area();
  const ::apollo::hdmap::ClearArea& clear_area(int index) const;
  ::apollo::hdmap::ClearArea* add_clear_area();
  const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::ClearArea >&
      clear_area() const;

  // repeated .apollo.hdmap.SpeedBump speed_bump = 10;
  int speed_bump_size() const;
  void clear_speed_bump();
  static const int kSpeedBumpFieldNumber = 10;
  ::apollo::hdmap::SpeedBump* mutable_speed_bump(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::SpeedBump >*
      mutable_speed_bump();
  const ::apollo::hdmap::SpeedBump& speed_bump(int index) const;
  ::apollo::hdmap::SpeedBump* add_speed_bump();
  const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::SpeedBump >&
      speed_bump() const;

  // repeated .apollo.hdmap.Road road = 11;
  int road_size() const;
  void clear_road();
  static const int kRoadFieldNumber = 11;
  ::apollo::hdmap::Road* mutable_road(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Road >*
      mutable_road();
  const ::apollo::hdmap::Road& road(int index) const;
  ::apollo::hdmap::Road* add_road();
  const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Road >&
      road() const;

  // repeated .apollo.hdmap.ParkingSpace parking_space = 12;
  int parking_space_size() const;
  void clear_parking_space();
  static const int kParkingSpaceFieldNumber = 12;
  ::apollo::hdmap::ParkingSpace* mutable_parking_space(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::ParkingSpace >*
      mutable_parking_space();
  const ::apollo::hdmap::ParkingSpace& parking_space(int index) const;
  ::apollo::hdmap::ParkingSpace* add_parking_space();
  const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::ParkingSpace >&
      parking_space() const;

  // repeated .apollo.hdmap.PNCJunction pnc_junction = 13;
  int pnc_junction_size() const;
  void clear_pnc_junction();
  static const int kPncJunctionFieldNumber = 13;
  ::apollo::hdmap::PNCJunction* mutable_pnc_junction(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::PNCJunction >*
      mutable_pnc_junction();
  const ::apollo::hdmap::PNCJunction& pnc_junction(int index) const;
  ::apollo::hdmap::PNCJunction* add_pnc_junction();
  const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::PNCJunction >&
      pnc_junction() const;

  // repeated .apollo.hdmap.RSU rsu = 14;
  int rsu_size() const;
  void clear_rsu();
  static const int kRsuFieldNumber = 14;
  ::apollo::hdmap::RSU* mutable_rsu(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::RSU >*
      mutable_rsu();
  const ::apollo::hdmap::RSU& rsu(int index) const;
  ::apollo::hdmap::RSU* add_rsu();
  const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::RSU >&
      rsu() const;

  // optional .apollo.hdmap.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::apollo::hdmap::Header& _internal_header() const;
  public:
  const ::apollo::hdmap::Header& header() const;
  ::apollo::hdmap::Header* release_header();
  ::apollo::hdmap::Header* mutable_header();
  void set_allocated_header(::apollo::hdmap::Header* header);

  // @@protoc_insertion_point(class_scope:apollo.hdmap.Map)
 private:
  void set_has_header();
  void clear_has_header();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Crosswalk > crosswalk_;
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Junction > junction_;
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Lane > lane_;
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::StopSign > stop_sign_;
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Signal > signal_;
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::YieldSign > yield_;
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Overlap > overlap_;
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::ClearArea > clear_area_;
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::SpeedBump > speed_bump_;
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Road > road_;
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::ParkingSpace > parking_space_;
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::PNCJunction > pnc_junction_;
  ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::RSU > rsu_;
  ::apollo::hdmap::Header* header_;
  friend struct ::protobuf_modules_2fmap_2fproto_2fmap_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Projection

// optional string proj = 1;
inline bool Projection::has_proj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Projection::set_has_proj() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Projection::clear_has_proj() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Projection::clear_proj() {
  proj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proj();
}
inline const ::std::string& Projection::proj() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Projection.proj)
  return proj_.GetNoArena();
}
inline void Projection::set_proj(const ::std::string& value) {
  set_has_proj();
  proj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.Projection.proj)
}
#if LANG_CXX11
inline void Projection::set_proj(::std::string&& value) {
  set_has_proj();
  proj_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.hdmap.Projection.proj)
}
#endif
inline void Projection::set_proj(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proj();
  proj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.hdmap.Projection.proj)
}
inline void Projection::set_proj(const char* value, size_t size) {
  set_has_proj();
  proj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.hdmap.Projection.proj)
}
inline ::std::string* Projection::mutable_proj() {
  set_has_proj();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Projection.proj)
  return proj_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Projection::release_proj() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Projection.proj)
  if (!has_proj()) {
    return NULL;
  }
  clear_has_proj();
  return proj_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Projection::set_allocated_proj(::std::string* proj) {
  if (proj != NULL) {
    set_has_proj();
  } else {
    clear_has_proj();
  }
  proj_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proj);
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Projection.proj)
}

// -------------------------------------------------------------------

// Header

// optional bytes version = 1;
inline bool Header::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& Header::version() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.version)
  return version_.GetNoArena();
}
inline void Header::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.version)
}
#if LANG_CXX11
inline void Header::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.hdmap.Header.version)
}
#endif
inline void Header::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.hdmap.Header.version)
}
inline void Header::set_version(const void* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.hdmap.Header.version)
}
inline ::std::string* Header::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Header.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_version() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Header.version)
  if (!has_version()) {
    return NULL;
  }
  clear_has_version();
  return version_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Header.version)
}

// optional bytes date = 2;
inline bool Header::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
inline const ::std::string& Header::date() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.date)
  return date_.GetNoArena();
}
inline void Header::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.date)
}
#if LANG_CXX11
inline void Header::set_date(::std::string&& value) {
  set_has_date();
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.hdmap.Header.date)
}
#endif
inline void Header::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.hdmap.Header.date)
}
inline void Header::set_date(const void* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.hdmap.Header.date)
}
inline ::std::string* Header::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Header.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_date() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Header.date)
  if (!has_date()) {
    return NULL;
  }
  clear_has_date();
  return date_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Header.date)
}

// optional .apollo.hdmap.Projection projection = 3;
inline bool Header::has_projection() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Header::set_has_projection() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Header::clear_has_projection() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Header::clear_projection() {
  if (projection_ != NULL) projection_->Clear();
  clear_has_projection();
}
inline const ::apollo::hdmap::Projection& Header::_internal_projection() const {
  return *projection_;
}
inline const ::apollo::hdmap::Projection& Header::projection() const {
  const ::apollo::hdmap::Projection* p = projection_;
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.projection)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::hdmap::Projection*>(
      &::apollo::hdmap::_Projection_default_instance_);
}
inline ::apollo::hdmap::Projection* Header::release_projection() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Header.projection)
  clear_has_projection();
  ::apollo::hdmap::Projection* temp = projection_;
  projection_ = NULL;
  return temp;
}
inline ::apollo::hdmap::Projection* Header::mutable_projection() {
  set_has_projection();
  if (projection_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::Projection>(GetArenaNoVirtual());
    projection_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Header.projection)
  return projection_;
}
inline void Header::set_allocated_projection(::apollo::hdmap::Projection* projection) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete projection_;
  }
  if (projection) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      projection = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, projection, submessage_arena);
    }
    set_has_projection();
  } else {
    clear_has_projection();
  }
  projection_ = projection;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Header.projection)
}

// optional bytes district = 4;
inline bool Header::has_district() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Header::set_has_district() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Header::clear_has_district() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Header::clear_district() {
  district_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_district();
}
inline const ::std::string& Header::district() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.district)
  return district_.GetNoArena();
}
inline void Header::set_district(const ::std::string& value) {
  set_has_district();
  district_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.district)
}
#if LANG_CXX11
inline void Header::set_district(::std::string&& value) {
  set_has_district();
  district_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.hdmap.Header.district)
}
#endif
inline void Header::set_district(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_district();
  district_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.hdmap.Header.district)
}
inline void Header::set_district(const void* value, size_t size) {
  set_has_district();
  district_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.hdmap.Header.district)
}
inline ::std::string* Header::mutable_district() {
  set_has_district();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Header.district)
  return district_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_district() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Header.district)
  if (!has_district()) {
    return NULL;
  }
  clear_has_district();
  return district_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_district(::std::string* district) {
  if (district != NULL) {
    set_has_district();
  } else {
    clear_has_district();
  }
  district_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), district);
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Header.district)
}

// optional bytes generation = 5;
inline bool Header::has_generation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Header::set_has_generation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Header::clear_has_generation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Header::clear_generation() {
  generation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_generation();
}
inline const ::std::string& Header::generation() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.generation)
  return generation_.GetNoArena();
}
inline void Header::set_generation(const ::std::string& value) {
  set_has_generation();
  generation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.generation)
}
#if LANG_CXX11
inline void Header::set_generation(::std::string&& value) {
  set_has_generation();
  generation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.hdmap.Header.generation)
}
#endif
inline void Header::set_generation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_generation();
  generation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.hdmap.Header.generation)
}
inline void Header::set_generation(const void* value, size_t size) {
  set_has_generation();
  generation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.hdmap.Header.generation)
}
inline ::std::string* Header::mutable_generation() {
  set_has_generation();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Header.generation)
  return generation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_generation() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Header.generation)
  if (!has_generation()) {
    return NULL;
  }
  clear_has_generation();
  return generation_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_generation(::std::string* generation) {
  if (generation != NULL) {
    set_has_generation();
  } else {
    clear_has_generation();
  }
  generation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), generation);
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Header.generation)
}

// optional bytes rev_major = 6;
inline bool Header::has_rev_major() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Header::set_has_rev_major() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Header::clear_has_rev_major() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Header::clear_rev_major() {
  rev_major_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rev_major();
}
inline const ::std::string& Header::rev_major() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.rev_major)
  return rev_major_.GetNoArena();
}
inline void Header::set_rev_major(const ::std::string& value) {
  set_has_rev_major();
  rev_major_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.rev_major)
}
#if LANG_CXX11
inline void Header::set_rev_major(::std::string&& value) {
  set_has_rev_major();
  rev_major_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.hdmap.Header.rev_major)
}
#endif
inline void Header::set_rev_major(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rev_major();
  rev_major_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.hdmap.Header.rev_major)
}
inline void Header::set_rev_major(const void* value, size_t size) {
  set_has_rev_major();
  rev_major_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.hdmap.Header.rev_major)
}
inline ::std::string* Header::mutable_rev_major() {
  set_has_rev_major();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Header.rev_major)
  return rev_major_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_rev_major() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Header.rev_major)
  if (!has_rev_major()) {
    return NULL;
  }
  clear_has_rev_major();
  return rev_major_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_rev_major(::std::string* rev_major) {
  if (rev_major != NULL) {
    set_has_rev_major();
  } else {
    clear_has_rev_major();
  }
  rev_major_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rev_major);
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Header.rev_major)
}

// optional bytes rev_minor = 7;
inline bool Header::has_rev_minor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Header::set_has_rev_minor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Header::clear_has_rev_minor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Header::clear_rev_minor() {
  rev_minor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rev_minor();
}
inline const ::std::string& Header::rev_minor() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.rev_minor)
  return rev_minor_.GetNoArena();
}
inline void Header::set_rev_minor(const ::std::string& value) {
  set_has_rev_minor();
  rev_minor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.rev_minor)
}
#if LANG_CXX11
inline void Header::set_rev_minor(::std::string&& value) {
  set_has_rev_minor();
  rev_minor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.hdmap.Header.rev_minor)
}
#endif
inline void Header::set_rev_minor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rev_minor();
  rev_minor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.hdmap.Header.rev_minor)
}
inline void Header::set_rev_minor(const void* value, size_t size) {
  set_has_rev_minor();
  rev_minor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.hdmap.Header.rev_minor)
}
inline ::std::string* Header::mutable_rev_minor() {
  set_has_rev_minor();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Header.rev_minor)
  return rev_minor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_rev_minor() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Header.rev_minor)
  if (!has_rev_minor()) {
    return NULL;
  }
  clear_has_rev_minor();
  return rev_minor_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_rev_minor(::std::string* rev_minor) {
  if (rev_minor != NULL) {
    set_has_rev_minor();
  } else {
    clear_has_rev_minor();
  }
  rev_minor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rev_minor);
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Header.rev_minor)
}

// optional double left = 8;
inline bool Header::has_left() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Header::set_has_left() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Header::clear_has_left() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Header::clear_left() {
  left_ = 0;
  clear_has_left();
}
inline double Header::left() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.left)
  return left_;
}
inline void Header::set_left(double value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.left)
}

// optional double top = 9;
inline bool Header::has_top() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Header::set_has_top() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Header::clear_has_top() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Header::clear_top() {
  top_ = 0;
  clear_has_top();
}
inline double Header::top() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.top)
  return top_;
}
inline void Header::set_top(double value) {
  set_has_top();
  top_ = value;
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.top)
}

// optional double right = 10;
inline bool Header::has_right() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Header::set_has_right() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Header::clear_has_right() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Header::clear_right() {
  right_ = 0;
  clear_has_right();
}
inline double Header::right() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.right)
  return right_;
}
inline void Header::set_right(double value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.right)
}

// optional double bottom = 11;
inline bool Header::has_bottom() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Header::set_has_bottom() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Header::clear_has_bottom() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Header::clear_bottom() {
  bottom_ = 0;
  clear_has_bottom();
}
inline double Header::bottom() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.bottom)
  return bottom_;
}
inline void Header::set_bottom(double value) {
  set_has_bottom();
  bottom_ = value;
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.bottom)
}

// optional bytes vendor = 12;
inline bool Header::has_vendor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Header::set_has_vendor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Header::clear_has_vendor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Header::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vendor();
}
inline const ::std::string& Header::vendor() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Header.vendor)
  return vendor_.GetNoArena();
}
inline void Header::set_vendor(const ::std::string& value) {
  set_has_vendor();
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.Header.vendor)
}
#if LANG_CXX11
inline void Header::set_vendor(::std::string&& value) {
  set_has_vendor();
  vendor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.hdmap.Header.vendor)
}
#endif
inline void Header::set_vendor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vendor();
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.hdmap.Header.vendor)
}
inline void Header::set_vendor(const void* value, size_t size) {
  set_has_vendor();
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.hdmap.Header.vendor)
}
inline ::std::string* Header::mutable_vendor() {
  set_has_vendor();
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Header.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_vendor() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Header.vendor)
  if (!has_vendor()) {
    return NULL;
  }
  clear_has_vendor();
  return vendor_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    set_has_vendor();
  } else {
    clear_has_vendor();
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Header.vendor)
}

// -------------------------------------------------------------------

// Map

// optional .apollo.hdmap.Header header = 1;
inline bool Map::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::apollo::hdmap::Header& Map::_internal_header() const {
  return *header_;
}
inline const ::apollo::hdmap::Header& Map::header() const {
  const ::apollo::hdmap::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::hdmap::Header*>(
      &::apollo::hdmap::_Header_default_instance_);
}
inline ::apollo::hdmap::Header* Map::release_header() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.Map.header)
  clear_has_header();
  ::apollo::hdmap::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::hdmap::Header* Map::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.header)
  return header_;
}
inline void Map::set_allocated_header(::apollo::hdmap::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.Map.header)
}

// repeated .apollo.hdmap.Crosswalk crosswalk = 2;
inline int Map::crosswalk_size() const {
  return crosswalk_.size();
}
inline ::apollo::hdmap::Crosswalk* Map::mutable_crosswalk(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.crosswalk)
  return crosswalk_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Crosswalk >*
Map::mutable_crosswalk() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.crosswalk)
  return &crosswalk_;
}
inline const ::apollo::hdmap::Crosswalk& Map::crosswalk(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.crosswalk)
  return crosswalk_.Get(index);
}
inline ::apollo::hdmap::Crosswalk* Map::add_crosswalk() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.crosswalk)
  return crosswalk_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Crosswalk >&
Map::crosswalk() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.crosswalk)
  return crosswalk_;
}

// repeated .apollo.hdmap.Junction junction = 3;
inline int Map::junction_size() const {
  return junction_.size();
}
inline ::apollo::hdmap::Junction* Map::mutable_junction(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.junction)
  return junction_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Junction >*
Map::mutable_junction() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.junction)
  return &junction_;
}
inline const ::apollo::hdmap::Junction& Map::junction(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.junction)
  return junction_.Get(index);
}
inline ::apollo::hdmap::Junction* Map::add_junction() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.junction)
  return junction_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Junction >&
Map::junction() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.junction)
  return junction_;
}

// repeated .apollo.hdmap.Lane lane = 4;
inline int Map::lane_size() const {
  return lane_.size();
}
inline ::apollo::hdmap::Lane* Map::mutable_lane(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.lane)
  return lane_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Lane >*
Map::mutable_lane() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.lane)
  return &lane_;
}
inline const ::apollo::hdmap::Lane& Map::lane(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.lane)
  return lane_.Get(index);
}
inline ::apollo::hdmap::Lane* Map::add_lane() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.lane)
  return lane_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Lane >&
Map::lane() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.lane)
  return lane_;
}

// repeated .apollo.hdmap.StopSign stop_sign = 5;
inline int Map::stop_sign_size() const {
  return stop_sign_.size();
}
inline ::apollo::hdmap::StopSign* Map::mutable_stop_sign(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.stop_sign)
  return stop_sign_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::StopSign >*
Map::mutable_stop_sign() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.stop_sign)
  return &stop_sign_;
}
inline const ::apollo::hdmap::StopSign& Map::stop_sign(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.stop_sign)
  return stop_sign_.Get(index);
}
inline ::apollo::hdmap::StopSign* Map::add_stop_sign() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.stop_sign)
  return stop_sign_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::StopSign >&
Map::stop_sign() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.stop_sign)
  return stop_sign_;
}

// repeated .apollo.hdmap.Signal signal = 6;
inline int Map::signal_size() const {
  return signal_.size();
}
inline ::apollo::hdmap::Signal* Map::mutable_signal(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.signal)
  return signal_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Signal >*
Map::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.signal)
  return &signal_;
}
inline const ::apollo::hdmap::Signal& Map::signal(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.signal)
  return signal_.Get(index);
}
inline ::apollo::hdmap::Signal* Map::add_signal() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.signal)
  return signal_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Signal >&
Map::signal() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.signal)
  return signal_;
}

// repeated .apollo.hdmap.YieldSign yield = 7;
inline int Map::yield_size() const {
  return yield_.size();
}
inline ::apollo::hdmap::YieldSign* Map::mutable_yield(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.yield)
  return yield_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::YieldSign >*
Map::mutable_yield() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.yield)
  return &yield_;
}
inline const ::apollo::hdmap::YieldSign& Map::yield(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.yield)
  return yield_.Get(index);
}
inline ::apollo::hdmap::YieldSign* Map::add_yield() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.yield)
  return yield_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::YieldSign >&
Map::yield() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.yield)
  return yield_;
}

// repeated .apollo.hdmap.Overlap overlap = 8;
inline int Map::overlap_size() const {
  return overlap_.size();
}
inline ::apollo::hdmap::Overlap* Map::mutable_overlap(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.overlap)
  return overlap_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Overlap >*
Map::mutable_overlap() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.overlap)
  return &overlap_;
}
inline const ::apollo::hdmap::Overlap& Map::overlap(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.overlap)
  return overlap_.Get(index);
}
inline ::apollo::hdmap::Overlap* Map::add_overlap() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.overlap)
  return overlap_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Overlap >&
Map::overlap() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.overlap)
  return overlap_;
}

// repeated .apollo.hdmap.ClearArea clear_area = 9;
inline int Map::clear_area_size() const {
  return clear_area_.size();
}
inline ::apollo::hdmap::ClearArea* Map::mutable_clear_area(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.clear_area)
  return clear_area_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::ClearArea >*
Map::mutable_clear_area() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.clear_area)
  return &clear_area_;
}
inline const ::apollo::hdmap::ClearArea& Map::clear_area(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.clear_area)
  return clear_area_.Get(index);
}
inline ::apollo::hdmap::ClearArea* Map::add_clear_area() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.clear_area)
  return clear_area_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::ClearArea >&
Map::clear_area() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.clear_area)
  return clear_area_;
}

// repeated .apollo.hdmap.SpeedBump speed_bump = 10;
inline int Map::speed_bump_size() const {
  return speed_bump_.size();
}
inline ::apollo::hdmap::SpeedBump* Map::mutable_speed_bump(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.speed_bump)
  return speed_bump_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::SpeedBump >*
Map::mutable_speed_bump() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.speed_bump)
  return &speed_bump_;
}
inline const ::apollo::hdmap::SpeedBump& Map::speed_bump(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.speed_bump)
  return speed_bump_.Get(index);
}
inline ::apollo::hdmap::SpeedBump* Map::add_speed_bump() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.speed_bump)
  return speed_bump_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::SpeedBump >&
Map::speed_bump() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.speed_bump)
  return speed_bump_;
}

// repeated .apollo.hdmap.Road road = 11;
inline int Map::road_size() const {
  return road_.size();
}
inline ::apollo::hdmap::Road* Map::mutable_road(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.road)
  return road_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Road >*
Map::mutable_road() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.road)
  return &road_;
}
inline const ::apollo::hdmap::Road& Map::road(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.road)
  return road_.Get(index);
}
inline ::apollo::hdmap::Road* Map::add_road() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.road)
  return road_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::Road >&
Map::road() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.road)
  return road_;
}

// repeated .apollo.hdmap.ParkingSpace parking_space = 12;
inline int Map::parking_space_size() const {
  return parking_space_.size();
}
inline ::apollo::hdmap::ParkingSpace* Map::mutable_parking_space(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.parking_space)
  return parking_space_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::ParkingSpace >*
Map::mutable_parking_space() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.parking_space)
  return &parking_space_;
}
inline const ::apollo::hdmap::ParkingSpace& Map::parking_space(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.parking_space)
  return parking_space_.Get(index);
}
inline ::apollo::hdmap::ParkingSpace* Map::add_parking_space() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.parking_space)
  return parking_space_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::ParkingSpace >&
Map::parking_space() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.parking_space)
  return parking_space_;
}

// repeated .apollo.hdmap.PNCJunction pnc_junction = 13;
inline int Map::pnc_junction_size() const {
  return pnc_junction_.size();
}
inline ::apollo::hdmap::PNCJunction* Map::mutable_pnc_junction(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.pnc_junction)
  return pnc_junction_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::PNCJunction >*
Map::mutable_pnc_junction() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.pnc_junction)
  return &pnc_junction_;
}
inline const ::apollo::hdmap::PNCJunction& Map::pnc_junction(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.pnc_junction)
  return pnc_junction_.Get(index);
}
inline ::apollo::hdmap::PNCJunction* Map::add_pnc_junction() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.pnc_junction)
  return pnc_junction_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::PNCJunction >&
Map::pnc_junction() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.pnc_junction)
  return pnc_junction_;
}

// repeated .apollo.hdmap.RSU rsu = 14;
inline int Map::rsu_size() const {
  return rsu_.size();
}
inline ::apollo::hdmap::RSU* Map::mutable_rsu(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.Map.rsu)
  return rsu_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::RSU >*
Map::mutable_rsu() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.Map.rsu)
  return &rsu_;
}
inline const ::apollo::hdmap::RSU& Map::rsu(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.Map.rsu)
  return rsu_.Get(index);
}
inline ::apollo::hdmap::RSU* Map::add_rsu() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.Map.rsu)
  return rsu_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::hdmap::RSU >&
Map::rsu() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.Map.rsu)
  return rsu_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fmap_2fproto_2fmap_2eproto
