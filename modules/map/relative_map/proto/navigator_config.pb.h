// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/relative_map/proto/navigator_config.proto

#ifndef PROTOBUF_INCLUDED_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto
#define PROTOBUF_INCLUDED_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto 

namespace protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto
namespace apollo {
namespace relative_map {
class NavigatorConfig;
class NavigatorConfigDefaultTypeInternal;
extern NavigatorConfigDefaultTypeInternal _NavigatorConfig_default_instance_;
class SampleParam;
class SampleParamDefaultTypeInternal;
extern SampleParamDefaultTypeInternal _SampleParam_default_instance_;
}  // namespace relative_map
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::relative_map::NavigatorConfig* Arena::CreateMaybeMessage<::apollo::relative_map::NavigatorConfig>(Arena*);
template<> ::apollo::relative_map::SampleParam* Arena::CreateMaybeMessage<::apollo::relative_map::SampleParam>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace relative_map {

// ===================================================================

class SampleParam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.relative_map.SampleParam) */ {
 public:
  SampleParam();
  virtual ~SampleParam();

  SampleParam(const SampleParam& from);

  inline SampleParam& operator=(const SampleParam& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SampleParam(SampleParam&& from) noexcept
    : SampleParam() {
    *this = ::std::move(from);
  }

  inline SampleParam& operator=(SampleParam&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleParam& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SampleParam* internal_default_instance() {
    return reinterpret_cast<const SampleParam*>(
               &_SampleParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SampleParam* other);
  friend void swap(SampleParam& a, SampleParam& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SampleParam* New() const final {
    return CreateMaybeMessage<SampleParam>(NULL);
  }

  SampleParam* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SampleParam>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SampleParam& from);
  void MergeFrom(const SampleParam& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SampleParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double straight_sample_interval = 1 [default = 3];
  bool has_straight_sample_interval() const;
  void clear_straight_sample_interval();
  static const int kStraightSampleIntervalFieldNumber = 1;
  double straight_sample_interval() const;
  void set_straight_sample_interval(double value);

  // optional double small_kappa_sample_interval = 2 [default = 1];
  bool has_small_kappa_sample_interval() const;
  void clear_small_kappa_sample_interval();
  static const int kSmallKappaSampleIntervalFieldNumber = 2;
  double small_kappa_sample_interval() const;
  void set_small_kappa_sample_interval(double value);

  // optional double middle_kappa_sample_interval = 3 [default = 0.4];
  bool has_middle_kappa_sample_interval() const;
  void clear_middle_kappa_sample_interval();
  static const int kMiddleKappaSampleIntervalFieldNumber = 3;
  double middle_kappa_sample_interval() const;
  void set_middle_kappa_sample_interval(double value);

  // optional double large_kappa_sample_interval = 4 [default = 0.1];
  bool has_large_kappa_sample_interval() const;
  void clear_large_kappa_sample_interval();
  static const int kLargeKappaSampleIntervalFieldNumber = 4;
  double large_kappa_sample_interval() const;
  void set_large_kappa_sample_interval(double value);

  // optional double small_kappa = 5 [default = 0.002];
  bool has_small_kappa() const;
  void clear_small_kappa();
  static const int kSmallKappaFieldNumber = 5;
  double small_kappa() const;
  void set_small_kappa(double value);

  // optional double middle_kappa = 6 [default = 0.008];
  bool has_middle_kappa() const;
  void clear_middle_kappa();
  static const int kMiddleKappaFieldNumber = 6;
  double middle_kappa() const;
  void set_middle_kappa(double value);

  // optional double large_kappa = 7 [default = 0.02];
  bool has_large_kappa() const;
  void clear_large_kappa();
  static const int kLargeKappaFieldNumber = 7;
  double large_kappa() const;
  void set_large_kappa(double value);

  // @@protoc_insertion_point(class_scope:apollo.relative_map.SampleParam)
 private:
  void set_has_straight_sample_interval();
  void clear_has_straight_sample_interval();
  void set_has_small_kappa_sample_interval();
  void clear_has_small_kappa_sample_interval();
  void set_has_middle_kappa_sample_interval();
  void clear_has_middle_kappa_sample_interval();
  void set_has_large_kappa_sample_interval();
  void clear_has_large_kappa_sample_interval();
  void set_has_small_kappa();
  void clear_has_small_kappa();
  void set_has_middle_kappa();
  void clear_has_middle_kappa();
  void set_has_large_kappa();
  void clear_has_large_kappa();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double straight_sample_interval_;
  double small_kappa_sample_interval_;
  double middle_kappa_sample_interval_;
  double large_kappa_sample_interval_;
  double small_kappa_;
  double middle_kappa_;
  double large_kappa_;
  friend struct ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NavigatorConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.relative_map.NavigatorConfig) */ {
 public:
  NavigatorConfig();
  virtual ~NavigatorConfig();

  NavigatorConfig(const NavigatorConfig& from);

  inline NavigatorConfig& operator=(const NavigatorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NavigatorConfig(NavigatorConfig&& from) noexcept
    : NavigatorConfig() {
    *this = ::std::move(from);
  }

  inline NavigatorConfig& operator=(NavigatorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NavigatorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigatorConfig* internal_default_instance() {
    return reinterpret_cast<const NavigatorConfig*>(
               &_NavigatorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NavigatorConfig* other);
  friend void swap(NavigatorConfig& a, NavigatorConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NavigatorConfig* New() const final {
    return CreateMaybeMessage<NavigatorConfig>(NULL);
  }

  NavigatorConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NavigatorConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NavigatorConfig& from);
  void MergeFrom(const NavigatorConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigatorConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.relative_map.SampleParam sample_param = 2;
  bool has_sample_param() const;
  void clear_sample_param();
  static const int kSampleParamFieldNumber = 2;
  private:
  const ::apollo::relative_map::SampleParam& _internal_sample_param() const;
  public:
  const ::apollo::relative_map::SampleParam& sample_param() const;
  ::apollo::relative_map::SampleParam* release_sample_param();
  ::apollo::relative_map::SampleParam* mutable_sample_param();
  void set_allocated_sample_param(::apollo::relative_map::SampleParam* sample_param);

  // optional bool enable_navigator_downsample = 1 [default = true];
  bool has_enable_navigator_downsample() const;
  void clear_enable_navigator_downsample();
  static const int kEnableNavigatorDownsampleFieldNumber = 1;
  bool enable_navigator_downsample() const;
  void set_enable_navigator_downsample(bool value);

  // @@protoc_insertion_point(class_scope:apollo.relative_map.NavigatorConfig)
 private:
  void set_has_enable_navigator_downsample();
  void clear_has_enable_navigator_downsample();
  void set_has_sample_param();
  void clear_has_sample_param();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::relative_map::SampleParam* sample_param_;
  bool enable_navigator_downsample_;
  friend struct ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SampleParam

// optional double straight_sample_interval = 1 [default = 3];
inline bool SampleParam::has_straight_sample_interval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SampleParam::set_has_straight_sample_interval() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SampleParam::clear_has_straight_sample_interval() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SampleParam::clear_straight_sample_interval() {
  straight_sample_interval_ = 3;
  clear_has_straight_sample_interval();
}
inline double SampleParam::straight_sample_interval() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.SampleParam.straight_sample_interval)
  return straight_sample_interval_;
}
inline void SampleParam::set_straight_sample_interval(double value) {
  set_has_straight_sample_interval();
  straight_sample_interval_ = value;
  // @@protoc_insertion_point(field_set:apollo.relative_map.SampleParam.straight_sample_interval)
}

// optional double small_kappa_sample_interval = 2 [default = 1];
inline bool SampleParam::has_small_kappa_sample_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SampleParam::set_has_small_kappa_sample_interval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SampleParam::clear_has_small_kappa_sample_interval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SampleParam::clear_small_kappa_sample_interval() {
  small_kappa_sample_interval_ = 1;
  clear_has_small_kappa_sample_interval();
}
inline double SampleParam::small_kappa_sample_interval() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.SampleParam.small_kappa_sample_interval)
  return small_kappa_sample_interval_;
}
inline void SampleParam::set_small_kappa_sample_interval(double value) {
  set_has_small_kappa_sample_interval();
  small_kappa_sample_interval_ = value;
  // @@protoc_insertion_point(field_set:apollo.relative_map.SampleParam.small_kappa_sample_interval)
}

// optional double middle_kappa_sample_interval = 3 [default = 0.4];
inline bool SampleParam::has_middle_kappa_sample_interval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SampleParam::set_has_middle_kappa_sample_interval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SampleParam::clear_has_middle_kappa_sample_interval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SampleParam::clear_middle_kappa_sample_interval() {
  middle_kappa_sample_interval_ = 0.4;
  clear_has_middle_kappa_sample_interval();
}
inline double SampleParam::middle_kappa_sample_interval() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.SampleParam.middle_kappa_sample_interval)
  return middle_kappa_sample_interval_;
}
inline void SampleParam::set_middle_kappa_sample_interval(double value) {
  set_has_middle_kappa_sample_interval();
  middle_kappa_sample_interval_ = value;
  // @@protoc_insertion_point(field_set:apollo.relative_map.SampleParam.middle_kappa_sample_interval)
}

// optional double large_kappa_sample_interval = 4 [default = 0.1];
inline bool SampleParam::has_large_kappa_sample_interval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SampleParam::set_has_large_kappa_sample_interval() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SampleParam::clear_has_large_kappa_sample_interval() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SampleParam::clear_large_kappa_sample_interval() {
  large_kappa_sample_interval_ = 0.1;
  clear_has_large_kappa_sample_interval();
}
inline double SampleParam::large_kappa_sample_interval() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.SampleParam.large_kappa_sample_interval)
  return large_kappa_sample_interval_;
}
inline void SampleParam::set_large_kappa_sample_interval(double value) {
  set_has_large_kappa_sample_interval();
  large_kappa_sample_interval_ = value;
  // @@protoc_insertion_point(field_set:apollo.relative_map.SampleParam.large_kappa_sample_interval)
}

// optional double small_kappa = 5 [default = 0.002];
inline bool SampleParam::has_small_kappa() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SampleParam::set_has_small_kappa() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SampleParam::clear_has_small_kappa() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SampleParam::clear_small_kappa() {
  small_kappa_ = 0.002;
  clear_has_small_kappa();
}
inline double SampleParam::small_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.SampleParam.small_kappa)
  return small_kappa_;
}
inline void SampleParam::set_small_kappa(double value) {
  set_has_small_kappa();
  small_kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.relative_map.SampleParam.small_kappa)
}

// optional double middle_kappa = 6 [default = 0.008];
inline bool SampleParam::has_middle_kappa() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SampleParam::set_has_middle_kappa() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SampleParam::clear_has_middle_kappa() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SampleParam::clear_middle_kappa() {
  middle_kappa_ = 0.008;
  clear_has_middle_kappa();
}
inline double SampleParam::middle_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.SampleParam.middle_kappa)
  return middle_kappa_;
}
inline void SampleParam::set_middle_kappa(double value) {
  set_has_middle_kappa();
  middle_kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.relative_map.SampleParam.middle_kappa)
}

// optional double large_kappa = 7 [default = 0.02];
inline bool SampleParam::has_large_kappa() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SampleParam::set_has_large_kappa() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SampleParam::clear_has_large_kappa() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SampleParam::clear_large_kappa() {
  large_kappa_ = 0.02;
  clear_has_large_kappa();
}
inline double SampleParam::large_kappa() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.SampleParam.large_kappa)
  return large_kappa_;
}
inline void SampleParam::set_large_kappa(double value) {
  set_has_large_kappa();
  large_kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.relative_map.SampleParam.large_kappa)
}

// -------------------------------------------------------------------

// NavigatorConfig

// optional bool enable_navigator_downsample = 1 [default = true];
inline bool NavigatorConfig::has_enable_navigator_downsample() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NavigatorConfig::set_has_enable_navigator_downsample() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NavigatorConfig::clear_has_enable_navigator_downsample() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NavigatorConfig::clear_enable_navigator_downsample() {
  enable_navigator_downsample_ = true;
  clear_has_enable_navigator_downsample();
}
inline bool NavigatorConfig::enable_navigator_downsample() const {
  // @@protoc_insertion_point(field_get:apollo.relative_map.NavigatorConfig.enable_navigator_downsample)
  return enable_navigator_downsample_;
}
inline void NavigatorConfig::set_enable_navigator_downsample(bool value) {
  set_has_enable_navigator_downsample();
  enable_navigator_downsample_ = value;
  // @@protoc_insertion_point(field_set:apollo.relative_map.NavigatorConfig.enable_navigator_downsample)
}

// optional .apollo.relative_map.SampleParam sample_param = 2;
inline bool NavigatorConfig::has_sample_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NavigatorConfig::set_has_sample_param() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NavigatorConfig::clear_has_sample_param() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NavigatorConfig::clear_sample_param() {
  if (sample_param_ != NULL) sample_param_->Clear();
  clear_has_sample_param();
}
inline const ::apollo::relative_map::SampleParam& NavigatorConfig::_internal_sample_param() const {
  return *sample_param_;
}
inline const ::apollo::relative_map::SampleParam& NavigatorConfig::sample_param() const {
  const ::apollo::relative_map::SampleParam* p = sample_param_;
  // @@protoc_insertion_point(field_get:apollo.relative_map.NavigatorConfig.sample_param)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::relative_map::SampleParam*>(
      &::apollo::relative_map::_SampleParam_default_instance_);
}
inline ::apollo::relative_map::SampleParam* NavigatorConfig::release_sample_param() {
  // @@protoc_insertion_point(field_release:apollo.relative_map.NavigatorConfig.sample_param)
  clear_has_sample_param();
  ::apollo::relative_map::SampleParam* temp = sample_param_;
  sample_param_ = NULL;
  return temp;
}
inline ::apollo::relative_map::SampleParam* NavigatorConfig::mutable_sample_param() {
  set_has_sample_param();
  if (sample_param_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::relative_map::SampleParam>(GetArenaNoVirtual());
    sample_param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.relative_map.NavigatorConfig.sample_param)
  return sample_param_;
}
inline void NavigatorConfig::set_allocated_sample_param(::apollo::relative_map::SampleParam* sample_param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sample_param_;
  }
  if (sample_param) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sample_param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sample_param, submessage_arena);
    }
    set_has_sample_param();
  } else {
    clear_has_sample_param();
  }
  sample_param_ = sample_param;
  // @@protoc_insertion_point(field_set_allocated:apollo.relative_map.NavigatorConfig.sample_param)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace relative_map
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto
