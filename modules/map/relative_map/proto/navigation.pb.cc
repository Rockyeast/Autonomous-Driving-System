// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/relative_map/proto/navigation.proto

#include "modules/map/relative_map/proto/navigation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fheader_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto
namespace protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Path;
}  // namespace protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto
namespace protobuf_modules_2flocalization_2fproto_2flocalization_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2flocalization_2fproto_2flocalization_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_LocalizationEstimate;
}  // namespace protobuf_modules_2flocalization_2fproto_2flocalization_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_2eproto ::google::protobuf::internal::SCCInfo<14> scc_info_Map;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_2eproto
namespace protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapMsg_NavigationPathEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NavigationPath;
}  // namespace protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto
namespace protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LaneMarkers;
}  // namespace protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto
namespace apollo {
namespace relative_map {
class NavigationPathDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NavigationPath>
      _instance;
} _NavigationPath_default_instance_;
class NavigationInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NavigationInfo>
      _instance;
} _NavigationInfo_default_instance_;
class MapMsg_NavigationPathEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMsg_NavigationPathEntry_DoNotUse>
      _instance;
} _MapMsg_NavigationPathEntry_DoNotUse_default_instance_;
class MapMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapMsg>
      _instance;
} _MapMsg_default_instance_;
}  // namespace relative_map
}  // namespace apollo
namespace protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto {
static void InitDefaultsNavigationPath() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::relative_map::_NavigationPath_default_instance_;
    new (ptr) ::apollo::relative_map::NavigationPath();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::relative_map::NavigationPath::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NavigationPath =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNavigationPath}, {
      &protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::scc_info_Path.base,}};

static void InitDefaultsNavigationInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::relative_map::_NavigationInfo_default_instance_;
    new (ptr) ::apollo::relative_map::NavigationInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::relative_map::NavigationInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_NavigationInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsNavigationInfo}, {
      &protobuf_modules_2fcommon_2fproto_2fheader_2eproto::scc_info_Header.base,
      &protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::scc_info_NavigationPath.base,}};

static void InitDefaultsMapMsg_NavigationPathEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::relative_map::_MapMsg_NavigationPathEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse();
  }
  ::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapMsg_NavigationPathEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapMsg_NavigationPathEntry_DoNotUse}, {
      &protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::scc_info_NavigationPath.base,}};

static void InitDefaultsMapMsg() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::relative_map::_MapMsg_default_instance_;
    new (ptr) ::apollo::relative_map::MapMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::relative_map::MapMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_MapMsg =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsMapMsg}, {
      &protobuf_modules_2fcommon_2fproto_2fheader_2eproto::scc_info_Header.base,
      &protobuf_modules_2fmap_2fproto_2fmap_2eproto::scc_info_Map.base,
      &protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::scc_info_MapMsg_NavigationPathEntry_DoNotUse.base,
      &protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::scc_info_LaneMarkers.base,
      &protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::scc_info_LocalizationEstimate.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NavigationPath.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NavigationInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapMsg_NavigationPathEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapMsg.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationPath, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationPath, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationPath, path_priority_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationInfo, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationInfo, navigation_path_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::MapMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::MapMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::MapMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::MapMsg, hdmap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::MapMsg, navigation_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::MapMsg, lane_marker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::MapMsg, localization_),
  0,
  1,
  ~0u,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::relative_map::NavigationPath)},
  { 9, 16, sizeof(::apollo::relative_map::NavigationInfo)},
  { 18, 25, sizeof(::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse)},
  { 27, 37, sizeof(::apollo::relative_map::MapMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::relative_map::_NavigationPath_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::relative_map::_NavigationInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::relative_map::_MapMsg_NavigationPathEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::relative_map::_MapMsg_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/map/relative_map/proto/navigation.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n/modules/map/relative_map/proto/navigat"
      "ion.proto\022\023apollo.relative_map\032!modules/"
      "common/proto/header.proto\032$modules/commo"
      "n/proto/pnc_point.proto\032-modules/localiz"
      "ation/proto/localization.proto\032\033modules/"
      "map/proto/map.proto\0322modules/perception/"
      "proto/perception_obstacle.proto\"J\n\016Navig"
      "ationPath\022!\n\004path\030\001 \001(\0132\023.apollo.common."
      "Path\022\025\n\rpath_priority\030\002 \001(\r\"u\n\016Navigatio"
      "nInfo\022%\n\006header\030\001 \001(\0132\025.apollo.common.He"
      "ader\022<\n\017navigation_path\030\002 \003(\0132#.apollo.r"
      "elative_map.NavigationPath\"\355\002\n\006MapMsg\022%\n"
      "\006header\030\001 \001(\0132\025.apollo.common.Header\022 \n\005"
      "hdmap\030\002 \001(\0132\021.apollo.hdmap.Map\022H\n\017naviga"
      "tion_path\030\003 \003(\0132/.apollo.relative_map.Ma"
      "pMsg.NavigationPathEntry\0223\n\013lane_marker\030"
      "\004 \001(\0132\036.apollo.perception.LaneMarkers\022\?\n"
      "\014localization\030\005 \001(\0132).apollo.localizatio"
      "n.LocalizationEstimate\032Z\n\023NavigationPath"
      "Entry\022\013\n\003key\030\001 \001(\t\0222\n\005value\030\002 \001(\0132#.apol"
      "lo.relative_map.NavigationPath:\0028\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 834);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/map/relative_map/proto/navigation.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::AddDescriptors();
  ::protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_2eproto::AddDescriptors();
  ::protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto
namespace apollo {
namespace relative_map {

// ===================================================================

void NavigationPath::InitAsDefaultInstance() {
  ::apollo::relative_map::_NavigationPath_default_instance_._instance.get_mutable()->path_ = const_cast< ::apollo::common::Path*>(
      ::apollo::common::Path::internal_default_instance());
}
void NavigationPath::clear_path() {
  if (path_ != NULL) path_->Clear();
  clear_has_path();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigationPath::kPathFieldNumber;
const int NavigationPath::kPathPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigationPath::NavigationPath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::scc_info_NavigationPath.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.relative_map.NavigationPath)
}
NavigationPath::NavigationPath(const NavigationPath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_path()) {
    path_ = new ::apollo::common::Path(*from.path_);
  } else {
    path_ = NULL;
  }
  path_priority_ = from.path_priority_;
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.NavigationPath)
}

void NavigationPath::SharedCtor() {
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&path_priority_) -
      reinterpret_cast<char*>(&path_)) + sizeof(path_priority_));
}

NavigationPath::~NavigationPath() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.NavigationPath)
  SharedDtor();
}

void NavigationPath::SharedDtor() {
  if (this != internal_default_instance()) delete path_;
}

void NavigationPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NavigationPath::descriptor() {
  ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavigationPath& NavigationPath::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::scc_info_NavigationPath.base);
  return *internal_default_instance();
}


void NavigationPath::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.NavigationPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(path_ != NULL);
    path_->Clear();
  }
  path_priority_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NavigationPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.relative_map.NavigationPath)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Path path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 path_priority = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_path_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &path_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.relative_map.NavigationPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.relative_map.NavigationPath)
  return false;
#undef DO_
}

void NavigationPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.relative_map.NavigationPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Path path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_path(), output);
  }

  // optional uint32 path_priority = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->path_priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.relative_map.NavigationPath)
}

::google::protobuf::uint8* NavigationPath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.NavigationPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Path path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_path(), deterministic, target);
  }

  // optional uint32 path_priority = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->path_priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.NavigationPath)
  return target;
}

size_t NavigationPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.NavigationPath)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.common.Path path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *path_);
    }

    // optional uint32 path_priority = 2;
    if (has_path_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->path_priority());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationPath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.relative_map.NavigationPath)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationPath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigationPath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.relative_map.NavigationPath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.relative_map.NavigationPath)
    MergeFrom(*source);
  }
}

void NavigationPath::MergeFrom(const NavigationPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.NavigationPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_path()->::apollo::common::Path::MergeFrom(from.path());
    }
    if (cached_has_bits & 0x00000002u) {
      path_priority_ = from.path_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NavigationPath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.relative_map.NavigationPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationPath::CopyFrom(const NavigationPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.NavigationPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationPath::IsInitialized() const {
  return true;
}

void NavigationPath::Swap(NavigationPath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavigationPath::InternalSwap(NavigationPath* other) {
  using std::swap;
  swap(path_, other->path_);
  swap(path_priority_, other->path_priority_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NavigationPath::GetMetadata() const {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NavigationInfo::InitAsDefaultInstance() {
  ::apollo::relative_map::_NavigationInfo_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
void NavigationInfo::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigationInfo::kHeaderFieldNumber;
const int NavigationInfo::kNavigationPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigationInfo::NavigationInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::scc_info_NavigationInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.relative_map.NavigationInfo)
}
NavigationInfo::NavigationInfo(const NavigationInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      navigation_path_(from.navigation_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.NavigationInfo)
}

void NavigationInfo::SharedCtor() {
  header_ = NULL;
}

NavigationInfo::~NavigationInfo() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.NavigationInfo)
  SharedDtor();
}

void NavigationInfo::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void NavigationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NavigationInfo::descriptor() {
  ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavigationInfo& NavigationInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::scc_info_NavigationInfo.base);
  return *internal_default_instance();
}


void NavigationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.NavigationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  navigation_path_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NavigationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.relative_map.NavigationInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.relative_map.NavigationPath navigation_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_navigation_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.relative_map.NavigationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.relative_map.NavigationInfo)
  return false;
#undef DO_
}

void NavigationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.relative_map.NavigationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // repeated .apollo.relative_map.NavigationPath navigation_path = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->navigation_path_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->navigation_path(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.relative_map.NavigationInfo)
}

::google::protobuf::uint8* NavigationInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.NavigationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // repeated .apollo.relative_map.NavigationPath navigation_path = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->navigation_path_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->navigation_path(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.NavigationInfo)
  return target;
}

size_t NavigationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.NavigationInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.relative_map.NavigationPath navigation_path = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->navigation_path_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->navigation_path(static_cast<int>(i)));
    }
  }

  // optional .apollo.common.Header header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.relative_map.NavigationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigationInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.relative_map.NavigationInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.relative_map.NavigationInfo)
    MergeFrom(*source);
  }
}

void NavigationInfo::MergeFrom(const NavigationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.NavigationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  navigation_path_.MergeFrom(from.navigation_path_);
  if (from.has_header()) {
    mutable_header()->::apollo::common::Header::MergeFrom(from.header());
  }
}

void NavigationInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.relative_map.NavigationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationInfo::CopyFrom(const NavigationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.NavigationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationInfo::IsInitialized() const {
  return true;
}

void NavigationInfo::Swap(NavigationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavigationInfo::InternalSwap(NavigationInfo* other) {
  using std::swap;
  CastToBase(&navigation_path_)->InternalSwap(CastToBase(&other->navigation_path_));
  swap(header_, other->header_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NavigationInfo::GetMetadata() const {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

MapMsg_NavigationPathEntry_DoNotUse::MapMsg_NavigationPathEntry_DoNotUse() {}
MapMsg_NavigationPathEntry_DoNotUse::MapMsg_NavigationPathEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MapMsg_NavigationPathEntry_DoNotUse::MergeFrom(const MapMsg_NavigationPathEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MapMsg_NavigationPathEntry_DoNotUse::GetMetadata() const {
  ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::file_level_metadata[2];
}
void MapMsg_NavigationPathEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void MapMsg::InitAsDefaultInstance() {
  ::apollo::relative_map::_MapMsg_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::relative_map::_MapMsg_default_instance_._instance.get_mutable()->hdmap_ = const_cast< ::apollo::hdmap::Map*>(
      ::apollo::hdmap::Map::internal_default_instance());
  ::apollo::relative_map::_MapMsg_default_instance_._instance.get_mutable()->lane_marker_ = const_cast< ::apollo::perception::LaneMarkers*>(
      ::apollo::perception::LaneMarkers::internal_default_instance());
  ::apollo::relative_map::_MapMsg_default_instance_._instance.get_mutable()->localization_ = const_cast< ::apollo::localization::LocalizationEstimate*>(
      ::apollo::localization::LocalizationEstimate::internal_default_instance());
}
void MapMsg::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
void MapMsg::clear_hdmap() {
  if (hdmap_ != NULL) hdmap_->Clear();
  clear_has_hdmap();
}
void MapMsg::clear_lane_marker() {
  if (lane_marker_ != NULL) lane_marker_->Clear();
  clear_has_lane_marker();
}
void MapMsg::clear_localization() {
  if (localization_ != NULL) localization_->Clear();
  clear_has_localization();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapMsg::kHeaderFieldNumber;
const int MapMsg::kHdmapFieldNumber;
const int MapMsg::kNavigationPathFieldNumber;
const int MapMsg::kLaneMarkerFieldNumber;
const int MapMsg::kLocalizationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapMsg::MapMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::scc_info_MapMsg.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.relative_map.MapMsg)
}
MapMsg::MapMsg(const MapMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  navigation_path_.MergeFrom(from.navigation_path_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_hdmap()) {
    hdmap_ = new ::apollo::hdmap::Map(*from.hdmap_);
  } else {
    hdmap_ = NULL;
  }
  if (from.has_lane_marker()) {
    lane_marker_ = new ::apollo::perception::LaneMarkers(*from.lane_marker_);
  } else {
    lane_marker_ = NULL;
  }
  if (from.has_localization()) {
    localization_ = new ::apollo::localization::LocalizationEstimate(*from.localization_);
  } else {
    localization_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.MapMsg)
}

void MapMsg::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&localization_) -
      reinterpret_cast<char*>(&header_)) + sizeof(localization_));
}

MapMsg::~MapMsg() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.MapMsg)
  SharedDtor();
}

void MapMsg::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete hdmap_;
  if (this != internal_default_instance()) delete lane_marker_;
  if (this != internal_default_instance()) delete localization_;
}

void MapMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapMsg::descriptor() {
  ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapMsg& MapMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::scc_info_MapMsg.base);
  return *internal_default_instance();
}


void MapMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.MapMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  navigation_path_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(hdmap_ != NULL);
      hdmap_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lane_marker_ != NULL);
      lane_marker_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(localization_ != NULL);
      localization_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.relative_map.MapMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.Map hdmap = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdmap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .apollo.relative_map.NavigationPath> navigation_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          MapMsg_NavigationPathEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MapMsg_NavigationPathEntry_DoNotUse,
              ::std::string, ::apollo::relative_map::NavigationPath,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath > > parser(&navigation_path_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.relative_map.MapMsg.NavigationPathEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.LaneMarkers lane_marker = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.localization.LocalizationEstimate localization = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_localization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.relative_map.MapMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.relative_map.MapMsg)
  return false;
#undef DO_
}

void MapMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.relative_map.MapMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional .apollo.hdmap.Map hdmap = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_hdmap(), output);
  }

  // map<string, .apollo.relative_map.NavigationPath> navigation_path = 3;
  if (!this->navigation_path().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.relative_map.MapMsg.NavigationPathEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->navigation_path().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->navigation_path().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >::const_iterator
          it = this->navigation_path().begin();
          it != this->navigation_path().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MapMsg_NavigationPathEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(navigation_path_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<MapMsg_NavigationPathEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >::const_iterator
          it = this->navigation_path().begin();
          it != this->navigation_path().end(); ++it) {
        entry.reset(navigation_path_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .apollo.perception.LaneMarkers lane_marker = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_lane_marker(), output);
  }

  // optional .apollo.localization.LocalizationEstimate localization = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_localization(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.relative_map.MapMsg)
}

::google::protobuf::uint8* MapMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.MapMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional .apollo.hdmap.Map hdmap = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_hdmap(), deterministic, target);
  }

  // map<string, .apollo.relative_map.NavigationPath> navigation_path = 3;
  if (!this->navigation_path().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.relative_map.MapMsg.NavigationPathEntry.key");
      }
    };

    if (deterministic &&
        this->navigation_path().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->navigation_path().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >::const_iterator
          it = this->navigation_path().begin();
          it != this->navigation_path().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MapMsg_NavigationPathEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(navigation_path_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<MapMsg_NavigationPathEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >::const_iterator
          it = this->navigation_path().begin();
          it != this->navigation_path().end(); ++it) {
        entry.reset(navigation_path_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .apollo.perception.LaneMarkers lane_marker = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_lane_marker(), deterministic, target);
  }

  // optional .apollo.localization.LocalizationEstimate localization = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_localization(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.MapMsg)
  return target;
}

size_t MapMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.MapMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // map<string, .apollo.relative_map.NavigationPath> navigation_path = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->navigation_path_size());
  {
    ::std::unique_ptr<MapMsg_NavigationPathEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::apollo::relative_map::NavigationPath >::const_iterator
        it = this->navigation_path().begin();
        it != this->navigation_path().end(); ++it) {
      entry.reset(navigation_path_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.hdmap.Map hdmap = 2;
    if (has_hdmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *hdmap_);
    }

    // optional .apollo.perception.LaneMarkers lane_marker = 4;
    if (has_lane_marker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lane_marker_);
    }

    // optional .apollo.localization.LocalizationEstimate localization = 5;
    if (has_localization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *localization_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.relative_map.MapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const MapMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.relative_map.MapMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.relative_map.MapMsg)
    MergeFrom(*source);
  }
}

void MapMsg::MergeFrom(const MapMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.MapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  navigation_path_.MergeFrom(from.navigation_path_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_hdmap()->::apollo::hdmap::Map::MergeFrom(from.hdmap());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_lane_marker()->::apollo::perception::LaneMarkers::MergeFrom(from.lane_marker());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_localization()->::apollo::localization::LocalizationEstimate::MergeFrom(from.localization());
    }
  }
}

void MapMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.relative_map.MapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapMsg::CopyFrom(const MapMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.MapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapMsg::IsInitialized() const {
  return true;
}

void MapMsg::Swap(MapMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapMsg::InternalSwap(MapMsg* other) {
  using std::swap;
  navigation_path_.Swap(&other->navigation_path_);
  swap(header_, other->header_);
  swap(hdmap_, other->hdmap_);
  swap(lane_marker_, other->lane_marker_);
  swap(localization_, other->localization_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapMsg::GetMetadata() const {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace relative_map
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::relative_map::NavigationPath* Arena::CreateMaybeMessage< ::apollo::relative_map::NavigationPath >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::relative_map::NavigationPath >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::relative_map::NavigationInfo* Arena::CreateMaybeMessage< ::apollo::relative_map::NavigationInfo >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::relative_map::NavigationInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::relative_map::MapMsg_NavigationPathEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::relative_map::MapMsg* Arena::CreateMaybeMessage< ::apollo::relative_map::MapMsg >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::relative_map::MapMsg >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
