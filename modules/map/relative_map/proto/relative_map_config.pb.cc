// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/relative_map/proto/relative_map_config.proto

#include "modules/map/relative_map/proto/relative_map_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MapGenerationParam;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NavigationLaneConfig;
}  // namespace protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto
namespace apollo {
namespace relative_map {
class MapGenerationParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapGenerationParam>
      _instance;
} _MapGenerationParam_default_instance_;
class NavigationLaneConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NavigationLaneConfig>
      _instance;
} _NavigationLaneConfig_default_instance_;
class RelativeMapConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RelativeMapConfig>
      _instance;
} _RelativeMapConfig_default_instance_;
}  // namespace relative_map
}  // namespace apollo
namespace protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto {
static void InitDefaultsMapGenerationParam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::relative_map::_MapGenerationParam_default_instance_;
    new (ptr) ::apollo::relative_map::MapGenerationParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::relative_map::MapGenerationParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MapGenerationParam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMapGenerationParam}, {}};

static void InitDefaultsNavigationLaneConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::relative_map::_NavigationLaneConfig_default_instance_;
    new (ptr) ::apollo::relative_map::NavigationLaneConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::relative_map::NavigationLaneConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NavigationLaneConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNavigationLaneConfig}, {}};

static void InitDefaultsRelativeMapConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::relative_map::_RelativeMapConfig_default_instance_;
    new (ptr) ::apollo::relative_map::RelativeMapConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::relative_map::RelativeMapConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RelativeMapConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRelativeMapConfig}, {
      &protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::scc_info_MapGenerationParam.base,
      &protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::scc_info_NavigationLaneConfig.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MapGenerationParam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NavigationLaneConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RelativeMapConfig.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::MapGenerationParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::MapGenerationParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::MapGenerationParam, default_left_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::MapGenerationParam, default_right_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::MapGenerationParam, default_speed_limit_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, min_lane_marker_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, lane_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, max_len_from_navigation_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, min_len_for_navigation_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, max_len_for_navigation_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, ratio_navigation_lane_len_to_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, max_distance_to_navigation_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, min_view_range_to_use_lane_marker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, min_lane_half_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, max_lane_half_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigationLaneConfig, lane_marker_weight_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::RelativeMapConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::RelativeMapConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::RelativeMapConfig, map_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::RelativeMapConfig, navigation_lane_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::relative_map::MapGenerationParam)},
  { 11, 27, sizeof(::apollo::relative_map::NavigationLaneConfig)},
  { 38, 45, sizeof(::apollo::relative_map::RelativeMapConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::relative_map::_MapGenerationParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::relative_map::_NavigationLaneConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::relative_map::_RelativeMapConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/map/relative_map/proto/relative_map_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n8modules/map/relative_map/proto/relativ"
      "e_map_config.proto\022\023apollo.relative_map\""
      "\177\n\022MapGenerationParam\022 \n\022default_left_wi"
      "dth\030\001 \001(\001:\0041.75\022!\n\023default_right_width\030\002"
      " \001(\001:\0041.75\022$\n\023default_speed_limit\030\003 \001(\001:"
      "\00729.0576\"\252\004\n\024NavigationLaneConfig\022$\n\027min"
      "_lane_marker_quality\030\001 \001(\001:\0030.5\022I\n\013lane_"
      "source\030\002 \001(\01624.apollo.relative_map.Navig"
      "ationLaneConfig.LaneSource\022)\n\034max_len_fr"
      "om_navigation_line\030\003 \001(\001:\003250\022(\n\033min_len"
      "_for_navigation_lane\030\004 \001(\001:\003150\022(\n\033max_l"
      "en_for_navigation_lane\030\005 \001(\001:\003250\022-\n\"rat"
      "io_navigation_lane_len_to_speed\030\006 \001(\001:\0018"
      "\022+\n\037max_distance_to_navigation_line\030\007 \001("
      "\001:\00215\022.\n!min_view_range_to_use_lane_mark"
      "er\030\010 \001(\001:\0030.5\022 \n\023min_lane_half_width\030\t \001"
      "(\001:\0031.5\022\036\n\023max_lane_half_width\030\n \001(\001:\0012\022"
      "\037\n\022lane_marker_weight\030\013 \001(\001:\0030.1\"3\n\nLane"
      "Source\022\016\n\nPERCEPTION\020\001\022\025\n\021OFFLINE_GENERA"
      "TED\020\002\"\223\001\n\021RelativeMapConfig\022:\n\tmap_param"
      "\030\001 \001(\0132\'.apollo.relative_map.MapGenerati"
      "onParam\022B\n\017navigation_lane\030\002 \001(\0132).apoll"
      "o.relative_map.NavigationLaneConfig"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 915);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/map/relative_map/proto/relative_map_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto
namespace apollo {
namespace relative_map {
const ::google::protobuf::EnumDescriptor* NavigationLaneConfig_LaneSource_descriptor() {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool NavigationLaneConfig_LaneSource_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NavigationLaneConfig_LaneSource NavigationLaneConfig::PERCEPTION;
const NavigationLaneConfig_LaneSource NavigationLaneConfig::OFFLINE_GENERATED;
const NavigationLaneConfig_LaneSource NavigationLaneConfig::LaneSource_MIN;
const NavigationLaneConfig_LaneSource NavigationLaneConfig::LaneSource_MAX;
const int NavigationLaneConfig::LaneSource_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void MapGenerationParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapGenerationParam::kDefaultLeftWidthFieldNumber;
const int MapGenerationParam::kDefaultRightWidthFieldNumber;
const int MapGenerationParam::kDefaultSpeedLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapGenerationParam::MapGenerationParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::scc_info_MapGenerationParam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.relative_map.MapGenerationParam)
}
MapGenerationParam::MapGenerationParam(const MapGenerationParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&default_left_width_, &from.default_left_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_speed_limit_) -
    reinterpret_cast<char*>(&default_left_width_)) + sizeof(default_speed_limit_));
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.MapGenerationParam)
}

void MapGenerationParam::SharedCtor() {
  default_left_width_ = 1.75;
  default_right_width_ = 1.75;
  default_speed_limit_ = 29.0576;
}

MapGenerationParam::~MapGenerationParam() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.MapGenerationParam)
  SharedDtor();
}

void MapGenerationParam::SharedDtor() {
}

void MapGenerationParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapGenerationParam::descriptor() {
  ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapGenerationParam& MapGenerationParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::scc_info_MapGenerationParam.base);
  return *internal_default_instance();
}


void MapGenerationParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.MapGenerationParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    default_left_width_ = 1.75;
    default_right_width_ = 1.75;
    default_speed_limit_ = 29.0576;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapGenerationParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.relative_map.MapGenerationParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double default_left_width = 1 [default = 1.75];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_default_left_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_left_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double default_right_width = 2 [default = 1.75];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_default_right_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_right_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double default_speed_limit = 3 [default = 29.0576];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_default_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.relative_map.MapGenerationParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.relative_map.MapGenerationParam)
  return false;
#undef DO_
}

void MapGenerationParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.relative_map.MapGenerationParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double default_left_width = 1 [default = 1.75];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->default_left_width(), output);
  }

  // optional double default_right_width = 2 [default = 1.75];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->default_right_width(), output);
  }

  // optional double default_speed_limit = 3 [default = 29.0576];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->default_speed_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.relative_map.MapGenerationParam)
}

::google::protobuf::uint8* MapGenerationParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.MapGenerationParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double default_left_width = 1 [default = 1.75];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->default_left_width(), target);
  }

  // optional double default_right_width = 2 [default = 1.75];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->default_right_width(), target);
  }

  // optional double default_speed_limit = 3 [default = 29.0576];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->default_speed_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.MapGenerationParam)
  return target;
}

size_t MapGenerationParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.MapGenerationParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double default_left_width = 1 [default = 1.75];
    if (has_default_left_width()) {
      total_size += 1 + 8;
    }

    // optional double default_right_width = 2 [default = 1.75];
    if (has_default_right_width()) {
      total_size += 1 + 8;
    }

    // optional double default_speed_limit = 3 [default = 29.0576];
    if (has_default_speed_limit()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapGenerationParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.relative_map.MapGenerationParam)
  GOOGLE_DCHECK_NE(&from, this);
  const MapGenerationParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapGenerationParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.relative_map.MapGenerationParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.relative_map.MapGenerationParam)
    MergeFrom(*source);
  }
}

void MapGenerationParam::MergeFrom(const MapGenerationParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.MapGenerationParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      default_left_width_ = from.default_left_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      default_right_width_ = from.default_right_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      default_speed_limit_ = from.default_speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MapGenerationParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.relative_map.MapGenerationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapGenerationParam::CopyFrom(const MapGenerationParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.MapGenerationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapGenerationParam::IsInitialized() const {
  return true;
}

void MapGenerationParam::Swap(MapGenerationParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapGenerationParam::InternalSwap(MapGenerationParam* other) {
  using std::swap;
  swap(default_left_width_, other->default_left_width_);
  swap(default_right_width_, other->default_right_width_);
  swap(default_speed_limit_, other->default_speed_limit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapGenerationParam::GetMetadata() const {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NavigationLaneConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigationLaneConfig::kMinLaneMarkerQualityFieldNumber;
const int NavigationLaneConfig::kLaneSourceFieldNumber;
const int NavigationLaneConfig::kMaxLenFromNavigationLineFieldNumber;
const int NavigationLaneConfig::kMinLenForNavigationLaneFieldNumber;
const int NavigationLaneConfig::kMaxLenForNavigationLaneFieldNumber;
const int NavigationLaneConfig::kRatioNavigationLaneLenToSpeedFieldNumber;
const int NavigationLaneConfig::kMaxDistanceToNavigationLineFieldNumber;
const int NavigationLaneConfig::kMinViewRangeToUseLaneMarkerFieldNumber;
const int NavigationLaneConfig::kMinLaneHalfWidthFieldNumber;
const int NavigationLaneConfig::kMaxLaneHalfWidthFieldNumber;
const int NavigationLaneConfig::kLaneMarkerWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigationLaneConfig::NavigationLaneConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::scc_info_NavigationLaneConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.relative_map.NavigationLaneConfig)
}
NavigationLaneConfig::NavigationLaneConfig(const NavigationLaneConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lane_source_, &from.lane_source_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_marker_weight_) -
    reinterpret_cast<char*>(&lane_source_)) + sizeof(lane_marker_weight_));
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.NavigationLaneConfig)
}

void NavigationLaneConfig::SharedCtor() {
  lane_source_ = 1;
  min_lane_marker_quality_ = 0.5;
  max_len_from_navigation_line_ = 250;
  min_len_for_navigation_lane_ = 150;
  max_len_for_navigation_lane_ = 250;
  ratio_navigation_lane_len_to_speed_ = 8;
  max_distance_to_navigation_line_ = 15;
  min_view_range_to_use_lane_marker_ = 0.5;
  min_lane_half_width_ = 1.5;
  max_lane_half_width_ = 2;
  lane_marker_weight_ = 0.1;
}

NavigationLaneConfig::~NavigationLaneConfig() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.NavigationLaneConfig)
  SharedDtor();
}

void NavigationLaneConfig::SharedDtor() {
}

void NavigationLaneConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NavigationLaneConfig::descriptor() {
  ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavigationLaneConfig& NavigationLaneConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::scc_info_NavigationLaneConfig.base);
  return *internal_default_instance();
}


void NavigationLaneConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.NavigationLaneConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    lane_source_ = 1;
    min_lane_marker_quality_ = 0.5;
    max_len_from_navigation_line_ = 250;
    min_len_for_navigation_lane_ = 150;
    max_len_for_navigation_lane_ = 250;
    ratio_navigation_lane_len_to_speed_ = 8;
    max_distance_to_navigation_line_ = 15;
    min_view_range_to_use_lane_marker_ = 0.5;
  }
  if (cached_has_bits & 1792u) {
    min_lane_half_width_ = 1.5;
    max_lane_half_width_ = 2;
    lane_marker_weight_ = 0.1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NavigationLaneConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.relative_map.NavigationLaneConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double min_lane_marker_quality = 1 [default = 0.5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_min_lane_marker_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_lane_marker_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::relative_map::NavigationLaneConfig_LaneSource_IsValid(value)) {
            set_lane_source(static_cast< ::apollo::relative_map::NavigationLaneConfig_LaneSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_len_from_navigation_line = 3 [default = 250];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_max_len_from_navigation_line();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_len_from_navigation_line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_len_for_navigation_lane = 4 [default = 150];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_min_len_for_navigation_lane();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_len_for_navigation_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_len_for_navigation_lane = 5 [default = 250];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_max_len_for_navigation_lane();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_len_for_navigation_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ratio_navigation_lane_len_to_speed = 6 [default = 8];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_ratio_navigation_lane_len_to_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ratio_navigation_lane_len_to_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_distance_to_navigation_line = 7 [default = 15];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_max_distance_to_navigation_line();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_distance_to_navigation_line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_view_range_to_use_lane_marker = 8 [default = 0.5];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_min_view_range_to_use_lane_marker();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_view_range_to_use_lane_marker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_lane_half_width = 9 [default = 1.5];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_min_lane_half_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_lane_half_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_lane_half_width = 10 [default = 2];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_max_lane_half_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_lane_half_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lane_marker_weight = 11 [default = 0.1];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_lane_marker_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_marker_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.relative_map.NavigationLaneConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.relative_map.NavigationLaneConfig)
  return false;
#undef DO_
}

void NavigationLaneConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.relative_map.NavigationLaneConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_lane_marker_quality = 1 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min_lane_marker_quality(), output);
  }

  // optional .apollo.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->lane_source(), output);
  }

  // optional double max_len_from_navigation_line = 3 [default = 250];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->max_len_from_navigation_line(), output);
  }

  // optional double min_len_for_navigation_lane = 4 [default = 150];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->min_len_for_navigation_lane(), output);
  }

  // optional double max_len_for_navigation_lane = 5 [default = 250];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->max_len_for_navigation_lane(), output);
  }

  // optional double ratio_navigation_lane_len_to_speed = 6 [default = 8];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ratio_navigation_lane_len_to_speed(), output);
  }

  // optional double max_distance_to_navigation_line = 7 [default = 15];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->max_distance_to_navigation_line(), output);
  }

  // optional double min_view_range_to_use_lane_marker = 8 [default = 0.5];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->min_view_range_to_use_lane_marker(), output);
  }

  // optional double min_lane_half_width = 9 [default = 1.5];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->min_lane_half_width(), output);
  }

  // optional double max_lane_half_width = 10 [default = 2];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->max_lane_half_width(), output);
  }

  // optional double lane_marker_weight = 11 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->lane_marker_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.relative_map.NavigationLaneConfig)
}

::google::protobuf::uint8* NavigationLaneConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.NavigationLaneConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_lane_marker_quality = 1 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min_lane_marker_quality(), target);
  }

  // optional .apollo.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->lane_source(), target);
  }

  // optional double max_len_from_navigation_line = 3 [default = 250];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->max_len_from_navigation_line(), target);
  }

  // optional double min_len_for_navigation_lane = 4 [default = 150];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->min_len_for_navigation_lane(), target);
  }

  // optional double max_len_for_navigation_lane = 5 [default = 250];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->max_len_for_navigation_lane(), target);
  }

  // optional double ratio_navigation_lane_len_to_speed = 6 [default = 8];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ratio_navigation_lane_len_to_speed(), target);
  }

  // optional double max_distance_to_navigation_line = 7 [default = 15];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->max_distance_to_navigation_line(), target);
  }

  // optional double min_view_range_to_use_lane_marker = 8 [default = 0.5];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->min_view_range_to_use_lane_marker(), target);
  }

  // optional double min_lane_half_width = 9 [default = 1.5];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->min_lane_half_width(), target);
  }

  // optional double max_lane_half_width = 10 [default = 2];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->max_lane_half_width(), target);
  }

  // optional double lane_marker_weight = 11 [default = 0.1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->lane_marker_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.NavigationLaneConfig)
  return target;
}

size_t NavigationLaneConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.NavigationLaneConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
    if (has_lane_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lane_source());
    }

    // optional double min_lane_marker_quality = 1 [default = 0.5];
    if (has_min_lane_marker_quality()) {
      total_size += 1 + 8;
    }

    // optional double max_len_from_navigation_line = 3 [default = 250];
    if (has_max_len_from_navigation_line()) {
      total_size += 1 + 8;
    }

    // optional double min_len_for_navigation_lane = 4 [default = 150];
    if (has_min_len_for_navigation_lane()) {
      total_size += 1 + 8;
    }

    // optional double max_len_for_navigation_lane = 5 [default = 250];
    if (has_max_len_for_navigation_lane()) {
      total_size += 1 + 8;
    }

    // optional double ratio_navigation_lane_len_to_speed = 6 [default = 8];
    if (has_ratio_navigation_lane_len_to_speed()) {
      total_size += 1 + 8;
    }

    // optional double max_distance_to_navigation_line = 7 [default = 15];
    if (has_max_distance_to_navigation_line()) {
      total_size += 1 + 8;
    }

    // optional double min_view_range_to_use_lane_marker = 8 [default = 0.5];
    if (has_min_view_range_to_use_lane_marker()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional double min_lane_half_width = 9 [default = 1.5];
    if (has_min_lane_half_width()) {
      total_size += 1 + 8;
    }

    // optional double max_lane_half_width = 10 [default = 2];
    if (has_max_lane_half_width()) {
      total_size += 1 + 8;
    }

    // optional double lane_marker_weight = 11 [default = 0.1];
    if (has_lane_marker_weight()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationLaneConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.relative_map.NavigationLaneConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationLaneConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigationLaneConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.relative_map.NavigationLaneConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.relative_map.NavigationLaneConfig)
    MergeFrom(*source);
  }
}

void NavigationLaneConfig::MergeFrom(const NavigationLaneConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.NavigationLaneConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      lane_source_ = from.lane_source_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_lane_marker_quality_ = from.min_lane_marker_quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_len_from_navigation_line_ = from.max_len_from_navigation_line_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_len_for_navigation_lane_ = from.min_len_for_navigation_lane_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_len_for_navigation_lane_ = from.max_len_for_navigation_lane_;
    }
    if (cached_has_bits & 0x00000020u) {
      ratio_navigation_lane_len_to_speed_ = from.ratio_navigation_lane_len_to_speed_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_distance_to_navigation_line_ = from.max_distance_to_navigation_line_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_view_range_to_use_lane_marker_ = from.min_view_range_to_use_lane_marker_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      min_lane_half_width_ = from.min_lane_half_width_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_lane_half_width_ = from.max_lane_half_width_;
    }
    if (cached_has_bits & 0x00000400u) {
      lane_marker_weight_ = from.lane_marker_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NavigationLaneConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.relative_map.NavigationLaneConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationLaneConfig::CopyFrom(const NavigationLaneConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.NavigationLaneConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationLaneConfig::IsInitialized() const {
  return true;
}

void NavigationLaneConfig::Swap(NavigationLaneConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavigationLaneConfig::InternalSwap(NavigationLaneConfig* other) {
  using std::swap;
  swap(lane_source_, other->lane_source_);
  swap(min_lane_marker_quality_, other->min_lane_marker_quality_);
  swap(max_len_from_navigation_line_, other->max_len_from_navigation_line_);
  swap(min_len_for_navigation_lane_, other->min_len_for_navigation_lane_);
  swap(max_len_for_navigation_lane_, other->max_len_for_navigation_lane_);
  swap(ratio_navigation_lane_len_to_speed_, other->ratio_navigation_lane_len_to_speed_);
  swap(max_distance_to_navigation_line_, other->max_distance_to_navigation_line_);
  swap(min_view_range_to_use_lane_marker_, other->min_view_range_to_use_lane_marker_);
  swap(min_lane_half_width_, other->min_lane_half_width_);
  swap(max_lane_half_width_, other->max_lane_half_width_);
  swap(lane_marker_weight_, other->lane_marker_weight_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NavigationLaneConfig::GetMetadata() const {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RelativeMapConfig::InitAsDefaultInstance() {
  ::apollo::relative_map::_RelativeMapConfig_default_instance_._instance.get_mutable()->map_param_ = const_cast< ::apollo::relative_map::MapGenerationParam*>(
      ::apollo::relative_map::MapGenerationParam::internal_default_instance());
  ::apollo::relative_map::_RelativeMapConfig_default_instance_._instance.get_mutable()->navigation_lane_ = const_cast< ::apollo::relative_map::NavigationLaneConfig*>(
      ::apollo::relative_map::NavigationLaneConfig::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelativeMapConfig::kMapParamFieldNumber;
const int RelativeMapConfig::kNavigationLaneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelativeMapConfig::RelativeMapConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::scc_info_RelativeMapConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.relative_map.RelativeMapConfig)
}
RelativeMapConfig::RelativeMapConfig(const RelativeMapConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_map_param()) {
    map_param_ = new ::apollo::relative_map::MapGenerationParam(*from.map_param_);
  } else {
    map_param_ = NULL;
  }
  if (from.has_navigation_lane()) {
    navigation_lane_ = new ::apollo::relative_map::NavigationLaneConfig(*from.navigation_lane_);
  } else {
    navigation_lane_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.RelativeMapConfig)
}

void RelativeMapConfig::SharedCtor() {
  ::memset(&map_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&navigation_lane_) -
      reinterpret_cast<char*>(&map_param_)) + sizeof(navigation_lane_));
}

RelativeMapConfig::~RelativeMapConfig() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.RelativeMapConfig)
  SharedDtor();
}

void RelativeMapConfig::SharedDtor() {
  if (this != internal_default_instance()) delete map_param_;
  if (this != internal_default_instance()) delete navigation_lane_;
}

void RelativeMapConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RelativeMapConfig::descriptor() {
  ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RelativeMapConfig& RelativeMapConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::scc_info_RelativeMapConfig.base);
  return *internal_default_instance();
}


void RelativeMapConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.RelativeMapConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(map_param_ != NULL);
      map_param_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(navigation_lane_ != NULL);
      navigation_lane_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RelativeMapConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.relative_map.RelativeMapConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.relative_map.MapGenerationParam map_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.relative_map.NavigationLaneConfig navigation_lane = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_navigation_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.relative_map.RelativeMapConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.relative_map.RelativeMapConfig)
  return false;
#undef DO_
}

void RelativeMapConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.relative_map.RelativeMapConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.relative_map.MapGenerationParam map_param = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_map_param(), output);
  }

  // optional .apollo.relative_map.NavigationLaneConfig navigation_lane = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_navigation_lane(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.relative_map.RelativeMapConfig)
}

::google::protobuf::uint8* RelativeMapConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.RelativeMapConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.relative_map.MapGenerationParam map_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_map_param(), deterministic, target);
  }

  // optional .apollo.relative_map.NavigationLaneConfig navigation_lane = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_navigation_lane(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.RelativeMapConfig)
  return target;
}

size_t RelativeMapConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.RelativeMapConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.relative_map.MapGenerationParam map_param = 1;
    if (has_map_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *map_param_);
    }

    // optional .apollo.relative_map.NavigationLaneConfig navigation_lane = 2;
    if (has_navigation_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *navigation_lane_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RelativeMapConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.relative_map.RelativeMapConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RelativeMapConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RelativeMapConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.relative_map.RelativeMapConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.relative_map.RelativeMapConfig)
    MergeFrom(*source);
  }
}

void RelativeMapConfig::MergeFrom(const RelativeMapConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.RelativeMapConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_map_param()->::apollo::relative_map::MapGenerationParam::MergeFrom(from.map_param());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_navigation_lane()->::apollo::relative_map::NavigationLaneConfig::MergeFrom(from.navigation_lane());
    }
  }
}

void RelativeMapConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.relative_map.RelativeMapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelativeMapConfig::CopyFrom(const RelativeMapConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.RelativeMapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelativeMapConfig::IsInitialized() const {
  return true;
}

void RelativeMapConfig::Swap(RelativeMapConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelativeMapConfig::InternalSwap(RelativeMapConfig* other) {
  using std::swap;
  swap(map_param_, other->map_param_);
  swap(navigation_lane_, other->navigation_lane_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RelativeMapConfig::GetMetadata() const {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace relative_map
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::relative_map::MapGenerationParam* Arena::CreateMaybeMessage< ::apollo::relative_map::MapGenerationParam >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::relative_map::MapGenerationParam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::relative_map::NavigationLaneConfig* Arena::CreateMaybeMessage< ::apollo::relative_map::NavigationLaneConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::relative_map::NavigationLaneConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::relative_map::RelativeMapConfig* Arena::CreateMaybeMessage< ::apollo::relative_map::RelativeMapConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::relative_map::RelativeMapConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
