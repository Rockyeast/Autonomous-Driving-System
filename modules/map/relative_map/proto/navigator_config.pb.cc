// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/relative_map/proto/navigator_config.proto

#include "modules/map/relative_map/proto/navigator_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SampleParam;
}  // namespace protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto
namespace apollo {
namespace relative_map {
class SampleParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SampleParam>
      _instance;
} _SampleParam_default_instance_;
class NavigatorConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NavigatorConfig>
      _instance;
} _NavigatorConfig_default_instance_;
}  // namespace relative_map
}  // namespace apollo
namespace protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto {
static void InitDefaultsSampleParam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::relative_map::_SampleParam_default_instance_;
    new (ptr) ::apollo::relative_map::SampleParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::relative_map::SampleParam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SampleParam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSampleParam}, {}};

static void InitDefaultsNavigatorConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::relative_map::_NavigatorConfig_default_instance_;
    new (ptr) ::apollo::relative_map::NavigatorConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::relative_map::NavigatorConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NavigatorConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNavigatorConfig}, {
      &protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto::scc_info_SampleParam.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SampleParam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NavigatorConfig.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::SampleParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::SampleParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::SampleParam, straight_sample_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::SampleParam, small_kappa_sample_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::SampleParam, middle_kappa_sample_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::SampleParam, large_kappa_sample_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::SampleParam, small_kappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::SampleParam, middle_kappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::SampleParam, large_kappa_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigatorConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigatorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigatorConfig, enable_navigator_downsample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::relative_map::NavigatorConfig, sample_param_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::apollo::relative_map::SampleParam)},
  { 19, 26, sizeof(::apollo::relative_map::NavigatorConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::relative_map::_SampleParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::relative_map::_NavigatorConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/map/relative_map/proto/navigator_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n5modules/map/relative_map/proto/navigat"
      "or_config.proto\022\023apollo.relative_map\"\203\002\n"
      "\013SampleParam\022#\n\030straight_sample_interval"
      "\030\001 \001(\001:\0013\022&\n\033small_kappa_sample_interval"
      "\030\002 \001(\001:\0011\022)\n\034middle_kappa_sample_interva"
      "l\030\003 \001(\001:\0030.4\022(\n\033large_kappa_sample_inter"
      "val\030\004 \001(\001:\0030.1\022\032\n\013small_kappa\030\005 \001(\001:\0050.0"
      "02\022\033\n\014middle_kappa\030\006 \001(\001:\0050.008\022\031\n\013large"
      "_kappa\030\007 \001(\001:\0040.02\"t\n\017NavigatorConfig\022)\n"
      "\033enable_navigator_downsample\030\001 \001(\010:\004true"
      "\0226\n\014sample_param\030\002 \001(\0132 .apollo.relative"
      "_map.SampleParam"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 456);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/map/relative_map/proto/navigator_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto
namespace apollo {
namespace relative_map {

// ===================================================================

void SampleParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SampleParam::kStraightSampleIntervalFieldNumber;
const int SampleParam::kSmallKappaSampleIntervalFieldNumber;
const int SampleParam::kMiddleKappaSampleIntervalFieldNumber;
const int SampleParam::kLargeKappaSampleIntervalFieldNumber;
const int SampleParam::kSmallKappaFieldNumber;
const int SampleParam::kMiddleKappaFieldNumber;
const int SampleParam::kLargeKappaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SampleParam::SampleParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto::scc_info_SampleParam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.relative_map.SampleParam)
}
SampleParam::SampleParam(const SampleParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&straight_sample_interval_, &from.straight_sample_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&large_kappa_) -
    reinterpret_cast<char*>(&straight_sample_interval_)) + sizeof(large_kappa_));
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.SampleParam)
}

void SampleParam::SharedCtor() {
  straight_sample_interval_ = 3;
  small_kappa_sample_interval_ = 1;
  middle_kappa_sample_interval_ = 0.4;
  large_kappa_sample_interval_ = 0.1;
  small_kappa_ = 0.002;
  middle_kappa_ = 0.008;
  large_kappa_ = 0.02;
}

SampleParam::~SampleParam() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.SampleParam)
  SharedDtor();
}

void SampleParam::SharedDtor() {
}

void SampleParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SampleParam::descriptor() {
  ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SampleParam& SampleParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto::scc_info_SampleParam.base);
  return *internal_default_instance();
}


void SampleParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.SampleParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    straight_sample_interval_ = 3;
    small_kappa_sample_interval_ = 1;
    middle_kappa_sample_interval_ = 0.4;
    large_kappa_sample_interval_ = 0.1;
    small_kappa_ = 0.002;
    middle_kappa_ = 0.008;
    large_kappa_ = 0.02;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SampleParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.relative_map.SampleParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double straight_sample_interval = 1 [default = 3];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_straight_sample_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &straight_sample_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double small_kappa_sample_interval = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_small_kappa_sample_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &small_kappa_sample_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double middle_kappa_sample_interval = 3 [default = 0.4];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_middle_kappa_sample_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &middle_kappa_sample_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double large_kappa_sample_interval = 4 [default = 0.1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_large_kappa_sample_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &large_kappa_sample_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double small_kappa = 5 [default = 0.002];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_small_kappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &small_kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double middle_kappa = 6 [default = 0.008];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_middle_kappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &middle_kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double large_kappa = 7 [default = 0.02];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_large_kappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &large_kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.relative_map.SampleParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.relative_map.SampleParam)
  return false;
#undef DO_
}

void SampleParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.relative_map.SampleParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double straight_sample_interval = 1 [default = 3];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->straight_sample_interval(), output);
  }

  // optional double small_kappa_sample_interval = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->small_kappa_sample_interval(), output);
  }

  // optional double middle_kappa_sample_interval = 3 [default = 0.4];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->middle_kappa_sample_interval(), output);
  }

  // optional double large_kappa_sample_interval = 4 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->large_kappa_sample_interval(), output);
  }

  // optional double small_kappa = 5 [default = 0.002];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->small_kappa(), output);
  }

  // optional double middle_kappa = 6 [default = 0.008];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->middle_kappa(), output);
  }

  // optional double large_kappa = 7 [default = 0.02];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->large_kappa(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.relative_map.SampleParam)
}

::google::protobuf::uint8* SampleParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.SampleParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double straight_sample_interval = 1 [default = 3];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->straight_sample_interval(), target);
  }

  // optional double small_kappa_sample_interval = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->small_kappa_sample_interval(), target);
  }

  // optional double middle_kappa_sample_interval = 3 [default = 0.4];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->middle_kappa_sample_interval(), target);
  }

  // optional double large_kappa_sample_interval = 4 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->large_kappa_sample_interval(), target);
  }

  // optional double small_kappa = 5 [default = 0.002];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->small_kappa(), target);
  }

  // optional double middle_kappa = 6 [default = 0.008];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->middle_kappa(), target);
  }

  // optional double large_kappa = 7 [default = 0.02];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->large_kappa(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.SampleParam)
  return target;
}

size_t SampleParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.SampleParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional double straight_sample_interval = 1 [default = 3];
    if (has_straight_sample_interval()) {
      total_size += 1 + 8;
    }

    // optional double small_kappa_sample_interval = 2 [default = 1];
    if (has_small_kappa_sample_interval()) {
      total_size += 1 + 8;
    }

    // optional double middle_kappa_sample_interval = 3 [default = 0.4];
    if (has_middle_kappa_sample_interval()) {
      total_size += 1 + 8;
    }

    // optional double large_kappa_sample_interval = 4 [default = 0.1];
    if (has_large_kappa_sample_interval()) {
      total_size += 1 + 8;
    }

    // optional double small_kappa = 5 [default = 0.002];
    if (has_small_kappa()) {
      total_size += 1 + 8;
    }

    // optional double middle_kappa = 6 [default = 0.008];
    if (has_middle_kappa()) {
      total_size += 1 + 8;
    }

    // optional double large_kappa = 7 [default = 0.02];
    if (has_large_kappa()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SampleParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.relative_map.SampleParam)
  GOOGLE_DCHECK_NE(&from, this);
  const SampleParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SampleParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.relative_map.SampleParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.relative_map.SampleParam)
    MergeFrom(*source);
  }
}

void SampleParam::MergeFrom(const SampleParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.SampleParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      straight_sample_interval_ = from.straight_sample_interval_;
    }
    if (cached_has_bits & 0x00000002u) {
      small_kappa_sample_interval_ = from.small_kappa_sample_interval_;
    }
    if (cached_has_bits & 0x00000004u) {
      middle_kappa_sample_interval_ = from.middle_kappa_sample_interval_;
    }
    if (cached_has_bits & 0x00000008u) {
      large_kappa_sample_interval_ = from.large_kappa_sample_interval_;
    }
    if (cached_has_bits & 0x00000010u) {
      small_kappa_ = from.small_kappa_;
    }
    if (cached_has_bits & 0x00000020u) {
      middle_kappa_ = from.middle_kappa_;
    }
    if (cached_has_bits & 0x00000040u) {
      large_kappa_ = from.large_kappa_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SampleParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.relative_map.SampleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleParam::CopyFrom(const SampleParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.SampleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleParam::IsInitialized() const {
  return true;
}

void SampleParam::Swap(SampleParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SampleParam::InternalSwap(SampleParam* other) {
  using std::swap;
  swap(straight_sample_interval_, other->straight_sample_interval_);
  swap(small_kappa_sample_interval_, other->small_kappa_sample_interval_);
  swap(middle_kappa_sample_interval_, other->middle_kappa_sample_interval_);
  swap(large_kappa_sample_interval_, other->large_kappa_sample_interval_);
  swap(small_kappa_, other->small_kappa_);
  swap(middle_kappa_, other->middle_kappa_);
  swap(large_kappa_, other->large_kappa_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SampleParam::GetMetadata() const {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NavigatorConfig::InitAsDefaultInstance() {
  ::apollo::relative_map::_NavigatorConfig_default_instance_._instance.get_mutable()->sample_param_ = const_cast< ::apollo::relative_map::SampleParam*>(
      ::apollo::relative_map::SampleParam::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigatorConfig::kEnableNavigatorDownsampleFieldNumber;
const int NavigatorConfig::kSampleParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigatorConfig::NavigatorConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto::scc_info_NavigatorConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.relative_map.NavigatorConfig)
}
NavigatorConfig::NavigatorConfig(const NavigatorConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sample_param()) {
    sample_param_ = new ::apollo::relative_map::SampleParam(*from.sample_param_);
  } else {
    sample_param_ = NULL;
  }
  enable_navigator_downsample_ = from.enable_navigator_downsample_;
  // @@protoc_insertion_point(copy_constructor:apollo.relative_map.NavigatorConfig)
}

void NavigatorConfig::SharedCtor() {
  sample_param_ = NULL;
  enable_navigator_downsample_ = true;
}

NavigatorConfig::~NavigatorConfig() {
  // @@protoc_insertion_point(destructor:apollo.relative_map.NavigatorConfig)
  SharedDtor();
}

void NavigatorConfig::SharedDtor() {
  if (this != internal_default_instance()) delete sample_param_;
}

void NavigatorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NavigatorConfig::descriptor() {
  ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavigatorConfig& NavigatorConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto::scc_info_NavigatorConfig.base);
  return *internal_default_instance();
}


void NavigatorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.relative_map.NavigatorConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sample_param_ != NULL);
      sample_param_->Clear();
    }
    enable_navigator_downsample_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NavigatorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.relative_map.NavigatorConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable_navigator_downsample = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_enable_navigator_downsample();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_navigator_downsample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.relative_map.SampleParam sample_param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sample_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.relative_map.NavigatorConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.relative_map.NavigatorConfig)
  return false;
#undef DO_
}

void NavigatorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.relative_map.NavigatorConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_navigator_downsample = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_navigator_downsample(), output);
  }

  // optional .apollo.relative_map.SampleParam sample_param = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_sample_param(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.relative_map.NavigatorConfig)
}

::google::protobuf::uint8* NavigatorConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.relative_map.NavigatorConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_navigator_downsample = 1 [default = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_navigator_downsample(), target);
  }

  // optional .apollo.relative_map.SampleParam sample_param = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_sample_param(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.relative_map.NavigatorConfig)
  return target;
}

size_t NavigatorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.relative_map.NavigatorConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.relative_map.SampleParam sample_param = 2;
    if (has_sample_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sample_param_);
    }

    // optional bool enable_navigator_downsample = 1 [default = true];
    if (has_enable_navigator_downsample()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigatorConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.relative_map.NavigatorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigatorConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigatorConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.relative_map.NavigatorConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.relative_map.NavigatorConfig)
    MergeFrom(*source);
  }
}

void NavigatorConfig::MergeFrom(const NavigatorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.relative_map.NavigatorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sample_param()->::apollo::relative_map::SampleParam::MergeFrom(from.sample_param());
    }
    if (cached_has_bits & 0x00000002u) {
      enable_navigator_downsample_ = from.enable_navigator_downsample_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NavigatorConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.relative_map.NavigatorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigatorConfig::CopyFrom(const NavigatorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.relative_map.NavigatorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigatorConfig::IsInitialized() const {
  return true;
}

void NavigatorConfig::Swap(NavigatorConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavigatorConfig::InternalSwap(NavigatorConfig* other) {
  using std::swap;
  swap(sample_param_, other->sample_param_);
  swap(enable_navigator_downsample_, other->enable_navigator_downsample_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NavigatorConfig::GetMetadata() const {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigator_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace relative_map
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::relative_map::SampleParam* Arena::CreateMaybeMessage< ::apollo::relative_map::SampleParam >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::relative_map::SampleParam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::relative_map::NavigatorConfig* Arena::CreateMaybeMessage< ::apollo::relative_map::NavigatorConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::relative_map::NavigatorConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
