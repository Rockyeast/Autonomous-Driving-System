// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/routing/proto/poi.proto

#ifndef PROTOBUF_INCLUDED_modules_2frouting_2fproto_2fpoi_2eproto
#define PROTOBUF_INCLUDED_modules_2frouting_2fproto_2fpoi_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/routing/proto/routing.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2frouting_2fproto_2fpoi_2eproto 

namespace protobuf_modules_2frouting_2fproto_2fpoi_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2frouting_2fproto_2fpoi_2eproto
namespace apollo {
namespace routing {
class Landmark;
class LandmarkDefaultTypeInternal;
extern LandmarkDefaultTypeInternal _Landmark_default_instance_;
class POI;
class POIDefaultTypeInternal;
extern POIDefaultTypeInternal _POI_default_instance_;
}  // namespace routing
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::routing::Landmark* Arena::CreateMaybeMessage<::apollo::routing::Landmark>(Arena*);
template<> ::apollo::routing::POI* Arena::CreateMaybeMessage<::apollo::routing::POI>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace routing {

// ===================================================================

class Landmark : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.routing.Landmark) */ {
 public:
  Landmark();
  virtual ~Landmark();

  Landmark(const Landmark& from);

  inline Landmark& operator=(const Landmark& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Landmark(Landmark&& from) noexcept
    : Landmark() {
    *this = ::std::move(from);
  }

  inline Landmark& operator=(Landmark&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Landmark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Landmark* internal_default_instance() {
    return reinterpret_cast<const Landmark*>(
               &_Landmark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Landmark* other);
  friend void swap(Landmark& a, Landmark& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Landmark* New() const final {
    return CreateMaybeMessage<Landmark>(NULL);
  }

  Landmark* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Landmark>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Landmark& from);
  void MergeFrom(const Landmark& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Landmark* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  int waypoint_size() const;
  void clear_waypoint();
  static const int kWaypointFieldNumber = 2;
  ::apollo::routing::LaneWaypoint* mutable_waypoint(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneWaypoint >*
      mutable_waypoint();
  const ::apollo::routing::LaneWaypoint& waypoint(int index) const;
  ::apollo::routing::LaneWaypoint* add_waypoint();
  const ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneWaypoint >&
      waypoint() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string parking_space_id = 3 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_parking_space_id() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_parking_space_id();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kParkingSpaceIdFieldNumber = 3;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::std::string& parking_space_id() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_parking_space_id(const ::std::string& value);
  #if LANG_CXX11
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_parking_space_id(::std::string&& value);
  #endif
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_parking_space_id(const char* value);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_parking_space_id(const char* value, size_t size);
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* mutable_parking_space_id();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::std::string* release_parking_space_id();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_parking_space_id(::std::string* parking_space_id);

  // optional .apollo.routing.ParkingInfo parking_info = 4;
  bool has_parking_info() const;
  void clear_parking_info();
  static const int kParkingInfoFieldNumber = 4;
  private:
  const ::apollo::routing::ParkingInfo& _internal_parking_info() const;
  public:
  const ::apollo::routing::ParkingInfo& parking_info() const;
  ::apollo::routing::ParkingInfo* release_parking_info();
  ::apollo::routing::ParkingInfo* mutable_parking_info();
  void set_allocated_parking_info(::apollo::routing::ParkingInfo* parking_info);

  // @@protoc_insertion_point(class_scope:apollo.routing.Landmark)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_parking_space_id();
  void clear_has_parking_space_id();
  void set_has_parking_info();
  void clear_has_parking_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneWaypoint > waypoint_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr parking_space_id_;
  ::apollo::routing::ParkingInfo* parking_info_;
  friend struct ::protobuf_modules_2frouting_2fproto_2fpoi_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POI : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.routing.POI) */ {
 public:
  POI();
  virtual ~POI();

  POI(const POI& from);

  inline POI& operator=(const POI& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  POI(POI&& from) noexcept
    : POI() {
    *this = ::std::move(from);
  }

  inline POI& operator=(POI&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const POI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const POI* internal_default_instance() {
    return reinterpret_cast<const POI*>(
               &_POI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(POI* other);
  friend void swap(POI& a, POI& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline POI* New() const final {
    return CreateMaybeMessage<POI>(NULL);
  }

  POI* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<POI>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const POI& from);
  void MergeFrom(const POI& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(POI* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.routing.Landmark landmark = 1;
  int landmark_size() const;
  void clear_landmark();
  static const int kLandmarkFieldNumber = 1;
  ::apollo::routing::Landmark* mutable_landmark(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::routing::Landmark >*
      mutable_landmark();
  const ::apollo::routing::Landmark& landmark(int index) const;
  ::apollo::routing::Landmark* add_landmark();
  const ::google::protobuf::RepeatedPtrField< ::apollo::routing::Landmark >&
      landmark() const;

  // @@protoc_insertion_point(class_scope:apollo.routing.POI)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::routing::Landmark > landmark_;
  friend struct ::protobuf_modules_2frouting_2fproto_2fpoi_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Landmark

// optional string name = 1;
inline bool Landmark::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Landmark::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Landmark::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Landmark::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Landmark::name() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Landmark.name)
  return name_.GetNoArena();
}
inline void Landmark::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.Landmark.name)
}
#if LANG_CXX11
inline void Landmark::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.routing.Landmark.name)
}
#endif
inline void Landmark::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.Landmark.name)
}
inline void Landmark::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.Landmark.name)
}
inline ::std::string* Landmark::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Landmark.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Landmark::release_name() {
  // @@protoc_insertion_point(field_release:apollo.routing.Landmark.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Landmark::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Landmark.name)
}

// repeated .apollo.routing.LaneWaypoint waypoint = 2;
inline int Landmark::waypoint_size() const {
  return waypoint_.size();
}
inline ::apollo::routing::LaneWaypoint* Landmark::mutable_waypoint(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.Landmark.waypoint)
  return waypoint_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneWaypoint >*
Landmark::mutable_waypoint() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.Landmark.waypoint)
  return &waypoint_;
}
inline const ::apollo::routing::LaneWaypoint& Landmark::waypoint(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.Landmark.waypoint)
  return waypoint_.Get(index);
}
inline ::apollo::routing::LaneWaypoint* Landmark::add_waypoint() {
  // @@protoc_insertion_point(field_add:apollo.routing.Landmark.waypoint)
  return waypoint_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneWaypoint >&
Landmark::waypoint() const {
  // @@protoc_insertion_point(field_list:apollo.routing.Landmark.waypoint)
  return waypoint_;
}

// optional string parking_space_id = 3 [deprecated = true];
inline bool Landmark::has_parking_space_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Landmark::set_has_parking_space_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Landmark::clear_has_parking_space_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Landmark::clear_parking_space_id() {
  parking_space_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parking_space_id();
}
inline const ::std::string& Landmark::parking_space_id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Landmark.parking_space_id)
  return parking_space_id_.GetNoArena();
}
inline void Landmark::set_parking_space_id(const ::std::string& value) {
  set_has_parking_space_id();
  parking_space_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.Landmark.parking_space_id)
}
#if LANG_CXX11
inline void Landmark::set_parking_space_id(::std::string&& value) {
  set_has_parking_space_id();
  parking_space_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.routing.Landmark.parking_space_id)
}
#endif
inline void Landmark::set_parking_space_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parking_space_id();
  parking_space_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.Landmark.parking_space_id)
}
inline void Landmark::set_parking_space_id(const char* value, size_t size) {
  set_has_parking_space_id();
  parking_space_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.Landmark.parking_space_id)
}
inline ::std::string* Landmark::mutable_parking_space_id() {
  set_has_parking_space_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.Landmark.parking_space_id)
  return parking_space_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Landmark::release_parking_space_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.Landmark.parking_space_id)
  if (!has_parking_space_id()) {
    return NULL;
  }
  clear_has_parking_space_id();
  return parking_space_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Landmark::set_allocated_parking_space_id(::std::string* parking_space_id) {
  if (parking_space_id != NULL) {
    set_has_parking_space_id();
  } else {
    clear_has_parking_space_id();
  }
  parking_space_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parking_space_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Landmark.parking_space_id)
}

// optional .apollo.routing.ParkingInfo parking_info = 4;
inline bool Landmark::has_parking_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Landmark::set_has_parking_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Landmark::clear_has_parking_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::routing::ParkingInfo& Landmark::_internal_parking_info() const {
  return *parking_info_;
}
inline const ::apollo::routing::ParkingInfo& Landmark::parking_info() const {
  const ::apollo::routing::ParkingInfo* p = parking_info_;
  // @@protoc_insertion_point(field_get:apollo.routing.Landmark.parking_info)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::routing::ParkingInfo*>(
      &::apollo::routing::_ParkingInfo_default_instance_);
}
inline ::apollo::routing::ParkingInfo* Landmark::release_parking_info() {
  // @@protoc_insertion_point(field_release:apollo.routing.Landmark.parking_info)
  clear_has_parking_info();
  ::apollo::routing::ParkingInfo* temp = parking_info_;
  parking_info_ = NULL;
  return temp;
}
inline ::apollo::routing::ParkingInfo* Landmark::mutable_parking_info() {
  set_has_parking_info();
  if (parking_info_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::routing::ParkingInfo>(GetArenaNoVirtual());
    parking_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.Landmark.parking_info)
  return parking_info_;
}
inline void Landmark::set_allocated_parking_info(::apollo::routing::ParkingInfo* parking_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parking_info_);
  }
  if (parking_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parking_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parking_info, submessage_arena);
    }
    set_has_parking_info();
  } else {
    clear_has_parking_info();
  }
  parking_info_ = parking_info;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.Landmark.parking_info)
}

// -------------------------------------------------------------------

// POI

// repeated .apollo.routing.Landmark landmark = 1;
inline int POI::landmark_size() const {
  return landmark_.size();
}
inline void POI::clear_landmark() {
  landmark_.Clear();
}
inline ::apollo::routing::Landmark* POI::mutable_landmark(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.POI.landmark)
  return landmark_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::routing::Landmark >*
POI::mutable_landmark() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.POI.landmark)
  return &landmark_;
}
inline const ::apollo::routing::Landmark& POI::landmark(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.POI.landmark)
  return landmark_.Get(index);
}
inline ::apollo::routing::Landmark* POI::add_landmark() {
  // @@protoc_insertion_point(field_add:apollo.routing.POI.landmark)
  return landmark_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::routing::Landmark >&
POI::landmark() const {
  // @@protoc_insertion_point(field_list:apollo.routing.POI.landmark)
  return landmark_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace routing
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2frouting_2fproto_2fpoi_2eproto
