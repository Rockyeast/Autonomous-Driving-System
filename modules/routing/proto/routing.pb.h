// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/routing/proto/routing.proto

#ifndef PROTOBUF_INCLUDED_modules_2frouting_2fproto_2frouting_2eproto
#define PROTOBUF_INCLUDED_modules_2frouting_2fproto_2frouting_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/geometry.pb.h"
#include "modules/common/proto/error_code.pb.h"
#include "modules/map/proto/map_parking_space.pb.h"
#include "modules/map/proto/map_geometry.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2frouting_2fproto_2frouting_2eproto 

namespace protobuf_modules_2frouting_2fproto_2frouting_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2frouting_2fproto_2frouting_2eproto
namespace apollo {
namespace routing {
class DeadEndInfo;
class DeadEndInfoDefaultTypeInternal;
extern DeadEndInfoDefaultTypeInternal _DeadEndInfo_default_instance_;
class LaneSegment;
class LaneSegmentDefaultTypeInternal;
extern LaneSegmentDefaultTypeInternal _LaneSegment_default_instance_;
class LaneWaypoint;
class LaneWaypointDefaultTypeInternal;
extern LaneWaypointDefaultTypeInternal _LaneWaypoint_default_instance_;
class Measurement;
class MeasurementDefaultTypeInternal;
extern MeasurementDefaultTypeInternal _Measurement_default_instance_;
class ParkingInfo;
class ParkingInfoDefaultTypeInternal;
extern ParkingInfoDefaultTypeInternal _ParkingInfo_default_instance_;
class Passage;
class PassageDefaultTypeInternal;
extern PassageDefaultTypeInternal _Passage_default_instance_;
class RoadSegment;
class RoadSegmentDefaultTypeInternal;
extern RoadSegmentDefaultTypeInternal _RoadSegment_default_instance_;
class RoutingRequest;
class RoutingRequestDefaultTypeInternal;
extern RoutingRequestDefaultTypeInternal _RoutingRequest_default_instance_;
class RoutingResponse;
class RoutingResponseDefaultTypeInternal;
extern RoutingResponseDefaultTypeInternal _RoutingResponse_default_instance_;
}  // namespace routing
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::routing::DeadEndInfo* Arena::CreateMaybeMessage<::apollo::routing::DeadEndInfo>(Arena*);
template<> ::apollo::routing::LaneSegment* Arena::CreateMaybeMessage<::apollo::routing::LaneSegment>(Arena*);
template<> ::apollo::routing::LaneWaypoint* Arena::CreateMaybeMessage<::apollo::routing::LaneWaypoint>(Arena*);
template<> ::apollo::routing::Measurement* Arena::CreateMaybeMessage<::apollo::routing::Measurement>(Arena*);
template<> ::apollo::routing::ParkingInfo* Arena::CreateMaybeMessage<::apollo::routing::ParkingInfo>(Arena*);
template<> ::apollo::routing::Passage* Arena::CreateMaybeMessage<::apollo::routing::Passage>(Arena*);
template<> ::apollo::routing::RoadSegment* Arena::CreateMaybeMessage<::apollo::routing::RoadSegment>(Arena*);
template<> ::apollo::routing::RoutingRequest* Arena::CreateMaybeMessage<::apollo::routing::RoutingRequest>(Arena*);
template<> ::apollo::routing::RoutingResponse* Arena::CreateMaybeMessage<::apollo::routing::RoutingResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace routing {

enum ParkingSpaceType {
  VERTICAL_PLOT = 0,
  PARALLEL_PARKING = 1
};
bool ParkingSpaceType_IsValid(int value);
const ParkingSpaceType ParkingSpaceType_MIN = VERTICAL_PLOT;
const ParkingSpaceType ParkingSpaceType_MAX = PARALLEL_PARKING;
const int ParkingSpaceType_ARRAYSIZE = ParkingSpaceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ParkingSpaceType_descriptor();
inline const ::std::string& ParkingSpaceType_Name(ParkingSpaceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ParkingSpaceType_descriptor(), value);
}
inline bool ParkingSpaceType_Parse(
    const ::std::string& name, ParkingSpaceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ParkingSpaceType>(
    ParkingSpaceType_descriptor(), name, value);
}
enum DeadEndRoutingType {
  ROUTING_OTHER = 0,
  ROUTING_IN = 1,
  ROUTING_OUT = 2
};
bool DeadEndRoutingType_IsValid(int value);
const DeadEndRoutingType DeadEndRoutingType_MIN = ROUTING_OTHER;
const DeadEndRoutingType DeadEndRoutingType_MAX = ROUTING_OUT;
const int DeadEndRoutingType_ARRAYSIZE = DeadEndRoutingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeadEndRoutingType_descriptor();
inline const ::std::string& DeadEndRoutingType_Name(DeadEndRoutingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeadEndRoutingType_descriptor(), value);
}
inline bool DeadEndRoutingType_Parse(
    const ::std::string& name, DeadEndRoutingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeadEndRoutingType>(
    DeadEndRoutingType_descriptor(), name, value);
}
enum ChangeLaneType {
  FORWARD = 0,
  LEFT = 1,
  RIGHT = 2
};
bool ChangeLaneType_IsValid(int value);
const ChangeLaneType ChangeLaneType_MIN = FORWARD;
const ChangeLaneType ChangeLaneType_MAX = RIGHT;
const int ChangeLaneType_ARRAYSIZE = ChangeLaneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChangeLaneType_descriptor();
inline const ::std::string& ChangeLaneType_Name(ChangeLaneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChangeLaneType_descriptor(), value);
}
inline bool ChangeLaneType_Parse(
    const ::std::string& name, ChangeLaneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChangeLaneType>(
    ChangeLaneType_descriptor(), name, value);
}
// ===================================================================

class LaneWaypoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.routing.LaneWaypoint) */ {
 public:
  LaneWaypoint();
  virtual ~LaneWaypoint();

  LaneWaypoint(const LaneWaypoint& from);

  inline LaneWaypoint& operator=(const LaneWaypoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneWaypoint(LaneWaypoint&& from) noexcept
    : LaneWaypoint() {
    *this = ::std::move(from);
  }

  inline LaneWaypoint& operator=(LaneWaypoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneWaypoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneWaypoint* internal_default_instance() {
    return reinterpret_cast<const LaneWaypoint*>(
               &_LaneWaypoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LaneWaypoint* other);
  friend void swap(LaneWaypoint& a, LaneWaypoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneWaypoint* New() const final {
    return CreateMaybeMessage<LaneWaypoint>(NULL);
  }

  LaneWaypoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaneWaypoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaneWaypoint& from);
  void MergeFrom(const LaneWaypoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneWaypoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .apollo.common.PointENU pose = 3;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 3;
  private:
  const ::apollo::common::PointENU& _internal_pose() const;
  public:
  const ::apollo::common::PointENU& pose() const;
  ::apollo::common::PointENU* release_pose();
  ::apollo::common::PointENU* mutable_pose();
  void set_allocated_pose(::apollo::common::PointENU* pose);

  // optional double s = 2;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 2;
  double s() const;
  void set_s(double value);

  // optional double heading = 4;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 4;
  double heading() const;
  void set_heading(double value);

  // @@protoc_insertion_point(class_scope:apollo.routing.LaneWaypoint)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_s();
  void clear_has_s();
  void set_has_pose();
  void clear_has_pose();
  void set_has_heading();
  void clear_has_heading();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::apollo::common::PointENU* pose_;
  double s_;
  double heading_;
  friend struct ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneSegment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.routing.LaneSegment) */ {
 public:
  LaneSegment();
  virtual ~LaneSegment();

  LaneSegment(const LaneSegment& from);

  inline LaneSegment& operator=(const LaneSegment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneSegment(LaneSegment&& from) noexcept
    : LaneSegment() {
    *this = ::std::move(from);
  }

  inline LaneSegment& operator=(LaneSegment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneSegment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneSegment* internal_default_instance() {
    return reinterpret_cast<const LaneSegment*>(
               &_LaneSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LaneSegment* other);
  friend void swap(LaneSegment& a, LaneSegment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneSegment* New() const final {
    return CreateMaybeMessage<LaneSegment>(NULL);
  }

  LaneSegment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaneSegment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaneSegment& from);
  void MergeFrom(const LaneSegment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneSegment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional double start_s = 2;
  bool has_start_s() const;
  void clear_start_s();
  static const int kStartSFieldNumber = 2;
  double start_s() const;
  void set_start_s(double value);

  // optional double end_s = 3;
  bool has_end_s() const;
  void clear_end_s();
  static const int kEndSFieldNumber = 3;
  double end_s() const;
  void set_end_s(double value);

  // @@protoc_insertion_point(class_scope:apollo.routing.LaneSegment)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_start_s();
  void clear_has_start_s();
  void set_has_end_s();
  void clear_has_end_s();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  double start_s_;
  double end_s_;
  friend struct ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParkingInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.routing.ParkingInfo) */ {
 public:
  ParkingInfo();
  virtual ~ParkingInfo();

  ParkingInfo(const ParkingInfo& from);

  inline ParkingInfo& operator=(const ParkingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParkingInfo(ParkingInfo&& from) noexcept
    : ParkingInfo() {
    *this = ::std::move(from);
  }

  inline ParkingInfo& operator=(ParkingInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParkingInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParkingInfo* internal_default_instance() {
    return reinterpret_cast<const ParkingInfo*>(
               &_ParkingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ParkingInfo* other);
  friend void swap(ParkingInfo& a, ParkingInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParkingInfo* New() const final {
    return CreateMaybeMessage<ParkingInfo>(NULL);
  }

  ParkingInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParkingInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParkingInfo& from);
  void MergeFrom(const ParkingInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParkingInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string parking_space_id = 1;
  bool has_parking_space_id() const;
  void clear_parking_space_id();
  static const int kParkingSpaceIdFieldNumber = 1;
  const ::std::string& parking_space_id() const;
  void set_parking_space_id(const ::std::string& value);
  #if LANG_CXX11
  void set_parking_space_id(::std::string&& value);
  #endif
  void set_parking_space_id(const char* value);
  void set_parking_space_id(const char* value, size_t size);
  ::std::string* mutable_parking_space_id();
  ::std::string* release_parking_space_id();
  void set_allocated_parking_space_id(::std::string* parking_space_id);

  // optional .apollo.common.PointENU parking_point = 2;
  bool has_parking_point() const;
  void clear_parking_point();
  static const int kParkingPointFieldNumber = 2;
  private:
  const ::apollo::common::PointENU& _internal_parking_point() const;
  public:
  const ::apollo::common::PointENU& parking_point() const;
  ::apollo::common::PointENU* release_parking_point();
  ::apollo::common::PointENU* mutable_parking_point();
  void set_allocated_parking_point(::apollo::common::PointENU* parking_point);

  // optional .apollo.hdmap.Polygon corner_point = 4;
  bool has_corner_point() const;
  void clear_corner_point();
  static const int kCornerPointFieldNumber = 4;
  private:
  const ::apollo::hdmap::Polygon& _internal_corner_point() const;
  public:
  const ::apollo::hdmap::Polygon& corner_point() const;
  ::apollo::hdmap::Polygon* release_corner_point();
  ::apollo::hdmap::Polygon* mutable_corner_point();
  void set_allocated_corner_point(::apollo::hdmap::Polygon* corner_point);

  // optional .apollo.routing.ParkingSpaceType parking_space_type = 3;
  bool has_parking_space_type() const;
  void clear_parking_space_type();
  static const int kParkingSpaceTypeFieldNumber = 3;
  ::apollo::routing::ParkingSpaceType parking_space_type() const;
  void set_parking_space_type(::apollo::routing::ParkingSpaceType value);

  // @@protoc_insertion_point(class_scope:apollo.routing.ParkingInfo)
 private:
  void set_has_parking_space_id();
  void clear_has_parking_space_id();
  void set_has_parking_point();
  void clear_has_parking_point();
  void set_has_parking_space_type();
  void clear_has_parking_space_type();
  void set_has_corner_point();
  void clear_has_corner_point();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr parking_space_id_;
  ::apollo::common::PointENU* parking_point_;
  ::apollo::hdmap::Polygon* corner_point_;
  int parking_space_type_;
  friend struct ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeadEndInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.routing.DeadEndInfo) */ {
 public:
  DeadEndInfo();
  virtual ~DeadEndInfo();

  DeadEndInfo(const DeadEndInfo& from);

  inline DeadEndInfo& operator=(const DeadEndInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeadEndInfo(DeadEndInfo&& from) noexcept
    : DeadEndInfo() {
    *this = ::std::move(from);
  }

  inline DeadEndInfo& operator=(DeadEndInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeadEndInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeadEndInfo* internal_default_instance() {
    return reinterpret_cast<const DeadEndInfo*>(
               &_DeadEndInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DeadEndInfo* other);
  friend void swap(DeadEndInfo& a, DeadEndInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeadEndInfo* New() const final {
    return CreateMaybeMessage<DeadEndInfo>(NULL);
  }

  DeadEndInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeadEndInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeadEndInfo& from);
  void MergeFrom(const DeadEndInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeadEndInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.PointENU target_point = 2;
  bool has_target_point() const;
  void clear_target_point();
  static const int kTargetPointFieldNumber = 2;
  private:
  const ::apollo::common::PointENU& _internal_target_point() const;
  public:
  const ::apollo::common::PointENU& target_point() const;
  ::apollo::common::PointENU* release_target_point();
  ::apollo::common::PointENU* mutable_target_point();
  void set_allocated_target_point(::apollo::common::PointENU* target_point);

  // optional .apollo.routing.DeadEndRoutingType dead_end_routing_type = 1;
  bool has_dead_end_routing_type() const;
  void clear_dead_end_routing_type();
  static const int kDeadEndRoutingTypeFieldNumber = 1;
  ::apollo::routing::DeadEndRoutingType dead_end_routing_type() const;
  void set_dead_end_routing_type(::apollo::routing::DeadEndRoutingType value);

  // @@protoc_insertion_point(class_scope:apollo.routing.DeadEndInfo)
 private:
  void set_has_dead_end_routing_type();
  void clear_has_dead_end_routing_type();
  void set_has_target_point();
  void clear_has_target_point();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::common::PointENU* target_point_;
  int dead_end_routing_type_;
  friend struct ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoutingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.routing.RoutingRequest) */ {
 public:
  RoutingRequest();
  virtual ~RoutingRequest();

  RoutingRequest(const RoutingRequest& from);

  inline RoutingRequest& operator=(const RoutingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoutingRequest(RoutingRequest&& from) noexcept
    : RoutingRequest() {
    *this = ::std::move(from);
  }

  inline RoutingRequest& operator=(RoutingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoutingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingRequest* internal_default_instance() {
    return reinterpret_cast<const RoutingRequest*>(
               &_RoutingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RoutingRequest* other);
  friend void swap(RoutingRequest& a, RoutingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoutingRequest* New() const final {
    return CreateMaybeMessage<RoutingRequest>(NULL);
  }

  RoutingRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoutingRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoutingRequest& from);
  void MergeFrom(const RoutingRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  int waypoint_size() const;
  void clear_waypoint();
  static const int kWaypointFieldNumber = 2;
  ::apollo::routing::LaneWaypoint* mutable_waypoint(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneWaypoint >*
      mutable_waypoint();
  const ::apollo::routing::LaneWaypoint& waypoint(int index) const;
  ::apollo::routing::LaneWaypoint* add_waypoint();
  const ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneWaypoint >&
      waypoint() const;

  // repeated .apollo.routing.LaneSegment blacklisted_lane = 3;
  int blacklisted_lane_size() const;
  void clear_blacklisted_lane();
  static const int kBlacklistedLaneFieldNumber = 3;
  ::apollo::routing::LaneSegment* mutable_blacklisted_lane(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneSegment >*
      mutable_blacklisted_lane();
  const ::apollo::routing::LaneSegment& blacklisted_lane(int index) const;
  ::apollo::routing::LaneSegment* add_blacklisted_lane();
  const ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneSegment >&
      blacklisted_lane() const;

  // repeated string blacklisted_road = 4;
  int blacklisted_road_size() const;
  void clear_blacklisted_road();
  static const int kBlacklistedRoadFieldNumber = 4;
  const ::std::string& blacklisted_road(int index) const;
  ::std::string* mutable_blacklisted_road(int index);
  void set_blacklisted_road(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_blacklisted_road(int index, ::std::string&& value);
  #endif
  void set_blacklisted_road(int index, const char* value);
  void set_blacklisted_road(int index, const char* value, size_t size);
  ::std::string* add_blacklisted_road();
  void add_blacklisted_road(const ::std::string& value);
  #if LANG_CXX11
  void add_blacklisted_road(::std::string&& value);
  #endif
  void add_blacklisted_road(const char* value);
  void add_blacklisted_road(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& blacklisted_road() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_blacklisted_road();

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::apollo::common::Header& _internal_header() const;
  public:
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.hdmap.ParkingSpace parking_space = 6 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_parking_space() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_parking_space();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kParkingSpaceFieldNumber = 6;
  private:
  const ::apollo::hdmap::ParkingSpace& _internal_parking_space() const;
  public:
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::apollo::hdmap::ParkingSpace& parking_space() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::hdmap::ParkingSpace* release_parking_space();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::apollo::hdmap::ParkingSpace* mutable_parking_space();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_parking_space(::apollo::hdmap::ParkingSpace* parking_space);

  // optional .apollo.routing.ParkingInfo parking_info = 7;
  bool has_parking_info() const;
  void clear_parking_info();
  static const int kParkingInfoFieldNumber = 7;
  private:
  const ::apollo::routing::ParkingInfo& _internal_parking_info() const;
  public:
  const ::apollo::routing::ParkingInfo& parking_info() const;
  ::apollo::routing::ParkingInfo* release_parking_info();
  ::apollo::routing::ParkingInfo* mutable_parking_info();
  void set_allocated_parking_info(::apollo::routing::ParkingInfo* parking_info);

  // optional .apollo.routing.DeadEndInfo dead_end_info = 8;
  bool has_dead_end_info() const;
  void clear_dead_end_info();
  static const int kDeadEndInfoFieldNumber = 8;
  private:
  const ::apollo::routing::DeadEndInfo& _internal_dead_end_info() const;
  public:
  const ::apollo::routing::DeadEndInfo& dead_end_info() const;
  ::apollo::routing::DeadEndInfo* release_dead_end_info();
  ::apollo::routing::DeadEndInfo* mutable_dead_end_info();
  void set_allocated_dead_end_info(::apollo::routing::DeadEndInfo* dead_end_info);

  // optional bool broadcast = 5 [default = true];
  bool has_broadcast() const;
  void clear_broadcast();
  static const int kBroadcastFieldNumber = 5;
  bool broadcast() const;
  void set_broadcast(bool value);

  // @@protoc_insertion_point(class_scope:apollo.routing.RoutingRequest)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_broadcast();
  void clear_has_broadcast();
  void set_has_parking_space();
  void clear_has_parking_space();
  void set_has_parking_info();
  void clear_has_parking_info();
  void set_has_dead_end_info();
  void clear_has_dead_end_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneWaypoint > waypoint_;
  ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneSegment > blacklisted_lane_;
  ::google::protobuf::RepeatedPtrField< ::std::string> blacklisted_road_;
  ::apollo::common::Header* header_;
  ::apollo::hdmap::ParkingSpace* parking_space_;
  ::apollo::routing::ParkingInfo* parking_info_;
  ::apollo::routing::DeadEndInfo* dead_end_info_;
  bool broadcast_;
  friend struct ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Measurement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.routing.Measurement) */ {
 public:
  Measurement();
  virtual ~Measurement();

  Measurement(const Measurement& from);

  inline Measurement& operator=(const Measurement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Measurement(Measurement&& from) noexcept
    : Measurement() {
    *this = ::std::move(from);
  }

  inline Measurement& operator=(Measurement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Measurement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Measurement* internal_default_instance() {
    return reinterpret_cast<const Measurement*>(
               &_Measurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Measurement* other);
  friend void swap(Measurement& a, Measurement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Measurement* New() const final {
    return CreateMaybeMessage<Measurement>(NULL);
  }

  Measurement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Measurement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Measurement& from);
  void MergeFrom(const Measurement& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Measurement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double distance = 1;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 1;
  double distance() const;
  void set_distance(double value);

  // @@protoc_insertion_point(class_scope:apollo.routing.Measurement)
 private:
  void set_has_distance();
  void clear_has_distance();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double distance_;
  friend struct ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Passage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.routing.Passage) */ {
 public:
  Passage();
  virtual ~Passage();

  Passage(const Passage& from);

  inline Passage& operator=(const Passage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Passage(Passage&& from) noexcept
    : Passage() {
    *this = ::std::move(from);
  }

  inline Passage& operator=(Passage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Passage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Passage* internal_default_instance() {
    return reinterpret_cast<const Passage*>(
               &_Passage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Passage* other);
  friend void swap(Passage& a, Passage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Passage* New() const final {
    return CreateMaybeMessage<Passage>(NULL);
  }

  Passage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Passage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Passage& from);
  void MergeFrom(const Passage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Passage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.routing.LaneSegment segment = 1;
  int segment_size() const;
  void clear_segment();
  static const int kSegmentFieldNumber = 1;
  ::apollo::routing::LaneSegment* mutable_segment(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneSegment >*
      mutable_segment();
  const ::apollo::routing::LaneSegment& segment(int index) const;
  ::apollo::routing::LaneSegment* add_segment();
  const ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneSegment >&
      segment() const;

  // optional bool can_exit = 2;
  bool has_can_exit() const;
  void clear_can_exit();
  static const int kCanExitFieldNumber = 2;
  bool can_exit() const;
  void set_can_exit(bool value);

  // optional .apollo.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
  bool has_change_lane_type() const;
  void clear_change_lane_type();
  static const int kChangeLaneTypeFieldNumber = 3;
  ::apollo::routing::ChangeLaneType change_lane_type() const;
  void set_change_lane_type(::apollo::routing::ChangeLaneType value);

  // @@protoc_insertion_point(class_scope:apollo.routing.Passage)
 private:
  void set_has_can_exit();
  void clear_has_can_exit();
  void set_has_change_lane_type();
  void clear_has_change_lane_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneSegment > segment_;
  bool can_exit_;
  int change_lane_type_;
  friend struct ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoadSegment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.routing.RoadSegment) */ {
 public:
  RoadSegment();
  virtual ~RoadSegment();

  RoadSegment(const RoadSegment& from);

  inline RoadSegment& operator=(const RoadSegment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoadSegment(RoadSegment&& from) noexcept
    : RoadSegment() {
    *this = ::std::move(from);
  }

  inline RoadSegment& operator=(RoadSegment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoadSegment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoadSegment* internal_default_instance() {
    return reinterpret_cast<const RoadSegment*>(
               &_RoadSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(RoadSegment* other);
  friend void swap(RoadSegment& a, RoadSegment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoadSegment* New() const final {
    return CreateMaybeMessage<RoadSegment>(NULL);
  }

  RoadSegment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoadSegment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoadSegment& from);
  void MergeFrom(const RoadSegment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadSegment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.routing.Passage passage = 2;
  int passage_size() const;
  void clear_passage();
  static const int kPassageFieldNumber = 2;
  ::apollo::routing::Passage* mutable_passage(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::routing::Passage >*
      mutable_passage();
  const ::apollo::routing::Passage& passage(int index) const;
  ::apollo::routing::Passage* add_passage();
  const ::google::protobuf::RepeatedPtrField< ::apollo::routing::Passage >&
      passage() const;

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:apollo.routing.RoadSegment)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::routing::Passage > passage_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  friend struct ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoutingResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.routing.RoutingResponse) */ {
 public:
  RoutingResponse();
  virtual ~RoutingResponse();

  RoutingResponse(const RoutingResponse& from);

  inline RoutingResponse& operator=(const RoutingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoutingResponse(RoutingResponse&& from) noexcept
    : RoutingResponse() {
    *this = ::std::move(from);
  }

  inline RoutingResponse& operator=(RoutingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoutingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingResponse* internal_default_instance() {
    return reinterpret_cast<const RoutingResponse*>(
               &_RoutingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(RoutingResponse* other);
  friend void swap(RoutingResponse& a, RoutingResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoutingResponse* New() const final {
    return CreateMaybeMessage<RoutingResponse>(NULL);
  }

  RoutingResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoutingResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoutingResponse& from);
  void MergeFrom(const RoutingResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.routing.RoadSegment road = 2;
  int road_size() const;
  void clear_road();
  static const int kRoadFieldNumber = 2;
  ::apollo::routing::RoadSegment* mutable_road(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::routing::RoadSegment >*
      mutable_road();
  const ::apollo::routing::RoadSegment& road(int index) const;
  ::apollo::routing::RoadSegment* add_road();
  const ::google::protobuf::RepeatedPtrField< ::apollo::routing::RoadSegment >&
      road() const;

  // optional bytes map_version = 5;
  bool has_map_version() const;
  void clear_map_version();
  static const int kMapVersionFieldNumber = 5;
  const ::std::string& map_version() const;
  void set_map_version(const ::std::string& value);
  #if LANG_CXX11
  void set_map_version(::std::string&& value);
  #endif
  void set_map_version(const char* value);
  void set_map_version(const void* value, size_t size);
  ::std::string* mutable_map_version();
  ::std::string* release_map_version();
  void set_allocated_map_version(::std::string* map_version);

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::apollo::common::Header& _internal_header() const;
  public:
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.routing.Measurement measurement = 3;
  bool has_measurement() const;
  void clear_measurement();
  static const int kMeasurementFieldNumber = 3;
  private:
  const ::apollo::routing::Measurement& _internal_measurement() const;
  public:
  const ::apollo::routing::Measurement& measurement() const;
  ::apollo::routing::Measurement* release_measurement();
  ::apollo::routing::Measurement* mutable_measurement();
  void set_allocated_measurement(::apollo::routing::Measurement* measurement);

  // optional .apollo.routing.RoutingRequest routing_request = 4;
  bool has_routing_request() const;
  void clear_routing_request();
  static const int kRoutingRequestFieldNumber = 4;
  private:
  const ::apollo::routing::RoutingRequest& _internal_routing_request() const;
  public:
  const ::apollo::routing::RoutingRequest& routing_request() const;
  ::apollo::routing::RoutingRequest* release_routing_request();
  ::apollo::routing::RoutingRequest* mutable_routing_request();
  void set_allocated_routing_request(::apollo::routing::RoutingRequest* routing_request);

  // optional .apollo.common.StatusPb status = 6;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  private:
  const ::apollo::common::StatusPb& _internal_status() const;
  public:
  const ::apollo::common::StatusPb& status() const;
  ::apollo::common::StatusPb* release_status();
  ::apollo::common::StatusPb* mutable_status();
  void set_allocated_status(::apollo::common::StatusPb* status);

  // @@protoc_insertion_point(class_scope:apollo.routing.RoutingResponse)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_measurement();
  void clear_has_measurement();
  void set_has_routing_request();
  void clear_has_routing_request();
  void set_has_map_version();
  void clear_has_map_version();
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::routing::RoadSegment > road_;
  ::google::protobuf::internal::ArenaStringPtr map_version_;
  ::apollo::common::Header* header_;
  ::apollo::routing::Measurement* measurement_;
  ::apollo::routing::RoutingRequest* routing_request_;
  ::apollo::common::StatusPb* status_;
  friend struct ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaneWaypoint

// optional string id = 1;
inline bool LaneWaypoint::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneWaypoint::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneWaypoint::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneWaypoint::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& LaneWaypoint::id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.LaneWaypoint.id)
  return id_.GetNoArena();
}
inline void LaneWaypoint::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.LaneWaypoint.id)
}
#if LANG_CXX11
inline void LaneWaypoint::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.routing.LaneWaypoint.id)
}
#endif
inline void LaneWaypoint::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.LaneWaypoint.id)
}
inline void LaneWaypoint::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.LaneWaypoint.id)
}
inline ::std::string* LaneWaypoint::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.LaneWaypoint.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaneWaypoint::release_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.LaneWaypoint.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaneWaypoint::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.LaneWaypoint.id)
}

// optional double s = 2;
inline bool LaneWaypoint::has_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneWaypoint::set_has_s() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneWaypoint::clear_has_s() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneWaypoint::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double LaneWaypoint::s() const {
  // @@protoc_insertion_point(field_get:apollo.routing.LaneWaypoint.s)
  return s_;
}
inline void LaneWaypoint::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.LaneWaypoint.s)
}

// optional .apollo.common.PointENU pose = 3;
inline bool LaneWaypoint::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneWaypoint::set_has_pose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneWaypoint::clear_has_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::common::PointENU& LaneWaypoint::_internal_pose() const {
  return *pose_;
}
inline const ::apollo::common::PointENU& LaneWaypoint::pose() const {
  const ::apollo::common::PointENU* p = pose_;
  // @@protoc_insertion_point(field_get:apollo.routing.LaneWaypoint.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::PointENU*>(
      &::apollo::common::_PointENU_default_instance_);
}
inline ::apollo::common::PointENU* LaneWaypoint::release_pose() {
  // @@protoc_insertion_point(field_release:apollo.routing.LaneWaypoint.pose)
  clear_has_pose();
  ::apollo::common::PointENU* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::apollo::common::PointENU* LaneWaypoint::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::PointENU>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.LaneWaypoint.pose)
  return pose_;
}
inline void LaneWaypoint::set_allocated_pose(::apollo::common::PointENU* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    set_has_pose();
  } else {
    clear_has_pose();
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.LaneWaypoint.pose)
}

// optional double heading = 4;
inline bool LaneWaypoint::has_heading() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneWaypoint::set_has_heading() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneWaypoint::clear_has_heading() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneWaypoint::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double LaneWaypoint::heading() const {
  // @@protoc_insertion_point(field_get:apollo.routing.LaneWaypoint.heading)
  return heading_;
}
inline void LaneWaypoint::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.LaneWaypoint.heading)
}

// -------------------------------------------------------------------

// LaneSegment

// optional string id = 1;
inline bool LaneSegment::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneSegment::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneSegment::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneSegment::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& LaneSegment::id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.LaneSegment.id)
  return id_.GetNoArena();
}
inline void LaneSegment::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.LaneSegment.id)
}
#if LANG_CXX11
inline void LaneSegment::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.routing.LaneSegment.id)
}
#endif
inline void LaneSegment::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.LaneSegment.id)
}
inline void LaneSegment::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.LaneSegment.id)
}
inline ::std::string* LaneSegment::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.LaneSegment.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaneSegment::release_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.LaneSegment.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaneSegment::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.LaneSegment.id)
}

// optional double start_s = 2;
inline bool LaneSegment::has_start_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneSegment::set_has_start_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneSegment::clear_has_start_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneSegment::clear_start_s() {
  start_s_ = 0;
  clear_has_start_s();
}
inline double LaneSegment::start_s() const {
  // @@protoc_insertion_point(field_get:apollo.routing.LaneSegment.start_s)
  return start_s_;
}
inline void LaneSegment::set_start_s(double value) {
  set_has_start_s();
  start_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.LaneSegment.start_s)
}

// optional double end_s = 3;
inline bool LaneSegment::has_end_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneSegment::set_has_end_s() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneSegment::clear_has_end_s() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneSegment::clear_end_s() {
  end_s_ = 0;
  clear_has_end_s();
}
inline double LaneSegment::end_s() const {
  // @@protoc_insertion_point(field_get:apollo.routing.LaneSegment.end_s)
  return end_s_;
}
inline void LaneSegment::set_end_s(double value) {
  set_has_end_s();
  end_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.LaneSegment.end_s)
}

// -------------------------------------------------------------------

// ParkingInfo

// optional string parking_space_id = 1;
inline bool ParkingInfo::has_parking_space_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParkingInfo::set_has_parking_space_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParkingInfo::clear_has_parking_space_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParkingInfo::clear_parking_space_id() {
  parking_space_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parking_space_id();
}
inline const ::std::string& ParkingInfo::parking_space_id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.ParkingInfo.parking_space_id)
  return parking_space_id_.GetNoArena();
}
inline void ParkingInfo::set_parking_space_id(const ::std::string& value) {
  set_has_parking_space_id();
  parking_space_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.ParkingInfo.parking_space_id)
}
#if LANG_CXX11
inline void ParkingInfo::set_parking_space_id(::std::string&& value) {
  set_has_parking_space_id();
  parking_space_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.routing.ParkingInfo.parking_space_id)
}
#endif
inline void ParkingInfo::set_parking_space_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parking_space_id();
  parking_space_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.ParkingInfo.parking_space_id)
}
inline void ParkingInfo::set_parking_space_id(const char* value, size_t size) {
  set_has_parking_space_id();
  parking_space_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.ParkingInfo.parking_space_id)
}
inline ::std::string* ParkingInfo::mutable_parking_space_id() {
  set_has_parking_space_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.ParkingInfo.parking_space_id)
  return parking_space_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParkingInfo::release_parking_space_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.ParkingInfo.parking_space_id)
  if (!has_parking_space_id()) {
    return NULL;
  }
  clear_has_parking_space_id();
  return parking_space_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParkingInfo::set_allocated_parking_space_id(::std::string* parking_space_id) {
  if (parking_space_id != NULL) {
    set_has_parking_space_id();
  } else {
    clear_has_parking_space_id();
  }
  parking_space_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parking_space_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.ParkingInfo.parking_space_id)
}

// optional .apollo.common.PointENU parking_point = 2;
inline bool ParkingInfo::has_parking_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParkingInfo::set_has_parking_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParkingInfo::clear_has_parking_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::common::PointENU& ParkingInfo::_internal_parking_point() const {
  return *parking_point_;
}
inline const ::apollo::common::PointENU& ParkingInfo::parking_point() const {
  const ::apollo::common::PointENU* p = parking_point_;
  // @@protoc_insertion_point(field_get:apollo.routing.ParkingInfo.parking_point)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::PointENU*>(
      &::apollo::common::_PointENU_default_instance_);
}
inline ::apollo::common::PointENU* ParkingInfo::release_parking_point() {
  // @@protoc_insertion_point(field_release:apollo.routing.ParkingInfo.parking_point)
  clear_has_parking_point();
  ::apollo::common::PointENU* temp = parking_point_;
  parking_point_ = NULL;
  return temp;
}
inline ::apollo::common::PointENU* ParkingInfo::mutable_parking_point() {
  set_has_parking_point();
  if (parking_point_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::PointENU>(GetArenaNoVirtual());
    parking_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.ParkingInfo.parking_point)
  return parking_point_;
}
inline void ParkingInfo::set_allocated_parking_point(::apollo::common::PointENU* parking_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parking_point_);
  }
  if (parking_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parking_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parking_point, submessage_arena);
    }
    set_has_parking_point();
  } else {
    clear_has_parking_point();
  }
  parking_point_ = parking_point;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.ParkingInfo.parking_point)
}

// optional .apollo.routing.ParkingSpaceType parking_space_type = 3;
inline bool ParkingInfo::has_parking_space_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParkingInfo::set_has_parking_space_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParkingInfo::clear_has_parking_space_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParkingInfo::clear_parking_space_type() {
  parking_space_type_ = 0;
  clear_has_parking_space_type();
}
inline ::apollo::routing::ParkingSpaceType ParkingInfo::parking_space_type() const {
  // @@protoc_insertion_point(field_get:apollo.routing.ParkingInfo.parking_space_type)
  return static_cast< ::apollo::routing::ParkingSpaceType >(parking_space_type_);
}
inline void ParkingInfo::set_parking_space_type(::apollo::routing::ParkingSpaceType value) {
  assert(::apollo::routing::ParkingSpaceType_IsValid(value));
  set_has_parking_space_type();
  parking_space_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.ParkingInfo.parking_space_type)
}

// optional .apollo.hdmap.Polygon corner_point = 4;
inline bool ParkingInfo::has_corner_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParkingInfo::set_has_corner_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParkingInfo::clear_has_corner_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::hdmap::Polygon& ParkingInfo::_internal_corner_point() const {
  return *corner_point_;
}
inline const ::apollo::hdmap::Polygon& ParkingInfo::corner_point() const {
  const ::apollo::hdmap::Polygon* p = corner_point_;
  // @@protoc_insertion_point(field_get:apollo.routing.ParkingInfo.corner_point)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::hdmap::Polygon*>(
      &::apollo::hdmap::_Polygon_default_instance_);
}
inline ::apollo::hdmap::Polygon* ParkingInfo::release_corner_point() {
  // @@protoc_insertion_point(field_release:apollo.routing.ParkingInfo.corner_point)
  clear_has_corner_point();
  ::apollo::hdmap::Polygon* temp = corner_point_;
  corner_point_ = NULL;
  return temp;
}
inline ::apollo::hdmap::Polygon* ParkingInfo::mutable_corner_point() {
  set_has_corner_point();
  if (corner_point_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::Polygon>(GetArenaNoVirtual());
    corner_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.ParkingInfo.corner_point)
  return corner_point_;
}
inline void ParkingInfo::set_allocated_corner_point(::apollo::hdmap::Polygon* corner_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(corner_point_);
  }
  if (corner_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      corner_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, corner_point, submessage_arena);
    }
    set_has_corner_point();
  } else {
    clear_has_corner_point();
  }
  corner_point_ = corner_point;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.ParkingInfo.corner_point)
}

// -------------------------------------------------------------------

// DeadEndInfo

// optional .apollo.routing.DeadEndRoutingType dead_end_routing_type = 1;
inline bool DeadEndInfo::has_dead_end_routing_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeadEndInfo::set_has_dead_end_routing_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeadEndInfo::clear_has_dead_end_routing_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeadEndInfo::clear_dead_end_routing_type() {
  dead_end_routing_type_ = 0;
  clear_has_dead_end_routing_type();
}
inline ::apollo::routing::DeadEndRoutingType DeadEndInfo::dead_end_routing_type() const {
  // @@protoc_insertion_point(field_get:apollo.routing.DeadEndInfo.dead_end_routing_type)
  return static_cast< ::apollo::routing::DeadEndRoutingType >(dead_end_routing_type_);
}
inline void DeadEndInfo::set_dead_end_routing_type(::apollo::routing::DeadEndRoutingType value) {
  assert(::apollo::routing::DeadEndRoutingType_IsValid(value));
  set_has_dead_end_routing_type();
  dead_end_routing_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.DeadEndInfo.dead_end_routing_type)
}

// optional .apollo.common.PointENU target_point = 2;
inline bool DeadEndInfo::has_target_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeadEndInfo::set_has_target_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeadEndInfo::clear_has_target_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::common::PointENU& DeadEndInfo::_internal_target_point() const {
  return *target_point_;
}
inline const ::apollo::common::PointENU& DeadEndInfo::target_point() const {
  const ::apollo::common::PointENU* p = target_point_;
  // @@protoc_insertion_point(field_get:apollo.routing.DeadEndInfo.target_point)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::PointENU*>(
      &::apollo::common::_PointENU_default_instance_);
}
inline ::apollo::common::PointENU* DeadEndInfo::release_target_point() {
  // @@protoc_insertion_point(field_release:apollo.routing.DeadEndInfo.target_point)
  clear_has_target_point();
  ::apollo::common::PointENU* temp = target_point_;
  target_point_ = NULL;
  return temp;
}
inline ::apollo::common::PointENU* DeadEndInfo::mutable_target_point() {
  set_has_target_point();
  if (target_point_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::PointENU>(GetArenaNoVirtual());
    target_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.DeadEndInfo.target_point)
  return target_point_;
}
inline void DeadEndInfo::set_allocated_target_point(::apollo::common::PointENU* target_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(target_point_);
  }
  if (target_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target_point, submessage_arena);
    }
    set_has_target_point();
  } else {
    clear_has_target_point();
  }
  target_point_ = target_point;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.DeadEndInfo.target_point)
}

// -------------------------------------------------------------------

// RoutingRequest

// optional .apollo.common.Header header = 1;
inline bool RoutingRequest::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoutingRequest::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoutingRequest::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::common::Header& RoutingRequest::_internal_header() const {
  return *header_;
}
inline const ::apollo::common::Header& RoutingRequest::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* RoutingRequest::release_header() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingRequest.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::common::Header* RoutingRequest::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingRequest.header)
  return header_;
}
inline void RoutingRequest::set_allocated_header(::apollo::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingRequest.header)
}

// repeated .apollo.routing.LaneWaypoint waypoint = 2;
inline int RoutingRequest::waypoint_size() const {
  return waypoint_.size();
}
inline void RoutingRequest::clear_waypoint() {
  waypoint_.Clear();
}
inline ::apollo::routing::LaneWaypoint* RoutingRequest::mutable_waypoint(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingRequest.waypoint)
  return waypoint_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneWaypoint >*
RoutingRequest::mutable_waypoint() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.RoutingRequest.waypoint)
  return &waypoint_;
}
inline const ::apollo::routing::LaneWaypoint& RoutingRequest::waypoint(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingRequest.waypoint)
  return waypoint_.Get(index);
}
inline ::apollo::routing::LaneWaypoint* RoutingRequest::add_waypoint() {
  // @@protoc_insertion_point(field_add:apollo.routing.RoutingRequest.waypoint)
  return waypoint_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneWaypoint >&
RoutingRequest::waypoint() const {
  // @@protoc_insertion_point(field_list:apollo.routing.RoutingRequest.waypoint)
  return waypoint_;
}

// repeated .apollo.routing.LaneSegment blacklisted_lane = 3;
inline int RoutingRequest::blacklisted_lane_size() const {
  return blacklisted_lane_.size();
}
inline void RoutingRequest::clear_blacklisted_lane() {
  blacklisted_lane_.Clear();
}
inline ::apollo::routing::LaneSegment* RoutingRequest::mutable_blacklisted_lane(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingRequest.blacklisted_lane)
  return blacklisted_lane_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneSegment >*
RoutingRequest::mutable_blacklisted_lane() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.RoutingRequest.blacklisted_lane)
  return &blacklisted_lane_;
}
inline const ::apollo::routing::LaneSegment& RoutingRequest::blacklisted_lane(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingRequest.blacklisted_lane)
  return blacklisted_lane_.Get(index);
}
inline ::apollo::routing::LaneSegment* RoutingRequest::add_blacklisted_lane() {
  // @@protoc_insertion_point(field_add:apollo.routing.RoutingRequest.blacklisted_lane)
  return blacklisted_lane_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneSegment >&
RoutingRequest::blacklisted_lane() const {
  // @@protoc_insertion_point(field_list:apollo.routing.RoutingRequest.blacklisted_lane)
  return blacklisted_lane_;
}

// repeated string blacklisted_road = 4;
inline int RoutingRequest::blacklisted_road_size() const {
  return blacklisted_road_.size();
}
inline void RoutingRequest::clear_blacklisted_road() {
  blacklisted_road_.Clear();
}
inline const ::std::string& RoutingRequest::blacklisted_road(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingRequest.blacklisted_road)
  return blacklisted_road_.Get(index);
}
inline ::std::string* RoutingRequest::mutable_blacklisted_road(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingRequest.blacklisted_road)
  return blacklisted_road_.Mutable(index);
}
inline void RoutingRequest::set_blacklisted_road(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingRequest.blacklisted_road)
  blacklisted_road_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RoutingRequest::set_blacklisted_road(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingRequest.blacklisted_road)
  blacklisted_road_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RoutingRequest::set_blacklisted_road(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  blacklisted_road_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.routing.RoutingRequest.blacklisted_road)
}
inline void RoutingRequest::set_blacklisted_road(int index, const char* value, size_t size) {
  blacklisted_road_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.RoutingRequest.blacklisted_road)
}
inline ::std::string* RoutingRequest::add_blacklisted_road() {
  // @@protoc_insertion_point(field_add_mutable:apollo.routing.RoutingRequest.blacklisted_road)
  return blacklisted_road_.Add();
}
inline void RoutingRequest::add_blacklisted_road(const ::std::string& value) {
  blacklisted_road_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.routing.RoutingRequest.blacklisted_road)
}
#if LANG_CXX11
inline void RoutingRequest::add_blacklisted_road(::std::string&& value) {
  blacklisted_road_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.routing.RoutingRequest.blacklisted_road)
}
#endif
inline void RoutingRequest::add_blacklisted_road(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  blacklisted_road_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.routing.RoutingRequest.blacklisted_road)
}
inline void RoutingRequest::add_blacklisted_road(const char* value, size_t size) {
  blacklisted_road_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.routing.RoutingRequest.blacklisted_road)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RoutingRequest::blacklisted_road() const {
  // @@protoc_insertion_point(field_list:apollo.routing.RoutingRequest.blacklisted_road)
  return blacklisted_road_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RoutingRequest::mutable_blacklisted_road() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.RoutingRequest.blacklisted_road)
  return &blacklisted_road_;
}

// optional bool broadcast = 5 [default = true];
inline bool RoutingRequest::has_broadcast() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoutingRequest::set_has_broadcast() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoutingRequest::clear_has_broadcast() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoutingRequest::clear_broadcast() {
  broadcast_ = true;
  clear_has_broadcast();
}
inline bool RoutingRequest::broadcast() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingRequest.broadcast)
  return broadcast_;
}
inline void RoutingRequest::set_broadcast(bool value) {
  set_has_broadcast();
  broadcast_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingRequest.broadcast)
}

// optional .apollo.hdmap.ParkingSpace parking_space = 6 [deprecated = true];
inline bool RoutingRequest::has_parking_space() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoutingRequest::set_has_parking_space() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoutingRequest::clear_has_parking_space() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::hdmap::ParkingSpace& RoutingRequest::_internal_parking_space() const {
  return *parking_space_;
}
inline const ::apollo::hdmap::ParkingSpace& RoutingRequest::parking_space() const {
  const ::apollo::hdmap::ParkingSpace* p = parking_space_;
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingRequest.parking_space)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::hdmap::ParkingSpace*>(
      &::apollo::hdmap::_ParkingSpace_default_instance_);
}
inline ::apollo::hdmap::ParkingSpace* RoutingRequest::release_parking_space() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingRequest.parking_space)
  clear_has_parking_space();
  ::apollo::hdmap::ParkingSpace* temp = parking_space_;
  parking_space_ = NULL;
  return temp;
}
inline ::apollo::hdmap::ParkingSpace* RoutingRequest::mutable_parking_space() {
  set_has_parking_space();
  if (parking_space_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::ParkingSpace>(GetArenaNoVirtual());
    parking_space_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingRequest.parking_space)
  return parking_space_;
}
inline void RoutingRequest::set_allocated_parking_space(::apollo::hdmap::ParkingSpace* parking_space) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parking_space_);
  }
  if (parking_space) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parking_space = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parking_space, submessage_arena);
    }
    set_has_parking_space();
  } else {
    clear_has_parking_space();
  }
  parking_space_ = parking_space;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingRequest.parking_space)
}

// optional .apollo.routing.ParkingInfo parking_info = 7;
inline bool RoutingRequest::has_parking_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoutingRequest::set_has_parking_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoutingRequest::clear_has_parking_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoutingRequest::clear_parking_info() {
  if (parking_info_ != NULL) parking_info_->Clear();
  clear_has_parking_info();
}
inline const ::apollo::routing::ParkingInfo& RoutingRequest::_internal_parking_info() const {
  return *parking_info_;
}
inline const ::apollo::routing::ParkingInfo& RoutingRequest::parking_info() const {
  const ::apollo::routing::ParkingInfo* p = parking_info_;
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingRequest.parking_info)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::routing::ParkingInfo*>(
      &::apollo::routing::_ParkingInfo_default_instance_);
}
inline ::apollo::routing::ParkingInfo* RoutingRequest::release_parking_info() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingRequest.parking_info)
  clear_has_parking_info();
  ::apollo::routing::ParkingInfo* temp = parking_info_;
  parking_info_ = NULL;
  return temp;
}
inline ::apollo::routing::ParkingInfo* RoutingRequest::mutable_parking_info() {
  set_has_parking_info();
  if (parking_info_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::routing::ParkingInfo>(GetArenaNoVirtual());
    parking_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingRequest.parking_info)
  return parking_info_;
}
inline void RoutingRequest::set_allocated_parking_info(::apollo::routing::ParkingInfo* parking_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parking_info_;
  }
  if (parking_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parking_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parking_info, submessage_arena);
    }
    set_has_parking_info();
  } else {
    clear_has_parking_info();
  }
  parking_info_ = parking_info;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingRequest.parking_info)
}

// optional .apollo.routing.DeadEndInfo dead_end_info = 8;
inline bool RoutingRequest::has_dead_end_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoutingRequest::set_has_dead_end_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoutingRequest::clear_has_dead_end_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoutingRequest::clear_dead_end_info() {
  if (dead_end_info_ != NULL) dead_end_info_->Clear();
  clear_has_dead_end_info();
}
inline const ::apollo::routing::DeadEndInfo& RoutingRequest::_internal_dead_end_info() const {
  return *dead_end_info_;
}
inline const ::apollo::routing::DeadEndInfo& RoutingRequest::dead_end_info() const {
  const ::apollo::routing::DeadEndInfo* p = dead_end_info_;
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingRequest.dead_end_info)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::routing::DeadEndInfo*>(
      &::apollo::routing::_DeadEndInfo_default_instance_);
}
inline ::apollo::routing::DeadEndInfo* RoutingRequest::release_dead_end_info() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingRequest.dead_end_info)
  clear_has_dead_end_info();
  ::apollo::routing::DeadEndInfo* temp = dead_end_info_;
  dead_end_info_ = NULL;
  return temp;
}
inline ::apollo::routing::DeadEndInfo* RoutingRequest::mutable_dead_end_info() {
  set_has_dead_end_info();
  if (dead_end_info_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::routing::DeadEndInfo>(GetArenaNoVirtual());
    dead_end_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingRequest.dead_end_info)
  return dead_end_info_;
}
inline void RoutingRequest::set_allocated_dead_end_info(::apollo::routing::DeadEndInfo* dead_end_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dead_end_info_;
  }
  if (dead_end_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dead_end_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dead_end_info, submessage_arena);
    }
    set_has_dead_end_info();
  } else {
    clear_has_dead_end_info();
  }
  dead_end_info_ = dead_end_info;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingRequest.dead_end_info)
}

// -------------------------------------------------------------------

// Measurement

// optional double distance = 1;
inline bool Measurement::has_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Measurement::set_has_distance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Measurement::clear_has_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Measurement::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline double Measurement::distance() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Measurement.distance)
  return distance_;
}
inline void Measurement::set_distance(double value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.Measurement.distance)
}

// -------------------------------------------------------------------

// Passage

// repeated .apollo.routing.LaneSegment segment = 1;
inline int Passage::segment_size() const {
  return segment_.size();
}
inline void Passage::clear_segment() {
  segment_.Clear();
}
inline ::apollo::routing::LaneSegment* Passage::mutable_segment(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.Passage.segment)
  return segment_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneSegment >*
Passage::mutable_segment() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.Passage.segment)
  return &segment_;
}
inline const ::apollo::routing::LaneSegment& Passage::segment(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.Passage.segment)
  return segment_.Get(index);
}
inline ::apollo::routing::LaneSegment* Passage::add_segment() {
  // @@protoc_insertion_point(field_add:apollo.routing.Passage.segment)
  return segment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::routing::LaneSegment >&
Passage::segment() const {
  // @@protoc_insertion_point(field_list:apollo.routing.Passage.segment)
  return segment_;
}

// optional bool can_exit = 2;
inline bool Passage::has_can_exit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Passage::set_has_can_exit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Passage::clear_has_can_exit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Passage::clear_can_exit() {
  can_exit_ = false;
  clear_has_can_exit();
}
inline bool Passage::can_exit() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Passage.can_exit)
  return can_exit_;
}
inline void Passage::set_can_exit(bool value) {
  set_has_can_exit();
  can_exit_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.Passage.can_exit)
}

// optional .apollo.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
inline bool Passage::has_change_lane_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Passage::set_has_change_lane_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Passage::clear_has_change_lane_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Passage::clear_change_lane_type() {
  change_lane_type_ = 0;
  clear_has_change_lane_type();
}
inline ::apollo::routing::ChangeLaneType Passage::change_lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.routing.Passage.change_lane_type)
  return static_cast< ::apollo::routing::ChangeLaneType >(change_lane_type_);
}
inline void Passage::set_change_lane_type(::apollo::routing::ChangeLaneType value) {
  assert(::apollo::routing::ChangeLaneType_IsValid(value));
  set_has_change_lane_type();
  change_lane_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.routing.Passage.change_lane_type)
}

// -------------------------------------------------------------------

// RoadSegment

// optional string id = 1;
inline bool RoadSegment::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoadSegment::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoadSegment::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoadSegment::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& RoadSegment::id() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoadSegment.id)
  return id_.GetNoArena();
}
inline void RoadSegment::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.RoadSegment.id)
}
#if LANG_CXX11
inline void RoadSegment::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.routing.RoadSegment.id)
}
#endif
inline void RoadSegment::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.RoadSegment.id)
}
inline void RoadSegment::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.RoadSegment.id)
}
inline ::std::string* RoadSegment::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoadSegment.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoadSegment::release_id() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoadSegment.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoadSegment::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoadSegment.id)
}

// repeated .apollo.routing.Passage passage = 2;
inline int RoadSegment::passage_size() const {
  return passage_.size();
}
inline void RoadSegment::clear_passage() {
  passage_.Clear();
}
inline ::apollo::routing::Passage* RoadSegment::mutable_passage(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoadSegment.passage)
  return passage_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::routing::Passage >*
RoadSegment::mutable_passage() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.RoadSegment.passage)
  return &passage_;
}
inline const ::apollo::routing::Passage& RoadSegment::passage(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoadSegment.passage)
  return passage_.Get(index);
}
inline ::apollo::routing::Passage* RoadSegment::add_passage() {
  // @@protoc_insertion_point(field_add:apollo.routing.RoadSegment.passage)
  return passage_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::routing::Passage >&
RoadSegment::passage() const {
  // @@protoc_insertion_point(field_list:apollo.routing.RoadSegment.passage)
  return passage_;
}

// -------------------------------------------------------------------

// RoutingResponse

// optional .apollo.common.Header header = 1;
inline bool RoutingResponse::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoutingResponse::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoutingResponse::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::common::Header& RoutingResponse::_internal_header() const {
  return *header_;
}
inline const ::apollo::common::Header& RoutingResponse::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* RoutingResponse::release_header() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingResponse.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::common::Header* RoutingResponse::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingResponse.header)
  return header_;
}
inline void RoutingResponse::set_allocated_header(::apollo::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingResponse.header)
}

// repeated .apollo.routing.RoadSegment road = 2;
inline int RoutingResponse::road_size() const {
  return road_.size();
}
inline void RoutingResponse::clear_road() {
  road_.Clear();
}
inline ::apollo::routing::RoadSegment* RoutingResponse::mutable_road(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingResponse.road)
  return road_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::routing::RoadSegment >*
RoutingResponse::mutable_road() {
  // @@protoc_insertion_point(field_mutable_list:apollo.routing.RoutingResponse.road)
  return &road_;
}
inline const ::apollo::routing::RoadSegment& RoutingResponse::road(int index) const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingResponse.road)
  return road_.Get(index);
}
inline ::apollo::routing::RoadSegment* RoutingResponse::add_road() {
  // @@protoc_insertion_point(field_add:apollo.routing.RoutingResponse.road)
  return road_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::routing::RoadSegment >&
RoutingResponse::road() const {
  // @@protoc_insertion_point(field_list:apollo.routing.RoutingResponse.road)
  return road_;
}

// optional .apollo.routing.Measurement measurement = 3;
inline bool RoutingResponse::has_measurement() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoutingResponse::set_has_measurement() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoutingResponse::clear_has_measurement() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoutingResponse::clear_measurement() {
  if (measurement_ != NULL) measurement_->Clear();
  clear_has_measurement();
}
inline const ::apollo::routing::Measurement& RoutingResponse::_internal_measurement() const {
  return *measurement_;
}
inline const ::apollo::routing::Measurement& RoutingResponse::measurement() const {
  const ::apollo::routing::Measurement* p = measurement_;
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingResponse.measurement)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::routing::Measurement*>(
      &::apollo::routing::_Measurement_default_instance_);
}
inline ::apollo::routing::Measurement* RoutingResponse::release_measurement() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingResponse.measurement)
  clear_has_measurement();
  ::apollo::routing::Measurement* temp = measurement_;
  measurement_ = NULL;
  return temp;
}
inline ::apollo::routing::Measurement* RoutingResponse::mutable_measurement() {
  set_has_measurement();
  if (measurement_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::routing::Measurement>(GetArenaNoVirtual());
    measurement_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingResponse.measurement)
  return measurement_;
}
inline void RoutingResponse::set_allocated_measurement(::apollo::routing::Measurement* measurement) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete measurement_;
  }
  if (measurement) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      measurement = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, measurement, submessage_arena);
    }
    set_has_measurement();
  } else {
    clear_has_measurement();
  }
  measurement_ = measurement;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingResponse.measurement)
}

// optional .apollo.routing.RoutingRequest routing_request = 4;
inline bool RoutingResponse::has_routing_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoutingResponse::set_has_routing_request() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoutingResponse::clear_has_routing_request() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoutingResponse::clear_routing_request() {
  if (routing_request_ != NULL) routing_request_->Clear();
  clear_has_routing_request();
}
inline const ::apollo::routing::RoutingRequest& RoutingResponse::_internal_routing_request() const {
  return *routing_request_;
}
inline const ::apollo::routing::RoutingRequest& RoutingResponse::routing_request() const {
  const ::apollo::routing::RoutingRequest* p = routing_request_;
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingResponse.routing_request)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::routing::RoutingRequest*>(
      &::apollo::routing::_RoutingRequest_default_instance_);
}
inline ::apollo::routing::RoutingRequest* RoutingResponse::release_routing_request() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingResponse.routing_request)
  clear_has_routing_request();
  ::apollo::routing::RoutingRequest* temp = routing_request_;
  routing_request_ = NULL;
  return temp;
}
inline ::apollo::routing::RoutingRequest* RoutingResponse::mutable_routing_request() {
  set_has_routing_request();
  if (routing_request_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::routing::RoutingRequest>(GetArenaNoVirtual());
    routing_request_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingResponse.routing_request)
  return routing_request_;
}
inline void RoutingResponse::set_allocated_routing_request(::apollo::routing::RoutingRequest* routing_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete routing_request_;
  }
  if (routing_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      routing_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, routing_request, submessage_arena);
    }
    set_has_routing_request();
  } else {
    clear_has_routing_request();
  }
  routing_request_ = routing_request;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingResponse.routing_request)
}

// optional bytes map_version = 5;
inline bool RoutingResponse::has_map_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoutingResponse::set_has_map_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoutingResponse::clear_has_map_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoutingResponse::clear_map_version() {
  map_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_version();
}
inline const ::std::string& RoutingResponse::map_version() const {
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingResponse.map_version)
  return map_version_.GetNoArena();
}
inline void RoutingResponse::set_map_version(const ::std::string& value) {
  set_has_map_version();
  map_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.routing.RoutingResponse.map_version)
}
#if LANG_CXX11
inline void RoutingResponse::set_map_version(::std::string&& value) {
  set_has_map_version();
  map_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.routing.RoutingResponse.map_version)
}
#endif
inline void RoutingResponse::set_map_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map_version();
  map_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.routing.RoutingResponse.map_version)
}
inline void RoutingResponse::set_map_version(const void* value, size_t size) {
  set_has_map_version();
  map_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.routing.RoutingResponse.map_version)
}
inline ::std::string* RoutingResponse::mutable_map_version() {
  set_has_map_version();
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingResponse.map_version)
  return map_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoutingResponse::release_map_version() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingResponse.map_version)
  if (!has_map_version()) {
    return NULL;
  }
  clear_has_map_version();
  return map_version_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoutingResponse::set_allocated_map_version(::std::string* map_version) {
  if (map_version != NULL) {
    set_has_map_version();
  } else {
    clear_has_map_version();
  }
  map_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_version);
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingResponse.map_version)
}

// optional .apollo.common.StatusPb status = 6;
inline bool RoutingResponse::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoutingResponse::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoutingResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::common::StatusPb& RoutingResponse::_internal_status() const {
  return *status_;
}
inline const ::apollo::common::StatusPb& RoutingResponse::status() const {
  const ::apollo::common::StatusPb* p = status_;
  // @@protoc_insertion_point(field_get:apollo.routing.RoutingResponse.status)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::StatusPb*>(
      &::apollo::common::_StatusPb_default_instance_);
}
inline ::apollo::common::StatusPb* RoutingResponse::release_status() {
  // @@protoc_insertion_point(field_release:apollo.routing.RoutingResponse.status)
  clear_has_status();
  ::apollo::common::StatusPb* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::apollo::common::StatusPb* RoutingResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::StatusPb>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.routing.RoutingResponse.status)
  return status_;
}
inline void RoutingResponse::set_allocated_status(::apollo::common::StatusPb* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
  } else {
    clear_has_status();
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:apollo.routing.RoutingResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace routing
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::routing::ParkingSpaceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::routing::ParkingSpaceType>() {
  return ::apollo::routing::ParkingSpaceType_descriptor();
}
template <> struct is_proto_enum< ::apollo::routing::DeadEndRoutingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::routing::DeadEndRoutingType>() {
  return ::apollo::routing::DeadEndRoutingType_descriptor();
}
template <> struct is_proto_enum< ::apollo::routing::ChangeLaneType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::routing::ChangeLaneType>() {
  return ::apollo::routing::ChangeLaneType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2frouting_2fproto_2frouting_2eproto
