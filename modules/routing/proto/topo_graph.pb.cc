// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/routing/proto/topo_graph.proto

#include "modules/routing/proto/topo_graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Curve;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto
namespace protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CurvePoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Edge;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CurveRange;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Node;
}  // namespace protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto
namespace apollo {
namespace routing {
class CurvePointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CurvePoint>
      _instance;
} _CurvePoint_default_instance_;
class CurveRangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CurveRange>
      _instance;
} _CurveRange_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Node>
      _instance;
} _Node_default_instance_;
class EdgeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Edge>
      _instance;
} _Edge_default_instance_;
class GraphDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Graph>
      _instance;
} _Graph_default_instance_;
}  // namespace routing
}  // namespace apollo
namespace protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto {
static void InitDefaultsCurvePoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_CurvePoint_default_instance_;
    new (ptr) ::apollo::routing::CurvePoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::CurvePoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CurvePoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCurvePoint}, {}};

static void InitDefaultsCurveRange() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_CurveRange_default_instance_;
    new (ptr) ::apollo::routing::CurveRange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::CurveRange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CurveRange =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCurveRange}, {
      &protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::scc_info_CurvePoint.base,}};

static void InitDefaultsNode() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_Node_default_instance_;
    new (ptr) ::apollo::routing::Node();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::Node::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Node =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsNode}, {
      &protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::scc_info_CurveRange.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::scc_info_Curve.base,}};

static void InitDefaultsEdge() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_Edge_default_instance_;
    new (ptr) ::apollo::routing::Edge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::Edge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Edge =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEdge}, {}};

static void InitDefaultsGraph() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_Graph_default_instance_;
    new (ptr) ::apollo::routing::Graph();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::Graph::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Graph =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGraph}, {
      &protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::scc_info_Node.base,
      &protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::scc_info_Edge.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CurvePoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CurveRange.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Node.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Edge.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Graph.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::CurvePoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::CurvePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::CurvePoint, s_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::CurveRange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::CurveRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::CurveRange, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::CurveRange, end_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Node, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Node, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Node, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Node, left_out_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Node, right_out_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Node, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Node, central_curve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Node, is_virtual_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Node, road_id_),
  0,
  3,
  ~0u,
  ~0u,
  4,
  2,
  5,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Edge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Edge, from_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Edge, to_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Edge, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Edge, direction_type_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Graph, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Graph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Graph, hdmap_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Graph, hdmap_district_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Graph, node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Graph, edge_),
  0,
  1,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::apollo::routing::CurvePoint)},
  { 7, 14, sizeof(::apollo::routing::CurveRange)},
  { 16, 29, sizeof(::apollo::routing::Node)},
  { 37, 46, sizeof(::apollo::routing::Edge)},
  { 50, 59, sizeof(::apollo::routing::Graph)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::routing::_CurvePoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::routing::_CurveRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::routing::_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::routing::_Edge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::routing::_Graph_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/routing/proto/topo_graph.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n&modules/routing/proto/topo_graph.proto"
      "\022\016apollo.routing\032$modules/map/proto/map_"
      "geometry.proto\"\027\n\nCurvePoint\022\t\n\001s\030\001 \001(\001\""
      "`\n\nCurveRange\022)\n\005start\030\001 \001(\0132\032.apollo.ro"
      "uting.CurvePoint\022\'\n\003end\030\002 \001(\0132\032.apollo.r"
      "outing.CurvePoint\"\351\001\n\004Node\022\017\n\007lane_id\030\001 "
      "\001(\t\022\016\n\006length\030\002 \001(\001\022,\n\010left_out\030\003 \003(\0132\032."
      "apollo.routing.CurveRange\022-\n\tright_out\030\004"
      " \003(\0132\032.apollo.routing.CurveRange\022\014\n\004cost"
      "\030\005 \001(\001\022*\n\rcentral_curve\030\006 \001(\0132\023.apollo.h"
      "dmap.Curve\022\030\n\nis_virtual\030\007 \001(\010:\004true\022\017\n\007"
      "road_id\030\010 \001(\t\"\255\001\n\004Edge\022\024\n\014from_lane_id\030\001"
      " \001(\t\022\022\n\nto_lane_id\030\002 \001(\t\022\014\n\004cost\030\003 \001(\001\022:"
      "\n\016direction_type\030\004 \001(\0162\".apollo.routing."
      "Edge.DirectionType\"1\n\rDirectionType\022\013\n\007F"
      "ORWARD\020\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002\"~\n\005Graph\022\025"
      "\n\rhdmap_version\030\001 \001(\t\022\026\n\016hdmap_district\030"
      "\002 \001(\t\022\"\n\004node\030\003 \003(\0132\024.apollo.routing.Nod"
      "e\022\"\n\004edge\030\004 \003(\0132\024.apollo.routing.Edge"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 757);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/routing/proto/topo_graph.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto
namespace apollo {
namespace routing {
const ::google::protobuf::EnumDescriptor* Edge_DirectionType_descriptor() {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_enum_descriptors[0];
}
bool Edge_DirectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Edge_DirectionType Edge::FORWARD;
const Edge_DirectionType Edge::LEFT;
const Edge_DirectionType Edge::RIGHT;
const Edge_DirectionType Edge::DirectionType_MIN;
const Edge_DirectionType Edge::DirectionType_MAX;
const int Edge::DirectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CurvePoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurvePoint::kSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurvePoint::CurvePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::scc_info_CurvePoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.CurvePoint)
}
CurvePoint::CurvePoint(const CurvePoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  s_ = from.s_;
  // @@protoc_insertion_point(copy_constructor:apollo.routing.CurvePoint)
}

void CurvePoint::SharedCtor() {
  s_ = 0;
}

CurvePoint::~CurvePoint() {
  // @@protoc_insertion_point(destructor:apollo.routing.CurvePoint)
  SharedDtor();
}

void CurvePoint::SharedDtor() {
}

void CurvePoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CurvePoint::descriptor() {
  ::protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CurvePoint& CurvePoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::scc_info_CurvePoint.base);
  return *internal_default_instance();
}


void CurvePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.CurvePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  s_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CurvePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.CurvePoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.CurvePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.CurvePoint)
  return false;
#undef DO_
}

void CurvePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.CurvePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.CurvePoint)
}

::google::protobuf::uint8* CurvePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.CurvePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.CurvePoint)
  return target;
}

size_t CurvePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.CurvePoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional double s = 1;
  if (has_s()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurvePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.CurvePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const CurvePoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurvePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.CurvePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.CurvePoint)
    MergeFrom(*source);
  }
}

void CurvePoint::MergeFrom(const CurvePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.CurvePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_s()) {
    set_s(from.s());
  }
}

void CurvePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.CurvePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurvePoint::CopyFrom(const CurvePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.CurvePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurvePoint::IsInitialized() const {
  return true;
}

void CurvePoint::Swap(CurvePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurvePoint::InternalSwap(CurvePoint* other) {
  using std::swap;
  swap(s_, other->s_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CurvePoint::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CurveRange::InitAsDefaultInstance() {
  ::apollo::routing::_CurveRange_default_instance_._instance.get_mutable()->start_ = const_cast< ::apollo::routing::CurvePoint*>(
      ::apollo::routing::CurvePoint::internal_default_instance());
  ::apollo::routing::_CurveRange_default_instance_._instance.get_mutable()->end_ = const_cast< ::apollo::routing::CurvePoint*>(
      ::apollo::routing::CurvePoint::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurveRange::kStartFieldNumber;
const int CurveRange::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurveRange::CurveRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::scc_info_CurveRange.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.CurveRange)
}
CurveRange::CurveRange(const CurveRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::apollo::routing::CurvePoint(*from.start_);
  } else {
    start_ = NULL;
  }
  if (from.has_end()) {
    end_ = new ::apollo::routing::CurvePoint(*from.end_);
  } else {
    end_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.routing.CurveRange)
}

void CurveRange::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

CurveRange::~CurveRange() {
  // @@protoc_insertion_point(destructor:apollo.routing.CurveRange)
  SharedDtor();
}

void CurveRange::SharedDtor() {
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void CurveRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CurveRange::descriptor() {
  ::protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CurveRange& CurveRange::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::scc_info_CurveRange.base);
  return *internal_default_instance();
}


void CurveRange::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.CurveRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(start_ != NULL);
      start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(end_ != NULL);
      end_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CurveRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.CurveRange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.routing.CurvePoint start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.routing.CurvePoint end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.CurveRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.CurveRange)
  return false;
#undef DO_
}

void CurveRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.CurveRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.routing.CurvePoint start = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_start(), output);
  }

  // optional .apollo.routing.CurvePoint end = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.CurveRange)
}

::google::protobuf::uint8* CurveRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.CurveRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.routing.CurvePoint start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_start(), deterministic, target);
  }

  // optional .apollo.routing.CurvePoint end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_end(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.CurveRange)
  return target;
}

size_t CurveRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.CurveRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.routing.CurvePoint start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *start_);
    }

    // optional .apollo.routing.CurvePoint end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *end_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CurveRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.CurveRange)
  GOOGLE_DCHECK_NE(&from, this);
  const CurveRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CurveRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.CurveRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.CurveRange)
    MergeFrom(*source);
  }
}

void CurveRange::MergeFrom(const CurveRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.CurveRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_start()->::apollo::routing::CurvePoint::MergeFrom(from.start());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_end()->::apollo::routing::CurvePoint::MergeFrom(from.end());
    }
  }
}

void CurveRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.CurveRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurveRange::CopyFrom(const CurveRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.CurveRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurveRange::IsInitialized() const {
  return true;
}

void CurveRange::Swap(CurveRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurveRange::InternalSwap(CurveRange* other) {
  using std::swap;
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CurveRange::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Node::InitAsDefaultInstance() {
  ::apollo::routing::_Node_default_instance_._instance.get_mutable()->central_curve_ = const_cast< ::apollo::hdmap::Curve*>(
      ::apollo::hdmap::Curve::internal_default_instance());
}
void Node::clear_central_curve() {
  if (central_curve_ != NULL) central_curve_->Clear();
  clear_has_central_curve();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kLaneIdFieldNumber;
const int Node::kLengthFieldNumber;
const int Node::kLeftOutFieldNumber;
const int Node::kRightOutFieldNumber;
const int Node::kCostFieldNumber;
const int Node::kCentralCurveFieldNumber;
const int Node::kIsVirtualFieldNumber;
const int Node::kRoadIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::scc_info_Node.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      left_out_(from.left_out_),
      right_out_(from.right_out_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lane_id()) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  road_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_road_id()) {
    road_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.road_id_);
  }
  if (from.has_central_curve()) {
    central_curve_ = new ::apollo::hdmap::Curve(*from.central_curve_);
  } else {
    central_curve_ = NULL;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_virtual_) -
    reinterpret_cast<char*>(&length_)) + sizeof(is_virtual_));
  // @@protoc_insertion_point(copy_constructor:apollo.routing.Node)
}

void Node::SharedCtor() {
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  road_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&central_curve_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&central_curve_)) + sizeof(cost_));
  is_virtual_ = true;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:apollo.routing.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  road_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete central_curve_;
}

void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  ::protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Node& Node::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::scc_info_Node.base);
  return *internal_default_instance();
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  left_out_.Clear();
  right_out_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      lane_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      road_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(central_curve_ != NULL);
      central_curve_->Clear();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cost_) -
        reinterpret_cast<char*>(&length_)) + sizeof(cost_));
    is_virtual_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.Node)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.Node.lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.routing.CurveRange left_out = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_left_out()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.routing.CurveRange right_out = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_right_out()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cost = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.Curve central_curve = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_central_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_virtual = 7 [default = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_is_virtual();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_virtual_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string road_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_road_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->road_id().data(), static_cast<int>(this->road_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.Node.road_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Node.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lane_id(), output);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->length(), output);
  }

  // repeated .apollo.routing.CurveRange left_out = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_out_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->left_out(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.routing.CurveRange right_out = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_out_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->right_out(static_cast<int>(i)),
      output);
  }

  // optional double cost = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->cost(), output);
  }

  // optional .apollo.hdmap.Curve central_curve = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_central_curve(), output);
  }

  // optional bool is_virtual = 7 [default = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_virtual(), output);
  }

  // optional string road_id = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->road_id().data(), static_cast<int>(this->road_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Node.road_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->road_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Node.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lane_id(), target);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->length(), target);
  }

  // repeated .apollo.routing.CurveRange left_out = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_out_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->left_out(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.routing.CurveRange right_out = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_out_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->right_out(static_cast<int>(i)), deterministic, target);
  }

  // optional double cost = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->cost(), target);
  }

  // optional .apollo.hdmap.Curve central_curve = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_central_curve(), deterministic, target);
  }

  // optional bool is_virtual = 7 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_virtual(), target);
  }

  // optional string road_id = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->road_id().data(), static_cast<int>(this->road_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Node.road_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->road_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.Node)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.routing.CurveRange left_out = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->left_out_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->left_out(static_cast<int>(i)));
    }
  }

  // repeated .apollo.routing.CurveRange right_out = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->right_out_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->right_out(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string lane_id = 1;
    if (has_lane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lane_id());
    }

    // optional string road_id = 8;
    if (has_road_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->road_id());
    }

    // optional .apollo.hdmap.Curve central_curve = 6;
    if (has_central_curve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *central_curve_);
    }

    // optional double length = 2;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double cost = 5;
    if (has_cost()) {
      total_size += 1 + 8;
    }

    // optional bool is_virtual = 7 [default = true];
    if (has_is_virtual()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  left_out_.MergeFrom(from.left_out_);
  right_out_.MergeFrom(from.right_out_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_lane_id();
      lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_road_id();
      road_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.road_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_central_curve()->::apollo::hdmap::Curve::MergeFrom(from.central_curve());
    }
    if (cached_has_bits & 0x00000008u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000010u) {
      cost_ = from.cost_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_virtual_ = from.is_virtual_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  using std::swap;
  CastToBase(&left_out_)->InternalSwap(CastToBase(&other->left_out_));
  CastToBase(&right_out_)->InternalSwap(CastToBase(&other->right_out_));
  lane_id_.Swap(&other->lane_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  road_id_.Swap(&other->road_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(central_curve_, other->central_curve_);
  swap(length_, other->length_);
  swap(cost_, other->cost_);
  swap(is_virtual_, other->is_virtual_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Edge::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Edge::kFromLaneIdFieldNumber;
const int Edge::kToLaneIdFieldNumber;
const int Edge::kCostFieldNumber;
const int Edge::kDirectionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Edge::Edge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::scc_info_Edge.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.Edge)
}
Edge::Edge(const Edge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_lane_id()) {
    from_lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_lane_id_);
  }
  to_lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_to_lane_id()) {
    to_lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_lane_id_);
  }
  ::memcpy(&cost_, &from.cost_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_type_) -
    reinterpret_cast<char*>(&cost_)) + sizeof(direction_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.routing.Edge)
}

void Edge::SharedCtor() {
  from_lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_type_) -
      reinterpret_cast<char*>(&cost_)) + sizeof(direction_type_));
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:apollo.routing.Edge)
  SharedDtor();
}

void Edge::SharedDtor() {
  from_lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  to_lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Edge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Edge::descriptor() {
  ::protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Edge& Edge::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::scc_info_Edge.base);
  return *internal_default_instance();
}


void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.Edge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      from_lane_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      to_lane_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&cost_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&direction_type_) -
        reinterpret_cast<char*>(&cost_)) + sizeof(direction_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.Edge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string from_lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_lane_id().data(), static_cast<int>(this->from_lane_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.Edge.from_lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string to_lane_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->to_lane_id().data(), static_cast<int>(this->to_lane_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.Edge.to_lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cost = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.routing.Edge.DirectionType direction_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::routing::Edge_DirectionType_IsValid(value)) {
            set_direction_type(static_cast< ::apollo::routing::Edge_DirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.Edge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.Edge)
  return false;
#undef DO_
}

void Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.Edge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string from_lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_lane_id().data(), static_cast<int>(this->from_lane_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Edge.from_lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->from_lane_id(), output);
  }

  // optional string to_lane_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_lane_id().data(), static_cast<int>(this->to_lane_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Edge.to_lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->to_lane_id(), output);
  }

  // optional double cost = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cost(), output);
  }

  // optional .apollo.routing.Edge.DirectionType direction_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->direction_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.Edge)
}

::google::protobuf::uint8* Edge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.Edge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string from_lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_lane_id().data(), static_cast<int>(this->from_lane_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Edge.from_lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_lane_id(), target);
  }

  // optional string to_lane_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->to_lane_id().data(), static_cast<int>(this->to_lane_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Edge.to_lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->to_lane_id(), target);
  }

  // optional double cost = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cost(), target);
  }

  // optional .apollo.routing.Edge.DirectionType direction_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->direction_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.Edge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string from_lane_id = 1;
    if (has_from_lane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_lane_id());
    }

    // optional string to_lane_id = 2;
    if (has_to_lane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_lane_id());
    }

    // optional double cost = 3;
    if (has_cost()) {
      total_size += 1 + 8;
    }

    // optional .apollo.routing.Edge.DirectionType direction_type = 4;
    if (has_direction_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Edge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  const Edge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Edge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.Edge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.Edge)
    MergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from_lane_id();
      from_lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_lane_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_to_lane_id();
      to_lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_lane_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      cost_ = from.cost_;
    }
    if (cached_has_bits & 0x00000008u) {
      direction_type_ = from.direction_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Edge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::Swap(Edge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Edge::InternalSwap(Edge* other) {
  using std::swap;
  from_lane_id_.Swap(&other->from_lane_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_lane_id_.Swap(&other->to_lane_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cost_, other->cost_);
  swap(direction_type_, other->direction_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Edge::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Graph::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Graph::kHdmapVersionFieldNumber;
const int Graph::kHdmapDistrictFieldNumber;
const int Graph::kNodeFieldNumber;
const int Graph::kEdgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Graph::Graph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::scc_info_Graph.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.Graph)
}
Graph::Graph(const Graph& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      node_(from.node_),
      edge_(from.edge_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hdmap_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hdmap_version()) {
    hdmap_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdmap_version_);
  }
  hdmap_district_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hdmap_district()) {
    hdmap_district_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdmap_district_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.routing.Graph)
}

void Graph::SharedCtor() {
  hdmap_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hdmap_district_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:apollo.routing.Graph)
  SharedDtor();
}

void Graph::SharedDtor() {
  hdmap_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hdmap_district_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Graph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Graph::descriptor() {
  ::protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Graph& Graph::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::scc_info_Graph.base);
  return *internal_default_instance();
}


void Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.Graph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  edge_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      hdmap_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      hdmap_district_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Graph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.Graph)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hdmap_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hdmap_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hdmap_version().data(), static_cast<int>(this->hdmap_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.Graph.hdmap_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hdmap_district = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hdmap_district()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hdmap_district().data(), static_cast<int>(this->hdmap_district().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.Graph.hdmap_district");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.routing.Node node = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.routing.Edge edge = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_edge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.Graph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.Graph)
  return false;
#undef DO_
}

void Graph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.Graph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hdmap_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hdmap_version().data(), static_cast<int>(this->hdmap_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Graph.hdmap_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hdmap_version(), output);
  }

  // optional string hdmap_district = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hdmap_district().data(), static_cast<int>(this->hdmap_district().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Graph.hdmap_district");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hdmap_district(), output);
  }

  // repeated .apollo.routing.Node node = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->node(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.routing.Edge edge = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edge_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->edge(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.Graph)
}

::google::protobuf::uint8* Graph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.Graph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string hdmap_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hdmap_version().data(), static_cast<int>(this->hdmap_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Graph.hdmap_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hdmap_version(), target);
  }

  // optional string hdmap_district = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hdmap_district().data(), static_cast<int>(this->hdmap_district().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.Graph.hdmap_district");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hdmap_district(), target);
  }

  // repeated .apollo.routing.Node node = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->node(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.routing.Edge edge = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edge_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->edge(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.Graph)
  return target;
}

size_t Graph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.Graph)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.routing.Node node = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->node_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->node(static_cast<int>(i)));
    }
  }

  // repeated .apollo.routing.Edge edge = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->edge_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->edge(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string hdmap_version = 1;
    if (has_hdmap_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hdmap_version());
    }

    // optional string hdmap_district = 2;
    if (has_hdmap_district()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hdmap_district());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Graph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  const Graph* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Graph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.Graph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.Graph)
    MergeFrom(*source);
  }
}

void Graph::MergeFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
  edge_.MergeFrom(from.edge_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hdmap_version();
      hdmap_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdmap_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hdmap_district();
      hdmap_district_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdmap_district_);
    }
  }
}

void Graph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph::CopyFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {
  return true;
}

void Graph::Swap(Graph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Graph::InternalSwap(Graph* other) {
  using std::swap;
  CastToBase(&node_)->InternalSwap(CastToBase(&other->node_));
  CastToBase(&edge_)->InternalSwap(CastToBase(&other->edge_));
  hdmap_version_.Swap(&other->hdmap_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hdmap_district_.Swap(&other->hdmap_district_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Graph::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2ftopo_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace routing
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::routing::CurvePoint* Arena::CreateMaybeMessage< ::apollo::routing::CurvePoint >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::CurvePoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::routing::CurveRange* Arena::CreateMaybeMessage< ::apollo::routing::CurveRange >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::CurveRange >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::routing::Node* Arena::CreateMaybeMessage< ::apollo::routing::Node >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::Node >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::routing::Edge* Arena::CreateMaybeMessage< ::apollo::routing::Edge >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::Edge >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::routing::Graph* Arena::CreateMaybeMessage< ::apollo::routing::Graph >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::Graph >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
