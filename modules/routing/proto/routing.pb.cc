// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/routing/proto/routing.proto

#include "modules/routing/proto/routing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fcommon_2fproto_2ferror_5fcode_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2ferror_5fcode_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StatusPb;
}  // namespace protobuf_modules_2fcommon_2fproto_2ferror_5fcode_2eproto
namespace protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PointENU;
}  // namespace protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto
namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fheader_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Polygon;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto
namespace protobuf_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ParkingSpace;
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto
namespace protobuf_modules_2frouting_2fproto_2frouting_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2frouting_2fproto_2frouting_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LaneSegment;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2frouting_2fproto_2frouting_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Measurement;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2frouting_2fproto_2frouting_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DeadEndInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2frouting_2fproto_2frouting_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LaneWaypoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2frouting_2fproto_2frouting_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Passage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2frouting_2fproto_2frouting_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RoadSegment;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2frouting_2fproto_2frouting_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ParkingInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2frouting_2fproto_2frouting_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_RoutingRequest;
}  // namespace protobuf_modules_2frouting_2fproto_2frouting_2eproto
namespace apollo {
namespace routing {
class LaneWaypointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneWaypoint>
      _instance;
} _LaneWaypoint_default_instance_;
class LaneSegmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneSegment>
      _instance;
} _LaneSegment_default_instance_;
class ParkingInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ParkingInfo>
      _instance;
} _ParkingInfo_default_instance_;
class DeadEndInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeadEndInfo>
      _instance;
} _DeadEndInfo_default_instance_;
class RoutingRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoutingRequest>
      _instance;
} _RoutingRequest_default_instance_;
class MeasurementDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Measurement>
      _instance;
} _Measurement_default_instance_;
class PassageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Passage>
      _instance;
} _Passage_default_instance_;
class RoadSegmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoadSegment>
      _instance;
} _RoadSegment_default_instance_;
class RoutingResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoutingResponse>
      _instance;
} _RoutingResponse_default_instance_;
}  // namespace routing
}  // namespace apollo
namespace protobuf_modules_2frouting_2fproto_2frouting_2eproto {
static void InitDefaultsLaneWaypoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_LaneWaypoint_default_instance_;
    new (ptr) ::apollo::routing::LaneWaypoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::LaneWaypoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LaneWaypoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLaneWaypoint}, {
      &protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::scc_info_PointENU.base,}};

static void InitDefaultsLaneSegment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_LaneSegment_default_instance_;
    new (ptr) ::apollo::routing::LaneSegment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::LaneSegment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LaneSegment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLaneSegment}, {}};

static void InitDefaultsParkingInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_ParkingInfo_default_instance_;
    new (ptr) ::apollo::routing::ParkingInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::ParkingInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ParkingInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsParkingInfo}, {
      &protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::scc_info_PointENU.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::scc_info_Polygon.base,}};

static void InitDefaultsDeadEndInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_DeadEndInfo_default_instance_;
    new (ptr) ::apollo::routing::DeadEndInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::DeadEndInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DeadEndInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDeadEndInfo}, {
      &protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::scc_info_PointENU.base,}};

static void InitDefaultsRoutingRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_RoutingRequest_default_instance_;
    new (ptr) ::apollo::routing::RoutingRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::RoutingRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_RoutingRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsRoutingRequest}, {
      &protobuf_modules_2fcommon_2fproto_2fheader_2eproto::scc_info_Header.base,
      &protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_LaneWaypoint.base,
      &protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_LaneSegment.base,
      &protobuf_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto::scc_info_ParkingSpace.base,
      &protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_ParkingInfo.base,
      &protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_DeadEndInfo.base,}};

static void InitDefaultsMeasurement() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_Measurement_default_instance_;
    new (ptr) ::apollo::routing::Measurement();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::Measurement::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Measurement =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMeasurement}, {}};

static void InitDefaultsPassage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_Passage_default_instance_;
    new (ptr) ::apollo::routing::Passage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::Passage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Passage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPassage}, {
      &protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_LaneSegment.base,}};

static void InitDefaultsRoadSegment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_RoadSegment_default_instance_;
    new (ptr) ::apollo::routing::RoadSegment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::RoadSegment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RoadSegment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRoadSegment}, {
      &protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_Passage.base,}};

static void InitDefaultsRoutingResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::routing::_RoutingResponse_default_instance_;
    new (ptr) ::apollo::routing::RoutingResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::routing::RoutingResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_RoutingResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsRoutingResponse}, {
      &protobuf_modules_2fcommon_2fproto_2fheader_2eproto::scc_info_Header.base,
      &protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_RoadSegment.base,
      &protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_Measurement.base,
      &protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_RoutingRequest.base,
      &protobuf_modules_2fcommon_2fproto_2ferror_5fcode_2eproto::scc_info_StatusPb.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LaneWaypoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneSegment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ParkingInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeadEndInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoutingRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Measurement.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Passage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoadSegment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoutingResponse.base);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::LaneWaypoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::LaneWaypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::LaneWaypoint, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::LaneWaypoint, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::LaneWaypoint, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::LaneWaypoint, heading_),
  0,
  2,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::LaneSegment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::LaneSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::LaneSegment, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::LaneSegment, start_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::LaneSegment, end_s_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::ParkingInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::ParkingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::ParkingInfo, parking_space_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::ParkingInfo, parking_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::ParkingInfo, parking_space_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::ParkingInfo, corner_point_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::DeadEndInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::DeadEndInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::DeadEndInfo, dead_end_routing_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::DeadEndInfo, target_point_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoutingRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoutingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoutingRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoutingRequest, waypoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoutingRequest, blacklisted_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoutingRequest, blacklisted_road_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoutingRequest, broadcast_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoutingRequest, parking_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoutingRequest, parking_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoutingRequest, dead_end_info_),
  0,
  ~0u,
  ~0u,
  ~0u,
  4,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Measurement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Measurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Measurement, distance_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Passage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Passage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Passage, segment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Passage, can_exit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::Passage, change_lane_type_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoadSegment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoadSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoadSegment, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoadSegment, passage_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoutingResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoutingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoutingResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoutingResponse, road_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoutingResponse, measurement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoutingResponse, routing_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoutingResponse, map_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::routing::RoutingResponse, status_),
  1,
  ~0u,
  2,
  3,
  0,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::apollo::routing::LaneWaypoint)},
  { 13, 21, sizeof(::apollo::routing::LaneSegment)},
  { 24, 33, sizeof(::apollo::routing::ParkingInfo)},
  { 37, 44, sizeof(::apollo::routing::DeadEndInfo)},
  { 46, 59, sizeof(::apollo::routing::RoutingRequest)},
  { 67, 73, sizeof(::apollo::routing::Measurement)},
  { 74, 82, sizeof(::apollo::routing::Passage)},
  { 85, 92, sizeof(::apollo::routing::RoadSegment)},
  { 94, 105, sizeof(::apollo::routing::RoutingResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::routing::_LaneWaypoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::routing::_LaneSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::routing::_ParkingInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::routing::_DeadEndInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::routing::_RoutingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::routing::_Measurement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::routing::_Passage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::routing::_RoadSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::routing::_RoutingResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/routing/proto/routing.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n#modules/routing/proto/routing.proto\022\016a"
      "pollo.routing\032!modules/common/proto/head"
      "er.proto\032#modules/common/proto/geometry."
      "proto\032%modules/common/proto/error_code.p"
      "roto\032)modules/map/proto/map_parking_spac"
      "e.proto\032$modules/map/proto/map_geometry."
      "proto\"]\n\014LaneWaypoint\022\n\n\002id\030\001 \001(\t\022\t\n\001s\030\002"
      " \001(\001\022%\n\004pose\030\003 \001(\0132\027.apollo.common.Point"
      "ENU\022\017\n\007heading\030\004 \001(\001\"9\n\013LaneSegment\022\n\n\002i"
      "d\030\001 \001(\t\022\017\n\007start_s\030\002 \001(\001\022\r\n\005end_s\030\003 \001(\001\""
      "\302\001\n\013ParkingInfo\022\030\n\020parking_space_id\030\001 \001("
      "\t\022.\n\rparking_point\030\002 \001(\0132\027.apollo.common"
      ".PointENU\022<\n\022parking_space_type\030\003 \001(\0162 ."
      "apollo.routing.ParkingSpaceType\022+\n\014corne"
      "r_point\030\004 \001(\0132\025.apollo.hdmap.Polygon\"\177\n\013"
      "DeadEndInfo\022A\n\025dead_end_routing_type\030\001 \001"
      "(\0162\".apollo.routing.DeadEndRoutingType\022-"
      "\n\014target_point\030\002 \001(\0132\027.apollo.common.Poi"
      "ntENU\"\357\002\n\016RoutingRequest\022%\n\006header\030\001 \001(\013"
      "2\025.apollo.common.Header\022.\n\010waypoint\030\002 \003("
      "\0132\034.apollo.routing.LaneWaypoint\0225\n\020black"
      "listed_lane\030\003 \003(\0132\033.apollo.routing.LaneS"
      "egment\022\030\n\020blacklisted_road\030\004 \003(\t\022\027\n\tbroa"
      "dcast\030\005 \001(\010:\004true\0225\n\rparking_space\030\006 \001(\013"
      "2\032.apollo.hdmap.ParkingSpaceB\002\030\001\0221\n\014park"
      "ing_info\030\007 \001(\0132\033.apollo.routing.ParkingI"
      "nfo\0222\n\rdead_end_info\030\010 \001(\0132\033.apollo.rout"
      "ing.DeadEndInfo\"\037\n\013Measurement\022\020\n\010distan"
      "ce\030\001 \001(\001\"\214\001\n\007Passage\022,\n\007segment\030\001 \003(\0132\033."
      "apollo.routing.LaneSegment\022\020\n\010can_exit\030\002"
      " \001(\010\022A\n\020change_lane_type\030\003 \001(\0162\036.apollo."
      "routing.ChangeLaneType:\007FORWARD\"C\n\013RoadS"
      "egment\022\n\n\002id\030\001 \001(\t\022(\n\007passage\030\002 \003(\0132\027.ap"
      "ollo.routing.Passage\"\214\002\n\017RoutingResponse"
      "\022%\n\006header\030\001 \001(\0132\025.apollo.common.Header\022"
      ")\n\004road\030\002 \003(\0132\033.apollo.routing.RoadSegme"
      "nt\0220\n\013measurement\030\003 \001(\0132\033.apollo.routing"
      ".Measurement\0227\n\017routing_request\030\004 \001(\0132\036."
      "apollo.routing.RoutingRequest\022\023\n\013map_ver"
      "sion\030\005 \001(\014\022\'\n\006status\030\006 \001(\0132\027.apollo.comm"
      "on.StatusPb*;\n\020ParkingSpaceType\022\021\n\rVERTI"
      "CAL_PLOT\020\000\022\024\n\020PARALLEL_PARKING\020\001*H\n\022Dead"
      "EndRoutingType\022\021\n\rROUTING_OTHER\020\000\022\016\n\nROU"
      "TING_IN\020\001\022\017\n\013ROUTING_OUT\020\002*2\n\016ChangeLane"
      "Type\022\013\n\007FORWARD\020\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1798);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/routing/proto/routing.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::protobuf_modules_2fcommon_2fproto_2ferror_5fcode_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2frouting_2fproto_2frouting_2eproto
namespace apollo {
namespace routing {
const ::google::protobuf::EnumDescriptor* ParkingSpaceType_descriptor() {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_enum_descriptors[0];
}
bool ParkingSpaceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeadEndRoutingType_descriptor() {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_enum_descriptors[1];
}
bool DeadEndRoutingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChangeLaneType_descriptor() {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_enum_descriptors[2];
}
bool ChangeLaneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LaneWaypoint::InitAsDefaultInstance() {
  ::apollo::routing::_LaneWaypoint_default_instance_._instance.get_mutable()->pose_ = const_cast< ::apollo::common::PointENU*>(
      ::apollo::common::PointENU::internal_default_instance());
}
void LaneWaypoint::clear_pose() {
  if (pose_ != NULL) pose_->Clear();
  clear_has_pose();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneWaypoint::kIdFieldNumber;
const int LaneWaypoint::kSFieldNumber;
const int LaneWaypoint::kPoseFieldNumber;
const int LaneWaypoint::kHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneWaypoint::LaneWaypoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_LaneWaypoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.LaneWaypoint)
}
LaneWaypoint::LaneWaypoint(const LaneWaypoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_pose()) {
    pose_ = new ::apollo::common::PointENU(*from.pose_);
  } else {
    pose_ = NULL;
  }
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&s_)) + sizeof(heading_));
  // @@protoc_insertion_point(copy_constructor:apollo.routing.LaneWaypoint)
}

void LaneWaypoint::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(heading_));
}

LaneWaypoint::~LaneWaypoint() {
  // @@protoc_insertion_point(destructor:apollo.routing.LaneWaypoint)
  SharedDtor();
}

void LaneWaypoint::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
}

void LaneWaypoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneWaypoint::descriptor() {
  ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneWaypoint& LaneWaypoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_LaneWaypoint.base);
  return *internal_default_instance();
}


void LaneWaypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.LaneWaypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_) -
        reinterpret_cast<char*>(&s_)) + sizeof(heading_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneWaypoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.LaneWaypoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.LaneWaypoint.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.PointENU pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.LaneWaypoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.LaneWaypoint)
  return false;
#undef DO_
}

void LaneWaypoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.LaneWaypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.LaneWaypoint.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double s = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->s(), output);
  }

  // optional .apollo.common.PointENU pose = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_pose(), output);
  }

  // optional double heading = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->heading(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.LaneWaypoint)
}

::google::protobuf::uint8* LaneWaypoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.LaneWaypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.LaneWaypoint.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double s = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->s(), target);
  }

  // optional .apollo.common.PointENU pose = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_pose(), deterministic, target);
  }

  // optional double heading = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->heading(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.LaneWaypoint)
  return target;
}

size_t LaneWaypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.LaneWaypoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .apollo.common.PointENU pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pose_);
    }

    // optional double s = 2;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double heading = 4;
    if (has_heading()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneWaypoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.LaneWaypoint)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneWaypoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneWaypoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.LaneWaypoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.LaneWaypoint)
    MergeFrom(*source);
  }
}

void LaneWaypoint::MergeFrom(const LaneWaypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.LaneWaypoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pose()->::apollo::common::PointENU::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000004u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000008u) {
      heading_ = from.heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneWaypoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.LaneWaypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneWaypoint::CopyFrom(const LaneWaypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.LaneWaypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneWaypoint::IsInitialized() const {
  return true;
}

void LaneWaypoint::Swap(LaneWaypoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneWaypoint::InternalSwap(LaneWaypoint* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pose_, other->pose_);
  swap(s_, other->s_);
  swap(heading_, other->heading_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneWaypoint::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneSegment::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneSegment::kIdFieldNumber;
const int LaneSegment::kStartSFieldNumber;
const int LaneSegment::kEndSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneSegment::LaneSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_LaneSegment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.LaneSegment)
}
LaneSegment::LaneSegment(const LaneSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&start_s_, &from.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_s_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(end_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.routing.LaneSegment)
}

void LaneSegment::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_s_) -
      reinterpret_cast<char*>(&start_s_)) + sizeof(end_s_));
}

LaneSegment::~LaneSegment() {
  // @@protoc_insertion_point(destructor:apollo.routing.LaneSegment)
  SharedDtor();
}

void LaneSegment::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LaneSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneSegment::descriptor() {
  ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneSegment& LaneSegment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_LaneSegment.base);
  return *internal_default_instance();
}


void LaneSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.LaneSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&start_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_s_) -
        reinterpret_cast<char*>(&start_s_)) + sizeof(end_s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.LaneSegment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.LaneSegment.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double start_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_start_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double end_s = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_end_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.LaneSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.LaneSegment)
  return false;
#undef DO_
}

void LaneSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.LaneSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.LaneSegment.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double start_s = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->start_s(), output);
  }

  // optional double end_s = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->end_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.LaneSegment)
}

::google::protobuf::uint8* LaneSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.LaneSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.LaneSegment.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double start_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->start_s(), target);
  }

  // optional double end_s = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->end_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.LaneSegment)
  return target;
}

size_t LaneSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.LaneSegment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double start_s = 2;
    if (has_start_s()) {
      total_size += 1 + 8;
    }

    // optional double end_s = 3;
    if (has_end_s()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.LaneSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.LaneSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.LaneSegment)
    MergeFrom(*source);
  }
}

void LaneSegment::MergeFrom(const LaneSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.LaneSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      start_s_ = from.start_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_s_ = from.end_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.LaneSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSegment::CopyFrom(const LaneSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.LaneSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSegment::IsInitialized() const {
  return true;
}

void LaneSegment::Swap(LaneSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneSegment::InternalSwap(LaneSegment* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_s_, other->start_s_);
  swap(end_s_, other->end_s_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneSegment::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ParkingInfo::InitAsDefaultInstance() {
  ::apollo::routing::_ParkingInfo_default_instance_._instance.get_mutable()->parking_point_ = const_cast< ::apollo::common::PointENU*>(
      ::apollo::common::PointENU::internal_default_instance());
  ::apollo::routing::_ParkingInfo_default_instance_._instance.get_mutable()->corner_point_ = const_cast< ::apollo::hdmap::Polygon*>(
      ::apollo::hdmap::Polygon::internal_default_instance());
}
void ParkingInfo::clear_parking_point() {
  if (parking_point_ != NULL) parking_point_->Clear();
  clear_has_parking_point();
}
void ParkingInfo::clear_corner_point() {
  if (corner_point_ != NULL) corner_point_->Clear();
  clear_has_corner_point();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParkingInfo::kParkingSpaceIdFieldNumber;
const int ParkingInfo::kParkingPointFieldNumber;
const int ParkingInfo::kParkingSpaceTypeFieldNumber;
const int ParkingInfo::kCornerPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParkingInfo::ParkingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_ParkingInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.ParkingInfo)
}
ParkingInfo::ParkingInfo(const ParkingInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parking_space_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parking_space_id()) {
    parking_space_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parking_space_id_);
  }
  if (from.has_parking_point()) {
    parking_point_ = new ::apollo::common::PointENU(*from.parking_point_);
  } else {
    parking_point_ = NULL;
  }
  if (from.has_corner_point()) {
    corner_point_ = new ::apollo::hdmap::Polygon(*from.corner_point_);
  } else {
    corner_point_ = NULL;
  }
  parking_space_type_ = from.parking_space_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.routing.ParkingInfo)
}

void ParkingInfo::SharedCtor() {
  parking_space_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&parking_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parking_space_type_) -
      reinterpret_cast<char*>(&parking_point_)) + sizeof(parking_space_type_));
}

ParkingInfo::~ParkingInfo() {
  // @@protoc_insertion_point(destructor:apollo.routing.ParkingInfo)
  SharedDtor();
}

void ParkingInfo::SharedDtor() {
  parking_space_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parking_point_;
  if (this != internal_default_instance()) delete corner_point_;
}

void ParkingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ParkingInfo::descriptor() {
  ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParkingInfo& ParkingInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_ParkingInfo.base);
  return *internal_default_instance();
}


void ParkingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.ParkingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      parking_space_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(parking_point_ != NULL);
      parking_point_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(corner_point_ != NULL);
      corner_point_->Clear();
    }
  }
  parking_space_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParkingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.ParkingInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string parking_space_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parking_space_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parking_space_id().data(), static_cast<int>(this->parking_space_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.ParkingInfo.parking_space_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.PointENU parking_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parking_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.routing.ParkingSpaceType parking_space_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::routing::ParkingSpaceType_IsValid(value)) {
            set_parking_space_type(static_cast< ::apollo::routing::ParkingSpaceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.Polygon corner_point = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_corner_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.ParkingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.ParkingInfo)
  return false;
#undef DO_
}

void ParkingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.ParkingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string parking_space_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parking_space_id().data(), static_cast<int>(this->parking_space_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.ParkingInfo.parking_space_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parking_space_id(), output);
  }

  // optional .apollo.common.PointENU parking_point = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_parking_point(), output);
  }

  // optional .apollo.routing.ParkingSpaceType parking_space_type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->parking_space_type(), output);
  }

  // optional .apollo.hdmap.Polygon corner_point = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_corner_point(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.ParkingInfo)
}

::google::protobuf::uint8* ParkingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.ParkingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string parking_space_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parking_space_id().data(), static_cast<int>(this->parking_space_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.ParkingInfo.parking_space_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parking_space_id(), target);
  }

  // optional .apollo.common.PointENU parking_point = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_parking_point(), deterministic, target);
  }

  // optional .apollo.routing.ParkingSpaceType parking_space_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->parking_space_type(), target);
  }

  // optional .apollo.hdmap.Polygon corner_point = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_corner_point(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.ParkingInfo)
  return target;
}

size_t ParkingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.ParkingInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string parking_space_id = 1;
    if (has_parking_space_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parking_space_id());
    }

    // optional .apollo.common.PointENU parking_point = 2;
    if (has_parking_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *parking_point_);
    }

    // optional .apollo.hdmap.Polygon corner_point = 4;
    if (has_corner_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *corner_point_);
    }

    // optional .apollo.routing.ParkingSpaceType parking_space_type = 3;
    if (has_parking_space_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->parking_space_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ParkingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.ParkingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ParkingInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParkingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.ParkingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.ParkingInfo)
    MergeFrom(*source);
  }
}

void ParkingInfo::MergeFrom(const ParkingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.ParkingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_parking_space_id();
      parking_space_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parking_space_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_parking_point()->::apollo::common::PointENU::MergeFrom(from.parking_point());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_corner_point()->::apollo::hdmap::Polygon::MergeFrom(from.corner_point());
    }
    if (cached_has_bits & 0x00000008u) {
      parking_space_type_ = from.parking_space_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParkingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.ParkingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParkingInfo::CopyFrom(const ParkingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.ParkingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParkingInfo::IsInitialized() const {
  return true;
}

void ParkingInfo::Swap(ParkingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParkingInfo::InternalSwap(ParkingInfo* other) {
  using std::swap;
  parking_space_id_.Swap(&other->parking_space_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(parking_point_, other->parking_point_);
  swap(corner_point_, other->corner_point_);
  swap(parking_space_type_, other->parking_space_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ParkingInfo::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeadEndInfo::InitAsDefaultInstance() {
  ::apollo::routing::_DeadEndInfo_default_instance_._instance.get_mutable()->target_point_ = const_cast< ::apollo::common::PointENU*>(
      ::apollo::common::PointENU::internal_default_instance());
}
void DeadEndInfo::clear_target_point() {
  if (target_point_ != NULL) target_point_->Clear();
  clear_has_target_point();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeadEndInfo::kDeadEndRoutingTypeFieldNumber;
const int DeadEndInfo::kTargetPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeadEndInfo::DeadEndInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_DeadEndInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.DeadEndInfo)
}
DeadEndInfo::DeadEndInfo(const DeadEndInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target_point()) {
    target_point_ = new ::apollo::common::PointENU(*from.target_point_);
  } else {
    target_point_ = NULL;
  }
  dead_end_routing_type_ = from.dead_end_routing_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.routing.DeadEndInfo)
}

void DeadEndInfo::SharedCtor() {
  ::memset(&target_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dead_end_routing_type_) -
      reinterpret_cast<char*>(&target_point_)) + sizeof(dead_end_routing_type_));
}

DeadEndInfo::~DeadEndInfo() {
  // @@protoc_insertion_point(destructor:apollo.routing.DeadEndInfo)
  SharedDtor();
}

void DeadEndInfo::SharedDtor() {
  if (this != internal_default_instance()) delete target_point_;
}

void DeadEndInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DeadEndInfo::descriptor() {
  ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeadEndInfo& DeadEndInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_DeadEndInfo.base);
  return *internal_default_instance();
}


void DeadEndInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.DeadEndInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(target_point_ != NULL);
    target_point_->Clear();
  }
  dead_end_routing_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeadEndInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.DeadEndInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.routing.DeadEndRoutingType dead_end_routing_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::routing::DeadEndRoutingType_IsValid(value)) {
            set_dead_end_routing_type(static_cast< ::apollo::routing::DeadEndRoutingType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.PointENU target_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.DeadEndInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.DeadEndInfo)
  return false;
#undef DO_
}

void DeadEndInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.DeadEndInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.routing.DeadEndRoutingType dead_end_routing_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dead_end_routing_type(), output);
  }

  // optional .apollo.common.PointENU target_point = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_target_point(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.DeadEndInfo)
}

::google::protobuf::uint8* DeadEndInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.DeadEndInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.routing.DeadEndRoutingType dead_end_routing_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dead_end_routing_type(), target);
  }

  // optional .apollo.common.PointENU target_point = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_target_point(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.DeadEndInfo)
  return target;
}

size_t DeadEndInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.DeadEndInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.common.PointENU target_point = 2;
    if (has_target_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_point_);
    }

    // optional .apollo.routing.DeadEndRoutingType dead_end_routing_type = 1;
    if (has_dead_end_routing_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dead_end_routing_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeadEndInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.DeadEndInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeadEndInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeadEndInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.DeadEndInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.DeadEndInfo)
    MergeFrom(*source);
  }
}

void DeadEndInfo::MergeFrom(const DeadEndInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.DeadEndInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_target_point()->::apollo::common::PointENU::MergeFrom(from.target_point());
    }
    if (cached_has_bits & 0x00000002u) {
      dead_end_routing_type_ = from.dead_end_routing_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeadEndInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.DeadEndInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeadEndInfo::CopyFrom(const DeadEndInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.DeadEndInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeadEndInfo::IsInitialized() const {
  return true;
}

void DeadEndInfo::Swap(DeadEndInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeadEndInfo::InternalSwap(DeadEndInfo* other) {
  using std::swap;
  swap(target_point_, other->target_point_);
  swap(dead_end_routing_type_, other->dead_end_routing_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DeadEndInfo::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoutingRequest::InitAsDefaultInstance() {
  ::apollo::routing::_RoutingRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::routing::_RoutingRequest_default_instance_._instance.get_mutable()->parking_space_ = const_cast< ::apollo::hdmap::ParkingSpace*>(
      ::apollo::hdmap::ParkingSpace::internal_default_instance());
  ::apollo::routing::_RoutingRequest_default_instance_._instance.get_mutable()->parking_info_ = const_cast< ::apollo::routing::ParkingInfo*>(
      ::apollo::routing::ParkingInfo::internal_default_instance());
  ::apollo::routing::_RoutingRequest_default_instance_._instance.get_mutable()->dead_end_info_ = const_cast< ::apollo::routing::DeadEndInfo*>(
      ::apollo::routing::DeadEndInfo::internal_default_instance());
}
void RoutingRequest::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
void RoutingRequest::clear_parking_space() {
  if (parking_space_ != NULL) parking_space_->Clear();
  clear_has_parking_space();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoutingRequest::kHeaderFieldNumber;
const int RoutingRequest::kWaypointFieldNumber;
const int RoutingRequest::kBlacklistedLaneFieldNumber;
const int RoutingRequest::kBlacklistedRoadFieldNumber;
const int RoutingRequest::kBroadcastFieldNumber;
const int RoutingRequest::kParkingSpaceFieldNumber;
const int RoutingRequest::kParkingInfoFieldNumber;
const int RoutingRequest::kDeadEndInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoutingRequest::RoutingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_RoutingRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.RoutingRequest)
}
RoutingRequest::RoutingRequest(const RoutingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      waypoint_(from.waypoint_),
      blacklisted_lane_(from.blacklisted_lane_),
      blacklisted_road_(from.blacklisted_road_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_parking_space()) {
    parking_space_ = new ::apollo::hdmap::ParkingSpace(*from.parking_space_);
  } else {
    parking_space_ = NULL;
  }
  if (from.has_parking_info()) {
    parking_info_ = new ::apollo::routing::ParkingInfo(*from.parking_info_);
  } else {
    parking_info_ = NULL;
  }
  if (from.has_dead_end_info()) {
    dead_end_info_ = new ::apollo::routing::DeadEndInfo(*from.dead_end_info_);
  } else {
    dead_end_info_ = NULL;
  }
  broadcast_ = from.broadcast_;
  // @@protoc_insertion_point(copy_constructor:apollo.routing.RoutingRequest)
}

void RoutingRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dead_end_info_) -
      reinterpret_cast<char*>(&header_)) + sizeof(dead_end_info_));
  broadcast_ = true;
}

RoutingRequest::~RoutingRequest() {
  // @@protoc_insertion_point(destructor:apollo.routing.RoutingRequest)
  SharedDtor();
}

void RoutingRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete parking_space_;
  if (this != internal_default_instance()) delete parking_info_;
  if (this != internal_default_instance()) delete dead_end_info_;
}

void RoutingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoutingRequest::descriptor() {
  ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoutingRequest& RoutingRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_RoutingRequest.base);
  return *internal_default_instance();
}


void RoutingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.RoutingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waypoint_.Clear();
  blacklisted_lane_.Clear();
  blacklisted_road_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(parking_space_ != NULL);
      parking_space_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(parking_info_ != NULL);
      parking_info_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(dead_end_info_ != NULL);
      dead_end_info_->Clear();
    }
    broadcast_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoutingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.RoutingRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.routing.LaneWaypoint waypoint = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_waypoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.routing.LaneSegment blacklisted_lane = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_blacklisted_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string blacklisted_road = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_blacklisted_road()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->blacklisted_road(this->blacklisted_road_size() - 1).data(),
            static_cast<int>(this->blacklisted_road(this->blacklisted_road_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.RoutingRequest.blacklisted_road");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool broadcast = 5 [default = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_broadcast();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broadcast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.ParkingSpace parking_space = 6 [deprecated = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parking_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.routing.ParkingInfo parking_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parking_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.routing.DeadEndInfo dead_end_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dead_end_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.RoutingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.RoutingRequest)
  return false;
#undef DO_
}

void RoutingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.RoutingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waypoint_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->waypoint(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.routing.LaneSegment blacklisted_lane = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blacklisted_lane_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->blacklisted_lane(static_cast<int>(i)),
      output);
  }

  // repeated string blacklisted_road = 4;
  for (int i = 0, n = this->blacklisted_road_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blacklisted_road(i).data(), static_cast<int>(this->blacklisted_road(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.RoutingRequest.blacklisted_road");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->blacklisted_road(i), output);
  }

  // optional bool broadcast = 5 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->broadcast(), output);
  }

  // optional .apollo.hdmap.ParkingSpace parking_space = 6 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_parking_space(), output);
  }

  // optional .apollo.routing.ParkingInfo parking_info = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_parking_info(), output);
  }

  // optional .apollo.routing.DeadEndInfo dead_end_info = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_dead_end_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.RoutingRequest)
}

::google::protobuf::uint8* RoutingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.RoutingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waypoint_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->waypoint(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.routing.LaneSegment blacklisted_lane = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blacklisted_lane_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->blacklisted_lane(static_cast<int>(i)), deterministic, target);
  }

  // repeated string blacklisted_road = 4;
  for (int i = 0, n = this->blacklisted_road_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->blacklisted_road(i).data(), static_cast<int>(this->blacklisted_road(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.RoutingRequest.blacklisted_road");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->blacklisted_road(i), target);
  }

  // optional bool broadcast = 5 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->broadcast(), target);
  }

  // optional .apollo.hdmap.ParkingSpace parking_space = 6 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_parking_space(), deterministic, target);
  }

  // optional .apollo.routing.ParkingInfo parking_info = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_parking_info(), deterministic, target);
  }

  // optional .apollo.routing.DeadEndInfo dead_end_info = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_dead_end_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.RoutingRequest)
  return target;
}

size_t RoutingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.RoutingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.routing.LaneWaypoint waypoint = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->waypoint_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->waypoint(static_cast<int>(i)));
    }
  }

  // repeated .apollo.routing.LaneSegment blacklisted_lane = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->blacklisted_lane_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->blacklisted_lane(static_cast<int>(i)));
    }
  }

  // repeated string blacklisted_road = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->blacklisted_road_size());
  for (int i = 0, n = this->blacklisted_road_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->blacklisted_road(i));
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.hdmap.ParkingSpace parking_space = 6 [deprecated = true];
    if (has_parking_space()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *parking_space_);
    }

    // optional .apollo.routing.ParkingInfo parking_info = 7;
    if (has_parking_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *parking_info_);
    }

    // optional .apollo.routing.DeadEndInfo dead_end_info = 8;
    if (has_dead_end_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dead_end_info_);
    }

    // optional bool broadcast = 5 [default = true];
    if (has_broadcast()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.RoutingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoutingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.RoutingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.RoutingRequest)
    MergeFrom(*source);
  }
}

void RoutingRequest::MergeFrom(const RoutingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.RoutingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waypoint_.MergeFrom(from.waypoint_);
  blacklisted_lane_.MergeFrom(from.blacklisted_lane_);
  blacklisted_road_.MergeFrom(from.blacklisted_road_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_parking_space()->::apollo::hdmap::ParkingSpace::MergeFrom(from.parking_space());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_parking_info()->::apollo::routing::ParkingInfo::MergeFrom(from.parking_info());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_dead_end_info()->::apollo::routing::DeadEndInfo::MergeFrom(from.dead_end_info());
    }
    if (cached_has_bits & 0x00000010u) {
      broadcast_ = from.broadcast_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoutingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.RoutingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingRequest::CopyFrom(const RoutingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.RoutingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingRequest::IsInitialized() const {
  return true;
}

void RoutingRequest::Swap(RoutingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoutingRequest::InternalSwap(RoutingRequest* other) {
  using std::swap;
  CastToBase(&waypoint_)->InternalSwap(CastToBase(&other->waypoint_));
  CastToBase(&blacklisted_lane_)->InternalSwap(CastToBase(&other->blacklisted_lane_));
  blacklisted_road_.InternalSwap(CastToBase(&other->blacklisted_road_));
  swap(header_, other->header_);
  swap(parking_space_, other->parking_space_);
  swap(parking_info_, other->parking_info_);
  swap(dead_end_info_, other->dead_end_info_);
  swap(broadcast_, other->broadcast_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoutingRequest::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Measurement::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Measurement::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Measurement::Measurement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_Measurement.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.Measurement)
}
Measurement::Measurement(const Measurement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:apollo.routing.Measurement)
}

void Measurement::SharedCtor() {
  distance_ = 0;
}

Measurement::~Measurement() {
  // @@protoc_insertion_point(destructor:apollo.routing.Measurement)
  SharedDtor();
}

void Measurement::SharedDtor() {
}

void Measurement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Measurement::descriptor() {
  ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Measurement& Measurement::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_Measurement.base);
  return *internal_default_instance();
}


void Measurement::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.Measurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distance_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Measurement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.Measurement)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double distance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.Measurement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.Measurement)
  return false;
#undef DO_
}

void Measurement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.Measurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.Measurement)
}

::google::protobuf::uint8* Measurement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.Measurement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.Measurement)
  return target;
}

size_t Measurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.Measurement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional double distance = 1;
  if (has_distance()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Measurement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.Measurement)
  GOOGLE_DCHECK_NE(&from, this);
  const Measurement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Measurement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.Measurement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.Measurement)
    MergeFrom(*source);
  }
}

void Measurement::MergeFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.Measurement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_distance()) {
    set_distance(from.distance());
  }
}

void Measurement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Measurement::CopyFrom(const Measurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.Measurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Measurement::IsInitialized() const {
  return true;
}

void Measurement::Swap(Measurement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Measurement::InternalSwap(Measurement* other) {
  using std::swap;
  swap(distance_, other->distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Measurement::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Passage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Passage::kSegmentFieldNumber;
const int Passage::kCanExitFieldNumber;
const int Passage::kChangeLaneTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Passage::Passage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_Passage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.Passage)
}
Passage::Passage(const Passage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      segment_(from.segment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&can_exit_, &from.can_exit_,
    static_cast<size_t>(reinterpret_cast<char*>(&change_lane_type_) -
    reinterpret_cast<char*>(&can_exit_)) + sizeof(change_lane_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.routing.Passage)
}

void Passage::SharedCtor() {
  ::memset(&can_exit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&change_lane_type_) -
      reinterpret_cast<char*>(&can_exit_)) + sizeof(change_lane_type_));
}

Passage::~Passage() {
  // @@protoc_insertion_point(destructor:apollo.routing.Passage)
  SharedDtor();
}

void Passage::SharedDtor() {
}

void Passage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Passage::descriptor() {
  ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Passage& Passage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_Passage.base);
  return *internal_default_instance();
}


void Passage::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.Passage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segment_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&can_exit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&change_lane_type_) -
        reinterpret_cast<char*>(&can_exit_)) + sizeof(change_lane_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Passage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.Passage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.routing.LaneSegment segment = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_segment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_exit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_can_exit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_exit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::routing::ChangeLaneType_IsValid(value)) {
            set_change_lane_type(static_cast< ::apollo::routing::ChangeLaneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.Passage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.Passage)
  return false;
#undef DO_
}

void Passage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.Passage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.routing.LaneSegment segment = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segment_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->segment(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool can_exit = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->can_exit(), output);
  }

  // optional .apollo.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->change_lane_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.Passage)
}

::google::protobuf::uint8* Passage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.Passage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.routing.LaneSegment segment = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segment_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->segment(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool can_exit = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->can_exit(), target);
  }

  // optional .apollo.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->change_lane_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.Passage)
  return target;
}

size_t Passage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.Passage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.routing.LaneSegment segment = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->segment_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->segment(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bool can_exit = 2;
    if (has_can_exit()) {
      total_size += 1 + 1;
    }

    // optional .apollo.routing.ChangeLaneType change_lane_type = 3 [default = FORWARD];
    if (has_change_lane_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_lane_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Passage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.Passage)
  GOOGLE_DCHECK_NE(&from, this);
  const Passage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Passage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.Passage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.Passage)
    MergeFrom(*source);
  }
}

void Passage::MergeFrom(const Passage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.Passage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segment_.MergeFrom(from.segment_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      can_exit_ = from.can_exit_;
    }
    if (cached_has_bits & 0x00000002u) {
      change_lane_type_ = from.change_lane_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Passage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.Passage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Passage::CopyFrom(const Passage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.Passage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Passage::IsInitialized() const {
  return true;
}

void Passage::Swap(Passage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Passage::InternalSwap(Passage* other) {
  using std::swap;
  CastToBase(&segment_)->InternalSwap(CastToBase(&other->segment_));
  swap(can_exit_, other->can_exit_);
  swap(change_lane_type_, other->change_lane_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Passage::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoadSegment::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadSegment::kIdFieldNumber;
const int RoadSegment::kPassageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadSegment::RoadSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_RoadSegment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.RoadSegment)
}
RoadSegment::RoadSegment(const RoadSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      passage_(from.passage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.routing.RoadSegment)
}

void RoadSegment::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RoadSegment::~RoadSegment() {
  // @@protoc_insertion_point(destructor:apollo.routing.RoadSegment)
  SharedDtor();
}

void RoadSegment::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RoadSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoadSegment::descriptor() {
  ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadSegment& RoadSegment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_RoadSegment.base);
  return *internal_default_instance();
}


void RoadSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.RoadSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  passage_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoadSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.RoadSegment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.routing.RoadSegment.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.routing.Passage passage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_passage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.RoadSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.RoadSegment)
  return false;
#undef DO_
}

void RoadSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.RoadSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.RoadSegment.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .apollo.routing.Passage passage = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->passage_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->passage(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.RoadSegment)
}

::google::protobuf::uint8* RoadSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.RoadSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.routing.RoadSegment.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .apollo.routing.Passage passage = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->passage_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->passage(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.RoadSegment)
  return target;
}

size_t RoadSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.RoadSegment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.routing.Passage passage = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->passage_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->passage(static_cast<int>(i)));
    }
  }

  // optional string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.RoadSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.RoadSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.RoadSegment)
    MergeFrom(*source);
  }
}

void RoadSegment::MergeFrom(const RoadSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.RoadSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  passage_.MergeFrom(from.passage_);
  if (from.has_id()) {
    set_has_id();
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void RoadSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.RoadSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadSegment::CopyFrom(const RoadSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.RoadSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSegment::IsInitialized() const {
  return true;
}

void RoadSegment::Swap(RoadSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadSegment::InternalSwap(RoadSegment* other) {
  using std::swap;
  CastToBase(&passage_)->InternalSwap(CastToBase(&other->passage_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoadSegment::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoutingResponse::InitAsDefaultInstance() {
  ::apollo::routing::_RoutingResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::routing::_RoutingResponse_default_instance_._instance.get_mutable()->measurement_ = const_cast< ::apollo::routing::Measurement*>(
      ::apollo::routing::Measurement::internal_default_instance());
  ::apollo::routing::_RoutingResponse_default_instance_._instance.get_mutable()->routing_request_ = const_cast< ::apollo::routing::RoutingRequest*>(
      ::apollo::routing::RoutingRequest::internal_default_instance());
  ::apollo::routing::_RoutingResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::apollo::common::StatusPb*>(
      ::apollo::common::StatusPb::internal_default_instance());
}
void RoutingResponse::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
void RoutingResponse::clear_status() {
  if (status_ != NULL) status_->Clear();
  clear_has_status();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoutingResponse::kHeaderFieldNumber;
const int RoutingResponse::kRoadFieldNumber;
const int RoutingResponse::kMeasurementFieldNumber;
const int RoutingResponse::kRoutingRequestFieldNumber;
const int RoutingResponse::kMapVersionFieldNumber;
const int RoutingResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoutingResponse::RoutingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_RoutingResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.routing.RoutingResponse)
}
RoutingResponse::RoutingResponse(const RoutingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      road_(from.road_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_version()) {
    map_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_version_);
  }
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_measurement()) {
    measurement_ = new ::apollo::routing::Measurement(*from.measurement_);
  } else {
    measurement_ = NULL;
  }
  if (from.has_routing_request()) {
    routing_request_ = new ::apollo::routing::RoutingRequest(*from.routing_request_);
  } else {
    routing_request_ = NULL;
  }
  if (from.has_status()) {
    status_ = new ::apollo::common::StatusPb(*from.status_);
  } else {
    status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.routing.RoutingResponse)
}

void RoutingResponse::SharedCtor() {
  map_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

RoutingResponse::~RoutingResponse() {
  // @@protoc_insertion_point(destructor:apollo.routing.RoutingResponse)
  SharedDtor();
}

void RoutingResponse::SharedDtor() {
  map_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete measurement_;
  if (this != internal_default_instance()) delete routing_request_;
  if (this != internal_default_instance()) delete status_;
}

void RoutingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoutingResponse::descriptor() {
  ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoutingResponse& RoutingResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2frouting_2fproto_2frouting_2eproto::scc_info_RoutingResponse.base);
  return *internal_default_instance();
}


void RoutingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.routing.RoutingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      map_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(measurement_ != NULL);
      measurement_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(routing_request_ != NULL);
      routing_request_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(status_ != NULL);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoutingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.routing.RoutingResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.routing.RoadSegment road = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_road()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.routing.Measurement measurement = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_measurement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.routing.RoutingRequest routing_request = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_routing_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes map_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.StatusPb status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.routing.RoutingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.routing.RoutingResponse)
  return false;
#undef DO_
}

void RoutingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.routing.RoutingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // repeated .apollo.routing.RoadSegment road = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->road(static_cast<int>(i)),
      output);
  }

  // optional .apollo.routing.Measurement measurement = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_measurement(), output);
  }

  // optional .apollo.routing.RoutingRequest routing_request = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_routing_request(), output);
  }

  // optional bytes map_version = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->map_version(), output);
  }

  // optional .apollo.common.StatusPb status = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.routing.RoutingResponse)
}

::google::protobuf::uint8* RoutingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.routing.RoutingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // repeated .apollo.routing.RoadSegment road = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->road(static_cast<int>(i)), deterministic, target);
  }

  // optional .apollo.routing.Measurement measurement = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_measurement(), deterministic, target);
  }

  // optional .apollo.routing.RoutingRequest routing_request = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_routing_request(), deterministic, target);
  }

  // optional bytes map_version = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->map_version(), target);
  }

  // optional .apollo.common.StatusPb status = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_status(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.routing.RoutingResponse)
  return target;
}

size_t RoutingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.routing.RoutingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.routing.RoadSegment road = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->road_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->road(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes map_version = 5;
    if (has_map_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_version());
    }

    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.routing.Measurement measurement = 3;
    if (has_measurement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *measurement_);
    }

    // optional .apollo.routing.RoutingRequest routing_request = 4;
    if (has_routing_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *routing_request_);
    }

    // optional .apollo.common.StatusPb status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.routing.RoutingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoutingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.routing.RoutingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.routing.RoutingResponse)
    MergeFrom(*source);
  }
}

void RoutingResponse::MergeFrom(const RoutingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.routing.RoutingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_.MergeFrom(from.road_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_map_version();
      map_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_measurement()->::apollo::routing::Measurement::MergeFrom(from.measurement());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_routing_request()->::apollo::routing::RoutingRequest::MergeFrom(from.routing_request());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_status()->::apollo::common::StatusPb::MergeFrom(from.status());
    }
  }
}

void RoutingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.routing.RoutingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingResponse::CopyFrom(const RoutingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.routing.RoutingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingResponse::IsInitialized() const {
  return true;
}

void RoutingResponse::Swap(RoutingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoutingResponse::InternalSwap(RoutingResponse* other) {
  using std::swap;
  CastToBase(&road_)->InternalSwap(CastToBase(&other->road_));
  map_version_.Swap(&other->map_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(measurement_, other->measurement_);
  swap(routing_request_, other->routing_request_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoutingResponse::GetMetadata() const {
  protobuf_modules_2frouting_2fproto_2frouting_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace routing
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::routing::LaneWaypoint* Arena::CreateMaybeMessage< ::apollo::routing::LaneWaypoint >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::LaneWaypoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::routing::LaneSegment* Arena::CreateMaybeMessage< ::apollo::routing::LaneSegment >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::LaneSegment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::routing::ParkingInfo* Arena::CreateMaybeMessage< ::apollo::routing::ParkingInfo >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::ParkingInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::routing::DeadEndInfo* Arena::CreateMaybeMessage< ::apollo::routing::DeadEndInfo >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::DeadEndInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::routing::RoutingRequest* Arena::CreateMaybeMessage< ::apollo::routing::RoutingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::RoutingRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::routing::Measurement* Arena::CreateMaybeMessage< ::apollo::routing::Measurement >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::Measurement >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::routing::Passage* Arena::CreateMaybeMessage< ::apollo::routing::Passage >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::Passage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::routing::RoadSegment* Arena::CreateMaybeMessage< ::apollo::routing::RoadSegment >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::RoadSegment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::routing::RoutingResponse* Arena::CreateMaybeMessage< ::apollo::routing::RoutingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::routing::RoutingResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
