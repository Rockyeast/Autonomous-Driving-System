// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/rtk_config.proto

#ifndef PROTOBUF_INCLUDED_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto
#define PROTOBUF_INCLUDED_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto 

namespace protobuf_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto
namespace apollo {
namespace localization {
namespace rtk_config {
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace rtk_config
}  // namespace localization
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::localization::rtk_config::Config* Arena::CreateMaybeMessage<::apollo::localization::rtk_config::Config>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace localization {
namespace rtk_config {

// ===================================================================

class Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.localization.rtk_config.Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Config* other);
  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(NULL);
  }

  Config* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string localization_topic = 1;
  bool has_localization_topic() const;
  void clear_localization_topic();
  static const int kLocalizationTopicFieldNumber = 1;
  const ::std::string& localization_topic() const;
  void set_localization_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_localization_topic(::std::string&& value);
  #endif
  void set_localization_topic(const char* value);
  void set_localization_topic(const char* value, size_t size);
  ::std::string* mutable_localization_topic();
  ::std::string* release_localization_topic();
  void set_allocated_localization_topic(::std::string* localization_topic);

  // optional string imu_topic = 2;
  bool has_imu_topic() const;
  void clear_imu_topic();
  static const int kImuTopicFieldNumber = 2;
  const ::std::string& imu_topic() const;
  void set_imu_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_imu_topic(::std::string&& value);
  #endif
  void set_imu_topic(const char* value);
  void set_imu_topic(const char* value, size_t size);
  ::std::string* mutable_imu_topic();
  ::std::string* release_imu_topic();
  void set_allocated_imu_topic(::std::string* imu_topic);

  // optional string gps_topic = 3;
  bool has_gps_topic() const;
  void clear_gps_topic();
  static const int kGpsTopicFieldNumber = 3;
  const ::std::string& gps_topic() const;
  void set_gps_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_gps_topic(::std::string&& value);
  #endif
  void set_gps_topic(const char* value);
  void set_gps_topic(const char* value, size_t size);
  ::std::string* mutable_gps_topic();
  ::std::string* release_gps_topic();
  void set_allocated_gps_topic(::std::string* gps_topic);

  // optional string broadcast_tf_frame_id = 4;
  bool has_broadcast_tf_frame_id() const;
  void clear_broadcast_tf_frame_id();
  static const int kBroadcastTfFrameIdFieldNumber = 4;
  const ::std::string& broadcast_tf_frame_id() const;
  void set_broadcast_tf_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_broadcast_tf_frame_id(::std::string&& value);
  #endif
  void set_broadcast_tf_frame_id(const char* value);
  void set_broadcast_tf_frame_id(const char* value, size_t size);
  ::std::string* mutable_broadcast_tf_frame_id();
  ::std::string* release_broadcast_tf_frame_id();
  void set_allocated_broadcast_tf_frame_id(::std::string* broadcast_tf_frame_id);

  // optional string broadcast_tf_child_frame_id = 5;
  bool has_broadcast_tf_child_frame_id() const;
  void clear_broadcast_tf_child_frame_id();
  static const int kBroadcastTfChildFrameIdFieldNumber = 5;
  const ::std::string& broadcast_tf_child_frame_id() const;
  void set_broadcast_tf_child_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_broadcast_tf_child_frame_id(::std::string&& value);
  #endif
  void set_broadcast_tf_child_frame_id(const char* value);
  void set_broadcast_tf_child_frame_id(const char* value, size_t size);
  ::std::string* mutable_broadcast_tf_child_frame_id();
  ::std::string* release_broadcast_tf_child_frame_id();
  void set_allocated_broadcast_tf_child_frame_id(::std::string* broadcast_tf_child_frame_id);

  // optional string localization_status_topic = 11;
  bool has_localization_status_topic() const;
  void clear_localization_status_topic();
  static const int kLocalizationStatusTopicFieldNumber = 11;
  const ::std::string& localization_status_topic() const;
  void set_localization_status_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_localization_status_topic(::std::string&& value);
  #endif
  void set_localization_status_topic(const char* value);
  void set_localization_status_topic(const char* value, size_t size);
  ::std::string* mutable_localization_status_topic();
  ::std::string* release_localization_status_topic();
  void set_allocated_localization_status_topic(::std::string* localization_status_topic);

  // optional string gps_status_topic = 12;
  bool has_gps_status_topic() const;
  void clear_gps_status_topic();
  static const int kGpsStatusTopicFieldNumber = 12;
  const ::std::string& gps_status_topic() const;
  void set_gps_status_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_gps_status_topic(::std::string&& value);
  #endif
  void set_gps_status_topic(const char* value);
  void set_gps_status_topic(const char* value, size_t size);
  ::std::string* mutable_gps_status_topic();
  ::std::string* release_gps_status_topic();
  void set_allocated_gps_status_topic(::std::string* gps_status_topic);

  // optional double gps_imu_time_diff_threshold = 7;
  bool has_gps_imu_time_diff_threshold() const;
  void clear_gps_imu_time_diff_threshold();
  static const int kGpsImuTimeDiffThresholdFieldNumber = 7;
  double gps_imu_time_diff_threshold() const;
  void set_gps_imu_time_diff_threshold(double value);

  // optional double map_offset_x = 8;
  bool has_map_offset_x() const;
  void clear_map_offset_x();
  static const int kMapOffsetXFieldNumber = 8;
  double map_offset_x() const;
  void set_map_offset_x(double value);

  // optional double map_offset_y = 9;
  bool has_map_offset_y() const;
  void clear_map_offset_y();
  static const int kMapOffsetYFieldNumber = 9;
  double map_offset_y() const;
  void set_map_offset_y(double value);

  // optional double map_offset_z = 10;
  bool has_map_offset_z() const;
  void clear_map_offset_z();
  static const int kMapOffsetZFieldNumber = 10;
  double map_offset_z() const;
  void set_map_offset_z(double value);

  // optional int32 imu_list_max_size = 6;
  bool has_imu_list_max_size() const;
  void clear_imu_list_max_size();
  static const int kImuListMaxSizeFieldNumber = 6;
  ::google::protobuf::int32 imu_list_max_size() const;
  void set_imu_list_max_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.localization.rtk_config.Config)
 private:
  void set_has_localization_topic();
  void clear_has_localization_topic();
  void set_has_localization_status_topic();
  void clear_has_localization_status_topic();
  void set_has_imu_topic();
  void clear_has_imu_topic();
  void set_has_gps_topic();
  void clear_has_gps_topic();
  void set_has_gps_status_topic();
  void clear_has_gps_status_topic();
  void set_has_broadcast_tf_frame_id();
  void clear_has_broadcast_tf_frame_id();
  void set_has_broadcast_tf_child_frame_id();
  void clear_has_broadcast_tf_child_frame_id();
  void set_has_imu_list_max_size();
  void clear_has_imu_list_max_size();
  void set_has_gps_imu_time_diff_threshold();
  void clear_has_gps_imu_time_diff_threshold();
  void set_has_map_offset_x();
  void clear_has_map_offset_x();
  void set_has_map_offset_y();
  void clear_has_map_offset_y();
  void set_has_map_offset_z();
  void clear_has_map_offset_z();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr localization_topic_;
  ::google::protobuf::internal::ArenaStringPtr imu_topic_;
  ::google::protobuf::internal::ArenaStringPtr gps_topic_;
  ::google::protobuf::internal::ArenaStringPtr broadcast_tf_frame_id_;
  ::google::protobuf::internal::ArenaStringPtr broadcast_tf_child_frame_id_;
  ::google::protobuf::internal::ArenaStringPtr localization_status_topic_;
  ::google::protobuf::internal::ArenaStringPtr gps_status_topic_;
  double gps_imu_time_diff_threshold_;
  double map_offset_x_;
  double map_offset_y_;
  double map_offset_z_;
  ::google::protobuf::int32 imu_list_max_size_;
  friend struct ::protobuf_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Config

// optional string localization_topic = 1;
inline bool Config::has_localization_topic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::set_has_localization_topic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config::clear_has_localization_topic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config::clear_localization_topic() {
  localization_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_localization_topic();
}
inline const ::std::string& Config::localization_topic() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.localization_topic)
  return localization_topic_.GetNoArena();
}
inline void Config::set_localization_topic(const ::std::string& value) {
  set_has_localization_topic();
  localization_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.localization_topic)
}
#if LANG_CXX11
inline void Config::set_localization_topic(::std::string&& value) {
  set_has_localization_topic();
  localization_topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.localization.rtk_config.Config.localization_topic)
}
#endif
inline void Config::set_localization_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_localization_topic();
  localization_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.localization.rtk_config.Config.localization_topic)
}
inline void Config::set_localization_topic(const char* value, size_t size) {
  set_has_localization_topic();
  localization_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.localization.rtk_config.Config.localization_topic)
}
inline ::std::string* Config::mutable_localization_topic() {
  set_has_localization_topic();
  // @@protoc_insertion_point(field_mutable:apollo.localization.rtk_config.Config.localization_topic)
  return localization_topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_localization_topic() {
  // @@protoc_insertion_point(field_release:apollo.localization.rtk_config.Config.localization_topic)
  if (!has_localization_topic()) {
    return NULL;
  }
  clear_has_localization_topic();
  return localization_topic_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_localization_topic(::std::string* localization_topic) {
  if (localization_topic != NULL) {
    set_has_localization_topic();
  } else {
    clear_has_localization_topic();
  }
  localization_topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), localization_topic);
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.rtk_config.Config.localization_topic)
}

// optional string localization_status_topic = 11;
inline bool Config::has_localization_status_topic() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Config::set_has_localization_status_topic() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Config::clear_has_localization_status_topic() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Config::clear_localization_status_topic() {
  localization_status_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_localization_status_topic();
}
inline const ::std::string& Config::localization_status_topic() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.localization_status_topic)
  return localization_status_topic_.GetNoArena();
}
inline void Config::set_localization_status_topic(const ::std::string& value) {
  set_has_localization_status_topic();
  localization_status_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.localization_status_topic)
}
#if LANG_CXX11
inline void Config::set_localization_status_topic(::std::string&& value) {
  set_has_localization_status_topic();
  localization_status_topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.localization.rtk_config.Config.localization_status_topic)
}
#endif
inline void Config::set_localization_status_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_localization_status_topic();
  localization_status_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.localization.rtk_config.Config.localization_status_topic)
}
inline void Config::set_localization_status_topic(const char* value, size_t size) {
  set_has_localization_status_topic();
  localization_status_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.localization.rtk_config.Config.localization_status_topic)
}
inline ::std::string* Config::mutable_localization_status_topic() {
  set_has_localization_status_topic();
  // @@protoc_insertion_point(field_mutable:apollo.localization.rtk_config.Config.localization_status_topic)
  return localization_status_topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_localization_status_topic() {
  // @@protoc_insertion_point(field_release:apollo.localization.rtk_config.Config.localization_status_topic)
  if (!has_localization_status_topic()) {
    return NULL;
  }
  clear_has_localization_status_topic();
  return localization_status_topic_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_localization_status_topic(::std::string* localization_status_topic) {
  if (localization_status_topic != NULL) {
    set_has_localization_status_topic();
  } else {
    clear_has_localization_status_topic();
  }
  localization_status_topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), localization_status_topic);
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.rtk_config.Config.localization_status_topic)
}

// optional string imu_topic = 2;
inline bool Config::has_imu_topic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::set_has_imu_topic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config::clear_has_imu_topic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config::clear_imu_topic() {
  imu_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imu_topic();
}
inline const ::std::string& Config::imu_topic() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.imu_topic)
  return imu_topic_.GetNoArena();
}
inline void Config::set_imu_topic(const ::std::string& value) {
  set_has_imu_topic();
  imu_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.imu_topic)
}
#if LANG_CXX11
inline void Config::set_imu_topic(::std::string&& value) {
  set_has_imu_topic();
  imu_topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.localization.rtk_config.Config.imu_topic)
}
#endif
inline void Config::set_imu_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_imu_topic();
  imu_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.localization.rtk_config.Config.imu_topic)
}
inline void Config::set_imu_topic(const char* value, size_t size) {
  set_has_imu_topic();
  imu_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.localization.rtk_config.Config.imu_topic)
}
inline ::std::string* Config::mutable_imu_topic() {
  set_has_imu_topic();
  // @@protoc_insertion_point(field_mutable:apollo.localization.rtk_config.Config.imu_topic)
  return imu_topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_imu_topic() {
  // @@protoc_insertion_point(field_release:apollo.localization.rtk_config.Config.imu_topic)
  if (!has_imu_topic()) {
    return NULL;
  }
  clear_has_imu_topic();
  return imu_topic_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_imu_topic(::std::string* imu_topic) {
  if (imu_topic != NULL) {
    set_has_imu_topic();
  } else {
    clear_has_imu_topic();
  }
  imu_topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imu_topic);
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.rtk_config.Config.imu_topic)
}

// optional string gps_topic = 3;
inline bool Config::has_gps_topic() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Config::set_has_gps_topic() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Config::clear_has_gps_topic() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Config::clear_gps_topic() {
  gps_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gps_topic();
}
inline const ::std::string& Config::gps_topic() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.gps_topic)
  return gps_topic_.GetNoArena();
}
inline void Config::set_gps_topic(const ::std::string& value) {
  set_has_gps_topic();
  gps_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.gps_topic)
}
#if LANG_CXX11
inline void Config::set_gps_topic(::std::string&& value) {
  set_has_gps_topic();
  gps_topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.localization.rtk_config.Config.gps_topic)
}
#endif
inline void Config::set_gps_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gps_topic();
  gps_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.localization.rtk_config.Config.gps_topic)
}
inline void Config::set_gps_topic(const char* value, size_t size) {
  set_has_gps_topic();
  gps_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.localization.rtk_config.Config.gps_topic)
}
inline ::std::string* Config::mutable_gps_topic() {
  set_has_gps_topic();
  // @@protoc_insertion_point(field_mutable:apollo.localization.rtk_config.Config.gps_topic)
  return gps_topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_gps_topic() {
  // @@protoc_insertion_point(field_release:apollo.localization.rtk_config.Config.gps_topic)
  if (!has_gps_topic()) {
    return NULL;
  }
  clear_has_gps_topic();
  return gps_topic_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_gps_topic(::std::string* gps_topic) {
  if (gps_topic != NULL) {
    set_has_gps_topic();
  } else {
    clear_has_gps_topic();
  }
  gps_topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gps_topic);
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.rtk_config.Config.gps_topic)
}

// optional string gps_status_topic = 12;
inline bool Config::has_gps_status_topic() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Config::set_has_gps_status_topic() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Config::clear_has_gps_status_topic() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Config::clear_gps_status_topic() {
  gps_status_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gps_status_topic();
}
inline const ::std::string& Config::gps_status_topic() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.gps_status_topic)
  return gps_status_topic_.GetNoArena();
}
inline void Config::set_gps_status_topic(const ::std::string& value) {
  set_has_gps_status_topic();
  gps_status_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.gps_status_topic)
}
#if LANG_CXX11
inline void Config::set_gps_status_topic(::std::string&& value) {
  set_has_gps_status_topic();
  gps_status_topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.localization.rtk_config.Config.gps_status_topic)
}
#endif
inline void Config::set_gps_status_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gps_status_topic();
  gps_status_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.localization.rtk_config.Config.gps_status_topic)
}
inline void Config::set_gps_status_topic(const char* value, size_t size) {
  set_has_gps_status_topic();
  gps_status_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.localization.rtk_config.Config.gps_status_topic)
}
inline ::std::string* Config::mutable_gps_status_topic() {
  set_has_gps_status_topic();
  // @@protoc_insertion_point(field_mutable:apollo.localization.rtk_config.Config.gps_status_topic)
  return gps_status_topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_gps_status_topic() {
  // @@protoc_insertion_point(field_release:apollo.localization.rtk_config.Config.gps_status_topic)
  if (!has_gps_status_topic()) {
    return NULL;
  }
  clear_has_gps_status_topic();
  return gps_status_topic_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_gps_status_topic(::std::string* gps_status_topic) {
  if (gps_status_topic != NULL) {
    set_has_gps_status_topic();
  } else {
    clear_has_gps_status_topic();
  }
  gps_status_topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gps_status_topic);
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.rtk_config.Config.gps_status_topic)
}

// optional string broadcast_tf_frame_id = 4;
inline bool Config::has_broadcast_tf_frame_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Config::set_has_broadcast_tf_frame_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Config::clear_has_broadcast_tf_frame_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Config::clear_broadcast_tf_frame_id() {
  broadcast_tf_frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_broadcast_tf_frame_id();
}
inline const ::std::string& Config::broadcast_tf_frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.broadcast_tf_frame_id)
  return broadcast_tf_frame_id_.GetNoArena();
}
inline void Config::set_broadcast_tf_frame_id(const ::std::string& value) {
  set_has_broadcast_tf_frame_id();
  broadcast_tf_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.broadcast_tf_frame_id)
}
#if LANG_CXX11
inline void Config::set_broadcast_tf_frame_id(::std::string&& value) {
  set_has_broadcast_tf_frame_id();
  broadcast_tf_frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.localization.rtk_config.Config.broadcast_tf_frame_id)
}
#endif
inline void Config::set_broadcast_tf_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_broadcast_tf_frame_id();
  broadcast_tf_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.localization.rtk_config.Config.broadcast_tf_frame_id)
}
inline void Config::set_broadcast_tf_frame_id(const char* value, size_t size) {
  set_has_broadcast_tf_frame_id();
  broadcast_tf_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.localization.rtk_config.Config.broadcast_tf_frame_id)
}
inline ::std::string* Config::mutable_broadcast_tf_frame_id() {
  set_has_broadcast_tf_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.localization.rtk_config.Config.broadcast_tf_frame_id)
  return broadcast_tf_frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_broadcast_tf_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.localization.rtk_config.Config.broadcast_tf_frame_id)
  if (!has_broadcast_tf_frame_id()) {
    return NULL;
  }
  clear_has_broadcast_tf_frame_id();
  return broadcast_tf_frame_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_broadcast_tf_frame_id(::std::string* broadcast_tf_frame_id) {
  if (broadcast_tf_frame_id != NULL) {
    set_has_broadcast_tf_frame_id();
  } else {
    clear_has_broadcast_tf_frame_id();
  }
  broadcast_tf_frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broadcast_tf_frame_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.rtk_config.Config.broadcast_tf_frame_id)
}

// optional string broadcast_tf_child_frame_id = 5;
inline bool Config::has_broadcast_tf_child_frame_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Config::set_has_broadcast_tf_child_frame_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Config::clear_has_broadcast_tf_child_frame_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Config::clear_broadcast_tf_child_frame_id() {
  broadcast_tf_child_frame_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_broadcast_tf_child_frame_id();
}
inline const ::std::string& Config::broadcast_tf_child_frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.broadcast_tf_child_frame_id)
  return broadcast_tf_child_frame_id_.GetNoArena();
}
inline void Config::set_broadcast_tf_child_frame_id(const ::std::string& value) {
  set_has_broadcast_tf_child_frame_id();
  broadcast_tf_child_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.broadcast_tf_child_frame_id)
}
#if LANG_CXX11
inline void Config::set_broadcast_tf_child_frame_id(::std::string&& value) {
  set_has_broadcast_tf_child_frame_id();
  broadcast_tf_child_frame_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.localization.rtk_config.Config.broadcast_tf_child_frame_id)
}
#endif
inline void Config::set_broadcast_tf_child_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_broadcast_tf_child_frame_id();
  broadcast_tf_child_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.localization.rtk_config.Config.broadcast_tf_child_frame_id)
}
inline void Config::set_broadcast_tf_child_frame_id(const char* value, size_t size) {
  set_has_broadcast_tf_child_frame_id();
  broadcast_tf_child_frame_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.localization.rtk_config.Config.broadcast_tf_child_frame_id)
}
inline ::std::string* Config::mutable_broadcast_tf_child_frame_id() {
  set_has_broadcast_tf_child_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.localization.rtk_config.Config.broadcast_tf_child_frame_id)
  return broadcast_tf_child_frame_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_broadcast_tf_child_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.localization.rtk_config.Config.broadcast_tf_child_frame_id)
  if (!has_broadcast_tf_child_frame_id()) {
    return NULL;
  }
  clear_has_broadcast_tf_child_frame_id();
  return broadcast_tf_child_frame_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_broadcast_tf_child_frame_id(::std::string* broadcast_tf_child_frame_id) {
  if (broadcast_tf_child_frame_id != NULL) {
    set_has_broadcast_tf_child_frame_id();
  } else {
    clear_has_broadcast_tf_child_frame_id();
  }
  broadcast_tf_child_frame_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), broadcast_tf_child_frame_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.rtk_config.Config.broadcast_tf_child_frame_id)
}

// optional int32 imu_list_max_size = 6;
inline bool Config::has_imu_list_max_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Config::set_has_imu_list_max_size() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Config::clear_has_imu_list_max_size() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Config::clear_imu_list_max_size() {
  imu_list_max_size_ = 0;
  clear_has_imu_list_max_size();
}
inline ::google::protobuf::int32 Config::imu_list_max_size() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.imu_list_max_size)
  return imu_list_max_size_;
}
inline void Config::set_imu_list_max_size(::google::protobuf::int32 value) {
  set_has_imu_list_max_size();
  imu_list_max_size_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.imu_list_max_size)
}

// optional double gps_imu_time_diff_threshold = 7;
inline bool Config::has_gps_imu_time_diff_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Config::set_has_gps_imu_time_diff_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Config::clear_has_gps_imu_time_diff_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Config::clear_gps_imu_time_diff_threshold() {
  gps_imu_time_diff_threshold_ = 0;
  clear_has_gps_imu_time_diff_threshold();
}
inline double Config::gps_imu_time_diff_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.gps_imu_time_diff_threshold)
  return gps_imu_time_diff_threshold_;
}
inline void Config::set_gps_imu_time_diff_threshold(double value) {
  set_has_gps_imu_time_diff_threshold();
  gps_imu_time_diff_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.gps_imu_time_diff_threshold)
}

// optional double map_offset_x = 8;
inline bool Config::has_map_offset_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Config::set_has_map_offset_x() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Config::clear_has_map_offset_x() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Config::clear_map_offset_x() {
  map_offset_x_ = 0;
  clear_has_map_offset_x();
}
inline double Config::map_offset_x() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.map_offset_x)
  return map_offset_x_;
}
inline void Config::set_map_offset_x(double value) {
  set_has_map_offset_x();
  map_offset_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.map_offset_x)
}

// optional double map_offset_y = 9;
inline bool Config::has_map_offset_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Config::set_has_map_offset_y() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Config::clear_has_map_offset_y() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Config::clear_map_offset_y() {
  map_offset_y_ = 0;
  clear_has_map_offset_y();
}
inline double Config::map_offset_y() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.map_offset_y)
  return map_offset_y_;
}
inline void Config::set_map_offset_y(double value) {
  set_has_map_offset_y();
  map_offset_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.map_offset_y)
}

// optional double map_offset_z = 10;
inline bool Config::has_map_offset_z() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Config::set_has_map_offset_z() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Config::clear_has_map_offset_z() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Config::clear_map_offset_z() {
  map_offset_z_ = 0;
  clear_has_map_offset_z();
}
inline double Config::map_offset_z() const {
  // @@protoc_insertion_point(field_get:apollo.localization.rtk_config.Config.map_offset_z)
  return map_offset_z_;
}
inline void Config::set_map_offset_z(double value) {
  set_has_map_offset_z();
  map_offset_z_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.rtk_config.Config.map_offset_z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace rtk_config
}  // namespace localization
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2flocalization_2fproto_2frtk_5fconfig_2eproto
