// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss.proto

#ifndef PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto
#define PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto 

namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto
namespace apollo {
namespace drivers {
namespace gnss {
class Gnss;
class GnssDefaultTypeInternal;
extern GnssDefaultTypeInternal _Gnss_default_instance_;
class RawData;
class RawDataDefaultTypeInternal;
extern RawDataDefaultTypeInternal _RawData_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::drivers::gnss::Gnss* Arena::CreateMaybeMessage<::apollo::drivers::gnss::Gnss>(Arena*);
template<> ::apollo::drivers::gnss::RawData* Arena::CreateMaybeMessage<::apollo::drivers::gnss::RawData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace drivers {
namespace gnss {

enum Gnss_Type {
  Gnss_Type_INVALID = 0,
  Gnss_Type_PROPAGATED = 1,
  Gnss_Type_SINGLE = 2,
  Gnss_Type_PSRDIFF = 3,
  Gnss_Type_PPP = 4,
  Gnss_Type_RTK_FLOAT = 5,
  Gnss_Type_RTK_INTEGER = 6
};
bool Gnss_Type_IsValid(int value);
const Gnss_Type Gnss_Type_Type_MIN = Gnss_Type_INVALID;
const Gnss_Type Gnss_Type_Type_MAX = Gnss_Type_RTK_INTEGER;
const int Gnss_Type_Type_ARRAYSIZE = Gnss_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gnss_Type_descriptor();
inline const ::std::string& Gnss_Type_Name(Gnss_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gnss_Type_descriptor(), value);
}
inline bool Gnss_Type_Parse(
    const ::std::string& name, Gnss_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gnss_Type>(
    Gnss_Type_descriptor(), name, value);
}
// ===================================================================

class Gnss : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.Gnss) */ {
 public:
  Gnss();
  virtual ~Gnss();

  Gnss(const Gnss& from);

  inline Gnss& operator=(const Gnss& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Gnss(Gnss&& from) noexcept
    : Gnss() {
    *this = ::std::move(from);
  }

  inline Gnss& operator=(Gnss&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gnss& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Gnss* internal_default_instance() {
    return reinterpret_cast<const Gnss*>(
               &_Gnss_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Gnss* other);
  friend void swap(Gnss& a, Gnss& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Gnss* New() const final {
    return CreateMaybeMessage<Gnss>(NULL);
  }

  Gnss* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Gnss>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Gnss& from);
  void MergeFrom(const Gnss& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Gnss* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Gnss_Type Type;
  static const Type INVALID =
    Gnss_Type_INVALID;
  static const Type PROPAGATED =
    Gnss_Type_PROPAGATED;
  static const Type SINGLE =
    Gnss_Type_SINGLE;
  static const Type PSRDIFF =
    Gnss_Type_PSRDIFF;
  static const Type PPP =
    Gnss_Type_PPP;
  static const Type RTK_FLOAT =
    Gnss_Type_RTK_FLOAT;
  static const Type RTK_INTEGER =
    Gnss_Type_RTK_INTEGER;
  static inline bool Type_IsValid(int value) {
    return Gnss_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Gnss_Type_Type_MIN;
  static const Type Type_MAX =
    Gnss_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Gnss_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Gnss_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Gnss_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Gnss_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::apollo::common::Header& _internal_header() const;
  public:
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.common.PointLLH position = 4;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 4;
  private:
  const ::apollo::common::PointLLH& _internal_position() const;
  public:
  const ::apollo::common::PointLLH& position() const;
  ::apollo::common::PointLLH* release_position();
  ::apollo::common::PointLLH* mutable_position();
  void set_allocated_position(::apollo::common::PointLLH* position);

  // optional .apollo.common.Point3D position_std_dev = 5;
  bool has_position_std_dev() const;
  void clear_position_std_dev();
  static const int kPositionStdDevFieldNumber = 5;
  private:
  const ::apollo::common::Point3D& _internal_position_std_dev() const;
  public:
  const ::apollo::common::Point3D& position_std_dev() const;
  ::apollo::common::Point3D* release_position_std_dev();
  ::apollo::common::Point3D* mutable_position_std_dev();
  void set_allocated_position_std_dev(::apollo::common::Point3D* position_std_dev);

  // optional .apollo.common.Point3D linear_velocity = 6;
  bool has_linear_velocity() const;
  void clear_linear_velocity();
  static const int kLinearVelocityFieldNumber = 6;
  private:
  const ::apollo::common::Point3D& _internal_linear_velocity() const;
  public:
  const ::apollo::common::Point3D& linear_velocity() const;
  ::apollo::common::Point3D* release_linear_velocity();
  ::apollo::common::Point3D* mutable_linear_velocity();
  void set_allocated_linear_velocity(::apollo::common::Point3D* linear_velocity);

  // optional .apollo.common.Point3D linear_velocity_std_dev = 7;
  bool has_linear_velocity_std_dev() const;
  void clear_linear_velocity_std_dev();
  static const int kLinearVelocityStdDevFieldNumber = 7;
  private:
  const ::apollo::common::Point3D& _internal_linear_velocity_std_dev() const;
  public:
  const ::apollo::common::Point3D& linear_velocity_std_dev() const;
  ::apollo::common::Point3D* release_linear_velocity_std_dev();
  ::apollo::common::Point3D* mutable_linear_velocity_std_dev();
  void set_allocated_linear_velocity_std_dev(::apollo::common::Point3D* linear_velocity_std_dev);

  // optional double measurement_time = 2;
  bool has_measurement_time() const;
  void clear_measurement_time();
  static const int kMeasurementTimeFieldNumber = 2;
  double measurement_time() const;
  void set_measurement_time(double value);

  // optional float velocity_latency = 3 [default = 0];
  bool has_velocity_latency() const;
  void clear_velocity_latency();
  static const int kVelocityLatencyFieldNumber = 3;
  float velocity_latency() const;
  void set_velocity_latency(float value);

  // optional int32 num_sats = 8;
  bool has_num_sats() const;
  void clear_num_sats();
  static const int kNumSatsFieldNumber = 8;
  ::google::protobuf::int32 num_sats() const;
  void set_num_sats(::google::protobuf::int32 value);

  // optional .apollo.drivers.gnss.Gnss.Type type = 9;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 9;
  ::apollo::drivers::gnss::Gnss_Type type() const;
  void set_type(::apollo::drivers::gnss::Gnss_Type value);

  // optional uint32 solution_status = 10;
  bool has_solution_status() const;
  void clear_solution_status();
  static const int kSolutionStatusFieldNumber = 10;
  ::google::protobuf::uint32 solution_status() const;
  void set_solution_status(::google::protobuf::uint32 value);

  // optional uint32 position_type = 11;
  bool has_position_type() const;
  void clear_position_type();
  static const int kPositionTypeFieldNumber = 11;
  ::google::protobuf::uint32 position_type() const;
  void set_position_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.Gnss)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_measurement_time();
  void clear_has_measurement_time();
  void set_has_velocity_latency();
  void clear_has_velocity_latency();
  void set_has_position();
  void clear_has_position();
  void set_has_position_std_dev();
  void clear_has_position_std_dev();
  void set_has_linear_velocity();
  void clear_has_linear_velocity();
  void set_has_linear_velocity_std_dev();
  void clear_has_linear_velocity_std_dev();
  void set_has_num_sats();
  void clear_has_num_sats();
  void set_has_type();
  void clear_has_type();
  void set_has_solution_status();
  void clear_has_solution_status();
  void set_has_position_type();
  void clear_has_position_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::common::Header* header_;
  ::apollo::common::PointLLH* position_;
  ::apollo::common::Point3D* position_std_dev_;
  ::apollo::common::Point3D* linear_velocity_;
  ::apollo::common::Point3D* linear_velocity_std_dev_;
  double measurement_time_;
  float velocity_latency_;
  ::google::protobuf::int32 num_sats_;
  int type_;
  ::google::protobuf::uint32 solution_status_;
  ::google::protobuf::uint32 position_type_;
  friend struct ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RawData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.RawData) */ {
 public:
  RawData();
  virtual ~RawData();

  RawData(const RawData& from);

  inline RawData& operator=(const RawData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RawData(RawData&& from) noexcept
    : RawData() {
    *this = ::std::move(from);
  }

  inline RawData& operator=(RawData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RawData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RawData* internal_default_instance() {
    return reinterpret_cast<const RawData*>(
               &_RawData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RawData* other);
  friend void swap(RawData& a, RawData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RawData* New() const final {
    return CreateMaybeMessage<RawData>(NULL);
  }

  RawData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RawData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RawData& from);
  void MergeFrom(const RawData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RawData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::apollo::common::Header& _internal_header() const;
  public:
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.RawData)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::apollo::common::Header* header_;
  friend struct ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Gnss

// optional .apollo.common.Header header = 1;
inline bool Gnss::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gnss::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gnss::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::common::Header& Gnss::_internal_header() const {
  return *header_;
}
inline const ::apollo::common::Header& Gnss::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* Gnss::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Gnss.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::common::Header* Gnss::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Gnss.header)
  return header_;
}
inline void Gnss::set_allocated_header(::apollo::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Gnss.header)
}

// optional double measurement_time = 2;
inline bool Gnss::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gnss::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gnss::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gnss::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
inline double Gnss::measurement_time() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.measurement_time)
  return measurement_time_;
}
inline void Gnss::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Gnss.measurement_time)
}

// optional float velocity_latency = 3 [default = 0];
inline bool Gnss::has_velocity_latency() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gnss::set_has_velocity_latency() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gnss::clear_has_velocity_latency() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gnss::clear_velocity_latency() {
  velocity_latency_ = 0;
  clear_has_velocity_latency();
}
inline float Gnss::velocity_latency() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.velocity_latency)
  return velocity_latency_;
}
inline void Gnss::set_velocity_latency(float value) {
  set_has_velocity_latency();
  velocity_latency_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Gnss.velocity_latency)
}

// optional .apollo.common.PointLLH position = 4;
inline bool Gnss::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gnss::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gnss::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::common::PointLLH& Gnss::_internal_position() const {
  return *position_;
}
inline const ::apollo::common::PointLLH& Gnss::position() const {
  const ::apollo::common::PointLLH* p = position_;
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.position)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::PointLLH*>(
      &::apollo::common::_PointLLH_default_instance_);
}
inline ::apollo::common::PointLLH* Gnss::release_position() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Gnss.position)
  clear_has_position();
  ::apollo::common::PointLLH* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::apollo::common::PointLLH* Gnss::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::PointLLH>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Gnss.position)
  return position_;
}
inline void Gnss::set_allocated_position(::apollo::common::PointLLH* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
  } else {
    clear_has_position();
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Gnss.position)
}

// optional .apollo.common.Point3D position_std_dev = 5;
inline bool Gnss::has_position_std_dev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gnss::set_has_position_std_dev() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gnss::clear_has_position_std_dev() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::common::Point3D& Gnss::_internal_position_std_dev() const {
  return *position_std_dev_;
}
inline const ::apollo::common::Point3D& Gnss::position_std_dev() const {
  const ::apollo::common::Point3D* p = position_std_dev_;
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.position_std_dev)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline ::apollo::common::Point3D* Gnss::release_position_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Gnss.position_std_dev)
  clear_has_position_std_dev();
  ::apollo::common::Point3D* temp = position_std_dev_;
  position_std_dev_ = NULL;
  return temp;
}
inline ::apollo::common::Point3D* Gnss::mutable_position_std_dev() {
  set_has_position_std_dev();
  if (position_std_dev_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    position_std_dev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Gnss.position_std_dev)
  return position_std_dev_;
}
inline void Gnss::set_allocated_position_std_dev(::apollo::common::Point3D* position_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_std_dev_);
  }
  if (position_std_dev) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position_std_dev, submessage_arena);
    }
    set_has_position_std_dev();
  } else {
    clear_has_position_std_dev();
  }
  position_std_dev_ = position_std_dev;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Gnss.position_std_dev)
}

// optional .apollo.common.Point3D linear_velocity = 6;
inline bool Gnss::has_linear_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gnss::set_has_linear_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gnss::clear_has_linear_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::common::Point3D& Gnss::_internal_linear_velocity() const {
  return *linear_velocity_;
}
inline const ::apollo::common::Point3D& Gnss::linear_velocity() const {
  const ::apollo::common::Point3D* p = linear_velocity_;
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.linear_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline ::apollo::common::Point3D* Gnss::release_linear_velocity() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Gnss.linear_velocity)
  clear_has_linear_velocity();
  ::apollo::common::Point3D* temp = linear_velocity_;
  linear_velocity_ = NULL;
  return temp;
}
inline ::apollo::common::Point3D* Gnss::mutable_linear_velocity() {
  set_has_linear_velocity();
  if (linear_velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    linear_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Gnss.linear_velocity)
  return linear_velocity_;
}
inline void Gnss::set_allocated_linear_velocity(::apollo::common::Point3D* linear_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_velocity_);
  }
  if (linear_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_velocity, submessage_arena);
    }
    set_has_linear_velocity();
  } else {
    clear_has_linear_velocity();
  }
  linear_velocity_ = linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Gnss.linear_velocity)
}

// optional .apollo.common.Point3D linear_velocity_std_dev = 7;
inline bool Gnss::has_linear_velocity_std_dev() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gnss::set_has_linear_velocity_std_dev() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gnss::clear_has_linear_velocity_std_dev() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::apollo::common::Point3D& Gnss::_internal_linear_velocity_std_dev() const {
  return *linear_velocity_std_dev_;
}
inline const ::apollo::common::Point3D& Gnss::linear_velocity_std_dev() const {
  const ::apollo::common::Point3D* p = linear_velocity_std_dev_;
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.linear_velocity_std_dev)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline ::apollo::common::Point3D* Gnss::release_linear_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.Gnss.linear_velocity_std_dev)
  clear_has_linear_velocity_std_dev();
  ::apollo::common::Point3D* temp = linear_velocity_std_dev_;
  linear_velocity_std_dev_ = NULL;
  return temp;
}
inline ::apollo::common::Point3D* Gnss::mutable_linear_velocity_std_dev() {
  set_has_linear_velocity_std_dev();
  if (linear_velocity_std_dev_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    linear_velocity_std_dev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.Gnss.linear_velocity_std_dev)
  return linear_velocity_std_dev_;
}
inline void Gnss::set_allocated_linear_velocity_std_dev(::apollo::common::Point3D* linear_velocity_std_dev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(linear_velocity_std_dev_);
  }
  if (linear_velocity_std_dev) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear_velocity_std_dev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_velocity_std_dev, submessage_arena);
    }
    set_has_linear_velocity_std_dev();
  } else {
    clear_has_linear_velocity_std_dev();
  }
  linear_velocity_std_dev_ = linear_velocity_std_dev;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.Gnss.linear_velocity_std_dev)
}

// optional int32 num_sats = 8;
inline bool Gnss::has_num_sats() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gnss::set_has_num_sats() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gnss::clear_has_num_sats() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gnss::clear_num_sats() {
  num_sats_ = 0;
  clear_has_num_sats();
}
inline ::google::protobuf::int32 Gnss::num_sats() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.num_sats)
  return num_sats_;
}
inline void Gnss::set_num_sats(::google::protobuf::int32 value) {
  set_has_num_sats();
  num_sats_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Gnss.num_sats)
}

// optional .apollo.drivers.gnss.Gnss.Type type = 9;
inline bool Gnss::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gnss::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gnss::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gnss::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::apollo::drivers::gnss::Gnss_Type Gnss::type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.type)
  return static_cast< ::apollo::drivers::gnss::Gnss_Type >(type_);
}
inline void Gnss::set_type(::apollo::drivers::gnss::Gnss_Type value) {
  assert(::apollo::drivers::gnss::Gnss_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Gnss.type)
}

// optional uint32 solution_status = 10;
inline bool Gnss::has_solution_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Gnss::set_has_solution_status() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Gnss::clear_has_solution_status() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Gnss::clear_solution_status() {
  solution_status_ = 0u;
  clear_has_solution_status();
}
inline ::google::protobuf::uint32 Gnss::solution_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.solution_status)
  return solution_status_;
}
inline void Gnss::set_solution_status(::google::protobuf::uint32 value) {
  set_has_solution_status();
  solution_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Gnss.solution_status)
}

// optional uint32 position_type = 11;
inline bool Gnss::has_position_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Gnss::set_has_position_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Gnss::clear_has_position_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Gnss::clear_position_type() {
  position_type_ = 0u;
  clear_has_position_type();
}
inline ::google::protobuf::uint32 Gnss::position_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.Gnss.position_type)
  return position_type_;
}
inline void Gnss::set_position_type(::google::protobuf::uint32 value) {
  set_has_position_type();
  position_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.Gnss.position_type)
}

// -------------------------------------------------------------------

// RawData

// optional .apollo.common.Header header = 1;
inline bool RawData::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RawData::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RawData::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::common::Header& RawData::_internal_header() const {
  return *header_;
}
inline const ::apollo::common::Header& RawData::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RawData.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* RawData::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.RawData.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::common::Header* RawData::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.RawData.header)
  return header_;
}
inline void RawData::set_allocated_header(::apollo::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.RawData.header)
}

// optional bytes data = 2;
inline bool RawData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RawData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RawData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RawData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& RawData::data() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.RawData.data)
  return data_.GetNoArena();
}
inline void RawData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.RawData.data)
}
#if LANG_CXX11
inline void RawData::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.gnss.RawData.data)
}
#endif
inline void RawData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.gnss.RawData.data)
}
inline void RawData::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.gnss.RawData.data)
}
inline ::std::string* RawData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.RawData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RawData::release_data() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.RawData.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RawData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.RawData.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss
}  // namespace drivers
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::drivers::gnss::Gnss_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::Gnss_Type>() {
  return ::apollo::drivers::gnss::Gnss_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto
