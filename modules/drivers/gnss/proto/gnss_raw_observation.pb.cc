// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss_raw_observation.proto

#include "modules/drivers/gnss/proto/gnss_raw_observation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BandObservation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GlonassOrbit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KepplerOrbit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SatelliteObservation;
}  // namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto
namespace apollo {
namespace drivers {
namespace gnss {
class BandObservationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BandObservation>
      _instance;
} _BandObservation_default_instance_;
class SatelliteObservationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SatelliteObservation>
      _instance;
} _SatelliteObservation_default_instance_;
class EpochObservationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EpochObservation>
      _instance;
} _EpochObservation_default_instance_;
class KepplerOrbitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KepplerOrbit>
      _instance;
} _KepplerOrbit_default_instance_;
class GlonassOrbitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GlonassOrbit>
      _instance;
} _GlonassOrbit_default_instance_;
class GnssEphemerisDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GnssEphemeris>
      _instance;
} _GnssEphemeris_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto {
static void InitDefaultsBandObservation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::_BandObservation_default_instance_;
    new (ptr) ::apollo::drivers::gnss::BandObservation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::BandObservation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BandObservation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBandObservation}, {}};

static void InitDefaultsSatelliteObservation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::_SatelliteObservation_default_instance_;
    new (ptr) ::apollo::drivers::gnss::SatelliteObservation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::SatelliteObservation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SatelliteObservation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSatelliteObservation}, {
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::scc_info_BandObservation.base,}};

static void InitDefaultsEpochObservation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::_EpochObservation_default_instance_;
    new (ptr) ::apollo::drivers::gnss::EpochObservation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::EpochObservation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EpochObservation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEpochObservation}, {
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::scc_info_SatelliteObservation.base,}};

static void InitDefaultsKepplerOrbit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::_KepplerOrbit_default_instance_;
    new (ptr) ::apollo::drivers::gnss::KepplerOrbit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::KepplerOrbit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KepplerOrbit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKepplerOrbit}, {}};

static void InitDefaultsGlonassOrbit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::_GlonassOrbit_default_instance_;
    new (ptr) ::apollo::drivers::gnss::GlonassOrbit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::GlonassOrbit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GlonassOrbit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGlonassOrbit}, {}};

static void InitDefaultsGnssEphemeris() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::_GnssEphemeris_default_instance_;
    new (ptr) ::apollo::drivers::gnss::GnssEphemeris();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::GnssEphemeris::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GnssEphemeris =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGnssEphemeris}, {
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::scc_info_KepplerOrbit.base,
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::scc_info_GlonassOrbit.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_BandObservation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SatelliteObservation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EpochObservation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KepplerOrbit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GlonassOrbit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GnssEphemeris.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::BandObservation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::BandObservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::BandObservation, band_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::BandObservation, frequency_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::BandObservation, pseudo_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::BandObservation, pseudo_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::BandObservation, carrier_phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::BandObservation, loss_lock_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::BandObservation, doppler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::BandObservation, snr_),
  1,
  0,
  2,
  3,
  4,
  6,
  5,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::SatelliteObservation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::SatelliteObservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::SatelliteObservation, sat_prn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::SatelliteObservation, sat_sys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::SatelliteObservation, band_obs_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::SatelliteObservation, band_obs_),
  0,
  2,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, receiver_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, gnss_time_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, gnss_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, gnss_second_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, position_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, position_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, position_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, health_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, sat_obs_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::EpochObservation, sat_obs_),
  0,
  8,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, gnss_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, sat_prn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, gnss_time_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, hour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, minute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, second_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, week_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, reserved_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, af0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, af1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, af2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, iode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, deltan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, m0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, e_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, roota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, toe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, toc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, cic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, cis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, crs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, cuc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, cus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, omega0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, omega_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, i0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, omegadot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, idot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, codesonl2channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, l2pdataflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, tgd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::KepplerOrbit, iodc_),
  36,
  0,
  37,
  1,
  2,
  3,
  4,
  5,
  6,
  19,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  20,
  32,
  33,
  34,
  35,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, gnss_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, slot_prn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, gnss_time_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, toe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, hour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, minute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, second_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, frequency_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, week_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, week_second_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, tk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, clock_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, clock_drift_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, position_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, position_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, position_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, velocity_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, velocity_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, velocity_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, accelerate_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, accelerate_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, accelerate_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, infor_age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GlonassOrbit, sat_prn_),
  26,
  0,
  27,
  2,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  19,
  14,
  15,
  16,
  17,
  18,
  21,
  22,
  23,
  24,
  25,
  20,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssEphemeris, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssEphemeris, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssEphemeris, gnss_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssEphemeris, keppler_orbit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssEphemeris, glonass_orbit_),
  2,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::apollo::drivers::gnss::BandObservation)},
  { 21, 30, sizeof(::apollo::drivers::gnss::SatelliteObservation)},
  { 34, 49, sizeof(::apollo::drivers::gnss::EpochObservation)},
  { 59, 102, sizeof(::apollo::drivers::gnss::KepplerOrbit)},
  { 140, 173, sizeof(::apollo::drivers::gnss::GlonassOrbit)},
  { 201, 209, sizeof(::apollo::drivers::gnss::GnssEphemeris)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::_BandObservation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::_SatelliteObservation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::_EpochObservation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::_KepplerOrbit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::_GlonassOrbit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::_GnssEphemeris_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/drivers/gnss/proto/gnss_raw_observation.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n5modules/drivers/gnss/proto/gnss_raw_ob"
      "servation.proto\022\023apollo.drivers.gnss\"\222\002\n"
      "\017BandObservation\022>\n\007band_id\030\001 \001(\0162\037.apol"
      "lo.drivers.gnss.GnssBandID:\014BAND_UNKNOWN"
      "\022\027\n\017frequency_value\030\002 \001(\001\022B\n\013pseudo_type"
      "\030\003 \001(\0162\037.apollo.drivers.gnss.PseudoType:"
      "\014CODE_UNKNOWN\022\024\n\014pseudo_range\030\004 \001(\001\022\025\n\rc"
      "arrier_phase\030\005 \001(\001\022\027\n\017loss_lock_index\030\006 "
      "\001(\r\022\017\n\007doppler\030\007 \001(\001\022\013\n\003snr\030\010 \001(\002\"\256\001\n\024Sa"
      "telliteObservation\022\017\n\007sat_prn\030\001 \001(\r\0227\n\007s"
      "at_sys\030\002 \001(\0162\035.apollo.drivers.gnss.GnssT"
      "ype:\007GPS_SYS\022\024\n\014band_obs_num\030\003 \001(\r\0226\n\010ba"
      "nd_obs\030\004 \003(\0132$.apollo.drivers.gnss.BandO"
      "bservation\"\273\002\n\020EpochObservation\022\023\n\013recei"
      "ver_id\030\001 \001(\r\022C\n\016gnss_time_type\030\002 \001(\0162!.a"
      "pollo.drivers.gnss.GnssTimeType:\010GPS_TIM"
      "E\022\021\n\tgnss_week\030\003 \001(\r\022\025\n\rgnss_second_s\030\004 "
      "\001(\001\022\022\n\nposition_x\030\005 \001(\001\022\022\n\nposition_y\030\006 "
      "\001(\001\022\022\n\nposition_z\030\007 \001(\001\022\026\n\013health_flag\030\010"
      " \001(\r:\0010\022\023\n\013sat_obs_num\030\t \001(\r\022:\n\007sat_obs\030"
      "\n \003(\0132).apollo.drivers.gnss.SatelliteObs"
      "ervation\"\247\005\n\014KepplerOrbit\0229\n\tgnss_type\030\001"
      " \001(\0162\035.apollo.drivers.gnss.GnssType:\007GPS"
      "_SYS\022\017\n\007sat_prn\030\002 \001(\r\022C\n\016gnss_time_type\030"
      "\003 \001(\0162!.apollo.drivers.gnss.GnssTimeType"
      ":\010GPS_TIME\022\014\n\004year\030\004 \001(\r\022\r\n\005month\030\005 \001(\r\022"
      "\013\n\003day\030\006 \001(\r\022\014\n\004hour\030\007 \001(\r\022\016\n\006minute\030\010 \001"
      "(\r\022\020\n\010second_s\030\t \001(\001\022\020\n\010week_num\030\n \001(\r\022\020"
      "\n\010reserved\030\013 \001(\001\022\013\n\003af0\030\014 \001(\001\022\013\n\003af1\030\r \001"
      "(\001\022\013\n\003af2\030\016 \001(\001\022\014\n\004iode\030\017 \001(\001\022\016\n\006deltan\030"
      "\020 \001(\001\022\n\n\002m0\030\021 \001(\001\022\t\n\001e\030\022 \001(\001\022\r\n\005roota\030\023 "
      "\001(\001\022\013\n\003toe\030\024 \001(\001\022\013\n\003toc\030\025 \001(\001\022\013\n\003cic\030\026 \001"
      "(\001\022\013\n\003crc\030\027 \001(\001\022\013\n\003cis\030\030 \001(\001\022\013\n\003crs\030\031 \001("
      "\001\022\013\n\003cuc\030\032 \001(\001\022\013\n\003cus\030\033 \001(\001\022\016\n\006omega0\030\034 "
      "\001(\001\022\r\n\005omega\030\035 \001(\001\022\n\n\002i0\030\036 \001(\001\022\020\n\010omegad"
      "ot\030\037 \001(\001\022\014\n\004idot\030  \001(\001\022\030\n\020codesonL2chann"
      "el\030! \001(\001\022\023\n\013L2Pdataflag\030\" \001(\r\022\020\n\010accurac"
      "y\030# \001(\r\022\016\n\006health\030$ \001(\r\022\013\n\003tgd\030% \001(\001\022\014\n\004"
      "iodc\030& \001(\001\"\353\004\n\014GlonassOrbit\0229\n\tgnss_type"
      "\030\001 \001(\0162\035.apollo.drivers.gnss.GnssType:\007G"
      "LO_SYS\022\020\n\010slot_prn\030\002 \001(\r\022C\n\016gnss_time_ty"
      "pe\030\003 \001(\0162!.apollo.drivers.gnss.GnssTimeT"
      "ype:\010GLO_TIME\022\013\n\003toe\030\004 \001(\001\022\014\n\004year\030\005 \001(\r"
      "\022\r\n\005month\030\006 \001(\r\022\013\n\003day\030\007 \001(\r\022\014\n\004hour\030\010 \001"
      "(\r\022\016\n\006minute\030\t \001(\r\022\020\n\010second_s\030\n \001(\001\022\024\n\014"
      "frequency_no\030\013 \001(\005\022\020\n\010week_num\030\014 \001(\r\022\025\n\r"
      "week_second_s\030\r \001(\001\022\n\n\002tk\030\016 \001(\001\022\024\n\014clock"
      "_offset\030\017 \001(\001\022\023\n\013clock_drift\030\020 \001(\001\022\016\n\006he"
      "alth\030\021 \001(\r\022\022\n\nposition_x\030\022 \001(\001\022\022\n\npositi"
      "on_y\030\023 \001(\001\022\022\n\nposition_z\030\024 \001(\001\022\022\n\nveloci"
      "ty_x\030\025 \001(\001\022\022\n\nvelocity_y\030\026 \001(\001\022\022\n\nveloci"
      "ty_z\030\027 \001(\001\022\024\n\014accelerate_x\030\030 \001(\001\022\024\n\014acce"
      "lerate_y\030\031 \001(\001\022\024\n\014accelerate_z\030\032 \001(\001\022\021\n\t"
      "infor_age\030\033 \001(\001\022\017\n\007sat_prn\030\034 \001(\r\"\276\001\n\rGns"
      "sEphemeris\0229\n\tgnss_type\030\001 \001(\0162\035.apollo.d"
      "rivers.gnss.GnssType:\007GLO_SYS\0228\n\rkeppler"
      "_orbit\030\002 \001(\0132!.apollo.drivers.gnss.Keppl"
      "erOrbit\0228\n\rglonass_orbit\030\003 \001(\0132!.apollo."
      "drivers.gnss.GlonassOrbit*\212\001\n\nGnssBandID"
      "\022\020\n\014BAND_UNKNOWN\020\000\022\n\n\006GPS_L1\020\001\022\n\n\006GPS_L2"
      "\020\002\022\n\n\006GPS_L5\020\003\022\n\n\006BDS_B1\020\004\022\n\n\006BDS_B2\020\005\022\n"
      "\n\006BDS_B3\020\006\022\n\n\006GLO_G1\020\007\022\n\n\006GLO_G2\020\010\022\n\n\006GL"
      "O_G3\020\t*X\n\014GnssTimeType\022\020\n\014TIME_UNKNOWN\020\000"
      "\022\014\n\010GPS_TIME\020\001\022\014\n\010BDS_TIME\020\002\022\014\n\010GLO_TIME"
      "\020\003\022\014\n\010GAL_TIME\020\004*O\n\010GnssType\022\017\n\013SYS_UNKN"
      "OWN\020\000\022\013\n\007GPS_SYS\020\001\022\013\n\007BDS_SYS\020\002\022\013\n\007GLO_S"
      "YS\020\003\022\013\n\007GAL_SYS\020\004*B\n\nPseudoType\022\020\n\014CODE_"
      "UNKNOWN\020\000\022\016\n\nCORSE_CODE\020\001\022\022\n\016PRECISION_C"
      "ODE\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2725);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/drivers/gnss/proto/gnss_raw_observation.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto
namespace apollo {
namespace drivers {
namespace gnss {
const ::google::protobuf::EnumDescriptor* GnssBandID_descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_enum_descriptors[0];
}
bool GnssBandID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GnssTimeType_descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_enum_descriptors[1];
}
bool GnssTimeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GnssType_descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_enum_descriptors[2];
}
bool GnssType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PseudoType_descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_enum_descriptors[3];
}
bool PseudoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BandObservation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BandObservation::kBandIdFieldNumber;
const int BandObservation::kFrequencyValueFieldNumber;
const int BandObservation::kPseudoTypeFieldNumber;
const int BandObservation::kPseudoRangeFieldNumber;
const int BandObservation::kCarrierPhaseFieldNumber;
const int BandObservation::kLossLockIndexFieldNumber;
const int BandObservation::kDopplerFieldNumber;
const int BandObservation::kSnrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BandObservation::BandObservation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::scc_info_BandObservation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.BandObservation)
}
BandObservation::BandObservation(const BandObservation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frequency_value_, &from.frequency_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&snr_) -
    reinterpret_cast<char*>(&frequency_value_)) + sizeof(snr_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.BandObservation)
}

void BandObservation::SharedCtor() {
  ::memset(&frequency_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&snr_) -
      reinterpret_cast<char*>(&frequency_value_)) + sizeof(snr_));
}

BandObservation::~BandObservation() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.BandObservation)
  SharedDtor();
}

void BandObservation::SharedDtor() {
}

void BandObservation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BandObservation::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BandObservation& BandObservation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::scc_info_BandObservation.base);
  return *internal_default_instance();
}


void BandObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.BandObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&frequency_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&snr_) -
        reinterpret_cast<char*>(&frequency_value_)) + sizeof(snr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BandObservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.BandObservation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::GnssBandID_IsValid(value)) {
            set_band_id(static_cast< ::apollo::drivers::gnss::GnssBandID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double frequency_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_frequency_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::PseudoType_IsValid(value)) {
            set_pseudo_type(static_cast< ::apollo::drivers::gnss::PseudoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pseudo_range = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_pseudo_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pseudo_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double carrier_phase = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_carrier_phase();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &carrier_phase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 loss_lock_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_loss_lock_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loss_lock_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double doppler = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_doppler();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &doppler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float snr = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_snr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &snr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.BandObservation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.BandObservation)
  return false;
#undef DO_
}

void BandObservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.BandObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->band_id(), output);
  }

  // optional double frequency_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->frequency_value(), output);
  }

  // optional .apollo.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->pseudo_type(), output);
  }

  // optional double pseudo_range = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pseudo_range(), output);
  }

  // optional double carrier_phase = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->carrier_phase(), output);
  }

  // optional uint32 loss_lock_index = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->loss_lock_index(), output);
  }

  // optional double doppler = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->doppler(), output);
  }

  // optional float snr = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->snr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.BandObservation)
}

::google::protobuf::uint8* BandObservation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.BandObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->band_id(), target);
  }

  // optional double frequency_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->frequency_value(), target);
  }

  // optional .apollo.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->pseudo_type(), target);
  }

  // optional double pseudo_range = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pseudo_range(), target);
  }

  // optional double carrier_phase = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->carrier_phase(), target);
  }

  // optional uint32 loss_lock_index = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->loss_lock_index(), target);
  }

  // optional double doppler = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->doppler(), target);
  }

  // optional float snr = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->snr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.BandObservation)
  return target;
}

size_t BandObservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.BandObservation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double frequency_value = 2;
    if (has_frequency_value()) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
    if (has_band_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->band_id());
    }

    // optional .apollo.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
    if (has_pseudo_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pseudo_type());
    }

    // optional double pseudo_range = 4;
    if (has_pseudo_range()) {
      total_size += 1 + 8;
    }

    // optional double carrier_phase = 5;
    if (has_carrier_phase()) {
      total_size += 1 + 8;
    }

    // optional double doppler = 7;
    if (has_doppler()) {
      total_size += 1 + 8;
    }

    // optional uint32 loss_lock_index = 6;
    if (has_loss_lock_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loss_lock_index());
    }

    // optional float snr = 8;
    if (has_snr()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BandObservation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.BandObservation)
  GOOGLE_DCHECK_NE(&from, this);
  const BandObservation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BandObservation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.BandObservation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.BandObservation)
    MergeFrom(*source);
  }
}

void BandObservation::MergeFrom(const BandObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.BandObservation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      frequency_value_ = from.frequency_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      band_id_ = from.band_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      pseudo_type_ = from.pseudo_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      pseudo_range_ = from.pseudo_range_;
    }
    if (cached_has_bits & 0x00000010u) {
      carrier_phase_ = from.carrier_phase_;
    }
    if (cached_has_bits & 0x00000020u) {
      doppler_ = from.doppler_;
    }
    if (cached_has_bits & 0x00000040u) {
      loss_lock_index_ = from.loss_lock_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      snr_ = from.snr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BandObservation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.BandObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BandObservation::CopyFrom(const BandObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.BandObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BandObservation::IsInitialized() const {
  return true;
}

void BandObservation::Swap(BandObservation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BandObservation::InternalSwap(BandObservation* other) {
  using std::swap;
  swap(frequency_value_, other->frequency_value_);
  swap(band_id_, other->band_id_);
  swap(pseudo_type_, other->pseudo_type_);
  swap(pseudo_range_, other->pseudo_range_);
  swap(carrier_phase_, other->carrier_phase_);
  swap(doppler_, other->doppler_);
  swap(loss_lock_index_, other->loss_lock_index_);
  swap(snr_, other->snr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BandObservation::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SatelliteObservation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SatelliteObservation::kSatPrnFieldNumber;
const int SatelliteObservation::kSatSysFieldNumber;
const int SatelliteObservation::kBandObsNumFieldNumber;
const int SatelliteObservation::kBandObsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SatelliteObservation::SatelliteObservation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::scc_info_SatelliteObservation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.SatelliteObservation)
}
SatelliteObservation::SatelliteObservation(const SatelliteObservation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      band_obs_(from.band_obs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sat_prn_, &from.sat_prn_,
    static_cast<size_t>(reinterpret_cast<char*>(&sat_sys_) -
    reinterpret_cast<char*>(&sat_prn_)) + sizeof(sat_sys_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.SatelliteObservation)
}

void SatelliteObservation::SharedCtor() {
  ::memset(&sat_prn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&band_obs_num_) -
      reinterpret_cast<char*>(&sat_prn_)) + sizeof(band_obs_num_));
  sat_sys_ = 1;
}

SatelliteObservation::~SatelliteObservation() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.SatelliteObservation)
  SharedDtor();
}

void SatelliteObservation::SharedDtor() {
}

void SatelliteObservation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SatelliteObservation::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SatelliteObservation& SatelliteObservation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::scc_info_SatelliteObservation.base);
  return *internal_default_instance();
}


void SatelliteObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.SatelliteObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  band_obs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&sat_prn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&band_obs_num_) -
        reinterpret_cast<char*>(&sat_prn_)) + sizeof(band_obs_num_));
    sat_sys_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SatelliteObservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.SatelliteObservation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sat_prn = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sat_prn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sat_prn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::GnssType_IsValid(value)) {
            set_sat_sys(static_cast< ::apollo::drivers::gnss::GnssType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 band_obs_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_band_obs_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &band_obs_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.drivers.gnss.BandObservation band_obs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_band_obs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.SatelliteObservation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.SatelliteObservation)
  return false;
#undef DO_
}

void SatelliteObservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.SatelliteObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sat_prn = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sat_prn(), output);
  }

  // optional .apollo.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sat_sys(), output);
  }

  // optional uint32 band_obs_num = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->band_obs_num(), output);
  }

  // repeated .apollo.drivers.gnss.BandObservation band_obs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->band_obs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->band_obs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.SatelliteObservation)
}

::google::protobuf::uint8* SatelliteObservation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.SatelliteObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sat_prn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sat_prn(), target);
  }

  // optional .apollo.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sat_sys(), target);
  }

  // optional uint32 band_obs_num = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->band_obs_num(), target);
  }

  // repeated .apollo.drivers.gnss.BandObservation band_obs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->band_obs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->band_obs(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.SatelliteObservation)
  return target;
}

size_t SatelliteObservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.SatelliteObservation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.drivers.gnss.BandObservation band_obs = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->band_obs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->band_obs(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 sat_prn = 1;
    if (has_sat_prn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sat_prn());
    }

    // optional uint32 band_obs_num = 3;
    if (has_band_obs_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->band_obs_num());
    }

    // optional .apollo.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
    if (has_sat_sys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sat_sys());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SatelliteObservation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.SatelliteObservation)
  GOOGLE_DCHECK_NE(&from, this);
  const SatelliteObservation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SatelliteObservation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.SatelliteObservation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.SatelliteObservation)
    MergeFrom(*source);
  }
}

void SatelliteObservation::MergeFrom(const SatelliteObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.SatelliteObservation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  band_obs_.MergeFrom(from.band_obs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      sat_prn_ = from.sat_prn_;
    }
    if (cached_has_bits & 0x00000002u) {
      band_obs_num_ = from.band_obs_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      sat_sys_ = from.sat_sys_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SatelliteObservation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.SatelliteObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SatelliteObservation::CopyFrom(const SatelliteObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.SatelliteObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SatelliteObservation::IsInitialized() const {
  return true;
}

void SatelliteObservation::Swap(SatelliteObservation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SatelliteObservation::InternalSwap(SatelliteObservation* other) {
  using std::swap;
  CastToBase(&band_obs_)->InternalSwap(CastToBase(&other->band_obs_));
  swap(sat_prn_, other->sat_prn_);
  swap(band_obs_num_, other->band_obs_num_);
  swap(sat_sys_, other->sat_sys_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SatelliteObservation::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EpochObservation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EpochObservation::kReceiverIdFieldNumber;
const int EpochObservation::kGnssTimeTypeFieldNumber;
const int EpochObservation::kGnssWeekFieldNumber;
const int EpochObservation::kGnssSecondSFieldNumber;
const int EpochObservation::kPositionXFieldNumber;
const int EpochObservation::kPositionYFieldNumber;
const int EpochObservation::kPositionZFieldNumber;
const int EpochObservation::kHealthFlagFieldNumber;
const int EpochObservation::kSatObsNumFieldNumber;
const int EpochObservation::kSatObsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EpochObservation::EpochObservation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::scc_info_EpochObservation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.EpochObservation)
}
EpochObservation::EpochObservation(const EpochObservation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      sat_obs_(from.sat_obs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&receiver_id_, &from.receiver_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gnss_time_type_) -
    reinterpret_cast<char*>(&receiver_id_)) + sizeof(gnss_time_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.EpochObservation)
}

void EpochObservation::SharedCtor() {
  ::memset(&receiver_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sat_obs_num_) -
      reinterpret_cast<char*>(&receiver_id_)) + sizeof(sat_obs_num_));
  gnss_time_type_ = 1;
}

EpochObservation::~EpochObservation() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.EpochObservation)
  SharedDtor();
}

void EpochObservation::SharedDtor() {
}

void EpochObservation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EpochObservation::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EpochObservation& EpochObservation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::scc_info_EpochObservation.base);
  return *internal_default_instance();
}


void EpochObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.EpochObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sat_obs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&receiver_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sat_obs_num_) -
        reinterpret_cast<char*>(&receiver_id_)) + sizeof(sat_obs_num_));
  }
  gnss_time_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EpochObservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.EpochObservation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 receiver_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_receiver_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiver_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 2 [default = GPS_TIME];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::GnssTimeType_IsValid(value)) {
            set_gnss_time_type(static_cast< ::apollo::drivers::gnss::GnssTimeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gnss_week = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_gnss_week();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gnss_week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gnss_second_s = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_gnss_second_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gnss_second_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_position_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_position_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position_z = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_position_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 health_flag = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_health_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sat_obs_num = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_sat_obs_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sat_obs_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.drivers.gnss.SatelliteObservation sat_obs = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sat_obs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.EpochObservation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.EpochObservation)
  return false;
#undef DO_
}

void EpochObservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.EpochObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 receiver_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->receiver_id(), output);
  }

  // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 2 [default = GPS_TIME];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gnss_time_type(), output);
  }

  // optional uint32 gnss_week = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gnss_week(), output);
  }

  // optional double gnss_second_s = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gnss_second_s(), output);
  }

  // optional double position_x = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->position_x(), output);
  }

  // optional double position_y = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->position_y(), output);
  }

  // optional double position_z = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->position_z(), output);
  }

  // optional uint32 health_flag = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->health_flag(), output);
  }

  // optional uint32 sat_obs_num = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sat_obs_num(), output);
  }

  // repeated .apollo.drivers.gnss.SatelliteObservation sat_obs = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sat_obs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->sat_obs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.EpochObservation)
}

::google::protobuf::uint8* EpochObservation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.EpochObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 receiver_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->receiver_id(), target);
  }

  // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 2 [default = GPS_TIME];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->gnss_time_type(), target);
  }

  // optional uint32 gnss_week = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gnss_week(), target);
  }

  // optional double gnss_second_s = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gnss_second_s(), target);
  }

  // optional double position_x = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->position_x(), target);
  }

  // optional double position_y = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->position_y(), target);
  }

  // optional double position_z = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->position_z(), target);
  }

  // optional uint32 health_flag = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->health_flag(), target);
  }

  // optional uint32 sat_obs_num = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sat_obs_num(), target);
  }

  // repeated .apollo.drivers.gnss.SatelliteObservation sat_obs = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sat_obs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->sat_obs(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.EpochObservation)
  return target;
}

size_t EpochObservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.EpochObservation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.drivers.gnss.SatelliteObservation sat_obs = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->sat_obs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sat_obs(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 receiver_id = 1;
    if (has_receiver_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receiver_id());
    }

    // optional uint32 gnss_week = 3;
    if (has_gnss_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gnss_week());
    }

    // optional double gnss_second_s = 4;
    if (has_gnss_second_s()) {
      total_size += 1 + 8;
    }

    // optional double position_x = 5;
    if (has_position_x()) {
      total_size += 1 + 8;
    }

    // optional double position_y = 6;
    if (has_position_y()) {
      total_size += 1 + 8;
    }

    // optional double position_z = 7;
    if (has_position_z()) {
      total_size += 1 + 8;
    }

    // optional uint32 health_flag = 8 [default = 0];
    if (has_health_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health_flag());
    }

    // optional uint32 sat_obs_num = 9;
    if (has_sat_obs_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sat_obs_num());
    }

  }
  // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 2 [default = GPS_TIME];
  if (has_gnss_time_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_time_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EpochObservation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.EpochObservation)
  GOOGLE_DCHECK_NE(&from, this);
  const EpochObservation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EpochObservation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.EpochObservation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.EpochObservation)
    MergeFrom(*source);
  }
}

void EpochObservation::MergeFrom(const EpochObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.EpochObservation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sat_obs_.MergeFrom(from.sat_obs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      receiver_id_ = from.receiver_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      gnss_week_ = from.gnss_week_;
    }
    if (cached_has_bits & 0x00000004u) {
      gnss_second_s_ = from.gnss_second_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      position_x_ = from.position_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      position_y_ = from.position_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      position_z_ = from.position_z_;
    }
    if (cached_has_bits & 0x00000040u) {
      health_flag_ = from.health_flag_;
    }
    if (cached_has_bits & 0x00000080u) {
      sat_obs_num_ = from.sat_obs_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_gnss_time_type(from.gnss_time_type());
  }
}

void EpochObservation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.EpochObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpochObservation::CopyFrom(const EpochObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.EpochObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpochObservation::IsInitialized() const {
  return true;
}

void EpochObservation::Swap(EpochObservation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EpochObservation::InternalSwap(EpochObservation* other) {
  using std::swap;
  CastToBase(&sat_obs_)->InternalSwap(CastToBase(&other->sat_obs_));
  swap(receiver_id_, other->receiver_id_);
  swap(gnss_week_, other->gnss_week_);
  swap(gnss_second_s_, other->gnss_second_s_);
  swap(position_x_, other->position_x_);
  swap(position_y_, other->position_y_);
  swap(position_z_, other->position_z_);
  swap(health_flag_, other->health_flag_);
  swap(sat_obs_num_, other->sat_obs_num_);
  swap(gnss_time_type_, other->gnss_time_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EpochObservation::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KepplerOrbit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KepplerOrbit::kGnssTypeFieldNumber;
const int KepplerOrbit::kSatPrnFieldNumber;
const int KepplerOrbit::kGnssTimeTypeFieldNumber;
const int KepplerOrbit::kYearFieldNumber;
const int KepplerOrbit::kMonthFieldNumber;
const int KepplerOrbit::kDayFieldNumber;
const int KepplerOrbit::kHourFieldNumber;
const int KepplerOrbit::kMinuteFieldNumber;
const int KepplerOrbit::kSecondSFieldNumber;
const int KepplerOrbit::kWeekNumFieldNumber;
const int KepplerOrbit::kReservedFieldNumber;
const int KepplerOrbit::kAf0FieldNumber;
const int KepplerOrbit::kAf1FieldNumber;
const int KepplerOrbit::kAf2FieldNumber;
const int KepplerOrbit::kIodeFieldNumber;
const int KepplerOrbit::kDeltanFieldNumber;
const int KepplerOrbit::kM0FieldNumber;
const int KepplerOrbit::kEFieldNumber;
const int KepplerOrbit::kRootaFieldNumber;
const int KepplerOrbit::kToeFieldNumber;
const int KepplerOrbit::kTocFieldNumber;
const int KepplerOrbit::kCicFieldNumber;
const int KepplerOrbit::kCrcFieldNumber;
const int KepplerOrbit::kCisFieldNumber;
const int KepplerOrbit::kCrsFieldNumber;
const int KepplerOrbit::kCucFieldNumber;
const int KepplerOrbit::kCusFieldNumber;
const int KepplerOrbit::kOmega0FieldNumber;
const int KepplerOrbit::kOmegaFieldNumber;
const int KepplerOrbit::kI0FieldNumber;
const int KepplerOrbit::kOmegadotFieldNumber;
const int KepplerOrbit::kIdotFieldNumber;
const int KepplerOrbit::kCodesonL2ChannelFieldNumber;
const int KepplerOrbit::kL2PdataflagFieldNumber;
const int KepplerOrbit::kAccuracyFieldNumber;
const int KepplerOrbit::kHealthFieldNumber;
const int KepplerOrbit::kTgdFieldNumber;
const int KepplerOrbit::kIodcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KepplerOrbit::KepplerOrbit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::scc_info_KepplerOrbit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.KepplerOrbit)
}
KepplerOrbit::KepplerOrbit(const KepplerOrbit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sat_prn_, &from.sat_prn_,
    static_cast<size_t>(reinterpret_cast<char*>(&gnss_time_type_) -
    reinterpret_cast<char*>(&sat_prn_)) + sizeof(gnss_time_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.KepplerOrbit)
}

void KepplerOrbit::SharedCtor() {
  ::memset(&sat_prn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iodc_) -
      reinterpret_cast<char*>(&sat_prn_)) + sizeof(iodc_));
  gnss_type_ = 1;
  gnss_time_type_ = 1;
}

KepplerOrbit::~KepplerOrbit() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.KepplerOrbit)
  SharedDtor();
}

void KepplerOrbit::SharedDtor() {
}

void KepplerOrbit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KepplerOrbit::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KepplerOrbit& KepplerOrbit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::scc_info_KepplerOrbit.base);
  return *internal_default_instance();
}


void KepplerOrbit::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.KepplerOrbit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&sat_prn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reserved_) -
        reinterpret_cast<char*>(&sat_prn_)) + sizeof(reserved_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&af0_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roota_) -
        reinterpret_cast<char*>(&af0_)) + sizeof(roota_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&toe_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crs_) -
        reinterpret_cast<char*>(&toe_)) + sizeof(crs_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&cuc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&codesonl2channel_) -
        reinterpret_cast<char*>(&cuc_)) + sizeof(codesonl2channel_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 63u) {
    ::memset(&accuracy_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&iodc_) -
        reinterpret_cast<char*>(&accuracy_)) + sizeof(iodc_));
    gnss_type_ = 1;
    gnss_time_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KepplerOrbit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.KepplerOrbit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GPS_SYS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::GnssType_IsValid(value)) {
            set_gnss_type(static_cast< ::apollo::drivers::gnss::GnssType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sat_prn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sat_prn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sat_prn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GPS_TIME];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::GnssTimeType_IsValid(value)) {
            set_gnss_time_type(static_cast< ::apollo::drivers::gnss::GnssTimeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 year = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 month = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_month();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 day = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hour = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_hour();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 minute = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_minute();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double second_s = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_second_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &second_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 week_num = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_week_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double reserved = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_reserved();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reserved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double af0 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_af0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &af0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double af1 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_af1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &af1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double af2 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_af2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &af2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double iode = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_iode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &iode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double deltan = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_deltan();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deltan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double m0 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_m0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double e = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_e();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double roota = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {
          set_has_roota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double toe = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {
          set_has_toe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &toe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double toc = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_toc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &toc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cic = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {
          set_has_cic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double crc = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {
          set_has_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cis = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {
          set_has_cis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double crs = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {
          set_has_crs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &crs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cuc = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {
          set_has_cuc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cuc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cus = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {
          set_has_cus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double omega0 = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {
          set_has_omega0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &omega0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double omega = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {
          set_has_omega();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &omega_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double i0 = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {
          set_has_i0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &i0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double omegadot = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u /* 249 & 0xFF */)) {
          set_has_omegadot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &omegadot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double idot = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1u /* 257 & 0xFF */)) {
          set_has_idot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &idot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double codesonL2channel = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 265 & 0xFF */)) {
          set_has_codesonl2channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &codesonl2channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 L2Pdataflag = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_l2pdataflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &l2pdataflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accuracy = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_accuracy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accuracy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 health = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_health();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tgd = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 297 & 0xFF */)) {
          set_has_tgd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tgd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double iodc = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 305 & 0xFF */)) {
          set_has_iodc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &iodc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.KepplerOrbit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.KepplerOrbit)
  return false;
#undef DO_
}

void KepplerOrbit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.KepplerOrbit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GPS_SYS];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gnss_type(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 sat_prn = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sat_prn(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GPS_TIME];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gnss_time_type(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 year = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->year(), output);
  }

  // optional uint32 month = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->month(), output);
  }

  // optional uint32 day = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->day(), output);
  }

  // optional uint32 hour = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hour(), output);
  }

  // optional uint32 minute = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->minute(), output);
  }

  // optional double second_s = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->second_s(), output);
  }

  // optional uint32 week_num = 10;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->week_num(), output);
  }

  // optional double reserved = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->reserved(), output);
  }

  // optional double af0 = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->af0(), output);
  }

  // optional double af1 = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->af1(), output);
  }

  // optional double af2 = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->af2(), output);
  }

  // optional double iode = 15;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->iode(), output);
  }

  // optional double deltan = 16;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->deltan(), output);
  }

  // optional double m0 = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->m0(), output);
  }

  // optional double e = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->e(), output);
  }

  // optional double roota = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->roota(), output);
  }

  // optional double toe = 20;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->toe(), output);
  }

  // optional double toc = 21;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->toc(), output);
  }

  // optional double cic = 22;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->cic(), output);
  }

  // optional double crc = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->crc(), output);
  }

  // optional double cis = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->cis(), output);
  }

  // optional double crs = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->crs(), output);
  }

  // optional double cuc = 26;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->cuc(), output);
  }

  // optional double cus = 27;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->cus(), output);
  }

  // optional double omega0 = 28;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->omega0(), output);
  }

  // optional double omega = 29;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->omega(), output);
  }

  // optional double i0 = 30;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->i0(), output);
  }

  // optional double omegadot = 31;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->omegadot(), output);
  }

  // optional double idot = 32;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->idot(), output);
  }

  // optional double codesonL2channel = 33;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->codesonl2channel(), output);
  }

  // optional uint32 L2Pdataflag = 34;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->l2pdataflag(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 accuracy = 35;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->accuracy(), output);
  }

  // optional uint32 health = 36;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->health(), output);
  }

  // optional double tgd = 37;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->tgd(), output);
  }

  // optional double iodc = 38;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->iodc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.KepplerOrbit)
}

::google::protobuf::uint8* KepplerOrbit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.KepplerOrbit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GPS_SYS];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gnss_type(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 sat_prn = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sat_prn(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GPS_TIME];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gnss_time_type(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 year = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->year(), target);
  }

  // optional uint32 month = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->month(), target);
  }

  // optional uint32 day = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->day(), target);
  }

  // optional uint32 hour = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hour(), target);
  }

  // optional uint32 minute = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->minute(), target);
  }

  // optional double second_s = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->second_s(), target);
  }

  // optional uint32 week_num = 10;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->week_num(), target);
  }

  // optional double reserved = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->reserved(), target);
  }

  // optional double af0 = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->af0(), target);
  }

  // optional double af1 = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->af1(), target);
  }

  // optional double af2 = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->af2(), target);
  }

  // optional double iode = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->iode(), target);
  }

  // optional double deltan = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->deltan(), target);
  }

  // optional double m0 = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->m0(), target);
  }

  // optional double e = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->e(), target);
  }

  // optional double roota = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->roota(), target);
  }

  // optional double toe = 20;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->toe(), target);
  }

  // optional double toc = 21;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->toc(), target);
  }

  // optional double cic = 22;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->cic(), target);
  }

  // optional double crc = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->crc(), target);
  }

  // optional double cis = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->cis(), target);
  }

  // optional double crs = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->crs(), target);
  }

  // optional double cuc = 26;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->cuc(), target);
  }

  // optional double cus = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->cus(), target);
  }

  // optional double omega0 = 28;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->omega0(), target);
  }

  // optional double omega = 29;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->omega(), target);
  }

  // optional double i0 = 30;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->i0(), target);
  }

  // optional double omegadot = 31;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->omegadot(), target);
  }

  // optional double idot = 32;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->idot(), target);
  }

  // optional double codesonL2channel = 33;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->codesonl2channel(), target);
  }

  // optional uint32 L2Pdataflag = 34;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->l2pdataflag(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 accuracy = 35;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->accuracy(), target);
  }

  // optional uint32 health = 36;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->health(), target);
  }

  // optional double tgd = 37;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->tgd(), target);
  }

  // optional double iodc = 38;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->iodc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.KepplerOrbit)
  return target;
}

size_t KepplerOrbit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.KepplerOrbit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 sat_prn = 2;
    if (has_sat_prn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sat_prn());
    }

    // optional uint32 year = 4;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

    // optional uint32 month = 5;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // optional uint32 day = 6;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // optional uint32 hour = 7;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hour());
    }

    // optional uint32 minute = 8;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minute());
    }

    // optional double second_s = 9;
    if (has_second_s()) {
      total_size += 1 + 8;
    }

    // optional double reserved = 11;
    if (has_reserved()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double af0 = 12;
    if (has_af0()) {
      total_size += 1 + 8;
    }

    // optional double af1 = 13;
    if (has_af1()) {
      total_size += 1 + 8;
    }

    // optional double af2 = 14;
    if (has_af2()) {
      total_size += 1 + 8;
    }

    // optional double iode = 15;
    if (has_iode()) {
      total_size += 1 + 8;
    }

    // optional double deltan = 16;
    if (has_deltan()) {
      total_size += 2 + 8;
    }

    // optional double m0 = 17;
    if (has_m0()) {
      total_size += 2 + 8;
    }

    // optional double e = 18;
    if (has_e()) {
      total_size += 2 + 8;
    }

    // optional double roota = 19;
    if (has_roota()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double toe = 20;
    if (has_toe()) {
      total_size += 2 + 8;
    }

    // optional double toc = 21;
    if (has_toc()) {
      total_size += 2 + 8;
    }

    // optional double cic = 22;
    if (has_cic()) {
      total_size += 2 + 8;
    }

    // optional uint32 week_num = 10;
    if (has_week_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week_num());
    }

    // optional uint32 L2Pdataflag = 34;
    if (has_l2pdataflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->l2pdataflag());
    }

    // optional double crc = 23;
    if (has_crc()) {
      total_size += 2 + 8;
    }

    // optional double cis = 24;
    if (has_cis()) {
      total_size += 2 + 8;
    }

    // optional double crs = 25;
    if (has_crs()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional double cuc = 26;
    if (has_cuc()) {
      total_size += 2 + 8;
    }

    // optional double cus = 27;
    if (has_cus()) {
      total_size += 2 + 8;
    }

    // optional double omega0 = 28;
    if (has_omega0()) {
      total_size += 2 + 8;
    }

    // optional double omega = 29;
    if (has_omega()) {
      total_size += 2 + 8;
    }

    // optional double i0 = 30;
    if (has_i0()) {
      total_size += 2 + 8;
    }

    // optional double omegadot = 31;
    if (has_omegadot()) {
      total_size += 2 + 8;
    }

    // optional double idot = 32;
    if (has_idot()) {
      total_size += 2 + 8;
    }

    // optional double codesonL2channel = 33;
    if (has_codesonl2channel()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & 63u) {
    // optional uint32 accuracy = 35;
    if (has_accuracy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accuracy());
    }

    // optional uint32 health = 36;
    if (has_health()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health());
    }

    // optional double tgd = 37;
    if (has_tgd()) {
      total_size += 2 + 8;
    }

    // optional double iodc = 38;
    if (has_iodc()) {
      total_size += 2 + 8;
    }

    // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GPS_SYS];
    if (has_gnss_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_type());
    }

    // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GPS_TIME];
    if (has_gnss_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_time_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KepplerOrbit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.KepplerOrbit)
  GOOGLE_DCHECK_NE(&from, this);
  const KepplerOrbit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KepplerOrbit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.KepplerOrbit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.KepplerOrbit)
    MergeFrom(*source);
  }
}

void KepplerOrbit::MergeFrom(const KepplerOrbit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.KepplerOrbit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      sat_prn_ = from.sat_prn_;
    }
    if (cached_has_bits & 0x00000002u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000004u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00000008u) {
      day_ = from.day_;
    }
    if (cached_has_bits & 0x00000010u) {
      hour_ = from.hour_;
    }
    if (cached_has_bits & 0x00000020u) {
      minute_ = from.minute_;
    }
    if (cached_has_bits & 0x00000040u) {
      second_s_ = from.second_s_;
    }
    if (cached_has_bits & 0x00000080u) {
      reserved_ = from.reserved_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      af0_ = from.af0_;
    }
    if (cached_has_bits & 0x00000200u) {
      af1_ = from.af1_;
    }
    if (cached_has_bits & 0x00000400u) {
      af2_ = from.af2_;
    }
    if (cached_has_bits & 0x00000800u) {
      iode_ = from.iode_;
    }
    if (cached_has_bits & 0x00001000u) {
      deltan_ = from.deltan_;
    }
    if (cached_has_bits & 0x00002000u) {
      m0_ = from.m0_;
    }
    if (cached_has_bits & 0x00004000u) {
      e_ = from.e_;
    }
    if (cached_has_bits & 0x00008000u) {
      roota_ = from.roota_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      toe_ = from.toe_;
    }
    if (cached_has_bits & 0x00020000u) {
      toc_ = from.toc_;
    }
    if (cached_has_bits & 0x00040000u) {
      cic_ = from.cic_;
    }
    if (cached_has_bits & 0x00080000u) {
      week_num_ = from.week_num_;
    }
    if (cached_has_bits & 0x00100000u) {
      l2pdataflag_ = from.l2pdataflag_;
    }
    if (cached_has_bits & 0x00200000u) {
      crc_ = from.crc_;
    }
    if (cached_has_bits & 0x00400000u) {
      cis_ = from.cis_;
    }
    if (cached_has_bits & 0x00800000u) {
      crs_ = from.crs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      cuc_ = from.cuc_;
    }
    if (cached_has_bits & 0x02000000u) {
      cus_ = from.cus_;
    }
    if (cached_has_bits & 0x04000000u) {
      omega0_ = from.omega0_;
    }
    if (cached_has_bits & 0x08000000u) {
      omega_ = from.omega_;
    }
    if (cached_has_bits & 0x10000000u) {
      i0_ = from.i0_;
    }
    if (cached_has_bits & 0x20000000u) {
      omegadot_ = from.omegadot_;
    }
    if (cached_has_bits & 0x40000000u) {
      idot_ = from.idot_;
    }
    if (cached_has_bits & 0x80000000u) {
      codesonl2channel_ = from.codesonl2channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      accuracy_ = from.accuracy_;
    }
    if (cached_has_bits & 0x00000002u) {
      health_ = from.health_;
    }
    if (cached_has_bits & 0x00000004u) {
      tgd_ = from.tgd_;
    }
    if (cached_has_bits & 0x00000008u) {
      iodc_ = from.iodc_;
    }
    if (cached_has_bits & 0x00000010u) {
      gnss_type_ = from.gnss_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      gnss_time_type_ = from.gnss_time_type_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void KepplerOrbit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.KepplerOrbit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KepplerOrbit::CopyFrom(const KepplerOrbit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.KepplerOrbit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KepplerOrbit::IsInitialized() const {
  return true;
}

void KepplerOrbit::Swap(KepplerOrbit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KepplerOrbit::InternalSwap(KepplerOrbit* other) {
  using std::swap;
  swap(sat_prn_, other->sat_prn_);
  swap(year_, other->year_);
  swap(month_, other->month_);
  swap(day_, other->day_);
  swap(hour_, other->hour_);
  swap(minute_, other->minute_);
  swap(second_s_, other->second_s_);
  swap(reserved_, other->reserved_);
  swap(af0_, other->af0_);
  swap(af1_, other->af1_);
  swap(af2_, other->af2_);
  swap(iode_, other->iode_);
  swap(deltan_, other->deltan_);
  swap(m0_, other->m0_);
  swap(e_, other->e_);
  swap(roota_, other->roota_);
  swap(toe_, other->toe_);
  swap(toc_, other->toc_);
  swap(cic_, other->cic_);
  swap(week_num_, other->week_num_);
  swap(l2pdataflag_, other->l2pdataflag_);
  swap(crc_, other->crc_);
  swap(cis_, other->cis_);
  swap(crs_, other->crs_);
  swap(cuc_, other->cuc_);
  swap(cus_, other->cus_);
  swap(omega0_, other->omega0_);
  swap(omega_, other->omega_);
  swap(i0_, other->i0_);
  swap(omegadot_, other->omegadot_);
  swap(idot_, other->idot_);
  swap(codesonl2channel_, other->codesonl2channel_);
  swap(accuracy_, other->accuracy_);
  swap(health_, other->health_);
  swap(tgd_, other->tgd_);
  swap(iodc_, other->iodc_);
  swap(gnss_type_, other->gnss_type_);
  swap(gnss_time_type_, other->gnss_time_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KepplerOrbit::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GlonassOrbit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GlonassOrbit::kGnssTypeFieldNumber;
const int GlonassOrbit::kSlotPrnFieldNumber;
const int GlonassOrbit::kGnssTimeTypeFieldNumber;
const int GlonassOrbit::kToeFieldNumber;
const int GlonassOrbit::kYearFieldNumber;
const int GlonassOrbit::kMonthFieldNumber;
const int GlonassOrbit::kDayFieldNumber;
const int GlonassOrbit::kHourFieldNumber;
const int GlonassOrbit::kMinuteFieldNumber;
const int GlonassOrbit::kSecondSFieldNumber;
const int GlonassOrbit::kFrequencyNoFieldNumber;
const int GlonassOrbit::kWeekNumFieldNumber;
const int GlonassOrbit::kWeekSecondSFieldNumber;
const int GlonassOrbit::kTkFieldNumber;
const int GlonassOrbit::kClockOffsetFieldNumber;
const int GlonassOrbit::kClockDriftFieldNumber;
const int GlonassOrbit::kHealthFieldNumber;
const int GlonassOrbit::kPositionXFieldNumber;
const int GlonassOrbit::kPositionYFieldNumber;
const int GlonassOrbit::kPositionZFieldNumber;
const int GlonassOrbit::kVelocityXFieldNumber;
const int GlonassOrbit::kVelocityYFieldNumber;
const int GlonassOrbit::kVelocityZFieldNumber;
const int GlonassOrbit::kAccelerateXFieldNumber;
const int GlonassOrbit::kAccelerateYFieldNumber;
const int GlonassOrbit::kAccelerateZFieldNumber;
const int GlonassOrbit::kInforAgeFieldNumber;
const int GlonassOrbit::kSatPrnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GlonassOrbit::GlonassOrbit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::scc_info_GlonassOrbit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.GlonassOrbit)
}
GlonassOrbit::GlonassOrbit(const GlonassOrbit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&slot_prn_, &from.slot_prn_,
    static_cast<size_t>(reinterpret_cast<char*>(&gnss_time_type_) -
    reinterpret_cast<char*>(&slot_prn_)) + sizeof(gnss_time_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.GlonassOrbit)
}

void GlonassOrbit::SharedCtor() {
  ::memset(&slot_prn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&infor_age_) -
      reinterpret_cast<char*>(&slot_prn_)) + sizeof(infor_age_));
  gnss_type_ = 3;
  gnss_time_type_ = 3;
}

GlonassOrbit::~GlonassOrbit() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.GlonassOrbit)
  SharedDtor();
}

void GlonassOrbit::SharedDtor() {
}

void GlonassOrbit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GlonassOrbit::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GlonassOrbit& GlonassOrbit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::scc_info_GlonassOrbit.base);
  return *internal_default_instance();
}


void GlonassOrbit::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.GlonassOrbit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&slot_prn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&second_s_) -
        reinterpret_cast<char*>(&slot_prn_)) + sizeof(second_s_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&frequency_no_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_y_) -
        reinterpret_cast<char*>(&frequency_no_)) + sizeof(position_y_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&position_z_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accelerate_y_) -
        reinterpret_cast<char*>(&position_z_)) + sizeof(accelerate_y_));
  }
  if (cached_has_bits & 251658240u) {
    ::memset(&accelerate_z_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&infor_age_) -
        reinterpret_cast<char*>(&accelerate_z_)) + sizeof(infor_age_));
    gnss_type_ = 3;
    gnss_time_type_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GlonassOrbit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.GlonassOrbit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::GnssType_IsValid(value)) {
            set_gnss_type(static_cast< ::apollo::drivers::gnss::GnssType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_prn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_slot_prn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_prn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GLO_TIME];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::GnssTimeType_IsValid(value)) {
            set_gnss_time_type(static_cast< ::apollo::drivers::gnss::GnssTimeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double toe = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_toe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &toe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 year = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 month = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_month();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 day = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hour = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_hour();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 minute = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_minute();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double second_s = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_second_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &second_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 frequency_no = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_frequency_no();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frequency_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 week_num = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_week_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double week_second_s = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_week_second_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &week_second_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tk = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_tk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double clock_offset = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_clock_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clock_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double clock_drift = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_clock_drift();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clock_drift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 health = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_health();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position_x = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_position_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position_y = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {
          set_has_position_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position_z = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {
          set_has_position_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double velocity_x = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_velocity_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double velocity_y = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {
          set_has_velocity_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double velocity_z = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {
          set_has_velocity_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accelerate_x = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {
          set_has_accelerate_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerate_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accelerate_y = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {
          set_has_accelerate_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerate_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accelerate_z = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {
          set_has_accelerate_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerate_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double infor_age = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {
          set_has_infor_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &infor_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sat_prn = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_sat_prn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sat_prn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.GlonassOrbit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.GlonassOrbit)
  return false;
#undef DO_
}

void GlonassOrbit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.GlonassOrbit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gnss_type(), output);
  }

  // optional uint32 slot_prn = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_prn(), output);
  }

  // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GLO_TIME];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gnss_time_type(), output);
  }

  // optional double toe = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->toe(), output);
  }

  // optional uint32 year = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->year(), output);
  }

  // optional uint32 month = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->month(), output);
  }

  // optional uint32 day = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->day(), output);
  }

  // optional uint32 hour = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hour(), output);
  }

  // optional uint32 minute = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->minute(), output);
  }

  // optional double second_s = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->second_s(), output);
  }

  // optional int32 frequency_no = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->frequency_no(), output);
  }

  // optional uint32 week_num = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->week_num(), output);
  }

  // optional double week_second_s = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->week_second_s(), output);
  }

  // optional double tk = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->tk(), output);
  }

  // optional double clock_offset = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->clock_offset(), output);
  }

  // optional double clock_drift = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->clock_drift(), output);
  }

  // optional uint32 health = 17;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->health(), output);
  }

  // optional double position_x = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->position_x(), output);
  }

  // optional double position_y = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->position_y(), output);
  }

  // optional double position_z = 20;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->position_z(), output);
  }

  // optional double velocity_x = 21;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->velocity_x(), output);
  }

  // optional double velocity_y = 22;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->velocity_y(), output);
  }

  // optional double velocity_z = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->velocity_z(), output);
  }

  // optional double accelerate_x = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->accelerate_x(), output);
  }

  // optional double accelerate_y = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->accelerate_y(), output);
  }

  // optional double accelerate_z = 26;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->accelerate_z(), output);
  }

  // optional double infor_age = 27;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->infor_age(), output);
  }

  // optional uint32 sat_prn = 28;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->sat_prn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.GlonassOrbit)
}

::google::protobuf::uint8* GlonassOrbit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.GlonassOrbit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gnss_type(), target);
  }

  // optional uint32 slot_prn = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_prn(), target);
  }

  // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GLO_TIME];
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gnss_time_type(), target);
  }

  // optional double toe = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->toe(), target);
  }

  // optional uint32 year = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->year(), target);
  }

  // optional uint32 month = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->month(), target);
  }

  // optional uint32 day = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->day(), target);
  }

  // optional uint32 hour = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hour(), target);
  }

  // optional uint32 minute = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->minute(), target);
  }

  // optional double second_s = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->second_s(), target);
  }

  // optional int32 frequency_no = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->frequency_no(), target);
  }

  // optional uint32 week_num = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->week_num(), target);
  }

  // optional double week_second_s = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->week_second_s(), target);
  }

  // optional double tk = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->tk(), target);
  }

  // optional double clock_offset = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->clock_offset(), target);
  }

  // optional double clock_drift = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->clock_drift(), target);
  }

  // optional uint32 health = 17;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->health(), target);
  }

  // optional double position_x = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->position_x(), target);
  }

  // optional double position_y = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->position_y(), target);
  }

  // optional double position_z = 20;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->position_z(), target);
  }

  // optional double velocity_x = 21;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->velocity_x(), target);
  }

  // optional double velocity_y = 22;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->velocity_y(), target);
  }

  // optional double velocity_z = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->velocity_z(), target);
  }

  // optional double accelerate_x = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->accelerate_x(), target);
  }

  // optional double accelerate_y = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->accelerate_y(), target);
  }

  // optional double accelerate_z = 26;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->accelerate_z(), target);
  }

  // optional double infor_age = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->infor_age(), target);
  }

  // optional uint32 sat_prn = 28;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->sat_prn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.GlonassOrbit)
  return target;
}

size_t GlonassOrbit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.GlonassOrbit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 slot_prn = 2;
    if (has_slot_prn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_prn());
    }

    // optional uint32 year = 5;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

    // optional double toe = 4;
    if (has_toe()) {
      total_size += 1 + 8;
    }

    // optional uint32 month = 6;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // optional uint32 day = 7;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // optional uint32 hour = 8;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hour());
    }

    // optional uint32 minute = 9;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minute());
    }

    // optional double second_s = 10;
    if (has_second_s()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 frequency_no = 11;
    if (has_frequency_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frequency_no());
    }

    // optional uint32 week_num = 12;
    if (has_week_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week_num());
    }

    // optional double week_second_s = 13;
    if (has_week_second_s()) {
      total_size += 1 + 8;
    }

    // optional double tk = 14;
    if (has_tk()) {
      total_size += 1 + 8;
    }

    // optional double clock_offset = 15;
    if (has_clock_offset()) {
      total_size += 1 + 8;
    }

    // optional double clock_drift = 16;
    if (has_clock_drift()) {
      total_size += 2 + 8;
    }

    // optional double position_x = 18;
    if (has_position_x()) {
      total_size += 2 + 8;
    }

    // optional double position_y = 19;
    if (has_position_y()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double position_z = 20;
    if (has_position_z()) {
      total_size += 2 + 8;
    }

    // optional double velocity_x = 21;
    if (has_velocity_x()) {
      total_size += 2 + 8;
    }

    // optional double velocity_y = 22;
    if (has_velocity_y()) {
      total_size += 2 + 8;
    }

    // optional uint32 health = 17;
    if (has_health()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health());
    }

    // optional uint32 sat_prn = 28;
    if (has_sat_prn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sat_prn());
    }

    // optional double velocity_z = 23;
    if (has_velocity_z()) {
      total_size += 2 + 8;
    }

    // optional double accelerate_x = 24;
    if (has_accelerate_x()) {
      total_size += 2 + 8;
    }

    // optional double accelerate_y = 25;
    if (has_accelerate_y()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 251658240u) {
    // optional double accelerate_z = 26;
    if (has_accelerate_z()) {
      total_size += 2 + 8;
    }

    // optional double infor_age = 27;
    if (has_infor_age()) {
      total_size += 2 + 8;
    }

    // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
    if (has_gnss_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_type());
    }

    // optional .apollo.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GLO_TIME];
    if (has_gnss_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_time_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlonassOrbit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.GlonassOrbit)
  GOOGLE_DCHECK_NE(&from, this);
  const GlonassOrbit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GlonassOrbit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.GlonassOrbit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.GlonassOrbit)
    MergeFrom(*source);
  }
}

void GlonassOrbit::MergeFrom(const GlonassOrbit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.GlonassOrbit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      slot_prn_ = from.slot_prn_;
    }
    if (cached_has_bits & 0x00000002u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000004u) {
      toe_ = from.toe_;
    }
    if (cached_has_bits & 0x00000008u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00000010u) {
      day_ = from.day_;
    }
    if (cached_has_bits & 0x00000020u) {
      hour_ = from.hour_;
    }
    if (cached_has_bits & 0x00000040u) {
      minute_ = from.minute_;
    }
    if (cached_has_bits & 0x00000080u) {
      second_s_ = from.second_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      frequency_no_ = from.frequency_no_;
    }
    if (cached_has_bits & 0x00000200u) {
      week_num_ = from.week_num_;
    }
    if (cached_has_bits & 0x00000400u) {
      week_second_s_ = from.week_second_s_;
    }
    if (cached_has_bits & 0x00000800u) {
      tk_ = from.tk_;
    }
    if (cached_has_bits & 0x00001000u) {
      clock_offset_ = from.clock_offset_;
    }
    if (cached_has_bits & 0x00002000u) {
      clock_drift_ = from.clock_drift_;
    }
    if (cached_has_bits & 0x00004000u) {
      position_x_ = from.position_x_;
    }
    if (cached_has_bits & 0x00008000u) {
      position_y_ = from.position_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      position_z_ = from.position_z_;
    }
    if (cached_has_bits & 0x00020000u) {
      velocity_x_ = from.velocity_x_;
    }
    if (cached_has_bits & 0x00040000u) {
      velocity_y_ = from.velocity_y_;
    }
    if (cached_has_bits & 0x00080000u) {
      health_ = from.health_;
    }
    if (cached_has_bits & 0x00100000u) {
      sat_prn_ = from.sat_prn_;
    }
    if (cached_has_bits & 0x00200000u) {
      velocity_z_ = from.velocity_z_;
    }
    if (cached_has_bits & 0x00400000u) {
      accelerate_x_ = from.accelerate_x_;
    }
    if (cached_has_bits & 0x00800000u) {
      accelerate_y_ = from.accelerate_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 251658240u) {
    if (cached_has_bits & 0x01000000u) {
      accelerate_z_ = from.accelerate_z_;
    }
    if (cached_has_bits & 0x02000000u) {
      infor_age_ = from.infor_age_;
    }
    if (cached_has_bits & 0x04000000u) {
      gnss_type_ = from.gnss_type_;
    }
    if (cached_has_bits & 0x08000000u) {
      gnss_time_type_ = from.gnss_time_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GlonassOrbit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.GlonassOrbit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlonassOrbit::CopyFrom(const GlonassOrbit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.GlonassOrbit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlonassOrbit::IsInitialized() const {
  return true;
}

void GlonassOrbit::Swap(GlonassOrbit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GlonassOrbit::InternalSwap(GlonassOrbit* other) {
  using std::swap;
  swap(slot_prn_, other->slot_prn_);
  swap(year_, other->year_);
  swap(toe_, other->toe_);
  swap(month_, other->month_);
  swap(day_, other->day_);
  swap(hour_, other->hour_);
  swap(minute_, other->minute_);
  swap(second_s_, other->second_s_);
  swap(frequency_no_, other->frequency_no_);
  swap(week_num_, other->week_num_);
  swap(week_second_s_, other->week_second_s_);
  swap(tk_, other->tk_);
  swap(clock_offset_, other->clock_offset_);
  swap(clock_drift_, other->clock_drift_);
  swap(position_x_, other->position_x_);
  swap(position_y_, other->position_y_);
  swap(position_z_, other->position_z_);
  swap(velocity_x_, other->velocity_x_);
  swap(velocity_y_, other->velocity_y_);
  swap(health_, other->health_);
  swap(sat_prn_, other->sat_prn_);
  swap(velocity_z_, other->velocity_z_);
  swap(accelerate_x_, other->accelerate_x_);
  swap(accelerate_y_, other->accelerate_y_);
  swap(accelerate_z_, other->accelerate_z_);
  swap(infor_age_, other->infor_age_);
  swap(gnss_type_, other->gnss_type_);
  swap(gnss_time_type_, other->gnss_time_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GlonassOrbit::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GnssEphemeris::InitAsDefaultInstance() {
  ::apollo::drivers::gnss::_GnssEphemeris_default_instance_._instance.get_mutable()->keppler_orbit_ = const_cast< ::apollo::drivers::gnss::KepplerOrbit*>(
      ::apollo::drivers::gnss::KepplerOrbit::internal_default_instance());
  ::apollo::drivers::gnss::_GnssEphemeris_default_instance_._instance.get_mutable()->glonass_orbit_ = const_cast< ::apollo::drivers::gnss::GlonassOrbit*>(
      ::apollo::drivers::gnss::GlonassOrbit::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GnssEphemeris::kGnssTypeFieldNumber;
const int GnssEphemeris::kKepplerOrbitFieldNumber;
const int GnssEphemeris::kGlonassOrbitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GnssEphemeris::GnssEphemeris()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::scc_info_GnssEphemeris.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.GnssEphemeris)
}
GnssEphemeris::GnssEphemeris(const GnssEphemeris& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_keppler_orbit()) {
    keppler_orbit_ = new ::apollo::drivers::gnss::KepplerOrbit(*from.keppler_orbit_);
  } else {
    keppler_orbit_ = NULL;
  }
  if (from.has_glonass_orbit()) {
    glonass_orbit_ = new ::apollo::drivers::gnss::GlonassOrbit(*from.glonass_orbit_);
  } else {
    glonass_orbit_ = NULL;
  }
  gnss_type_ = from.gnss_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.GnssEphemeris)
}

void GnssEphemeris::SharedCtor() {
  ::memset(&keppler_orbit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&glonass_orbit_) -
      reinterpret_cast<char*>(&keppler_orbit_)) + sizeof(glonass_orbit_));
  gnss_type_ = 3;
}

GnssEphemeris::~GnssEphemeris() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.GnssEphemeris)
  SharedDtor();
}

void GnssEphemeris::SharedDtor() {
  if (this != internal_default_instance()) delete keppler_orbit_;
  if (this != internal_default_instance()) delete glonass_orbit_;
}

void GnssEphemeris::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GnssEphemeris::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GnssEphemeris& GnssEphemeris::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::scc_info_GnssEphemeris.base);
  return *internal_default_instance();
}


void GnssEphemeris::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.GnssEphemeris)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(keppler_orbit_ != NULL);
      keppler_orbit_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(glonass_orbit_ != NULL);
      glonass_orbit_->Clear();
    }
    gnss_type_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GnssEphemeris::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.GnssEphemeris)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::GnssType_IsValid(value)) {
            set_gnss_type(static_cast< ::apollo::drivers::gnss::GnssType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.KepplerOrbit keppler_orbit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_keppler_orbit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.GlonassOrbit glonass_orbit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_glonass_orbit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.GnssEphemeris)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.GnssEphemeris)
  return false;
#undef DO_
}

void GnssEphemeris::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.GnssEphemeris)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gnss_type(), output);
  }

  // optional .apollo.drivers.gnss.KepplerOrbit keppler_orbit = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_keppler_orbit(), output);
  }

  // optional .apollo.drivers.gnss.GlonassOrbit glonass_orbit = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_glonass_orbit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.GnssEphemeris)
}

::google::protobuf::uint8* GnssEphemeris::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.GnssEphemeris)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gnss_type(), target);
  }

  // optional .apollo.drivers.gnss.KepplerOrbit keppler_orbit = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_keppler_orbit(), deterministic, target);
  }

  // optional .apollo.drivers.gnss.GlonassOrbit glonass_orbit = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_glonass_orbit(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.GnssEphemeris)
  return target;
}

size_t GnssEphemeris::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.GnssEphemeris)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.drivers.gnss.KepplerOrbit keppler_orbit = 2;
    if (has_keppler_orbit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *keppler_orbit_);
    }

    // optional .apollo.drivers.gnss.GlonassOrbit glonass_orbit = 3;
    if (has_glonass_orbit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *glonass_orbit_);
    }

    // optional .apollo.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
    if (has_gnss_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GnssEphemeris::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.GnssEphemeris)
  GOOGLE_DCHECK_NE(&from, this);
  const GnssEphemeris* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GnssEphemeris>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.GnssEphemeris)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.GnssEphemeris)
    MergeFrom(*source);
  }
}

void GnssEphemeris::MergeFrom(const GnssEphemeris& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.GnssEphemeris)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_keppler_orbit()->::apollo::drivers::gnss::KepplerOrbit::MergeFrom(from.keppler_orbit());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_glonass_orbit()->::apollo::drivers::gnss::GlonassOrbit::MergeFrom(from.glonass_orbit());
    }
    if (cached_has_bits & 0x00000004u) {
      gnss_type_ = from.gnss_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GnssEphemeris::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.GnssEphemeris)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssEphemeris::CopyFrom(const GnssEphemeris& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.GnssEphemeris)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssEphemeris::IsInitialized() const {
  return true;
}

void GnssEphemeris::Swap(GnssEphemeris* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GnssEphemeris::InternalSwap(GnssEphemeris* other) {
  using std::swap;
  swap(keppler_orbit_, other->keppler_orbit_);
  swap(glonass_orbit_, other->glonass_orbit_);
  swap(gnss_type_, other->gnss_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GnssEphemeris::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::BandObservation* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::BandObservation >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::BandObservation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::SatelliteObservation* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::SatelliteObservation >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::SatelliteObservation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::EpochObservation* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::EpochObservation >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::EpochObservation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::KepplerOrbit* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::KepplerOrbit >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::KepplerOrbit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::GlonassOrbit* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::GlonassOrbit >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::GlonassOrbit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::GnssEphemeris* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::GnssEphemeris >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::GnssEphemeris >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
