// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss_best_pose.proto

#include "modules/drivers/gnss/proto/gnss_best_pose.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fheader_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto
namespace apollo {
namespace drivers {
namespace gnss {
class GnssBestPoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GnssBestPose>
      _instance;
} _GnssBestPose_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto {
static void InitDefaultsGnssBestPose() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::_GnssBestPose_default_instance_;
    new (ptr) ::apollo::drivers::gnss::GnssBestPose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::GnssBestPose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GnssBestPose =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGnssBestPose}, {
      &protobuf_modules_2fcommon_2fproto_2fheader_2eproto::scc_info_Header.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GnssBestPose.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, measurement_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, sol_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, sol_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, height_msl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, undulation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, datum_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, latitude_std_dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, longitude_std_dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, height_std_dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, base_station_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, differential_age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, solution_age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, num_sats_tracked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, num_sats_in_solution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, num_sats_l1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, num_sats_multi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, reserved_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, extended_solution_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, galileo_beidou_used_mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::GnssBestPose, gps_glonass_used_mask_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  22,
  9,
  10,
  11,
  0,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 28, sizeof(::apollo::drivers::gnss::GnssBestPose)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::_GnssBestPose_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/drivers/gnss/proto/gnss_best_pose.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n/modules/drivers/gnss/proto/gnss_best_p"
      "ose.proto\022\023apollo.drivers.gnss\032!modules/"
      "common/proto/header.proto\"\252\005\n\014GnssBestPo"
      "se\022%\n\006header\030\001 \001(\0132\025.apollo.common.Heade"
      "r\022\030\n\020measurement_time\030\002 \001(\001\0227\n\nsol_statu"
      "s\030\003 \001(\0162#.apollo.drivers.gnss.SolutionSt"
      "atus\0223\n\010sol_type\030\004 \001(\0162!.apollo.drivers."
      "gnss.SolutionType\022\020\n\010latitude\030\005 \001(\001\022\021\n\tl"
      "ongitude\030\006 \001(\001\022\022\n\nheight_msl\030\007 \001(\001\022\022\n\nun"
      "dulation\030\010 \001(\002\022.\n\010datum_id\030\t \001(\0162\034.apoll"
      "o.drivers.gnss.DatumId\022\030\n\020latitude_std_d"
      "ev\030\n \001(\002\022\031\n\021longitude_std_dev\030\013 \001(\002\022\026\n\016h"
      "eight_std_dev\030\014 \001(\002\022\027\n\017base_station_id\030\r"
      " \001(\014\022\030\n\020differential_age\030\016 \001(\002\022\024\n\014soluti"
      "on_age\030\017 \001(\002\022\030\n\020num_sats_tracked\030\020 \001(\r\022\034"
      "\n\024num_sats_in_solution\030\021 \001(\r\022\023\n\013num_sats"
      "_l1\030\022 \001(\r\022\026\n\016num_sats_multi\030\023 \001(\r\022\020\n\010res"
      "erved\030\024 \001(\r\022 \n\030extended_solution_status\030"
      "\025 \001(\r\022 \n\030galileo_beidou_used_mask\030\026 \001(\r\022"
      "\035\n\025gps_glonass_used_mask\030\027 \001(\r*\220\002\n\016Solut"
      "ionStatus\022\020\n\014SOL_COMPUTED\020\000\022\024\n\020INSUFFICI"
      "ENT_OBS\020\001\022\022\n\016NO_CONVERGENCE\020\002\022\017\n\013SINGULA"
      "RITY\020\003\022\r\n\tCOV_TRACE\020\004\022\r\n\tTEST_DIST\020\005\022\016\n\n"
      "COLD_START\020\006\022\r\n\tV_H_LIMIT\020\007\022\014\n\010VARIANCE\020"
      "\010\022\r\n\tRESIDUALS\020\t\022\025\n\021INTEGRITY_WARNING\020\r\022"
      "\013\n\007PENDING\020\022\022\017\n\013INVALID_FIX\020\023\022\020\n\014UNAUTHO"
      "RIZED\020\024\022\020\n\014INVALID_RATE\020\026*\237\004\n\014SolutionTy"
      "pe\022\010\n\004NONE\020\000\022\014\n\010FIXEDPOS\020\001\022\017\n\013FIXEDHEIGH"
      "T\020\002\022\r\n\tFLOATCONV\020\004\022\014\n\010WIDELANE\020\005\022\016\n\nNARR"
      "OWLANE\020\006\022\024\n\020DOPPLER_VELOCITY\020\010\022\n\n\006SINGLE"
      "\020\020\022\013\n\007PSRDIFF\020\021\022\010\n\004WAAS\020\022\022\016\n\nPROPOGATED\020"
      "\023\022\014\n\010OMNISTAR\020\024\022\014\n\010L1_FLOAT\020 \022\022\n\016IONOFRE"
      "E_FLOAT\020!\022\020\n\014NARROW_FLOAT\020\"\022\n\n\006L1_INT\0200\022"
      "\014\n\010WIDE_INT\0201\022\016\n\nNARROW_INT\0202\022\022\n\016RTK_DIR"
      "ECT_INS\0203\022\014\n\010INS_SBAS\0204\022\r\n\tINS_PSRSP\0205\022\017"
      "\n\013INS_PSRDIFF\0206\022\020\n\014INS_RTKFLOAT\0207\022\020\n\014INS"
      "_RTKFIXED\0208\022\020\n\014INS_OMNISTAR\0209\022\023\n\017INS_OMN"
      "ISTAR_HP\020:\022\023\n\017INS_OMNISTAR_XP\020;\022\017\n\013OMNIS"
      "TAR_HP\020@\022\017\n\013OMNISTAR_XP\020A\022\022\n\016PPP_CONVERG"
      "ING\020D\022\007\n\003PPP\020E\022\026\n\022INS_PPP_CONVERGING\020I\022\013"
      "\n\007INS_PPP\020J*\024\n\007DatumId\022\t\n\005WGS84\020="
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1633);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/drivers/gnss/proto/gnss_best_pose.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto
namespace apollo {
namespace drivers {
namespace gnss {
const ::google::protobuf::EnumDescriptor* SolutionStatus_descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto::file_level_enum_descriptors[0];
}
bool SolutionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 13:
    case 18:
    case 19:
    case 20:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SolutionType_descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto::file_level_enum_descriptors[1];
}
bool SolutionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 8:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 32:
    case 33:
    case 34:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 64:
    case 65:
    case 68:
    case 69:
    case 73:
    case 74:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DatumId_descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto::file_level_enum_descriptors[2];
}
bool DatumId_IsValid(int value) {
  switch (value) {
    case 61:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GnssBestPose::InitAsDefaultInstance() {
  ::apollo::drivers::gnss::_GnssBestPose_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
void GnssBestPose::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GnssBestPose::kHeaderFieldNumber;
const int GnssBestPose::kMeasurementTimeFieldNumber;
const int GnssBestPose::kSolStatusFieldNumber;
const int GnssBestPose::kSolTypeFieldNumber;
const int GnssBestPose::kLatitudeFieldNumber;
const int GnssBestPose::kLongitudeFieldNumber;
const int GnssBestPose::kHeightMslFieldNumber;
const int GnssBestPose::kUndulationFieldNumber;
const int GnssBestPose::kDatumIdFieldNumber;
const int GnssBestPose::kLatitudeStdDevFieldNumber;
const int GnssBestPose::kLongitudeStdDevFieldNumber;
const int GnssBestPose::kHeightStdDevFieldNumber;
const int GnssBestPose::kBaseStationIdFieldNumber;
const int GnssBestPose::kDifferentialAgeFieldNumber;
const int GnssBestPose::kSolutionAgeFieldNumber;
const int GnssBestPose::kNumSatsTrackedFieldNumber;
const int GnssBestPose::kNumSatsInSolutionFieldNumber;
const int GnssBestPose::kNumSatsL1FieldNumber;
const int GnssBestPose::kNumSatsMultiFieldNumber;
const int GnssBestPose::kReservedFieldNumber;
const int GnssBestPose::kExtendedSolutionStatusFieldNumber;
const int GnssBestPose::kGalileoBeidouUsedMaskFieldNumber;
const int GnssBestPose::kGpsGlonassUsedMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GnssBestPose::GnssBestPose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto::scc_info_GnssBestPose.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.GnssBestPose)
}
GnssBestPose::GnssBestPose(const GnssBestPose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  base_station_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_base_station_id()) {
    base_station_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_station_id_);
  }
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&measurement_time_, &from.measurement_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&datum_id_) -
    reinterpret_cast<char*>(&measurement_time_)) + sizeof(datum_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.GnssBestPose)
}

void GnssBestPose::SharedCtor() {
  base_station_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gps_glonass_used_mask_) -
      reinterpret_cast<char*>(&header_)) + sizeof(gps_glonass_used_mask_));
  datum_id_ = 61;
}

GnssBestPose::~GnssBestPose() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.GnssBestPose)
  SharedDtor();
}

void GnssBestPose::SharedDtor() {
  base_station_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void GnssBestPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GnssBestPose::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GnssBestPose& GnssBestPose::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto::scc_info_GnssBestPose.base);
  return *internal_default_instance();
}


void GnssBestPose::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.GnssBestPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      base_station_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&measurement_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_msl_) -
        reinterpret_cast<char*>(&measurement_time_)) + sizeof(height_msl_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&undulation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_sats_in_solution_) -
        reinterpret_cast<char*>(&undulation_)) + sizeof(num_sats_in_solution_));
  }
  if (cached_has_bits & 8323072u) {
    ::memset(&num_sats_l1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gps_glonass_used_mask_) -
        reinterpret_cast<char*>(&num_sats_l1_)) + sizeof(gps_glonass_used_mask_));
    datum_id_ = 61;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GnssBestPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.GnssBestPose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double measurement_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_measurement_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.SolutionStatus sol_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::SolutionStatus_IsValid(value)) {
            set_sol_status(static_cast< ::apollo::drivers::gnss::SolutionStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.SolutionType sol_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::SolutionType_IsValid(value)) {
            set_sol_type(static_cast< ::apollo::drivers::gnss::SolutionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height_msl = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_height_msl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_msl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float undulation = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_undulation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &undulation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.DatumId datum_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::DatumId_IsValid(value)) {
            set_datum_id(static_cast< ::apollo::drivers::gnss::DatumId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float latitude_std_dev = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_latitude_std_dev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latitude_std_dev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float longitude_std_dev = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_longitude_std_dev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitude_std_dev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float height_std_dev = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_height_std_dev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_std_dev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes base_station_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_base_station_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float differential_age = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_differential_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &differential_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float solution_age = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_solution_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &solution_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_sats_tracked = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_num_sats_tracked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_sats_tracked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_sats_in_solution = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_num_sats_in_solution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_sats_in_solution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_sats_l1 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_num_sats_l1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_sats_l1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_sats_multi = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_num_sats_multi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_sats_multi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reserved = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_reserved();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 extended_solution_status = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_extended_solution_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extended_solution_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 galileo_beidou_used_mask = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_galileo_beidou_used_mask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &galileo_beidou_used_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gps_glonass_used_mask = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_gps_glonass_used_mask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gps_glonass_used_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.GnssBestPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.GnssBestPose)
  return false;
#undef DO_
}

void GnssBestPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.GnssBestPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional double measurement_time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->measurement_time(), output);
  }

  // optional .apollo.drivers.gnss.SolutionStatus sol_status = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sol_status(), output);
  }

  // optional .apollo.drivers.gnss.SolutionType sol_type = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->sol_type(), output);
  }

  // optional double latitude = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->latitude(), output);
  }

  // optional double longitude = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->longitude(), output);
  }

  // optional double height_msl = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->height_msl(), output);
  }

  // optional float undulation = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->undulation(), output);
  }

  // optional .apollo.drivers.gnss.DatumId datum_id = 9;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->datum_id(), output);
  }

  // optional float latitude_std_dev = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->latitude_std_dev(), output);
  }

  // optional float longitude_std_dev = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->longitude_std_dev(), output);
  }

  // optional float height_std_dev = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->height_std_dev(), output);
  }

  // optional bytes base_station_id = 13;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->base_station_id(), output);
  }

  // optional float differential_age = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->differential_age(), output);
  }

  // optional float solution_age = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->solution_age(), output);
  }

  // optional uint32 num_sats_tracked = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->num_sats_tracked(), output);
  }

  // optional uint32 num_sats_in_solution = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->num_sats_in_solution(), output);
  }

  // optional uint32 num_sats_l1 = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->num_sats_l1(), output);
  }

  // optional uint32 num_sats_multi = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->num_sats_multi(), output);
  }

  // optional uint32 reserved = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->reserved(), output);
  }

  // optional uint32 extended_solution_status = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->extended_solution_status(), output);
  }

  // optional uint32 galileo_beidou_used_mask = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->galileo_beidou_used_mask(), output);
  }

  // optional uint32 gps_glonass_used_mask = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->gps_glonass_used_mask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.GnssBestPose)
}

::google::protobuf::uint8* GnssBestPose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.GnssBestPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional double measurement_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->measurement_time(), target);
  }

  // optional .apollo.drivers.gnss.SolutionStatus sol_status = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sol_status(), target);
  }

  // optional .apollo.drivers.gnss.SolutionType sol_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->sol_type(), target);
  }

  // optional double latitude = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->latitude(), target);
  }

  // optional double longitude = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->longitude(), target);
  }

  // optional double height_msl = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->height_msl(), target);
  }

  // optional float undulation = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->undulation(), target);
  }

  // optional .apollo.drivers.gnss.DatumId datum_id = 9;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->datum_id(), target);
  }

  // optional float latitude_std_dev = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->latitude_std_dev(), target);
  }

  // optional float longitude_std_dev = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->longitude_std_dev(), target);
  }

  // optional float height_std_dev = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->height_std_dev(), target);
  }

  // optional bytes base_station_id = 13;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->base_station_id(), target);
  }

  // optional float differential_age = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->differential_age(), target);
  }

  // optional float solution_age = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->solution_age(), target);
  }

  // optional uint32 num_sats_tracked = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->num_sats_tracked(), target);
  }

  // optional uint32 num_sats_in_solution = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->num_sats_in_solution(), target);
  }

  // optional uint32 num_sats_l1 = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->num_sats_l1(), target);
  }

  // optional uint32 num_sats_multi = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->num_sats_multi(), target);
  }

  // optional uint32 reserved = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->reserved(), target);
  }

  // optional uint32 extended_solution_status = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->extended_solution_status(), target);
  }

  // optional uint32 galileo_beidou_used_mask = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->galileo_beidou_used_mask(), target);
  }

  // optional uint32 gps_glonass_used_mask = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->gps_glonass_used_mask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.GnssBestPose)
  return target;
}

size_t GnssBestPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.GnssBestPose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes base_station_id = 13;
    if (has_base_station_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->base_station_id());
    }

    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional double measurement_time = 2;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.gnss.SolutionStatus sol_status = 3;
    if (has_sol_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sol_status());
    }

    // optional .apollo.drivers.gnss.SolutionType sol_type = 4;
    if (has_sol_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sol_type());
    }

    // optional double latitude = 5;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 6;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double height_msl = 7;
    if (has_height_msl()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float undulation = 8;
    if (has_undulation()) {
      total_size += 1 + 4;
    }

    // optional float latitude_std_dev = 10;
    if (has_latitude_std_dev()) {
      total_size += 1 + 4;
    }

    // optional float longitude_std_dev = 11;
    if (has_longitude_std_dev()) {
      total_size += 1 + 4;
    }

    // optional float height_std_dev = 12;
    if (has_height_std_dev()) {
      total_size += 1 + 4;
    }

    // optional float differential_age = 14;
    if (has_differential_age()) {
      total_size += 1 + 4;
    }

    // optional float solution_age = 15;
    if (has_solution_age()) {
      total_size += 1 + 4;
    }

    // optional uint32 num_sats_tracked = 16;
    if (has_num_sats_tracked()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_sats_tracked());
    }

    // optional uint32 num_sats_in_solution = 17;
    if (has_num_sats_in_solution()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_sats_in_solution());
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional uint32 num_sats_l1 = 18;
    if (has_num_sats_l1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_sats_l1());
    }

    // optional uint32 num_sats_multi = 19;
    if (has_num_sats_multi()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_sats_multi());
    }

    // optional uint32 reserved = 20;
    if (has_reserved()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved());
    }

    // optional uint32 extended_solution_status = 21;
    if (has_extended_solution_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extended_solution_status());
    }

    // optional uint32 galileo_beidou_used_mask = 22;
    if (has_galileo_beidou_used_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->galileo_beidou_used_mask());
    }

    // optional uint32 gps_glonass_used_mask = 23;
    if (has_gps_glonass_used_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gps_glonass_used_mask());
    }

    // optional .apollo.drivers.gnss.DatumId datum_id = 9;
    if (has_datum_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datum_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GnssBestPose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.GnssBestPose)
  GOOGLE_DCHECK_NE(&from, this);
  const GnssBestPose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GnssBestPose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.GnssBestPose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.GnssBestPose)
    MergeFrom(*source);
  }
}

void GnssBestPose::MergeFrom(const GnssBestPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.GnssBestPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_base_station_id();
      base_station_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.base_station_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000004u) {
      measurement_time_ = from.measurement_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      sol_status_ = from.sol_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      sol_type_ = from.sol_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000080u) {
      height_msl_ = from.height_msl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      undulation_ = from.undulation_;
    }
    if (cached_has_bits & 0x00000200u) {
      latitude_std_dev_ = from.latitude_std_dev_;
    }
    if (cached_has_bits & 0x00000400u) {
      longitude_std_dev_ = from.longitude_std_dev_;
    }
    if (cached_has_bits & 0x00000800u) {
      height_std_dev_ = from.height_std_dev_;
    }
    if (cached_has_bits & 0x00001000u) {
      differential_age_ = from.differential_age_;
    }
    if (cached_has_bits & 0x00002000u) {
      solution_age_ = from.solution_age_;
    }
    if (cached_has_bits & 0x00004000u) {
      num_sats_tracked_ = from.num_sats_tracked_;
    }
    if (cached_has_bits & 0x00008000u) {
      num_sats_in_solution_ = from.num_sats_in_solution_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      num_sats_l1_ = from.num_sats_l1_;
    }
    if (cached_has_bits & 0x00020000u) {
      num_sats_multi_ = from.num_sats_multi_;
    }
    if (cached_has_bits & 0x00040000u) {
      reserved_ = from.reserved_;
    }
    if (cached_has_bits & 0x00080000u) {
      extended_solution_status_ = from.extended_solution_status_;
    }
    if (cached_has_bits & 0x00100000u) {
      galileo_beidou_used_mask_ = from.galileo_beidou_used_mask_;
    }
    if (cached_has_bits & 0x00200000u) {
      gps_glonass_used_mask_ = from.gps_glonass_used_mask_;
    }
    if (cached_has_bits & 0x00400000u) {
      datum_id_ = from.datum_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GnssBestPose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.GnssBestPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssBestPose::CopyFrom(const GnssBestPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.GnssBestPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssBestPose::IsInitialized() const {
  return true;
}

void GnssBestPose::Swap(GnssBestPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GnssBestPose::InternalSwap(GnssBestPose* other) {
  using std::swap;
  base_station_id_.Swap(&other->base_station_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(measurement_time_, other->measurement_time_);
  swap(sol_status_, other->sol_status_);
  swap(sol_type_, other->sol_type_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(height_msl_, other->height_msl_);
  swap(undulation_, other->undulation_);
  swap(latitude_std_dev_, other->latitude_std_dev_);
  swap(longitude_std_dev_, other->longitude_std_dev_);
  swap(height_std_dev_, other->height_std_dev_);
  swap(differential_age_, other->differential_age_);
  swap(solution_age_, other->solution_age_);
  swap(num_sats_tracked_, other->num_sats_tracked_);
  swap(num_sats_in_solution_, other->num_sats_in_solution_);
  swap(num_sats_l1_, other->num_sats_l1_);
  swap(num_sats_multi_, other->num_sats_multi_);
  swap(reserved_, other->reserved_);
  swap(extended_solution_status_, other->extended_solution_status_);
  swap(galileo_beidou_used_mask_, other->galileo_beidou_used_mask_);
  swap(gps_glonass_used_mask_, other->gps_glonass_used_mask_);
  swap(datum_id_, other->datum_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GnssBestPose::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fbest_5fpose_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::GnssBestPose* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::GnssBestPose >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::GnssBestPose >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
