// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/ins.proto

#include "modules/drivers/gnss/proto/ins.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point3D;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PointLLH;
}  // namespace protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto
namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fheader_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto
namespace apollo {
namespace drivers {
namespace gnss {
class InsStatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InsStat>
      _instance;
} _InsStat_default_instance_;
class InsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ins>
      _instance;
} _Ins_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto {
static void InitDefaultsInsStat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::_InsStat_default_instance_;
    new (ptr) ::apollo::drivers::gnss::InsStat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::InsStat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InsStat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInsStat}, {
      &protobuf_modules_2fcommon_2fproto_2fheader_2eproto::scc_info_Header.base,}};

static void InitDefaultsIns() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::_Ins_default_instance_;
    new (ptr) ::apollo::drivers::gnss::Ins();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::Ins::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Ins =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsIns}, {
      &protobuf_modules_2fcommon_2fproto_2fheader_2eproto::scc_info_Header.base,
      &protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::scc_info_PointLLH.base,
      &protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::scc_info_Point3D.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_InsStat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ins.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::InsStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::InsStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::InsStat, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::InsStat, ins_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::InsStat, pos_type_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Ins, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Ins, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Ins, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Ins, measurement_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Ins, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Ins, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Ins, euler_angles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Ins, linear_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Ins, angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Ins, linear_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Ins, position_covariance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Ins, euler_angles_covariance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Ins, linear_velocity_covariance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Ins, angular_velocity_covariance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Ins, linear_acceleration_covariance_),
  0,
  6,
  7,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::drivers::gnss::InsStat)},
  { 11, 29, sizeof(::apollo::drivers::gnss::Ins)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::_InsStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::_Ins_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/drivers/gnss/proto/ins.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n$modules/drivers/gnss/proto/ins.proto\022\023"
      "apollo.drivers.gnss\032!modules/common/prot"
      "o/header.proto\032#modules/common/proto/geo"
      "metry.proto\"V\n\007InsStat\022%\n\006header\030\001 \001(\0132\025"
      ".apollo.common.Header\022\022\n\nins_status\030\002 \001("
      "\r\022\020\n\010pos_type\030\003 \001(\r\"\326\004\n\003Ins\022%\n\006header\030\001 "
      "\001(\0132\025.apollo.common.Header\022\030\n\020measuremen"
      "t_time\030\002 \001(\001\022+\n\004type\030\003 \001(\0162\035.apollo.driv"
      "ers.gnss.Ins.Type\022)\n\010position\030\004 \001(\0132\027.ap"
      "ollo.common.PointLLH\022,\n\014euler_angles\030\005 \001"
      "(\0132\026.apollo.common.Point3D\022/\n\017linear_vel"
      "ocity\030\006 \001(\0132\026.apollo.common.Point3D\0220\n\020a"
      "ngular_velocity\030\007 \001(\0132\026.apollo.common.Po"
      "int3D\0223\n\023linear_acceleration\030\010 \001(\0132\026.apo"
      "llo.common.Point3D\022\037\n\023position_covarianc"
      "e\030\t \003(\002B\002\020\001\022#\n\027euler_angles_covariance\030\n"
      " \003(\002B\002\020\001\022&\n\032linear_velocity_covariance\030\013"
      " \003(\002B\002\020\001\022\'\n\033angular_velocity_covariance\030"
      "\014 \003(\002B\002\020\001\022*\n\036linear_acceleration_covaria"
      "nce\030\r \003(\002B\002\020\001\"-\n\004Type\022\013\n\007INVALID\020\000\022\016\n\nCO"
      "NVERGING\020\001\022\010\n\004GOOD\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 820);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/drivers/gnss/proto/ins.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto
namespace apollo {
namespace drivers {
namespace gnss {
const ::google::protobuf::EnumDescriptor* Ins_Type_descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::file_level_enum_descriptors[0];
}
bool Ins_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ins_Type Ins::INVALID;
const Ins_Type Ins::CONVERGING;
const Ins_Type Ins::GOOD;
const Ins_Type Ins::Type_MIN;
const Ins_Type Ins::Type_MAX;
const int Ins::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void InsStat::InitAsDefaultInstance() {
  ::apollo::drivers::gnss::_InsStat_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
void InsStat::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InsStat::kHeaderFieldNumber;
const int InsStat::kInsStatusFieldNumber;
const int InsStat::kPosTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InsStat::InsStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::scc_info_InsStat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.InsStat)
}
InsStat::InsStat(const InsStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&ins_status_, &from.ins_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_type_) -
    reinterpret_cast<char*>(&ins_status_)) + sizeof(pos_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.InsStat)
}

void InsStat::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(pos_type_));
}

InsStat::~InsStat() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.InsStat)
  SharedDtor();
}

void InsStat::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void InsStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InsStat::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InsStat& InsStat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::scc_info_InsStat.base);
  return *internal_default_instance();
}


void InsStat::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.InsStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&ins_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pos_type_) -
        reinterpret_cast<char*>(&ins_status_)) + sizeof(pos_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InsStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.InsStat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ins_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ins_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ins_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pos_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_pos_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.InsStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.InsStat)
  return false;
#undef DO_
}

void InsStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.InsStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional uint32 ins_status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ins_status(), output);
  }

  // optional uint32 pos_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.InsStat)
}

::google::protobuf::uint8* InsStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.InsStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional uint32 ins_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ins_status(), target);
  }

  // optional uint32 pos_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.InsStat)
  return target;
}

size_t InsStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.InsStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 ins_status = 2;
    if (has_ins_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ins_status());
    }

    // optional uint32 pos_type = 3;
    if (has_pos_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.InsStat)
  GOOGLE_DCHECK_NE(&from, this);
  const InsStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InsStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.InsStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.InsStat)
    MergeFrom(*source);
  }
}

void InsStat::MergeFrom(const InsStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.InsStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      ins_status_ = from.ins_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      pos_type_ = from.pos_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InsStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.InsStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsStat::CopyFrom(const InsStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.InsStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsStat::IsInitialized() const {
  return true;
}

void InsStat::Swap(InsStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InsStat::InternalSwap(InsStat* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(ins_status_, other->ins_status_);
  swap(pos_type_, other->pos_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InsStat::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ins::InitAsDefaultInstance() {
  ::apollo::drivers::gnss::_Ins_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::drivers::gnss::_Ins_default_instance_._instance.get_mutable()->position_ = const_cast< ::apollo::common::PointLLH*>(
      ::apollo::common::PointLLH::internal_default_instance());
  ::apollo::drivers::gnss::_Ins_default_instance_._instance.get_mutable()->euler_angles_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::drivers::gnss::_Ins_default_instance_._instance.get_mutable()->linear_velocity_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::drivers::gnss::_Ins_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::drivers::gnss::_Ins_default_instance_._instance.get_mutable()->linear_acceleration_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
}
void Ins::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
void Ins::clear_position() {
  if (position_ != NULL) position_->Clear();
  clear_has_position();
}
void Ins::clear_euler_angles() {
  if (euler_angles_ != NULL) euler_angles_->Clear();
  clear_has_euler_angles();
}
void Ins::clear_linear_velocity() {
  if (linear_velocity_ != NULL) linear_velocity_->Clear();
  clear_has_linear_velocity();
}
void Ins::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->Clear();
  clear_has_angular_velocity();
}
void Ins::clear_linear_acceleration() {
  if (linear_acceleration_ != NULL) linear_acceleration_->Clear();
  clear_has_linear_acceleration();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ins::kHeaderFieldNumber;
const int Ins::kMeasurementTimeFieldNumber;
const int Ins::kTypeFieldNumber;
const int Ins::kPositionFieldNumber;
const int Ins::kEulerAnglesFieldNumber;
const int Ins::kLinearVelocityFieldNumber;
const int Ins::kAngularVelocityFieldNumber;
const int Ins::kLinearAccelerationFieldNumber;
const int Ins::kPositionCovarianceFieldNumber;
const int Ins::kEulerAnglesCovarianceFieldNumber;
const int Ins::kLinearVelocityCovarianceFieldNumber;
const int Ins::kAngularVelocityCovarianceFieldNumber;
const int Ins::kLinearAccelerationCovarianceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ins::Ins()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::scc_info_Ins.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.Ins)
}
Ins::Ins(const Ins& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      position_covariance_(from.position_covariance_),
      euler_angles_covariance_(from.euler_angles_covariance_),
      linear_velocity_covariance_(from.linear_velocity_covariance_),
      angular_velocity_covariance_(from.angular_velocity_covariance_),
      linear_acceleration_covariance_(from.linear_acceleration_covariance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_position()) {
    position_ = new ::apollo::common::PointLLH(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_euler_angles()) {
    euler_angles_ = new ::apollo::common::Point3D(*from.euler_angles_);
  } else {
    euler_angles_ = NULL;
  }
  if (from.has_linear_velocity()) {
    linear_velocity_ = new ::apollo::common::Point3D(*from.linear_velocity_);
  } else {
    linear_velocity_ = NULL;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::apollo::common::Point3D(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  if (from.has_linear_acceleration()) {
    linear_acceleration_ = new ::apollo::common::Point3D(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = NULL;
  }
  ::memcpy(&measurement_time_, &from.measurement_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&measurement_time_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.Ins)
}

void Ins::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(type_));
}

Ins::~Ins() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.Ins)
  SharedDtor();
}

void Ins::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete euler_angles_;
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete angular_velocity_;
  if (this != internal_default_instance()) delete linear_acceleration_;
}

void Ins::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ins::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ins& Ins::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::scc_info_Ins.base);
  return *internal_default_instance();
}


void Ins::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.Ins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_covariance_.Clear();
  euler_angles_covariance_.Clear();
  linear_velocity_covariance_.Clear();
  angular_velocity_covariance_.Clear();
  linear_acceleration_covariance_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(euler_angles_ != NULL);
      euler_angles_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(linear_velocity_ != NULL);
      linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(angular_velocity_ != NULL);
      angular_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(linear_acceleration_ != NULL);
      linear_acceleration_->Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&measurement_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&measurement_time_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ins::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.Ins)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double measurement_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_measurement_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.Ins.Type type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::Ins_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::drivers::gnss::Ins_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.PointLLH position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D euler_angles = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_euler_angles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D linear_velocity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D angular_velocity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D linear_acceleration = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float position_covariance = 9 [packed = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_position_covariance())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 74u, input, this->mutable_position_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float euler_angles_covariance = 10 [packed = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_euler_angles_covariance())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 82u, input, this->mutable_euler_angles_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float linear_velocity_covariance = 11 [packed = true];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_linear_velocity_covariance())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 90u, input, this->mutable_linear_velocity_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float angular_velocity_covariance = 12 [packed = true];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_angular_velocity_covariance())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 98u, input, this->mutable_angular_velocity_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float linear_acceleration_covariance = 13 [packed = true];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_linear_acceleration_covariance())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 106u, input, this->mutable_linear_acceleration_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.Ins)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.Ins)
  return false;
#undef DO_
}

void Ins::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.Ins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional double measurement_time = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->measurement_time(), output);
  }

  // optional .apollo.drivers.gnss.Ins.Type type = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .apollo.common.PointLLH position = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_position(), output);
  }

  // optional .apollo.common.Point3D euler_angles = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_euler_angles(), output);
  }

  // optional .apollo.common.Point3D linear_velocity = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_linear_velocity(), output);
  }

  // optional .apollo.common.Point3D angular_velocity = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_angular_velocity(), output);
  }

  // optional .apollo.common.Point3D linear_acceleration = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_linear_acceleration(), output);
  }

  // repeated float position_covariance = 9 [packed = true];
  if (this->position_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _position_covariance_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->position_covariance().data(), this->position_covariance_size(), output);
  }

  // repeated float euler_angles_covariance = 10 [packed = true];
  if (this->euler_angles_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _euler_angles_covariance_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->euler_angles_covariance().data(), this->euler_angles_covariance_size(), output);
  }

  // repeated float linear_velocity_covariance = 11 [packed = true];
  if (this->linear_velocity_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _linear_velocity_covariance_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->linear_velocity_covariance().data(), this->linear_velocity_covariance_size(), output);
  }

  // repeated float angular_velocity_covariance = 12 [packed = true];
  if (this->angular_velocity_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _angular_velocity_covariance_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->angular_velocity_covariance().data(), this->angular_velocity_covariance_size(), output);
  }

  // repeated float linear_acceleration_covariance = 13 [packed = true];
  if (this->linear_acceleration_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _linear_acceleration_covariance_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->linear_acceleration_covariance().data(), this->linear_acceleration_covariance_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.Ins)
}

::google::protobuf::uint8* Ins::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.Ins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional double measurement_time = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->measurement_time(), target);
  }

  // optional .apollo.drivers.gnss.Ins.Type type = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .apollo.common.PointLLH position = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_position(), deterministic, target);
  }

  // optional .apollo.common.Point3D euler_angles = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_euler_angles(), deterministic, target);
  }

  // optional .apollo.common.Point3D linear_velocity = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_linear_velocity(), deterministic, target);
  }

  // optional .apollo.common.Point3D angular_velocity = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_angular_velocity(), deterministic, target);
  }

  // optional .apollo.common.Point3D linear_acceleration = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_linear_acceleration(), deterministic, target);
  }

  // repeated float position_covariance = 9 [packed = true];
  if (this->position_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _position_covariance_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->position_covariance_, target);
  }

  // repeated float euler_angles_covariance = 10 [packed = true];
  if (this->euler_angles_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _euler_angles_covariance_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->euler_angles_covariance_, target);
  }

  // repeated float linear_velocity_covariance = 11 [packed = true];
  if (this->linear_velocity_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _linear_velocity_covariance_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->linear_velocity_covariance_, target);
  }

  // repeated float angular_velocity_covariance = 12 [packed = true];
  if (this->angular_velocity_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _angular_velocity_covariance_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->angular_velocity_covariance_, target);
  }

  // repeated float linear_acceleration_covariance = 13 [packed = true];
  if (this->linear_acceleration_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _linear_acceleration_covariance_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->linear_acceleration_covariance_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.Ins)
  return target;
}

size_t Ins::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.Ins)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float position_covariance = 9 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->position_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_covariance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float euler_angles_covariance = 10 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->euler_angles_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _euler_angles_covariance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float linear_velocity_covariance = 11 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->linear_velocity_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _linear_velocity_covariance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float angular_velocity_covariance = 12 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->angular_velocity_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _angular_velocity_covariance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float linear_acceleration_covariance = 13 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->linear_acceleration_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _linear_acceleration_covariance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.common.PointLLH position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .apollo.common.Point3D euler_angles = 5;
    if (has_euler_angles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *euler_angles_);
    }

    // optional .apollo.common.Point3D linear_velocity = 6;
    if (has_linear_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *linear_velocity_);
    }

    // optional .apollo.common.Point3D angular_velocity = 7;
    if (has_angular_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *angular_velocity_);
    }

    // optional .apollo.common.Point3D linear_acceleration = 8;
    if (has_linear_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *linear_acceleration_);
    }

    // optional double measurement_time = 2;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

    // optional .apollo.drivers.gnss.Ins.Type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ins::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.Ins)
  GOOGLE_DCHECK_NE(&from, this);
  const Ins* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ins>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.Ins)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.Ins)
    MergeFrom(*source);
  }
}

void Ins::MergeFrom(const Ins& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.Ins)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_covariance_.MergeFrom(from.position_covariance_);
  euler_angles_covariance_.MergeFrom(from.euler_angles_covariance_);
  linear_velocity_covariance_.MergeFrom(from.linear_velocity_covariance_);
  angular_velocity_covariance_.MergeFrom(from.angular_velocity_covariance_);
  linear_acceleration_covariance_.MergeFrom(from.linear_acceleration_covariance_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_position()->::apollo::common::PointLLH::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_euler_angles()->::apollo::common::Point3D::MergeFrom(from.euler_angles());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_linear_velocity()->::apollo::common::Point3D::MergeFrom(from.linear_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_angular_velocity()->::apollo::common::Point3D::MergeFrom(from.angular_velocity());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_linear_acceleration()->::apollo::common::Point3D::MergeFrom(from.linear_acceleration());
    }
    if (cached_has_bits & 0x00000040u) {
      measurement_time_ = from.measurement_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ins::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.Ins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ins::CopyFrom(const Ins& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.Ins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ins::IsInitialized() const {
  return true;
}

void Ins::Swap(Ins* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ins::InternalSwap(Ins* other) {
  using std::swap;
  position_covariance_.InternalSwap(&other->position_covariance_);
  euler_angles_covariance_.InternalSwap(&other->euler_angles_covariance_);
  linear_velocity_covariance_.InternalSwap(&other->linear_velocity_covariance_);
  angular_velocity_covariance_.InternalSwap(&other->angular_velocity_covariance_);
  linear_acceleration_covariance_.InternalSwap(&other->linear_acceleration_covariance_);
  swap(header_, other->header_);
  swap(position_, other->position_);
  swap(euler_angles_, other->euler_angles_);
  swap(linear_velocity_, other->linear_velocity_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(linear_acceleration_, other->linear_acceleration_);
  swap(measurement_time_, other->measurement_time_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ins::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::InsStat* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::InsStat >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::InsStat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::Ins* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::Ins >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::Ins >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
