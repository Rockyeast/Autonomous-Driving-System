// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss.proto

#include "modules/drivers/gnss/proto/gnss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point3D;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PointLLH;
}  // namespace protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto
namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fheader_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto
namespace apollo {
namespace drivers {
namespace gnss {
class GnssDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gnss>
      _instance;
} _Gnss_default_instance_;
class RawDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RawData>
      _instance;
} _RawData_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto {
static void InitDefaultsGnss() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::_Gnss_default_instance_;
    new (ptr) ::apollo::drivers::gnss::Gnss();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::Gnss::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Gnss =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsGnss}, {
      &protobuf_modules_2fcommon_2fproto_2fheader_2eproto::scc_info_Header.base,
      &protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::scc_info_PointLLH.base,
      &protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::scc_info_Point3D.base,}};

static void InitDefaultsRawData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::_RawData_default_instance_;
    new (ptr) ::apollo::drivers::gnss::RawData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::RawData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RawData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRawData}, {
      &protobuf_modules_2fcommon_2fproto_2fheader_2eproto::scc_info_Header.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Gnss.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RawData.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, measurement_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, velocity_latency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, position_std_dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, linear_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, linear_velocity_std_dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, num_sats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, solution_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Gnss, position_type_),
  0,
  5,
  6,
  1,
  2,
  3,
  4,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::RawData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::RawData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::RawData, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::RawData, data_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::apollo::drivers::gnss::Gnss)},
  { 27, 34, sizeof(::apollo::drivers::gnss::RawData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::_Gnss_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::_RawData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/drivers/gnss/proto/gnss.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n%modules/drivers/gnss/proto/gnss.proto\022"
      "\023apollo.drivers.gnss\032!modules/common/pro"
      "to/header.proto\032#modules/common/proto/ge"
      "ometry.proto\"\202\004\n\004Gnss\022%\n\006header\030\001 \001(\0132\025."
      "apollo.common.Header\022\030\n\020measurement_time"
      "\030\002 \001(\001\022\033\n\020velocity_latency\030\003 \001(\002:\0010\022)\n\010p"
      "osition\030\004 \001(\0132\027.apollo.common.PointLLH\0220"
      "\n\020position_std_dev\030\005 \001(\0132\026.apollo.common"
      ".Point3D\022/\n\017linear_velocity\030\006 \001(\0132\026.apol"
      "lo.common.Point3D\0227\n\027linear_velocity_std"
      "_dev\030\007 \001(\0132\026.apollo.common.Point3D\022\020\n\010nu"
      "m_sats\030\010 \001(\005\022,\n\004type\030\t \001(\0162\036.apollo.driv"
      "ers.gnss.Gnss.Type\022\027\n\017solution_status\030\n "
      "\001(\r\022\025\n\rposition_type\030\013 \001(\r\"e\n\004Type\022\013\n\007IN"
      "VALID\020\000\022\016\n\nPROPAGATED\020\001\022\n\n\006SINGLE\020\002\022\013\n\007P"
      "SRDIFF\020\003\022\007\n\003PPP\020\004\022\r\n\tRTK_FLOAT\020\005\022\017\n\013RTK_"
      "INTEGER\020\006\">\n\007RawData\022%\n\006header\030\001 \001(\0132\025.a"
      "pollo.common.Header\022\014\n\004data\030\002 \001(\014"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 713);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/drivers/gnss/proto/gnss.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto
namespace apollo {
namespace drivers {
namespace gnss {
const ::google::protobuf::EnumDescriptor* Gnss_Type_descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::file_level_enum_descriptors[0];
}
bool Gnss_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gnss_Type Gnss::INVALID;
const Gnss_Type Gnss::PROPAGATED;
const Gnss_Type Gnss::SINGLE;
const Gnss_Type Gnss::PSRDIFF;
const Gnss_Type Gnss::PPP;
const Gnss_Type Gnss::RTK_FLOAT;
const Gnss_Type Gnss::RTK_INTEGER;
const Gnss_Type Gnss::Type_MIN;
const Gnss_Type Gnss::Type_MAX;
const int Gnss::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Gnss::InitAsDefaultInstance() {
  ::apollo::drivers::gnss::_Gnss_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::drivers::gnss::_Gnss_default_instance_._instance.get_mutable()->position_ = const_cast< ::apollo::common::PointLLH*>(
      ::apollo::common::PointLLH::internal_default_instance());
  ::apollo::drivers::gnss::_Gnss_default_instance_._instance.get_mutable()->position_std_dev_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::drivers::gnss::_Gnss_default_instance_._instance.get_mutable()->linear_velocity_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::drivers::gnss::_Gnss_default_instance_._instance.get_mutable()->linear_velocity_std_dev_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
}
void Gnss::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
void Gnss::clear_position() {
  if (position_ != NULL) position_->Clear();
  clear_has_position();
}
void Gnss::clear_position_std_dev() {
  if (position_std_dev_ != NULL) position_std_dev_->Clear();
  clear_has_position_std_dev();
}
void Gnss::clear_linear_velocity() {
  if (linear_velocity_ != NULL) linear_velocity_->Clear();
  clear_has_linear_velocity();
}
void Gnss::clear_linear_velocity_std_dev() {
  if (linear_velocity_std_dev_ != NULL) linear_velocity_std_dev_->Clear();
  clear_has_linear_velocity_std_dev();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gnss::kHeaderFieldNumber;
const int Gnss::kMeasurementTimeFieldNumber;
const int Gnss::kVelocityLatencyFieldNumber;
const int Gnss::kPositionFieldNumber;
const int Gnss::kPositionStdDevFieldNumber;
const int Gnss::kLinearVelocityFieldNumber;
const int Gnss::kLinearVelocityStdDevFieldNumber;
const int Gnss::kNumSatsFieldNumber;
const int Gnss::kTypeFieldNumber;
const int Gnss::kSolutionStatusFieldNumber;
const int Gnss::kPositionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gnss::Gnss()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::scc_info_Gnss.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.Gnss)
}
Gnss::Gnss(const Gnss& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_position()) {
    position_ = new ::apollo::common::PointLLH(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_position_std_dev()) {
    position_std_dev_ = new ::apollo::common::Point3D(*from.position_std_dev_);
  } else {
    position_std_dev_ = NULL;
  }
  if (from.has_linear_velocity()) {
    linear_velocity_ = new ::apollo::common::Point3D(*from.linear_velocity_);
  } else {
    linear_velocity_ = NULL;
  }
  if (from.has_linear_velocity_std_dev()) {
    linear_velocity_std_dev_ = new ::apollo::common::Point3D(*from.linear_velocity_std_dev_);
  } else {
    linear_velocity_std_dev_ = NULL;
  }
  ::memcpy(&measurement_time_, &from.measurement_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_type_) -
    reinterpret_cast<char*>(&measurement_time_)) + sizeof(position_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.Gnss)
}

void Gnss::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(position_type_));
}

Gnss::~Gnss() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.Gnss)
  SharedDtor();
}

void Gnss::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete position_std_dev_;
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete linear_velocity_std_dev_;
}

void Gnss::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Gnss::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gnss& Gnss::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::scc_info_Gnss.base);
  return *internal_default_instance();
}


void Gnss::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.Gnss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(position_std_dev_ != NULL);
      position_std_dev_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(linear_velocity_ != NULL);
      linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(linear_velocity_std_dev_ != NULL);
      linear_velocity_std_dev_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&measurement_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_sats_) -
        reinterpret_cast<char*>(&measurement_time_)) + sizeof(num_sats_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_type_) -
        reinterpret_cast<char*>(&type_)) + sizeof(position_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gnss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.Gnss)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double measurement_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_measurement_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float velocity_latency = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_velocity_latency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_latency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.PointLLH position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D position_std_dev = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D linear_velocity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D linear_velocity_std_dev = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_velocity_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_sats = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_num_sats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_sats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.Gnss.Type type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::Gnss_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::drivers::gnss::Gnss_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 solution_status = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_solution_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solution_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_position_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.Gnss)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.Gnss)
  return false;
#undef DO_
}

void Gnss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.Gnss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional double measurement_time = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->measurement_time(), output);
  }

  // optional float velocity_latency = 3 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->velocity_latency(), output);
  }

  // optional .apollo.common.PointLLH position = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_position(), output);
  }

  // optional .apollo.common.Point3D position_std_dev = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_position_std_dev(), output);
  }

  // optional .apollo.common.Point3D linear_velocity = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_linear_velocity(), output);
  }

  // optional .apollo.common.Point3D linear_velocity_std_dev = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_linear_velocity_std_dev(), output);
  }

  // optional int32 num_sats = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->num_sats(), output);
  }

  // optional .apollo.drivers.gnss.Gnss.Type type = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->type(), output);
  }

  // optional uint32 solution_status = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->solution_status(), output);
  }

  // optional uint32 position_type = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->position_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.Gnss)
}

::google::protobuf::uint8* Gnss::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.Gnss)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional double measurement_time = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->measurement_time(), target);
  }

  // optional float velocity_latency = 3 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->velocity_latency(), target);
  }

  // optional .apollo.common.PointLLH position = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_position(), deterministic, target);
  }

  // optional .apollo.common.Point3D position_std_dev = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_position_std_dev(), deterministic, target);
  }

  // optional .apollo.common.Point3D linear_velocity = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_linear_velocity(), deterministic, target);
  }

  // optional .apollo.common.Point3D linear_velocity_std_dev = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_linear_velocity_std_dev(), deterministic, target);
  }

  // optional int32 num_sats = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->num_sats(), target);
  }

  // optional .apollo.drivers.gnss.Gnss.Type type = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->type(), target);
  }

  // optional uint32 solution_status = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->solution_status(), target);
  }

  // optional uint32 position_type = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->position_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.Gnss)
  return target;
}

size_t Gnss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.Gnss)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.common.PointLLH position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .apollo.common.Point3D position_std_dev = 5;
    if (has_position_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_std_dev_);
    }

    // optional .apollo.common.Point3D linear_velocity = 6;
    if (has_linear_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *linear_velocity_);
    }

    // optional .apollo.common.Point3D linear_velocity_std_dev = 7;
    if (has_linear_velocity_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *linear_velocity_std_dev_);
    }

    // optional double measurement_time = 2;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

    // optional float velocity_latency = 3 [default = 0];
    if (has_velocity_latency()) {
      total_size += 1 + 4;
    }

    // optional int32 num_sats = 8;
    if (has_num_sats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_sats());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional .apollo.drivers.gnss.Gnss.Type type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 solution_status = 10;
    if (has_solution_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solution_status());
    }

    // optional uint32 position_type = 11;
    if (has_position_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gnss::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.Gnss)
  GOOGLE_DCHECK_NE(&from, this);
  const Gnss* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gnss>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.Gnss)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.Gnss)
    MergeFrom(*source);
  }
}

void Gnss::MergeFrom(const Gnss& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.Gnss)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_position()->::apollo::common::PointLLH::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_position_std_dev()->::apollo::common::Point3D::MergeFrom(from.position_std_dev());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_linear_velocity()->::apollo::common::Point3D::MergeFrom(from.linear_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_linear_velocity_std_dev()->::apollo::common::Point3D::MergeFrom(from.linear_velocity_std_dev());
    }
    if (cached_has_bits & 0x00000020u) {
      measurement_time_ = from.measurement_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      velocity_latency_ = from.velocity_latency_;
    }
    if (cached_has_bits & 0x00000080u) {
      num_sats_ = from.num_sats_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000200u) {
      solution_status_ = from.solution_status_;
    }
    if (cached_has_bits & 0x00000400u) {
      position_type_ = from.position_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gnss::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.Gnss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gnss::CopyFrom(const Gnss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.Gnss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gnss::IsInitialized() const {
  return true;
}

void Gnss::Swap(Gnss* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gnss::InternalSwap(Gnss* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(position_, other->position_);
  swap(position_std_dev_, other->position_std_dev_);
  swap(linear_velocity_, other->linear_velocity_);
  swap(linear_velocity_std_dev_, other->linear_velocity_std_dev_);
  swap(measurement_time_, other->measurement_time_);
  swap(velocity_latency_, other->velocity_latency_);
  swap(num_sats_, other->num_sats_);
  swap(type_, other->type_);
  swap(solution_status_, other->solution_status_);
  swap(position_type_, other->position_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Gnss::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RawData::InitAsDefaultInstance() {
  ::apollo::drivers::gnss::_RawData_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
void RawData::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RawData::kHeaderFieldNumber;
const int RawData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RawData::RawData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::scc_info_RawData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.RawData)
}
RawData::RawData(const RawData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.RawData)
}

void RawData::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
}

RawData::~RawData() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.RawData)
  SharedDtor();
}

void RawData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void RawData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RawData::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RawData& RawData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::scc_info_RawData.base);
  return *internal_default_instance();
}


void RawData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.RawData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RawData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.RawData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.RawData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.RawData)
  return false;
#undef DO_
}

void RawData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.RawData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.RawData)
}

::google::protobuf::uint8* RawData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.RawData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.RawData)
  return target;
}

size_t RawData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.RawData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.RawData)
  GOOGLE_DCHECK_NE(&from, this);
  const RawData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RawData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.RawData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.RawData)
    MergeFrom(*source);
  }
}

void RawData::MergeFrom(const RawData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.RawData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
  }
}

void RawData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.RawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawData::CopyFrom(const RawData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.RawData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawData::IsInitialized() const {
  return true;
}

void RawData::Swap(RawData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RawData::InternalSwap(RawData* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RawData::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::Gnss* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::Gnss >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::Gnss >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::RawData* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::RawData >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::RawData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
