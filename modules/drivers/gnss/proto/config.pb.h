// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/config.proto

#ifndef PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto
#define PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto 

namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto
namespace apollo {
namespace drivers {
namespace gnss {
namespace config {
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class NovatelConfig;
class NovatelConfigDefaultTypeInternal;
extern NovatelConfigDefaultTypeInternal _NovatelConfig_default_instance_;
class Stream;
class StreamDefaultTypeInternal;
extern StreamDefaultTypeInternal _Stream_default_instance_;
class Stream_Ntrip;
class Stream_NtripDefaultTypeInternal;
extern Stream_NtripDefaultTypeInternal _Stream_Ntrip_default_instance_;
class Stream_Serial;
class Stream_SerialDefaultTypeInternal;
extern Stream_SerialDefaultTypeInternal _Stream_Serial_default_instance_;
class Stream_Tcp;
class Stream_TcpDefaultTypeInternal;
extern Stream_TcpDefaultTypeInternal _Stream_Tcp_default_instance_;
class Stream_Udp;
class Stream_UdpDefaultTypeInternal;
extern Stream_UdpDefaultTypeInternal _Stream_Udp_default_instance_;
class TF;
class TFDefaultTypeInternal;
extern TFDefaultTypeInternal _TF_default_instance_;
class UbloxConfig;
class UbloxConfigDefaultTypeInternal;
extern UbloxConfigDefaultTypeInternal _UbloxConfig_default_instance_;
}  // namespace config
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::drivers::gnss::config::Config* Arena::CreateMaybeMessage<::apollo::drivers::gnss::config::Config>(Arena*);
template<> ::apollo::drivers::gnss::config::NovatelConfig* Arena::CreateMaybeMessage<::apollo::drivers::gnss::config::NovatelConfig>(Arena*);
template<> ::apollo::drivers::gnss::config::Stream* Arena::CreateMaybeMessage<::apollo::drivers::gnss::config::Stream>(Arena*);
template<> ::apollo::drivers::gnss::config::Stream_Ntrip* Arena::CreateMaybeMessage<::apollo::drivers::gnss::config::Stream_Ntrip>(Arena*);
template<> ::apollo::drivers::gnss::config::Stream_Serial* Arena::CreateMaybeMessage<::apollo::drivers::gnss::config::Stream_Serial>(Arena*);
template<> ::apollo::drivers::gnss::config::Stream_Tcp* Arena::CreateMaybeMessage<::apollo::drivers::gnss::config::Stream_Tcp>(Arena*);
template<> ::apollo::drivers::gnss::config::Stream_Udp* Arena::CreateMaybeMessage<::apollo::drivers::gnss::config::Stream_Udp>(Arena*);
template<> ::apollo::drivers::gnss::config::TF* Arena::CreateMaybeMessage<::apollo::drivers::gnss::config::TF>(Arena*);
template<> ::apollo::drivers::gnss::config::UbloxConfig* Arena::CreateMaybeMessage<::apollo::drivers::gnss::config::UbloxConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace drivers {
namespace gnss {
namespace config {

enum Stream_Format {
  Stream_Format_UNKNOWN = 0,
  Stream_Format_NMEA = 1,
  Stream_Format_RTCM_V2 = 2,
  Stream_Format_RTCM_V3 = 3,
  Stream_Format_NOVATEL_TEXT = 10,
  Stream_Format_NOVATEL_BINARY = 11,
  Stream_Format_UBLOX_TEXT = 20,
  Stream_Format_UBLOX_BINARY = 21
};
bool Stream_Format_IsValid(int value);
const Stream_Format Stream_Format_Format_MIN = Stream_Format_UNKNOWN;
const Stream_Format Stream_Format_Format_MAX = Stream_Format_UBLOX_BINARY;
const int Stream_Format_Format_ARRAYSIZE = Stream_Format_Format_MAX + 1;

const ::google::protobuf::EnumDescriptor* Stream_Format_descriptor();
inline const ::std::string& Stream_Format_Name(Stream_Format value) {
  return ::google::protobuf::internal::NameOfEnum(
    Stream_Format_descriptor(), value);
}
inline bool Stream_Format_Parse(
    const ::std::string& name, Stream_Format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Stream_Format>(
    Stream_Format_descriptor(), name, value);
}
enum Config_RtkSolutionType {
  Config_RtkSolutionType_RTK_RECEIVER_SOLUTION = 1,
  Config_RtkSolutionType_RTK_SOFTWARE_SOLUTION = 2
};
bool Config_RtkSolutionType_IsValid(int value);
const Config_RtkSolutionType Config_RtkSolutionType_RtkSolutionType_MIN = Config_RtkSolutionType_RTK_RECEIVER_SOLUTION;
const Config_RtkSolutionType Config_RtkSolutionType_RtkSolutionType_MAX = Config_RtkSolutionType_RTK_SOFTWARE_SOLUTION;
const int Config_RtkSolutionType_RtkSolutionType_ARRAYSIZE = Config_RtkSolutionType_RtkSolutionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Config_RtkSolutionType_descriptor();
inline const ::std::string& Config_RtkSolutionType_Name(Config_RtkSolutionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Config_RtkSolutionType_descriptor(), value);
}
inline bool Config_RtkSolutionType_Parse(
    const ::std::string& name, Config_RtkSolutionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Config_RtkSolutionType>(
    Config_RtkSolutionType_descriptor(), name, value);
}
enum ImuType {
  IMAR_FSAS = 13,
  ISA100C = 26,
  ADIS16488 = 31,
  STIM300 = 32,
  ISA100 = 34,
  ISA100_400HZ = 38,
  ISA100C_400HZ = 39,
  CPT_XW5651 = 40,
  G320N = 41,
  UM442 = 42,
  IAM20680 = 57
};
bool ImuType_IsValid(int value);
const ImuType ImuType_MIN = IMAR_FSAS;
const ImuType ImuType_MAX = IAM20680;
const int ImuType_ARRAYSIZE = ImuType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImuType_descriptor();
inline const ::std::string& ImuType_Name(ImuType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImuType_descriptor(), value);
}
inline bool ImuType_Parse(
    const ::std::string& name, ImuType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImuType>(
    ImuType_descriptor(), name, value);
}
// ===================================================================

class Stream_Serial : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.config.Stream.Serial) */ {
 public:
  Stream_Serial();
  virtual ~Stream_Serial();

  Stream_Serial(const Stream_Serial& from);

  inline Stream_Serial& operator=(const Stream_Serial& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Stream_Serial(Stream_Serial&& from) noexcept
    : Stream_Serial() {
    *this = ::std::move(from);
  }

  inline Stream_Serial& operator=(Stream_Serial&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stream_Serial& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stream_Serial* internal_default_instance() {
    return reinterpret_cast<const Stream_Serial*>(
               &_Stream_Serial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Stream_Serial* other);
  friend void swap(Stream_Serial& a, Stream_Serial& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Stream_Serial* New() const final {
    return CreateMaybeMessage<Stream_Serial>(NULL);
  }

  Stream_Serial* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Stream_Serial>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Stream_Serial& from);
  void MergeFrom(const Stream_Serial& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stream_Serial* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes device = 1;
  bool has_device() const;
  void clear_device();
  static const int kDeviceFieldNumber = 1;
  const ::std::string& device() const;
  void set_device(const ::std::string& value);
  #if LANG_CXX11
  void set_device(::std::string&& value);
  #endif
  void set_device(const char* value);
  void set_device(const void* value, size_t size);
  ::std::string* mutable_device();
  ::std::string* release_device();
  void set_allocated_device(::std::string* device);

  // optional int32 baud_rate = 2 [default = 9600];
  bool has_baud_rate() const;
  void clear_baud_rate();
  static const int kBaudRateFieldNumber = 2;
  ::google::protobuf::int32 baud_rate() const;
  void set_baud_rate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.config.Stream.Serial)
 private:
  void set_has_device();
  void clear_has_device();
  void set_has_baud_rate();
  void clear_has_baud_rate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  ::google::protobuf::int32 baud_rate_;
  friend struct ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Stream_Tcp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.config.Stream.Tcp) */ {
 public:
  Stream_Tcp();
  virtual ~Stream_Tcp();

  Stream_Tcp(const Stream_Tcp& from);

  inline Stream_Tcp& operator=(const Stream_Tcp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Stream_Tcp(Stream_Tcp&& from) noexcept
    : Stream_Tcp() {
    *this = ::std::move(from);
  }

  inline Stream_Tcp& operator=(Stream_Tcp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stream_Tcp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stream_Tcp* internal_default_instance() {
    return reinterpret_cast<const Stream_Tcp*>(
               &_Stream_Tcp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Stream_Tcp* other);
  friend void swap(Stream_Tcp& a, Stream_Tcp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Stream_Tcp* New() const final {
    return CreateMaybeMessage<Stream_Tcp>(NULL);
  }

  Stream_Tcp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Stream_Tcp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Stream_Tcp& from);
  void MergeFrom(const Stream_Tcp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stream_Tcp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes address = 1;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional int32 port = 2 [default = 3001];
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.config.Stream.Tcp)
 private:
  void set_has_address();
  void clear_has_address();
  void set_has_port();
  void clear_has_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::int32 port_;
  friend struct ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Stream_Udp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.config.Stream.Udp) */ {
 public:
  Stream_Udp();
  virtual ~Stream_Udp();

  Stream_Udp(const Stream_Udp& from);

  inline Stream_Udp& operator=(const Stream_Udp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Stream_Udp(Stream_Udp&& from) noexcept
    : Stream_Udp() {
    *this = ::std::move(from);
  }

  inline Stream_Udp& operator=(Stream_Udp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stream_Udp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stream_Udp* internal_default_instance() {
    return reinterpret_cast<const Stream_Udp*>(
               &_Stream_Udp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Stream_Udp* other);
  friend void swap(Stream_Udp& a, Stream_Udp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Stream_Udp* New() const final {
    return CreateMaybeMessage<Stream_Udp>(NULL);
  }

  Stream_Udp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Stream_Udp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Stream_Udp& from);
  void MergeFrom(const Stream_Udp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stream_Udp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes address = 1;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional int32 port = 2 [default = 3001];
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.config.Stream.Udp)
 private:
  void set_has_address();
  void clear_has_address();
  void set_has_port();
  void clear_has_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::int32 port_;
  friend struct ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Stream_Ntrip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.config.Stream.Ntrip) */ {
 public:
  Stream_Ntrip();
  virtual ~Stream_Ntrip();

  Stream_Ntrip(const Stream_Ntrip& from);

  inline Stream_Ntrip& operator=(const Stream_Ntrip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Stream_Ntrip(Stream_Ntrip&& from) noexcept
    : Stream_Ntrip() {
    *this = ::std::move(from);
  }

  inline Stream_Ntrip& operator=(Stream_Ntrip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stream_Ntrip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stream_Ntrip* internal_default_instance() {
    return reinterpret_cast<const Stream_Ntrip*>(
               &_Stream_Ntrip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Stream_Ntrip* other);
  friend void swap(Stream_Ntrip& a, Stream_Ntrip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Stream_Ntrip* New() const final {
    return CreateMaybeMessage<Stream_Ntrip>(NULL);
  }

  Stream_Ntrip* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Stream_Ntrip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Stream_Ntrip& from);
  void MergeFrom(const Stream_Ntrip& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stream_Ntrip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes address = 1;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 1;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional bytes mount_point = 3;
  bool has_mount_point() const;
  void clear_mount_point();
  static const int kMountPointFieldNumber = 3;
  const ::std::string& mount_point() const;
  void set_mount_point(const ::std::string& value);
  #if LANG_CXX11
  void set_mount_point(::std::string&& value);
  #endif
  void set_mount_point(const char* value);
  void set_mount_point(const void* value, size_t size);
  ::std::string* mutable_mount_point();
  ::std::string* release_mount_point();
  void set_allocated_mount_point(::std::string* mount_point);

  // optional bytes user = 4;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 4;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const void* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // optional bytes password = 5;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 5;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const void* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional int32 port = 2 [default = 2101];
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // optional uint32 timeout_s = 6 [default = 30];
  bool has_timeout_s() const;
  void clear_timeout_s();
  static const int kTimeoutSFieldNumber = 6;
  ::google::protobuf::uint32 timeout_s() const;
  void set_timeout_s(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.config.Stream.Ntrip)
 private:
  void set_has_address();
  void clear_has_address();
  void set_has_port();
  void clear_has_port();
  void set_has_mount_point();
  void clear_has_mount_point();
  void set_has_user();
  void clear_has_user();
  void set_has_password();
  void clear_has_password();
  void set_has_timeout_s();
  void clear_has_timeout_s();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr mount_point_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::uint32 timeout_s_;
  friend struct ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Stream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.config.Stream) */ {
 public:
  Stream();
  virtual ~Stream();

  Stream(const Stream& from);

  inline Stream& operator=(const Stream& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Stream(Stream&& from) noexcept
    : Stream() {
    *this = ::std::move(from);
  }

  inline Stream& operator=(Stream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stream& default_instance();

  enum TypeCase {
    kSerial = 2,
    kTcp = 3,
    kUdp = 4,
    kNtrip = 5,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stream* internal_default_instance() {
    return reinterpret_cast<const Stream*>(
               &_Stream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Stream* other);
  friend void swap(Stream& a, Stream& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Stream* New() const final {
    return CreateMaybeMessage<Stream>(NULL);
  }

  Stream* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Stream>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Stream& from);
  void MergeFrom(const Stream& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Stream_Serial Serial;
  typedef Stream_Tcp Tcp;
  typedef Stream_Udp Udp;
  typedef Stream_Ntrip Ntrip;

  typedef Stream_Format Format;
  static const Format UNKNOWN =
    Stream_Format_UNKNOWN;
  static const Format NMEA =
    Stream_Format_NMEA;
  static const Format RTCM_V2 =
    Stream_Format_RTCM_V2;
  static const Format RTCM_V3 =
    Stream_Format_RTCM_V3;
  static const Format NOVATEL_TEXT =
    Stream_Format_NOVATEL_TEXT;
  static const Format NOVATEL_BINARY =
    Stream_Format_NOVATEL_BINARY;
  static const Format UBLOX_TEXT =
    Stream_Format_UBLOX_TEXT;
  static const Format UBLOX_BINARY =
    Stream_Format_UBLOX_BINARY;
  static inline bool Format_IsValid(int value) {
    return Stream_Format_IsValid(value);
  }
  static const Format Format_MIN =
    Stream_Format_Format_MIN;
  static const Format Format_MAX =
    Stream_Format_Format_MAX;
  static const int Format_ARRAYSIZE =
    Stream_Format_Format_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Format_descriptor() {
    return Stream_Format_descriptor();
  }
  static inline const ::std::string& Format_Name(Format value) {
    return Stream_Format_Name(value);
  }
  static inline bool Format_Parse(const ::std::string& name,
      Format* value) {
    return Stream_Format_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.drivers.gnss.config.Stream.Format format = 1;
  bool has_format() const;
  void clear_format();
  static const int kFormatFieldNumber = 1;
  ::apollo::drivers::gnss::config::Stream_Format format() const;
  void set_format(::apollo::drivers::gnss::config::Stream_Format value);

  // optional bool push_location = 6;
  bool has_push_location() const;
  void clear_push_location();
  static const int kPushLocationFieldNumber = 6;
  bool push_location() const;
  void set_push_location(bool value);

  // optional .apollo.drivers.gnss.config.Stream.Serial serial = 2;
  bool has_serial() const;
  void clear_serial();
  static const int kSerialFieldNumber = 2;
  private:
  const ::apollo::drivers::gnss::config::Stream_Serial& _internal_serial() const;
  public:
  const ::apollo::drivers::gnss::config::Stream_Serial& serial() const;
  ::apollo::drivers::gnss::config::Stream_Serial* release_serial();
  ::apollo::drivers::gnss::config::Stream_Serial* mutable_serial();
  void set_allocated_serial(::apollo::drivers::gnss::config::Stream_Serial* serial);

  // optional .apollo.drivers.gnss.config.Stream.Tcp tcp = 3;
  bool has_tcp() const;
  void clear_tcp();
  static const int kTcpFieldNumber = 3;
  private:
  const ::apollo::drivers::gnss::config::Stream_Tcp& _internal_tcp() const;
  public:
  const ::apollo::drivers::gnss::config::Stream_Tcp& tcp() const;
  ::apollo::drivers::gnss::config::Stream_Tcp* release_tcp();
  ::apollo::drivers::gnss::config::Stream_Tcp* mutable_tcp();
  void set_allocated_tcp(::apollo::drivers::gnss::config::Stream_Tcp* tcp);

  // optional .apollo.drivers.gnss.config.Stream.Udp udp = 4;
  bool has_udp() const;
  void clear_udp();
  static const int kUdpFieldNumber = 4;
  private:
  const ::apollo::drivers::gnss::config::Stream_Udp& _internal_udp() const;
  public:
  const ::apollo::drivers::gnss::config::Stream_Udp& udp() const;
  ::apollo::drivers::gnss::config::Stream_Udp* release_udp();
  ::apollo::drivers::gnss::config::Stream_Udp* mutable_udp();
  void set_allocated_udp(::apollo::drivers::gnss::config::Stream_Udp* udp);

  // optional .apollo.drivers.gnss.config.Stream.Ntrip ntrip = 5;
  bool has_ntrip() const;
  void clear_ntrip();
  static const int kNtripFieldNumber = 5;
  private:
  const ::apollo::drivers::gnss::config::Stream_Ntrip& _internal_ntrip() const;
  public:
  const ::apollo::drivers::gnss::config::Stream_Ntrip& ntrip() const;
  ::apollo::drivers::gnss::config::Stream_Ntrip* release_ntrip();
  ::apollo::drivers::gnss::config::Stream_Ntrip* mutable_ntrip();
  void set_allocated_ntrip(::apollo::drivers::gnss::config::Stream_Ntrip* ntrip);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.config.Stream)
 private:
  void set_has_format();
  void clear_has_format();
  void set_has_serial();
  void set_has_tcp();
  void set_has_udp();
  void set_has_ntrip();
  void set_has_push_location();
  void clear_has_push_location();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int format_;
  bool push_location_;
  union TypeUnion {
    TypeUnion() {}
    ::apollo::drivers::gnss::config::Stream_Serial* serial_;
    ::apollo::drivers::gnss::config::Stream_Tcp* tcp_;
    ::apollo::drivers::gnss::config::Stream_Udp* udp_;
    ::apollo::drivers::gnss::config::Stream_Ntrip* ntrip_;
  } type_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NovatelConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.config.NovatelConfig) */ {
 public:
  NovatelConfig();
  virtual ~NovatelConfig();

  NovatelConfig(const NovatelConfig& from);

  inline NovatelConfig& operator=(const NovatelConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NovatelConfig(NovatelConfig&& from) noexcept
    : NovatelConfig() {
    *this = ::std::move(from);
  }

  inline NovatelConfig& operator=(NovatelConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NovatelConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NovatelConfig* internal_default_instance() {
    return reinterpret_cast<const NovatelConfig*>(
               &_NovatelConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(NovatelConfig* other);
  friend void swap(NovatelConfig& a, NovatelConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NovatelConfig* New() const final {
    return CreateMaybeMessage<NovatelConfig>(NULL);
  }

  NovatelConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NovatelConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NovatelConfig& from);
  void MergeFrom(const NovatelConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NovatelConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 imu_orientation = 1 [default = 5];
  bool has_imu_orientation() const;
  void clear_imu_orientation();
  static const int kImuOrientationFieldNumber = 1;
  ::google::protobuf::int32 imu_orientation() const;
  void set_imu_orientation(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.config.NovatelConfig)
 private:
  void set_has_imu_orientation();
  void clear_has_imu_orientation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 imu_orientation_;
  friend struct ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UbloxConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.config.UbloxConfig) */ {
 public:
  UbloxConfig();
  virtual ~UbloxConfig();

  UbloxConfig(const UbloxConfig& from);

  inline UbloxConfig& operator=(const UbloxConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UbloxConfig(UbloxConfig&& from) noexcept
    : UbloxConfig() {
    *this = ::std::move(from);
  }

  inline UbloxConfig& operator=(UbloxConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UbloxConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UbloxConfig* internal_default_instance() {
    return reinterpret_cast<const UbloxConfig*>(
               &_UbloxConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(UbloxConfig* other);
  friend void swap(UbloxConfig& a, UbloxConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UbloxConfig* New() const final {
    return CreateMaybeMessage<UbloxConfig>(NULL);
  }

  UbloxConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UbloxConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UbloxConfig& from);
  void MergeFrom(const UbloxConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UbloxConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.config.UbloxConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TF : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.config.TF) */ {
 public:
  TF();
  virtual ~TF();

  TF(const TF& from);

  inline TF& operator=(const TF& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TF(TF&& from) noexcept
    : TF() {
    *this = ::std::move(from);
  }

  inline TF& operator=(TF&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TF& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TF* internal_default_instance() {
    return reinterpret_cast<const TF*>(
               &_TF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TF* other);
  friend void swap(TF& a, TF& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TF* New() const final {
    return CreateMaybeMessage<TF>(NULL);
  }

  TF* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TF>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TF& from);
  void MergeFrom(const TF& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TF* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string frame_id = 1 [default = "world"];
  bool has_frame_id() const;
  void clear_frame_id();
  static const int kFrameIdFieldNumber = 1;
  const ::std::string& frame_id() const;
  void set_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_frame_id(::std::string&& value);
  #endif
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  ::std::string* mutable_frame_id();
  ::std::string* release_frame_id();
  void set_allocated_frame_id(::std::string* frame_id);

  // optional string child_frame_id = 2 [default = "novatel"];
  bool has_child_frame_id() const;
  void clear_child_frame_id();
  static const int kChildFrameIdFieldNumber = 2;
  const ::std::string& child_frame_id() const;
  void set_child_frame_id(const ::std::string& value);
  #if LANG_CXX11
  void set_child_frame_id(::std::string&& value);
  #endif
  void set_child_frame_id(const char* value);
  void set_child_frame_id(const char* value, size_t size);
  ::std::string* mutable_child_frame_id();
  ::std::string* release_child_frame_id();
  void set_allocated_child_frame_id(::std::string* child_frame_id);

  // optional bool enable = 3 [default = false];
  bool has_enable() const;
  void clear_enable();
  static const int kEnableFieldNumber = 3;
  bool enable() const;
  void set_enable(bool value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.config.TF)
 private:
  void set_has_frame_id();
  void clear_has_frame_id();
  void set_has_child_frame_id();
  void clear_has_child_frame_id();
  void set_has_enable();
  void clear_has_enable();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_frame_id_;
  private:
  ::google::protobuf::internal::ArenaStringPtr frame_id_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_child_frame_id_;
  private:
  ::google::protobuf::internal::ArenaStringPtr child_frame_id_;
  bool enable_;
  friend struct ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.gnss.config.Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Config(Config&& from) noexcept
    : Config() {
    *this = ::std::move(from);
  }

  inline Config& operator=(Config&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  enum DeviceConfigCase {
    kNovatelConfig = 7,
    kUbloxConfig = 8,
    DEVICE_CONFIG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Config* other);
  friend void swap(Config& a, Config& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Config* New() const final {
    return CreateMaybeMessage<Config>(NULL);
  }

  Config* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Config>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Config_RtkSolutionType RtkSolutionType;
  static const RtkSolutionType RTK_RECEIVER_SOLUTION =
    Config_RtkSolutionType_RTK_RECEIVER_SOLUTION;
  static const RtkSolutionType RTK_SOFTWARE_SOLUTION =
    Config_RtkSolutionType_RTK_SOFTWARE_SOLUTION;
  static inline bool RtkSolutionType_IsValid(int value) {
    return Config_RtkSolutionType_IsValid(value);
  }
  static const RtkSolutionType RtkSolutionType_MIN =
    Config_RtkSolutionType_RtkSolutionType_MIN;
  static const RtkSolutionType RtkSolutionType_MAX =
    Config_RtkSolutionType_RtkSolutionType_MAX;
  static const int RtkSolutionType_ARRAYSIZE =
    Config_RtkSolutionType_RtkSolutionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RtkSolutionType_descriptor() {
    return Config_RtkSolutionType_descriptor();
  }
  static inline const ::std::string& RtkSolutionType_Name(RtkSolutionType value) {
    return Config_RtkSolutionType_Name(value);
  }
  static inline bool RtkSolutionType_Parse(const ::std::string& name,
      RtkSolutionType* value) {
    return Config_RtkSolutionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated bytes login_commands = 5;
  int login_commands_size() const;
  void clear_login_commands();
  static const int kLoginCommandsFieldNumber = 5;
  const ::std::string& login_commands(int index) const;
  ::std::string* mutable_login_commands(int index);
  void set_login_commands(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_login_commands(int index, ::std::string&& value);
  #endif
  void set_login_commands(int index, const char* value);
  void set_login_commands(int index, const void* value, size_t size);
  ::std::string* add_login_commands();
  void add_login_commands(const ::std::string& value);
  #if LANG_CXX11
  void add_login_commands(::std::string&& value);
  #endif
  void add_login_commands(const char* value);
  void add_login_commands(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& login_commands() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_login_commands();

  // repeated bytes logout_commands = 6;
  int logout_commands_size() const;
  void clear_logout_commands();
  static const int kLogoutCommandsFieldNumber = 6;
  const ::std::string& logout_commands(int index) const;
  ::std::string* mutable_logout_commands(int index);
  void set_logout_commands(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_logout_commands(int index, ::std::string&& value);
  #endif
  void set_logout_commands(int index, const char* value);
  void set_logout_commands(int index, const void* value, size_t size);
  ::std::string* add_logout_commands();
  void add_logout_commands(const ::std::string& value);
  #if LANG_CXX11
  void add_logout_commands(::std::string&& value);
  #endif
  void add_logout_commands(const char* value);
  void add_logout_commands(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& logout_commands() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_logout_commands();

  // optional string proj4_text = 11;
  bool has_proj4_text() const;
  void clear_proj4_text();
  static const int kProj4TextFieldNumber = 11;
  const ::std::string& proj4_text() const;
  void set_proj4_text(const ::std::string& value);
  #if LANG_CXX11
  void set_proj4_text(::std::string&& value);
  #endif
  void set_proj4_text(const char* value);
  void set_proj4_text(const char* value, size_t size);
  ::std::string* mutable_proj4_text();
  ::std::string* release_proj4_text();
  void set_allocated_proj4_text(::std::string* proj4_text);

  // optional string wheel_parameters = 13;
  bool has_wheel_parameters() const;
  void clear_wheel_parameters();
  static const int kWheelParametersFieldNumber = 13;
  const ::std::string& wheel_parameters() const;
  void set_wheel_parameters(const ::std::string& value);
  #if LANG_CXX11
  void set_wheel_parameters(::std::string&& value);
  #endif
  void set_wheel_parameters(const char* value);
  void set_wheel_parameters(const char* value, size_t size);
  ::std::string* mutable_wheel_parameters();
  ::std::string* release_wheel_parameters();
  void set_allocated_wheel_parameters(::std::string* wheel_parameters);

  // optional string gpsbin_folder = 14;
  bool has_gpsbin_folder() const;
  void clear_gpsbin_folder();
  static const int kGpsbinFolderFieldNumber = 14;
  const ::std::string& gpsbin_folder() const;
  void set_gpsbin_folder(const ::std::string& value);
  #if LANG_CXX11
  void set_gpsbin_folder(::std::string&& value);
  #endif
  void set_gpsbin_folder(const char* value);
  void set_gpsbin_folder(const char* value, size_t size);
  ::std::string* mutable_gpsbin_folder();
  ::std::string* release_gpsbin_folder();
  void set_allocated_gpsbin_folder(::std::string* gpsbin_folder);

  // optional .apollo.drivers.gnss.config.Stream data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  private:
  const ::apollo::drivers::gnss::config::Stream& _internal_data() const;
  public:
  const ::apollo::drivers::gnss::config::Stream& data() const;
  ::apollo::drivers::gnss::config::Stream* release_data();
  ::apollo::drivers::gnss::config::Stream* mutable_data();
  void set_allocated_data(::apollo::drivers::gnss::config::Stream* data);

  // optional .apollo.drivers.gnss.config.Stream command = 2;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 2;
  private:
  const ::apollo::drivers::gnss::config::Stream& _internal_command() const;
  public:
  const ::apollo::drivers::gnss::config::Stream& command() const;
  ::apollo::drivers::gnss::config::Stream* release_command();
  ::apollo::drivers::gnss::config::Stream* mutable_command();
  void set_allocated_command(::apollo::drivers::gnss::config::Stream* command);

  // optional .apollo.drivers.gnss.config.Stream rtk_from = 3;
  bool has_rtk_from() const;
  void clear_rtk_from();
  static const int kRtkFromFieldNumber = 3;
  private:
  const ::apollo::drivers::gnss::config::Stream& _internal_rtk_from() const;
  public:
  const ::apollo::drivers::gnss::config::Stream& rtk_from() const;
  ::apollo::drivers::gnss::config::Stream* release_rtk_from();
  ::apollo::drivers::gnss::config::Stream* mutable_rtk_from();
  void set_allocated_rtk_from(::apollo::drivers::gnss::config::Stream* rtk_from);

  // optional .apollo.drivers.gnss.config.Stream rtk_to = 4;
  bool has_rtk_to() const;
  void clear_rtk_to();
  static const int kRtkToFieldNumber = 4;
  private:
  const ::apollo::drivers::gnss::config::Stream& _internal_rtk_to() const;
  public:
  const ::apollo::drivers::gnss::config::Stream& rtk_to() const;
  ::apollo::drivers::gnss::config::Stream* release_rtk_to();
  ::apollo::drivers::gnss::config::Stream* mutable_rtk_to();
  void set_allocated_rtk_to(::apollo::drivers::gnss::config::Stream* rtk_to);

  // optional .apollo.drivers.gnss.config.TF tf = 12;
  bool has_tf() const;
  void clear_tf();
  static const int kTfFieldNumber = 12;
  private:
  const ::apollo::drivers::gnss::config::TF& _internal_tf() const;
  public:
  const ::apollo::drivers::gnss::config::TF& tf() const;
  ::apollo::drivers::gnss::config::TF* release_tf();
  ::apollo::drivers::gnss::config::TF* mutable_tf();
  void set_allocated_tf(::apollo::drivers::gnss::config::TF* tf);

  // optional .apollo.drivers.gnss.config.Config.RtkSolutionType rtk_solution_type = 9;
  bool has_rtk_solution_type() const;
  void clear_rtk_solution_type();
  static const int kRtkSolutionTypeFieldNumber = 9;
  ::apollo::drivers::gnss::config::Config_RtkSolutionType rtk_solution_type() const;
  void set_rtk_solution_type(::apollo::drivers::gnss::config::Config_RtkSolutionType value);

  // optional .apollo.drivers.gnss.config.ImuType imu_type = 10;
  bool has_imu_type() const;
  void clear_imu_type();
  static const int kImuTypeFieldNumber = 10;
  ::apollo::drivers::gnss::config::ImuType imu_type() const;
  void set_imu_type(::apollo::drivers::gnss::config::ImuType value);

  // optional .apollo.drivers.gnss.config.NovatelConfig novatel_config = 7;
  bool has_novatel_config() const;
  void clear_novatel_config();
  static const int kNovatelConfigFieldNumber = 7;
  private:
  const ::apollo::drivers::gnss::config::NovatelConfig& _internal_novatel_config() const;
  public:
  const ::apollo::drivers::gnss::config::NovatelConfig& novatel_config() const;
  ::apollo::drivers::gnss::config::NovatelConfig* release_novatel_config();
  ::apollo::drivers::gnss::config::NovatelConfig* mutable_novatel_config();
  void set_allocated_novatel_config(::apollo::drivers::gnss::config::NovatelConfig* novatel_config);

  // optional .apollo.drivers.gnss.config.UbloxConfig ublox_config = 8;
  bool has_ublox_config() const;
  void clear_ublox_config();
  static const int kUbloxConfigFieldNumber = 8;
  private:
  const ::apollo::drivers::gnss::config::UbloxConfig& _internal_ublox_config() const;
  public:
  const ::apollo::drivers::gnss::config::UbloxConfig& ublox_config() const;
  ::apollo::drivers::gnss::config::UbloxConfig* release_ublox_config();
  ::apollo::drivers::gnss::config::UbloxConfig* mutable_ublox_config();
  void set_allocated_ublox_config(::apollo::drivers::gnss::config::UbloxConfig* ublox_config);

  void clear_device_config();
  DeviceConfigCase device_config_case() const;
  // @@protoc_insertion_point(class_scope:apollo.drivers.gnss.config.Config)
 private:
  void set_has_data();
  void clear_has_data();
  void set_has_command();
  void clear_has_command();
  void set_has_rtk_from();
  void clear_has_rtk_from();
  void set_has_rtk_to();
  void clear_has_rtk_to();
  void set_has_novatel_config();
  void set_has_ublox_config();
  void set_has_rtk_solution_type();
  void clear_has_rtk_solution_type();
  void set_has_imu_type();
  void clear_has_imu_type();
  void set_has_proj4_text();
  void clear_has_proj4_text();
  void set_has_tf();
  void clear_has_tf();
  void set_has_wheel_parameters();
  void clear_has_wheel_parameters();
  void set_has_gpsbin_folder();
  void clear_has_gpsbin_folder();

  inline bool has_device_config() const;
  inline void clear_has_device_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> login_commands_;
  ::google::protobuf::RepeatedPtrField< ::std::string> logout_commands_;
  ::google::protobuf::internal::ArenaStringPtr proj4_text_;
  ::google::protobuf::internal::ArenaStringPtr wheel_parameters_;
  ::google::protobuf::internal::ArenaStringPtr gpsbin_folder_;
  ::apollo::drivers::gnss::config::Stream* data_;
  ::apollo::drivers::gnss::config::Stream* command_;
  ::apollo::drivers::gnss::config::Stream* rtk_from_;
  ::apollo::drivers::gnss::config::Stream* rtk_to_;
  ::apollo::drivers::gnss::config::TF* tf_;
  int rtk_solution_type_;
  int imu_type_;
  union DeviceConfigUnion {
    DeviceConfigUnion() {}
    ::apollo::drivers::gnss::config::NovatelConfig* novatel_config_;
    ::apollo::drivers::gnss::config::UbloxConfig* ublox_config_;
  } device_config_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Stream_Serial

// optional bytes device = 1;
inline bool Stream_Serial::has_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stream_Serial::set_has_device() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stream_Serial::clear_has_device() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stream_Serial::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device();
}
inline const ::std::string& Stream_Serial::device() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Stream.Serial.device)
  return device_.GetNoArena();
}
inline void Stream_Serial::set_device(const ::std::string& value) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Stream.Serial.device)
}
#if LANG_CXX11
inline void Stream_Serial::set_device(::std::string&& value) {
  set_has_device();
  device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.gnss.config.Stream.Serial.device)
}
#endif
inline void Stream_Serial::set_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.gnss.config.Stream.Serial.device)
}
inline void Stream_Serial::set_device(const void* value, size_t size) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.gnss.config.Stream.Serial.device)
}
inline ::std::string* Stream_Serial::mutable_device() {
  set_has_device();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Stream.Serial.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stream_Serial::release_device() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Stream.Serial.device)
  if (!has_device()) {
    return NULL;
  }
  clear_has_device();
  return device_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stream_Serial::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    set_has_device();
  } else {
    clear_has_device();
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Stream.Serial.device)
}

// optional int32 baud_rate = 2 [default = 9600];
inline bool Stream_Serial::has_baud_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stream_Serial::set_has_baud_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stream_Serial::clear_has_baud_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stream_Serial::clear_baud_rate() {
  baud_rate_ = 9600;
  clear_has_baud_rate();
}
inline ::google::protobuf::int32 Stream_Serial::baud_rate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Stream.Serial.baud_rate)
  return baud_rate_;
}
inline void Stream_Serial::set_baud_rate(::google::protobuf::int32 value) {
  set_has_baud_rate();
  baud_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Stream.Serial.baud_rate)
}

// -------------------------------------------------------------------

// Stream_Tcp

// optional bytes address = 1;
inline bool Stream_Tcp::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stream_Tcp::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stream_Tcp::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stream_Tcp::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& Stream_Tcp::address() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Stream.Tcp.address)
  return address_.GetNoArena();
}
inline void Stream_Tcp::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Stream.Tcp.address)
}
#if LANG_CXX11
inline void Stream_Tcp::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.gnss.config.Stream.Tcp.address)
}
#endif
inline void Stream_Tcp::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.gnss.config.Stream.Tcp.address)
}
inline void Stream_Tcp::set_address(const void* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.gnss.config.Stream.Tcp.address)
}
inline ::std::string* Stream_Tcp::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Stream.Tcp.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stream_Tcp::release_address() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Stream.Tcp.address)
  if (!has_address()) {
    return NULL;
  }
  clear_has_address();
  return address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stream_Tcp::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Stream.Tcp.address)
}

// optional int32 port = 2 [default = 3001];
inline bool Stream_Tcp::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stream_Tcp::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stream_Tcp::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stream_Tcp::clear_port() {
  port_ = 3001;
  clear_has_port();
}
inline ::google::protobuf::int32 Stream_Tcp::port() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Stream.Tcp.port)
  return port_;
}
inline void Stream_Tcp::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Stream.Tcp.port)
}

// -------------------------------------------------------------------

// Stream_Udp

// optional bytes address = 1;
inline bool Stream_Udp::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stream_Udp::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stream_Udp::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stream_Udp::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& Stream_Udp::address() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Stream.Udp.address)
  return address_.GetNoArena();
}
inline void Stream_Udp::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Stream.Udp.address)
}
#if LANG_CXX11
inline void Stream_Udp::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.gnss.config.Stream.Udp.address)
}
#endif
inline void Stream_Udp::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.gnss.config.Stream.Udp.address)
}
inline void Stream_Udp::set_address(const void* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.gnss.config.Stream.Udp.address)
}
inline ::std::string* Stream_Udp::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Stream.Udp.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stream_Udp::release_address() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Stream.Udp.address)
  if (!has_address()) {
    return NULL;
  }
  clear_has_address();
  return address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stream_Udp::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Stream.Udp.address)
}

// optional int32 port = 2 [default = 3001];
inline bool Stream_Udp::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stream_Udp::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stream_Udp::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stream_Udp::clear_port() {
  port_ = 3001;
  clear_has_port();
}
inline ::google::protobuf::int32 Stream_Udp::port() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Stream.Udp.port)
  return port_;
}
inline void Stream_Udp::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Stream.Udp.port)
}

// -------------------------------------------------------------------

// Stream_Ntrip

// optional bytes address = 1;
inline bool Stream_Ntrip::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stream_Ntrip::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stream_Ntrip::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stream_Ntrip::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& Stream_Ntrip::address() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Stream.Ntrip.address)
  return address_.GetNoArena();
}
inline void Stream_Ntrip::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Stream.Ntrip.address)
}
#if LANG_CXX11
inline void Stream_Ntrip::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.gnss.config.Stream.Ntrip.address)
}
#endif
inline void Stream_Ntrip::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.gnss.config.Stream.Ntrip.address)
}
inline void Stream_Ntrip::set_address(const void* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.gnss.config.Stream.Ntrip.address)
}
inline ::std::string* Stream_Ntrip::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Stream.Ntrip.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stream_Ntrip::release_address() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Stream.Ntrip.address)
  if (!has_address()) {
    return NULL;
  }
  clear_has_address();
  return address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stream_Ntrip::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Stream.Ntrip.address)
}

// optional int32 port = 2 [default = 2101];
inline bool Stream_Ntrip::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Stream_Ntrip::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Stream_Ntrip::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Stream_Ntrip::clear_port() {
  port_ = 2101;
  clear_has_port();
}
inline ::google::protobuf::int32 Stream_Ntrip::port() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Stream.Ntrip.port)
  return port_;
}
inline void Stream_Ntrip::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Stream.Ntrip.port)
}

// optional bytes mount_point = 3;
inline bool Stream_Ntrip::has_mount_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stream_Ntrip::set_has_mount_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stream_Ntrip::clear_has_mount_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stream_Ntrip::clear_mount_point() {
  mount_point_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mount_point();
}
inline const ::std::string& Stream_Ntrip::mount_point() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Stream.Ntrip.mount_point)
  return mount_point_.GetNoArena();
}
inline void Stream_Ntrip::set_mount_point(const ::std::string& value) {
  set_has_mount_point();
  mount_point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Stream.Ntrip.mount_point)
}
#if LANG_CXX11
inline void Stream_Ntrip::set_mount_point(::std::string&& value) {
  set_has_mount_point();
  mount_point_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.gnss.config.Stream.Ntrip.mount_point)
}
#endif
inline void Stream_Ntrip::set_mount_point(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mount_point();
  mount_point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.gnss.config.Stream.Ntrip.mount_point)
}
inline void Stream_Ntrip::set_mount_point(const void* value, size_t size) {
  set_has_mount_point();
  mount_point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.gnss.config.Stream.Ntrip.mount_point)
}
inline ::std::string* Stream_Ntrip::mutable_mount_point() {
  set_has_mount_point();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Stream.Ntrip.mount_point)
  return mount_point_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stream_Ntrip::release_mount_point() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Stream.Ntrip.mount_point)
  if (!has_mount_point()) {
    return NULL;
  }
  clear_has_mount_point();
  return mount_point_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stream_Ntrip::set_allocated_mount_point(::std::string* mount_point) {
  if (mount_point != NULL) {
    set_has_mount_point();
  } else {
    clear_has_mount_point();
  }
  mount_point_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mount_point);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Stream.Ntrip.mount_point)
}

// optional bytes user = 4;
inline bool Stream_Ntrip::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Stream_Ntrip::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Stream_Ntrip::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Stream_Ntrip::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
inline const ::std::string& Stream_Ntrip::user() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Stream.Ntrip.user)
  return user_.GetNoArena();
}
inline void Stream_Ntrip::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Stream.Ntrip.user)
}
#if LANG_CXX11
inline void Stream_Ntrip::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.gnss.config.Stream.Ntrip.user)
}
#endif
inline void Stream_Ntrip::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.gnss.config.Stream.Ntrip.user)
}
inline void Stream_Ntrip::set_user(const void* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.gnss.config.Stream.Ntrip.user)
}
inline ::std::string* Stream_Ntrip::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Stream.Ntrip.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stream_Ntrip::release_user() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Stream.Ntrip.user)
  if (!has_user()) {
    return NULL;
  }
  clear_has_user();
  return user_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stream_Ntrip::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Stream.Ntrip.user)
}

// optional bytes password = 5;
inline bool Stream_Ntrip::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Stream_Ntrip::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Stream_Ntrip::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Stream_Ntrip::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& Stream_Ntrip::password() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Stream.Ntrip.password)
  return password_.GetNoArena();
}
inline void Stream_Ntrip::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Stream.Ntrip.password)
}
#if LANG_CXX11
inline void Stream_Ntrip::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.gnss.config.Stream.Ntrip.password)
}
#endif
inline void Stream_Ntrip::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.gnss.config.Stream.Ntrip.password)
}
inline void Stream_Ntrip::set_password(const void* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.gnss.config.Stream.Ntrip.password)
}
inline ::std::string* Stream_Ntrip::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Stream.Ntrip.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stream_Ntrip::release_password() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Stream.Ntrip.password)
  if (!has_password()) {
    return NULL;
  }
  clear_has_password();
  return password_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stream_Ntrip::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Stream.Ntrip.password)
}

// optional uint32 timeout_s = 6 [default = 30];
inline bool Stream_Ntrip::has_timeout_s() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Stream_Ntrip::set_has_timeout_s() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Stream_Ntrip::clear_has_timeout_s() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Stream_Ntrip::clear_timeout_s() {
  timeout_s_ = 30u;
  clear_has_timeout_s();
}
inline ::google::protobuf::uint32 Stream_Ntrip::timeout_s() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Stream.Ntrip.timeout_s)
  return timeout_s_;
}
inline void Stream_Ntrip::set_timeout_s(::google::protobuf::uint32 value) {
  set_has_timeout_s();
  timeout_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Stream.Ntrip.timeout_s)
}

// -------------------------------------------------------------------

// Stream

// optional .apollo.drivers.gnss.config.Stream.Format format = 1;
inline bool Stream::has_format() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stream::set_has_format() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stream::clear_has_format() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stream::clear_format() {
  format_ = 0;
  clear_has_format();
}
inline ::apollo::drivers::gnss::config::Stream_Format Stream::format() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Stream.format)
  return static_cast< ::apollo::drivers::gnss::config::Stream_Format >(format_);
}
inline void Stream::set_format(::apollo::drivers::gnss::config::Stream_Format value) {
  assert(::apollo::drivers::gnss::config::Stream_Format_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Stream.format)
}

// optional .apollo.drivers.gnss.config.Stream.Serial serial = 2;
inline bool Stream::has_serial() const {
  return type_case() == kSerial;
}
inline void Stream::set_has_serial() {
  _oneof_case_[0] = kSerial;
}
inline void Stream::clear_serial() {
  if (has_serial()) {
    delete type_.serial_;
    clear_has_type();
  }
}
inline const ::apollo::drivers::gnss::config::Stream_Serial& Stream::_internal_serial() const {
  return *type_.serial_;
}
inline ::apollo::drivers::gnss::config::Stream_Serial* Stream::release_serial() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Stream.serial)
  if (has_serial()) {
    clear_has_type();
      ::apollo::drivers::gnss::config::Stream_Serial* temp = type_.serial_;
    type_.serial_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::apollo::drivers::gnss::config::Stream_Serial& Stream::serial() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Stream.serial)
  return has_serial()
      ? *type_.serial_
      : *reinterpret_cast< ::apollo::drivers::gnss::config::Stream_Serial*>(&::apollo::drivers::gnss::config::_Stream_Serial_default_instance_);
}
inline ::apollo::drivers::gnss::config::Stream_Serial* Stream::mutable_serial() {
  if (!has_serial()) {
    clear_type();
    set_has_serial();
    type_.serial_ = CreateMaybeMessage< ::apollo::drivers::gnss::config::Stream_Serial >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Stream.serial)
  return type_.serial_;
}

// optional .apollo.drivers.gnss.config.Stream.Tcp tcp = 3;
inline bool Stream::has_tcp() const {
  return type_case() == kTcp;
}
inline void Stream::set_has_tcp() {
  _oneof_case_[0] = kTcp;
}
inline void Stream::clear_tcp() {
  if (has_tcp()) {
    delete type_.tcp_;
    clear_has_type();
  }
}
inline const ::apollo::drivers::gnss::config::Stream_Tcp& Stream::_internal_tcp() const {
  return *type_.tcp_;
}
inline ::apollo::drivers::gnss::config::Stream_Tcp* Stream::release_tcp() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Stream.tcp)
  if (has_tcp()) {
    clear_has_type();
      ::apollo::drivers::gnss::config::Stream_Tcp* temp = type_.tcp_;
    type_.tcp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::apollo::drivers::gnss::config::Stream_Tcp& Stream::tcp() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Stream.tcp)
  return has_tcp()
      ? *type_.tcp_
      : *reinterpret_cast< ::apollo::drivers::gnss::config::Stream_Tcp*>(&::apollo::drivers::gnss::config::_Stream_Tcp_default_instance_);
}
inline ::apollo::drivers::gnss::config::Stream_Tcp* Stream::mutable_tcp() {
  if (!has_tcp()) {
    clear_type();
    set_has_tcp();
    type_.tcp_ = CreateMaybeMessage< ::apollo::drivers::gnss::config::Stream_Tcp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Stream.tcp)
  return type_.tcp_;
}

// optional .apollo.drivers.gnss.config.Stream.Udp udp = 4;
inline bool Stream::has_udp() const {
  return type_case() == kUdp;
}
inline void Stream::set_has_udp() {
  _oneof_case_[0] = kUdp;
}
inline void Stream::clear_udp() {
  if (has_udp()) {
    delete type_.udp_;
    clear_has_type();
  }
}
inline const ::apollo::drivers::gnss::config::Stream_Udp& Stream::_internal_udp() const {
  return *type_.udp_;
}
inline ::apollo::drivers::gnss::config::Stream_Udp* Stream::release_udp() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Stream.udp)
  if (has_udp()) {
    clear_has_type();
      ::apollo::drivers::gnss::config::Stream_Udp* temp = type_.udp_;
    type_.udp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::apollo::drivers::gnss::config::Stream_Udp& Stream::udp() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Stream.udp)
  return has_udp()
      ? *type_.udp_
      : *reinterpret_cast< ::apollo::drivers::gnss::config::Stream_Udp*>(&::apollo::drivers::gnss::config::_Stream_Udp_default_instance_);
}
inline ::apollo::drivers::gnss::config::Stream_Udp* Stream::mutable_udp() {
  if (!has_udp()) {
    clear_type();
    set_has_udp();
    type_.udp_ = CreateMaybeMessage< ::apollo::drivers::gnss::config::Stream_Udp >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Stream.udp)
  return type_.udp_;
}

// optional .apollo.drivers.gnss.config.Stream.Ntrip ntrip = 5;
inline bool Stream::has_ntrip() const {
  return type_case() == kNtrip;
}
inline void Stream::set_has_ntrip() {
  _oneof_case_[0] = kNtrip;
}
inline void Stream::clear_ntrip() {
  if (has_ntrip()) {
    delete type_.ntrip_;
    clear_has_type();
  }
}
inline const ::apollo::drivers::gnss::config::Stream_Ntrip& Stream::_internal_ntrip() const {
  return *type_.ntrip_;
}
inline ::apollo::drivers::gnss::config::Stream_Ntrip* Stream::release_ntrip() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Stream.ntrip)
  if (has_ntrip()) {
    clear_has_type();
      ::apollo::drivers::gnss::config::Stream_Ntrip* temp = type_.ntrip_;
    type_.ntrip_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::apollo::drivers::gnss::config::Stream_Ntrip& Stream::ntrip() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Stream.ntrip)
  return has_ntrip()
      ? *type_.ntrip_
      : *reinterpret_cast< ::apollo::drivers::gnss::config::Stream_Ntrip*>(&::apollo::drivers::gnss::config::_Stream_Ntrip_default_instance_);
}
inline ::apollo::drivers::gnss::config::Stream_Ntrip* Stream::mutable_ntrip() {
  if (!has_ntrip()) {
    clear_type();
    set_has_ntrip();
    type_.ntrip_ = CreateMaybeMessage< ::apollo::drivers::gnss::config::Stream_Ntrip >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Stream.ntrip)
  return type_.ntrip_;
}

// optional bool push_location = 6;
inline bool Stream::has_push_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stream::set_has_push_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stream::clear_has_push_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stream::clear_push_location() {
  push_location_ = false;
  clear_has_push_location();
}
inline bool Stream::push_location() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Stream.push_location)
  return push_location_;
}
inline void Stream::set_push_location(bool value) {
  set_has_push_location();
  push_location_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Stream.push_location)
}

inline bool Stream::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Stream::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Stream::TypeCase Stream::type_case() const {
  return Stream::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NovatelConfig

// optional int32 imu_orientation = 1 [default = 5];
inline bool NovatelConfig::has_imu_orientation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NovatelConfig::set_has_imu_orientation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NovatelConfig::clear_has_imu_orientation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NovatelConfig::clear_imu_orientation() {
  imu_orientation_ = 5;
  clear_has_imu_orientation();
}
inline ::google::protobuf::int32 NovatelConfig::imu_orientation() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.NovatelConfig.imu_orientation)
  return imu_orientation_;
}
inline void NovatelConfig::set_imu_orientation(::google::protobuf::int32 value) {
  set_has_imu_orientation();
  imu_orientation_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.NovatelConfig.imu_orientation)
}

// -------------------------------------------------------------------

// UbloxConfig

// -------------------------------------------------------------------

// TF

// optional string frame_id = 1 [default = "world"];
inline bool TF::has_frame_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TF::set_has_frame_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TF::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TF::clear_frame_id() {
  frame_id_.ClearToDefaultNoArena(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get());
  clear_has_frame_id();
}
inline const ::std::string& TF::frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.TF.frame_id)
  return frame_id_.GetNoArena();
}
inline void TF::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.TF.frame_id)
}
#if LANG_CXX11
inline void TF::set_frame_id(::std::string&& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(
    &::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.gnss.config.TF.frame_id)
}
#endif
inline void TF::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_frame_id();
  frame_id_.SetNoArena(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.gnss.config.TF.frame_id)
}
inline void TF::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.gnss.config.TF.frame_id)
}
inline ::std::string* TF::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.TF.frame_id)
  return frame_id_.MutableNoArena(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get());
}
inline ::std::string* TF::release_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.TF.frame_id)
  if (!has_frame_id()) {
    return NULL;
  }
  clear_has_frame_id();
  return frame_id_.ReleaseNonDefaultNoArena(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get());
}
inline void TF::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.TF.frame_id)
}

// optional string child_frame_id = 2 [default = "novatel"];
inline bool TF::has_child_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TF::set_has_child_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TF::clear_has_child_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TF::clear_child_frame_id() {
  child_frame_id_.ClearToDefaultNoArena(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get());
  clear_has_child_frame_id();
}
inline const ::std::string& TF::child_frame_id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.TF.child_frame_id)
  return child_frame_id_.GetNoArena();
}
inline void TF::set_child_frame_id(const ::std::string& value) {
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.TF.child_frame_id)
}
#if LANG_CXX11
inline void TF::set_child_frame_id(::std::string&& value) {
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(
    &::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.gnss.config.TF.child_frame_id)
}
#endif
inline void TF::set_child_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.gnss.config.TF.child_frame_id)
}
inline void TF::set_child_frame_id(const char* value, size_t size) {
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.gnss.config.TF.child_frame_id)
}
inline ::std::string* TF::mutable_child_frame_id() {
  set_has_child_frame_id();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.TF.child_frame_id)
  return child_frame_id_.MutableNoArena(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get());
}
inline ::std::string* TF::release_child_frame_id() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.TF.child_frame_id)
  if (!has_child_frame_id()) {
    return NULL;
  }
  clear_has_child_frame_id();
  return child_frame_id_.ReleaseNonDefaultNoArena(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get());
}
inline void TF::set_allocated_child_frame_id(::std::string* child_frame_id) {
  if (child_frame_id != NULL) {
    set_has_child_frame_id();
  } else {
    clear_has_child_frame_id();
  }
  child_frame_id_.SetAllocatedNoArena(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get(), child_frame_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.TF.child_frame_id)
}

// optional bool enable = 3 [default = false];
inline bool TF::has_enable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TF::set_has_enable() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TF::clear_has_enable() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TF::clear_enable() {
  enable_ = false;
  clear_has_enable();
}
inline bool TF::enable() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.TF.enable)
  return enable_;
}
inline void TF::set_enable(bool value) {
  set_has_enable();
  enable_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.TF.enable)
}

// -------------------------------------------------------------------

// Config

// optional .apollo.drivers.gnss.config.Stream data = 1;
inline bool Config::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Config::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Config::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Config::clear_data() {
  if (data_ != NULL) data_->Clear();
  clear_has_data();
}
inline const ::apollo::drivers::gnss::config::Stream& Config::_internal_data() const {
  return *data_;
}
inline const ::apollo::drivers::gnss::config::Stream& Config::data() const {
  const ::apollo::drivers::gnss::config::Stream* p = data_;
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Config.data)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::drivers::gnss::config::Stream*>(
      &::apollo::drivers::gnss::config::_Stream_default_instance_);
}
inline ::apollo::drivers::gnss::config::Stream* Config::release_data() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Config.data)
  clear_has_data();
  ::apollo::drivers::gnss::config::Stream* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::apollo::drivers::gnss::config::Stream* Config::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::drivers::gnss::config::Stream>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Config.data)
  return data_;
}
inline void Config::set_allocated_data(::apollo::drivers::gnss::config::Stream* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
  } else {
    clear_has_data();
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Config.data)
}

// optional .apollo.drivers.gnss.config.Stream command = 2;
inline bool Config::has_command() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Config::set_has_command() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Config::clear_has_command() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Config::clear_command() {
  if (command_ != NULL) command_->Clear();
  clear_has_command();
}
inline const ::apollo::drivers::gnss::config::Stream& Config::_internal_command() const {
  return *command_;
}
inline const ::apollo::drivers::gnss::config::Stream& Config::command() const {
  const ::apollo::drivers::gnss::config::Stream* p = command_;
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Config.command)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::drivers::gnss::config::Stream*>(
      &::apollo::drivers::gnss::config::_Stream_default_instance_);
}
inline ::apollo::drivers::gnss::config::Stream* Config::release_command() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Config.command)
  clear_has_command();
  ::apollo::drivers::gnss::config::Stream* temp = command_;
  command_ = NULL;
  return temp;
}
inline ::apollo::drivers::gnss::config::Stream* Config::mutable_command() {
  set_has_command();
  if (command_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::drivers::gnss::config::Stream>(GetArenaNoVirtual());
    command_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Config.command)
  return command_;
}
inline void Config::set_allocated_command(::apollo::drivers::gnss::config::Stream* command) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete command_;
  }
  if (command) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      command = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    set_has_command();
  } else {
    clear_has_command();
  }
  command_ = command;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Config.command)
}

// optional .apollo.drivers.gnss.config.Stream rtk_from = 3;
inline bool Config::has_rtk_from() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Config::set_has_rtk_from() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Config::clear_has_rtk_from() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Config::clear_rtk_from() {
  if (rtk_from_ != NULL) rtk_from_->Clear();
  clear_has_rtk_from();
}
inline const ::apollo::drivers::gnss::config::Stream& Config::_internal_rtk_from() const {
  return *rtk_from_;
}
inline const ::apollo::drivers::gnss::config::Stream& Config::rtk_from() const {
  const ::apollo::drivers::gnss::config::Stream* p = rtk_from_;
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Config.rtk_from)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::drivers::gnss::config::Stream*>(
      &::apollo::drivers::gnss::config::_Stream_default_instance_);
}
inline ::apollo::drivers::gnss::config::Stream* Config::release_rtk_from() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Config.rtk_from)
  clear_has_rtk_from();
  ::apollo::drivers::gnss::config::Stream* temp = rtk_from_;
  rtk_from_ = NULL;
  return temp;
}
inline ::apollo::drivers::gnss::config::Stream* Config::mutable_rtk_from() {
  set_has_rtk_from();
  if (rtk_from_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::drivers::gnss::config::Stream>(GetArenaNoVirtual());
    rtk_from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Config.rtk_from)
  return rtk_from_;
}
inline void Config::set_allocated_rtk_from(::apollo::drivers::gnss::config::Stream* rtk_from) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rtk_from_;
  }
  if (rtk_from) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rtk_from = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rtk_from, submessage_arena);
    }
    set_has_rtk_from();
  } else {
    clear_has_rtk_from();
  }
  rtk_from_ = rtk_from;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Config.rtk_from)
}

// optional .apollo.drivers.gnss.config.Stream rtk_to = 4;
inline bool Config::has_rtk_to() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Config::set_has_rtk_to() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Config::clear_has_rtk_to() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Config::clear_rtk_to() {
  if (rtk_to_ != NULL) rtk_to_->Clear();
  clear_has_rtk_to();
}
inline const ::apollo::drivers::gnss::config::Stream& Config::_internal_rtk_to() const {
  return *rtk_to_;
}
inline const ::apollo::drivers::gnss::config::Stream& Config::rtk_to() const {
  const ::apollo::drivers::gnss::config::Stream* p = rtk_to_;
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Config.rtk_to)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::drivers::gnss::config::Stream*>(
      &::apollo::drivers::gnss::config::_Stream_default_instance_);
}
inline ::apollo::drivers::gnss::config::Stream* Config::release_rtk_to() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Config.rtk_to)
  clear_has_rtk_to();
  ::apollo::drivers::gnss::config::Stream* temp = rtk_to_;
  rtk_to_ = NULL;
  return temp;
}
inline ::apollo::drivers::gnss::config::Stream* Config::mutable_rtk_to() {
  set_has_rtk_to();
  if (rtk_to_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::drivers::gnss::config::Stream>(GetArenaNoVirtual());
    rtk_to_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Config.rtk_to)
  return rtk_to_;
}
inline void Config::set_allocated_rtk_to(::apollo::drivers::gnss::config::Stream* rtk_to) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rtk_to_;
  }
  if (rtk_to) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rtk_to = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rtk_to, submessage_arena);
    }
    set_has_rtk_to();
  } else {
    clear_has_rtk_to();
  }
  rtk_to_ = rtk_to;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Config.rtk_to)
}

// repeated bytes login_commands = 5;
inline int Config::login_commands_size() const {
  return login_commands_.size();
}
inline void Config::clear_login_commands() {
  login_commands_.Clear();
}
inline const ::std::string& Config::login_commands(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Config.login_commands)
  return login_commands_.Get(index);
}
inline ::std::string* Config::mutable_login_commands(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Config.login_commands)
  return login_commands_.Mutable(index);
}
inline void Config::set_login_commands(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Config.login_commands)
  login_commands_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Config::set_login_commands(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Config.login_commands)
  login_commands_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Config::set_login_commands(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  login_commands_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.drivers.gnss.config.Config.login_commands)
}
inline void Config::set_login_commands(int index, const void* value, size_t size) {
  login_commands_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.gnss.config.Config.login_commands)
}
inline ::std::string* Config::add_login_commands() {
  // @@protoc_insertion_point(field_add_mutable:apollo.drivers.gnss.config.Config.login_commands)
  return login_commands_.Add();
}
inline void Config::add_login_commands(const ::std::string& value) {
  login_commands_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.drivers.gnss.config.Config.login_commands)
}
#if LANG_CXX11
inline void Config::add_login_commands(::std::string&& value) {
  login_commands_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.drivers.gnss.config.Config.login_commands)
}
#endif
inline void Config::add_login_commands(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  login_commands_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.drivers.gnss.config.Config.login_commands)
}
inline void Config::add_login_commands(const void* value, size_t size) {
  login_commands_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.drivers.gnss.config.Config.login_commands)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Config::login_commands() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.gnss.config.Config.login_commands)
  return login_commands_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Config::mutable_login_commands() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.gnss.config.Config.login_commands)
  return &login_commands_;
}

// repeated bytes logout_commands = 6;
inline int Config::logout_commands_size() const {
  return logout_commands_.size();
}
inline void Config::clear_logout_commands() {
  logout_commands_.Clear();
}
inline const ::std::string& Config::logout_commands(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Config.logout_commands)
  return logout_commands_.Get(index);
}
inline ::std::string* Config::mutable_logout_commands(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Config.logout_commands)
  return logout_commands_.Mutable(index);
}
inline void Config::set_logout_commands(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Config.logout_commands)
  logout_commands_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Config::set_logout_commands(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Config.logout_commands)
  logout_commands_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Config::set_logout_commands(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  logout_commands_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.drivers.gnss.config.Config.logout_commands)
}
inline void Config::set_logout_commands(int index, const void* value, size_t size) {
  logout_commands_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.gnss.config.Config.logout_commands)
}
inline ::std::string* Config::add_logout_commands() {
  // @@protoc_insertion_point(field_add_mutable:apollo.drivers.gnss.config.Config.logout_commands)
  return logout_commands_.Add();
}
inline void Config::add_logout_commands(const ::std::string& value) {
  logout_commands_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.drivers.gnss.config.Config.logout_commands)
}
#if LANG_CXX11
inline void Config::add_logout_commands(::std::string&& value) {
  logout_commands_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.drivers.gnss.config.Config.logout_commands)
}
#endif
inline void Config::add_logout_commands(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  logout_commands_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.drivers.gnss.config.Config.logout_commands)
}
inline void Config::add_logout_commands(const void* value, size_t size) {
  logout_commands_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.drivers.gnss.config.Config.logout_commands)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Config::logout_commands() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.gnss.config.Config.logout_commands)
  return logout_commands_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Config::mutable_logout_commands() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.gnss.config.Config.logout_commands)
  return &logout_commands_;
}

// optional .apollo.drivers.gnss.config.NovatelConfig novatel_config = 7;
inline bool Config::has_novatel_config() const {
  return device_config_case() == kNovatelConfig;
}
inline void Config::set_has_novatel_config() {
  _oneof_case_[0] = kNovatelConfig;
}
inline void Config::clear_novatel_config() {
  if (has_novatel_config()) {
    delete device_config_.novatel_config_;
    clear_has_device_config();
  }
}
inline const ::apollo::drivers::gnss::config::NovatelConfig& Config::_internal_novatel_config() const {
  return *device_config_.novatel_config_;
}
inline ::apollo::drivers::gnss::config::NovatelConfig* Config::release_novatel_config() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Config.novatel_config)
  if (has_novatel_config()) {
    clear_has_device_config();
      ::apollo::drivers::gnss::config::NovatelConfig* temp = device_config_.novatel_config_;
    device_config_.novatel_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::apollo::drivers::gnss::config::NovatelConfig& Config::novatel_config() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Config.novatel_config)
  return has_novatel_config()
      ? *device_config_.novatel_config_
      : *reinterpret_cast< ::apollo::drivers::gnss::config::NovatelConfig*>(&::apollo::drivers::gnss::config::_NovatelConfig_default_instance_);
}
inline ::apollo::drivers::gnss::config::NovatelConfig* Config::mutable_novatel_config() {
  if (!has_novatel_config()) {
    clear_device_config();
    set_has_novatel_config();
    device_config_.novatel_config_ = CreateMaybeMessage< ::apollo::drivers::gnss::config::NovatelConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Config.novatel_config)
  return device_config_.novatel_config_;
}

// optional .apollo.drivers.gnss.config.UbloxConfig ublox_config = 8;
inline bool Config::has_ublox_config() const {
  return device_config_case() == kUbloxConfig;
}
inline void Config::set_has_ublox_config() {
  _oneof_case_[0] = kUbloxConfig;
}
inline void Config::clear_ublox_config() {
  if (has_ublox_config()) {
    delete device_config_.ublox_config_;
    clear_has_device_config();
  }
}
inline const ::apollo::drivers::gnss::config::UbloxConfig& Config::_internal_ublox_config() const {
  return *device_config_.ublox_config_;
}
inline ::apollo::drivers::gnss::config::UbloxConfig* Config::release_ublox_config() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Config.ublox_config)
  if (has_ublox_config()) {
    clear_has_device_config();
      ::apollo::drivers::gnss::config::UbloxConfig* temp = device_config_.ublox_config_;
    device_config_.ublox_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::apollo::drivers::gnss::config::UbloxConfig& Config::ublox_config() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Config.ublox_config)
  return has_ublox_config()
      ? *device_config_.ublox_config_
      : *reinterpret_cast< ::apollo::drivers::gnss::config::UbloxConfig*>(&::apollo::drivers::gnss::config::_UbloxConfig_default_instance_);
}
inline ::apollo::drivers::gnss::config::UbloxConfig* Config::mutable_ublox_config() {
  if (!has_ublox_config()) {
    clear_device_config();
    set_has_ublox_config();
    device_config_.ublox_config_ = CreateMaybeMessage< ::apollo::drivers::gnss::config::UbloxConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Config.ublox_config)
  return device_config_.ublox_config_;
}

// optional .apollo.drivers.gnss.config.Config.RtkSolutionType rtk_solution_type = 9;
inline bool Config::has_rtk_solution_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Config::set_has_rtk_solution_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Config::clear_has_rtk_solution_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Config::clear_rtk_solution_type() {
  rtk_solution_type_ = 1;
  clear_has_rtk_solution_type();
}
inline ::apollo::drivers::gnss::config::Config_RtkSolutionType Config::rtk_solution_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Config.rtk_solution_type)
  return static_cast< ::apollo::drivers::gnss::config::Config_RtkSolutionType >(rtk_solution_type_);
}
inline void Config::set_rtk_solution_type(::apollo::drivers::gnss::config::Config_RtkSolutionType value) {
  assert(::apollo::drivers::gnss::config::Config_RtkSolutionType_IsValid(value));
  set_has_rtk_solution_type();
  rtk_solution_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Config.rtk_solution_type)
}

// optional .apollo.drivers.gnss.config.ImuType imu_type = 10;
inline bool Config::has_imu_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Config::set_has_imu_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Config::clear_has_imu_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Config::clear_imu_type() {
  imu_type_ = 13;
  clear_has_imu_type();
}
inline ::apollo::drivers::gnss::config::ImuType Config::imu_type() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Config.imu_type)
  return static_cast< ::apollo::drivers::gnss::config::ImuType >(imu_type_);
}
inline void Config::set_imu_type(::apollo::drivers::gnss::config::ImuType value) {
  assert(::apollo::drivers::gnss::config::ImuType_IsValid(value));
  set_has_imu_type();
  imu_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Config.imu_type)
}

// optional string proj4_text = 11;
inline bool Config::has_proj4_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::set_has_proj4_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config::clear_has_proj4_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config::clear_proj4_text() {
  proj4_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proj4_text();
}
inline const ::std::string& Config::proj4_text() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Config.proj4_text)
  return proj4_text_.GetNoArena();
}
inline void Config::set_proj4_text(const ::std::string& value) {
  set_has_proj4_text();
  proj4_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Config.proj4_text)
}
#if LANG_CXX11
inline void Config::set_proj4_text(::std::string&& value) {
  set_has_proj4_text();
  proj4_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.gnss.config.Config.proj4_text)
}
#endif
inline void Config::set_proj4_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proj4_text();
  proj4_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.gnss.config.Config.proj4_text)
}
inline void Config::set_proj4_text(const char* value, size_t size) {
  set_has_proj4_text();
  proj4_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.gnss.config.Config.proj4_text)
}
inline ::std::string* Config::mutable_proj4_text() {
  set_has_proj4_text();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Config.proj4_text)
  return proj4_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_proj4_text() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Config.proj4_text)
  if (!has_proj4_text()) {
    return NULL;
  }
  clear_has_proj4_text();
  return proj4_text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_proj4_text(::std::string* proj4_text) {
  if (proj4_text != NULL) {
    set_has_proj4_text();
  } else {
    clear_has_proj4_text();
  }
  proj4_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proj4_text);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Config.proj4_text)
}

// optional .apollo.drivers.gnss.config.TF tf = 12;
inline bool Config::has_tf() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Config::set_has_tf() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Config::clear_has_tf() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Config::clear_tf() {
  if (tf_ != NULL) tf_->Clear();
  clear_has_tf();
}
inline const ::apollo::drivers::gnss::config::TF& Config::_internal_tf() const {
  return *tf_;
}
inline const ::apollo::drivers::gnss::config::TF& Config::tf() const {
  const ::apollo::drivers::gnss::config::TF* p = tf_;
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Config.tf)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::drivers::gnss::config::TF*>(
      &::apollo::drivers::gnss::config::_TF_default_instance_);
}
inline ::apollo::drivers::gnss::config::TF* Config::release_tf() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Config.tf)
  clear_has_tf();
  ::apollo::drivers::gnss::config::TF* temp = tf_;
  tf_ = NULL;
  return temp;
}
inline ::apollo::drivers::gnss::config::TF* Config::mutable_tf() {
  set_has_tf();
  if (tf_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::drivers::gnss::config::TF>(GetArenaNoVirtual());
    tf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Config.tf)
  return tf_;
}
inline void Config::set_allocated_tf(::apollo::drivers::gnss::config::TF* tf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tf_;
  }
  if (tf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tf, submessage_arena);
    }
    set_has_tf();
  } else {
    clear_has_tf();
  }
  tf_ = tf;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Config.tf)
}

// optional string wheel_parameters = 13;
inline bool Config::has_wheel_parameters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::set_has_wheel_parameters() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config::clear_has_wheel_parameters() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config::clear_wheel_parameters() {
  wheel_parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wheel_parameters();
}
inline const ::std::string& Config::wheel_parameters() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Config.wheel_parameters)
  return wheel_parameters_.GetNoArena();
}
inline void Config::set_wheel_parameters(const ::std::string& value) {
  set_has_wheel_parameters();
  wheel_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Config.wheel_parameters)
}
#if LANG_CXX11
inline void Config::set_wheel_parameters(::std::string&& value) {
  set_has_wheel_parameters();
  wheel_parameters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.gnss.config.Config.wheel_parameters)
}
#endif
inline void Config::set_wheel_parameters(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wheel_parameters();
  wheel_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.gnss.config.Config.wheel_parameters)
}
inline void Config::set_wheel_parameters(const char* value, size_t size) {
  set_has_wheel_parameters();
  wheel_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.gnss.config.Config.wheel_parameters)
}
inline ::std::string* Config::mutable_wheel_parameters() {
  set_has_wheel_parameters();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Config.wheel_parameters)
  return wheel_parameters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_wheel_parameters() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Config.wheel_parameters)
  if (!has_wheel_parameters()) {
    return NULL;
  }
  clear_has_wheel_parameters();
  return wheel_parameters_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_wheel_parameters(::std::string* wheel_parameters) {
  if (wheel_parameters != NULL) {
    set_has_wheel_parameters();
  } else {
    clear_has_wheel_parameters();
  }
  wheel_parameters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wheel_parameters);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Config.wheel_parameters)
}

// optional string gpsbin_folder = 14;
inline bool Config::has_gpsbin_folder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Config::set_has_gpsbin_folder() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Config::clear_has_gpsbin_folder() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Config::clear_gpsbin_folder() {
  gpsbin_folder_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gpsbin_folder();
}
inline const ::std::string& Config::gpsbin_folder() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.gnss.config.Config.gpsbin_folder)
  return gpsbin_folder_.GetNoArena();
}
inline void Config::set_gpsbin_folder(const ::std::string& value) {
  set_has_gpsbin_folder();
  gpsbin_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.drivers.gnss.config.Config.gpsbin_folder)
}
#if LANG_CXX11
inline void Config::set_gpsbin_folder(::std::string&& value) {
  set_has_gpsbin_folder();
  gpsbin_folder_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.drivers.gnss.config.Config.gpsbin_folder)
}
#endif
inline void Config::set_gpsbin_folder(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gpsbin_folder();
  gpsbin_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.drivers.gnss.config.Config.gpsbin_folder)
}
inline void Config::set_gpsbin_folder(const char* value, size_t size) {
  set_has_gpsbin_folder();
  gpsbin_folder_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.drivers.gnss.config.Config.gpsbin_folder)
}
inline ::std::string* Config::mutable_gpsbin_folder() {
  set_has_gpsbin_folder();
  // @@protoc_insertion_point(field_mutable:apollo.drivers.gnss.config.Config.gpsbin_folder)
  return gpsbin_folder_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Config::release_gpsbin_folder() {
  // @@protoc_insertion_point(field_release:apollo.drivers.gnss.config.Config.gpsbin_folder)
  if (!has_gpsbin_folder()) {
    return NULL;
  }
  clear_has_gpsbin_folder();
  return gpsbin_folder_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Config::set_allocated_gpsbin_folder(::std::string* gpsbin_folder) {
  if (gpsbin_folder != NULL) {
    set_has_gpsbin_folder();
  } else {
    clear_has_gpsbin_folder();
  }
  gpsbin_folder_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gpsbin_folder);
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Config.gpsbin_folder)
}

inline bool Config::has_device_config() const {
  return device_config_case() != DEVICE_CONFIG_NOT_SET;
}
inline void Config::clear_has_device_config() {
  _oneof_case_[0] = DEVICE_CONFIG_NOT_SET;
}
inline Config::DeviceConfigCase Config::device_config_case() const {
  return Config::DeviceConfigCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::drivers::gnss::config::Stream_Format> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::config::Stream_Format>() {
  return ::apollo::drivers::gnss::config::Stream_Format_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::gnss::config::Config_RtkSolutionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::config::Config_RtkSolutionType>() {
  return ::apollo::drivers::gnss::config::Config_RtkSolutionType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::gnss::config::ImuType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::gnss::config::ImuType>() {
  return ::apollo::drivers::gnss::config::ImuType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto
