// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/heading.proto

#include "modules/drivers/gnss/proto/heading.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fheader_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto
namespace apollo {
namespace drivers {
namespace gnss {
class HeadingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Heading>
      _instance;
} _Heading_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fheading_2eproto {
static void InitDefaultsHeading() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::_Heading_default_instance_;
    new (ptr) ::apollo::drivers::gnss::Heading();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::Heading::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Heading =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHeading}, {
      &protobuf_modules_2fcommon_2fproto_2fheader_2eproto::scc_info_Header.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Heading.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, measurement_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, solution_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, position_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, baseline_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, reserved_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, heading_std_dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, pitch_std_dev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, station_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, satellite_tracked_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, satellite_soulution_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, satellite_number_obs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, satellite_number_multi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, solution_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, extended_solution_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, galileo_beidou_sig_mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::Heading, gps_glonass_sig_mask_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 24, sizeof(::apollo::drivers::gnss::Heading)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::_Heading_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/drivers/gnss/proto/heading.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n(modules/drivers/gnss/proto/heading.pro"
      "to\022\023apollo.drivers.gnss\032!modules/common/"
      "proto/header.proto\"\207\004\n\007Heading\022%\n\006header"
      "\030\001 \001(\0132\025.apollo.common.Header\022\030\n\020measure"
      "ment_time\030\002 \001(\001\022\027\n\017solution_status\030\003 \001(\r"
      "\022\025\n\rposition_type\030\004 \001(\r\022\027\n\017baseline_leng"
      "th\030\005 \001(\002\022\017\n\007heading\030\006 \001(\002\022\r\n\005pitch\030\007 \001(\002"
      "\022\020\n\010reserved\030\010 \001(\002\022\027\n\017heading_std_dev\030\t "
      "\001(\002\022\025\n\rpitch_std_dev\030\n \001(\002\022\022\n\nstation_id"
      "\030\013 \001(\014\022 \n\030satellite_tracked_number\030\014 \001(\r"
      "\022\"\n\032satellite_soulution_number\030\r \001(\r\022\034\n\024"
      "satellite_number_obs\030\016 \001(\r\022\036\n\026satellite_"
      "number_multi\030\017 \001(\r\022\027\n\017solution_source\030\020 "
      "\001(\r\022 \n\030extended_solution_status\030\021 \001(\r\022\037\n"
      "\027galileo_beidou_sig_mask\030\022 \001(\r\022\034\n\024gps_gl"
      "onass_sig_mask\030\023 \001(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 620);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/drivers/gnss/proto/heading.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fheading_2eproto
namespace apollo {
namespace drivers {
namespace gnss {

// ===================================================================

void Heading::InitAsDefaultInstance() {
  ::apollo::drivers::gnss::_Heading_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
void Heading::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Heading::kHeaderFieldNumber;
const int Heading::kMeasurementTimeFieldNumber;
const int Heading::kSolutionStatusFieldNumber;
const int Heading::kPositionTypeFieldNumber;
const int Heading::kBaselineLengthFieldNumber;
const int Heading::kHeadingFieldNumber;
const int Heading::kPitchFieldNumber;
const int Heading::kReservedFieldNumber;
const int Heading::kHeadingStdDevFieldNumber;
const int Heading::kPitchStdDevFieldNumber;
const int Heading::kStationIdFieldNumber;
const int Heading::kSatelliteTrackedNumberFieldNumber;
const int Heading::kSatelliteSoulutionNumberFieldNumber;
const int Heading::kSatelliteNumberObsFieldNumber;
const int Heading::kSatelliteNumberMultiFieldNumber;
const int Heading::kSolutionSourceFieldNumber;
const int Heading::kExtendedSolutionStatusFieldNumber;
const int Heading::kGalileoBeidouSigMaskFieldNumber;
const int Heading::kGpsGlonassSigMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Heading::Heading()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fheading_2eproto::scc_info_Heading.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.Heading)
}
Heading::Heading(const Heading& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  station_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_station_id()) {
    station_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.station_id_);
  }
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&measurement_time_, &from.measurement_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&gps_glonass_sig_mask_) -
    reinterpret_cast<char*>(&measurement_time_)) + sizeof(gps_glonass_sig_mask_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.Heading)
}

void Heading::SharedCtor() {
  station_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gps_glonass_sig_mask_) -
      reinterpret_cast<char*>(&header_)) + sizeof(gps_glonass_sig_mask_));
}

Heading::~Heading() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.Heading)
  SharedDtor();
}

void Heading::SharedDtor() {
  station_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void Heading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Heading::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fheading_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fheading_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Heading& Heading::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fheading_2eproto::scc_info_Heading.base);
  return *internal_default_instance();
}


void Heading::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.Heading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      station_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&measurement_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pitch_) -
        reinterpret_cast<char*>(&measurement_time_)) + sizeof(pitch_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&reserved_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&solution_source_) -
        reinterpret_cast<char*>(&reserved_)) + sizeof(solution_source_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&extended_solution_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gps_glonass_sig_mask_) -
        reinterpret_cast<char*>(&extended_solution_status_)) + sizeof(gps_glonass_sig_mask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Heading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.Heading)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double measurement_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_measurement_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 solution_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_solution_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solution_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_position_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float baseline_length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_baseline_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &baseline_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heading = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pitch = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_pitch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float reserved = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_reserved();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reserved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heading_std_dev = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_heading_std_dev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_std_dev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pitch_std_dev = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_pitch_std_dev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_std_dev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes station_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_station_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 satellite_tracked_number = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_satellite_tracked_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &satellite_tracked_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 satellite_soulution_number = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_satellite_soulution_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &satellite_soulution_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 satellite_number_obs = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_satellite_number_obs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &satellite_number_obs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 satellite_number_multi = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_satellite_number_multi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &satellite_number_multi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 solution_source = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_solution_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solution_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 extended_solution_status = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_extended_solution_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extended_solution_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 galileo_beidou_sig_mask = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_galileo_beidou_sig_mask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &galileo_beidou_sig_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gps_glonass_sig_mask = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_gps_glonass_sig_mask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gps_glonass_sig_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.Heading)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.Heading)
  return false;
#undef DO_
}

void Heading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.Heading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional double measurement_time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->measurement_time(), output);
  }

  // optional uint32 solution_status = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->solution_status(), output);
  }

  // optional uint32 position_type = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->position_type(), output);
  }

  // optional float baseline_length = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->baseline_length(), output);
  }

  // optional float heading = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->heading(), output);
  }

  // optional float pitch = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->pitch(), output);
  }

  // optional float reserved = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->reserved(), output);
  }

  // optional float heading_std_dev = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->heading_std_dev(), output);
  }

  // optional float pitch_std_dev = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->pitch_std_dev(), output);
  }

  // optional bytes station_id = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->station_id(), output);
  }

  // optional uint32 satellite_tracked_number = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->satellite_tracked_number(), output);
  }

  // optional uint32 satellite_soulution_number = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->satellite_soulution_number(), output);
  }

  // optional uint32 satellite_number_obs = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->satellite_number_obs(), output);
  }

  // optional uint32 satellite_number_multi = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->satellite_number_multi(), output);
  }

  // optional uint32 solution_source = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->solution_source(), output);
  }

  // optional uint32 extended_solution_status = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->extended_solution_status(), output);
  }

  // optional uint32 galileo_beidou_sig_mask = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->galileo_beidou_sig_mask(), output);
  }

  // optional uint32 gps_glonass_sig_mask = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->gps_glonass_sig_mask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.Heading)
}

::google::protobuf::uint8* Heading::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.Heading)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional double measurement_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->measurement_time(), target);
  }

  // optional uint32 solution_status = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->solution_status(), target);
  }

  // optional uint32 position_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->position_type(), target);
  }

  // optional float baseline_length = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->baseline_length(), target);
  }

  // optional float heading = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->heading(), target);
  }

  // optional float pitch = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->pitch(), target);
  }

  // optional float reserved = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->reserved(), target);
  }

  // optional float heading_std_dev = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->heading_std_dev(), target);
  }

  // optional float pitch_std_dev = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->pitch_std_dev(), target);
  }

  // optional bytes station_id = 11;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->station_id(), target);
  }

  // optional uint32 satellite_tracked_number = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->satellite_tracked_number(), target);
  }

  // optional uint32 satellite_soulution_number = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->satellite_soulution_number(), target);
  }

  // optional uint32 satellite_number_obs = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->satellite_number_obs(), target);
  }

  // optional uint32 satellite_number_multi = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->satellite_number_multi(), target);
  }

  // optional uint32 solution_source = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->solution_source(), target);
  }

  // optional uint32 extended_solution_status = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->extended_solution_status(), target);
  }

  // optional uint32 galileo_beidou_sig_mask = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->galileo_beidou_sig_mask(), target);
  }

  // optional uint32 gps_glonass_sig_mask = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->gps_glonass_sig_mask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.Heading)
  return target;
}

size_t Heading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.Heading)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes station_id = 11;
    if (has_station_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->station_id());
    }

    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional double measurement_time = 2;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

    // optional uint32 solution_status = 3;
    if (has_solution_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solution_status());
    }

    // optional uint32 position_type = 4;
    if (has_position_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_type());
    }

    // optional float baseline_length = 5;
    if (has_baseline_length()) {
      total_size += 1 + 4;
    }

    // optional float heading = 6;
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // optional float pitch = 7;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float reserved = 8;
    if (has_reserved()) {
      total_size += 1 + 4;
    }

    // optional float heading_std_dev = 9;
    if (has_heading_std_dev()) {
      total_size += 1 + 4;
    }

    // optional float pitch_std_dev = 10;
    if (has_pitch_std_dev()) {
      total_size += 1 + 4;
    }

    // optional uint32 satellite_tracked_number = 12;
    if (has_satellite_tracked_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->satellite_tracked_number());
    }

    // optional uint32 satellite_soulution_number = 13;
    if (has_satellite_soulution_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->satellite_soulution_number());
    }

    // optional uint32 satellite_number_obs = 14;
    if (has_satellite_number_obs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->satellite_number_obs());
    }

    // optional uint32 satellite_number_multi = 15;
    if (has_satellite_number_multi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->satellite_number_multi());
    }

    // optional uint32 solution_source = 16;
    if (has_solution_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solution_source());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional uint32 extended_solution_status = 17;
    if (has_extended_solution_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extended_solution_status());
    }

    // optional uint32 galileo_beidou_sig_mask = 18;
    if (has_galileo_beidou_sig_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->galileo_beidou_sig_mask());
    }

    // optional uint32 gps_glonass_sig_mask = 19;
    if (has_gps_glonass_sig_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gps_glonass_sig_mask());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Heading::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.Heading)
  GOOGLE_DCHECK_NE(&from, this);
  const Heading* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Heading>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.Heading)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.Heading)
    MergeFrom(*source);
  }
}

void Heading::MergeFrom(const Heading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.Heading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_station_id();
      station_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.station_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000004u) {
      measurement_time_ = from.measurement_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      solution_status_ = from.solution_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      position_type_ = from.position_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      baseline_length_ = from.baseline_length_;
    }
    if (cached_has_bits & 0x00000040u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000080u) {
      pitch_ = from.pitch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      reserved_ = from.reserved_;
    }
    if (cached_has_bits & 0x00000200u) {
      heading_std_dev_ = from.heading_std_dev_;
    }
    if (cached_has_bits & 0x00000400u) {
      pitch_std_dev_ = from.pitch_std_dev_;
    }
    if (cached_has_bits & 0x00000800u) {
      satellite_tracked_number_ = from.satellite_tracked_number_;
    }
    if (cached_has_bits & 0x00001000u) {
      satellite_soulution_number_ = from.satellite_soulution_number_;
    }
    if (cached_has_bits & 0x00002000u) {
      satellite_number_obs_ = from.satellite_number_obs_;
    }
    if (cached_has_bits & 0x00004000u) {
      satellite_number_multi_ = from.satellite_number_multi_;
    }
    if (cached_has_bits & 0x00008000u) {
      solution_source_ = from.solution_source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      extended_solution_status_ = from.extended_solution_status_;
    }
    if (cached_has_bits & 0x00020000u) {
      galileo_beidou_sig_mask_ = from.galileo_beidou_sig_mask_;
    }
    if (cached_has_bits & 0x00040000u) {
      gps_glonass_sig_mask_ = from.gps_glonass_sig_mask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Heading::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.Heading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heading::CopyFrom(const Heading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.Heading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heading::IsInitialized() const {
  return true;
}

void Heading::Swap(Heading* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Heading::InternalSwap(Heading* other) {
  using std::swap;
  station_id_.Swap(&other->station_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(measurement_time_, other->measurement_time_);
  swap(solution_status_, other->solution_status_);
  swap(position_type_, other->position_type_);
  swap(baseline_length_, other->baseline_length_);
  swap(heading_, other->heading_);
  swap(pitch_, other->pitch_);
  swap(reserved_, other->reserved_);
  swap(heading_std_dev_, other->heading_std_dev_);
  swap(pitch_std_dev_, other->pitch_std_dev_);
  swap(satellite_tracked_number_, other->satellite_tracked_number_);
  swap(satellite_soulution_number_, other->satellite_soulution_number_);
  swap(satellite_number_obs_, other->satellite_number_obs_);
  swap(satellite_number_multi_, other->satellite_number_multi_);
  swap(solution_source_, other->solution_source_);
  swap(extended_solution_status_, other->extended_solution_status_);
  swap(galileo_beidou_sig_mask_, other->galileo_beidou_sig_mask_);
  swap(gps_glonass_sig_mask_, other->gps_glonass_sig_mask_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Heading::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fheading_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fheading_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::Heading* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::Heading >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::Heading >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
