// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/config.proto

#include "modules/drivers/gnss/proto/config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NovatelConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Stream_Ntrip;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Stream_Serial;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Stream_Tcp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Stream_Udp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TF;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UbloxConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Stream;
}  // namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto
namespace apollo {
namespace drivers {
namespace gnss {
namespace config {
class Stream_SerialDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Stream_Serial>
      _instance;
} _Stream_Serial_default_instance_;
class Stream_TcpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Stream_Tcp>
      _instance;
} _Stream_Tcp_default_instance_;
class Stream_UdpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Stream_Udp>
      _instance;
} _Stream_Udp_default_instance_;
class Stream_NtripDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Stream_Ntrip>
      _instance;
} _Stream_Ntrip_default_instance_;
class StreamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Stream>
      _instance;
  const ::apollo::drivers::gnss::config::Stream_Serial* serial_;
  const ::apollo::drivers::gnss::config::Stream_Tcp* tcp_;
  const ::apollo::drivers::gnss::config::Stream_Udp* udp_;
  const ::apollo::drivers::gnss::config::Stream_Ntrip* ntrip_;
} _Stream_default_instance_;
class NovatelConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NovatelConfig>
      _instance;
} _NovatelConfig_default_instance_;
class UbloxConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UbloxConfig>
      _instance;
} _UbloxConfig_default_instance_;
class TFDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TF>
      _instance;
} _TF_default_instance_;
class ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Config>
      _instance;
  const ::apollo::drivers::gnss::config::NovatelConfig* novatel_config_;
  const ::apollo::drivers::gnss::config::UbloxConfig* ublox_config_;
} _Config_default_instance_;
}  // namespace config
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto {
static void InitDefaultsStream_Serial() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::config::_Stream_Serial_default_instance_;
    new (ptr) ::apollo::drivers::gnss::config::Stream_Serial();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::config::Stream_Serial::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Stream_Serial =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStream_Serial}, {}};

static void InitDefaultsStream_Tcp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::config::_Stream_Tcp_default_instance_;
    new (ptr) ::apollo::drivers::gnss::config::Stream_Tcp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::config::Stream_Tcp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Stream_Tcp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStream_Tcp}, {}};

static void InitDefaultsStream_Udp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::config::_Stream_Udp_default_instance_;
    new (ptr) ::apollo::drivers::gnss::config::Stream_Udp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::config::Stream_Udp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Stream_Udp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStream_Udp}, {}};

static void InitDefaultsStream_Ntrip() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::config::_Stream_Ntrip_default_instance_;
    new (ptr) ::apollo::drivers::gnss::config::Stream_Ntrip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::config::Stream_Ntrip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Stream_Ntrip =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStream_Ntrip}, {}};

static void InitDefaultsStream() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::config::_Stream_default_instance_;
    new (ptr) ::apollo::drivers::gnss::config::Stream();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::config::Stream::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Stream =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsStream}, {
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_Stream_Serial.base,
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_Stream_Tcp.base,
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_Stream_Udp.base,
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_Stream_Ntrip.base,}};

static void InitDefaultsNovatelConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::config::_NovatelConfig_default_instance_;
    new (ptr) ::apollo::drivers::gnss::config::NovatelConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::config::NovatelConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NovatelConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNovatelConfig}, {}};

static void InitDefaultsUbloxConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::config::_UbloxConfig_default_instance_;
    new (ptr) ::apollo::drivers::gnss::config::UbloxConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::config::UbloxConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UbloxConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUbloxConfig}, {}};

static void InitDefaultsTF() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.DefaultConstruct();
  *::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get_mutable() = ::std::string("world", 5);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get_mutable());
  ::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.DefaultConstruct();
  *::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get_mutable() = ::std::string("novatel", 7);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get_mutable());
  {
    void* ptr = &::apollo::drivers::gnss::config::_TF_default_instance_;
    new (ptr) ::apollo::drivers::gnss::config::TF();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::config::TF::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TF =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTF}, {}};

static void InitDefaultsConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::gnss::config::_Config_default_instance_;
    new (ptr) ::apollo::drivers::gnss::config::Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::gnss::config::Config::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Config =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsConfig}, {
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_Stream.base,
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_NovatelConfig.base,
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_UbloxConfig.base,
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_TF.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Stream_Serial.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Stream_Tcp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Stream_Udp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Stream_Ntrip.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Stream.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NovatelConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UbloxConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TF.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Config.base);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Serial, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Serial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Serial, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Serial, baud_rate_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Tcp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Tcp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Tcp, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Tcp, port_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Udp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Udp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Udp, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Udp, port_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, mount_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream_Ntrip, timeout_s_),
  0,
  4,
  1,
  2,
  3,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream, format_),
  offsetof(::apollo::drivers::gnss::config::StreamDefaultTypeInternal, serial_),
  offsetof(::apollo::drivers::gnss::config::StreamDefaultTypeInternal, tcp_),
  offsetof(::apollo::drivers::gnss::config::StreamDefaultTypeInternal, udp_),
  offsetof(::apollo::drivers::gnss::config::StreamDefaultTypeInternal, ntrip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream, push_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Stream, type_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::NovatelConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::NovatelConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::NovatelConfig, imu_orientation_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::UbloxConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::UbloxConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::TF, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::TF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::TF, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::TF, child_frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::TF, enable_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, rtk_from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, rtk_to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, login_commands_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, logout_commands_),
  offsetof(::apollo::drivers::gnss::config::ConfigDefaultTypeInternal, novatel_config_),
  offsetof(::apollo::drivers::gnss::config::ConfigDefaultTypeInternal, ublox_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, rtk_solution_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, imu_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, proj4_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, tf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, wheel_parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, gpsbin_folder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::gnss::config::Config, device_config_),
  3,
  4,
  5,
  6,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  8,
  9,
  0,
  7,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::drivers::gnss::config::Stream_Serial)},
  { 9, 16, sizeof(::apollo::drivers::gnss::config::Stream_Tcp)},
  { 18, 25, sizeof(::apollo::drivers::gnss::config::Stream_Udp)},
  { 27, 38, sizeof(::apollo::drivers::gnss::config::Stream_Ntrip)},
  { 44, 56, sizeof(::apollo::drivers::gnss::config::Stream)},
  { 62, 68, sizeof(::apollo::drivers::gnss::config::NovatelConfig)},
  { 69, 74, sizeof(::apollo::drivers::gnss::config::UbloxConfig)},
  { 74, 82, sizeof(::apollo::drivers::gnss::config::TF)},
  { 85, 105, sizeof(::apollo::drivers::gnss::config::Config)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::config::_Stream_Serial_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::config::_Stream_Tcp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::config::_Stream_Udp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::config::_Stream_Ntrip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::config::_Stream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::config::_NovatelConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::config::_UbloxConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::config::_TF_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::gnss::config::_Config_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/drivers/gnss/proto/config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\'modules/drivers/gnss/proto/config.prot"
      "o\022\032apollo.drivers.gnss.config\"\321\005\n\006Stream"
      "\0229\n\006format\030\001 \001(\0162).apollo.drivers.gnss.c"
      "onfig.Stream.Format\022;\n\006serial\030\002 \001(\0132).ap"
      "ollo.drivers.gnss.config.Stream.SerialH\000"
      "\0225\n\003tcp\030\003 \001(\0132&.apollo.drivers.gnss.conf"
      "ig.Stream.TcpH\000\0225\n\003udp\030\004 \001(\0132&.apollo.dr"
      "ivers.gnss.config.Stream.UdpH\000\0229\n\005ntrip\030"
      "\005 \001(\0132(.apollo.drivers.gnss.config.Strea"
      "m.NtripH\000\022\025\n\rpush_location\030\006 \001(\010\0321\n\006Seri"
      "al\022\016\n\006device\030\001 \001(\014\022\027\n\tbaud_rate\030\002 \001(\005:\0049"
      "600\032*\n\003Tcp\022\017\n\007address\030\001 \001(\014\022\022\n\004port\030\002 \001("
      "\005:\0043001\032*\n\003Udp\022\017\n\007address\030\001 \001(\014\022\022\n\004port\030"
      "\002 \001(\005:\0043001\032x\n\005Ntrip\022\017\n\007address\030\001 \001(\014\022\022\n"
      "\004port\030\002 \001(\005:\0042101\022\023\n\013mount_point\030\003 \001(\014\022\014"
      "\n\004user\030\004 \001(\014\022\020\n\010password\030\005 \001(\014\022\025\n\ttimeou"
      "t_s\030\006 \001(\r:\00230\"\201\001\n\006Format\022\013\n\007UNKNOWN\020\000\022\010\n"
      "\004NMEA\020\001\022\013\n\007RTCM_V2\020\002\022\013\n\007RTCM_V3\020\003\022\020\n\014NOV"
      "ATEL_TEXT\020\n\022\022\n\016NOVATEL_BINARY\020\013\022\016\n\nUBLOX"
      "_TEXT\020\024\022\020\n\014UBLOX_BINARY\020\025B\006\n\004type\"+\n\rNov"
      "atelConfig\022\032\n\017imu_orientation\030\001 \001(\005:\0015\"\r"
      "\n\013UbloxConfig\"U\n\002TF\022\027\n\010frame_id\030\001 \001(\t:\005w"
      "orld\022\037\n\016child_frame_id\030\002 \001(\t:\007novatel\022\025\n"
      "\006enable\030\003 \001(\010:\005false\"\341\005\n\006Config\0220\n\004data\030"
      "\001 \001(\0132\".apollo.drivers.gnss.config.Strea"
      "m\0223\n\007command\030\002 \001(\0132\".apollo.drivers.gnss"
      ".config.Stream\0224\n\010rtk_from\030\003 \001(\0132\".apoll"
      "o.drivers.gnss.config.Stream\0222\n\006rtk_to\030\004"
      " \001(\0132\".apollo.drivers.gnss.config.Stream"
      "\022\026\n\016login_commands\030\005 \003(\014\022\027\n\017logout_comma"
      "nds\030\006 \003(\014\022C\n\016novatel_config\030\007 \001(\0132).apol"
      "lo.drivers.gnss.config.NovatelConfigH\000\022\?"
      "\n\014ublox_config\030\010 \001(\0132\'.apollo.drivers.gn"
      "ss.config.UbloxConfigH\000\022M\n\021rtk_solution_"
      "type\030\t \001(\01622.apollo.drivers.gnss.config."
      "Config.RtkSolutionType\0225\n\010imu_type\030\n \001(\016"
      "2#.apollo.drivers.gnss.config.ImuType\022\022\n"
      "\nproj4_text\030\013 \001(\t\022*\n\002tf\030\014 \001(\0132\036.apollo.d"
      "rivers.gnss.config.TF\022\030\n\020wheel_parameter"
      "s\030\r \001(\t\022\025\n\rgpsbin_folder\030\016 \001(\t\"G\n\017RtkSol"
      "utionType\022\031\n\025RTK_RECEIVER_SOLUTION\020\001\022\031\n\025"
      "RTK_SOFTWARE_SOLUTION\020\002B\017\n\rdevice_config"
      "*\246\001\n\007ImuType\022\r\n\tIMAR_FSAS\020\r\022\013\n\007ISA100C\020\032"
      "\022\r\n\tADIS16488\020\037\022\013\n\007STIM300\020 \022\n\n\006ISA100\020\""
      "\022\020\n\014ISA100_400HZ\020&\022\021\n\rISA100C_400HZ\020\'\022\016\n"
      "\nCPT_XW5651\020(\022\t\n\005G320N\020)\022\t\n\005UM442\020*\022\014\n\010I"
      "AM20680\0209"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1849);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/drivers/gnss/proto/config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto
namespace apollo {
namespace drivers {
namespace gnss {
namespace config {
const ::google::protobuf::EnumDescriptor* Stream_Format_descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_enum_descriptors[0];
}
bool Stream_Format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Stream_Format Stream::UNKNOWN;
const Stream_Format Stream::NMEA;
const Stream_Format Stream::RTCM_V2;
const Stream_Format Stream::RTCM_V3;
const Stream_Format Stream::NOVATEL_TEXT;
const Stream_Format Stream::NOVATEL_BINARY;
const Stream_Format Stream::UBLOX_TEXT;
const Stream_Format Stream::UBLOX_BINARY;
const Stream_Format Stream::Format_MIN;
const Stream_Format Stream::Format_MAX;
const int Stream::Format_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_RtkSolutionType_descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_enum_descriptors[1];
}
bool Config_RtkSolutionType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_RtkSolutionType Config::RTK_RECEIVER_SOLUTION;
const Config_RtkSolutionType Config::RTK_SOFTWARE_SOLUTION;
const Config_RtkSolutionType Config::RtkSolutionType_MIN;
const Config_RtkSolutionType Config::RtkSolutionType_MAX;
const int Config::RtkSolutionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ImuType_descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_enum_descriptors[2];
}
bool ImuType_IsValid(int value) {
  switch (value) {
    case 13:
    case 26:
    case 31:
    case 32:
    case 34:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 57:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Stream_Serial::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stream_Serial::kDeviceFieldNumber;
const int Stream_Serial::kBaudRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stream_Serial::Stream_Serial()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_Stream_Serial.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.config.Stream.Serial)
}
Stream_Serial::Stream_Serial(const Stream_Serial& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device()) {
    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  baud_rate_ = from.baud_rate_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.Stream.Serial)
}

void Stream_Serial::SharedCtor() {
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baud_rate_ = 9600;
}

Stream_Serial::~Stream_Serial() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.Stream.Serial)
  SharedDtor();
}

void Stream_Serial::SharedDtor() {
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Stream_Serial::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Stream_Serial::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stream_Serial& Stream_Serial::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_Stream_Serial.base);
  return *internal_default_instance();
}


void Stream_Serial::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.Stream.Serial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      device_.ClearNonDefaultToEmptyNoArena();
    }
    baud_rate_ = 9600;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Stream_Serial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.config.Stream.Serial)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 baud_rate = 2 [default = 9600];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_baud_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baud_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.config.Stream.Serial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.config.Stream.Serial)
  return false;
#undef DO_
}

void Stream_Serial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.config.Stream.Serial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes device = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->device(), output);
  }

  // optional int32 baud_rate = 2 [default = 9600];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->baud_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.config.Stream.Serial)
}

::google::protobuf::uint8* Stream_Serial::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.Stream.Serial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes device = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->device(), target);
  }

  // optional int32 baud_rate = 2 [default = 9600];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->baud_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.Stream.Serial)
  return target;
}

size_t Stream_Serial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.Stream.Serial)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes device = 1;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->device());
    }

    // optional int32 baud_rate = 2 [default = 9600];
    if (has_baud_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baud_rate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stream_Serial::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.config.Stream.Serial)
  GOOGLE_DCHECK_NE(&from, this);
  const Stream_Serial* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stream_Serial>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.config.Stream.Serial)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.config.Stream.Serial)
    MergeFrom(*source);
  }
}

void Stream_Serial::MergeFrom(const Stream_Serial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.Stream.Serial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_device();
      device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
    }
    if (cached_has_bits & 0x00000002u) {
      baud_rate_ = from.baud_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stream_Serial::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.config.Stream.Serial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream_Serial::CopyFrom(const Stream_Serial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.Stream.Serial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream_Serial::IsInitialized() const {
  return true;
}

void Stream_Serial::Swap(Stream_Serial* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stream_Serial::InternalSwap(Stream_Serial* other) {
  using std::swap;
  device_.Swap(&other->device_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(baud_rate_, other->baud_rate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Stream_Serial::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Stream_Tcp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stream_Tcp::kAddressFieldNumber;
const int Stream_Tcp::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stream_Tcp::Stream_Tcp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_Stream_Tcp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.config.Stream.Tcp)
}
Stream_Tcp::Stream_Tcp(const Stream_Tcp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.Stream.Tcp)
}

void Stream_Tcp::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 3001;
}

Stream_Tcp::~Stream_Tcp() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.Stream.Tcp)
  SharedDtor();
}

void Stream_Tcp::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Stream_Tcp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Stream_Tcp::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stream_Tcp& Stream_Tcp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_Stream_Tcp.base);
  return *internal_default_instance();
}


void Stream_Tcp::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.Stream.Tcp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      address_.ClearNonDefaultToEmptyNoArena();
    }
    port_ = 3001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Stream_Tcp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.config.Stream.Tcp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 port = 2 [default = 3001];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.config.Stream.Tcp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.config.Stream.Tcp)
  return false;
#undef DO_
}

void Stream_Tcp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.config.Stream.Tcp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->address(), output);
  }

  // optional int32 port = 2 [default = 3001];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.config.Stream.Tcp)
}

::google::protobuf::uint8* Stream_Tcp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.Stream.Tcp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->address(), target);
  }

  // optional int32 port = 2 [default = 3001];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.Stream.Tcp)
  return target;
}

size_t Stream_Tcp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.Stream.Tcp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->address());
    }

    // optional int32 port = 2 [default = 3001];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stream_Tcp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.config.Stream.Tcp)
  GOOGLE_DCHECK_NE(&from, this);
  const Stream_Tcp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stream_Tcp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.config.Stream.Tcp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.config.Stream.Tcp)
    MergeFrom(*source);
  }
}

void Stream_Tcp::MergeFrom(const Stream_Tcp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.Stream.Tcp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stream_Tcp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.config.Stream.Tcp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream_Tcp::CopyFrom(const Stream_Tcp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.Stream.Tcp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream_Tcp::IsInitialized() const {
  return true;
}

void Stream_Tcp::Swap(Stream_Tcp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stream_Tcp::InternalSwap(Stream_Tcp* other) {
  using std::swap;
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Stream_Tcp::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Stream_Udp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stream_Udp::kAddressFieldNumber;
const int Stream_Udp::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stream_Udp::Stream_Udp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_Stream_Udp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.config.Stream.Udp)
}
Stream_Udp::Stream_Udp(const Stream_Udp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.Stream.Udp)
}

void Stream_Udp::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 3001;
}

Stream_Udp::~Stream_Udp() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.Stream.Udp)
  SharedDtor();
}

void Stream_Udp::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Stream_Udp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Stream_Udp::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stream_Udp& Stream_Udp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_Stream_Udp.base);
  return *internal_default_instance();
}


void Stream_Udp::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.Stream.Udp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      address_.ClearNonDefaultToEmptyNoArena();
    }
    port_ = 3001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Stream_Udp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.config.Stream.Udp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 port = 2 [default = 3001];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.config.Stream.Udp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.config.Stream.Udp)
  return false;
#undef DO_
}

void Stream_Udp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.config.Stream.Udp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->address(), output);
  }

  // optional int32 port = 2 [default = 3001];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.config.Stream.Udp)
}

::google::protobuf::uint8* Stream_Udp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.Stream.Udp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->address(), target);
  }

  // optional int32 port = 2 [default = 3001];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.Stream.Udp)
  return target;
}

size_t Stream_Udp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.Stream.Udp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->address());
    }

    // optional int32 port = 2 [default = 3001];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stream_Udp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.config.Stream.Udp)
  GOOGLE_DCHECK_NE(&from, this);
  const Stream_Udp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stream_Udp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.config.Stream.Udp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.config.Stream.Udp)
    MergeFrom(*source);
  }
}

void Stream_Udp::MergeFrom(const Stream_Udp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.Stream.Udp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stream_Udp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.config.Stream.Udp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream_Udp::CopyFrom(const Stream_Udp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.Stream.Udp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream_Udp::IsInitialized() const {
  return true;
}

void Stream_Udp::Swap(Stream_Udp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stream_Udp::InternalSwap(Stream_Udp* other) {
  using std::swap;
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Stream_Udp::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Stream_Ntrip::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stream_Ntrip::kAddressFieldNumber;
const int Stream_Ntrip::kPortFieldNumber;
const int Stream_Ntrip::kMountPointFieldNumber;
const int Stream_Ntrip::kUserFieldNumber;
const int Stream_Ntrip::kPasswordFieldNumber;
const int Stream_Ntrip::kTimeoutSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stream_Ntrip::Stream_Ntrip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_Stream_Ntrip.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.config.Stream.Ntrip)
}
Stream_Ntrip::Stream_Ntrip(const Stream_Ntrip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  mount_point_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mount_point()) {
    mount_point_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mount_point_);
  }
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user()) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_s_) -
    reinterpret_cast<char*>(&port_)) + sizeof(timeout_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.Stream.Ntrip)
}

void Stream_Ntrip::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mount_point_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 2101;
  timeout_s_ = 30u;
}

Stream_Ntrip::~Stream_Ntrip() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.Stream.Ntrip)
  SharedDtor();
}

void Stream_Ntrip::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mount_point_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Stream_Ntrip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Stream_Ntrip::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stream_Ntrip& Stream_Ntrip::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_Stream_Ntrip.base);
  return *internal_default_instance();
}


void Stream_Ntrip::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.Stream.Ntrip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      mount_point_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      user_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    port_ = 2101;
    timeout_s_ = 30u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Stream_Ntrip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.config.Stream.Ntrip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 port = 2 [default = 2101];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes mount_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mount_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes user = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes password = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout_s = 6 [default = 30];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_timeout_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.config.Stream.Ntrip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.config.Stream.Ntrip)
  return false;
#undef DO_
}

void Stream_Ntrip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.config.Stream.Ntrip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->address(), output);
  }

  // optional int32 port = 2 [default = 2101];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional bytes mount_point = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mount_point(), output);
  }

  // optional bytes user = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->user(), output);
  }

  // optional bytes password = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->password(), output);
  }

  // optional uint32 timeout_s = 6 [default = 30];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->timeout_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.config.Stream.Ntrip)
}

::google::protobuf::uint8* Stream_Ntrip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.Stream.Ntrip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->address(), target);
  }

  // optional int32 port = 2 [default = 2101];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // optional bytes mount_point = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mount_point(), target);
  }

  // optional bytes user = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->user(), target);
  }

  // optional bytes password = 5;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->password(), target);
  }

  // optional uint32 timeout_s = 6 [default = 30];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->timeout_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.Stream.Ntrip)
  return target;
}

size_t Stream_Ntrip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.Stream.Ntrip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->address());
    }

    // optional bytes mount_point = 3;
    if (has_mount_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mount_point());
    }

    // optional bytes user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user());
    }

    // optional bytes password = 5;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // optional int32 port = 2 [default = 2101];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional uint32 timeout_s = 6 [default = 30];
    if (has_timeout_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout_s());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stream_Ntrip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.config.Stream.Ntrip)
  GOOGLE_DCHECK_NE(&from, this);
  const Stream_Ntrip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stream_Ntrip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.config.Stream.Ntrip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.config.Stream.Ntrip)
    MergeFrom(*source);
  }
}

void Stream_Ntrip::MergeFrom(const Stream_Ntrip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.Stream.Ntrip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mount_point();
      mount_point_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mount_point_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_user();
      user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000010u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000020u) {
      timeout_s_ = from.timeout_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stream_Ntrip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.config.Stream.Ntrip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream_Ntrip::CopyFrom(const Stream_Ntrip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.Stream.Ntrip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream_Ntrip::IsInitialized() const {
  return true;
}

void Stream_Ntrip::Swap(Stream_Ntrip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stream_Ntrip::InternalSwap(Stream_Ntrip* other) {
  using std::swap;
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mount_point_.Swap(&other->mount_point_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_.Swap(&other->user_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(port_, other->port_);
  swap(timeout_s_, other->timeout_s_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Stream_Ntrip::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Stream::InitAsDefaultInstance() {
  ::apollo::drivers::gnss::config::_Stream_default_instance_.serial_ = const_cast< ::apollo::drivers::gnss::config::Stream_Serial*>(
      ::apollo::drivers::gnss::config::Stream_Serial::internal_default_instance());
  ::apollo::drivers::gnss::config::_Stream_default_instance_.tcp_ = const_cast< ::apollo::drivers::gnss::config::Stream_Tcp*>(
      ::apollo::drivers::gnss::config::Stream_Tcp::internal_default_instance());
  ::apollo::drivers::gnss::config::_Stream_default_instance_.udp_ = const_cast< ::apollo::drivers::gnss::config::Stream_Udp*>(
      ::apollo::drivers::gnss::config::Stream_Udp::internal_default_instance());
  ::apollo::drivers::gnss::config::_Stream_default_instance_.ntrip_ = const_cast< ::apollo::drivers::gnss::config::Stream_Ntrip*>(
      ::apollo::drivers::gnss::config::Stream_Ntrip::internal_default_instance());
}
void Stream::set_allocated_serial(::apollo::drivers::gnss::config::Stream_Serial* serial) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (serial) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      serial = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, serial, submessage_arena);
    }
    set_has_serial();
    type_.serial_ = serial;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Stream.serial)
}
void Stream::set_allocated_tcp(::apollo::drivers::gnss::config::Stream_Tcp* tcp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (tcp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tcp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tcp, submessage_arena);
    }
    set_has_tcp();
    type_.tcp_ = tcp;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Stream.tcp)
}
void Stream::set_allocated_udp(::apollo::drivers::gnss::config::Stream_Udp* udp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (udp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      udp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, udp, submessage_arena);
    }
    set_has_udp();
    type_.udp_ = udp;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Stream.udp)
}
void Stream::set_allocated_ntrip(::apollo::drivers::gnss::config::Stream_Ntrip* ntrip) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (ntrip) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ntrip = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ntrip, submessage_arena);
    }
    set_has_ntrip();
    type_.ntrip_ = ntrip;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Stream.ntrip)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stream::kFormatFieldNumber;
const int Stream::kSerialFieldNumber;
const int Stream::kTcpFieldNumber;
const int Stream::kUdpFieldNumber;
const int Stream::kNtripFieldNumber;
const int Stream::kPushLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stream::Stream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_Stream.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.config.Stream)
}
Stream::Stream(const Stream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&format_, &from.format_,
    static_cast<size_t>(reinterpret_cast<char*>(&push_location_) -
    reinterpret_cast<char*>(&format_)) + sizeof(push_location_));
  clear_has_type();
  switch (from.type_case()) {
    case kSerial: {
      mutable_serial()->::apollo::drivers::gnss::config::Stream_Serial::MergeFrom(from.serial());
      break;
    }
    case kTcp: {
      mutable_tcp()->::apollo::drivers::gnss::config::Stream_Tcp::MergeFrom(from.tcp());
      break;
    }
    case kUdp: {
      mutable_udp()->::apollo::drivers::gnss::config::Stream_Udp::MergeFrom(from.udp());
      break;
    }
    case kNtrip: {
      mutable_ntrip()->::apollo::drivers::gnss::config::Stream_Ntrip::MergeFrom(from.ntrip());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.Stream)
}

void Stream::SharedCtor() {
  ::memset(&format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&push_location_) -
      reinterpret_cast<char*>(&format_)) + sizeof(push_location_));
  clear_has_type();
}

Stream::~Stream() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.Stream)
  SharedDtor();
}

void Stream::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void Stream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Stream::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stream& Stream::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_Stream.base);
  return *internal_default_instance();
}


void Stream::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:apollo.drivers.gnss.config.Stream)
  switch (type_case()) {
    case kSerial: {
      delete type_.serial_;
      break;
    }
    case kTcp: {
      delete type_.tcp_;
      break;
    }
    case kUdp: {
      delete type_.udp_;
      break;
    }
    case kNtrip: {
      delete type_.ntrip_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Stream::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.Stream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&format_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&push_location_) -
        reinterpret_cast<char*>(&format_)) + sizeof(push_location_));
  }
  clear_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Stream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.config.Stream)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.gnss.config.Stream.Format format = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::config::Stream_Format_IsValid(value)) {
            set_format(static_cast< ::apollo::drivers::gnss::config::Stream_Format >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.config.Stream.Serial serial = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_serial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.config.Stream.Tcp tcp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tcp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.config.Stream.Udp udp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_udp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.config.Stream.Ntrip ntrip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ntrip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool push_location = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_push_location();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &push_location_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.config.Stream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.config.Stream)
  return false;
#undef DO_
}

void Stream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.config.Stream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.gnss.config.Stream.Format format = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->format(), output);
  }

  switch (type_case()) {
    case kSerial:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_serial(), output);
      break;
    case kTcp:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_tcp(), output);
      break;
    case kUdp:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_udp(), output);
      break;
    case kNtrip:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_ntrip(), output);
      break;
    default: ;
  }
  // optional bool push_location = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->push_location(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.config.Stream)
}

::google::protobuf::uint8* Stream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.Stream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.gnss.config.Stream.Format format = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->format(), target);
  }

  switch (type_case()) {
    case kSerial:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_serial(), deterministic, target);
      break;
    case kTcp:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_tcp(), deterministic, target);
      break;
    case kUdp:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_udp(), deterministic, target);
      break;
    case kNtrip:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_ntrip(), deterministic, target);
      break;
    default: ;
  }
  // optional bool push_location = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->push_location(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.Stream)
  return target;
}

size_t Stream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.Stream)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.drivers.gnss.config.Stream.Format format = 1;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

    // optional bool push_location = 6;
    if (has_push_location()) {
      total_size += 1 + 1;
    }

  }
  switch (type_case()) {
    // optional .apollo.drivers.gnss.config.Stream.Serial serial = 2;
    case kSerial: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.serial_);
      break;
    }
    // optional .apollo.drivers.gnss.config.Stream.Tcp tcp = 3;
    case kTcp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.tcp_);
      break;
    }
    // optional .apollo.drivers.gnss.config.Stream.Udp udp = 4;
    case kUdp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.udp_);
      break;
    }
    // optional .apollo.drivers.gnss.config.Stream.Ntrip ntrip = 5;
    case kNtrip: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.ntrip_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.config.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  const Stream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.config.Stream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.config.Stream)
    MergeFrom(*source);
  }
}

void Stream::MergeFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      format_ = from.format_;
    }
    if (cached_has_bits & 0x00000002u) {
      push_location_ = from.push_location_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.type_case()) {
    case kSerial: {
      mutable_serial()->::apollo::drivers::gnss::config::Stream_Serial::MergeFrom(from.serial());
      break;
    }
    case kTcp: {
      mutable_tcp()->::apollo::drivers::gnss::config::Stream_Tcp::MergeFrom(from.tcp());
      break;
    }
    case kUdp: {
      mutable_udp()->::apollo::drivers::gnss::config::Stream_Udp::MergeFrom(from.udp());
      break;
    }
    case kNtrip: {
      mutable_ntrip()->::apollo::drivers::gnss::config::Stream_Ntrip::MergeFrom(from.ntrip());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Stream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.config.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream::CopyFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream::IsInitialized() const {
  return true;
}

void Stream::Swap(Stream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stream::InternalSwap(Stream* other) {
  using std::swap;
  swap(format_, other->format_);
  swap(push_location_, other->push_location_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Stream::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NovatelConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NovatelConfig::kImuOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NovatelConfig::NovatelConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_NovatelConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.config.NovatelConfig)
}
NovatelConfig::NovatelConfig(const NovatelConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imu_orientation_ = from.imu_orientation_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.NovatelConfig)
}

void NovatelConfig::SharedCtor() {
  imu_orientation_ = 5;
}

NovatelConfig::~NovatelConfig() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.NovatelConfig)
  SharedDtor();
}

void NovatelConfig::SharedDtor() {
}

void NovatelConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NovatelConfig::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NovatelConfig& NovatelConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_NovatelConfig.base);
  return *internal_default_instance();
}


void NovatelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.NovatelConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imu_orientation_ = 5;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NovatelConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.config.NovatelConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 imu_orientation = 1 [default = 5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_imu_orientation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imu_orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.config.NovatelConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.config.NovatelConfig)
  return false;
#undef DO_
}

void NovatelConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.config.NovatelConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 imu_orientation = 1 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->imu_orientation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.config.NovatelConfig)
}

::google::protobuf::uint8* NovatelConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.NovatelConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 imu_orientation = 1 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->imu_orientation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.NovatelConfig)
  return target;
}

size_t NovatelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.NovatelConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 imu_orientation = 1 [default = 5];
  if (has_imu_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->imu_orientation());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NovatelConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.config.NovatelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NovatelConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NovatelConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.config.NovatelConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.config.NovatelConfig)
    MergeFrom(*source);
  }
}

void NovatelConfig::MergeFrom(const NovatelConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.NovatelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_imu_orientation()) {
    set_imu_orientation(from.imu_orientation());
  }
}

void NovatelConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.config.NovatelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NovatelConfig::CopyFrom(const NovatelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.NovatelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NovatelConfig::IsInitialized() const {
  return true;
}

void NovatelConfig::Swap(NovatelConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NovatelConfig::InternalSwap(NovatelConfig* other) {
  using std::swap;
  swap(imu_orientation_, other->imu_orientation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NovatelConfig::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UbloxConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UbloxConfig::UbloxConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_UbloxConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.config.UbloxConfig)
}
UbloxConfig::UbloxConfig(const UbloxConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.UbloxConfig)
}

void UbloxConfig::SharedCtor() {
}

UbloxConfig::~UbloxConfig() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.UbloxConfig)
  SharedDtor();
}

void UbloxConfig::SharedDtor() {
}

void UbloxConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UbloxConfig::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UbloxConfig& UbloxConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_UbloxConfig.base);
  return *internal_default_instance();
}


void UbloxConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.UbloxConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UbloxConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.config.UbloxConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.config.UbloxConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.config.UbloxConfig)
  return false;
#undef DO_
}

void UbloxConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.config.UbloxConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.config.UbloxConfig)
}

::google::protobuf::uint8* UbloxConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.UbloxConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.UbloxConfig)
  return target;
}

size_t UbloxConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.UbloxConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UbloxConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.config.UbloxConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const UbloxConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UbloxConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.config.UbloxConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.config.UbloxConfig)
    MergeFrom(*source);
  }
}

void UbloxConfig::MergeFrom(const UbloxConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.UbloxConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UbloxConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.config.UbloxConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UbloxConfig::CopyFrom(const UbloxConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.UbloxConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UbloxConfig::IsInitialized() const {
  return true;
}

void UbloxConfig::Swap(UbloxConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UbloxConfig::InternalSwap(UbloxConfig* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UbloxConfig::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TF::InitAsDefaultInstance() {
}
::google::protobuf::internal::ExplicitlyConstructed<::std::string> TF::_i_give_permission_to_break_this_code_default_frame_id_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> TF::_i_give_permission_to_break_this_code_default_child_frame_id_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TF::kFrameIdFieldNumber;
const int TF::kChildFrameIdFieldNumber;
const int TF::kEnableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TF::TF()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_TF.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.config.TF)
}
TF::TF(const TF& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_id_.UnsafeSetDefault(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get());
  if (from.has_frame_id()) {
    frame_id_.AssignWithDefault(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get(), from.frame_id_);
  }
  child_frame_id_.UnsafeSetDefault(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get());
  if (from.has_child_frame_id()) {
    child_frame_id_.AssignWithDefault(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get(), from.child_frame_id_);
  }
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.TF)
}

void TF::SharedCtor() {
  frame_id_.UnsafeSetDefault(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get());
  child_frame_id_.UnsafeSetDefault(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get());
  enable_ = false;
}

TF::~TF() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.TF)
  SharedDtor();
}

void TF::SharedDtor() {
  frame_id_.DestroyNoArena(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get());
  child_frame_id_.DestroyNoArena(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get());
}

void TF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TF::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TF& TF::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_TF.base);
  return *internal_default_instance();
}


void TF::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.TF)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      frame_id_.UnsafeMutablePointer()->assign(*&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      child_frame_id_.UnsafeMutablePointer()->assign(*&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get());
    }
  }
  enable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.config.TF)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string frame_id = 1 [default = "world"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frame_id().data(), static_cast<int>(this->frame_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.drivers.gnss.config.TF.frame_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string child_frame_id = 2 [default = "novatel"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_child_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->child_frame_id().data(), static_cast<int>(this->child_frame_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.drivers.gnss.config.TF.child_frame_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_enable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.config.TF)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.config.TF)
  return false;
#undef DO_
}

void TF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.config.TF)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string frame_id = 1 [default = "world"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.gnss.config.TF.frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->frame_id(), output);
  }

  // optional string child_frame_id = 2 [default = "novatel"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->child_frame_id().data(), static_cast<int>(this->child_frame_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.gnss.config.TF.child_frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->child_frame_id(), output);
  }

  // optional bool enable = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.config.TF)
}

::google::protobuf::uint8* TF::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.TF)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string frame_id = 1 [default = "world"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.gnss.config.TF.frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->frame_id(), target);
  }

  // optional string child_frame_id = 2 [default = "novatel"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->child_frame_id().data(), static_cast<int>(this->child_frame_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.gnss.config.TF.child_frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->child_frame_id(), target);
  }

  // optional bool enable = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.TF)
  return target;
}

size_t TF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.TF)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string frame_id = 1 [default = "world"];
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frame_id());
    }

    // optional string child_frame_id = 2 [default = "novatel"];
    if (has_child_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->child_frame_id());
    }

    // optional bool enable = 3 [default = false];
    if (has_enable()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TF::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.config.TF)
  GOOGLE_DCHECK_NE(&from, this);
  const TF* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TF>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.config.TF)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.config.TF)
    MergeFrom(*source);
  }
}

void TF::MergeFrom(const TF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.TF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_frame_id();
      frame_id_.AssignWithDefault(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get(), from.frame_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_child_frame_id();
      child_frame_id_.AssignWithDefault(&::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get(), from.child_frame_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      enable_ = from.enable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TF::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.config.TF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TF::CopyFrom(const TF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.TF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TF::IsInitialized() const {
  return true;
}

void TF::Swap(TF* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TF::InternalSwap(TF* other) {
  using std::swap;
  frame_id_.Swap(&other->frame_id_, &::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_frame_id_.get(),
    GetArenaNoVirtual());
  child_frame_id_.Swap(&other->child_frame_id_, &::apollo::drivers::gnss::config::TF::_i_give_permission_to_break_this_code_default_child_frame_id_.get(),
    GetArenaNoVirtual());
  swap(enable_, other->enable_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TF::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Config::InitAsDefaultInstance() {
  ::apollo::drivers::gnss::config::_Config_default_instance_._instance.get_mutable()->data_ = const_cast< ::apollo::drivers::gnss::config::Stream*>(
      ::apollo::drivers::gnss::config::Stream::internal_default_instance());
  ::apollo::drivers::gnss::config::_Config_default_instance_._instance.get_mutable()->command_ = const_cast< ::apollo::drivers::gnss::config::Stream*>(
      ::apollo::drivers::gnss::config::Stream::internal_default_instance());
  ::apollo::drivers::gnss::config::_Config_default_instance_._instance.get_mutable()->rtk_from_ = const_cast< ::apollo::drivers::gnss::config::Stream*>(
      ::apollo::drivers::gnss::config::Stream::internal_default_instance());
  ::apollo::drivers::gnss::config::_Config_default_instance_._instance.get_mutable()->rtk_to_ = const_cast< ::apollo::drivers::gnss::config::Stream*>(
      ::apollo::drivers::gnss::config::Stream::internal_default_instance());
  ::apollo::drivers::gnss::config::_Config_default_instance_.novatel_config_ = const_cast< ::apollo::drivers::gnss::config::NovatelConfig*>(
      ::apollo::drivers::gnss::config::NovatelConfig::internal_default_instance());
  ::apollo::drivers::gnss::config::_Config_default_instance_.ublox_config_ = const_cast< ::apollo::drivers::gnss::config::UbloxConfig*>(
      ::apollo::drivers::gnss::config::UbloxConfig::internal_default_instance());
  ::apollo::drivers::gnss::config::_Config_default_instance_._instance.get_mutable()->tf_ = const_cast< ::apollo::drivers::gnss::config::TF*>(
      ::apollo::drivers::gnss::config::TF::internal_default_instance());
}
void Config::set_allocated_novatel_config(::apollo::drivers::gnss::config::NovatelConfig* novatel_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_device_config();
  if (novatel_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      novatel_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, novatel_config, submessage_arena);
    }
    set_has_novatel_config();
    device_config_.novatel_config_ = novatel_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Config.novatel_config)
}
void Config::set_allocated_ublox_config(::apollo::drivers::gnss::config::UbloxConfig* ublox_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_device_config();
  if (ublox_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ublox_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ublox_config, submessage_arena);
    }
    set_has_ublox_config();
    device_config_.ublox_config_ = ublox_config;
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.gnss.config.Config.ublox_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config::kDataFieldNumber;
const int Config::kCommandFieldNumber;
const int Config::kRtkFromFieldNumber;
const int Config::kRtkToFieldNumber;
const int Config::kLoginCommandsFieldNumber;
const int Config::kLogoutCommandsFieldNumber;
const int Config::kNovatelConfigFieldNumber;
const int Config::kUbloxConfigFieldNumber;
const int Config::kRtkSolutionTypeFieldNumber;
const int Config::kImuTypeFieldNumber;
const int Config::kProj4TextFieldNumber;
const int Config::kTfFieldNumber;
const int Config::kWheelParametersFieldNumber;
const int Config::kGpsbinFolderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config::Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_Config.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.gnss.config.Config)
}
Config::Config(const Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      login_commands_(from.login_commands_),
      logout_commands_(from.logout_commands_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proj4_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_proj4_text()) {
    proj4_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proj4_text_);
  }
  wheel_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wheel_parameters()) {
    wheel_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wheel_parameters_);
  }
  gpsbin_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gpsbin_folder()) {
    gpsbin_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gpsbin_folder_);
  }
  if (from.has_data()) {
    data_ = new ::apollo::drivers::gnss::config::Stream(*from.data_);
  } else {
    data_ = NULL;
  }
  if (from.has_command()) {
    command_ = new ::apollo::drivers::gnss::config::Stream(*from.command_);
  } else {
    command_ = NULL;
  }
  if (from.has_rtk_from()) {
    rtk_from_ = new ::apollo::drivers::gnss::config::Stream(*from.rtk_from_);
  } else {
    rtk_from_ = NULL;
  }
  if (from.has_rtk_to()) {
    rtk_to_ = new ::apollo::drivers::gnss::config::Stream(*from.rtk_to_);
  } else {
    rtk_to_ = NULL;
  }
  if (from.has_tf()) {
    tf_ = new ::apollo::drivers::gnss::config::TF(*from.tf_);
  } else {
    tf_ = NULL;
  }
  ::memcpy(&rtk_solution_type_, &from.rtk_solution_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&imu_type_) -
    reinterpret_cast<char*>(&rtk_solution_type_)) + sizeof(imu_type_));
  clear_has_device_config();
  switch (from.device_config_case()) {
    case kNovatelConfig: {
      mutable_novatel_config()->::apollo::drivers::gnss::config::NovatelConfig::MergeFrom(from.novatel_config());
      break;
    }
    case kUbloxConfig: {
      mutable_ublox_config()->::apollo::drivers::gnss::config::UbloxConfig::MergeFrom(from.ublox_config());
      break;
    }
    case DEVICE_CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.gnss.config.Config)
}

void Config::SharedCtor() {
  proj4_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wheel_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gpsbin_folder_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tf_) -
      reinterpret_cast<char*>(&data_)) + sizeof(tf_));
  rtk_solution_type_ = 1;
  imu_type_ = 13;
  clear_has_device_config();
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:apollo.drivers.gnss.config.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  proj4_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wheel_parameters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gpsbin_folder_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete command_;
  if (this != internal_default_instance()) delete rtk_from_;
  if (this != internal_default_instance()) delete rtk_to_;
  if (this != internal_default_instance()) delete tf_;
  if (has_device_config()) {
    clear_device_config();
  }
}

void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Config& Config::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::scc_info_Config.base);
  return *internal_default_instance();
}


void Config::clear_device_config() {
// @@protoc_insertion_point(one_of_clear_start:apollo.drivers.gnss.config.Config)
  switch (device_config_case()) {
    case kNovatelConfig: {
      delete device_config_.novatel_config_;
      break;
    }
    case kUbloxConfig: {
      delete device_config_.ublox_config_;
      break;
    }
    case DEVICE_CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEVICE_CONFIG_NOT_SET;
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.gnss.config.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  login_commands_.Clear();
  logout_commands_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      proj4_text_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      wheel_parameters_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      gpsbin_folder_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(command_ != NULL);
      command_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(rtk_from_ != NULL);
      rtk_from_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(rtk_to_ != NULL);
      rtk_to_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(tf_ != NULL);
      tf_->Clear();
    }
  }
  if (cached_has_bits & 768u) {
    rtk_solution_type_ = 1;
    imu_type_ = 13;
  }
  clear_device_config();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.gnss.config.Config)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.gnss.config.Stream data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.config.Stream command = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.config.Stream rtk_from = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rtk_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.config.Stream rtk_to = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rtk_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes login_commands = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_login_commands()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes logout_commands = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_logout_commands()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.config.NovatelConfig novatel_config = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_novatel_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.config.UbloxConfig ublox_config = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ublox_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.config.Config.RtkSolutionType rtk_solution_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::config::Config_RtkSolutionType_IsValid(value)) {
            set_rtk_solution_type(static_cast< ::apollo::drivers::gnss::config::Config_RtkSolutionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.config.ImuType imu_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::gnss::config::ImuType_IsValid(value)) {
            set_imu_type(static_cast< ::apollo::drivers::gnss::config::ImuType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string proj4_text = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proj4_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proj4_text().data(), static_cast<int>(this->proj4_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.drivers.gnss.config.Config.proj4_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.gnss.config.TF tf = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string wheel_parameters = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wheel_parameters()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wheel_parameters().data(), static_cast<int>(this->wheel_parameters().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.drivers.gnss.config.Config.wheel_parameters");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gpsbin_folder = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpsbin_folder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gpsbin_folder().data(), static_cast<int>(this->gpsbin_folder().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.drivers.gnss.config.Config.gpsbin_folder");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.gnss.config.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.gnss.config.Config)
  return false;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.gnss.config.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.gnss.config.Stream data = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_data(), output);
  }

  // optional .apollo.drivers.gnss.config.Stream command = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_command(), output);
  }

  // optional .apollo.drivers.gnss.config.Stream rtk_from = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_rtk_from(), output);
  }

  // optional .apollo.drivers.gnss.config.Stream rtk_to = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_rtk_to(), output);
  }

  // repeated bytes login_commands = 5;
  for (int i = 0, n = this->login_commands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->login_commands(i), output);
  }

  // repeated bytes logout_commands = 6;
  for (int i = 0, n = this->logout_commands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->logout_commands(i), output);
  }

  switch (device_config_case()) {
    case kNovatelConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, this->_internal_novatel_config(), output);
      break;
    case kUbloxConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, this->_internal_ublox_config(), output);
      break;
    default: ;
  }
  // optional .apollo.drivers.gnss.config.Config.RtkSolutionType rtk_solution_type = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->rtk_solution_type(), output);
  }

  // optional .apollo.drivers.gnss.config.ImuType imu_type = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->imu_type(), output);
  }

  // optional string proj4_text = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proj4_text().data(), static_cast<int>(this->proj4_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.gnss.config.Config.proj4_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->proj4_text(), output);
  }

  // optional .apollo.drivers.gnss.config.TF tf = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_tf(), output);
  }

  // optional string wheel_parameters = 13;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wheel_parameters().data(), static_cast<int>(this->wheel_parameters().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.gnss.config.Config.wheel_parameters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->wheel_parameters(), output);
  }

  // optional string gpsbin_folder = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gpsbin_folder().data(), static_cast<int>(this->gpsbin_folder().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.gnss.config.Config.gpsbin_folder");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->gpsbin_folder(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.gnss.config.Config)
}

::google::protobuf::uint8* Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.gnss.config.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.gnss.config.Stream data = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_data(), deterministic, target);
  }

  // optional .apollo.drivers.gnss.config.Stream command = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_command(), deterministic, target);
  }

  // optional .apollo.drivers.gnss.config.Stream rtk_from = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_rtk_from(), deterministic, target);
  }

  // optional .apollo.drivers.gnss.config.Stream rtk_to = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_rtk_to(), deterministic, target);
  }

  // repeated bytes login_commands = 5;
  for (int i = 0, n = this->login_commands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->login_commands(i), target);
  }

  // repeated bytes logout_commands = 6;
  for (int i = 0, n = this->logout_commands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->logout_commands(i), target);
  }

  switch (device_config_case()) {
    case kNovatelConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, this->_internal_novatel_config(), deterministic, target);
      break;
    case kUbloxConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, this->_internal_ublox_config(), deterministic, target);
      break;
    default: ;
  }
  // optional .apollo.drivers.gnss.config.Config.RtkSolutionType rtk_solution_type = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->rtk_solution_type(), target);
  }

  // optional .apollo.drivers.gnss.config.ImuType imu_type = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->imu_type(), target);
  }

  // optional string proj4_text = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proj4_text().data(), static_cast<int>(this->proj4_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.gnss.config.Config.proj4_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->proj4_text(), target);
  }

  // optional .apollo.drivers.gnss.config.TF tf = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_tf(), deterministic, target);
  }

  // optional string wheel_parameters = 13;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wheel_parameters().data(), static_cast<int>(this->wheel_parameters().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.gnss.config.Config.wheel_parameters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->wheel_parameters(), target);
  }

  // optional string gpsbin_folder = 14;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gpsbin_folder().data(), static_cast<int>(this->gpsbin_folder().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.gnss.config.Config.gpsbin_folder");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->gpsbin_folder(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.gnss.config.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.gnss.config.Config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated bytes login_commands = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->login_commands_size());
  for (int i = 0, n = this->login_commands_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->login_commands(i));
  }

  // repeated bytes logout_commands = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->logout_commands_size());
  for (int i = 0, n = this->logout_commands_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->logout_commands(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string proj4_text = 11;
    if (has_proj4_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proj4_text());
    }

    // optional string wheel_parameters = 13;
    if (has_wheel_parameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wheel_parameters());
    }

    // optional string gpsbin_folder = 14;
    if (has_gpsbin_folder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpsbin_folder());
    }

    // optional .apollo.drivers.gnss.config.Stream data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *data_);
    }

    // optional .apollo.drivers.gnss.config.Stream command = 2;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_);
    }

    // optional .apollo.drivers.gnss.config.Stream rtk_from = 3;
    if (has_rtk_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rtk_from_);
    }

    // optional .apollo.drivers.gnss.config.Stream rtk_to = 4;
    if (has_rtk_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rtk_to_);
    }

    // optional .apollo.drivers.gnss.config.TF tf = 12;
    if (has_tf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tf_);
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .apollo.drivers.gnss.config.Config.RtkSolutionType rtk_solution_type = 9;
    if (has_rtk_solution_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rtk_solution_type());
    }

    // optional .apollo.drivers.gnss.config.ImuType imu_type = 10;
    if (has_imu_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->imu_type());
    }

  }
  switch (device_config_case()) {
    // optional .apollo.drivers.gnss.config.NovatelConfig novatel_config = 7;
    case kNovatelConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *device_config_.novatel_config_);
      break;
    }
    // optional .apollo.drivers.gnss.config.UbloxConfig ublox_config = 8;
    case kUbloxConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *device_config_.ublox_config_);
      break;
    }
    case DEVICE_CONFIG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.gnss.config.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.gnss.config.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.gnss.config.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.gnss.config.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  login_commands_.MergeFrom(from.login_commands_);
  logout_commands_.MergeFrom(from.logout_commands_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_proj4_text();
      proj4_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proj4_text_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_wheel_parameters();
      wheel_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wheel_parameters_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_gpsbin_folder();
      gpsbin_folder_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gpsbin_folder_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_data()->::apollo::drivers::gnss::config::Stream::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_command()->::apollo::drivers::gnss::config::Stream::MergeFrom(from.command());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_rtk_from()->::apollo::drivers::gnss::config::Stream::MergeFrom(from.rtk_from());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_rtk_to()->::apollo::drivers::gnss::config::Stream::MergeFrom(from.rtk_to());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_tf()->::apollo::drivers::gnss::config::TF::MergeFrom(from.tf());
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      rtk_solution_type_ = from.rtk_solution_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      imu_type_ = from.imu_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.device_config_case()) {
    case kNovatelConfig: {
      mutable_novatel_config()->::apollo::drivers::gnss::config::NovatelConfig::MergeFrom(from.novatel_config());
      break;
    }
    case kUbloxConfig: {
      mutable_ublox_config()->::apollo::drivers::gnss::config::UbloxConfig::MergeFrom(from.ublox_config());
      break;
    }
    case DEVICE_CONFIG_NOT_SET: {
      break;
    }
  }
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.gnss.config.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.gnss.config.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::Swap(Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config::InternalSwap(Config* other) {
  using std::swap;
  login_commands_.InternalSwap(CastToBase(&other->login_commands_));
  logout_commands_.InternalSwap(CastToBase(&other->logout_commands_));
  proj4_text_.Swap(&other->proj4_text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  wheel_parameters_.Swap(&other->wheel_parameters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gpsbin_folder_.Swap(&other->gpsbin_folder_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(command_, other->command_);
  swap(rtk_from_, other->rtk_from_);
  swap(rtk_to_, other->rtk_to_);
  swap(tf_, other->tf_);
  swap(rtk_solution_type_, other->rtk_solution_type_);
  swap(imu_type_, other->imu_type_);
  swap(device_config_, other->device_config_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config
}  // namespace gnss
}  // namespace drivers
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::config::Stream_Serial* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::Stream_Serial >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::config::Stream_Serial >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::config::Stream_Tcp* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::Stream_Tcp >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::config::Stream_Tcp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::config::Stream_Udp* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::Stream_Udp >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::config::Stream_Udp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::config::Stream_Ntrip* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::Stream_Ntrip >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::config::Stream_Ntrip >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::config::Stream* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::Stream >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::config::Stream >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::config::NovatelConfig* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::NovatelConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::config::NovatelConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::config::UbloxConfig* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::UbloxConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::config::UbloxConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::config::TF* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::TF >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::config::TF >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::gnss::config::Config* Arena::CreateMaybeMessage< ::apollo::drivers::gnss::config::Config >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::gnss::config::Config >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
