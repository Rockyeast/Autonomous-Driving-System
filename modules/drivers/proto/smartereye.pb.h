// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/smartereye.proto

#ifndef PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fsmartereye_2eproto
#define PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fsmartereye_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto 

namespace protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto
namespace apollo {
namespace drivers {
class LdwDataPacks;
class LdwDataPacksDefaultTypeInternal;
extern LdwDataPacksDefaultTypeInternal _LdwDataPacks_default_instance_;
class LdwLane;
class LdwLaneDefaultTypeInternal;
extern LdwLaneDefaultTypeInternal _LdwLane_default_instance_;
class LdwLaneBoundary;
class LdwLaneBoundaryDefaultTypeInternal;
extern LdwLaneBoundaryDefaultTypeInternal _LdwLaneBoundary_default_instance_;
class LdwLensInfo;
class LdwLensInfoDefaultTypeInternal;
extern LdwLensInfoDefaultTypeInternal _LdwLensInfo_default_instance_;
class LdwRoadway;
class LdwRoadwayDefaultTypeInternal;
extern LdwRoadwayDefaultTypeInternal _LdwRoadway_default_instance_;
class OutputObstacle;
class OutputObstacleDefaultTypeInternal;
extern OutputObstacleDefaultTypeInternal _OutputObstacle_default_instance_;
class SmartereyeLanemark;
class SmartereyeLanemarkDefaultTypeInternal;
extern SmartereyeLanemarkDefaultTypeInternal _SmartereyeLanemark_default_instance_;
class SmartereyeObstacles;
class SmartereyeObstaclesDefaultTypeInternal;
extern SmartereyeObstaclesDefaultTypeInternal _SmartereyeObstacles_default_instance_;
class SmartereyeObstacles_OutputObstaclesEntry_DoNotUse;
class SmartereyeObstacles_OutputObstaclesEntry_DoNotUseDefaultTypeInternal;
extern SmartereyeObstacles_OutputObstaclesEntry_DoNotUseDefaultTypeInternal _SmartereyeObstacles_OutputObstaclesEntry_DoNotUse_default_instance_;
}  // namespace drivers
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::drivers::LdwDataPacks* Arena::CreateMaybeMessage<::apollo::drivers::LdwDataPacks>(Arena*);
template<> ::apollo::drivers::LdwLane* Arena::CreateMaybeMessage<::apollo::drivers::LdwLane>(Arena*);
template<> ::apollo::drivers::LdwLaneBoundary* Arena::CreateMaybeMessage<::apollo::drivers::LdwLaneBoundary>(Arena*);
template<> ::apollo::drivers::LdwLensInfo* Arena::CreateMaybeMessage<::apollo::drivers::LdwLensInfo>(Arena*);
template<> ::apollo::drivers::LdwRoadway* Arena::CreateMaybeMessage<::apollo::drivers::LdwRoadway>(Arena*);
template<> ::apollo::drivers::OutputObstacle* Arena::CreateMaybeMessage<::apollo::drivers::OutputObstacle>(Arena*);
template<> ::apollo::drivers::SmartereyeLanemark* Arena::CreateMaybeMessage<::apollo::drivers::SmartereyeLanemark>(Arena*);
template<> ::apollo::drivers::SmartereyeObstacles* Arena::CreateMaybeMessage<::apollo::drivers::SmartereyeObstacles>(Arena*);
template<> ::apollo::drivers::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::drivers::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace drivers {

enum OutputObstacle_RecognitionType {
  OutputObstacle_RecognitionType_INVALID = 0,
  OutputObstacle_RecognitionType_VEHICLE = 1,
  OutputObstacle_RecognitionType_PEDESTRIAN = 2,
  OutputObstacle_RecognitionType_CHILD = 3,
  OutputObstacle_RecognitionType_BICYCLE = 4,
  OutputObstacle_RecognitionType_MOTO = 5,
  OutputObstacle_RecognitionType_TRUCK = 6,
  OutputObstacle_RecognitionType_BUS = 7,
  OutputObstacle_RecognitionType_OTHERS = 8,
  OutputObstacle_RecognitionType_ESTIMATED = 9,
  OutputObstacle_RecognitionType_CONTINUOUS = 10
};
bool OutputObstacle_RecognitionType_IsValid(int value);
const OutputObstacle_RecognitionType OutputObstacle_RecognitionType_RecognitionType_MIN = OutputObstacle_RecognitionType_INVALID;
const OutputObstacle_RecognitionType OutputObstacle_RecognitionType_RecognitionType_MAX = OutputObstacle_RecognitionType_CONTINUOUS;
const int OutputObstacle_RecognitionType_RecognitionType_ARRAYSIZE = OutputObstacle_RecognitionType_RecognitionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* OutputObstacle_RecognitionType_descriptor();
inline const ::std::string& OutputObstacle_RecognitionType_Name(OutputObstacle_RecognitionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    OutputObstacle_RecognitionType_descriptor(), value);
}
inline bool OutputObstacle_RecognitionType_Parse(
    const ::std::string& name, OutputObstacle_RecognitionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OutputObstacle_RecognitionType>(
    OutputObstacle_RecognitionType_descriptor(), name, value);
}
enum LdwVersions {
  LDW_VERSION_C1 = 0,
  LDW_VERSION_C2 = 1,
  LDW_VERSION_FOUR_LANE_C2 = 2
};
bool LdwVersions_IsValid(int value);
const LdwVersions LdwVersions_MIN = LDW_VERSION_C1;
const LdwVersions LdwVersions_MAX = LDW_VERSION_FOUR_LANE_C2;
const int LdwVersions_ARRAYSIZE = LdwVersions_MAX + 1;

const ::google::protobuf::EnumDescriptor* LdwVersions_descriptor();
inline const ::std::string& LdwVersions_Name(LdwVersions value) {
  return ::google::protobuf::internal::NameOfEnum(
    LdwVersions_descriptor(), value);
}
inline bool LdwVersions_Parse(
    const ::std::string& name, LdwVersions* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LdwVersions>(
    LdwVersions_descriptor(), name, value);
}
enum LdwLaneStyle {
  LDW_LANE_STYLE_NONE_LANE = 0,
  LDW_LANE_STYLE_PREDICT_LANE = 1,
  LDW_LANE_STYLE_BROKEN_LANE = 2,
  LDW_LANE_STYLE_SOLID_LANE = 3,
  LDW_LANE_STYLE_DOUBLE_BROKEN_LANE = 4,
  LDW_LANE_STYLE_DOUBLE_SOLID_LANE = 5,
  LDW_LANE_STYLE_TRIPLE_LANE = 6
};
bool LdwLaneStyle_IsValid(int value);
const LdwLaneStyle LdwLaneStyle_MIN = LDW_LANE_STYLE_NONE_LANE;
const LdwLaneStyle LdwLaneStyle_MAX = LDW_LANE_STYLE_TRIPLE_LANE;
const int LdwLaneStyle_ARRAYSIZE = LdwLaneStyle_MAX + 1;

const ::google::protobuf::EnumDescriptor* LdwLaneStyle_descriptor();
inline const ::std::string& LdwLaneStyle_Name(LdwLaneStyle value) {
  return ::google::protobuf::internal::NameOfEnum(
    LdwLaneStyle_descriptor(), value);
}
inline bool LdwLaneStyle_Parse(
    const ::std::string& name, LdwLaneStyle* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LdwLaneStyle>(
    LdwLaneStyle_descriptor(), name, value);
}
enum LdwSteerStatus {
  LDW_NORMAL_STEER = 0,
  LDW_STEER_ON_LEFT__LANE = 1,
  LDW_STEER_ON_RIGHT_LANE = 2,
  LDW_STEER_WARNING_LEFT_ = 3,
  LDW_STEER_WARNING_RIGHT = 4
};
bool LdwSteerStatus_IsValid(int value);
const LdwSteerStatus LdwSteerStatus_MIN = LDW_NORMAL_STEER;
const LdwSteerStatus LdwSteerStatus_MAX = LDW_STEER_WARNING_RIGHT;
const int LdwSteerStatus_ARRAYSIZE = LdwSteerStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* LdwSteerStatus_descriptor();
inline const ::std::string& LdwSteerStatus_Name(LdwSteerStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    LdwSteerStatus_descriptor(), value);
}
inline bool LdwSteerStatus_Parse(
    const ::std::string& name, LdwSteerStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LdwSteerStatus>(
    LdwSteerStatus_descriptor(), name, value);
}
enum LdwSoftStatus {
  LDW_SOFT_DETECTION = 0,
  LDW_SOFT_SELF_LEARNING = 1,
  LDW_SOFT_MANUAL_LEARNING_MODE0 = 2,
  LDW_SOFT_MANUAL_LEARNING_MODE1 = 3
};
bool LdwSoftStatus_IsValid(int value);
const LdwSoftStatus LdwSoftStatus_MIN = LDW_SOFT_DETECTION;
const LdwSoftStatus LdwSoftStatus_MAX = LDW_SOFT_MANUAL_LEARNING_MODE1;
const int LdwSoftStatus_ARRAYSIZE = LdwSoftStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* LdwSoftStatus_descriptor();
inline const ::std::string& LdwSoftStatus_Name(LdwSoftStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    LdwSoftStatus_descriptor(), value);
}
inline bool LdwSoftStatus_Parse(
    const ::std::string& name, LdwSoftStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LdwSoftStatus>(
    LdwSoftStatus_descriptor(), name, value);
}
enum LdwWarningGrade {
  LDW_WARNING_LOW = 0,
  LDW_WARNING_NORMAL = 1,
  LDW_WARNING_HIGHT = 2
};
bool LdwWarningGrade_IsValid(int value);
const LdwWarningGrade LdwWarningGrade_MIN = LDW_WARNING_LOW;
const LdwWarningGrade LdwWarningGrade_MAX = LDW_WARNING_HIGHT;
const int LdwWarningGrade_ARRAYSIZE = LdwWarningGrade_MAX + 1;

const ::google::protobuf::EnumDescriptor* LdwWarningGrade_descriptor();
inline const ::std::string& LdwWarningGrade_Name(LdwWarningGrade value) {
  return ::google::protobuf::internal::NameOfEnum(
    LdwWarningGrade_descriptor(), value);
}
inline bool LdwWarningGrade_Parse(
    const ::std::string& name, LdwWarningGrade* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LdwWarningGrade>(
    LdwWarningGrade_descriptor(), name, value);
}
// ===================================================================

class LdwLaneBoundary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.LdwLaneBoundary) */ {
 public:
  LdwLaneBoundary();
  virtual ~LdwLaneBoundary();

  LdwLaneBoundary(const LdwLaneBoundary& from);

  inline LdwLaneBoundary& operator=(const LdwLaneBoundary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LdwLaneBoundary(LdwLaneBoundary&& from) noexcept
    : LdwLaneBoundary() {
    *this = ::std::move(from);
  }

  inline LdwLaneBoundary& operator=(LdwLaneBoundary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LdwLaneBoundary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LdwLaneBoundary* internal_default_instance() {
    return reinterpret_cast<const LdwLaneBoundary*>(
               &_LdwLaneBoundary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LdwLaneBoundary* other);
  friend void swap(LdwLaneBoundary& a, LdwLaneBoundary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LdwLaneBoundary* New() const final {
    return CreateMaybeMessage<LdwLaneBoundary>(NULL);
  }

  LdwLaneBoundary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LdwLaneBoundary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LdwLaneBoundary& from);
  void MergeFrom(const LdwLaneBoundary& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LdwLaneBoundary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double c0_position = 2;
  bool has_c0_position() const;
  void clear_c0_position();
  static const int kC0PositionFieldNumber = 2;
  double c0_position() const;
  void set_c0_position(double value);

  // optional double c1_heading_angle = 3;
  bool has_c1_heading_angle() const;
  void clear_c1_heading_angle();
  static const int kC1HeadingAngleFieldNumber = 3;
  double c1_heading_angle() const;
  void set_c1_heading_angle(double value);

  // optional double c2_curvature = 4;
  bool has_c2_curvature() const;
  void clear_c2_curvature();
  static const int kC2CurvatureFieldNumber = 4;
  double c2_curvature() const;
  void set_c2_curvature(double value);

  // optional double c3_curvature_derivative = 5;
  bool has_c3_curvature_derivative() const;
  void clear_c3_curvature_derivative();
  static const int kC3CurvatureDerivativeFieldNumber = 5;
  double c3_curvature_derivative() const;
  void set_c3_curvature_derivative(double value);

  // optional int32 degree = 1;
  bool has_degree() const;
  void clear_degree();
  static const int kDegreeFieldNumber = 1;
  ::google::protobuf::int32 degree() const;
  void set_degree(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.LdwLaneBoundary)
 private:
  void set_has_degree();
  void clear_has_degree();
  void set_has_c0_position();
  void clear_has_c0_position();
  void set_has_c1_heading_angle();
  void clear_has_c1_heading_angle();
  void set_has_c2_curvature();
  void clear_has_c2_curvature();
  void set_has_c3_curvature_derivative();
  void clear_has_c3_curvature_derivative();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double c0_position_;
  double c1_heading_angle_;
  double c2_curvature_;
  double c3_curvature_derivative_;
  ::google::protobuf::int32 degree_;
  friend struct ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LdwLane : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.LdwLane) */ {
 public:
  LdwLane();
  virtual ~LdwLane();

  LdwLane(const LdwLane& from);

  inline LdwLane& operator=(const LdwLane& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LdwLane(LdwLane&& from) noexcept
    : LdwLane() {
    *this = ::std::move(from);
  }

  inline LdwLane& operator=(LdwLane&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LdwLane& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LdwLane* internal_default_instance() {
    return reinterpret_cast<const LdwLane*>(
               &_LdwLane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LdwLane* other);
  friend void swap(LdwLane& a, LdwLane& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LdwLane* New() const final {
    return CreateMaybeMessage<LdwLane>(NULL);
  }

  LdwLane* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LdwLane>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LdwLane& from);
  void MergeFrom(const LdwLane& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LdwLane* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.drivers.LdwLaneBoundary left_boundary = 4;
  bool has_left_boundary() const;
  void clear_left_boundary();
  static const int kLeftBoundaryFieldNumber = 4;
  private:
  const ::apollo::drivers::LdwLaneBoundary& _internal_left_boundary() const;
  public:
  const ::apollo::drivers::LdwLaneBoundary& left_boundary() const;
  ::apollo::drivers::LdwLaneBoundary* release_left_boundary();
  ::apollo::drivers::LdwLaneBoundary* mutable_left_boundary();
  void set_allocated_left_boundary(::apollo::drivers::LdwLaneBoundary* left_boundary);

  // optional .apollo.drivers.LdwLaneBoundary right_boundary = 5;
  bool has_right_boundary() const;
  void clear_right_boundary();
  static const int kRightBoundaryFieldNumber = 5;
  private:
  const ::apollo::drivers::LdwLaneBoundary& _internal_right_boundary() const;
  public:
  const ::apollo::drivers::LdwLaneBoundary& right_boundary() const;
  ::apollo::drivers::LdwLaneBoundary* release_right_boundary();
  ::apollo::drivers::LdwLaneBoundary* mutable_right_boundary();
  void set_allocated_right_boundary(::apollo::drivers::LdwLaneBoundary* right_boundary);

  // optional int32 width = 1;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 quality = 2;
  bool has_quality() const;
  void clear_quality();
  static const int kQualityFieldNumber = 2;
  ::google::protobuf::int32 quality() const;
  void set_quality(::google::protobuf::int32 value);

  // optional .apollo.drivers.LdwLaneStyle style = 3;
  bool has_style() const;
  void clear_style();
  static const int kStyleFieldNumber = 3;
  ::apollo::drivers::LdwLaneStyle style() const;
  void set_style(::apollo::drivers::LdwLaneStyle value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.LdwLane)
 private:
  void set_has_width();
  void clear_has_width();
  void set_has_quality();
  void clear_has_quality();
  void set_has_style();
  void clear_has_style();
  void set_has_left_boundary();
  void clear_has_left_boundary();
  void set_has_right_boundary();
  void clear_has_right_boundary();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::drivers::LdwLaneBoundary* left_boundary_;
  ::apollo::drivers::LdwLaneBoundary* right_boundary_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 quality_;
  int style_;
  friend struct ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LdwRoadway : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.LdwRoadway) */ {
 public:
  LdwRoadway();
  virtual ~LdwRoadway();

  LdwRoadway(const LdwRoadway& from);

  inline LdwRoadway& operator=(const LdwRoadway& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LdwRoadway(LdwRoadway&& from) noexcept
    : LdwRoadway() {
    *this = ::std::move(from);
  }

  inline LdwRoadway& operator=(LdwRoadway&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LdwRoadway& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LdwRoadway* internal_default_instance() {
    return reinterpret_cast<const LdwRoadway*>(
               &_LdwRoadway_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LdwRoadway* other);
  friend void swap(LdwRoadway& a, LdwRoadway& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LdwRoadway* New() const final {
    return CreateMaybeMessage<LdwRoadway>(NULL);
  }

  LdwRoadway* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LdwRoadway>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LdwRoadway& from);
  void MergeFrom(const LdwRoadway& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LdwRoadway* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.drivers.LdwLane left_lane = 5;
  bool has_left_lane() const;
  void clear_left_lane();
  static const int kLeftLaneFieldNumber = 5;
  private:
  const ::apollo::drivers::LdwLane& _internal_left_lane() const;
  public:
  const ::apollo::drivers::LdwLane& left_lane() const;
  ::apollo::drivers::LdwLane* release_left_lane();
  ::apollo::drivers::LdwLane* mutable_left_lane();
  void set_allocated_left_lane(::apollo::drivers::LdwLane* left_lane);

  // optional .apollo.drivers.LdwLane right_lane = 6;
  bool has_right_lane() const;
  void clear_right_lane();
  static const int kRightLaneFieldNumber = 6;
  private:
  const ::apollo::drivers::LdwLane& _internal_right_lane() const;
  public:
  const ::apollo::drivers::LdwLane& right_lane() const;
  ::apollo::drivers::LdwLane* release_right_lane();
  ::apollo::drivers::LdwLane* mutable_right_lane();
  void set_allocated_right_lane(::apollo::drivers::LdwLane* right_lane);

  // optional .apollo.drivers.LdwLane adj_left_lane = 7;
  bool has_adj_left_lane() const;
  void clear_adj_left_lane();
  static const int kAdjLeftLaneFieldNumber = 7;
  private:
  const ::apollo::drivers::LdwLane& _internal_adj_left_lane() const;
  public:
  const ::apollo::drivers::LdwLane& adj_left_lane() const;
  ::apollo::drivers::LdwLane* release_adj_left_lane();
  ::apollo::drivers::LdwLane* mutable_adj_left_lane();
  void set_allocated_adj_left_lane(::apollo::drivers::LdwLane* adj_left_lane);

  // optional .apollo.drivers.LdwLane adj_right_lane = 8;
  bool has_adj_right_lane() const;
  void clear_adj_right_lane();
  static const int kAdjRightLaneFieldNumber = 8;
  private:
  const ::apollo::drivers::LdwLane& _internal_adj_right_lane() const;
  public:
  const ::apollo::drivers::LdwLane& adj_right_lane() const;
  ::apollo::drivers::LdwLane* release_adj_right_lane();
  ::apollo::drivers::LdwLane* mutable_adj_right_lane();
  void set_allocated_adj_right_lane(::apollo::drivers::LdwLane* adj_right_lane);

  // optional int32 width_0 = 1;
  bool has_width_0() const;
  void clear_width_0();
  static const int kWidth0FieldNumber = 1;
  ::google::protobuf::int32 width_0() const;
  void set_width_0(::google::protobuf::int32 value);

  // optional int32 width_1 = 2;
  bool has_width_1() const;
  void clear_width_1();
  static const int kWidth1FieldNumber = 2;
  ::google::protobuf::int32 width_1() const;
  void set_width_1(::google::protobuf::int32 value);

  // optional int32 width_2 = 3;
  bool has_width_2() const;
  void clear_width_2();
  static const int kWidth2FieldNumber = 3;
  ::google::protobuf::int32 width_2() const;
  void set_width_2(::google::protobuf::int32 value);

  // optional bool is_tracking = 4;
  bool has_is_tracking() const;
  void clear_is_tracking();
  static const int kIsTrackingFieldNumber = 4;
  bool is_tracking() const;
  void set_is_tracking(bool value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.LdwRoadway)
 private:
  void set_has_width_0();
  void clear_has_width_0();
  void set_has_width_1();
  void clear_has_width_1();
  void set_has_width_2();
  void clear_has_width_2();
  void set_has_is_tracking();
  void clear_has_is_tracking();
  void set_has_left_lane();
  void clear_has_left_lane();
  void set_has_right_lane();
  void clear_has_right_lane();
  void set_has_adj_left_lane();
  void clear_has_adj_left_lane();
  void set_has_adj_right_lane();
  void clear_has_adj_right_lane();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::drivers::LdwLane* left_lane_;
  ::apollo::drivers::LdwLane* right_lane_;
  ::apollo::drivers::LdwLane* adj_left_lane_;
  ::apollo::drivers::LdwLane* adj_right_lane_;
  ::google::protobuf::int32 width_0_;
  ::google::protobuf::int32 width_1_;
  ::google::protobuf::int32 width_2_;
  bool is_tracking_;
  friend struct ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LdwLensInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.LdwLensInfo) */ {
 public:
  LdwLensInfo();
  virtual ~LdwLensInfo();

  LdwLensInfo(const LdwLensInfo& from);

  inline LdwLensInfo& operator=(const LdwLensInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LdwLensInfo(LdwLensInfo&& from) noexcept
    : LdwLensInfo() {
    *this = ::std::move(from);
  }

  inline LdwLensInfo& operator=(LdwLensInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LdwLensInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LdwLensInfo* internal_default_instance() {
    return reinterpret_cast<const LdwLensInfo*>(
               &_LdwLensInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LdwLensInfo* other);
  friend void swap(LdwLensInfo& a, LdwLensInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LdwLensInfo* New() const final {
    return CreateMaybeMessage<LdwLensInfo>(NULL);
  }

  LdwLensInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LdwLensInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LdwLensInfo& from);
  void MergeFrom(const LdwLensInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LdwLensInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x_image_focal = 1;
  bool has_x_image_focal() const;
  void clear_x_image_focal();
  static const int kXImageFocalFieldNumber = 1;
  float x_image_focal() const;
  void set_x_image_focal(float value);

  // optional float y_image_focal = 2;
  bool has_y_image_focal() const;
  void clear_y_image_focal();
  static const int kYImageFocalFieldNumber = 2;
  float y_image_focal() const;
  void set_y_image_focal(float value);

  // optional float xratio_focal_pixel = 3;
  bool has_xratio_focal_pixel() const;
  void clear_xratio_focal_pixel();
  static const int kXratioFocalPixelFieldNumber = 3;
  float xratio_focal_pixel() const;
  void set_xratio_focal_pixel(float value);

  // optional float yratio_focal_pixel = 4;
  bool has_yratio_focal_pixel() const;
  void clear_yratio_focal_pixel();
  static const int kYratioFocalPixelFieldNumber = 4;
  float yratio_focal_pixel() const;
  void set_yratio_focal_pixel(float value);

  // optional float mountingheight = 5;
  bool has_mountingheight() const;
  void clear_mountingheight();
  static const int kMountingheightFieldNumber = 5;
  float mountingheight() const;
  void set_mountingheight(float value);

  // optional float mcosrx = 6;
  bool has_mcosrx() const;
  void clear_mcosrx();
  static const int kMcosrxFieldNumber = 6;
  float mcosrx() const;
  void set_mcosrx(float value);

  // optional float msinrx = 7;
  bool has_msinrx() const;
  void clear_msinrx();
  static const int kMsinrxFieldNumber = 7;
  float msinrx() const;
  void set_msinrx(float value);

  // optional float mcosry = 8;
  bool has_mcosry() const;
  void clear_mcosry();
  static const int kMcosryFieldNumber = 8;
  float mcosry() const;
  void set_mcosry(float value);

  // optional float msinry = 9;
  bool has_msinry() const;
  void clear_msinry();
  static const int kMsinryFieldNumber = 9;
  float msinry() const;
  void set_msinry(float value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.LdwLensInfo)
 private:
  void set_has_x_image_focal();
  void clear_has_x_image_focal();
  void set_has_y_image_focal();
  void clear_has_y_image_focal();
  void set_has_xratio_focal_pixel();
  void clear_has_xratio_focal_pixel();
  void set_has_yratio_focal_pixel();
  void clear_has_yratio_focal_pixel();
  void set_has_mountingheight();
  void clear_has_mountingheight();
  void set_has_mcosrx();
  void clear_has_mcosrx();
  void set_has_msinrx();
  void clear_has_msinrx();
  void set_has_mcosry();
  void clear_has_mcosry();
  void set_has_msinry();
  void clear_has_msinry();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float x_image_focal_;
  float y_image_focal_;
  float xratio_focal_pixel_;
  float yratio_focal_pixel_;
  float mountingheight_;
  float mcosrx_;
  float msinrx_;
  float mcosry_;
  float msinry_;
  friend struct ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LdwDataPacks : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.LdwDataPacks) */ {
 public:
  LdwDataPacks();
  virtual ~LdwDataPacks();

  LdwDataPacks(const LdwDataPacks& from);

  inline LdwDataPacks& operator=(const LdwDataPacks& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LdwDataPacks(LdwDataPacks&& from) noexcept
    : LdwDataPacks() {
    *this = ::std::move(from);
  }

  inline LdwDataPacks& operator=(LdwDataPacks&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LdwDataPacks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LdwDataPacks* internal_default_instance() {
    return reinterpret_cast<const LdwDataPacks*>(
               &_LdwDataPacks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LdwDataPacks* other);
  friend void swap(LdwDataPacks& a, LdwDataPacks& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LdwDataPacks* New() const final {
    return CreateMaybeMessage<LdwDataPacks>(NULL);
  }

  LdwDataPacks* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LdwDataPacks>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LdwDataPacks& from);
  void MergeFrom(const LdwDataPacks& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LdwDataPacks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.drivers.LdwRoadway roadway = 1;
  bool has_roadway() const;
  void clear_roadway();
  static const int kRoadwayFieldNumber = 1;
  private:
  const ::apollo::drivers::LdwRoadway& _internal_roadway() const;
  public:
  const ::apollo::drivers::LdwRoadway& roadway() const;
  ::apollo::drivers::LdwRoadway* release_roadway();
  ::apollo::drivers::LdwRoadway* mutable_roadway();
  void set_allocated_roadway(::apollo::drivers::LdwRoadway* roadway);

  // optional .apollo.drivers.LdwLensInfo lens = 4;
  bool has_lens() const;
  void clear_lens();
  static const int kLensFieldNumber = 4;
  private:
  const ::apollo::drivers::LdwLensInfo& _internal_lens() const;
  public:
  const ::apollo::drivers::LdwLensInfo& lens() const;
  ::apollo::drivers::LdwLensInfo* release_lens();
  ::apollo::drivers::LdwLensInfo* mutable_lens();
  void set_allocated_lens(::apollo::drivers::LdwLensInfo* lens);

  // optional .apollo.drivers.LdwSoftStatus softstatus = 2;
  bool has_softstatus() const;
  void clear_softstatus();
  static const int kSoftstatusFieldNumber = 2;
  ::apollo::drivers::LdwSoftStatus softstatus() const;
  void set_softstatus(::apollo::drivers::LdwSoftStatus value);

  // optional .apollo.drivers.LdwSteerStatus steerstatus = 3;
  bool has_steerstatus() const;
  void clear_steerstatus();
  static const int kSteerstatusFieldNumber = 3;
  ::apollo::drivers::LdwSteerStatus steerstatus() const;
  void set_steerstatus(::apollo::drivers::LdwSteerStatus value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.LdwDataPacks)
 private:
  void set_has_roadway();
  void clear_has_roadway();
  void set_has_softstatus();
  void clear_has_softstatus();
  void set_has_steerstatus();
  void clear_has_steerstatus();
  void set_has_lens();
  void clear_has_lens();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::drivers::LdwRoadway* roadway_;
  ::apollo::drivers::LdwLensInfo* lens_;
  int softstatus_;
  int steerstatus_;
  friend struct ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OutputObstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.OutputObstacle) */ {
 public:
  OutputObstacle();
  virtual ~OutputObstacle();

  OutputObstacle(const OutputObstacle& from);

  inline OutputObstacle& operator=(const OutputObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OutputObstacle(OutputObstacle&& from) noexcept
    : OutputObstacle() {
    *this = ::std::move(from);
  }

  inline OutputObstacle& operator=(OutputObstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OutputObstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputObstacle* internal_default_instance() {
    return reinterpret_cast<const OutputObstacle*>(
               &_OutputObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(OutputObstacle* other);
  friend void swap(OutputObstacle& a, OutputObstacle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OutputObstacle* New() const final {
    return CreateMaybeMessage<OutputObstacle>(NULL);
  }

  OutputObstacle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OutputObstacle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OutputObstacle& from);
  void MergeFrom(const OutputObstacle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OutputObstacle_RecognitionType RecognitionType;
  static const RecognitionType INVALID =
    OutputObstacle_RecognitionType_INVALID;
  static const RecognitionType VEHICLE =
    OutputObstacle_RecognitionType_VEHICLE;
  static const RecognitionType PEDESTRIAN =
    OutputObstacle_RecognitionType_PEDESTRIAN;
  static const RecognitionType CHILD =
    OutputObstacle_RecognitionType_CHILD;
  static const RecognitionType BICYCLE =
    OutputObstacle_RecognitionType_BICYCLE;
  static const RecognitionType MOTO =
    OutputObstacle_RecognitionType_MOTO;
  static const RecognitionType TRUCK =
    OutputObstacle_RecognitionType_TRUCK;
  static const RecognitionType BUS =
    OutputObstacle_RecognitionType_BUS;
  static const RecognitionType OTHERS =
    OutputObstacle_RecognitionType_OTHERS;
  static const RecognitionType ESTIMATED =
    OutputObstacle_RecognitionType_ESTIMATED;
  static const RecognitionType CONTINUOUS =
    OutputObstacle_RecognitionType_CONTINUOUS;
  static inline bool RecognitionType_IsValid(int value) {
    return OutputObstacle_RecognitionType_IsValid(value);
  }
  static const RecognitionType RecognitionType_MIN =
    OutputObstacle_RecognitionType_RecognitionType_MIN;
  static const RecognitionType RecognitionType_MAX =
    OutputObstacle_RecognitionType_RecognitionType_MAX;
  static const int RecognitionType_ARRAYSIZE =
    OutputObstacle_RecognitionType_RecognitionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RecognitionType_descriptor() {
    return OutputObstacle_RecognitionType_descriptor();
  }
  static inline const ::std::string& RecognitionType_Name(RecognitionType value) {
    return OutputObstacle_RecognitionType_Name(value);
  }
  static inline bool RecognitionType_Parse(const ::std::string& name,
      RecognitionType* value) {
    return OutputObstacle_RecognitionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional float currentspeed = 1;
  bool has_currentspeed() const;
  void clear_currentspeed();
  static const int kCurrentspeedFieldNumber = 1;
  float currentspeed() const;
  void set_currentspeed(float value);

  // optional float framerate = 2;
  bool has_framerate() const;
  void clear_framerate();
  static const int kFramerateFieldNumber = 2;
  float framerate() const;
  void set_framerate(float value);

  // optional uint32 trackid = 3;
  bool has_trackid() const;
  void clear_trackid();
  static const int kTrackidFieldNumber = 3;
  ::google::protobuf::uint32 trackid() const;
  void set_trackid(::google::protobuf::uint32 value);

  // optional uint32 trackframenum = 4;
  bool has_trackframenum() const;
  void clear_trackframenum();
  static const int kTrackframenumFieldNumber = 4;
  ::google::protobuf::uint32 trackframenum() const;
  void set_trackframenum(::google::protobuf::uint32 value);

  // optional uint32 statelabel = 5;
  bool has_statelabel() const;
  void clear_statelabel();
  static const int kStatelabelFieldNumber = 5;
  ::google::protobuf::uint32 statelabel() const;
  void set_statelabel(::google::protobuf::uint32 value);

  // optional uint32 classlabel = 6;
  bool has_classlabel() const;
  void clear_classlabel();
  static const int kClasslabelFieldNumber = 6;
  ::google::protobuf::uint32 classlabel() const;
  void set_classlabel(::google::protobuf::uint32 value);

  // optional uint32 continuouslabel = 7;
  bool has_continuouslabel() const;
  void clear_continuouslabel();
  static const int kContinuouslabelFieldNumber = 7;
  ::google::protobuf::uint32 continuouslabel() const;
  void set_continuouslabel(::google::protobuf::uint32 value);

  // optional uint32 fuzzyestimationvalid = 8;
  bool has_fuzzyestimationvalid() const;
  void clear_fuzzyestimationvalid();
  static const int kFuzzyestimationvalidFieldNumber = 8;
  ::google::protobuf::uint32 fuzzyestimationvalid() const;
  void set_fuzzyestimationvalid(::google::protobuf::uint32 value);

  // optional .apollo.drivers.OutputObstacle.RecognitionType obstacletype = 9;
  bool has_obstacletype() const;
  void clear_obstacletype();
  static const int kObstacletypeFieldNumber = 9;
  ::apollo::drivers::OutputObstacle_RecognitionType obstacletype() const;
  void set_obstacletype(::apollo::drivers::OutputObstacle_RecognitionType value);

  // optional float avgdisp = 10;
  bool has_avgdisp() const;
  void clear_avgdisp();
  static const int kAvgdispFieldNumber = 10;
  float avgdisp() const;
  void set_avgdisp(float value);

  // optional float avgdistancez = 11;
  bool has_avgdistancez() const;
  void clear_avgdistancez();
  static const int kAvgdistancezFieldNumber = 11;
  float avgdistancez() const;
  void set_avgdistancez(float value);

  // optional float neardistancez = 12;
  bool has_neardistancez() const;
  void clear_neardistancez();
  static const int kNeardistancezFieldNumber = 12;
  float neardistancez() const;
  void set_neardistancez(float value);

  // optional float fardistancez = 13;
  bool has_fardistancez() const;
  void clear_fardistancez();
  static const int kFardistancezFieldNumber = 13;
  float fardistancez() const;
  void set_fardistancez(float value);

  // optional float real3dleftx = 14;
  bool has_real3dleftx() const;
  void clear_real3dleftx();
  static const int kReal3DleftxFieldNumber = 14;
  float real3dleftx() const;
  void set_real3dleftx(float value);

  // optional float real3drightx = 15;
  bool has_real3drightx() const;
  void clear_real3drightx();
  static const int kReal3DrightxFieldNumber = 15;
  float real3drightx() const;
  void set_real3drightx(float value);

  // optional float real3dcenterx = 16;
  bool has_real3dcenterx() const;
  void clear_real3dcenterx();
  static const int kReal3DcenterxFieldNumber = 16;
  float real3dcenterx() const;
  void set_real3dcenterx(float value);

  // optional float real3dupy = 17;
  bool has_real3dupy() const;
  void clear_real3dupy();
  static const int kReal3DupyFieldNumber = 17;
  float real3dupy() const;
  void set_real3dupy(float value);

  // optional float real3dlowy = 18;
  bool has_real3dlowy() const;
  void clear_real3dlowy();
  static const int kReal3DlowyFieldNumber = 18;
  float real3dlowy() const;
  void set_real3dlowy(float value);

  // optional uint32 firstpointx = 19;
  bool has_firstpointx() const;
  void clear_firstpointx();
  static const int kFirstpointxFieldNumber = 19;
  ::google::protobuf::uint32 firstpointx() const;
  void set_firstpointx(::google::protobuf::uint32 value);

  // optional uint32 firstpointy = 20;
  bool has_firstpointy() const;
  void clear_firstpointy();
  static const int kFirstpointyFieldNumber = 20;
  ::google::protobuf::uint32 firstpointy() const;
  void set_firstpointy(::google::protobuf::uint32 value);

  // optional uint32 secondpointx = 21;
  bool has_secondpointx() const;
  void clear_secondpointx();
  static const int kSecondpointxFieldNumber = 21;
  ::google::protobuf::uint32 secondpointx() const;
  void set_secondpointx(::google::protobuf::uint32 value);

  // optional uint32 secondpointy = 22;
  bool has_secondpointy() const;
  void clear_secondpointy();
  static const int kSecondpointyFieldNumber = 22;
  ::google::protobuf::uint32 secondpointy() const;
  void set_secondpointy(::google::protobuf::uint32 value);

  // optional uint32 thirdpointx = 23;
  bool has_thirdpointx() const;
  void clear_thirdpointx();
  static const int kThirdpointxFieldNumber = 23;
  ::google::protobuf::uint32 thirdpointx() const;
  void set_thirdpointx(::google::protobuf::uint32 value);

  // optional uint32 thirdpointy = 24;
  bool has_thirdpointy() const;
  void clear_thirdpointy();
  static const int kThirdpointyFieldNumber = 24;
  ::google::protobuf::uint32 thirdpointy() const;
  void set_thirdpointy(::google::protobuf::uint32 value);

  // optional uint32 fourthpointx = 25;
  bool has_fourthpointx() const;
  void clear_fourthpointx();
  static const int kFourthpointxFieldNumber = 25;
  ::google::protobuf::uint32 fourthpointx() const;
  void set_fourthpointx(::google::protobuf::uint32 value);

  // optional uint32 fourthpointy = 26;
  bool has_fourthpointy() const;
  void clear_fourthpointy();
  static const int kFourthpointyFieldNumber = 26;
  ::google::protobuf::uint32 fourthpointy() const;
  void set_fourthpointy(::google::protobuf::uint32 value);

  // optional float fuzzyrelativedistancez = 27;
  bool has_fuzzyrelativedistancez() const;
  void clear_fuzzyrelativedistancez();
  static const int kFuzzyrelativedistancezFieldNumber = 27;
  float fuzzyrelativedistancez() const;
  void set_fuzzyrelativedistancez(float value);

  // optional float fuzzyrelativespeedz = 28;
  bool has_fuzzyrelativespeedz() const;
  void clear_fuzzyrelativespeedz();
  static const int kFuzzyrelativespeedzFieldNumber = 28;
  float fuzzyrelativespeedz() const;
  void set_fuzzyrelativespeedz(float value);

  // optional float fuzzycollisiontimez = 29;
  bool has_fuzzycollisiontimez() const;
  void clear_fuzzycollisiontimez();
  static const int kFuzzycollisiontimezFieldNumber = 29;
  float fuzzycollisiontimez() const;
  void set_fuzzycollisiontimez(float value);

  // optional uint32 fuzzycollisionx = 30;
  bool has_fuzzycollisionx() const;
  void clear_fuzzycollisionx();
  static const int kFuzzycollisionxFieldNumber = 30;
  ::google::protobuf::uint32 fuzzycollisionx() const;
  void set_fuzzycollisionx(::google::protobuf::uint32 value);

  // optional float fuzzy3dwidth = 31;
  bool has_fuzzy3dwidth() const;
  void clear_fuzzy3dwidth();
  static const int kFuzzy3DwidthFieldNumber = 31;
  float fuzzy3dwidth() const;
  void set_fuzzy3dwidth(float value);

  // optional float fuzzy3dcenterx = 32;
  bool has_fuzzy3dcenterx() const;
  void clear_fuzzy3dcenterx();
  static const int kFuzzy3DcenterxFieldNumber = 32;
  float fuzzy3dcenterx() const;
  void set_fuzzy3dcenterx(float value);

  // optional float fuzzy3dleftx = 33;
  bool has_fuzzy3dleftx() const;
  void clear_fuzzy3dleftx();
  static const int kFuzzy3DleftxFieldNumber = 33;
  float fuzzy3dleftx() const;
  void set_fuzzy3dleftx(float value);

  // optional float fuzzy3drightx = 34;
  bool has_fuzzy3drightx() const;
  void clear_fuzzy3drightx();
  static const int kFuzzy3DrightxFieldNumber = 34;
  float fuzzy3drightx() const;
  void set_fuzzy3drightx(float value);

  // optional float fuzzy3dheight = 35;
  bool has_fuzzy3dheight() const;
  void clear_fuzzy3dheight();
  static const int kFuzzy3DheightFieldNumber = 35;
  float fuzzy3dheight() const;
  void set_fuzzy3dheight(float value);

  // optional float fuzzy3dupy = 36;
  bool has_fuzzy3dupy() const;
  void clear_fuzzy3dupy();
  static const int kFuzzy3DupyFieldNumber = 36;
  float fuzzy3dupy() const;
  void set_fuzzy3dupy(float value);

  // optional float fuzzy3dlowy = 37;
  bool has_fuzzy3dlowy() const;
  void clear_fuzzy3dlowy();
  static const int kFuzzy3DlowyFieldNumber = 37;
  float fuzzy3dlowy() const;
  void set_fuzzy3dlowy(float value);

  // optional float fuzzyrelativespeedcenterx = 38;
  bool has_fuzzyrelativespeedcenterx() const;
  void clear_fuzzyrelativespeedcenterx();
  static const int kFuzzyrelativespeedcenterxFieldNumber = 38;
  float fuzzyrelativespeedcenterx() const;
  void set_fuzzyrelativespeedcenterx(float value);

  // optional float fuzzyrelativespeedleftx = 39;
  bool has_fuzzyrelativespeedleftx() const;
  void clear_fuzzyrelativespeedleftx();
  static const int kFuzzyrelativespeedleftxFieldNumber = 39;
  float fuzzyrelativespeedleftx() const;
  void set_fuzzyrelativespeedleftx(float value);

  // optional float fuzzyrelativespeedrightx = 40;
  bool has_fuzzyrelativespeedrightx() const;
  void clear_fuzzyrelativespeedrightx();
  static const int kFuzzyrelativespeedrightxFieldNumber = 40;
  float fuzzyrelativespeedrightx() const;
  void set_fuzzyrelativespeedrightx(float value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.OutputObstacle)
 private:
  void set_has_currentspeed();
  void clear_has_currentspeed();
  void set_has_framerate();
  void clear_has_framerate();
  void set_has_trackid();
  void clear_has_trackid();
  void set_has_trackframenum();
  void clear_has_trackframenum();
  void set_has_statelabel();
  void clear_has_statelabel();
  void set_has_classlabel();
  void clear_has_classlabel();
  void set_has_continuouslabel();
  void clear_has_continuouslabel();
  void set_has_fuzzyestimationvalid();
  void clear_has_fuzzyestimationvalid();
  void set_has_obstacletype();
  void clear_has_obstacletype();
  void set_has_avgdisp();
  void clear_has_avgdisp();
  void set_has_avgdistancez();
  void clear_has_avgdistancez();
  void set_has_neardistancez();
  void clear_has_neardistancez();
  void set_has_fardistancez();
  void clear_has_fardistancez();
  void set_has_real3dleftx();
  void clear_has_real3dleftx();
  void set_has_real3drightx();
  void clear_has_real3drightx();
  void set_has_real3dcenterx();
  void clear_has_real3dcenterx();
  void set_has_real3dupy();
  void clear_has_real3dupy();
  void set_has_real3dlowy();
  void clear_has_real3dlowy();
  void set_has_firstpointx();
  void clear_has_firstpointx();
  void set_has_firstpointy();
  void clear_has_firstpointy();
  void set_has_secondpointx();
  void clear_has_secondpointx();
  void set_has_secondpointy();
  void clear_has_secondpointy();
  void set_has_thirdpointx();
  void clear_has_thirdpointx();
  void set_has_thirdpointy();
  void clear_has_thirdpointy();
  void set_has_fourthpointx();
  void clear_has_fourthpointx();
  void set_has_fourthpointy();
  void clear_has_fourthpointy();
  void set_has_fuzzyrelativedistancez();
  void clear_has_fuzzyrelativedistancez();
  void set_has_fuzzyrelativespeedz();
  void clear_has_fuzzyrelativespeedz();
  void set_has_fuzzycollisiontimez();
  void clear_has_fuzzycollisiontimez();
  void set_has_fuzzycollisionx();
  void clear_has_fuzzycollisionx();
  void set_has_fuzzy3dwidth();
  void clear_has_fuzzy3dwidth();
  void set_has_fuzzy3dcenterx();
  void clear_has_fuzzy3dcenterx();
  void set_has_fuzzy3dleftx();
  void clear_has_fuzzy3dleftx();
  void set_has_fuzzy3drightx();
  void clear_has_fuzzy3drightx();
  void set_has_fuzzy3dheight();
  void clear_has_fuzzy3dheight();
  void set_has_fuzzy3dupy();
  void clear_has_fuzzy3dupy();
  void set_has_fuzzy3dlowy();
  void clear_has_fuzzy3dlowy();
  void set_has_fuzzyrelativespeedcenterx();
  void clear_has_fuzzyrelativespeedcenterx();
  void set_has_fuzzyrelativespeedleftx();
  void clear_has_fuzzyrelativespeedleftx();
  void set_has_fuzzyrelativespeedrightx();
  void clear_has_fuzzyrelativespeedrightx();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  float currentspeed_;
  float framerate_;
  ::google::protobuf::uint32 trackid_;
  ::google::protobuf::uint32 trackframenum_;
  ::google::protobuf::uint32 statelabel_;
  ::google::protobuf::uint32 classlabel_;
  ::google::protobuf::uint32 continuouslabel_;
  ::google::protobuf::uint32 fuzzyestimationvalid_;
  int obstacletype_;
  float avgdisp_;
  float avgdistancez_;
  float neardistancez_;
  float fardistancez_;
  float real3dleftx_;
  float real3drightx_;
  float real3dcenterx_;
  float real3dupy_;
  float real3dlowy_;
  ::google::protobuf::uint32 firstpointx_;
  ::google::protobuf::uint32 firstpointy_;
  ::google::protobuf::uint32 secondpointx_;
  ::google::protobuf::uint32 secondpointy_;
  ::google::protobuf::uint32 thirdpointx_;
  ::google::protobuf::uint32 thirdpointy_;
  ::google::protobuf::uint32 fourthpointx_;
  ::google::protobuf::uint32 fourthpointy_;
  float fuzzyrelativedistancez_;
  float fuzzyrelativespeedz_;
  float fuzzycollisiontimez_;
  ::google::protobuf::uint32 fuzzycollisionx_;
  float fuzzy3dwidth_;
  float fuzzy3dcenterx_;
  float fuzzy3dleftx_;
  float fuzzy3drightx_;
  float fuzzy3dheight_;
  float fuzzy3dupy_;
  float fuzzy3dlowy_;
  float fuzzyrelativespeedcenterx_;
  float fuzzyrelativespeedleftx_;
  float fuzzyrelativespeedrightx_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SmartereyeObstacles_OutputObstaclesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SmartereyeObstacles_OutputObstaclesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::apollo::drivers::OutputObstacle,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SmartereyeObstacles_OutputObstaclesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::apollo::drivers::OutputObstacle,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SmartereyeObstacles_OutputObstaclesEntry_DoNotUse();
  SmartereyeObstacles_OutputObstaclesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SmartereyeObstacles_OutputObstaclesEntry_DoNotUse& other);
  static const SmartereyeObstacles_OutputObstaclesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SmartereyeObstacles_OutputObstaclesEntry_DoNotUse*>(&_SmartereyeObstacles_OutputObstaclesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SmartereyeObstacles : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.SmartereyeObstacles) */ {
 public:
  SmartereyeObstacles();
  virtual ~SmartereyeObstacles();

  SmartereyeObstacles(const SmartereyeObstacles& from);

  inline SmartereyeObstacles& operator=(const SmartereyeObstacles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SmartereyeObstacles(SmartereyeObstacles&& from) noexcept
    : SmartereyeObstacles() {
    *this = ::std::move(from);
  }

  inline SmartereyeObstacles& operator=(SmartereyeObstacles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmartereyeObstacles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmartereyeObstacles* internal_default_instance() {
    return reinterpret_cast<const SmartereyeObstacles*>(
               &_SmartereyeObstacles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(SmartereyeObstacles* other);
  friend void swap(SmartereyeObstacles& a, SmartereyeObstacles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SmartereyeObstacles* New() const final {
    return CreateMaybeMessage<SmartereyeObstacles>(NULL);
  }

  SmartereyeObstacles* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SmartereyeObstacles>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SmartereyeObstacles& from);
  void MergeFrom(const SmartereyeObstacles& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmartereyeObstacles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .apollo.drivers.OutputObstacle> output_obstacles = 3;
  int output_obstacles_size() const;
  void clear_output_obstacles();
  static const int kOutputObstaclesFieldNumber = 3;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::apollo::drivers::OutputObstacle >&
      output_obstacles() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::apollo::drivers::OutputObstacle >*
      mutable_output_obstacles();

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::apollo::common::Header& _internal_header() const;
  public:
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional int32 num_obstacles = 2;
  bool has_num_obstacles() const;
  void clear_num_obstacles();
  static const int kNumObstaclesFieldNumber = 2;
  ::google::protobuf::int32 num_obstacles() const;
  void set_num_obstacles(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.SmartereyeObstacles)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_num_obstacles();
  void clear_has_num_obstacles();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::MapField<
      SmartereyeObstacles_OutputObstaclesEntry_DoNotUse,
      ::google::protobuf::uint32, ::apollo::drivers::OutputObstacle,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > output_obstacles_;
  ::apollo::common::Header* header_;
  ::google::protobuf::int32 num_obstacles_;
  friend struct ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SmartereyeLanemark : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.SmartereyeLanemark) */ {
 public:
  SmartereyeLanemark();
  virtual ~SmartereyeLanemark();

  SmartereyeLanemark(const SmartereyeLanemark& from);

  inline SmartereyeLanemark& operator=(const SmartereyeLanemark& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SmartereyeLanemark(SmartereyeLanemark&& from) noexcept
    : SmartereyeLanemark() {
    *this = ::std::move(from);
  }

  inline SmartereyeLanemark& operator=(SmartereyeLanemark&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmartereyeLanemark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmartereyeLanemark* internal_default_instance() {
    return reinterpret_cast<const SmartereyeLanemark*>(
               &_SmartereyeLanemark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SmartereyeLanemark* other);
  friend void swap(SmartereyeLanemark& a, SmartereyeLanemark& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SmartereyeLanemark* New() const final {
    return CreateMaybeMessage<SmartereyeLanemark>(NULL);
  }

  SmartereyeLanemark* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SmartereyeLanemark>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SmartereyeLanemark& from);
  void MergeFrom(const SmartereyeLanemark& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmartereyeLanemark* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.drivers.LdwDataPacks lane_road_data = 4;
  bool has_lane_road_data() const;
  void clear_lane_road_data();
  static const int kLaneRoadDataFieldNumber = 4;
  private:
  const ::apollo::drivers::LdwDataPacks& _internal_lane_road_data() const;
  public:
  const ::apollo::drivers::LdwDataPacks& lane_road_data() const;
  ::apollo::drivers::LdwDataPacks* release_lane_road_data();
  ::apollo::drivers::LdwDataPacks* mutable_lane_road_data();
  void set_allocated_lane_road_data(::apollo::drivers::LdwDataPacks* lane_road_data);

  // @@protoc_insertion_point(class_scope:apollo.drivers.SmartereyeLanemark)
 private:
  void set_has_lane_road_data();
  void clear_has_lane_road_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::drivers::LdwDataPacks* lane_road_data_;
  friend struct ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LdwLaneBoundary

// optional int32 degree = 1;
inline bool LdwLaneBoundary::has_degree() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LdwLaneBoundary::set_has_degree() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LdwLaneBoundary::clear_has_degree() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LdwLaneBoundary::clear_degree() {
  degree_ = 0;
  clear_has_degree();
}
inline ::google::protobuf::int32 LdwLaneBoundary::degree() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwLaneBoundary.degree)
  return degree_;
}
inline void LdwLaneBoundary::set_degree(::google::protobuf::int32 value) {
  set_has_degree();
  degree_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwLaneBoundary.degree)
}

// optional double c0_position = 2;
inline bool LdwLaneBoundary::has_c0_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LdwLaneBoundary::set_has_c0_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LdwLaneBoundary::clear_has_c0_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LdwLaneBoundary::clear_c0_position() {
  c0_position_ = 0;
  clear_has_c0_position();
}
inline double LdwLaneBoundary::c0_position() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwLaneBoundary.c0_position)
  return c0_position_;
}
inline void LdwLaneBoundary::set_c0_position(double value) {
  set_has_c0_position();
  c0_position_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwLaneBoundary.c0_position)
}

// optional double c1_heading_angle = 3;
inline bool LdwLaneBoundary::has_c1_heading_angle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LdwLaneBoundary::set_has_c1_heading_angle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LdwLaneBoundary::clear_has_c1_heading_angle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LdwLaneBoundary::clear_c1_heading_angle() {
  c1_heading_angle_ = 0;
  clear_has_c1_heading_angle();
}
inline double LdwLaneBoundary::c1_heading_angle() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwLaneBoundary.c1_heading_angle)
  return c1_heading_angle_;
}
inline void LdwLaneBoundary::set_c1_heading_angle(double value) {
  set_has_c1_heading_angle();
  c1_heading_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwLaneBoundary.c1_heading_angle)
}

// optional double c2_curvature = 4;
inline bool LdwLaneBoundary::has_c2_curvature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LdwLaneBoundary::set_has_c2_curvature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LdwLaneBoundary::clear_has_c2_curvature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LdwLaneBoundary::clear_c2_curvature() {
  c2_curvature_ = 0;
  clear_has_c2_curvature();
}
inline double LdwLaneBoundary::c2_curvature() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwLaneBoundary.c2_curvature)
  return c2_curvature_;
}
inline void LdwLaneBoundary::set_c2_curvature(double value) {
  set_has_c2_curvature();
  c2_curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwLaneBoundary.c2_curvature)
}

// optional double c3_curvature_derivative = 5;
inline bool LdwLaneBoundary::has_c3_curvature_derivative() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LdwLaneBoundary::set_has_c3_curvature_derivative() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LdwLaneBoundary::clear_has_c3_curvature_derivative() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LdwLaneBoundary::clear_c3_curvature_derivative() {
  c3_curvature_derivative_ = 0;
  clear_has_c3_curvature_derivative();
}
inline double LdwLaneBoundary::c3_curvature_derivative() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwLaneBoundary.c3_curvature_derivative)
  return c3_curvature_derivative_;
}
inline void LdwLaneBoundary::set_c3_curvature_derivative(double value) {
  set_has_c3_curvature_derivative();
  c3_curvature_derivative_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwLaneBoundary.c3_curvature_derivative)
}

// -------------------------------------------------------------------

// LdwLane

// optional int32 width = 1;
inline bool LdwLane::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LdwLane::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LdwLane::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LdwLane::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 LdwLane::width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwLane.width)
  return width_;
}
inline void LdwLane::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwLane.width)
}

// optional int32 quality = 2;
inline bool LdwLane::has_quality() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LdwLane::set_has_quality() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LdwLane::clear_has_quality() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LdwLane::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 LdwLane::quality() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwLane.quality)
  return quality_;
}
inline void LdwLane::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwLane.quality)
}

// optional .apollo.drivers.LdwLaneStyle style = 3;
inline bool LdwLane::has_style() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LdwLane::set_has_style() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LdwLane::clear_has_style() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LdwLane::clear_style() {
  style_ = 0;
  clear_has_style();
}
inline ::apollo::drivers::LdwLaneStyle LdwLane::style() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwLane.style)
  return static_cast< ::apollo::drivers::LdwLaneStyle >(style_);
}
inline void LdwLane::set_style(::apollo::drivers::LdwLaneStyle value) {
  assert(::apollo::drivers::LdwLaneStyle_IsValid(value));
  set_has_style();
  style_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwLane.style)
}

// optional .apollo.drivers.LdwLaneBoundary left_boundary = 4;
inline bool LdwLane::has_left_boundary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LdwLane::set_has_left_boundary() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LdwLane::clear_has_left_boundary() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LdwLane::clear_left_boundary() {
  if (left_boundary_ != NULL) left_boundary_->Clear();
  clear_has_left_boundary();
}
inline const ::apollo::drivers::LdwLaneBoundary& LdwLane::_internal_left_boundary() const {
  return *left_boundary_;
}
inline const ::apollo::drivers::LdwLaneBoundary& LdwLane::left_boundary() const {
  const ::apollo::drivers::LdwLaneBoundary* p = left_boundary_;
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwLane.left_boundary)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::drivers::LdwLaneBoundary*>(
      &::apollo::drivers::_LdwLaneBoundary_default_instance_);
}
inline ::apollo::drivers::LdwLaneBoundary* LdwLane::release_left_boundary() {
  // @@protoc_insertion_point(field_release:apollo.drivers.LdwLane.left_boundary)
  clear_has_left_boundary();
  ::apollo::drivers::LdwLaneBoundary* temp = left_boundary_;
  left_boundary_ = NULL;
  return temp;
}
inline ::apollo::drivers::LdwLaneBoundary* LdwLane::mutable_left_boundary() {
  set_has_left_boundary();
  if (left_boundary_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::drivers::LdwLaneBoundary>(GetArenaNoVirtual());
    left_boundary_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.LdwLane.left_boundary)
  return left_boundary_;
}
inline void LdwLane::set_allocated_left_boundary(::apollo::drivers::LdwLaneBoundary* left_boundary) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete left_boundary_;
  }
  if (left_boundary) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      left_boundary = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left_boundary, submessage_arena);
    }
    set_has_left_boundary();
  } else {
    clear_has_left_boundary();
  }
  left_boundary_ = left_boundary;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.LdwLane.left_boundary)
}

// optional .apollo.drivers.LdwLaneBoundary right_boundary = 5;
inline bool LdwLane::has_right_boundary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LdwLane::set_has_right_boundary() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LdwLane::clear_has_right_boundary() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LdwLane::clear_right_boundary() {
  if (right_boundary_ != NULL) right_boundary_->Clear();
  clear_has_right_boundary();
}
inline const ::apollo::drivers::LdwLaneBoundary& LdwLane::_internal_right_boundary() const {
  return *right_boundary_;
}
inline const ::apollo::drivers::LdwLaneBoundary& LdwLane::right_boundary() const {
  const ::apollo::drivers::LdwLaneBoundary* p = right_boundary_;
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwLane.right_boundary)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::drivers::LdwLaneBoundary*>(
      &::apollo::drivers::_LdwLaneBoundary_default_instance_);
}
inline ::apollo::drivers::LdwLaneBoundary* LdwLane::release_right_boundary() {
  // @@protoc_insertion_point(field_release:apollo.drivers.LdwLane.right_boundary)
  clear_has_right_boundary();
  ::apollo::drivers::LdwLaneBoundary* temp = right_boundary_;
  right_boundary_ = NULL;
  return temp;
}
inline ::apollo::drivers::LdwLaneBoundary* LdwLane::mutable_right_boundary() {
  set_has_right_boundary();
  if (right_boundary_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::drivers::LdwLaneBoundary>(GetArenaNoVirtual());
    right_boundary_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.LdwLane.right_boundary)
  return right_boundary_;
}
inline void LdwLane::set_allocated_right_boundary(::apollo::drivers::LdwLaneBoundary* right_boundary) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete right_boundary_;
  }
  if (right_boundary) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      right_boundary = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right_boundary, submessage_arena);
    }
    set_has_right_boundary();
  } else {
    clear_has_right_boundary();
  }
  right_boundary_ = right_boundary;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.LdwLane.right_boundary)
}

// -------------------------------------------------------------------

// LdwRoadway

// optional int32 width_0 = 1;
inline bool LdwRoadway::has_width_0() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LdwRoadway::set_has_width_0() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LdwRoadway::clear_has_width_0() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LdwRoadway::clear_width_0() {
  width_0_ = 0;
  clear_has_width_0();
}
inline ::google::protobuf::int32 LdwRoadway::width_0() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwRoadway.width_0)
  return width_0_;
}
inline void LdwRoadway::set_width_0(::google::protobuf::int32 value) {
  set_has_width_0();
  width_0_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwRoadway.width_0)
}

// optional int32 width_1 = 2;
inline bool LdwRoadway::has_width_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LdwRoadway::set_has_width_1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LdwRoadway::clear_has_width_1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LdwRoadway::clear_width_1() {
  width_1_ = 0;
  clear_has_width_1();
}
inline ::google::protobuf::int32 LdwRoadway::width_1() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwRoadway.width_1)
  return width_1_;
}
inline void LdwRoadway::set_width_1(::google::protobuf::int32 value) {
  set_has_width_1();
  width_1_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwRoadway.width_1)
}

// optional int32 width_2 = 3;
inline bool LdwRoadway::has_width_2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LdwRoadway::set_has_width_2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LdwRoadway::clear_has_width_2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LdwRoadway::clear_width_2() {
  width_2_ = 0;
  clear_has_width_2();
}
inline ::google::protobuf::int32 LdwRoadway::width_2() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwRoadway.width_2)
  return width_2_;
}
inline void LdwRoadway::set_width_2(::google::protobuf::int32 value) {
  set_has_width_2();
  width_2_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwRoadway.width_2)
}

// optional bool is_tracking = 4;
inline bool LdwRoadway::has_is_tracking() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LdwRoadway::set_has_is_tracking() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LdwRoadway::clear_has_is_tracking() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LdwRoadway::clear_is_tracking() {
  is_tracking_ = false;
  clear_has_is_tracking();
}
inline bool LdwRoadway::is_tracking() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwRoadway.is_tracking)
  return is_tracking_;
}
inline void LdwRoadway::set_is_tracking(bool value) {
  set_has_is_tracking();
  is_tracking_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwRoadway.is_tracking)
}

// optional .apollo.drivers.LdwLane left_lane = 5;
inline bool LdwRoadway::has_left_lane() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LdwRoadway::set_has_left_lane() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LdwRoadway::clear_has_left_lane() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LdwRoadway::clear_left_lane() {
  if (left_lane_ != NULL) left_lane_->Clear();
  clear_has_left_lane();
}
inline const ::apollo::drivers::LdwLane& LdwRoadway::_internal_left_lane() const {
  return *left_lane_;
}
inline const ::apollo::drivers::LdwLane& LdwRoadway::left_lane() const {
  const ::apollo::drivers::LdwLane* p = left_lane_;
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwRoadway.left_lane)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::drivers::LdwLane*>(
      &::apollo::drivers::_LdwLane_default_instance_);
}
inline ::apollo::drivers::LdwLane* LdwRoadway::release_left_lane() {
  // @@protoc_insertion_point(field_release:apollo.drivers.LdwRoadway.left_lane)
  clear_has_left_lane();
  ::apollo::drivers::LdwLane* temp = left_lane_;
  left_lane_ = NULL;
  return temp;
}
inline ::apollo::drivers::LdwLane* LdwRoadway::mutable_left_lane() {
  set_has_left_lane();
  if (left_lane_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::drivers::LdwLane>(GetArenaNoVirtual());
    left_lane_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.LdwRoadway.left_lane)
  return left_lane_;
}
inline void LdwRoadway::set_allocated_left_lane(::apollo::drivers::LdwLane* left_lane) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete left_lane_;
  }
  if (left_lane) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      left_lane = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left_lane, submessage_arena);
    }
    set_has_left_lane();
  } else {
    clear_has_left_lane();
  }
  left_lane_ = left_lane;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.LdwRoadway.left_lane)
}

// optional .apollo.drivers.LdwLane right_lane = 6;
inline bool LdwRoadway::has_right_lane() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LdwRoadway::set_has_right_lane() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LdwRoadway::clear_has_right_lane() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LdwRoadway::clear_right_lane() {
  if (right_lane_ != NULL) right_lane_->Clear();
  clear_has_right_lane();
}
inline const ::apollo::drivers::LdwLane& LdwRoadway::_internal_right_lane() const {
  return *right_lane_;
}
inline const ::apollo::drivers::LdwLane& LdwRoadway::right_lane() const {
  const ::apollo::drivers::LdwLane* p = right_lane_;
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwRoadway.right_lane)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::drivers::LdwLane*>(
      &::apollo::drivers::_LdwLane_default_instance_);
}
inline ::apollo::drivers::LdwLane* LdwRoadway::release_right_lane() {
  // @@protoc_insertion_point(field_release:apollo.drivers.LdwRoadway.right_lane)
  clear_has_right_lane();
  ::apollo::drivers::LdwLane* temp = right_lane_;
  right_lane_ = NULL;
  return temp;
}
inline ::apollo::drivers::LdwLane* LdwRoadway::mutable_right_lane() {
  set_has_right_lane();
  if (right_lane_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::drivers::LdwLane>(GetArenaNoVirtual());
    right_lane_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.LdwRoadway.right_lane)
  return right_lane_;
}
inline void LdwRoadway::set_allocated_right_lane(::apollo::drivers::LdwLane* right_lane) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete right_lane_;
  }
  if (right_lane) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      right_lane = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right_lane, submessage_arena);
    }
    set_has_right_lane();
  } else {
    clear_has_right_lane();
  }
  right_lane_ = right_lane;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.LdwRoadway.right_lane)
}

// optional .apollo.drivers.LdwLane adj_left_lane = 7;
inline bool LdwRoadway::has_adj_left_lane() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LdwRoadway::set_has_adj_left_lane() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LdwRoadway::clear_has_adj_left_lane() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LdwRoadway::clear_adj_left_lane() {
  if (adj_left_lane_ != NULL) adj_left_lane_->Clear();
  clear_has_adj_left_lane();
}
inline const ::apollo::drivers::LdwLane& LdwRoadway::_internal_adj_left_lane() const {
  return *adj_left_lane_;
}
inline const ::apollo::drivers::LdwLane& LdwRoadway::adj_left_lane() const {
  const ::apollo::drivers::LdwLane* p = adj_left_lane_;
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwRoadway.adj_left_lane)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::drivers::LdwLane*>(
      &::apollo::drivers::_LdwLane_default_instance_);
}
inline ::apollo::drivers::LdwLane* LdwRoadway::release_adj_left_lane() {
  // @@protoc_insertion_point(field_release:apollo.drivers.LdwRoadway.adj_left_lane)
  clear_has_adj_left_lane();
  ::apollo::drivers::LdwLane* temp = adj_left_lane_;
  adj_left_lane_ = NULL;
  return temp;
}
inline ::apollo::drivers::LdwLane* LdwRoadway::mutable_adj_left_lane() {
  set_has_adj_left_lane();
  if (adj_left_lane_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::drivers::LdwLane>(GetArenaNoVirtual());
    adj_left_lane_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.LdwRoadway.adj_left_lane)
  return adj_left_lane_;
}
inline void LdwRoadway::set_allocated_adj_left_lane(::apollo::drivers::LdwLane* adj_left_lane) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete adj_left_lane_;
  }
  if (adj_left_lane) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      adj_left_lane = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, adj_left_lane, submessage_arena);
    }
    set_has_adj_left_lane();
  } else {
    clear_has_adj_left_lane();
  }
  adj_left_lane_ = adj_left_lane;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.LdwRoadway.adj_left_lane)
}

// optional .apollo.drivers.LdwLane adj_right_lane = 8;
inline bool LdwRoadway::has_adj_right_lane() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LdwRoadway::set_has_adj_right_lane() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LdwRoadway::clear_has_adj_right_lane() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LdwRoadway::clear_adj_right_lane() {
  if (adj_right_lane_ != NULL) adj_right_lane_->Clear();
  clear_has_adj_right_lane();
}
inline const ::apollo::drivers::LdwLane& LdwRoadway::_internal_adj_right_lane() const {
  return *adj_right_lane_;
}
inline const ::apollo::drivers::LdwLane& LdwRoadway::adj_right_lane() const {
  const ::apollo::drivers::LdwLane* p = adj_right_lane_;
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwRoadway.adj_right_lane)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::drivers::LdwLane*>(
      &::apollo::drivers::_LdwLane_default_instance_);
}
inline ::apollo::drivers::LdwLane* LdwRoadway::release_adj_right_lane() {
  // @@protoc_insertion_point(field_release:apollo.drivers.LdwRoadway.adj_right_lane)
  clear_has_adj_right_lane();
  ::apollo::drivers::LdwLane* temp = adj_right_lane_;
  adj_right_lane_ = NULL;
  return temp;
}
inline ::apollo::drivers::LdwLane* LdwRoadway::mutable_adj_right_lane() {
  set_has_adj_right_lane();
  if (adj_right_lane_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::drivers::LdwLane>(GetArenaNoVirtual());
    adj_right_lane_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.LdwRoadway.adj_right_lane)
  return adj_right_lane_;
}
inline void LdwRoadway::set_allocated_adj_right_lane(::apollo::drivers::LdwLane* adj_right_lane) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete adj_right_lane_;
  }
  if (adj_right_lane) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      adj_right_lane = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, adj_right_lane, submessage_arena);
    }
    set_has_adj_right_lane();
  } else {
    clear_has_adj_right_lane();
  }
  adj_right_lane_ = adj_right_lane;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.LdwRoadway.adj_right_lane)
}

// -------------------------------------------------------------------

// LdwLensInfo

// optional float x_image_focal = 1;
inline bool LdwLensInfo::has_x_image_focal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LdwLensInfo::set_has_x_image_focal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LdwLensInfo::clear_has_x_image_focal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LdwLensInfo::clear_x_image_focal() {
  x_image_focal_ = 0;
  clear_has_x_image_focal();
}
inline float LdwLensInfo::x_image_focal() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwLensInfo.x_image_focal)
  return x_image_focal_;
}
inline void LdwLensInfo::set_x_image_focal(float value) {
  set_has_x_image_focal();
  x_image_focal_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwLensInfo.x_image_focal)
}

// optional float y_image_focal = 2;
inline bool LdwLensInfo::has_y_image_focal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LdwLensInfo::set_has_y_image_focal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LdwLensInfo::clear_has_y_image_focal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LdwLensInfo::clear_y_image_focal() {
  y_image_focal_ = 0;
  clear_has_y_image_focal();
}
inline float LdwLensInfo::y_image_focal() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwLensInfo.y_image_focal)
  return y_image_focal_;
}
inline void LdwLensInfo::set_y_image_focal(float value) {
  set_has_y_image_focal();
  y_image_focal_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwLensInfo.y_image_focal)
}

// optional float xratio_focal_pixel = 3;
inline bool LdwLensInfo::has_xratio_focal_pixel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LdwLensInfo::set_has_xratio_focal_pixel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LdwLensInfo::clear_has_xratio_focal_pixel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LdwLensInfo::clear_xratio_focal_pixel() {
  xratio_focal_pixel_ = 0;
  clear_has_xratio_focal_pixel();
}
inline float LdwLensInfo::xratio_focal_pixel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwLensInfo.xratio_focal_pixel)
  return xratio_focal_pixel_;
}
inline void LdwLensInfo::set_xratio_focal_pixel(float value) {
  set_has_xratio_focal_pixel();
  xratio_focal_pixel_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwLensInfo.xratio_focal_pixel)
}

// optional float yratio_focal_pixel = 4;
inline bool LdwLensInfo::has_yratio_focal_pixel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LdwLensInfo::set_has_yratio_focal_pixel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LdwLensInfo::clear_has_yratio_focal_pixel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LdwLensInfo::clear_yratio_focal_pixel() {
  yratio_focal_pixel_ = 0;
  clear_has_yratio_focal_pixel();
}
inline float LdwLensInfo::yratio_focal_pixel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwLensInfo.yratio_focal_pixel)
  return yratio_focal_pixel_;
}
inline void LdwLensInfo::set_yratio_focal_pixel(float value) {
  set_has_yratio_focal_pixel();
  yratio_focal_pixel_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwLensInfo.yratio_focal_pixel)
}

// optional float mountingheight = 5;
inline bool LdwLensInfo::has_mountingheight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LdwLensInfo::set_has_mountingheight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LdwLensInfo::clear_has_mountingheight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LdwLensInfo::clear_mountingheight() {
  mountingheight_ = 0;
  clear_has_mountingheight();
}
inline float LdwLensInfo::mountingheight() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwLensInfo.mountingheight)
  return mountingheight_;
}
inline void LdwLensInfo::set_mountingheight(float value) {
  set_has_mountingheight();
  mountingheight_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwLensInfo.mountingheight)
}

// optional float mcosrx = 6;
inline bool LdwLensInfo::has_mcosrx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LdwLensInfo::set_has_mcosrx() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LdwLensInfo::clear_has_mcosrx() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LdwLensInfo::clear_mcosrx() {
  mcosrx_ = 0;
  clear_has_mcosrx();
}
inline float LdwLensInfo::mcosrx() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwLensInfo.mcosrx)
  return mcosrx_;
}
inline void LdwLensInfo::set_mcosrx(float value) {
  set_has_mcosrx();
  mcosrx_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwLensInfo.mcosrx)
}

// optional float msinrx = 7;
inline bool LdwLensInfo::has_msinrx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LdwLensInfo::set_has_msinrx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LdwLensInfo::clear_has_msinrx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LdwLensInfo::clear_msinrx() {
  msinrx_ = 0;
  clear_has_msinrx();
}
inline float LdwLensInfo::msinrx() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwLensInfo.msinrx)
  return msinrx_;
}
inline void LdwLensInfo::set_msinrx(float value) {
  set_has_msinrx();
  msinrx_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwLensInfo.msinrx)
}

// optional float mcosry = 8;
inline bool LdwLensInfo::has_mcosry() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LdwLensInfo::set_has_mcosry() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LdwLensInfo::clear_has_mcosry() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LdwLensInfo::clear_mcosry() {
  mcosry_ = 0;
  clear_has_mcosry();
}
inline float LdwLensInfo::mcosry() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwLensInfo.mcosry)
  return mcosry_;
}
inline void LdwLensInfo::set_mcosry(float value) {
  set_has_mcosry();
  mcosry_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwLensInfo.mcosry)
}

// optional float msinry = 9;
inline bool LdwLensInfo::has_msinry() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LdwLensInfo::set_has_msinry() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LdwLensInfo::clear_has_msinry() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LdwLensInfo::clear_msinry() {
  msinry_ = 0;
  clear_has_msinry();
}
inline float LdwLensInfo::msinry() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwLensInfo.msinry)
  return msinry_;
}
inline void LdwLensInfo::set_msinry(float value) {
  set_has_msinry();
  msinry_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwLensInfo.msinry)
}

// -------------------------------------------------------------------

// LdwDataPacks

// optional .apollo.drivers.LdwRoadway roadway = 1;
inline bool LdwDataPacks::has_roadway() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LdwDataPacks::set_has_roadway() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LdwDataPacks::clear_has_roadway() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LdwDataPacks::clear_roadway() {
  if (roadway_ != NULL) roadway_->Clear();
  clear_has_roadway();
}
inline const ::apollo::drivers::LdwRoadway& LdwDataPacks::_internal_roadway() const {
  return *roadway_;
}
inline const ::apollo::drivers::LdwRoadway& LdwDataPacks::roadway() const {
  const ::apollo::drivers::LdwRoadway* p = roadway_;
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwDataPacks.roadway)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::drivers::LdwRoadway*>(
      &::apollo::drivers::_LdwRoadway_default_instance_);
}
inline ::apollo::drivers::LdwRoadway* LdwDataPacks::release_roadway() {
  // @@protoc_insertion_point(field_release:apollo.drivers.LdwDataPacks.roadway)
  clear_has_roadway();
  ::apollo::drivers::LdwRoadway* temp = roadway_;
  roadway_ = NULL;
  return temp;
}
inline ::apollo::drivers::LdwRoadway* LdwDataPacks::mutable_roadway() {
  set_has_roadway();
  if (roadway_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::drivers::LdwRoadway>(GetArenaNoVirtual());
    roadway_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.LdwDataPacks.roadway)
  return roadway_;
}
inline void LdwDataPacks::set_allocated_roadway(::apollo::drivers::LdwRoadway* roadway) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete roadway_;
  }
  if (roadway) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      roadway = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, roadway, submessage_arena);
    }
    set_has_roadway();
  } else {
    clear_has_roadway();
  }
  roadway_ = roadway;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.LdwDataPacks.roadway)
}

// optional .apollo.drivers.LdwSoftStatus softstatus = 2;
inline bool LdwDataPacks::has_softstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LdwDataPacks::set_has_softstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LdwDataPacks::clear_has_softstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LdwDataPacks::clear_softstatus() {
  softstatus_ = 0;
  clear_has_softstatus();
}
inline ::apollo::drivers::LdwSoftStatus LdwDataPacks::softstatus() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwDataPacks.softstatus)
  return static_cast< ::apollo::drivers::LdwSoftStatus >(softstatus_);
}
inline void LdwDataPacks::set_softstatus(::apollo::drivers::LdwSoftStatus value) {
  assert(::apollo::drivers::LdwSoftStatus_IsValid(value));
  set_has_softstatus();
  softstatus_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwDataPacks.softstatus)
}

// optional .apollo.drivers.LdwSteerStatus steerstatus = 3;
inline bool LdwDataPacks::has_steerstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LdwDataPacks::set_has_steerstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LdwDataPacks::clear_has_steerstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LdwDataPacks::clear_steerstatus() {
  steerstatus_ = 0;
  clear_has_steerstatus();
}
inline ::apollo::drivers::LdwSteerStatus LdwDataPacks::steerstatus() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwDataPacks.steerstatus)
  return static_cast< ::apollo::drivers::LdwSteerStatus >(steerstatus_);
}
inline void LdwDataPacks::set_steerstatus(::apollo::drivers::LdwSteerStatus value) {
  assert(::apollo::drivers::LdwSteerStatus_IsValid(value));
  set_has_steerstatus();
  steerstatus_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.LdwDataPacks.steerstatus)
}

// optional .apollo.drivers.LdwLensInfo lens = 4;
inline bool LdwDataPacks::has_lens() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LdwDataPacks::set_has_lens() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LdwDataPacks::clear_has_lens() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LdwDataPacks::clear_lens() {
  if (lens_ != NULL) lens_->Clear();
  clear_has_lens();
}
inline const ::apollo::drivers::LdwLensInfo& LdwDataPacks::_internal_lens() const {
  return *lens_;
}
inline const ::apollo::drivers::LdwLensInfo& LdwDataPacks::lens() const {
  const ::apollo::drivers::LdwLensInfo* p = lens_;
  // @@protoc_insertion_point(field_get:apollo.drivers.LdwDataPacks.lens)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::drivers::LdwLensInfo*>(
      &::apollo::drivers::_LdwLensInfo_default_instance_);
}
inline ::apollo::drivers::LdwLensInfo* LdwDataPacks::release_lens() {
  // @@protoc_insertion_point(field_release:apollo.drivers.LdwDataPacks.lens)
  clear_has_lens();
  ::apollo::drivers::LdwLensInfo* temp = lens_;
  lens_ = NULL;
  return temp;
}
inline ::apollo::drivers::LdwLensInfo* LdwDataPacks::mutable_lens() {
  set_has_lens();
  if (lens_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::drivers::LdwLensInfo>(GetArenaNoVirtual());
    lens_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.LdwDataPacks.lens)
  return lens_;
}
inline void LdwDataPacks::set_allocated_lens(::apollo::drivers::LdwLensInfo* lens) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lens_;
  }
  if (lens) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lens = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lens, submessage_arena);
    }
    set_has_lens();
  } else {
    clear_has_lens();
  }
  lens_ = lens;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.LdwDataPacks.lens)
}

// -------------------------------------------------------------------

// OutputObstacle

// optional float currentspeed = 1;
inline bool OutputObstacle::has_currentspeed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OutputObstacle::set_has_currentspeed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OutputObstacle::clear_has_currentspeed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OutputObstacle::clear_currentspeed() {
  currentspeed_ = 0;
  clear_has_currentspeed();
}
inline float OutputObstacle::currentspeed() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.currentspeed)
  return currentspeed_;
}
inline void OutputObstacle::set_currentspeed(float value) {
  set_has_currentspeed();
  currentspeed_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.currentspeed)
}

// optional float framerate = 2;
inline bool OutputObstacle::has_framerate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OutputObstacle::set_has_framerate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OutputObstacle::clear_has_framerate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OutputObstacle::clear_framerate() {
  framerate_ = 0;
  clear_has_framerate();
}
inline float OutputObstacle::framerate() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.framerate)
  return framerate_;
}
inline void OutputObstacle::set_framerate(float value) {
  set_has_framerate();
  framerate_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.framerate)
}

// optional uint32 trackid = 3;
inline bool OutputObstacle::has_trackid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OutputObstacle::set_has_trackid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OutputObstacle::clear_has_trackid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OutputObstacle::clear_trackid() {
  trackid_ = 0u;
  clear_has_trackid();
}
inline ::google::protobuf::uint32 OutputObstacle::trackid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.trackid)
  return trackid_;
}
inline void OutputObstacle::set_trackid(::google::protobuf::uint32 value) {
  set_has_trackid();
  trackid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.trackid)
}

// optional uint32 trackframenum = 4;
inline bool OutputObstacle::has_trackframenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OutputObstacle::set_has_trackframenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OutputObstacle::clear_has_trackframenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OutputObstacle::clear_trackframenum() {
  trackframenum_ = 0u;
  clear_has_trackframenum();
}
inline ::google::protobuf::uint32 OutputObstacle::trackframenum() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.trackframenum)
  return trackframenum_;
}
inline void OutputObstacle::set_trackframenum(::google::protobuf::uint32 value) {
  set_has_trackframenum();
  trackframenum_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.trackframenum)
}

// optional uint32 statelabel = 5;
inline bool OutputObstacle::has_statelabel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OutputObstacle::set_has_statelabel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OutputObstacle::clear_has_statelabel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OutputObstacle::clear_statelabel() {
  statelabel_ = 0u;
  clear_has_statelabel();
}
inline ::google::protobuf::uint32 OutputObstacle::statelabel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.statelabel)
  return statelabel_;
}
inline void OutputObstacle::set_statelabel(::google::protobuf::uint32 value) {
  set_has_statelabel();
  statelabel_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.statelabel)
}

// optional uint32 classlabel = 6;
inline bool OutputObstacle::has_classlabel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OutputObstacle::set_has_classlabel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OutputObstacle::clear_has_classlabel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OutputObstacle::clear_classlabel() {
  classlabel_ = 0u;
  clear_has_classlabel();
}
inline ::google::protobuf::uint32 OutputObstacle::classlabel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.classlabel)
  return classlabel_;
}
inline void OutputObstacle::set_classlabel(::google::protobuf::uint32 value) {
  set_has_classlabel();
  classlabel_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.classlabel)
}

// optional uint32 continuouslabel = 7;
inline bool OutputObstacle::has_continuouslabel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OutputObstacle::set_has_continuouslabel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OutputObstacle::clear_has_continuouslabel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OutputObstacle::clear_continuouslabel() {
  continuouslabel_ = 0u;
  clear_has_continuouslabel();
}
inline ::google::protobuf::uint32 OutputObstacle::continuouslabel() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.continuouslabel)
  return continuouslabel_;
}
inline void OutputObstacle::set_continuouslabel(::google::protobuf::uint32 value) {
  set_has_continuouslabel();
  continuouslabel_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.continuouslabel)
}

// optional uint32 fuzzyestimationvalid = 8;
inline bool OutputObstacle::has_fuzzyestimationvalid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OutputObstacle::set_has_fuzzyestimationvalid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OutputObstacle::clear_has_fuzzyestimationvalid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OutputObstacle::clear_fuzzyestimationvalid() {
  fuzzyestimationvalid_ = 0u;
  clear_has_fuzzyestimationvalid();
}
inline ::google::protobuf::uint32 OutputObstacle::fuzzyestimationvalid() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.fuzzyestimationvalid)
  return fuzzyestimationvalid_;
}
inline void OutputObstacle::set_fuzzyestimationvalid(::google::protobuf::uint32 value) {
  set_has_fuzzyestimationvalid();
  fuzzyestimationvalid_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.fuzzyestimationvalid)
}

// optional .apollo.drivers.OutputObstacle.RecognitionType obstacletype = 9;
inline bool OutputObstacle::has_obstacletype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OutputObstacle::set_has_obstacletype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OutputObstacle::clear_has_obstacletype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OutputObstacle::clear_obstacletype() {
  obstacletype_ = 0;
  clear_has_obstacletype();
}
inline ::apollo::drivers::OutputObstacle_RecognitionType OutputObstacle::obstacletype() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.obstacletype)
  return static_cast< ::apollo::drivers::OutputObstacle_RecognitionType >(obstacletype_);
}
inline void OutputObstacle::set_obstacletype(::apollo::drivers::OutputObstacle_RecognitionType value) {
  assert(::apollo::drivers::OutputObstacle_RecognitionType_IsValid(value));
  set_has_obstacletype();
  obstacletype_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.obstacletype)
}

// optional float avgdisp = 10;
inline bool OutputObstacle::has_avgdisp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OutputObstacle::set_has_avgdisp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OutputObstacle::clear_has_avgdisp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OutputObstacle::clear_avgdisp() {
  avgdisp_ = 0;
  clear_has_avgdisp();
}
inline float OutputObstacle::avgdisp() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.avgdisp)
  return avgdisp_;
}
inline void OutputObstacle::set_avgdisp(float value) {
  set_has_avgdisp();
  avgdisp_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.avgdisp)
}

// optional float avgdistancez = 11;
inline bool OutputObstacle::has_avgdistancez() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OutputObstacle::set_has_avgdistancez() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OutputObstacle::clear_has_avgdistancez() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OutputObstacle::clear_avgdistancez() {
  avgdistancez_ = 0;
  clear_has_avgdistancez();
}
inline float OutputObstacle::avgdistancez() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.avgdistancez)
  return avgdistancez_;
}
inline void OutputObstacle::set_avgdistancez(float value) {
  set_has_avgdistancez();
  avgdistancez_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.avgdistancez)
}

// optional float neardistancez = 12;
inline bool OutputObstacle::has_neardistancez() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OutputObstacle::set_has_neardistancez() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OutputObstacle::clear_has_neardistancez() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OutputObstacle::clear_neardistancez() {
  neardistancez_ = 0;
  clear_has_neardistancez();
}
inline float OutputObstacle::neardistancez() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.neardistancez)
  return neardistancez_;
}
inline void OutputObstacle::set_neardistancez(float value) {
  set_has_neardistancez();
  neardistancez_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.neardistancez)
}

// optional float fardistancez = 13;
inline bool OutputObstacle::has_fardistancez() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OutputObstacle::set_has_fardistancez() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OutputObstacle::clear_has_fardistancez() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OutputObstacle::clear_fardistancez() {
  fardistancez_ = 0;
  clear_has_fardistancez();
}
inline float OutputObstacle::fardistancez() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.fardistancez)
  return fardistancez_;
}
inline void OutputObstacle::set_fardistancez(float value) {
  set_has_fardistancez();
  fardistancez_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.fardistancez)
}

// optional float real3dleftx = 14;
inline bool OutputObstacle::has_real3dleftx() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OutputObstacle::set_has_real3dleftx() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OutputObstacle::clear_has_real3dleftx() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OutputObstacle::clear_real3dleftx() {
  real3dleftx_ = 0;
  clear_has_real3dleftx();
}
inline float OutputObstacle::real3dleftx() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.real3dleftx)
  return real3dleftx_;
}
inline void OutputObstacle::set_real3dleftx(float value) {
  set_has_real3dleftx();
  real3dleftx_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.real3dleftx)
}

// optional float real3drightx = 15;
inline bool OutputObstacle::has_real3drightx() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OutputObstacle::set_has_real3drightx() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OutputObstacle::clear_has_real3drightx() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OutputObstacle::clear_real3drightx() {
  real3drightx_ = 0;
  clear_has_real3drightx();
}
inline float OutputObstacle::real3drightx() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.real3drightx)
  return real3drightx_;
}
inline void OutputObstacle::set_real3drightx(float value) {
  set_has_real3drightx();
  real3drightx_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.real3drightx)
}

// optional float real3dcenterx = 16;
inline bool OutputObstacle::has_real3dcenterx() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OutputObstacle::set_has_real3dcenterx() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OutputObstacle::clear_has_real3dcenterx() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OutputObstacle::clear_real3dcenterx() {
  real3dcenterx_ = 0;
  clear_has_real3dcenterx();
}
inline float OutputObstacle::real3dcenterx() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.real3dcenterx)
  return real3dcenterx_;
}
inline void OutputObstacle::set_real3dcenterx(float value) {
  set_has_real3dcenterx();
  real3dcenterx_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.real3dcenterx)
}

// optional float real3dupy = 17;
inline bool OutputObstacle::has_real3dupy() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OutputObstacle::set_has_real3dupy() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OutputObstacle::clear_has_real3dupy() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OutputObstacle::clear_real3dupy() {
  real3dupy_ = 0;
  clear_has_real3dupy();
}
inline float OutputObstacle::real3dupy() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.real3dupy)
  return real3dupy_;
}
inline void OutputObstacle::set_real3dupy(float value) {
  set_has_real3dupy();
  real3dupy_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.real3dupy)
}

// optional float real3dlowy = 18;
inline bool OutputObstacle::has_real3dlowy() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OutputObstacle::set_has_real3dlowy() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OutputObstacle::clear_has_real3dlowy() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OutputObstacle::clear_real3dlowy() {
  real3dlowy_ = 0;
  clear_has_real3dlowy();
}
inline float OutputObstacle::real3dlowy() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.real3dlowy)
  return real3dlowy_;
}
inline void OutputObstacle::set_real3dlowy(float value) {
  set_has_real3dlowy();
  real3dlowy_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.real3dlowy)
}

// optional uint32 firstpointx = 19;
inline bool OutputObstacle::has_firstpointx() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void OutputObstacle::set_has_firstpointx() {
  _has_bits_[0] |= 0x00040000u;
}
inline void OutputObstacle::clear_has_firstpointx() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void OutputObstacle::clear_firstpointx() {
  firstpointx_ = 0u;
  clear_has_firstpointx();
}
inline ::google::protobuf::uint32 OutputObstacle::firstpointx() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.firstpointx)
  return firstpointx_;
}
inline void OutputObstacle::set_firstpointx(::google::protobuf::uint32 value) {
  set_has_firstpointx();
  firstpointx_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.firstpointx)
}

// optional uint32 firstpointy = 20;
inline bool OutputObstacle::has_firstpointy() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void OutputObstacle::set_has_firstpointy() {
  _has_bits_[0] |= 0x00080000u;
}
inline void OutputObstacle::clear_has_firstpointy() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void OutputObstacle::clear_firstpointy() {
  firstpointy_ = 0u;
  clear_has_firstpointy();
}
inline ::google::protobuf::uint32 OutputObstacle::firstpointy() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.firstpointy)
  return firstpointy_;
}
inline void OutputObstacle::set_firstpointy(::google::protobuf::uint32 value) {
  set_has_firstpointy();
  firstpointy_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.firstpointy)
}

// optional uint32 secondpointx = 21;
inline bool OutputObstacle::has_secondpointx() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void OutputObstacle::set_has_secondpointx() {
  _has_bits_[0] |= 0x00100000u;
}
inline void OutputObstacle::clear_has_secondpointx() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void OutputObstacle::clear_secondpointx() {
  secondpointx_ = 0u;
  clear_has_secondpointx();
}
inline ::google::protobuf::uint32 OutputObstacle::secondpointx() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.secondpointx)
  return secondpointx_;
}
inline void OutputObstacle::set_secondpointx(::google::protobuf::uint32 value) {
  set_has_secondpointx();
  secondpointx_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.secondpointx)
}

// optional uint32 secondpointy = 22;
inline bool OutputObstacle::has_secondpointy() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void OutputObstacle::set_has_secondpointy() {
  _has_bits_[0] |= 0x00200000u;
}
inline void OutputObstacle::clear_has_secondpointy() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void OutputObstacle::clear_secondpointy() {
  secondpointy_ = 0u;
  clear_has_secondpointy();
}
inline ::google::protobuf::uint32 OutputObstacle::secondpointy() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.secondpointy)
  return secondpointy_;
}
inline void OutputObstacle::set_secondpointy(::google::protobuf::uint32 value) {
  set_has_secondpointy();
  secondpointy_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.secondpointy)
}

// optional uint32 thirdpointx = 23;
inline bool OutputObstacle::has_thirdpointx() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void OutputObstacle::set_has_thirdpointx() {
  _has_bits_[0] |= 0x00400000u;
}
inline void OutputObstacle::clear_has_thirdpointx() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void OutputObstacle::clear_thirdpointx() {
  thirdpointx_ = 0u;
  clear_has_thirdpointx();
}
inline ::google::protobuf::uint32 OutputObstacle::thirdpointx() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.thirdpointx)
  return thirdpointx_;
}
inline void OutputObstacle::set_thirdpointx(::google::protobuf::uint32 value) {
  set_has_thirdpointx();
  thirdpointx_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.thirdpointx)
}

// optional uint32 thirdpointy = 24;
inline bool OutputObstacle::has_thirdpointy() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void OutputObstacle::set_has_thirdpointy() {
  _has_bits_[0] |= 0x00800000u;
}
inline void OutputObstacle::clear_has_thirdpointy() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void OutputObstacle::clear_thirdpointy() {
  thirdpointy_ = 0u;
  clear_has_thirdpointy();
}
inline ::google::protobuf::uint32 OutputObstacle::thirdpointy() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.thirdpointy)
  return thirdpointy_;
}
inline void OutputObstacle::set_thirdpointy(::google::protobuf::uint32 value) {
  set_has_thirdpointy();
  thirdpointy_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.thirdpointy)
}

// optional uint32 fourthpointx = 25;
inline bool OutputObstacle::has_fourthpointx() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void OutputObstacle::set_has_fourthpointx() {
  _has_bits_[0] |= 0x01000000u;
}
inline void OutputObstacle::clear_has_fourthpointx() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void OutputObstacle::clear_fourthpointx() {
  fourthpointx_ = 0u;
  clear_has_fourthpointx();
}
inline ::google::protobuf::uint32 OutputObstacle::fourthpointx() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.fourthpointx)
  return fourthpointx_;
}
inline void OutputObstacle::set_fourthpointx(::google::protobuf::uint32 value) {
  set_has_fourthpointx();
  fourthpointx_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.fourthpointx)
}

// optional uint32 fourthpointy = 26;
inline bool OutputObstacle::has_fourthpointy() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void OutputObstacle::set_has_fourthpointy() {
  _has_bits_[0] |= 0x02000000u;
}
inline void OutputObstacle::clear_has_fourthpointy() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void OutputObstacle::clear_fourthpointy() {
  fourthpointy_ = 0u;
  clear_has_fourthpointy();
}
inline ::google::protobuf::uint32 OutputObstacle::fourthpointy() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.fourthpointy)
  return fourthpointy_;
}
inline void OutputObstacle::set_fourthpointy(::google::protobuf::uint32 value) {
  set_has_fourthpointy();
  fourthpointy_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.fourthpointy)
}

// optional float fuzzyrelativedistancez = 27;
inline bool OutputObstacle::has_fuzzyrelativedistancez() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void OutputObstacle::set_has_fuzzyrelativedistancez() {
  _has_bits_[0] |= 0x04000000u;
}
inline void OutputObstacle::clear_has_fuzzyrelativedistancez() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void OutputObstacle::clear_fuzzyrelativedistancez() {
  fuzzyrelativedistancez_ = 0;
  clear_has_fuzzyrelativedistancez();
}
inline float OutputObstacle::fuzzyrelativedistancez() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.fuzzyrelativedistancez)
  return fuzzyrelativedistancez_;
}
inline void OutputObstacle::set_fuzzyrelativedistancez(float value) {
  set_has_fuzzyrelativedistancez();
  fuzzyrelativedistancez_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.fuzzyrelativedistancez)
}

// optional float fuzzyrelativespeedz = 28;
inline bool OutputObstacle::has_fuzzyrelativespeedz() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void OutputObstacle::set_has_fuzzyrelativespeedz() {
  _has_bits_[0] |= 0x08000000u;
}
inline void OutputObstacle::clear_has_fuzzyrelativespeedz() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void OutputObstacle::clear_fuzzyrelativespeedz() {
  fuzzyrelativespeedz_ = 0;
  clear_has_fuzzyrelativespeedz();
}
inline float OutputObstacle::fuzzyrelativespeedz() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.fuzzyrelativespeedz)
  return fuzzyrelativespeedz_;
}
inline void OutputObstacle::set_fuzzyrelativespeedz(float value) {
  set_has_fuzzyrelativespeedz();
  fuzzyrelativespeedz_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.fuzzyrelativespeedz)
}

// optional float fuzzycollisiontimez = 29;
inline bool OutputObstacle::has_fuzzycollisiontimez() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void OutputObstacle::set_has_fuzzycollisiontimez() {
  _has_bits_[0] |= 0x10000000u;
}
inline void OutputObstacle::clear_has_fuzzycollisiontimez() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void OutputObstacle::clear_fuzzycollisiontimez() {
  fuzzycollisiontimez_ = 0;
  clear_has_fuzzycollisiontimez();
}
inline float OutputObstacle::fuzzycollisiontimez() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.fuzzycollisiontimez)
  return fuzzycollisiontimez_;
}
inline void OutputObstacle::set_fuzzycollisiontimez(float value) {
  set_has_fuzzycollisiontimez();
  fuzzycollisiontimez_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.fuzzycollisiontimez)
}

// optional uint32 fuzzycollisionx = 30;
inline bool OutputObstacle::has_fuzzycollisionx() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void OutputObstacle::set_has_fuzzycollisionx() {
  _has_bits_[0] |= 0x20000000u;
}
inline void OutputObstacle::clear_has_fuzzycollisionx() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void OutputObstacle::clear_fuzzycollisionx() {
  fuzzycollisionx_ = 0u;
  clear_has_fuzzycollisionx();
}
inline ::google::protobuf::uint32 OutputObstacle::fuzzycollisionx() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.fuzzycollisionx)
  return fuzzycollisionx_;
}
inline void OutputObstacle::set_fuzzycollisionx(::google::protobuf::uint32 value) {
  set_has_fuzzycollisionx();
  fuzzycollisionx_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.fuzzycollisionx)
}

// optional float fuzzy3dwidth = 31;
inline bool OutputObstacle::has_fuzzy3dwidth() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void OutputObstacle::set_has_fuzzy3dwidth() {
  _has_bits_[0] |= 0x40000000u;
}
inline void OutputObstacle::clear_has_fuzzy3dwidth() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void OutputObstacle::clear_fuzzy3dwidth() {
  fuzzy3dwidth_ = 0;
  clear_has_fuzzy3dwidth();
}
inline float OutputObstacle::fuzzy3dwidth() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.fuzzy3dwidth)
  return fuzzy3dwidth_;
}
inline void OutputObstacle::set_fuzzy3dwidth(float value) {
  set_has_fuzzy3dwidth();
  fuzzy3dwidth_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.fuzzy3dwidth)
}

// optional float fuzzy3dcenterx = 32;
inline bool OutputObstacle::has_fuzzy3dcenterx() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void OutputObstacle::set_has_fuzzy3dcenterx() {
  _has_bits_[0] |= 0x80000000u;
}
inline void OutputObstacle::clear_has_fuzzy3dcenterx() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void OutputObstacle::clear_fuzzy3dcenterx() {
  fuzzy3dcenterx_ = 0;
  clear_has_fuzzy3dcenterx();
}
inline float OutputObstacle::fuzzy3dcenterx() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.fuzzy3dcenterx)
  return fuzzy3dcenterx_;
}
inline void OutputObstacle::set_fuzzy3dcenterx(float value) {
  set_has_fuzzy3dcenterx();
  fuzzy3dcenterx_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.fuzzy3dcenterx)
}

// optional float fuzzy3dleftx = 33;
inline bool OutputObstacle::has_fuzzy3dleftx() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void OutputObstacle::set_has_fuzzy3dleftx() {
  _has_bits_[1] |= 0x00000001u;
}
inline void OutputObstacle::clear_has_fuzzy3dleftx() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void OutputObstacle::clear_fuzzy3dleftx() {
  fuzzy3dleftx_ = 0;
  clear_has_fuzzy3dleftx();
}
inline float OutputObstacle::fuzzy3dleftx() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.fuzzy3dleftx)
  return fuzzy3dleftx_;
}
inline void OutputObstacle::set_fuzzy3dleftx(float value) {
  set_has_fuzzy3dleftx();
  fuzzy3dleftx_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.fuzzy3dleftx)
}

// optional float fuzzy3drightx = 34;
inline bool OutputObstacle::has_fuzzy3drightx() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void OutputObstacle::set_has_fuzzy3drightx() {
  _has_bits_[1] |= 0x00000002u;
}
inline void OutputObstacle::clear_has_fuzzy3drightx() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void OutputObstacle::clear_fuzzy3drightx() {
  fuzzy3drightx_ = 0;
  clear_has_fuzzy3drightx();
}
inline float OutputObstacle::fuzzy3drightx() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.fuzzy3drightx)
  return fuzzy3drightx_;
}
inline void OutputObstacle::set_fuzzy3drightx(float value) {
  set_has_fuzzy3drightx();
  fuzzy3drightx_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.fuzzy3drightx)
}

// optional float fuzzy3dheight = 35;
inline bool OutputObstacle::has_fuzzy3dheight() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void OutputObstacle::set_has_fuzzy3dheight() {
  _has_bits_[1] |= 0x00000004u;
}
inline void OutputObstacle::clear_has_fuzzy3dheight() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void OutputObstacle::clear_fuzzy3dheight() {
  fuzzy3dheight_ = 0;
  clear_has_fuzzy3dheight();
}
inline float OutputObstacle::fuzzy3dheight() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.fuzzy3dheight)
  return fuzzy3dheight_;
}
inline void OutputObstacle::set_fuzzy3dheight(float value) {
  set_has_fuzzy3dheight();
  fuzzy3dheight_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.fuzzy3dheight)
}

// optional float fuzzy3dupy = 36;
inline bool OutputObstacle::has_fuzzy3dupy() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void OutputObstacle::set_has_fuzzy3dupy() {
  _has_bits_[1] |= 0x00000008u;
}
inline void OutputObstacle::clear_has_fuzzy3dupy() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void OutputObstacle::clear_fuzzy3dupy() {
  fuzzy3dupy_ = 0;
  clear_has_fuzzy3dupy();
}
inline float OutputObstacle::fuzzy3dupy() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.fuzzy3dupy)
  return fuzzy3dupy_;
}
inline void OutputObstacle::set_fuzzy3dupy(float value) {
  set_has_fuzzy3dupy();
  fuzzy3dupy_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.fuzzy3dupy)
}

// optional float fuzzy3dlowy = 37;
inline bool OutputObstacle::has_fuzzy3dlowy() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void OutputObstacle::set_has_fuzzy3dlowy() {
  _has_bits_[1] |= 0x00000010u;
}
inline void OutputObstacle::clear_has_fuzzy3dlowy() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void OutputObstacle::clear_fuzzy3dlowy() {
  fuzzy3dlowy_ = 0;
  clear_has_fuzzy3dlowy();
}
inline float OutputObstacle::fuzzy3dlowy() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.fuzzy3dlowy)
  return fuzzy3dlowy_;
}
inline void OutputObstacle::set_fuzzy3dlowy(float value) {
  set_has_fuzzy3dlowy();
  fuzzy3dlowy_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.fuzzy3dlowy)
}

// optional float fuzzyrelativespeedcenterx = 38;
inline bool OutputObstacle::has_fuzzyrelativespeedcenterx() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void OutputObstacle::set_has_fuzzyrelativespeedcenterx() {
  _has_bits_[1] |= 0x00000020u;
}
inline void OutputObstacle::clear_has_fuzzyrelativespeedcenterx() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void OutputObstacle::clear_fuzzyrelativespeedcenterx() {
  fuzzyrelativespeedcenterx_ = 0;
  clear_has_fuzzyrelativespeedcenterx();
}
inline float OutputObstacle::fuzzyrelativespeedcenterx() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.fuzzyrelativespeedcenterx)
  return fuzzyrelativespeedcenterx_;
}
inline void OutputObstacle::set_fuzzyrelativespeedcenterx(float value) {
  set_has_fuzzyrelativespeedcenterx();
  fuzzyrelativespeedcenterx_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.fuzzyrelativespeedcenterx)
}

// optional float fuzzyrelativespeedleftx = 39;
inline bool OutputObstacle::has_fuzzyrelativespeedleftx() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void OutputObstacle::set_has_fuzzyrelativespeedleftx() {
  _has_bits_[1] |= 0x00000040u;
}
inline void OutputObstacle::clear_has_fuzzyrelativespeedleftx() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void OutputObstacle::clear_fuzzyrelativespeedleftx() {
  fuzzyrelativespeedleftx_ = 0;
  clear_has_fuzzyrelativespeedleftx();
}
inline float OutputObstacle::fuzzyrelativespeedleftx() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.fuzzyrelativespeedleftx)
  return fuzzyrelativespeedleftx_;
}
inline void OutputObstacle::set_fuzzyrelativespeedleftx(float value) {
  set_has_fuzzyrelativespeedleftx();
  fuzzyrelativespeedleftx_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.fuzzyrelativespeedleftx)
}

// optional float fuzzyrelativespeedrightx = 40;
inline bool OutputObstacle::has_fuzzyrelativespeedrightx() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void OutputObstacle::set_has_fuzzyrelativespeedrightx() {
  _has_bits_[1] |= 0x00000080u;
}
inline void OutputObstacle::clear_has_fuzzyrelativespeedrightx() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void OutputObstacle::clear_fuzzyrelativespeedrightx() {
  fuzzyrelativespeedrightx_ = 0;
  clear_has_fuzzyrelativespeedrightx();
}
inline float OutputObstacle::fuzzyrelativespeedrightx() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.OutputObstacle.fuzzyrelativespeedrightx)
  return fuzzyrelativespeedrightx_;
}
inline void OutputObstacle::set_fuzzyrelativespeedrightx(float value) {
  set_has_fuzzyrelativespeedrightx();
  fuzzyrelativespeedrightx_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.OutputObstacle.fuzzyrelativespeedrightx)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SmartereyeObstacles

// optional .apollo.common.Header header = 1;
inline bool SmartereyeObstacles::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmartereyeObstacles::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmartereyeObstacles::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::common::Header& SmartereyeObstacles::_internal_header() const {
  return *header_;
}
inline const ::apollo::common::Header& SmartereyeObstacles::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.drivers.SmartereyeObstacles.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* SmartereyeObstacles::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.SmartereyeObstacles.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::common::Header* SmartereyeObstacles::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.SmartereyeObstacles.header)
  return header_;
}
inline void SmartereyeObstacles::set_allocated_header(::apollo::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.SmartereyeObstacles.header)
}

// optional int32 num_obstacles = 2;
inline bool SmartereyeObstacles::has_num_obstacles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmartereyeObstacles::set_has_num_obstacles() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SmartereyeObstacles::clear_has_num_obstacles() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SmartereyeObstacles::clear_num_obstacles() {
  num_obstacles_ = 0;
  clear_has_num_obstacles();
}
inline ::google::protobuf::int32 SmartereyeObstacles::num_obstacles() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.SmartereyeObstacles.num_obstacles)
  return num_obstacles_;
}
inline void SmartereyeObstacles::set_num_obstacles(::google::protobuf::int32 value) {
  set_has_num_obstacles();
  num_obstacles_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.SmartereyeObstacles.num_obstacles)
}

// map<uint32, .apollo.drivers.OutputObstacle> output_obstacles = 3;
inline int SmartereyeObstacles::output_obstacles_size() const {
  return output_obstacles_.size();
}
inline void SmartereyeObstacles::clear_output_obstacles() {
  output_obstacles_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::apollo::drivers::OutputObstacle >&
SmartereyeObstacles::output_obstacles() const {
  // @@protoc_insertion_point(field_map:apollo.drivers.SmartereyeObstacles.output_obstacles)
  return output_obstacles_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::apollo::drivers::OutputObstacle >*
SmartereyeObstacles::mutable_output_obstacles() {
  // @@protoc_insertion_point(field_mutable_map:apollo.drivers.SmartereyeObstacles.output_obstacles)
  return output_obstacles_.MutableMap();
}

// -------------------------------------------------------------------

// SmartereyeLanemark

// optional .apollo.drivers.LdwDataPacks lane_road_data = 4;
inline bool SmartereyeLanemark::has_lane_road_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmartereyeLanemark::set_has_lane_road_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmartereyeLanemark::clear_has_lane_road_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmartereyeLanemark::clear_lane_road_data() {
  if (lane_road_data_ != NULL) lane_road_data_->Clear();
  clear_has_lane_road_data();
}
inline const ::apollo::drivers::LdwDataPacks& SmartereyeLanemark::_internal_lane_road_data() const {
  return *lane_road_data_;
}
inline const ::apollo::drivers::LdwDataPacks& SmartereyeLanemark::lane_road_data() const {
  const ::apollo::drivers::LdwDataPacks* p = lane_road_data_;
  // @@protoc_insertion_point(field_get:apollo.drivers.SmartereyeLanemark.lane_road_data)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::drivers::LdwDataPacks*>(
      &::apollo::drivers::_LdwDataPacks_default_instance_);
}
inline ::apollo::drivers::LdwDataPacks* SmartereyeLanemark::release_lane_road_data() {
  // @@protoc_insertion_point(field_release:apollo.drivers.SmartereyeLanemark.lane_road_data)
  clear_has_lane_road_data();
  ::apollo::drivers::LdwDataPacks* temp = lane_road_data_;
  lane_road_data_ = NULL;
  return temp;
}
inline ::apollo::drivers::LdwDataPacks* SmartereyeLanemark::mutable_lane_road_data() {
  set_has_lane_road_data();
  if (lane_road_data_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::drivers::LdwDataPacks>(GetArenaNoVirtual());
    lane_road_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.SmartereyeLanemark.lane_road_data)
  return lane_road_data_;
}
inline void SmartereyeLanemark::set_allocated_lane_road_data(::apollo::drivers::LdwDataPacks* lane_road_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lane_road_data_;
  }
  if (lane_road_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lane_road_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lane_road_data, submessage_arena);
    }
    set_has_lane_road_data();
  } else {
    clear_has_lane_road_data();
  }
  lane_road_data_ = lane_road_data;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.SmartereyeLanemark.lane_road_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::drivers::OutputObstacle_RecognitionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::OutputObstacle_RecognitionType>() {
  return ::apollo::drivers::OutputObstacle_RecognitionType_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::LdwVersions> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::LdwVersions>() {
  return ::apollo::drivers::LdwVersions_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::LdwLaneStyle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::LdwLaneStyle>() {
  return ::apollo::drivers::LdwLaneStyle_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::LdwSteerStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::LdwSteerStatus>() {
  return ::apollo::drivers::LdwSteerStatus_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::LdwSoftStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::LdwSoftStatus>() {
  return ::apollo::drivers::LdwSoftStatus_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::LdwWarningGrade> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::LdwWarningGrade>() {
  return ::apollo::drivers::LdwWarningGrade_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fsmartereye_2eproto
