// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/racobit_radar.proto

#include "modules/drivers/proto/racobit_radar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fheader_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto
namespace protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RacobitClusterListStatus_600;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RacobitObjectListStatus_60A;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RacobitRadarState_201;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RacobitRadarObs;
}  // namespace protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto
namespace apollo {
namespace drivers {
class RacobitClusterListStatus_600DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RacobitClusterListStatus_600>
      _instance;
} _RacobitClusterListStatus_600_default_instance_;
class RacobitObjectListStatus_60ADefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RacobitObjectListStatus_60A>
      _instance;
} _RacobitObjectListStatus_60A_default_instance_;
class RacobitRadarState_201DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RacobitRadarState_201>
      _instance;
} _RacobitRadarState_201_default_instance_;
class RacobitRadarObsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RacobitRadarObs>
      _instance;
} _RacobitRadarObs_default_instance_;
class RacobitRadarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RacobitRadar>
      _instance;
} _RacobitRadar_default_instance_;
}  // namespace drivers
}  // namespace apollo
namespace protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto {
static void InitDefaultsRacobitClusterListStatus_600() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_RacobitClusterListStatus_600_default_instance_;
    new (ptr) ::apollo::drivers::RacobitClusterListStatus_600();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::RacobitClusterListStatus_600::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RacobitClusterListStatus_600 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRacobitClusterListStatus_600}, {}};

static void InitDefaultsRacobitObjectListStatus_60A() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_RacobitObjectListStatus_60A_default_instance_;
    new (ptr) ::apollo::drivers::RacobitObjectListStatus_60A();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::RacobitObjectListStatus_60A::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RacobitObjectListStatus_60A =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRacobitObjectListStatus_60A}, {}};

static void InitDefaultsRacobitRadarState_201() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_RacobitRadarState_201_default_instance_;
    new (ptr) ::apollo::drivers::RacobitRadarState_201();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::RacobitRadarState_201::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RacobitRadarState_201 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRacobitRadarState_201}, {}};

static void InitDefaultsRacobitRadarObs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_RacobitRadarObs_default_instance_;
    new (ptr) ::apollo::drivers::RacobitRadarObs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::RacobitRadarObs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RacobitRadarObs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRacobitRadarObs}, {
      &protobuf_modules_2fcommon_2fproto_2fheader_2eproto::scc_info_Header.base,}};

static void InitDefaultsRacobitRadar() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_RacobitRadar_default_instance_;
    new (ptr) ::apollo::drivers::RacobitRadar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::RacobitRadar::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_RacobitRadar =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsRacobitRadar}, {
      &protobuf_modules_2fcommon_2fproto_2fheader_2eproto::scc_info_Header.base,
      &protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::scc_info_RacobitRadarObs.base,
      &protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::scc_info_RacobitRadarState_201.base,
      &protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::scc_info_RacobitClusterListStatus_600.base,
      &protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::scc_info_RacobitObjectListStatus_60A.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RacobitClusterListStatus_600.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RacobitObjectListStatus_60A.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RacobitRadarState_201.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RacobitRadarObs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RacobitRadar.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitClusterListStatus_600, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitClusterListStatus_600, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitClusterListStatus_600, near_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitClusterListStatus_600, far_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitClusterListStatus_600, meas_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitClusterListStatus_600, interface_version_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitObjectListStatus_60A, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitObjectListStatus_60A, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitObjectListStatus_60A, nof_objects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitObjectListStatus_60A, meas_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitObjectListStatus_60A, interface_version_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarState_201, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarState_201, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarState_201, max_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarState_201, radar_power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarState_201, output_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarState_201, rcs_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarState_201, send_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarState_201, send_ext_info_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, clusterortrack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, obstacle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, longitude_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, lateral_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, longitude_vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, lateral_vel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, rcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, dynprop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, longitude_dist_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, lateral_dist_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, longitude_vel_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, lateral_vel_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, probexist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, meas_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, longitude_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, lateral_accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, oritation_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, longitude_accel_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, lateral_accel_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, oritation_angle_rms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadarObs, obstacle_class_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  11,
  8,
  9,
  10,
  13,
  14,
  12,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadar, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadar, contiobs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadar, radar_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadar, cluster_list_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RacobitRadar, object_list_status_),
  0,
  ~0u,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::apollo::drivers::RacobitClusterListStatus_600)},
  { 13, 21, sizeof(::apollo::drivers::RacobitObjectListStatus_60A)},
  { 24, 35, sizeof(::apollo::drivers::RacobitRadarState_201)},
  { 41, 70, sizeof(::apollo::drivers::RacobitRadarObs)},
  { 94, 104, sizeof(::apollo::drivers::RacobitRadar)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::_RacobitClusterListStatus_600_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::_RacobitObjectListStatus_60A_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::_RacobitRadarState_201_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::_RacobitRadarObs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::_RacobitRadar_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/drivers/proto/racobit_radar.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n)modules/drivers/proto/racobit_radar.pr"
      "oto\022\016apollo.drivers\032!modules/common/prot"
      "o/header.proto\032Bmodules/drivers/radar/ra"
      "cobit_radar/proto/racobit_radar_conf.pro"
      "to\"t\n\034RacobitClusterListStatus_600\022\017\n\004ne"
      "ar\030\001 \001(\005:\0010\022\016\n\003far\030\002 \001(\005:\0010\022\030\n\014meas_coun"
      "ter\030\003 \001(\005:\002-1\022\031\n\021interface_version\030\004 \001(\005"
      "\"j\n\033RacobitObjectListStatus_60A\022\026\n\013nof_o"
      "bjects\030\001 \001(\005:\0010\022\030\n\014meas_counter\030\002 \001(\005:\002-"
      "1\022\031\n\021interface_version\030\003 \001(\005\"\361\001\n\025Racobit"
      "RadarState_201\022\024\n\014max_distance\030\001 \001(\r\022\023\n\013"
      "radar_power\030\002 \001(\r\022=\n\013output_type\030\003 \001(\0162("
      ".apollo.drivers.racobit_radar.OutputType"
      "\022A\n\rrcs_threshold\030\004 \001(\0162*.apollo.drivers"
      ".racobit_radar.RcsThreshold\022\024\n\014send_qual"
      "ity\030\005 \001(\010\022\025\n\rsend_ext_info\030\006 \001(\010\"\303\004\n\017Rac"
      "obitRadarObs\022%\n\006header\030\001 \001(\0132\025.apollo.co"
      "mmon.Header\022\026\n\016clusterortrack\030\002 \001(\010\022\023\n\013o"
      "bstacle_id\030\003 \001(\005\022\026\n\016longitude_dist\030\004 \001(\001"
      "\022\024\n\014lateral_dist\030\005 \001(\001\022\025\n\rlongitude_vel\030"
      "\006 \001(\001\022\023\n\013lateral_vel\030\007 \001(\001\022\013\n\003rcs\030\010 \001(\001\022"
      "\017\n\007dynprop\030\t \001(\005\022\032\n\022longitude_dist_rms\030\n"
      " \001(\001\022\030\n\020lateral_dist_rms\030\013 \001(\001\022\031\n\021longit"
      "ude_vel_rms\030\014 \001(\001\022\027\n\017lateral_vel_rms\030\r \001"
      "(\001\022\021\n\tprobexist\030\016 \001(\001\022\022\n\nmeas_state\030\017 \001("
      "\005\022\027\n\017longitude_accel\030\020 \001(\001\022\025\n\rlateral_ac"
      "cel\030\021 \001(\001\022\027\n\017oritation_angle\030\022 \001(\001\022\033\n\023lo"
      "ngitude_accel_rms\030\023 \001(\001\022\031\n\021lateral_accel"
      "_rms\030\024 \001(\001\022\033\n\023oritation_angle_rms\030\025 \001(\001\022"
      "\016\n\006length\030\026 \001(\001\022\r\n\005width\030\027 \001(\001\022\026\n\016obstac"
      "le_class\030\030 \001(\005\"\270\002\n\014RacobitRadar\022%\n\006heade"
      "r\030\001 \001(\0132\025.apollo.common.Header\0221\n\010contio"
      "bs\030\002 \003(\0132\037.apollo.drivers.RacobitRadarOb"
      "s\022:\n\013radar_state\030\003 \001(\0132%.apollo.drivers."
      "RacobitRadarState_201\022I\n\023cluster_list_st"
      "atus\030\004 \001(\0132,.apollo.drivers.RacobitClust"
      "erListStatus_600\022G\n\022object_list_status\030\005"
      " \001(\0132+.apollo.drivers.RacobitObjectListS"
      "tatus_60A"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1529);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/drivers/proto/racobit_radar.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto
namespace apollo {
namespace drivers {

// ===================================================================

void RacobitClusterListStatus_600::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RacobitClusterListStatus_600::kNearFieldNumber;
const int RacobitClusterListStatus_600::kFarFieldNumber;
const int RacobitClusterListStatus_600::kMeasCounterFieldNumber;
const int RacobitClusterListStatus_600::kInterfaceVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RacobitClusterListStatus_600::RacobitClusterListStatus_600()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::scc_info_RacobitClusterListStatus_600.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.RacobitClusterListStatus_600)
}
RacobitClusterListStatus_600::RacobitClusterListStatus_600(const RacobitClusterListStatus_600& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&near_, &from.near_,
    static_cast<size_t>(reinterpret_cast<char*>(&meas_counter_) -
    reinterpret_cast<char*>(&near_)) + sizeof(meas_counter_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.RacobitClusterListStatus_600)
}

void RacobitClusterListStatus_600::SharedCtor() {
  ::memset(&near_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interface_version_) -
      reinterpret_cast<char*>(&near_)) + sizeof(interface_version_));
  meas_counter_ = -1;
}

RacobitClusterListStatus_600::~RacobitClusterListStatus_600() {
  // @@protoc_insertion_point(destructor:apollo.drivers.RacobitClusterListStatus_600)
  SharedDtor();
}

void RacobitClusterListStatus_600::SharedDtor() {
}

void RacobitClusterListStatus_600::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RacobitClusterListStatus_600::descriptor() {
  ::protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RacobitClusterListStatus_600& RacobitClusterListStatus_600::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::scc_info_RacobitClusterListStatus_600.base);
  return *internal_default_instance();
}


void RacobitClusterListStatus_600::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.RacobitClusterListStatus_600)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&near_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&interface_version_) -
        reinterpret_cast<char*>(&near_)) + sizeof(interface_version_));
    meas_counter_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RacobitClusterListStatus_600::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.RacobitClusterListStatus_600)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 near = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_near();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &near_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 far = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_far();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &far_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 meas_counter = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_meas_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meas_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 interface_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_interface_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interface_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.RacobitClusterListStatus_600)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.RacobitClusterListStatus_600)
  return false;
#undef DO_
}

void RacobitClusterListStatus_600::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.RacobitClusterListStatus_600)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 near = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->near(), output);
  }

  // optional int32 far = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->far(), output);
  }

  // optional int32 meas_counter = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->meas_counter(), output);
  }

  // optional int32 interface_version = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->interface_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.RacobitClusterListStatus_600)
}

::google::protobuf::uint8* RacobitClusterListStatus_600::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.RacobitClusterListStatus_600)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 near = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->near(), target);
  }

  // optional int32 far = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->far(), target);
  }

  // optional int32 meas_counter = 3 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->meas_counter(), target);
  }

  // optional int32 interface_version = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->interface_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.RacobitClusterListStatus_600)
  return target;
}

size_t RacobitClusterListStatus_600::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.RacobitClusterListStatus_600)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 near = 1 [default = 0];
    if (has_near()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->near());
    }

    // optional int32 far = 2 [default = 0];
    if (has_far()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->far());
    }

    // optional int32 interface_version = 4;
    if (has_interface_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interface_version());
    }

    // optional int32 meas_counter = 3 [default = -1];
    if (has_meas_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->meas_counter());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RacobitClusterListStatus_600::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.RacobitClusterListStatus_600)
  GOOGLE_DCHECK_NE(&from, this);
  const RacobitClusterListStatus_600* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RacobitClusterListStatus_600>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.RacobitClusterListStatus_600)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.RacobitClusterListStatus_600)
    MergeFrom(*source);
  }
}

void RacobitClusterListStatus_600::MergeFrom(const RacobitClusterListStatus_600& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.RacobitClusterListStatus_600)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      near_ = from.near_;
    }
    if (cached_has_bits & 0x00000002u) {
      far_ = from.far_;
    }
    if (cached_has_bits & 0x00000004u) {
      interface_version_ = from.interface_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      meas_counter_ = from.meas_counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RacobitClusterListStatus_600::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.RacobitClusterListStatus_600)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RacobitClusterListStatus_600::CopyFrom(const RacobitClusterListStatus_600& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.RacobitClusterListStatus_600)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RacobitClusterListStatus_600::IsInitialized() const {
  return true;
}

void RacobitClusterListStatus_600::Swap(RacobitClusterListStatus_600* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RacobitClusterListStatus_600::InternalSwap(RacobitClusterListStatus_600* other) {
  using std::swap;
  swap(near_, other->near_);
  swap(far_, other->far_);
  swap(interface_version_, other->interface_version_);
  swap(meas_counter_, other->meas_counter_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RacobitClusterListStatus_600::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RacobitObjectListStatus_60A::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RacobitObjectListStatus_60A::kNofObjectsFieldNumber;
const int RacobitObjectListStatus_60A::kMeasCounterFieldNumber;
const int RacobitObjectListStatus_60A::kInterfaceVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RacobitObjectListStatus_60A::RacobitObjectListStatus_60A()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::scc_info_RacobitObjectListStatus_60A.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.RacobitObjectListStatus_60A)
}
RacobitObjectListStatus_60A::RacobitObjectListStatus_60A(const RacobitObjectListStatus_60A& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nof_objects_, &from.nof_objects_,
    static_cast<size_t>(reinterpret_cast<char*>(&meas_counter_) -
    reinterpret_cast<char*>(&nof_objects_)) + sizeof(meas_counter_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.RacobitObjectListStatus_60A)
}

void RacobitObjectListStatus_60A::SharedCtor() {
  ::memset(&nof_objects_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interface_version_) -
      reinterpret_cast<char*>(&nof_objects_)) + sizeof(interface_version_));
  meas_counter_ = -1;
}

RacobitObjectListStatus_60A::~RacobitObjectListStatus_60A() {
  // @@protoc_insertion_point(destructor:apollo.drivers.RacobitObjectListStatus_60A)
  SharedDtor();
}

void RacobitObjectListStatus_60A::SharedDtor() {
}

void RacobitObjectListStatus_60A::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RacobitObjectListStatus_60A::descriptor() {
  ::protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RacobitObjectListStatus_60A& RacobitObjectListStatus_60A::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::scc_info_RacobitObjectListStatus_60A.base);
  return *internal_default_instance();
}


void RacobitObjectListStatus_60A::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.RacobitObjectListStatus_60A)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&nof_objects_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&interface_version_) -
        reinterpret_cast<char*>(&nof_objects_)) + sizeof(interface_version_));
    meas_counter_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RacobitObjectListStatus_60A::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.RacobitObjectListStatus_60A)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nof_objects = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_nof_objects();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nof_objects_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 meas_counter = 2 [default = -1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_meas_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meas_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 interface_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_interface_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interface_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.RacobitObjectListStatus_60A)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.RacobitObjectListStatus_60A)
  return false;
#undef DO_
}

void RacobitObjectListStatus_60A::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.RacobitObjectListStatus_60A)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nof_objects = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nof_objects(), output);
  }

  // optional int32 meas_counter = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->meas_counter(), output);
  }

  // optional int32 interface_version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->interface_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.RacobitObjectListStatus_60A)
}

::google::protobuf::uint8* RacobitObjectListStatus_60A::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.RacobitObjectListStatus_60A)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nof_objects = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nof_objects(), target);
  }

  // optional int32 meas_counter = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->meas_counter(), target);
  }

  // optional int32 interface_version = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->interface_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.RacobitObjectListStatus_60A)
  return target;
}

size_t RacobitObjectListStatus_60A::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.RacobitObjectListStatus_60A)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 nof_objects = 1 [default = 0];
    if (has_nof_objects()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nof_objects());
    }

    // optional int32 interface_version = 3;
    if (has_interface_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interface_version());
    }

    // optional int32 meas_counter = 2 [default = -1];
    if (has_meas_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->meas_counter());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RacobitObjectListStatus_60A::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.RacobitObjectListStatus_60A)
  GOOGLE_DCHECK_NE(&from, this);
  const RacobitObjectListStatus_60A* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RacobitObjectListStatus_60A>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.RacobitObjectListStatus_60A)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.RacobitObjectListStatus_60A)
    MergeFrom(*source);
  }
}

void RacobitObjectListStatus_60A::MergeFrom(const RacobitObjectListStatus_60A& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.RacobitObjectListStatus_60A)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      nof_objects_ = from.nof_objects_;
    }
    if (cached_has_bits & 0x00000002u) {
      interface_version_ = from.interface_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      meas_counter_ = from.meas_counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RacobitObjectListStatus_60A::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.RacobitObjectListStatus_60A)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RacobitObjectListStatus_60A::CopyFrom(const RacobitObjectListStatus_60A& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.RacobitObjectListStatus_60A)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RacobitObjectListStatus_60A::IsInitialized() const {
  return true;
}

void RacobitObjectListStatus_60A::Swap(RacobitObjectListStatus_60A* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RacobitObjectListStatus_60A::InternalSwap(RacobitObjectListStatus_60A* other) {
  using std::swap;
  swap(nof_objects_, other->nof_objects_);
  swap(interface_version_, other->interface_version_);
  swap(meas_counter_, other->meas_counter_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RacobitObjectListStatus_60A::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RacobitRadarState_201::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RacobitRadarState_201::kMaxDistanceFieldNumber;
const int RacobitRadarState_201::kRadarPowerFieldNumber;
const int RacobitRadarState_201::kOutputTypeFieldNumber;
const int RacobitRadarState_201::kRcsThresholdFieldNumber;
const int RacobitRadarState_201::kSendQualityFieldNumber;
const int RacobitRadarState_201::kSendExtInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RacobitRadarState_201::RacobitRadarState_201()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::scc_info_RacobitRadarState_201.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.RacobitRadarState_201)
}
RacobitRadarState_201::RacobitRadarState_201(const RacobitRadarState_201& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_distance_, &from.max_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_ext_info_) -
    reinterpret_cast<char*>(&max_distance_)) + sizeof(send_ext_info_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.RacobitRadarState_201)
}

void RacobitRadarState_201::SharedCtor() {
  ::memset(&max_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&send_ext_info_) -
      reinterpret_cast<char*>(&max_distance_)) + sizeof(send_ext_info_));
}

RacobitRadarState_201::~RacobitRadarState_201() {
  // @@protoc_insertion_point(destructor:apollo.drivers.RacobitRadarState_201)
  SharedDtor();
}

void RacobitRadarState_201::SharedDtor() {
}

void RacobitRadarState_201::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RacobitRadarState_201::descriptor() {
  ::protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RacobitRadarState_201& RacobitRadarState_201::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::scc_info_RacobitRadarState_201.base);
  return *internal_default_instance();
}


void RacobitRadarState_201::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.RacobitRadarState_201)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&max_distance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&send_ext_info_) -
        reinterpret_cast<char*>(&max_distance_)) + sizeof(send_ext_info_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RacobitRadarState_201::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.RacobitRadarState_201)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_distance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_max_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radar_power = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_radar_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radar_power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.racobit_radar.OutputType output_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::racobit_radar::OutputType_IsValid(value)) {
            set_output_type(static_cast< ::apollo::drivers::racobit_radar::OutputType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.racobit_radar.RcsThreshold rcs_threshold = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::racobit_radar::RcsThreshold_IsValid(value)) {
            set_rcs_threshold(static_cast< ::apollo::drivers::racobit_radar::RcsThreshold >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_quality = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_send_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_ext_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_send_ext_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_ext_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.RacobitRadarState_201)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.RacobitRadarState_201)
  return false;
#undef DO_
}

void RacobitRadarState_201::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.RacobitRadarState_201)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_distance(), output);
  }

  // optional uint32 radar_power = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->radar_power(), output);
  }

  // optional .apollo.drivers.racobit_radar.OutputType output_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->output_type(), output);
  }

  // optional .apollo.drivers.racobit_radar.RcsThreshold rcs_threshold = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->rcs_threshold(), output);
  }

  // optional bool send_quality = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->send_quality(), output);
  }

  // optional bool send_ext_info = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->send_ext_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.RacobitRadarState_201)
}

::google::protobuf::uint8* RacobitRadarState_201::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.RacobitRadarState_201)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 max_distance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_distance(), target);
  }

  // optional uint32 radar_power = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->radar_power(), target);
  }

  // optional .apollo.drivers.racobit_radar.OutputType output_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->output_type(), target);
  }

  // optional .apollo.drivers.racobit_radar.RcsThreshold rcs_threshold = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->rcs_threshold(), target);
  }

  // optional bool send_quality = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->send_quality(), target);
  }

  // optional bool send_ext_info = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->send_ext_info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.RacobitRadarState_201)
  return target;
}

size_t RacobitRadarState_201::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.RacobitRadarState_201)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 max_distance = 1;
    if (has_max_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_distance());
    }

    // optional uint32 radar_power = 2;
    if (has_radar_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radar_power());
    }

    // optional .apollo.drivers.racobit_radar.OutputType output_type = 3;
    if (has_output_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_type());
    }

    // optional .apollo.drivers.racobit_radar.RcsThreshold rcs_threshold = 4;
    if (has_rcs_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rcs_threshold());
    }

    // optional bool send_quality = 5;
    if (has_send_quality()) {
      total_size += 1 + 1;
    }

    // optional bool send_ext_info = 6;
    if (has_send_ext_info()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RacobitRadarState_201::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.RacobitRadarState_201)
  GOOGLE_DCHECK_NE(&from, this);
  const RacobitRadarState_201* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RacobitRadarState_201>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.RacobitRadarState_201)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.RacobitRadarState_201)
    MergeFrom(*source);
  }
}

void RacobitRadarState_201::MergeFrom(const RacobitRadarState_201& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.RacobitRadarState_201)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      max_distance_ = from.max_distance_;
    }
    if (cached_has_bits & 0x00000002u) {
      radar_power_ = from.radar_power_;
    }
    if (cached_has_bits & 0x00000004u) {
      output_type_ = from.output_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      rcs_threshold_ = from.rcs_threshold_;
    }
    if (cached_has_bits & 0x00000010u) {
      send_quality_ = from.send_quality_;
    }
    if (cached_has_bits & 0x00000020u) {
      send_ext_info_ = from.send_ext_info_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RacobitRadarState_201::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.RacobitRadarState_201)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RacobitRadarState_201::CopyFrom(const RacobitRadarState_201& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.RacobitRadarState_201)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RacobitRadarState_201::IsInitialized() const {
  return true;
}

void RacobitRadarState_201::Swap(RacobitRadarState_201* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RacobitRadarState_201::InternalSwap(RacobitRadarState_201* other) {
  using std::swap;
  swap(max_distance_, other->max_distance_);
  swap(radar_power_, other->radar_power_);
  swap(output_type_, other->output_type_);
  swap(rcs_threshold_, other->rcs_threshold_);
  swap(send_quality_, other->send_quality_);
  swap(send_ext_info_, other->send_ext_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RacobitRadarState_201::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RacobitRadarObs::InitAsDefaultInstance() {
  ::apollo::drivers::_RacobitRadarObs_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
void RacobitRadarObs::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RacobitRadarObs::kHeaderFieldNumber;
const int RacobitRadarObs::kClusterortrackFieldNumber;
const int RacobitRadarObs::kObstacleIdFieldNumber;
const int RacobitRadarObs::kLongitudeDistFieldNumber;
const int RacobitRadarObs::kLateralDistFieldNumber;
const int RacobitRadarObs::kLongitudeVelFieldNumber;
const int RacobitRadarObs::kLateralVelFieldNumber;
const int RacobitRadarObs::kRcsFieldNumber;
const int RacobitRadarObs::kDynpropFieldNumber;
const int RacobitRadarObs::kLongitudeDistRmsFieldNumber;
const int RacobitRadarObs::kLateralDistRmsFieldNumber;
const int RacobitRadarObs::kLongitudeVelRmsFieldNumber;
const int RacobitRadarObs::kLateralVelRmsFieldNumber;
const int RacobitRadarObs::kProbexistFieldNumber;
const int RacobitRadarObs::kMeasStateFieldNumber;
const int RacobitRadarObs::kLongitudeAccelFieldNumber;
const int RacobitRadarObs::kLateralAccelFieldNumber;
const int RacobitRadarObs::kOritationAngleFieldNumber;
const int RacobitRadarObs::kLongitudeAccelRmsFieldNumber;
const int RacobitRadarObs::kLateralAccelRmsFieldNumber;
const int RacobitRadarObs::kOritationAngleRmsFieldNumber;
const int RacobitRadarObs::kLengthFieldNumber;
const int RacobitRadarObs::kWidthFieldNumber;
const int RacobitRadarObs::kObstacleClassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RacobitRadarObs::RacobitRadarObs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::scc_info_RacobitRadarObs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.RacobitRadarObs)
}
RacobitRadarObs::RacobitRadarObs(const RacobitRadarObs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&clusterortrack_, &from.clusterortrack_,
    static_cast<size_t>(reinterpret_cast<char*>(&obstacle_class_) -
    reinterpret_cast<char*>(&clusterortrack_)) + sizeof(obstacle_class_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.RacobitRadarObs)
}

void RacobitRadarObs::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obstacle_class_) -
      reinterpret_cast<char*>(&header_)) + sizeof(obstacle_class_));
}

RacobitRadarObs::~RacobitRadarObs() {
  // @@protoc_insertion_point(destructor:apollo.drivers.RacobitRadarObs)
  SharedDtor();
}

void RacobitRadarObs::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void RacobitRadarObs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RacobitRadarObs::descriptor() {
  ::protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RacobitRadarObs& RacobitRadarObs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::scc_info_RacobitRadarObs.base);
  return *internal_default_instance();
}


void RacobitRadarObs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.RacobitRadarObs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&clusterortrack_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rcs_) -
        reinterpret_cast<char*>(&clusterortrack_)) + sizeof(rcs_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&longitude_dist_rms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longitude_accel_) -
        reinterpret_cast<char*>(&longitude_dist_rms_)) + sizeof(longitude_accel_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&lateral_accel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obstacle_class_) -
        reinterpret_cast<char*>(&lateral_accel_)) + sizeof(obstacle_class_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RacobitRadarObs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.RacobitRadarObs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clusterortrack = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_clusterortrack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clusterortrack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obstacle_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_obstacle_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstacle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude_dist = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_longitude_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_dist = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_lateral_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude_vel = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_longitude_vel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_vel = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_lateral_vel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rcs = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_rcs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rcs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dynprop = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_dynprop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dynprop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude_dist_rms = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_longitude_dist_rms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_dist_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_dist_rms = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_lateral_dist_rms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_dist_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude_vel_rms = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_longitude_vel_rms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_vel_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_vel_rms = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_lateral_vel_rms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_vel_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double probexist = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_probexist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probexist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 meas_state = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_meas_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meas_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude_accel = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_longitude_accel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_accel = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_lateral_accel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double oritation_angle = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_oritation_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &oritation_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude_accel_rms = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {
          set_has_longitude_accel_rms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_accel_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_accel_rms = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {
          set_has_lateral_accel_rms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_accel_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double oritation_angle_rms = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_oritation_angle_rms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &oritation_angle_rms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obstacle_class = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_obstacle_class();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstacle_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.RacobitRadarObs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.RacobitRadarObs)
  return false;
#undef DO_
}

void RacobitRadarObs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.RacobitRadarObs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional bool clusterortrack = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->clusterortrack(), output);
  }

  // optional int32 obstacle_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->obstacle_id(), output);
  }

  // optional double longitude_dist = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude_dist(), output);
  }

  // optional double lateral_dist = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lateral_dist(), output);
  }

  // optional double longitude_vel = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->longitude_vel(), output);
  }

  // optional double lateral_vel = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->lateral_vel(), output);
  }

  // optional double rcs = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->rcs(), output);
  }

  // optional int32 dynprop = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dynprop(), output);
  }

  // optional double longitude_dist_rms = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->longitude_dist_rms(), output);
  }

  // optional double lateral_dist_rms = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->lateral_dist_rms(), output);
  }

  // optional double longitude_vel_rms = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->longitude_vel_rms(), output);
  }

  // optional double lateral_vel_rms = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->lateral_vel_rms(), output);
  }

  // optional double probexist = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->probexist(), output);
  }

  // optional int32 meas_state = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->meas_state(), output);
  }

  // optional double longitude_accel = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->longitude_accel(), output);
  }

  // optional double lateral_accel = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->lateral_accel(), output);
  }

  // optional double oritation_angle = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->oritation_angle(), output);
  }

  // optional double longitude_accel_rms = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->longitude_accel_rms(), output);
  }

  // optional double lateral_accel_rms = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->lateral_accel_rms(), output);
  }

  // optional double oritation_angle_rms = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->oritation_angle_rms(), output);
  }

  // optional double length = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->length(), output);
  }

  // optional double width = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->width(), output);
  }

  // optional int32 obstacle_class = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->obstacle_class(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.RacobitRadarObs)
}

::google::protobuf::uint8* RacobitRadarObs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.RacobitRadarObs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional bool clusterortrack = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->clusterortrack(), target);
  }

  // optional int32 obstacle_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->obstacle_id(), target);
  }

  // optional double longitude_dist = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude_dist(), target);
  }

  // optional double lateral_dist = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lateral_dist(), target);
  }

  // optional double longitude_vel = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->longitude_vel(), target);
  }

  // optional double lateral_vel = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->lateral_vel(), target);
  }

  // optional double rcs = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->rcs(), target);
  }

  // optional int32 dynprop = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dynprop(), target);
  }

  // optional double longitude_dist_rms = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->longitude_dist_rms(), target);
  }

  // optional double lateral_dist_rms = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->lateral_dist_rms(), target);
  }

  // optional double longitude_vel_rms = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->longitude_vel_rms(), target);
  }

  // optional double lateral_vel_rms = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->lateral_vel_rms(), target);
  }

  // optional double probexist = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->probexist(), target);
  }

  // optional int32 meas_state = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->meas_state(), target);
  }

  // optional double longitude_accel = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->longitude_accel(), target);
  }

  // optional double lateral_accel = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->lateral_accel(), target);
  }

  // optional double oritation_angle = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->oritation_angle(), target);
  }

  // optional double longitude_accel_rms = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->longitude_accel_rms(), target);
  }

  // optional double lateral_accel_rms = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->lateral_accel_rms(), target);
  }

  // optional double oritation_angle_rms = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->oritation_angle_rms(), target);
  }

  // optional double length = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->length(), target);
  }

  // optional double width = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->width(), target);
  }

  // optional int32 obstacle_class = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->obstacle_class(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.RacobitRadarObs)
  return target;
}

size_t RacobitRadarObs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.RacobitRadarObs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional bool clusterortrack = 2;
    if (has_clusterortrack()) {
      total_size += 1 + 1;
    }

    // optional int32 obstacle_id = 3;
    if (has_obstacle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obstacle_id());
    }

    // optional double longitude_dist = 4;
    if (has_longitude_dist()) {
      total_size += 1 + 8;
    }

    // optional double lateral_dist = 5;
    if (has_lateral_dist()) {
      total_size += 1 + 8;
    }

    // optional double longitude_vel = 6;
    if (has_longitude_vel()) {
      total_size += 1 + 8;
    }

    // optional double lateral_vel = 7;
    if (has_lateral_vel()) {
      total_size += 1 + 8;
    }

    // optional double rcs = 8;
    if (has_rcs()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double longitude_dist_rms = 10;
    if (has_longitude_dist_rms()) {
      total_size += 1 + 8;
    }

    // optional double lateral_dist_rms = 11;
    if (has_lateral_dist_rms()) {
      total_size += 1 + 8;
    }

    // optional double longitude_vel_rms = 12;
    if (has_longitude_vel_rms()) {
      total_size += 1 + 8;
    }

    // optional int32 dynprop = 9;
    if (has_dynprop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dynprop());
    }

    // optional int32 meas_state = 15;
    if (has_meas_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->meas_state());
    }

    // optional double lateral_vel_rms = 13;
    if (has_lateral_vel_rms()) {
      total_size += 1 + 8;
    }

    // optional double probexist = 14;
    if (has_probexist()) {
      total_size += 1 + 8;
    }

    // optional double longitude_accel = 16;
    if (has_longitude_accel()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double lateral_accel = 17;
    if (has_lateral_accel()) {
      total_size += 2 + 8;
    }

    // optional double oritation_angle = 18;
    if (has_oritation_angle()) {
      total_size += 2 + 8;
    }

    // optional double longitude_accel_rms = 19;
    if (has_longitude_accel_rms()) {
      total_size += 2 + 8;
    }

    // optional double lateral_accel_rms = 20;
    if (has_lateral_accel_rms()) {
      total_size += 2 + 8;
    }

    // optional double oritation_angle_rms = 21;
    if (has_oritation_angle_rms()) {
      total_size += 2 + 8;
    }

    // optional double length = 22;
    if (has_length()) {
      total_size += 2 + 8;
    }

    // optional double width = 23;
    if (has_width()) {
      total_size += 2 + 8;
    }

    // optional int32 obstacle_class = 24;
    if (has_obstacle_class()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obstacle_class());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RacobitRadarObs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.RacobitRadarObs)
  GOOGLE_DCHECK_NE(&from, this);
  const RacobitRadarObs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RacobitRadarObs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.RacobitRadarObs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.RacobitRadarObs)
    MergeFrom(*source);
  }
}

void RacobitRadarObs::MergeFrom(const RacobitRadarObs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.RacobitRadarObs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      clusterortrack_ = from.clusterortrack_;
    }
    if (cached_has_bits & 0x00000004u) {
      obstacle_id_ = from.obstacle_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      longitude_dist_ = from.longitude_dist_;
    }
    if (cached_has_bits & 0x00000010u) {
      lateral_dist_ = from.lateral_dist_;
    }
    if (cached_has_bits & 0x00000020u) {
      longitude_vel_ = from.longitude_vel_;
    }
    if (cached_has_bits & 0x00000040u) {
      lateral_vel_ = from.lateral_vel_;
    }
    if (cached_has_bits & 0x00000080u) {
      rcs_ = from.rcs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      longitude_dist_rms_ = from.longitude_dist_rms_;
    }
    if (cached_has_bits & 0x00000200u) {
      lateral_dist_rms_ = from.lateral_dist_rms_;
    }
    if (cached_has_bits & 0x00000400u) {
      longitude_vel_rms_ = from.longitude_vel_rms_;
    }
    if (cached_has_bits & 0x00000800u) {
      dynprop_ = from.dynprop_;
    }
    if (cached_has_bits & 0x00001000u) {
      meas_state_ = from.meas_state_;
    }
    if (cached_has_bits & 0x00002000u) {
      lateral_vel_rms_ = from.lateral_vel_rms_;
    }
    if (cached_has_bits & 0x00004000u) {
      probexist_ = from.probexist_;
    }
    if (cached_has_bits & 0x00008000u) {
      longitude_accel_ = from.longitude_accel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      lateral_accel_ = from.lateral_accel_;
    }
    if (cached_has_bits & 0x00020000u) {
      oritation_angle_ = from.oritation_angle_;
    }
    if (cached_has_bits & 0x00040000u) {
      longitude_accel_rms_ = from.longitude_accel_rms_;
    }
    if (cached_has_bits & 0x00080000u) {
      lateral_accel_rms_ = from.lateral_accel_rms_;
    }
    if (cached_has_bits & 0x00100000u) {
      oritation_angle_rms_ = from.oritation_angle_rms_;
    }
    if (cached_has_bits & 0x00200000u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00400000u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00800000u) {
      obstacle_class_ = from.obstacle_class_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RacobitRadarObs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.RacobitRadarObs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RacobitRadarObs::CopyFrom(const RacobitRadarObs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.RacobitRadarObs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RacobitRadarObs::IsInitialized() const {
  return true;
}

void RacobitRadarObs::Swap(RacobitRadarObs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RacobitRadarObs::InternalSwap(RacobitRadarObs* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(clusterortrack_, other->clusterortrack_);
  swap(obstacle_id_, other->obstacle_id_);
  swap(longitude_dist_, other->longitude_dist_);
  swap(lateral_dist_, other->lateral_dist_);
  swap(longitude_vel_, other->longitude_vel_);
  swap(lateral_vel_, other->lateral_vel_);
  swap(rcs_, other->rcs_);
  swap(longitude_dist_rms_, other->longitude_dist_rms_);
  swap(lateral_dist_rms_, other->lateral_dist_rms_);
  swap(longitude_vel_rms_, other->longitude_vel_rms_);
  swap(dynprop_, other->dynprop_);
  swap(meas_state_, other->meas_state_);
  swap(lateral_vel_rms_, other->lateral_vel_rms_);
  swap(probexist_, other->probexist_);
  swap(longitude_accel_, other->longitude_accel_);
  swap(lateral_accel_, other->lateral_accel_);
  swap(oritation_angle_, other->oritation_angle_);
  swap(longitude_accel_rms_, other->longitude_accel_rms_);
  swap(lateral_accel_rms_, other->lateral_accel_rms_);
  swap(oritation_angle_rms_, other->oritation_angle_rms_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(obstacle_class_, other->obstacle_class_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RacobitRadarObs::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RacobitRadar::InitAsDefaultInstance() {
  ::apollo::drivers::_RacobitRadar_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::drivers::_RacobitRadar_default_instance_._instance.get_mutable()->radar_state_ = const_cast< ::apollo::drivers::RacobitRadarState_201*>(
      ::apollo::drivers::RacobitRadarState_201::internal_default_instance());
  ::apollo::drivers::_RacobitRadar_default_instance_._instance.get_mutable()->cluster_list_status_ = const_cast< ::apollo::drivers::RacobitClusterListStatus_600*>(
      ::apollo::drivers::RacobitClusterListStatus_600::internal_default_instance());
  ::apollo::drivers::_RacobitRadar_default_instance_._instance.get_mutable()->object_list_status_ = const_cast< ::apollo::drivers::RacobitObjectListStatus_60A*>(
      ::apollo::drivers::RacobitObjectListStatus_60A::internal_default_instance());
}
void RacobitRadar::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RacobitRadar::kHeaderFieldNumber;
const int RacobitRadar::kContiobsFieldNumber;
const int RacobitRadar::kRadarStateFieldNumber;
const int RacobitRadar::kClusterListStatusFieldNumber;
const int RacobitRadar::kObjectListStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RacobitRadar::RacobitRadar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::scc_info_RacobitRadar.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.RacobitRadar)
}
RacobitRadar::RacobitRadar(const RacobitRadar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      contiobs_(from.contiobs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_radar_state()) {
    radar_state_ = new ::apollo::drivers::RacobitRadarState_201(*from.radar_state_);
  } else {
    radar_state_ = NULL;
  }
  if (from.has_cluster_list_status()) {
    cluster_list_status_ = new ::apollo::drivers::RacobitClusterListStatus_600(*from.cluster_list_status_);
  } else {
    cluster_list_status_ = NULL;
  }
  if (from.has_object_list_status()) {
    object_list_status_ = new ::apollo::drivers::RacobitObjectListStatus_60A(*from.object_list_status_);
  } else {
    object_list_status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.RacobitRadar)
}

void RacobitRadar::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_list_status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(object_list_status_));
}

RacobitRadar::~RacobitRadar() {
  // @@protoc_insertion_point(destructor:apollo.drivers.RacobitRadar)
  SharedDtor();
}

void RacobitRadar::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete radar_state_;
  if (this != internal_default_instance()) delete cluster_list_status_;
  if (this != internal_default_instance()) delete object_list_status_;
}

void RacobitRadar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RacobitRadar::descriptor() {
  ::protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RacobitRadar& RacobitRadar::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::scc_info_RacobitRadar.base);
  return *internal_default_instance();
}


void RacobitRadar::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.RacobitRadar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contiobs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(radar_state_ != NULL);
      radar_state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cluster_list_status_ != NULL);
      cluster_list_status_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(object_list_status_ != NULL);
      object_list_status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RacobitRadar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.RacobitRadar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.drivers.RacobitRadarObs contiobs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_contiobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.RacobitRadarState_201 radar_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_radar_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.RacobitClusterListStatus_600 cluster_list_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cluster_list_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.RacobitObjectListStatus_60A object_list_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_object_list_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.RacobitRadar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.RacobitRadar)
  return false;
#undef DO_
}

void RacobitRadar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.RacobitRadar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // repeated .apollo.drivers.RacobitRadarObs contiobs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contiobs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->contiobs(static_cast<int>(i)),
      output);
  }

  // optional .apollo.drivers.RacobitRadarState_201 radar_state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_radar_state(), output);
  }

  // optional .apollo.drivers.RacobitClusterListStatus_600 cluster_list_status = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_cluster_list_status(), output);
  }

  // optional .apollo.drivers.RacobitObjectListStatus_60A object_list_status = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_object_list_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.RacobitRadar)
}

::google::protobuf::uint8* RacobitRadar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.RacobitRadar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // repeated .apollo.drivers.RacobitRadarObs contiobs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contiobs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->contiobs(static_cast<int>(i)), deterministic, target);
  }

  // optional .apollo.drivers.RacobitRadarState_201 radar_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_radar_state(), deterministic, target);
  }

  // optional .apollo.drivers.RacobitClusterListStatus_600 cluster_list_status = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_cluster_list_status(), deterministic, target);
  }

  // optional .apollo.drivers.RacobitObjectListStatus_60A object_list_status = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_object_list_status(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.RacobitRadar)
  return target;
}

size_t RacobitRadar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.RacobitRadar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.drivers.RacobitRadarObs contiobs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->contiobs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->contiobs(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.drivers.RacobitRadarState_201 radar_state = 3;
    if (has_radar_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *radar_state_);
    }

    // optional .apollo.drivers.RacobitClusterListStatus_600 cluster_list_status = 4;
    if (has_cluster_list_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cluster_list_status_);
    }

    // optional .apollo.drivers.RacobitObjectListStatus_60A object_list_status = 5;
    if (has_object_list_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *object_list_status_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RacobitRadar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.RacobitRadar)
  GOOGLE_DCHECK_NE(&from, this);
  const RacobitRadar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RacobitRadar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.RacobitRadar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.RacobitRadar)
    MergeFrom(*source);
  }
}

void RacobitRadar::MergeFrom(const RacobitRadar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.RacobitRadar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contiobs_.MergeFrom(from.contiobs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_radar_state()->::apollo::drivers::RacobitRadarState_201::MergeFrom(from.radar_state());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_cluster_list_status()->::apollo::drivers::RacobitClusterListStatus_600::MergeFrom(from.cluster_list_status());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_object_list_status()->::apollo::drivers::RacobitObjectListStatus_60A::MergeFrom(from.object_list_status());
    }
  }
}

void RacobitRadar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.RacobitRadar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RacobitRadar::CopyFrom(const RacobitRadar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.RacobitRadar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RacobitRadar::IsInitialized() const {
  return true;
}

void RacobitRadar::Swap(RacobitRadar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RacobitRadar::InternalSwap(RacobitRadar* other) {
  using std::swap;
  CastToBase(&contiobs_)->InternalSwap(CastToBase(&other->contiobs_));
  swap(header_, other->header_);
  swap(radar_state_, other->radar_state_);
  swap(cluster_list_status_, other->cluster_list_status_);
  swap(object_list_status_, other->object_list_status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RacobitRadar::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fracobit_5fradar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace drivers
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::RacobitClusterListStatus_600* Arena::CreateMaybeMessage< ::apollo::drivers::RacobitClusterListStatus_600 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::RacobitClusterListStatus_600 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::RacobitObjectListStatus_60A* Arena::CreateMaybeMessage< ::apollo::drivers::RacobitObjectListStatus_60A >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::RacobitObjectListStatus_60A >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::RacobitRadarState_201* Arena::CreateMaybeMessage< ::apollo::drivers::RacobitRadarState_201 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::RacobitRadarState_201 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::RacobitRadarObs* Arena::CreateMaybeMessage< ::apollo::drivers::RacobitRadarObs >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::RacobitRadarObs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::RacobitRadar* Arena::CreateMaybeMessage< ::apollo::drivers::RacobitRadar >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::RacobitRadar >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
