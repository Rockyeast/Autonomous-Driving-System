// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/ultrasonic_radar.proto

#ifndef PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fultrasonic_5fradar_2eproto
#define PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fultrasonic_5fradar_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fproto_2fultrasonic_5fradar_2eproto 

namespace protobuf_modules_2fdrivers_2fproto_2fultrasonic_5fradar_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fdrivers_2fproto_2fultrasonic_5fradar_2eproto
namespace apollo {
namespace drivers {
class Ultrasonic;
class UltrasonicDefaultTypeInternal;
extern UltrasonicDefaultTypeInternal _Ultrasonic_default_instance_;
}  // namespace drivers
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::drivers::Ultrasonic* Arena::CreateMaybeMessage<::apollo::drivers::Ultrasonic>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace drivers {

// ===================================================================

class Ultrasonic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.Ultrasonic) */ {
 public:
  Ultrasonic();
  virtual ~Ultrasonic();

  Ultrasonic(const Ultrasonic& from);

  inline Ultrasonic& operator=(const Ultrasonic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ultrasonic(Ultrasonic&& from) noexcept
    : Ultrasonic() {
    *this = ::std::move(from);
  }

  inline Ultrasonic& operator=(Ultrasonic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ultrasonic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ultrasonic* internal_default_instance() {
    return reinterpret_cast<const Ultrasonic*>(
               &_Ultrasonic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Ultrasonic* other);
  friend void swap(Ultrasonic& a, Ultrasonic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ultrasonic* New() const final {
    return CreateMaybeMessage<Ultrasonic>(NULL);
  }

  Ultrasonic* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ultrasonic>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ultrasonic& from);
  void MergeFrom(const Ultrasonic& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ultrasonic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float ranges = 2;
  int ranges_size() const;
  void clear_ranges();
  static const int kRangesFieldNumber = 2;
  float ranges(int index) const;
  void set_ranges(int index, float value);
  void add_ranges(float value);
  const ::google::protobuf::RepeatedField< float >&
      ranges() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_ranges();

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::apollo::common::Header& _internal_header() const;
  public:
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // @@protoc_insertion_point(class_scope:apollo.drivers.Ultrasonic)
 private:
  void set_has_header();
  void clear_has_header();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< float > ranges_;
  ::apollo::common::Header* header_;
  friend struct ::protobuf_modules_2fdrivers_2fproto_2fultrasonic_5fradar_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ultrasonic

// optional .apollo.common.Header header = 1;
inline bool Ultrasonic::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ultrasonic::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ultrasonic::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::common::Header& Ultrasonic::_internal_header() const {
  return *header_;
}
inline const ::apollo::common::Header& Ultrasonic::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.drivers.Ultrasonic.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* Ultrasonic::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.Ultrasonic.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::common::Header* Ultrasonic::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.Ultrasonic.header)
  return header_;
}
inline void Ultrasonic::set_allocated_header(::apollo::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.Ultrasonic.header)
}

// repeated float ranges = 2;
inline int Ultrasonic::ranges_size() const {
  return ranges_.size();
}
inline void Ultrasonic::clear_ranges() {
  ranges_.Clear();
}
inline float Ultrasonic::ranges(int index) const {
  // @@protoc_insertion_point(field_get:apollo.drivers.Ultrasonic.ranges)
  return ranges_.Get(index);
}
inline void Ultrasonic::set_ranges(int index, float value) {
  ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.drivers.Ultrasonic.ranges)
}
inline void Ultrasonic::add_ranges(float value) {
  ranges_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.drivers.Ultrasonic.ranges)
}
inline const ::google::protobuf::RepeatedField< float >&
Ultrasonic::ranges() const {
  // @@protoc_insertion_point(field_list:apollo.drivers.Ultrasonic.ranges)
  return ranges_;
}
inline ::google::protobuf::RepeatedField< float >*
Ultrasonic::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:apollo.drivers.Ultrasonic.ranges)
  return &ranges_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fultrasonic_5fradar_2eproto
