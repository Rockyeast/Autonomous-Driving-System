// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/radar.proto

#include "modules/drivers/proto/radar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point2D;
}  // namespace protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto
namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fheader_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto
namespace protobuf_modules_2fdrivers_2fproto_2fradar_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fproto_2fradar_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RadarObstacle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fproto_2fradar_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RadarObstacles_RadarObstacleEntry_DoNotUse;
}  // namespace protobuf_modules_2fdrivers_2fproto_2fradar_2eproto
namespace apollo {
namespace drivers {
class RadarObstacleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RadarObstacle>
      _instance;
} _RadarObstacle_default_instance_;
class RadarObstacles_RadarObstacleEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RadarObstacles_RadarObstacleEntry_DoNotUse>
      _instance;
} _RadarObstacles_RadarObstacleEntry_DoNotUse_default_instance_;
class RadarObstaclesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RadarObstacles>
      _instance;
} _RadarObstacles_default_instance_;
}  // namespace drivers
}  // namespace apollo
namespace protobuf_modules_2fdrivers_2fproto_2fradar_2eproto {
static void InitDefaultsRadarObstacle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_RadarObstacle_default_instance_;
    new (ptr) ::apollo::drivers::RadarObstacle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::RadarObstacle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RadarObstacle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRadarObstacle}, {
      &protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::scc_info_Point2D.base,}};

static void InitDefaultsRadarObstacles_RadarObstacleEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_RadarObstacles_RadarObstacleEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse();
  }
  ::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RadarObstacles_RadarObstacleEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRadarObstacles_RadarObstacleEntry_DoNotUse}, {
      &protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::scc_info_RadarObstacle.base,}};

static void InitDefaultsRadarObstacles() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_RadarObstacles_default_instance_;
    new (ptr) ::apollo::drivers::RadarObstacles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::RadarObstacles::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RadarObstacles =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRadarObstacles}, {
      &protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::scc_info_RadarObstacles_RadarObstacleEntry_DoNotUse.base,
      &protobuf_modules_2fcommon_2fproto_2fheader_2eproto::scc_info_Header.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RadarObstacle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RadarObstacles_RadarObstacleEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RadarObstacles.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacle, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacle, relative_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacle, relative_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacle, rcs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacle, moving_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacle, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacle, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacle, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacle, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacle, absolute_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacle, absolute_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacle, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacle, moving_frames_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacle, status_),
  4,
  0,
  1,
  6,
  5,
  7,
  8,
  9,
  10,
  2,
  3,
  11,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacles, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacles, radar_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacles, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::RadarObstacles, error_code_),
  ~0u,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, sizeof(::apollo::drivers::RadarObstacle)},
  { 33, 40, sizeof(::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse)},
  { 42, 50, sizeof(::apollo::drivers::RadarObstacles)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::_RadarObstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::_RadarObstacles_RadarObstacleEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::_RadarObstacles_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/drivers/proto/radar.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!modules/drivers/proto/radar.proto\022\016apo"
      "llo.drivers\032%modules/common/proto/error_"
      "code.proto\032!modules/common/proto/header."
      "proto\032#modules/common/proto/geometry.pro"
      "to\"\314\005\n\rRadarObstacle\022\n\n\002id\030\001 \001(\005\0221\n\021rela"
      "tive_position\030\002 \001(\0132\026.apollo.common.Poin"
      "t2D\0221\n\021relative_velocity\030\003 \001(\0132\026.apollo."
      "common.Point2D\022\013\n\003rcs\030\004 \001(\001\022A\n\rmoving_st"
      "atus\030\005 \001(\0162*.apollo.drivers.RadarObstacl"
      "e.MovingStatus\022\r\n\005width\030\006 \001(\001\022\016\n\006length\030"
      "\007 \001(\001\022\016\n\006height\030\010 \001(\001\022\r\n\005theta\030\t \001(\001\0221\n\021"
      "absolute_position\030\n \001(\0132\026.apollo.common."
      "Point2D\0221\n\021absolute_velocity\030\013 \001(\0132\026.apo"
      "llo.common.Point2D\022\r\n\005count\030\014 \001(\005\022\033\n\023mov"
      "ing_frames_count\030\r \001(\005\0224\n\006status\030\016 \001(\0162$"
      ".apollo.drivers.RadarObstacle.Status\"\256\001\n"
      "\006Status\022\r\n\tNO_TARGET\020\000\022\016\n\nNEW_TARGET\020\001\022\026"
      "\n\022NEW_UPDATED_TARGET\020\002\022\022\n\016UPDATED_TARGET"
      "\020\003\022\022\n\016COASTED_TARGET\020\004\022\021\n\rMERGED_TARGET\020"
      "\005\022\032\n\026INVALID_COASTED_TARGET\020\006\022\026\n\022NEW_COA"
      "STED_TARGET\020\007\"B\n\014MovingStatus\022\016\n\nSTATION"
      "ARY\020\000\022\013\n\007NEARING\020\001\022\013\n\007AWAYING\020\002\022\010\n\004NONE\020"
      "\003\"\211\002\n\016RadarObstacles\022I\n\016radar_obstacle\030\001"
      " \003(\01321.apollo.drivers.RadarObstacles.Rad"
      "arObstacleEntry\022%\n\006header\030\002 \001(\0132\025.apollo"
      ".common.Header\0220\n\nerror_code\030\003 \001(\0162\030.apo"
      "llo.common.ErrorCode:\002OK\032S\n\022RadarObstacl"
      "eEntry\022\013\n\003key\030\001 \001(\005\022,\n\005value\030\002 \001(\0132\035.apo"
      "llo.drivers.RadarObstacle:\0028\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1149);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/drivers/proto/radar.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fcommon_2fproto_2ferror_5fcode_2eproto::AddDescriptors();
  ::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fdrivers_2fproto_2fradar_2eproto
namespace apollo {
namespace drivers {
const ::google::protobuf::EnumDescriptor* RadarObstacle_Status_descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::file_level_enum_descriptors[0];
}
bool RadarObstacle_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RadarObstacle_Status RadarObstacle::NO_TARGET;
const RadarObstacle_Status RadarObstacle::NEW_TARGET;
const RadarObstacle_Status RadarObstacle::NEW_UPDATED_TARGET;
const RadarObstacle_Status RadarObstacle::UPDATED_TARGET;
const RadarObstacle_Status RadarObstacle::COASTED_TARGET;
const RadarObstacle_Status RadarObstacle::MERGED_TARGET;
const RadarObstacle_Status RadarObstacle::INVALID_COASTED_TARGET;
const RadarObstacle_Status RadarObstacle::NEW_COASTED_TARGET;
const RadarObstacle_Status RadarObstacle::Status_MIN;
const RadarObstacle_Status RadarObstacle::Status_MAX;
const int RadarObstacle::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RadarObstacle_MovingStatus_descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::file_level_enum_descriptors[1];
}
bool RadarObstacle_MovingStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RadarObstacle_MovingStatus RadarObstacle::STATIONARY;
const RadarObstacle_MovingStatus RadarObstacle::NEARING;
const RadarObstacle_MovingStatus RadarObstacle::AWAYING;
const RadarObstacle_MovingStatus RadarObstacle::NONE;
const RadarObstacle_MovingStatus RadarObstacle::MovingStatus_MIN;
const RadarObstacle_MovingStatus RadarObstacle::MovingStatus_MAX;
const int RadarObstacle::MovingStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void RadarObstacle::InitAsDefaultInstance() {
  ::apollo::drivers::_RadarObstacle_default_instance_._instance.get_mutable()->relative_position_ = const_cast< ::apollo::common::Point2D*>(
      ::apollo::common::Point2D::internal_default_instance());
  ::apollo::drivers::_RadarObstacle_default_instance_._instance.get_mutable()->relative_velocity_ = const_cast< ::apollo::common::Point2D*>(
      ::apollo::common::Point2D::internal_default_instance());
  ::apollo::drivers::_RadarObstacle_default_instance_._instance.get_mutable()->absolute_position_ = const_cast< ::apollo::common::Point2D*>(
      ::apollo::common::Point2D::internal_default_instance());
  ::apollo::drivers::_RadarObstacle_default_instance_._instance.get_mutable()->absolute_velocity_ = const_cast< ::apollo::common::Point2D*>(
      ::apollo::common::Point2D::internal_default_instance());
}
void RadarObstacle::clear_relative_position() {
  if (relative_position_ != NULL) relative_position_->Clear();
  clear_has_relative_position();
}
void RadarObstacle::clear_relative_velocity() {
  if (relative_velocity_ != NULL) relative_velocity_->Clear();
  clear_has_relative_velocity();
}
void RadarObstacle::clear_absolute_position() {
  if (absolute_position_ != NULL) absolute_position_->Clear();
  clear_has_absolute_position();
}
void RadarObstacle::clear_absolute_velocity() {
  if (absolute_velocity_ != NULL) absolute_velocity_->Clear();
  clear_has_absolute_velocity();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarObstacle::kIdFieldNumber;
const int RadarObstacle::kRelativePositionFieldNumber;
const int RadarObstacle::kRelativeVelocityFieldNumber;
const int RadarObstacle::kRcsFieldNumber;
const int RadarObstacle::kMovingStatusFieldNumber;
const int RadarObstacle::kWidthFieldNumber;
const int RadarObstacle::kLengthFieldNumber;
const int RadarObstacle::kHeightFieldNumber;
const int RadarObstacle::kThetaFieldNumber;
const int RadarObstacle::kAbsolutePositionFieldNumber;
const int RadarObstacle::kAbsoluteVelocityFieldNumber;
const int RadarObstacle::kCountFieldNumber;
const int RadarObstacle::kMovingFramesCountFieldNumber;
const int RadarObstacle::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarObstacle::RadarObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::scc_info_RadarObstacle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.RadarObstacle)
}
RadarObstacle::RadarObstacle(const RadarObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_relative_position()) {
    relative_position_ = new ::apollo::common::Point2D(*from.relative_position_);
  } else {
    relative_position_ = NULL;
  }
  if (from.has_relative_velocity()) {
    relative_velocity_ = new ::apollo::common::Point2D(*from.relative_velocity_);
  } else {
    relative_velocity_ = NULL;
  }
  if (from.has_absolute_position()) {
    absolute_position_ = new ::apollo::common::Point2D(*from.absolute_position_);
  } else {
    absolute_position_ = NULL;
  }
  if (from.has_absolute_velocity()) {
    absolute_velocity_ = new ::apollo::common::Point2D(*from.absolute_velocity_);
  } else {
    absolute_velocity_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.RadarObstacle)
}

void RadarObstacle::SharedCtor() {
  ::memset(&relative_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&relative_position_)) + sizeof(status_));
}

RadarObstacle::~RadarObstacle() {
  // @@protoc_insertion_point(destructor:apollo.drivers.RadarObstacle)
  SharedDtor();
}

void RadarObstacle::SharedDtor() {
  if (this != internal_default_instance()) delete relative_position_;
  if (this != internal_default_instance()) delete relative_velocity_;
  if (this != internal_default_instance()) delete absolute_position_;
  if (this != internal_default_instance()) delete absolute_velocity_;
}

void RadarObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RadarObstacle::descriptor() {
  ::protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RadarObstacle& RadarObstacle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::scc_info_RadarObstacle.base);
  return *internal_default_instance();
}


void RadarObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.RadarObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(relative_position_ != NULL);
      relative_position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(relative_velocity_ != NULL);
      relative_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(absolute_position_ != NULL);
      absolute_position_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(absolute_velocity_ != NULL);
      absolute_velocity_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&id_)) + sizeof(width_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&length_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RadarObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.RadarObstacle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point2D relative_position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point2D relative_velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rcs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_rcs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rcs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.RadarObstacle.MovingStatus moving_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::RadarObstacle_MovingStatus_IsValid(value)) {
            set_moving_status(static_cast< ::apollo::drivers::RadarObstacle_MovingStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point2D absolute_position = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_absolute_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point2D absolute_velocity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_absolute_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 moving_frames_count = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_moving_frames_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moving_frames_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.RadarObstacle.Status status = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::RadarObstacle_Status_IsValid(value)) {
            set_status(static_cast< ::apollo::drivers::RadarObstacle_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.RadarObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.RadarObstacle)
  return false;
#undef DO_
}

void RadarObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.RadarObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .apollo.common.Point2D relative_position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_relative_position(), output);
  }

  // optional .apollo.common.Point2D relative_velocity = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_relative_velocity(), output);
  }

  // optional double rcs = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rcs(), output);
  }

  // optional .apollo.drivers.RadarObstacle.MovingStatus moving_status = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->moving_status(), output);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->width(), output);
  }

  // optional double length = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->length(), output);
  }

  // optional double height = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->height(), output);
  }

  // optional double theta = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->theta(), output);
  }

  // optional .apollo.common.Point2D absolute_position = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_absolute_position(), output);
  }

  // optional .apollo.common.Point2D absolute_velocity = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_absolute_velocity(), output);
  }

  // optional int32 count = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->count(), output);
  }

  // optional int32 moving_frames_count = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->moving_frames_count(), output);
  }

  // optional .apollo.drivers.RadarObstacle.Status status = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.RadarObstacle)
}

::google::protobuf::uint8* RadarObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.RadarObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .apollo.common.Point2D relative_position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_relative_position(), deterministic, target);
  }

  // optional .apollo.common.Point2D relative_velocity = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_relative_velocity(), deterministic, target);
  }

  // optional double rcs = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rcs(), target);
  }

  // optional .apollo.drivers.RadarObstacle.MovingStatus moving_status = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->moving_status(), target);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->width(), target);
  }

  // optional double length = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->length(), target);
  }

  // optional double height = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->height(), target);
  }

  // optional double theta = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->theta(), target);
  }

  // optional .apollo.common.Point2D absolute_position = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_absolute_position(), deterministic, target);
  }

  // optional .apollo.common.Point2D absolute_velocity = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_absolute_velocity(), deterministic, target);
  }

  // optional int32 count = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->count(), target);
  }

  // optional int32 moving_frames_count = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->moving_frames_count(), target);
  }

  // optional .apollo.drivers.RadarObstacle.Status status = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.RadarObstacle)
  return target;
}

size_t RadarObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.RadarObstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.Point2D relative_position = 2;
    if (has_relative_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *relative_position_);
    }

    // optional .apollo.common.Point2D relative_velocity = 3;
    if (has_relative_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *relative_velocity_);
    }

    // optional .apollo.common.Point2D absolute_position = 10;
    if (has_absolute_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *absolute_position_);
    }

    // optional .apollo.common.Point2D absolute_velocity = 11;
    if (has_absolute_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *absolute_velocity_);
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .apollo.drivers.RadarObstacle.MovingStatus moving_status = 5;
    if (has_moving_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->moving_status());
    }

    // optional double rcs = 4;
    if (has_rcs()) {
      total_size += 1 + 8;
    }

    // optional double width = 6;
    if (has_width()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional double length = 7;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double height = 8;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional double theta = 9;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional int32 count = 12;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 moving_frames_count = 13;
    if (has_moving_frames_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moving_frames_count());
    }

    // optional .apollo.drivers.RadarObstacle.Status status = 14;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.RadarObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarObstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.RadarObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.RadarObstacle)
    MergeFrom(*source);
  }
}

void RadarObstacle::MergeFrom(const RadarObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.RadarObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_relative_position()->::apollo::common::Point2D::MergeFrom(from.relative_position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_relative_velocity()->::apollo::common::Point2D::MergeFrom(from.relative_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_absolute_position()->::apollo::common::Point2D::MergeFrom(from.absolute_position());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_absolute_velocity()->::apollo::common::Point2D::MergeFrom(from.absolute_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      moving_status_ = from.moving_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      rcs_ = from.rcs_;
    }
    if (cached_has_bits & 0x00000080u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000200u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000400u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000800u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00001000u) {
      moving_frames_count_ = from.moving_frames_count_;
    }
    if (cached_has_bits & 0x00002000u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadarObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.RadarObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarObstacle::CopyFrom(const RadarObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.RadarObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarObstacle::IsInitialized() const {
  return true;
}

void RadarObstacle::Swap(RadarObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarObstacle::InternalSwap(RadarObstacle* other) {
  using std::swap;
  swap(relative_position_, other->relative_position_);
  swap(relative_velocity_, other->relative_velocity_);
  swap(absolute_position_, other->absolute_position_);
  swap(absolute_velocity_, other->absolute_velocity_);
  swap(id_, other->id_);
  swap(moving_status_, other->moving_status_);
  swap(rcs_, other->rcs_);
  swap(width_, other->width_);
  swap(length_, other->length_);
  swap(height_, other->height_);
  swap(theta_, other->theta_);
  swap(count_, other->count_);
  swap(moving_frames_count_, other->moving_frames_count_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RadarObstacle::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

RadarObstacles_RadarObstacleEntry_DoNotUse::RadarObstacles_RadarObstacleEntry_DoNotUse() {}
RadarObstacles_RadarObstacleEntry_DoNotUse::RadarObstacles_RadarObstacleEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void RadarObstacles_RadarObstacleEntry_DoNotUse::MergeFrom(const RadarObstacles_RadarObstacleEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata RadarObstacles_RadarObstacleEntry_DoNotUse::GetMetadata() const {
  ::protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::file_level_metadata[1];
}
void RadarObstacles_RadarObstacleEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void RadarObstacles::InitAsDefaultInstance() {
  ::apollo::drivers::_RadarObstacles_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
void RadarObstacles::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarObstacles::kRadarObstacleFieldNumber;
const int RadarObstacles::kHeaderFieldNumber;
const int RadarObstacles::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarObstacles::RadarObstacles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::scc_info_RadarObstacles.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.RadarObstacles)
}
RadarObstacles::RadarObstacles(const RadarObstacles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  radar_obstacle_.MergeFrom(from.radar_obstacle_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.RadarObstacles)
}

void RadarObstacles::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&header_)) + sizeof(error_code_));
}

RadarObstacles::~RadarObstacles() {
  // @@protoc_insertion_point(destructor:apollo.drivers.RadarObstacles)
  SharedDtor();
}

void RadarObstacles::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void RadarObstacles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RadarObstacles::descriptor() {
  ::protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RadarObstacles& RadarObstacles::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::scc_info_RadarObstacles.base);
  return *internal_default_instance();
}


void RadarObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.RadarObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  radar_obstacle_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RadarObstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.RadarObstacles)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<int32, .apollo.drivers.RadarObstacle> radar_obstacle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          RadarObstacles_RadarObstacleEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              RadarObstacles_RadarObstacleEntry_DoNotUse,
              ::google::protobuf::int32, ::apollo::drivers::RadarObstacle,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle > > parser(&radar_obstacle_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Header header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::common::ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::apollo::common::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.RadarObstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.RadarObstacles)
  return false;
#undef DO_
}

void RadarObstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.RadarObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .apollo.drivers.RadarObstacle> radar_obstacle = 1;
  if (!this->radar_obstacle().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->radar_obstacle().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->radar_obstacle().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >::const_iterator
          it = this->radar_obstacle().begin();
          it != this->radar_obstacle().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<RadarObstacles_RadarObstacleEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(radar_obstacle_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::std::unique_ptr<RadarObstacles_RadarObstacleEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >::const_iterator
          it = this->radar_obstacle().begin();
          it != this->radar_obstacle().end(); ++it) {
        entry.reset(radar_obstacle_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_header(), output);
  }

  // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.RadarObstacles)
}

::google::protobuf::uint8* RadarObstacles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.RadarObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .apollo.drivers.RadarObstacle> radar_obstacle = 1;
  if (!this->radar_obstacle().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::int32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->radar_obstacle().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->radar_obstacle().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >::const_iterator
          it = this->radar_obstacle().begin();
          it != this->radar_obstacle().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<RadarObstacles_RadarObstacleEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(radar_obstacle_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<RadarObstacles_RadarObstacleEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >::const_iterator
          it = this->radar_obstacle().begin();
          it != this->radar_obstacle().end(); ++it) {
        entry.reset(radar_obstacle_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_header(), deterministic, target);
  }

  // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.RadarObstacles)
  return target;
}

size_t RadarObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.RadarObstacles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // map<int32, .apollo.drivers.RadarObstacle> radar_obstacle = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->radar_obstacle_size());
  {
    ::std::unique_ptr<RadarObstacles_RadarObstacleEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >::const_iterator
        it = this->radar_obstacle().begin();
        it != this->radar_obstacle().end(); ++it) {
      entry.reset(radar_obstacle_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.common.Header header = 2;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarObstacles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.RadarObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarObstacles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarObstacles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.RadarObstacles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.RadarObstacles)
    MergeFrom(*source);
  }
}

void RadarObstacles::MergeFrom(const RadarObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.RadarObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  radar_obstacle_.MergeFrom(from.radar_obstacle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadarObstacles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.RadarObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarObstacles::CopyFrom(const RadarObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.RadarObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarObstacles::IsInitialized() const {
  return true;
}

void RadarObstacles::Swap(RadarObstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarObstacles::InternalSwap(RadarObstacles* other) {
  using std::swap;
  radar_obstacle_.Swap(&other->radar_obstacle_);
  swap(header_, other->header_);
  swap(error_code_, other->error_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RadarObstacles::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace drivers
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::RadarObstacle* Arena::CreateMaybeMessage< ::apollo::drivers::RadarObstacle >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::RadarObstacle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::RadarObstacles* Arena::CreateMaybeMessage< ::apollo::drivers::RadarObstacles >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::RadarObstacles >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
