// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/sensor_image.proto

#include "modules/drivers/proto/sensor_image.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fheader_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto
namespace apollo {
namespace drivers {
class ImageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Image>
      _instance;
} _Image_default_instance_;
class CompressedImageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CompressedImage>
      _instance;
} _CompressedImage_default_instance_;
}  // namespace drivers
}  // namespace apollo
namespace protobuf_modules_2fdrivers_2fproto_2fsensor_5fimage_2eproto {
static void InitDefaultsImage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_Image_default_instance_;
    new (ptr) ::apollo::drivers::Image();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::Image::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Image =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsImage}, {
      &protobuf_modules_2fcommon_2fproto_2fheader_2eproto::scc_info_Header.base,}};

static void InitDefaultsCompressedImage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_CompressedImage_default_instance_;
    new (ptr) ::apollo::drivers::CompressedImage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::CompressedImage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CompressedImage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCompressedImage}, {
      &protobuf_modules_2fcommon_2fproto_2fheader_2eproto::scc_info_Header.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Image.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CompressedImage.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::Image, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::Image, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::Image, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::Image, measurement_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::Image, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::Image, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::Image, encoding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::Image, step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::Image, data_),
  3,
  0,
  4,
  5,
  6,
  1,
  7,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::CompressedImage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::CompressedImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::CompressedImage, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::CompressedImage, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::CompressedImage, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::CompressedImage, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::CompressedImage, measurement_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::CompressedImage, frame_type_),
  3,
  0,
  1,
  2,
  4,
  5,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::apollo::drivers::Image)},
  { 21, 32, sizeof(::apollo::drivers::CompressedImage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::_Image_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::_CompressedImage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/drivers/proto/sensor_image.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n(modules/drivers/proto/sensor_image.pro"
      "to\022\016apollo.drivers\032!modules/common/proto"
      "/header.proto\"\247\001\n\005Image\022%\n\006header\030\001 \001(\0132"
      "\025.apollo.common.Header\022\020\n\010frame_id\030\002 \001(\t"
      "\022\030\n\020measurement_time\030\003 \001(\001\022\016\n\006height\030\004 \001"
      "(\r\022\r\n\005width\030\005 \001(\r\022\020\n\010encoding\030\006 \001(\t\022\014\n\004s"
      "tep\030\007 \001(\r\022\014\n\004data\030\010 \001(\014\"\226\001\n\017CompressedIm"
      "age\022%\n\006header\030\001 \001(\0132\025.apollo.common.Head"
      "er\022\020\n\010frame_id\030\002 \001(\t\022\016\n\006format\030\003 \001(\t\022\014\n\004"
      "data\030\004 \001(\014\022\030\n\020measurement_time\030\005 \001(\001\022\022\n\n"
      "frame_type\030\006 \001(\r*\373\005\n\013PixelFormat\022\t\n\004RGB8"
      "\020\351\007\022\n\n\005RGBA8\020\352\007\022\n\n\005RGB16\020\353\007\022\013\n\006RGBA16\020\354\007"
      "\022\t\n\004BGR8\020\355\007\022\n\n\005BGRA8\020\356\007\022\n\n\005BGR16\020\357\007\022\013\n\006B"
      "GRA16\020\360\007\022\n\n\005MONO8\020\361\007\022\013\n\006MONO16\020\362\007\022\016\n\tTYP"
      "E_8UC1\020\321\017\022\016\n\tTYPE_8UC2\020\322\017\022\016\n\tTYPE_8UC3\020\323"
      "\017\022\016\n\tTYPE_8UC4\020\324\017\022\016\n\tTYPE_8SC1\020\325\017\022\016\n\tTYP"
      "E_8SC2\020\326\017\022\016\n\tTYPE_8SC3\020\327\017\022\016\n\tTYPE_8SC4\020\330"
      "\017\022\017\n\nTYPE_16UC1\020\331\017\022\017\n\nTYPE_16UC2\020\332\017\022\017\n\nT"
      "YPE_16UC3\020\333\017\022\017\n\nTYPE_16UC4\020\334\017\022\017\n\nTYPE_16"
      "SC1\020\335\017\022\017\n\nTYPE_16SC2\020\336\017\022\017\n\nTYPE_16SC3\020\337\017"
      "\022\017\n\nTYPE_16SC4\020\340\017\022\017\n\nTYPE_32SC1\020\341\017\022\017\n\nTY"
      "PE_32SC2\020\342\017\022\017\n\nTYPE_32SC3\020\343\017\022\017\n\nTYPE_32S"
      "C4\020\344\017\022\017\n\nTYPE_32FC1\020\345\017\022\017\n\nTYPE_32FC2\020\346\017\022"
      "\017\n\nTYPE_32FC3\020\347\017\022\017\n\nTYPE_32FC4\020\350\017\022\017\n\nTYP"
      "E_64FC1\020\351\017\022\017\n\nTYPE_64FC2\020\352\017\022\017\n\nTYPE_64FC"
      "3\020\353\017\022\017\n\nTYPE_64FC4\020\354\017\022\020\n\013BAYER_RGGB8\020\271\027\022"
      "\020\n\013BAYER_BGGR8\020\272\027\022\020\n\013BAYER_GBRG8\020\273\027\022\020\n\013B"
      "AYER_GRBG8\020\274\027\022\021\n\014BAYER_RGGB16\020\275\027\022\021\n\014BAYE"
      "R_BGGR16\020\276\027\022\021\n\014BAYER_GBRG16\020\277\027\022\021\n\014BAYER_"
      "GRBG16\020\300\027\022\013\n\006YUV422\020\241\037"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1182);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/drivers/proto/sensor_image.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fdrivers_2fproto_2fsensor_5fimage_2eproto
namespace apollo {
namespace drivers {
const ::google::protobuf::EnumDescriptor* PixelFormat_descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fsensor_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fsensor_5fimage_2eproto::file_level_enum_descriptors[0];
}
bool PixelFormat_IsValid(int value) {
  switch (value) {
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2015:
    case 2016:
    case 2017:
    case 2018:
    case 2019:
    case 2020:
    case 2021:
    case 2022:
    case 2023:
    case 2024:
    case 2025:
    case 2026:
    case 2027:
    case 2028:
    case 3001:
    case 3002:
    case 3003:
    case 3004:
    case 3005:
    case 3006:
    case 3007:
    case 3008:
    case 4001:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Image::InitAsDefaultInstance() {
  ::apollo::drivers::_Image_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
void Image::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Image::kHeaderFieldNumber;
const int Image::kFrameIdFieldNumber;
const int Image::kMeasurementTimeFieldNumber;
const int Image::kHeightFieldNumber;
const int Image::kWidthFieldNumber;
const int Image::kEncodingFieldNumber;
const int Image::kStepFieldNumber;
const int Image::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Image::Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fproto_2fsensor_5fimage_2eproto::scc_info_Image.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.Image)
}
Image::Image(const Image& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_frame_id()) {
    frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
  }
  encoding_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_encoding()) {
    encoding_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encoding_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&measurement_time_, &from.measurement_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&measurement_time_)) + sizeof(step_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.Image)
}

void Image::SharedCtor() {
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoding_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&header_)) + sizeof(step_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:apollo.drivers.Image)
  SharedDtor();
}

void Image::SharedDtor() {
  frame_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoding_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  ::protobuf_modules_2fdrivers_2fproto_2fsensor_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsensor_5fimage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Image& Image::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fproto_2fsensor_5fimage_2eproto::scc_info_Image.base);
  return *internal_default_instance();
}


void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      frame_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      encoding_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&measurement_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&step_) -
        reinterpret_cast<char*>(&measurement_time_)) + sizeof(step_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.Image)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string frame_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frame_id().data(), static_cast<int>(this->frame_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.drivers.Image.frame_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double measurement_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_measurement_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string encoding = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encoding()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->encoding().data(), static_cast<int>(this->encoding().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.drivers.Image.encoding");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 step = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_step();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.Image)
  return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional string frame_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.Image.frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->frame_id(), output);
  }

  // optional double measurement_time = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->measurement_time(), output);
  }

  // optional uint32 height = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  // optional uint32 width = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->width(), output);
  }

  // optional string encoding = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encoding().data(), static_cast<int>(this->encoding().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.Image.encoding");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->encoding(), output);
  }

  // optional uint32 step = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->step(), output);
  }

  // optional bytes data = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.Image)
}

::google::protobuf::uint8* Image::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.Image)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional string frame_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.Image.frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->frame_id(), target);
  }

  // optional double measurement_time = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->measurement_time(), target);
  }

  // optional uint32 height = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  // optional uint32 width = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->width(), target);
  }

  // optional string encoding = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->encoding().data(), static_cast<int>(this->encoding().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.Image.encoding");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->encoding(), target);
  }

  // optional uint32 step = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->step(), target);
  }

  // optional bytes data = 8;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.Image)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string frame_id = 2;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frame_id());
    }

    // optional string encoding = 6;
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encoding());
    }

    // optional bytes data = 8;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional double measurement_time = 3;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

    // optional uint32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 width = 5;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 step = 7;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_frame_id();
      frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_encoding();
      encoding_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encoding_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000010u) {
      measurement_time_ = from.measurement_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000080u) {
      step_ = from.step_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::Swap(Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Image::InternalSwap(Image* other) {
  using std::swap;
  frame_id_.Swap(&other->frame_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  encoding_.Swap(&other->encoding_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(measurement_time_, other->measurement_time_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(step_, other->step_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fsensor_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsensor_5fimage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CompressedImage::InitAsDefaultInstance() {
  ::apollo::drivers::_CompressedImage_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
void CompressedImage::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressedImage::kHeaderFieldNumber;
const int CompressedImage::kFrameIdFieldNumber;
const int CompressedImage::kFormatFieldNumber;
const int CompressedImage::kDataFieldNumber;
const int CompressedImage::kMeasurementTimeFieldNumber;
const int CompressedImage::kFrameTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressedImage::CompressedImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fproto_2fsensor_5fimage_2eproto::scc_info_CompressedImage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.CompressedImage)
}
CompressedImage::CompressedImage(const CompressedImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_frame_id()) {
    frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
  }
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_format()) {
    format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&measurement_time_, &from.measurement_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_type_) -
    reinterpret_cast<char*>(&measurement_time_)) + sizeof(frame_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.CompressedImage)
}

void CompressedImage::SharedCtor() {
  frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(frame_type_));
}

CompressedImage::~CompressedImage() {
  // @@protoc_insertion_point(destructor:apollo.drivers.CompressedImage)
  SharedDtor();
}

void CompressedImage::SharedDtor() {
  frame_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void CompressedImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CompressedImage::descriptor() {
  ::protobuf_modules_2fdrivers_2fproto_2fsensor_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsensor_5fimage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CompressedImage& CompressedImage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fproto_2fsensor_5fimage_2eproto::scc_info_CompressedImage.base);
  return *internal_default_instance();
}


void CompressedImage::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.CompressedImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      frame_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      format_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
  }
  if (cached_has_bits & 48u) {
    ::memset(&measurement_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frame_type_) -
        reinterpret_cast<char*>(&measurement_time_)) + sizeof(frame_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CompressedImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.CompressedImage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string frame_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frame_id().data(), static_cast<int>(this->frame_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.drivers.CompressedImage.frame_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string format = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->format().data(), static_cast<int>(this->format().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.drivers.CompressedImage.format");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double measurement_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_measurement_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 frame_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_frame_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.CompressedImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.CompressedImage)
  return false;
#undef DO_
}

void CompressedImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.CompressedImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional string frame_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.CompressedImage.frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->frame_id(), output);
  }

  // optional string format = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), static_cast<int>(this->format().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.CompressedImage.format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->format(), output);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional double measurement_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->measurement_time(), output);
  }

  // optional uint32 frame_type = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->frame_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.CompressedImage)
}

::google::protobuf::uint8* CompressedImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.CompressedImage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional string frame_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.CompressedImage.frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->frame_id(), target);
  }

  // optional string format = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), static_cast<int>(this->format().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.drivers.CompressedImage.format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->format(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional double measurement_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->measurement_time(), target);
  }

  // optional uint32 frame_type = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->frame_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.CompressedImage)
  return target;
}

size_t CompressedImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.CompressedImage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string frame_id = 2;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frame_id());
    }

    // optional string format = 3;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional double measurement_time = 5;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

    // optional uint32 frame_type = 6;
    if (has_frame_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompressedImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.CompressedImage)
  GOOGLE_DCHECK_NE(&from, this);
  const CompressedImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompressedImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.CompressedImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.CompressedImage)
    MergeFrom(*source);
  }
}

void CompressedImage::MergeFrom(const CompressedImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.CompressedImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_frame_id();
      frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_format();
      format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000010u) {
      measurement_time_ = from.measurement_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      frame_type_ = from.frame_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CompressedImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.CompressedImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedImage::CopyFrom(const CompressedImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.CompressedImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedImage::IsInitialized() const {
  return true;
}

void CompressedImage::Swap(CompressedImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressedImage::InternalSwap(CompressedImage* other) {
  using std::swap;
  frame_id_.Swap(&other->frame_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  format_.Swap(&other->format_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(measurement_time_, other->measurement_time_);
  swap(frame_type_, other->frame_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CompressedImage::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fsensor_5fimage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsensor_5fimage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace drivers
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::Image* Arena::CreateMaybeMessage< ::apollo::drivers::Image >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::Image >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::CompressedImage* Arena::CreateMaybeMessage< ::apollo::drivers::CompressedImage >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::CompressedImage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
