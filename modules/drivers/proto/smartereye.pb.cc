// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/smartereye.proto

#include "modules/drivers/proto/smartereye.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fheader_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto
namespace protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LdwLaneBoundary;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LdwLensInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OutputObstacle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LdwLane;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LdwRoadway;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SmartereyeObstacles_OutputObstaclesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LdwDataPacks;
}  // namespace protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto
namespace apollo {
namespace drivers {
class LdwLaneBoundaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LdwLaneBoundary>
      _instance;
} _LdwLaneBoundary_default_instance_;
class LdwLaneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LdwLane>
      _instance;
} _LdwLane_default_instance_;
class LdwRoadwayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LdwRoadway>
      _instance;
} _LdwRoadway_default_instance_;
class LdwLensInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LdwLensInfo>
      _instance;
} _LdwLensInfo_default_instance_;
class LdwDataPacksDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LdwDataPacks>
      _instance;
} _LdwDataPacks_default_instance_;
class OutputObstacleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OutputObstacle>
      _instance;
} _OutputObstacle_default_instance_;
class SmartereyeObstacles_OutputObstaclesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SmartereyeObstacles_OutputObstaclesEntry_DoNotUse>
      _instance;
} _SmartereyeObstacles_OutputObstaclesEntry_DoNotUse_default_instance_;
class SmartereyeObstaclesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SmartereyeObstacles>
      _instance;
} _SmartereyeObstacles_default_instance_;
class SmartereyeLanemarkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SmartereyeLanemark>
      _instance;
} _SmartereyeLanemark_default_instance_;
}  // namespace drivers
}  // namespace apollo
namespace protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto {
static void InitDefaultsLdwLaneBoundary() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_LdwLaneBoundary_default_instance_;
    new (ptr) ::apollo::drivers::LdwLaneBoundary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::LdwLaneBoundary::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LdwLaneBoundary =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLdwLaneBoundary}, {}};

static void InitDefaultsLdwLane() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_LdwLane_default_instance_;
    new (ptr) ::apollo::drivers::LdwLane();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::LdwLane::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LdwLane =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLdwLane}, {
      &protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_LdwLaneBoundary.base,}};

static void InitDefaultsLdwRoadway() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_LdwRoadway_default_instance_;
    new (ptr) ::apollo::drivers::LdwRoadway();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::LdwRoadway::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LdwRoadway =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLdwRoadway}, {
      &protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_LdwLane.base,}};

static void InitDefaultsLdwLensInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_LdwLensInfo_default_instance_;
    new (ptr) ::apollo::drivers::LdwLensInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::LdwLensInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LdwLensInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLdwLensInfo}, {}};

static void InitDefaultsLdwDataPacks() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_LdwDataPacks_default_instance_;
    new (ptr) ::apollo::drivers::LdwDataPacks();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::LdwDataPacks::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LdwDataPacks =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLdwDataPacks}, {
      &protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_LdwRoadway.base,
      &protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_LdwLensInfo.base,}};

static void InitDefaultsOutputObstacle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_OutputObstacle_default_instance_;
    new (ptr) ::apollo::drivers::OutputObstacle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::OutputObstacle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OutputObstacle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOutputObstacle}, {}};

static void InitDefaultsSmartereyeObstacles_OutputObstaclesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_SmartereyeObstacles_OutputObstaclesEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::drivers::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse();
  }
  ::apollo::drivers::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SmartereyeObstacles_OutputObstaclesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSmartereyeObstacles_OutputObstaclesEntry_DoNotUse}, {
      &protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_OutputObstacle.base,}};

static void InitDefaultsSmartereyeObstacles() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_SmartereyeObstacles_default_instance_;
    new (ptr) ::apollo::drivers::SmartereyeObstacles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::SmartereyeObstacles::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SmartereyeObstacles =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSmartereyeObstacles}, {
      &protobuf_modules_2fcommon_2fproto_2fheader_2eproto::scc_info_Header.base,
      &protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_SmartereyeObstacles_OutputObstaclesEntry_DoNotUse.base,}};

static void InitDefaultsSmartereyeLanemark() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::_SmartereyeLanemark_default_instance_;
    new (ptr) ::apollo::drivers::SmartereyeLanemark();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::SmartereyeLanemark::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SmartereyeLanemark =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSmartereyeLanemark}, {
      &protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_LdwDataPacks.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LdwLaneBoundary.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LdwLane.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LdwRoadway.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LdwLensInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LdwDataPacks.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OutputObstacle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SmartereyeObstacles_OutputObstaclesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SmartereyeObstacles.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SmartereyeLanemark.base);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLaneBoundary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLaneBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLaneBoundary, degree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLaneBoundary, c0_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLaneBoundary, c1_heading_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLaneBoundary, c2_curvature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLaneBoundary, c3_curvature_derivative_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLane, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLane, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLane, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLane, style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLane, left_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLane, right_boundary_),
  2,
  3,
  4,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwRoadway, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwRoadway, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwRoadway, width_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwRoadway, width_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwRoadway, width_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwRoadway, is_tracking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwRoadway, left_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwRoadway, right_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwRoadway, adj_left_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwRoadway, adj_right_lane_),
  4,
  5,
  6,
  7,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, x_image_focal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, y_image_focal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, xratio_focal_pixel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, yratio_focal_pixel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, mountingheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, mcosrx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, msinrx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, mcosry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwLensInfo, msinry_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwDataPacks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwDataPacks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwDataPacks, roadway_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwDataPacks, softstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwDataPacks, steerstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::LdwDataPacks, lens_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, currentspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, framerate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, trackid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, trackframenum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, statelabel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, classlabel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, continuouslabel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, fuzzyestimationvalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, obstacletype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, avgdisp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, avgdistancez_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, neardistancez_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, fardistancez_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, real3dleftx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, real3drightx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, real3dcenterx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, real3dupy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, real3dlowy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, firstpointx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, firstpointy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, secondpointx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, secondpointy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, thirdpointx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, thirdpointy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, fourthpointx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, fourthpointy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, fuzzyrelativedistancez_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, fuzzyrelativespeedz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, fuzzycollisiontimez_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, fuzzycollisionx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, fuzzy3dwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, fuzzy3dcenterx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, fuzzy3dleftx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, fuzzy3drightx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, fuzzy3dheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, fuzzy3dupy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, fuzzy3dlowy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, fuzzyrelativespeedcenterx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, fuzzyrelativespeedleftx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::OutputObstacle, fuzzyrelativespeedrightx_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::SmartereyeObstacles, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::SmartereyeObstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::SmartereyeObstacles, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::SmartereyeObstacles, num_obstacles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::SmartereyeObstacles, output_obstacles_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::SmartereyeLanemark, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::SmartereyeLanemark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::SmartereyeLanemark, lane_road_data_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::apollo::drivers::LdwLaneBoundary)},
  { 15, 25, sizeof(::apollo::drivers::LdwLane)},
  { 30, 43, sizeof(::apollo::drivers::LdwRoadway)},
  { 51, 65, sizeof(::apollo::drivers::LdwLensInfo)},
  { 74, 83, sizeof(::apollo::drivers::LdwDataPacks)},
  { 87, 132, sizeof(::apollo::drivers::OutputObstacle)},
  { 172, 179, sizeof(::apollo::drivers::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse)},
  { 181, 189, sizeof(::apollo::drivers::SmartereyeObstacles)},
  { 192, 198, sizeof(::apollo::drivers::SmartereyeLanemark)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::_LdwLaneBoundary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::_LdwLane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::_LdwRoadway_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::_LdwLensInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::_LdwDataPacks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::_OutputObstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::_SmartereyeObstacles_OutputObstaclesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::_SmartereyeObstacles_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::_SmartereyeLanemark_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/drivers/proto/smartereye.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n&modules/drivers/proto/smartereye.proto"
      "\022\016apollo.drivers\032!modules/common/proto/h"
      "eader.proto\"\207\001\n\017LdwLaneBoundary\022\016\n\006degre"
      "e\030\001 \001(\005\022\023\n\013c0_position\030\002 \001(\001\022\030\n\020c1_headi"
      "ng_angle\030\003 \001(\001\022\024\n\014c2_curvature\030\004 \001(\001\022\037\n\027"
      "c3_curvature_derivative\030\005 \001(\001\"\307\001\n\007LdwLan"
      "e\022\r\n\005width\030\001 \001(\005\022\017\n\007quality\030\002 \001(\005\022+\n\005sty"
      "le\030\003 \001(\0162\034.apollo.drivers.LdwLaneStyle\0226"
      "\n\rleft_boundary\030\004 \001(\0132\037.apollo.drivers.L"
      "dwLaneBoundary\0227\n\016right_boundary\030\005 \001(\0132\037"
      ".apollo.drivers.LdwLaneBoundary\"\216\002\n\nLdwR"
      "oadway\022\017\n\007width_0\030\001 \001(\005\022\017\n\007width_1\030\002 \001(\005"
      "\022\017\n\007width_2\030\003 \001(\005\022\023\n\013is_tracking\030\004 \001(\010\022*"
      "\n\tleft_lane\030\005 \001(\0132\027.apollo.drivers.LdwLa"
      "ne\022+\n\nright_lane\030\006 \001(\0132\027.apollo.drivers."
      "LdwLane\022.\n\radj_left_lane\030\007 \001(\0132\027.apollo."
      "drivers.LdwLane\022/\n\016adj_right_lane\030\010 \001(\0132"
      "\027.apollo.drivers.LdwLane\"\313\001\n\013LdwLensInfo"
      "\022\025\n\rx_image_focal\030\001 \001(\002\022\025\n\ry_image_focal"
      "\030\002 \001(\002\022\032\n\022xratio_focal_pixel\030\003 \001(\002\022\032\n\022yr"
      "atio_focal_pixel\030\004 \001(\002\022\026\n\016mountingheight"
      "\030\005 \001(\002\022\016\n\006mcosrx\030\006 \001(\002\022\016\n\006msinrx\030\007 \001(\002\022\016"
      "\n\006mcosry\030\010 \001(\002\022\016\n\006msinry\030\t \001(\002\"\316\001\n\014LdwDa"
      "taPacks\022+\n\007roadway\030\001 \001(\0132\032.apollo.driver"
      "s.LdwRoadway\0221\n\nsoftstatus\030\002 \001(\0162\035.apoll"
      "o.drivers.LdwSoftStatus\0223\n\013steerstatus\030\003"
      " \001(\0162\036.apollo.drivers.LdwSteerStatus\022)\n\004"
      "lens\030\004 \001(\0132\033.apollo.drivers.LdwLensInfo\""
      "\202\t\n\016OutputObstacle\022\024\n\014currentspeed\030\001 \001(\002"
      "\022\021\n\tframerate\030\002 \001(\002\022\017\n\007trackid\030\003 \001(\r\022\025\n\r"
      "trackframenum\030\004 \001(\r\022\022\n\nstatelabel\030\005 \001(\r\022"
      "\022\n\nclasslabel\030\006 \001(\r\022\027\n\017continuouslabel\030\007"
      " \001(\r\022\034\n\024fuzzyestimationvalid\030\010 \001(\r\022D\n\014ob"
      "stacletype\030\t \001(\0162..apollo.drivers.Output"
      "Obstacle.RecognitionType\022\017\n\007avgdisp\030\n \001("
      "\002\022\024\n\014avgdistancez\030\013 \001(\002\022\025\n\rneardistancez"
      "\030\014 \001(\002\022\024\n\014fardistancez\030\r \001(\002\022\023\n\013real3dle"
      "ftx\030\016 \001(\002\022\024\n\014real3drightx\030\017 \001(\002\022\025\n\rreal3"
      "dcenterx\030\020 \001(\002\022\021\n\treal3dupy\030\021 \001(\002\022\022\n\nrea"
      "l3dlowy\030\022 \001(\002\022\023\n\013firstpointx\030\023 \001(\r\022\023\n\013fi"
      "rstpointy\030\024 \001(\r\022\024\n\014secondpointx\030\025 \001(\r\022\024\n"
      "\014secondpointy\030\026 \001(\r\022\023\n\013thirdpointx\030\027 \001(\r"
      "\022\023\n\013thirdpointy\030\030 \001(\r\022\024\n\014fourthpointx\030\031 "
      "\001(\r\022\024\n\014fourthpointy\030\032 \001(\r\022\036\n\026fuzzyrelati"
      "vedistancez\030\033 \001(\002\022\033\n\023fuzzyrelativespeedz"
      "\030\034 \001(\002\022\033\n\023fuzzycollisiontimez\030\035 \001(\002\022\027\n\017f"
      "uzzycollisionx\030\036 \001(\r\022\024\n\014fuzzy3dwidth\030\037 \001"
      "(\002\022\026\n\016fuzzy3dcenterx\030  \001(\002\022\024\n\014fuzzy3dlef"
      "tx\030! \001(\002\022\025\n\rfuzzy3drightx\030\" \001(\002\022\025\n\rfuzzy"
      "3dheight\030# \001(\002\022\022\n\nfuzzy3dupy\030$ \001(\002\022\023\n\013fu"
      "zzy3dlowy\030% \001(\002\022!\n\031fuzzyrelativespeedcen"
      "terx\030& \001(\002\022\037\n\027fuzzyrelativespeedleftx\030\' "
      "\001(\002\022 \n\030fuzzyrelativespeedrightx\030( \001(\002\"\234\001"
      "\n\017RecognitionType\022\013\n\007INVALID\020\000\022\013\n\007VEHICL"
      "E\020\001\022\016\n\nPEDESTRIAN\020\002\022\t\n\005CHILD\020\003\022\013\n\007BICYCL"
      "E\020\004\022\010\n\004MOTO\020\005\022\t\n\005TRUCK\020\006\022\007\n\003BUS\020\007\022\n\n\006OTH"
      "ERS\020\010\022\r\n\tESTIMATED\020\t\022\016\n\nCONTINUOUS\020\n\"\377\001\n"
      "\023SmartereyeObstacles\022%\n\006header\030\001 \001(\0132\025.a"
      "pollo.common.Header\022\025\n\rnum_obstacles\030\002 \001"
      "(\005\022R\n\020output_obstacles\030\003 \003(\01328.apollo.dr"
      "ivers.SmartereyeObstacles.OutputObstacle"
      "sEntry\032V\n\024OutputObstaclesEntry\022\013\n\003key\030\001 "
      "\001(\r\022-\n\005value\030\002 \001(\0132\036.apollo.drivers.Outp"
      "utObstacle:\0028\001\"J\n\022SmartereyeLanemark\0224\n\016"
      "lane_road_data\030\004 \001(\0132\034.apollo.drivers.Ld"
      "wDataPacks*S\n\013LdwVersions\022\022\n\016LDW_VERSION"
      "_C1\020\000\022\022\n\016LDW_VERSION_C2\020\001\022\034\n\030LDW_VERSION"
      "_FOUR_LANE_C2\020\002*\371\001\n\014LdwLaneStyle\022\034\n\030LDW_"
      "LANE_STYLE_NONE_LANE\020\000\022\037\n\033LDW_LANE_STYLE"
      "_PREDICT_LANE\020\001\022\036\n\032LDW_LANE_STYLE_BROKEN"
      "_LANE\020\002\022\035\n\031LDW_LANE_STYLE_SOLID_LANE\020\003\022%"
      "\n!LDW_LANE_STYLE_DOUBLE_BROKEN_LANE\020\004\022$\n"
      " LDW_LANE_STYLE_DOUBLE_SOLID_LANE\020\005\022\036\n\032L"
      "DW_LANE_STYLE_TRIPLE_LANE\020\006*\232\001\n\016LdwSteer"
      "Status\022\024\n\020LDW_NORMAL_STEER\020\000\022\033\n\027LDW_STEE"
      "R_ON_LEFT__LANE\020\001\022\033\n\027LDW_STEER_ON_RIGHT_"
      "LANE\020\002\022\033\n\027LDW_STEER_WARNING_LEFT_\020\003\022\033\n\027L"
      "DW_STEER_WARNING_RIGHT\020\004*\213\001\n\rLdwSoftStat"
      "us\022\026\n\022LDW_SOFT_DETECTION\020\000\022\032\n\026LDW_SOFT_S"
      "ELF_LEARNING\020\001\022\"\n\036LDW_SOFT_MANUAL_LEARNI"
      "NG_MODE0\020\002\022\"\n\036LDW_SOFT_MANUAL_LEARNING_M"
      "ODE1\020\003*U\n\017LdwWarningGrade\022\023\n\017LDW_WARNING"
      "_LOW\020\000\022\026\n\022LDW_WARNING_NORMAL\020\001\022\025\n\021LDW_WA"
      "RNING_HIGHT\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3333);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/drivers/proto/smartereye.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto
namespace apollo {
namespace drivers {
const ::google::protobuf::EnumDescriptor* OutputObstacle_RecognitionType_descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_enum_descriptors[0];
}
bool OutputObstacle_RecognitionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const OutputObstacle_RecognitionType OutputObstacle::INVALID;
const OutputObstacle_RecognitionType OutputObstacle::VEHICLE;
const OutputObstacle_RecognitionType OutputObstacle::PEDESTRIAN;
const OutputObstacle_RecognitionType OutputObstacle::CHILD;
const OutputObstacle_RecognitionType OutputObstacle::BICYCLE;
const OutputObstacle_RecognitionType OutputObstacle::MOTO;
const OutputObstacle_RecognitionType OutputObstacle::TRUCK;
const OutputObstacle_RecognitionType OutputObstacle::BUS;
const OutputObstacle_RecognitionType OutputObstacle::OTHERS;
const OutputObstacle_RecognitionType OutputObstacle::ESTIMATED;
const OutputObstacle_RecognitionType OutputObstacle::CONTINUOUS;
const OutputObstacle_RecognitionType OutputObstacle::RecognitionType_MIN;
const OutputObstacle_RecognitionType OutputObstacle::RecognitionType_MAX;
const int OutputObstacle::RecognitionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LdwVersions_descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_enum_descriptors[1];
}
bool LdwVersions_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LdwLaneStyle_descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_enum_descriptors[2];
}
bool LdwLaneStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LdwSteerStatus_descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_enum_descriptors[3];
}
bool LdwSteerStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LdwSoftStatus_descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_enum_descriptors[4];
}
bool LdwSoftStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LdwWarningGrade_descriptor() {
  protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_enum_descriptors[5];
}
bool LdwWarningGrade_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LdwLaneBoundary::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LdwLaneBoundary::kDegreeFieldNumber;
const int LdwLaneBoundary::kC0PositionFieldNumber;
const int LdwLaneBoundary::kC1HeadingAngleFieldNumber;
const int LdwLaneBoundary::kC2CurvatureFieldNumber;
const int LdwLaneBoundary::kC3CurvatureDerivativeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LdwLaneBoundary::LdwLaneBoundary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_LdwLaneBoundary.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.LdwLaneBoundary)
}
LdwLaneBoundary::LdwLaneBoundary(const LdwLaneBoundary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&c0_position_, &from.c0_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&degree_) -
    reinterpret_cast<char*>(&c0_position_)) + sizeof(degree_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.LdwLaneBoundary)
}

void LdwLaneBoundary::SharedCtor() {
  ::memset(&c0_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&degree_) -
      reinterpret_cast<char*>(&c0_position_)) + sizeof(degree_));
}

LdwLaneBoundary::~LdwLaneBoundary() {
  // @@protoc_insertion_point(destructor:apollo.drivers.LdwLaneBoundary)
  SharedDtor();
}

void LdwLaneBoundary::SharedDtor() {
}

void LdwLaneBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LdwLaneBoundary::descriptor() {
  ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LdwLaneBoundary& LdwLaneBoundary::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_LdwLaneBoundary.base);
  return *internal_default_instance();
}


void LdwLaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.LdwLaneBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&c0_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&degree_) -
        reinterpret_cast<char*>(&c0_position_)) + sizeof(degree_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LdwLaneBoundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.LdwLaneBoundary)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 degree = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_degree();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double c0_position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_c0_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c0_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double c1_heading_angle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_c1_heading_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c1_heading_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double c2_curvature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_c2_curvature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c2_curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double c3_curvature_derivative = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_c3_curvature_derivative();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c3_curvature_derivative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.LdwLaneBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.LdwLaneBoundary)
  return false;
#undef DO_
}

void LdwLaneBoundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.LdwLaneBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 degree = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->degree(), output);
  }

  // optional double c0_position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->c0_position(), output);
  }

  // optional double c1_heading_angle = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->c1_heading_angle(), output);
  }

  // optional double c2_curvature = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->c2_curvature(), output);
  }

  // optional double c3_curvature_derivative = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->c3_curvature_derivative(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.LdwLaneBoundary)
}

::google::protobuf::uint8* LdwLaneBoundary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.LdwLaneBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 degree = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->degree(), target);
  }

  // optional double c0_position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->c0_position(), target);
  }

  // optional double c1_heading_angle = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->c1_heading_angle(), target);
  }

  // optional double c2_curvature = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->c2_curvature(), target);
  }

  // optional double c3_curvature_derivative = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->c3_curvature_derivative(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.LdwLaneBoundary)
  return target;
}

size_t LdwLaneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.LdwLaneBoundary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional double c0_position = 2;
    if (has_c0_position()) {
      total_size += 1 + 8;
    }

    // optional double c1_heading_angle = 3;
    if (has_c1_heading_angle()) {
      total_size += 1 + 8;
    }

    // optional double c2_curvature = 4;
    if (has_c2_curvature()) {
      total_size += 1 + 8;
    }

    // optional double c3_curvature_derivative = 5;
    if (has_c3_curvature_derivative()) {
      total_size += 1 + 8;
    }

    // optional int32 degree = 1;
    if (has_degree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->degree());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LdwLaneBoundary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.LdwLaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const LdwLaneBoundary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LdwLaneBoundary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.LdwLaneBoundary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.LdwLaneBoundary)
    MergeFrom(*source);
  }
}

void LdwLaneBoundary::MergeFrom(const LdwLaneBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.LdwLaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      c0_position_ = from.c0_position_;
    }
    if (cached_has_bits & 0x00000002u) {
      c1_heading_angle_ = from.c1_heading_angle_;
    }
    if (cached_has_bits & 0x00000004u) {
      c2_curvature_ = from.c2_curvature_;
    }
    if (cached_has_bits & 0x00000008u) {
      c3_curvature_derivative_ = from.c3_curvature_derivative_;
    }
    if (cached_has_bits & 0x00000010u) {
      degree_ = from.degree_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LdwLaneBoundary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.LdwLaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LdwLaneBoundary::CopyFrom(const LdwLaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.LdwLaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LdwLaneBoundary::IsInitialized() const {
  return true;
}

void LdwLaneBoundary::Swap(LdwLaneBoundary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LdwLaneBoundary::InternalSwap(LdwLaneBoundary* other) {
  using std::swap;
  swap(c0_position_, other->c0_position_);
  swap(c1_heading_angle_, other->c1_heading_angle_);
  swap(c2_curvature_, other->c2_curvature_);
  swap(c3_curvature_derivative_, other->c3_curvature_derivative_);
  swap(degree_, other->degree_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LdwLaneBoundary::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LdwLane::InitAsDefaultInstance() {
  ::apollo::drivers::_LdwLane_default_instance_._instance.get_mutable()->left_boundary_ = const_cast< ::apollo::drivers::LdwLaneBoundary*>(
      ::apollo::drivers::LdwLaneBoundary::internal_default_instance());
  ::apollo::drivers::_LdwLane_default_instance_._instance.get_mutable()->right_boundary_ = const_cast< ::apollo::drivers::LdwLaneBoundary*>(
      ::apollo::drivers::LdwLaneBoundary::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LdwLane::kWidthFieldNumber;
const int LdwLane::kQualityFieldNumber;
const int LdwLane::kStyleFieldNumber;
const int LdwLane::kLeftBoundaryFieldNumber;
const int LdwLane::kRightBoundaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LdwLane::LdwLane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_LdwLane.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.LdwLane)
}
LdwLane::LdwLane(const LdwLane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left_boundary()) {
    left_boundary_ = new ::apollo::drivers::LdwLaneBoundary(*from.left_boundary_);
  } else {
    left_boundary_ = NULL;
  }
  if (from.has_right_boundary()) {
    right_boundary_ = new ::apollo::drivers::LdwLaneBoundary(*from.right_boundary_);
  } else {
    right_boundary_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&style_) -
    reinterpret_cast<char*>(&width_)) + sizeof(style_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.LdwLane)
}

void LdwLane::SharedCtor() {
  ::memset(&left_boundary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&style_) -
      reinterpret_cast<char*>(&left_boundary_)) + sizeof(style_));
}

LdwLane::~LdwLane() {
  // @@protoc_insertion_point(destructor:apollo.drivers.LdwLane)
  SharedDtor();
}

void LdwLane::SharedDtor() {
  if (this != internal_default_instance()) delete left_boundary_;
  if (this != internal_default_instance()) delete right_boundary_;
}

void LdwLane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LdwLane::descriptor() {
  ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LdwLane& LdwLane::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_LdwLane.base);
  return *internal_default_instance();
}


void LdwLane::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.LdwLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(left_boundary_ != NULL);
      left_boundary_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(right_boundary_ != NULL);
      right_boundary_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&style_) -
        reinterpret_cast<char*>(&width_)) + sizeof(style_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LdwLane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.LdwLane)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 quality = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.LdwLaneStyle style = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::LdwLaneStyle_IsValid(value)) {
            set_style(static_cast< ::apollo::drivers::LdwLaneStyle >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.LdwLaneBoundary left_boundary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.LdwLaneBoundary right_boundary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.LdwLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.LdwLane)
  return false;
#undef DO_
}

void LdwLane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.LdwLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 quality = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quality(), output);
  }

  // optional .apollo.drivers.LdwLaneStyle style = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->style(), output);
  }

  // optional .apollo.drivers.LdwLaneBoundary left_boundary = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_left_boundary(), output);
  }

  // optional .apollo.drivers.LdwLaneBoundary right_boundary = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_right_boundary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.LdwLane)
}

::google::protobuf::uint8* LdwLane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.LdwLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // optional int32 quality = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quality(), target);
  }

  // optional .apollo.drivers.LdwLaneStyle style = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->style(), target);
  }

  // optional .apollo.drivers.LdwLaneBoundary left_boundary = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_left_boundary(), deterministic, target);
  }

  // optional .apollo.drivers.LdwLaneBoundary right_boundary = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_right_boundary(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.LdwLane)
  return target;
}

size_t LdwLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.LdwLane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .apollo.drivers.LdwLaneBoundary left_boundary = 4;
    if (has_left_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *left_boundary_);
    }

    // optional .apollo.drivers.LdwLaneBoundary right_boundary = 5;
    if (has_right_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *right_boundary_);
    }

    // optional int32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional .apollo.drivers.LdwLaneStyle style = 3;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->style());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LdwLane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.LdwLane)
  GOOGLE_DCHECK_NE(&from, this);
  const LdwLane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LdwLane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.LdwLane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.LdwLane)
    MergeFrom(*source);
  }
}

void LdwLane::MergeFrom(const LdwLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.LdwLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_left_boundary()->::apollo::drivers::LdwLaneBoundary::MergeFrom(from.left_boundary());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_right_boundary()->::apollo::drivers::LdwLaneBoundary::MergeFrom(from.right_boundary());
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000010u) {
      style_ = from.style_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LdwLane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.LdwLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LdwLane::CopyFrom(const LdwLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.LdwLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LdwLane::IsInitialized() const {
  return true;
}

void LdwLane::Swap(LdwLane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LdwLane::InternalSwap(LdwLane* other) {
  using std::swap;
  swap(left_boundary_, other->left_boundary_);
  swap(right_boundary_, other->right_boundary_);
  swap(width_, other->width_);
  swap(quality_, other->quality_);
  swap(style_, other->style_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LdwLane::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LdwRoadway::InitAsDefaultInstance() {
  ::apollo::drivers::_LdwRoadway_default_instance_._instance.get_mutable()->left_lane_ = const_cast< ::apollo::drivers::LdwLane*>(
      ::apollo::drivers::LdwLane::internal_default_instance());
  ::apollo::drivers::_LdwRoadway_default_instance_._instance.get_mutable()->right_lane_ = const_cast< ::apollo::drivers::LdwLane*>(
      ::apollo::drivers::LdwLane::internal_default_instance());
  ::apollo::drivers::_LdwRoadway_default_instance_._instance.get_mutable()->adj_left_lane_ = const_cast< ::apollo::drivers::LdwLane*>(
      ::apollo::drivers::LdwLane::internal_default_instance());
  ::apollo::drivers::_LdwRoadway_default_instance_._instance.get_mutable()->adj_right_lane_ = const_cast< ::apollo::drivers::LdwLane*>(
      ::apollo::drivers::LdwLane::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LdwRoadway::kWidth0FieldNumber;
const int LdwRoadway::kWidth1FieldNumber;
const int LdwRoadway::kWidth2FieldNumber;
const int LdwRoadway::kIsTrackingFieldNumber;
const int LdwRoadway::kLeftLaneFieldNumber;
const int LdwRoadway::kRightLaneFieldNumber;
const int LdwRoadway::kAdjLeftLaneFieldNumber;
const int LdwRoadway::kAdjRightLaneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LdwRoadway::LdwRoadway()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_LdwRoadway.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.LdwRoadway)
}
LdwRoadway::LdwRoadway(const LdwRoadway& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left_lane()) {
    left_lane_ = new ::apollo::drivers::LdwLane(*from.left_lane_);
  } else {
    left_lane_ = NULL;
  }
  if (from.has_right_lane()) {
    right_lane_ = new ::apollo::drivers::LdwLane(*from.right_lane_);
  } else {
    right_lane_ = NULL;
  }
  if (from.has_adj_left_lane()) {
    adj_left_lane_ = new ::apollo::drivers::LdwLane(*from.adj_left_lane_);
  } else {
    adj_left_lane_ = NULL;
  }
  if (from.has_adj_right_lane()) {
    adj_right_lane_ = new ::apollo::drivers::LdwLane(*from.adj_right_lane_);
  } else {
    adj_right_lane_ = NULL;
  }
  ::memcpy(&width_0_, &from.width_0_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_tracking_) -
    reinterpret_cast<char*>(&width_0_)) + sizeof(is_tracking_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.LdwRoadway)
}

void LdwRoadway::SharedCtor() {
  ::memset(&left_lane_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_tracking_) -
      reinterpret_cast<char*>(&left_lane_)) + sizeof(is_tracking_));
}

LdwRoadway::~LdwRoadway() {
  // @@protoc_insertion_point(destructor:apollo.drivers.LdwRoadway)
  SharedDtor();
}

void LdwRoadway::SharedDtor() {
  if (this != internal_default_instance()) delete left_lane_;
  if (this != internal_default_instance()) delete right_lane_;
  if (this != internal_default_instance()) delete adj_left_lane_;
  if (this != internal_default_instance()) delete adj_right_lane_;
}

void LdwRoadway::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LdwRoadway::descriptor() {
  ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LdwRoadway& LdwRoadway::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_LdwRoadway.base);
  return *internal_default_instance();
}


void LdwRoadway::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.LdwRoadway)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(left_lane_ != NULL);
      left_lane_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(right_lane_ != NULL);
      right_lane_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(adj_left_lane_ != NULL);
      adj_left_lane_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(adj_right_lane_ != NULL);
      adj_right_lane_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&width_0_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_tracking_) -
        reinterpret_cast<char*>(&width_0_)) + sizeof(is_tracking_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LdwRoadway::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.LdwRoadway)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width_0 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_width_0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width_1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_width_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width_2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_width_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_tracking = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_tracking();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tracking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.LdwLane left_lane = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.LdwLane right_lane = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.LdwLane adj_left_lane = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_adj_left_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.LdwLane adj_right_lane = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_adj_right_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.LdwRoadway)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.LdwRoadway)
  return false;
#undef DO_
}

void LdwRoadway::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.LdwRoadway)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width_0 = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width_0(), output);
  }

  // optional int32 width_1 = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width_1(), output);
  }

  // optional int32 width_2 = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width_2(), output);
  }

  // optional bool is_tracking = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_tracking(), output);
  }

  // optional .apollo.drivers.LdwLane left_lane = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_left_lane(), output);
  }

  // optional .apollo.drivers.LdwLane right_lane = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_right_lane(), output);
  }

  // optional .apollo.drivers.LdwLane adj_left_lane = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_adj_left_lane(), output);
  }

  // optional .apollo.drivers.LdwLane adj_right_lane = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_adj_right_lane(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.LdwRoadway)
}

::google::protobuf::uint8* LdwRoadway::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.LdwRoadway)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width_0 = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width_0(), target);
  }

  // optional int32 width_1 = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width_1(), target);
  }

  // optional int32 width_2 = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width_2(), target);
  }

  // optional bool is_tracking = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_tracking(), target);
  }

  // optional .apollo.drivers.LdwLane left_lane = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_left_lane(), deterministic, target);
  }

  // optional .apollo.drivers.LdwLane right_lane = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_right_lane(), deterministic, target);
  }

  // optional .apollo.drivers.LdwLane adj_left_lane = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_adj_left_lane(), deterministic, target);
  }

  // optional .apollo.drivers.LdwLane adj_right_lane = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_adj_right_lane(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.LdwRoadway)
  return target;
}

size_t LdwRoadway::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.LdwRoadway)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.drivers.LdwLane left_lane = 5;
    if (has_left_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *left_lane_);
    }

    // optional .apollo.drivers.LdwLane right_lane = 6;
    if (has_right_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *right_lane_);
    }

    // optional .apollo.drivers.LdwLane adj_left_lane = 7;
    if (has_adj_left_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *adj_left_lane_);
    }

    // optional .apollo.drivers.LdwLane adj_right_lane = 8;
    if (has_adj_right_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *adj_right_lane_);
    }

    // optional int32 width_0 = 1;
    if (has_width_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width_0());
    }

    // optional int32 width_1 = 2;
    if (has_width_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width_1());
    }

    // optional int32 width_2 = 3;
    if (has_width_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width_2());
    }

    // optional bool is_tracking = 4;
    if (has_is_tracking()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LdwRoadway::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.LdwRoadway)
  GOOGLE_DCHECK_NE(&from, this);
  const LdwRoadway* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LdwRoadway>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.LdwRoadway)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.LdwRoadway)
    MergeFrom(*source);
  }
}

void LdwRoadway::MergeFrom(const LdwRoadway& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.LdwRoadway)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_left_lane()->::apollo::drivers::LdwLane::MergeFrom(from.left_lane());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_right_lane()->::apollo::drivers::LdwLane::MergeFrom(from.right_lane());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_adj_left_lane()->::apollo::drivers::LdwLane::MergeFrom(from.adj_left_lane());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_adj_right_lane()->::apollo::drivers::LdwLane::MergeFrom(from.adj_right_lane());
    }
    if (cached_has_bits & 0x00000010u) {
      width_0_ = from.width_0_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_1_ = from.width_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      width_2_ = from.width_2_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_tracking_ = from.is_tracking_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LdwRoadway::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.LdwRoadway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LdwRoadway::CopyFrom(const LdwRoadway& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.LdwRoadway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LdwRoadway::IsInitialized() const {
  return true;
}

void LdwRoadway::Swap(LdwRoadway* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LdwRoadway::InternalSwap(LdwRoadway* other) {
  using std::swap;
  swap(left_lane_, other->left_lane_);
  swap(right_lane_, other->right_lane_);
  swap(adj_left_lane_, other->adj_left_lane_);
  swap(adj_right_lane_, other->adj_right_lane_);
  swap(width_0_, other->width_0_);
  swap(width_1_, other->width_1_);
  swap(width_2_, other->width_2_);
  swap(is_tracking_, other->is_tracking_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LdwRoadway::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LdwLensInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LdwLensInfo::kXImageFocalFieldNumber;
const int LdwLensInfo::kYImageFocalFieldNumber;
const int LdwLensInfo::kXratioFocalPixelFieldNumber;
const int LdwLensInfo::kYratioFocalPixelFieldNumber;
const int LdwLensInfo::kMountingheightFieldNumber;
const int LdwLensInfo::kMcosrxFieldNumber;
const int LdwLensInfo::kMsinrxFieldNumber;
const int LdwLensInfo::kMcosryFieldNumber;
const int LdwLensInfo::kMsinryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LdwLensInfo::LdwLensInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_LdwLensInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.LdwLensInfo)
}
LdwLensInfo::LdwLensInfo(const LdwLensInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_image_focal_, &from.x_image_focal_,
    static_cast<size_t>(reinterpret_cast<char*>(&msinry_) -
    reinterpret_cast<char*>(&x_image_focal_)) + sizeof(msinry_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.LdwLensInfo)
}

void LdwLensInfo::SharedCtor() {
  ::memset(&x_image_focal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msinry_) -
      reinterpret_cast<char*>(&x_image_focal_)) + sizeof(msinry_));
}

LdwLensInfo::~LdwLensInfo() {
  // @@protoc_insertion_point(destructor:apollo.drivers.LdwLensInfo)
  SharedDtor();
}

void LdwLensInfo::SharedDtor() {
}

void LdwLensInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LdwLensInfo::descriptor() {
  ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LdwLensInfo& LdwLensInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_LdwLensInfo.base);
  return *internal_default_instance();
}


void LdwLensInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.LdwLensInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&x_image_focal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mcosry_) -
        reinterpret_cast<char*>(&x_image_focal_)) + sizeof(mcosry_));
  }
  msinry_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LdwLensInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.LdwLensInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x_image_focal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x_image_focal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_image_focal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y_image_focal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y_image_focal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_image_focal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float xratio_focal_pixel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_xratio_focal_pixel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xratio_focal_pixel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float yratio_focal_pixel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_yratio_focal_pixel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yratio_focal_pixel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mountingheight = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_mountingheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mountingheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mcosrx = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_mcosrx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mcosrx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float msinrx = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_msinrx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &msinrx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mcosry = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_mcosry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mcosry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float msinry = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_msinry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &msinry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.LdwLensInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.LdwLensInfo)
  return false;
#undef DO_
}

void LdwLensInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.LdwLensInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x_image_focal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_image_focal(), output);
  }

  // optional float y_image_focal = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y_image_focal(), output);
  }

  // optional float xratio_focal_pixel = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->xratio_focal_pixel(), output);
  }

  // optional float yratio_focal_pixel = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yratio_focal_pixel(), output);
  }

  // optional float mountingheight = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->mountingheight(), output);
  }

  // optional float mcosrx = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->mcosrx(), output);
  }

  // optional float msinrx = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->msinrx(), output);
  }

  // optional float mcosry = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->mcosry(), output);
  }

  // optional float msinry = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->msinry(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.LdwLensInfo)
}

::google::protobuf::uint8* LdwLensInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.LdwLensInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x_image_focal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_image_focal(), target);
  }

  // optional float y_image_focal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y_image_focal(), target);
  }

  // optional float xratio_focal_pixel = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->xratio_focal_pixel(), target);
  }

  // optional float yratio_focal_pixel = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->yratio_focal_pixel(), target);
  }

  // optional float mountingheight = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->mountingheight(), target);
  }

  // optional float mcosrx = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->mcosrx(), target);
  }

  // optional float msinrx = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->msinrx(), target);
  }

  // optional float mcosry = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->mcosry(), target);
  }

  // optional float msinry = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->msinry(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.LdwLensInfo)
  return target;
}

size_t LdwLensInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.LdwLensInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float x_image_focal = 1;
    if (has_x_image_focal()) {
      total_size += 1 + 4;
    }

    // optional float y_image_focal = 2;
    if (has_y_image_focal()) {
      total_size += 1 + 4;
    }

    // optional float xratio_focal_pixel = 3;
    if (has_xratio_focal_pixel()) {
      total_size += 1 + 4;
    }

    // optional float yratio_focal_pixel = 4;
    if (has_yratio_focal_pixel()) {
      total_size += 1 + 4;
    }

    // optional float mountingheight = 5;
    if (has_mountingheight()) {
      total_size += 1 + 4;
    }

    // optional float mcosrx = 6;
    if (has_mcosrx()) {
      total_size += 1 + 4;
    }

    // optional float msinrx = 7;
    if (has_msinrx()) {
      total_size += 1 + 4;
    }

    // optional float mcosry = 8;
    if (has_mcosry()) {
      total_size += 1 + 4;
    }

  }
  // optional float msinry = 9;
  if (has_msinry()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LdwLensInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.LdwLensInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LdwLensInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LdwLensInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.LdwLensInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.LdwLensInfo)
    MergeFrom(*source);
  }
}

void LdwLensInfo::MergeFrom(const LdwLensInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.LdwLensInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      x_image_focal_ = from.x_image_focal_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_image_focal_ = from.y_image_focal_;
    }
    if (cached_has_bits & 0x00000004u) {
      xratio_focal_pixel_ = from.xratio_focal_pixel_;
    }
    if (cached_has_bits & 0x00000008u) {
      yratio_focal_pixel_ = from.yratio_focal_pixel_;
    }
    if (cached_has_bits & 0x00000010u) {
      mountingheight_ = from.mountingheight_;
    }
    if (cached_has_bits & 0x00000020u) {
      mcosrx_ = from.mcosrx_;
    }
    if (cached_has_bits & 0x00000040u) {
      msinrx_ = from.msinrx_;
    }
    if (cached_has_bits & 0x00000080u) {
      mcosry_ = from.mcosry_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_msinry(from.msinry());
  }
}

void LdwLensInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.LdwLensInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LdwLensInfo::CopyFrom(const LdwLensInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.LdwLensInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LdwLensInfo::IsInitialized() const {
  return true;
}

void LdwLensInfo::Swap(LdwLensInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LdwLensInfo::InternalSwap(LdwLensInfo* other) {
  using std::swap;
  swap(x_image_focal_, other->x_image_focal_);
  swap(y_image_focal_, other->y_image_focal_);
  swap(xratio_focal_pixel_, other->xratio_focal_pixel_);
  swap(yratio_focal_pixel_, other->yratio_focal_pixel_);
  swap(mountingheight_, other->mountingheight_);
  swap(mcosrx_, other->mcosrx_);
  swap(msinrx_, other->msinrx_);
  swap(mcosry_, other->mcosry_);
  swap(msinry_, other->msinry_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LdwLensInfo::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LdwDataPacks::InitAsDefaultInstance() {
  ::apollo::drivers::_LdwDataPacks_default_instance_._instance.get_mutable()->roadway_ = const_cast< ::apollo::drivers::LdwRoadway*>(
      ::apollo::drivers::LdwRoadway::internal_default_instance());
  ::apollo::drivers::_LdwDataPacks_default_instance_._instance.get_mutable()->lens_ = const_cast< ::apollo::drivers::LdwLensInfo*>(
      ::apollo::drivers::LdwLensInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LdwDataPacks::kRoadwayFieldNumber;
const int LdwDataPacks::kSoftstatusFieldNumber;
const int LdwDataPacks::kSteerstatusFieldNumber;
const int LdwDataPacks::kLensFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LdwDataPacks::LdwDataPacks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_LdwDataPacks.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.LdwDataPacks)
}
LdwDataPacks::LdwDataPacks(const LdwDataPacks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_roadway()) {
    roadway_ = new ::apollo::drivers::LdwRoadway(*from.roadway_);
  } else {
    roadway_ = NULL;
  }
  if (from.has_lens()) {
    lens_ = new ::apollo::drivers::LdwLensInfo(*from.lens_);
  } else {
    lens_ = NULL;
  }
  ::memcpy(&softstatus_, &from.softstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&steerstatus_) -
    reinterpret_cast<char*>(&softstatus_)) + sizeof(steerstatus_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.LdwDataPacks)
}

void LdwDataPacks::SharedCtor() {
  ::memset(&roadway_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steerstatus_) -
      reinterpret_cast<char*>(&roadway_)) + sizeof(steerstatus_));
}

LdwDataPacks::~LdwDataPacks() {
  // @@protoc_insertion_point(destructor:apollo.drivers.LdwDataPacks)
  SharedDtor();
}

void LdwDataPacks::SharedDtor() {
  if (this != internal_default_instance()) delete roadway_;
  if (this != internal_default_instance()) delete lens_;
}

void LdwDataPacks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LdwDataPacks::descriptor() {
  ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LdwDataPacks& LdwDataPacks::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_LdwDataPacks.base);
  return *internal_default_instance();
}


void LdwDataPacks::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.LdwDataPacks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(roadway_ != NULL);
      roadway_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lens_ != NULL);
      lens_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&softstatus_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steerstatus_) -
        reinterpret_cast<char*>(&softstatus_)) + sizeof(steerstatus_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LdwDataPacks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.LdwDataPacks)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.LdwRoadway roadway = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_roadway()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.LdwSoftStatus softstatus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::LdwSoftStatus_IsValid(value)) {
            set_softstatus(static_cast< ::apollo::drivers::LdwSoftStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.LdwSteerStatus steerstatus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::LdwSteerStatus_IsValid(value)) {
            set_steerstatus(static_cast< ::apollo::drivers::LdwSteerStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.LdwLensInfo lens = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.LdwDataPacks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.LdwDataPacks)
  return false;
#undef DO_
}

void LdwDataPacks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.LdwDataPacks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.LdwRoadway roadway = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_roadway(), output);
  }

  // optional .apollo.drivers.LdwSoftStatus softstatus = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->softstatus(), output);
  }

  // optional .apollo.drivers.LdwSteerStatus steerstatus = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->steerstatus(), output);
  }

  // optional .apollo.drivers.LdwLensInfo lens = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_lens(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.LdwDataPacks)
}

::google::protobuf::uint8* LdwDataPacks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.LdwDataPacks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.LdwRoadway roadway = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_roadway(), deterministic, target);
  }

  // optional .apollo.drivers.LdwSoftStatus softstatus = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->softstatus(), target);
  }

  // optional .apollo.drivers.LdwSteerStatus steerstatus = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->steerstatus(), target);
  }

  // optional .apollo.drivers.LdwLensInfo lens = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_lens(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.LdwDataPacks)
  return target;
}

size_t LdwDataPacks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.LdwDataPacks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.drivers.LdwRoadway roadway = 1;
    if (has_roadway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *roadway_);
    }

    // optional .apollo.drivers.LdwLensInfo lens = 4;
    if (has_lens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lens_);
    }

    // optional .apollo.drivers.LdwSoftStatus softstatus = 2;
    if (has_softstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->softstatus());
    }

    // optional .apollo.drivers.LdwSteerStatus steerstatus = 3;
    if (has_steerstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->steerstatus());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LdwDataPacks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.LdwDataPacks)
  GOOGLE_DCHECK_NE(&from, this);
  const LdwDataPacks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LdwDataPacks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.LdwDataPacks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.LdwDataPacks)
    MergeFrom(*source);
  }
}

void LdwDataPacks::MergeFrom(const LdwDataPacks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.LdwDataPacks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_roadway()->::apollo::drivers::LdwRoadway::MergeFrom(from.roadway());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lens()->::apollo::drivers::LdwLensInfo::MergeFrom(from.lens());
    }
    if (cached_has_bits & 0x00000004u) {
      softstatus_ = from.softstatus_;
    }
    if (cached_has_bits & 0x00000008u) {
      steerstatus_ = from.steerstatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LdwDataPacks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.LdwDataPacks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LdwDataPacks::CopyFrom(const LdwDataPacks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.LdwDataPacks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LdwDataPacks::IsInitialized() const {
  return true;
}

void LdwDataPacks::Swap(LdwDataPacks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LdwDataPacks::InternalSwap(LdwDataPacks* other) {
  using std::swap;
  swap(roadway_, other->roadway_);
  swap(lens_, other->lens_);
  swap(softstatus_, other->softstatus_);
  swap(steerstatus_, other->steerstatus_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LdwDataPacks::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OutputObstacle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OutputObstacle::kCurrentspeedFieldNumber;
const int OutputObstacle::kFramerateFieldNumber;
const int OutputObstacle::kTrackidFieldNumber;
const int OutputObstacle::kTrackframenumFieldNumber;
const int OutputObstacle::kStatelabelFieldNumber;
const int OutputObstacle::kClasslabelFieldNumber;
const int OutputObstacle::kContinuouslabelFieldNumber;
const int OutputObstacle::kFuzzyestimationvalidFieldNumber;
const int OutputObstacle::kObstacletypeFieldNumber;
const int OutputObstacle::kAvgdispFieldNumber;
const int OutputObstacle::kAvgdistancezFieldNumber;
const int OutputObstacle::kNeardistancezFieldNumber;
const int OutputObstacle::kFardistancezFieldNumber;
const int OutputObstacle::kReal3DleftxFieldNumber;
const int OutputObstacle::kReal3DrightxFieldNumber;
const int OutputObstacle::kReal3DcenterxFieldNumber;
const int OutputObstacle::kReal3DupyFieldNumber;
const int OutputObstacle::kReal3DlowyFieldNumber;
const int OutputObstacle::kFirstpointxFieldNumber;
const int OutputObstacle::kFirstpointyFieldNumber;
const int OutputObstacle::kSecondpointxFieldNumber;
const int OutputObstacle::kSecondpointyFieldNumber;
const int OutputObstacle::kThirdpointxFieldNumber;
const int OutputObstacle::kThirdpointyFieldNumber;
const int OutputObstacle::kFourthpointxFieldNumber;
const int OutputObstacle::kFourthpointyFieldNumber;
const int OutputObstacle::kFuzzyrelativedistancezFieldNumber;
const int OutputObstacle::kFuzzyrelativespeedzFieldNumber;
const int OutputObstacle::kFuzzycollisiontimezFieldNumber;
const int OutputObstacle::kFuzzycollisionxFieldNumber;
const int OutputObstacle::kFuzzy3DwidthFieldNumber;
const int OutputObstacle::kFuzzy3DcenterxFieldNumber;
const int OutputObstacle::kFuzzy3DleftxFieldNumber;
const int OutputObstacle::kFuzzy3DrightxFieldNumber;
const int OutputObstacle::kFuzzy3DheightFieldNumber;
const int OutputObstacle::kFuzzy3DupyFieldNumber;
const int OutputObstacle::kFuzzy3DlowyFieldNumber;
const int OutputObstacle::kFuzzyrelativespeedcenterxFieldNumber;
const int OutputObstacle::kFuzzyrelativespeedleftxFieldNumber;
const int OutputObstacle::kFuzzyrelativespeedrightxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OutputObstacle::OutputObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_OutputObstacle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.OutputObstacle)
}
OutputObstacle::OutputObstacle(const OutputObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&currentspeed_, &from.currentspeed_,
    static_cast<size_t>(reinterpret_cast<char*>(&fuzzyrelativespeedrightx_) -
    reinterpret_cast<char*>(&currentspeed_)) + sizeof(fuzzyrelativespeedrightx_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.OutputObstacle)
}

void OutputObstacle::SharedCtor() {
  ::memset(&currentspeed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fuzzyrelativespeedrightx_) -
      reinterpret_cast<char*>(&currentspeed_)) + sizeof(fuzzyrelativespeedrightx_));
}

OutputObstacle::~OutputObstacle() {
  // @@protoc_insertion_point(destructor:apollo.drivers.OutputObstacle)
  SharedDtor();
}

void OutputObstacle::SharedDtor() {
}

void OutputObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OutputObstacle::descriptor() {
  ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OutputObstacle& OutputObstacle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_OutputObstacle.base);
  return *internal_default_instance();
}


void OutputObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.OutputObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&currentspeed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fuzzyestimationvalid_) -
        reinterpret_cast<char*>(&currentspeed_)) + sizeof(fuzzyestimationvalid_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&obstacletype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&real3dcenterx_) -
        reinterpret_cast<char*>(&obstacletype_)) + sizeof(real3dcenterx_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&real3dupy_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&thirdpointy_) -
        reinterpret_cast<char*>(&real3dupy_)) + sizeof(thirdpointy_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&fourthpointx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fuzzy3dcenterx_) -
        reinterpret_cast<char*>(&fourthpointx_)) + sizeof(fuzzy3dcenterx_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    ::memset(&fuzzy3dleftx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fuzzyrelativespeedrightx_) -
        reinterpret_cast<char*>(&fuzzy3dleftx_)) + sizeof(fuzzyrelativespeedrightx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OutputObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.OutputObstacle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float currentspeed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_currentspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &currentspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float framerate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_framerate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &framerate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trackid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_trackid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trackid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trackframenum = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_trackframenum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trackframenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 statelabel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_statelabel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statelabel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 classlabel = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_classlabel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &classlabel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 continuouslabel = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_continuouslabel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &continuouslabel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fuzzyestimationvalid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_fuzzyestimationvalid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fuzzyestimationvalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.OutputObstacle.RecognitionType obstacletype = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::OutputObstacle_RecognitionType_IsValid(value)) {
            set_obstacletype(static_cast< ::apollo::drivers::OutputObstacle_RecognitionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float avgdisp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_avgdisp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avgdisp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float avgdistancez = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_avgdistancez();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avgdistancez_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float neardistancez = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_neardistancez();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &neardistancez_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fardistancez = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_fardistancez();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fardistancez_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float real3dleftx = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_real3dleftx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &real3dleftx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float real3drightx = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_real3drightx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &real3drightx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float real3dcenterx = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_real3dcenterx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &real3dcenterx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float real3dupy = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {
          set_has_real3dupy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &real3dupy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float real3dlowy = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {
          set_has_real3dlowy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &real3dlowy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 firstpointx = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_firstpointx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstpointx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 firstpointy = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_firstpointy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstpointy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 secondpointx = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_secondpointx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondpointx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 secondpointy = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_secondpointy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondpointy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 thirdpointx = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_thirdpointx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thirdpointx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 thirdpointy = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_thirdpointy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thirdpointy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fourthpointx = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_fourthpointx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fourthpointx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fourthpointy = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_fourthpointy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fourthpointy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fuzzyrelativedistancez = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u /* 221 & 0xFF */)) {
          set_has_fuzzyrelativedistancez();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fuzzyrelativedistancez_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fuzzyrelativespeedz = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u /* 229 & 0xFF */)) {
          set_has_fuzzyrelativespeedz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fuzzyrelativespeedz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fuzzycollisiontimez = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(237u /* 237 & 0xFF */)) {
          set_has_fuzzycollisiontimez();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fuzzycollisiontimez_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fuzzycollisionx = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_fuzzycollisionx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fuzzycollisionx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fuzzy3dwidth = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(253u /* 253 & 0xFF */)) {
          set_has_fuzzy3dwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fuzzy3dwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fuzzy3dcenterx = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(5u /* 261 & 0xFF */)) {
          set_has_fuzzy3dcenterx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fuzzy3dcenterx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fuzzy3dleftx = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 269 & 0xFF */)) {
          set_has_fuzzy3dleftx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fuzzy3dleftx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fuzzy3drightx = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 277 & 0xFF */)) {
          set_has_fuzzy3drightx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fuzzy3drightx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fuzzy3dheight = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 285 & 0xFF */)) {
          set_has_fuzzy3dheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fuzzy3dheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fuzzy3dupy = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 293 & 0xFF */)) {
          set_has_fuzzy3dupy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fuzzy3dupy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fuzzy3dlowy = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 301 & 0xFF */)) {
          set_has_fuzzy3dlowy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fuzzy3dlowy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fuzzyrelativespeedcenterx = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 309 & 0xFF */)) {
          set_has_fuzzyrelativespeedcenterx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fuzzyrelativespeedcenterx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fuzzyrelativespeedleftx = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 317 & 0xFF */)) {
          set_has_fuzzyrelativespeedleftx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fuzzyrelativespeedleftx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fuzzyrelativespeedrightx = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 325 & 0xFF */)) {
          set_has_fuzzyrelativespeedrightx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fuzzyrelativespeedrightx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.OutputObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.OutputObstacle)
  return false;
#undef DO_
}

void OutputObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.OutputObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float currentspeed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->currentspeed(), output);
  }

  // optional float framerate = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->framerate(), output);
  }

  // optional uint32 trackid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->trackid(), output);
  }

  // optional uint32 trackframenum = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->trackframenum(), output);
  }

  // optional uint32 statelabel = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->statelabel(), output);
  }

  // optional uint32 classlabel = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->classlabel(), output);
  }

  // optional uint32 continuouslabel = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->continuouslabel(), output);
  }

  // optional uint32 fuzzyestimationvalid = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fuzzyestimationvalid(), output);
  }

  // optional .apollo.drivers.OutputObstacle.RecognitionType obstacletype = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->obstacletype(), output);
  }

  // optional float avgdisp = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->avgdisp(), output);
  }

  // optional float avgdistancez = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->avgdistancez(), output);
  }

  // optional float neardistancez = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->neardistancez(), output);
  }

  // optional float fardistancez = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->fardistancez(), output);
  }

  // optional float real3dleftx = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->real3dleftx(), output);
  }

  // optional float real3drightx = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->real3drightx(), output);
  }

  // optional float real3dcenterx = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->real3dcenterx(), output);
  }

  // optional float real3dupy = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->real3dupy(), output);
  }

  // optional float real3dlowy = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->real3dlowy(), output);
  }

  // optional uint32 firstpointx = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->firstpointx(), output);
  }

  // optional uint32 firstpointy = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->firstpointy(), output);
  }

  // optional uint32 secondpointx = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->secondpointx(), output);
  }

  // optional uint32 secondpointy = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->secondpointy(), output);
  }

  // optional uint32 thirdpointx = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->thirdpointx(), output);
  }

  // optional uint32 thirdpointy = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->thirdpointy(), output);
  }

  // optional uint32 fourthpointx = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->fourthpointx(), output);
  }

  // optional uint32 fourthpointy = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->fourthpointy(), output);
  }

  // optional float fuzzyrelativedistancez = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->fuzzyrelativedistancez(), output);
  }

  // optional float fuzzyrelativespeedz = 28;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->fuzzyrelativespeedz(), output);
  }

  // optional float fuzzycollisiontimez = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->fuzzycollisiontimez(), output);
  }

  // optional uint32 fuzzycollisionx = 30;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->fuzzycollisionx(), output);
  }

  // optional float fuzzy3dwidth = 31;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->fuzzy3dwidth(), output);
  }

  // optional float fuzzy3dcenterx = 32;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->fuzzy3dcenterx(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional float fuzzy3dleftx = 33;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->fuzzy3dleftx(), output);
  }

  // optional float fuzzy3drightx = 34;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->fuzzy3drightx(), output);
  }

  // optional float fuzzy3dheight = 35;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->fuzzy3dheight(), output);
  }

  // optional float fuzzy3dupy = 36;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->fuzzy3dupy(), output);
  }

  // optional float fuzzy3dlowy = 37;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->fuzzy3dlowy(), output);
  }

  // optional float fuzzyrelativespeedcenterx = 38;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->fuzzyrelativespeedcenterx(), output);
  }

  // optional float fuzzyrelativespeedleftx = 39;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->fuzzyrelativespeedleftx(), output);
  }

  // optional float fuzzyrelativespeedrightx = 40;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->fuzzyrelativespeedrightx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.OutputObstacle)
}

::google::protobuf::uint8* OutputObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.OutputObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float currentspeed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->currentspeed(), target);
  }

  // optional float framerate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->framerate(), target);
  }

  // optional uint32 trackid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->trackid(), target);
  }

  // optional uint32 trackframenum = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->trackframenum(), target);
  }

  // optional uint32 statelabel = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->statelabel(), target);
  }

  // optional uint32 classlabel = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->classlabel(), target);
  }

  // optional uint32 continuouslabel = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->continuouslabel(), target);
  }

  // optional uint32 fuzzyestimationvalid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->fuzzyestimationvalid(), target);
  }

  // optional .apollo.drivers.OutputObstacle.RecognitionType obstacletype = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->obstacletype(), target);
  }

  // optional float avgdisp = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->avgdisp(), target);
  }

  // optional float avgdistancez = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->avgdistancez(), target);
  }

  // optional float neardistancez = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->neardistancez(), target);
  }

  // optional float fardistancez = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->fardistancez(), target);
  }

  // optional float real3dleftx = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->real3dleftx(), target);
  }

  // optional float real3drightx = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->real3drightx(), target);
  }

  // optional float real3dcenterx = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->real3dcenterx(), target);
  }

  // optional float real3dupy = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->real3dupy(), target);
  }

  // optional float real3dlowy = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->real3dlowy(), target);
  }

  // optional uint32 firstpointx = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->firstpointx(), target);
  }

  // optional uint32 firstpointy = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->firstpointy(), target);
  }

  // optional uint32 secondpointx = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->secondpointx(), target);
  }

  // optional uint32 secondpointy = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->secondpointy(), target);
  }

  // optional uint32 thirdpointx = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->thirdpointx(), target);
  }

  // optional uint32 thirdpointy = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->thirdpointy(), target);
  }

  // optional uint32 fourthpointx = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->fourthpointx(), target);
  }

  // optional uint32 fourthpointy = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->fourthpointy(), target);
  }

  // optional float fuzzyrelativedistancez = 27;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->fuzzyrelativedistancez(), target);
  }

  // optional float fuzzyrelativespeedz = 28;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->fuzzyrelativespeedz(), target);
  }

  // optional float fuzzycollisiontimez = 29;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->fuzzycollisiontimez(), target);
  }

  // optional uint32 fuzzycollisionx = 30;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->fuzzycollisionx(), target);
  }

  // optional float fuzzy3dwidth = 31;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->fuzzy3dwidth(), target);
  }

  // optional float fuzzy3dcenterx = 32;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->fuzzy3dcenterx(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float fuzzy3dleftx = 33;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->fuzzy3dleftx(), target);
  }

  // optional float fuzzy3drightx = 34;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->fuzzy3drightx(), target);
  }

  // optional float fuzzy3dheight = 35;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->fuzzy3dheight(), target);
  }

  // optional float fuzzy3dupy = 36;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->fuzzy3dupy(), target);
  }

  // optional float fuzzy3dlowy = 37;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(37, this->fuzzy3dlowy(), target);
  }

  // optional float fuzzyrelativespeedcenterx = 38;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->fuzzyrelativespeedcenterx(), target);
  }

  // optional float fuzzyrelativespeedleftx = 39;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->fuzzyrelativespeedleftx(), target);
  }

  // optional float fuzzyrelativespeedrightx = 40;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->fuzzyrelativespeedrightx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.OutputObstacle)
  return target;
}

size_t OutputObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.OutputObstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float currentspeed = 1;
    if (has_currentspeed()) {
      total_size += 1 + 4;
    }

    // optional float framerate = 2;
    if (has_framerate()) {
      total_size += 1 + 4;
    }

    // optional uint32 trackid = 3;
    if (has_trackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trackid());
    }

    // optional uint32 trackframenum = 4;
    if (has_trackframenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trackframenum());
    }

    // optional uint32 statelabel = 5;
    if (has_statelabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->statelabel());
    }

    // optional uint32 classlabel = 6;
    if (has_classlabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->classlabel());
    }

    // optional uint32 continuouslabel = 7;
    if (has_continuouslabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->continuouslabel());
    }

    // optional uint32 fuzzyestimationvalid = 8;
    if (has_fuzzyestimationvalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fuzzyestimationvalid());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .apollo.drivers.OutputObstacle.RecognitionType obstacletype = 9;
    if (has_obstacletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->obstacletype());
    }

    // optional float avgdisp = 10;
    if (has_avgdisp()) {
      total_size += 1 + 4;
    }

    // optional float avgdistancez = 11;
    if (has_avgdistancez()) {
      total_size += 1 + 4;
    }

    // optional float neardistancez = 12;
    if (has_neardistancez()) {
      total_size += 1 + 4;
    }

    // optional float fardistancez = 13;
    if (has_fardistancez()) {
      total_size += 1 + 4;
    }

    // optional float real3dleftx = 14;
    if (has_real3dleftx()) {
      total_size += 1 + 4;
    }

    // optional float real3drightx = 15;
    if (has_real3drightx()) {
      total_size += 1 + 4;
    }

    // optional float real3dcenterx = 16;
    if (has_real3dcenterx()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float real3dupy = 17;
    if (has_real3dupy()) {
      total_size += 2 + 4;
    }

    // optional float real3dlowy = 18;
    if (has_real3dlowy()) {
      total_size += 2 + 4;
    }

    // optional uint32 firstpointx = 19;
    if (has_firstpointx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firstpointx());
    }

    // optional uint32 firstpointy = 20;
    if (has_firstpointy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firstpointy());
    }

    // optional uint32 secondpointx = 21;
    if (has_secondpointx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondpointx());
    }

    // optional uint32 secondpointy = 22;
    if (has_secondpointy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondpointy());
    }

    // optional uint32 thirdpointx = 23;
    if (has_thirdpointx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thirdpointx());
    }

    // optional uint32 thirdpointy = 24;
    if (has_thirdpointy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thirdpointy());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 fourthpointx = 25;
    if (has_fourthpointx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fourthpointx());
    }

    // optional uint32 fourthpointy = 26;
    if (has_fourthpointy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fourthpointy());
    }

    // optional float fuzzyrelativedistancez = 27;
    if (has_fuzzyrelativedistancez()) {
      total_size += 2 + 4;
    }

    // optional float fuzzyrelativespeedz = 28;
    if (has_fuzzyrelativespeedz()) {
      total_size += 2 + 4;
    }

    // optional float fuzzycollisiontimez = 29;
    if (has_fuzzycollisiontimez()) {
      total_size += 2 + 4;
    }

    // optional uint32 fuzzycollisionx = 30;
    if (has_fuzzycollisionx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fuzzycollisionx());
    }

    // optional float fuzzy3dwidth = 31;
    if (has_fuzzy3dwidth()) {
      total_size += 2 + 4;
    }

    // optional float fuzzy3dcenterx = 32;
    if (has_fuzzy3dcenterx()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional float fuzzy3dleftx = 33;
    if (has_fuzzy3dleftx()) {
      total_size += 2 + 4;
    }

    // optional float fuzzy3drightx = 34;
    if (has_fuzzy3drightx()) {
      total_size += 2 + 4;
    }

    // optional float fuzzy3dheight = 35;
    if (has_fuzzy3dheight()) {
      total_size += 2 + 4;
    }

    // optional float fuzzy3dupy = 36;
    if (has_fuzzy3dupy()) {
      total_size += 2 + 4;
    }

    // optional float fuzzy3dlowy = 37;
    if (has_fuzzy3dlowy()) {
      total_size += 2 + 4;
    }

    // optional float fuzzyrelativespeedcenterx = 38;
    if (has_fuzzyrelativespeedcenterx()) {
      total_size += 2 + 4;
    }

    // optional float fuzzyrelativespeedleftx = 39;
    if (has_fuzzyrelativespeedleftx()) {
      total_size += 2 + 4;
    }

    // optional float fuzzyrelativespeedrightx = 40;
    if (has_fuzzyrelativespeedrightx()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.OutputObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputObstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OutputObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.OutputObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.OutputObstacle)
    MergeFrom(*source);
  }
}

void OutputObstacle::MergeFrom(const OutputObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.OutputObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      currentspeed_ = from.currentspeed_;
    }
    if (cached_has_bits & 0x00000002u) {
      framerate_ = from.framerate_;
    }
    if (cached_has_bits & 0x00000004u) {
      trackid_ = from.trackid_;
    }
    if (cached_has_bits & 0x00000008u) {
      trackframenum_ = from.trackframenum_;
    }
    if (cached_has_bits & 0x00000010u) {
      statelabel_ = from.statelabel_;
    }
    if (cached_has_bits & 0x00000020u) {
      classlabel_ = from.classlabel_;
    }
    if (cached_has_bits & 0x00000040u) {
      continuouslabel_ = from.continuouslabel_;
    }
    if (cached_has_bits & 0x00000080u) {
      fuzzyestimationvalid_ = from.fuzzyestimationvalid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      obstacletype_ = from.obstacletype_;
    }
    if (cached_has_bits & 0x00000200u) {
      avgdisp_ = from.avgdisp_;
    }
    if (cached_has_bits & 0x00000400u) {
      avgdistancez_ = from.avgdistancez_;
    }
    if (cached_has_bits & 0x00000800u) {
      neardistancez_ = from.neardistancez_;
    }
    if (cached_has_bits & 0x00001000u) {
      fardistancez_ = from.fardistancez_;
    }
    if (cached_has_bits & 0x00002000u) {
      real3dleftx_ = from.real3dleftx_;
    }
    if (cached_has_bits & 0x00004000u) {
      real3drightx_ = from.real3drightx_;
    }
    if (cached_has_bits & 0x00008000u) {
      real3dcenterx_ = from.real3dcenterx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      real3dupy_ = from.real3dupy_;
    }
    if (cached_has_bits & 0x00020000u) {
      real3dlowy_ = from.real3dlowy_;
    }
    if (cached_has_bits & 0x00040000u) {
      firstpointx_ = from.firstpointx_;
    }
    if (cached_has_bits & 0x00080000u) {
      firstpointy_ = from.firstpointy_;
    }
    if (cached_has_bits & 0x00100000u) {
      secondpointx_ = from.secondpointx_;
    }
    if (cached_has_bits & 0x00200000u) {
      secondpointy_ = from.secondpointy_;
    }
    if (cached_has_bits & 0x00400000u) {
      thirdpointx_ = from.thirdpointx_;
    }
    if (cached_has_bits & 0x00800000u) {
      thirdpointy_ = from.thirdpointy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      fourthpointx_ = from.fourthpointx_;
    }
    if (cached_has_bits & 0x02000000u) {
      fourthpointy_ = from.fourthpointy_;
    }
    if (cached_has_bits & 0x04000000u) {
      fuzzyrelativedistancez_ = from.fuzzyrelativedistancez_;
    }
    if (cached_has_bits & 0x08000000u) {
      fuzzyrelativespeedz_ = from.fuzzyrelativespeedz_;
    }
    if (cached_has_bits & 0x10000000u) {
      fuzzycollisiontimez_ = from.fuzzycollisiontimez_;
    }
    if (cached_has_bits & 0x20000000u) {
      fuzzycollisionx_ = from.fuzzycollisionx_;
    }
    if (cached_has_bits & 0x40000000u) {
      fuzzy3dwidth_ = from.fuzzy3dwidth_;
    }
    if (cached_has_bits & 0x80000000u) {
      fuzzy3dcenterx_ = from.fuzzy3dcenterx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      fuzzy3dleftx_ = from.fuzzy3dleftx_;
    }
    if (cached_has_bits & 0x00000002u) {
      fuzzy3drightx_ = from.fuzzy3drightx_;
    }
    if (cached_has_bits & 0x00000004u) {
      fuzzy3dheight_ = from.fuzzy3dheight_;
    }
    if (cached_has_bits & 0x00000008u) {
      fuzzy3dupy_ = from.fuzzy3dupy_;
    }
    if (cached_has_bits & 0x00000010u) {
      fuzzy3dlowy_ = from.fuzzy3dlowy_;
    }
    if (cached_has_bits & 0x00000020u) {
      fuzzyrelativespeedcenterx_ = from.fuzzyrelativespeedcenterx_;
    }
    if (cached_has_bits & 0x00000040u) {
      fuzzyrelativespeedleftx_ = from.fuzzyrelativespeedleftx_;
    }
    if (cached_has_bits & 0x00000080u) {
      fuzzyrelativespeedrightx_ = from.fuzzyrelativespeedrightx_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void OutputObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.OutputObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputObstacle::CopyFrom(const OutputObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.OutputObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputObstacle::IsInitialized() const {
  return true;
}

void OutputObstacle::Swap(OutputObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OutputObstacle::InternalSwap(OutputObstacle* other) {
  using std::swap;
  swap(currentspeed_, other->currentspeed_);
  swap(framerate_, other->framerate_);
  swap(trackid_, other->trackid_);
  swap(trackframenum_, other->trackframenum_);
  swap(statelabel_, other->statelabel_);
  swap(classlabel_, other->classlabel_);
  swap(continuouslabel_, other->continuouslabel_);
  swap(fuzzyestimationvalid_, other->fuzzyestimationvalid_);
  swap(obstacletype_, other->obstacletype_);
  swap(avgdisp_, other->avgdisp_);
  swap(avgdistancez_, other->avgdistancez_);
  swap(neardistancez_, other->neardistancez_);
  swap(fardistancez_, other->fardistancez_);
  swap(real3dleftx_, other->real3dleftx_);
  swap(real3drightx_, other->real3drightx_);
  swap(real3dcenterx_, other->real3dcenterx_);
  swap(real3dupy_, other->real3dupy_);
  swap(real3dlowy_, other->real3dlowy_);
  swap(firstpointx_, other->firstpointx_);
  swap(firstpointy_, other->firstpointy_);
  swap(secondpointx_, other->secondpointx_);
  swap(secondpointy_, other->secondpointy_);
  swap(thirdpointx_, other->thirdpointx_);
  swap(thirdpointy_, other->thirdpointy_);
  swap(fourthpointx_, other->fourthpointx_);
  swap(fourthpointy_, other->fourthpointy_);
  swap(fuzzyrelativedistancez_, other->fuzzyrelativedistancez_);
  swap(fuzzyrelativespeedz_, other->fuzzyrelativespeedz_);
  swap(fuzzycollisiontimez_, other->fuzzycollisiontimez_);
  swap(fuzzycollisionx_, other->fuzzycollisionx_);
  swap(fuzzy3dwidth_, other->fuzzy3dwidth_);
  swap(fuzzy3dcenterx_, other->fuzzy3dcenterx_);
  swap(fuzzy3dleftx_, other->fuzzy3dleftx_);
  swap(fuzzy3drightx_, other->fuzzy3drightx_);
  swap(fuzzy3dheight_, other->fuzzy3dheight_);
  swap(fuzzy3dupy_, other->fuzzy3dupy_);
  swap(fuzzy3dlowy_, other->fuzzy3dlowy_);
  swap(fuzzyrelativespeedcenterx_, other->fuzzyrelativespeedcenterx_);
  swap(fuzzyrelativespeedleftx_, other->fuzzyrelativespeedleftx_);
  swap(fuzzyrelativespeedrightx_, other->fuzzyrelativespeedrightx_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OutputObstacle::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

SmartereyeObstacles_OutputObstaclesEntry_DoNotUse::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse() {}
SmartereyeObstacles_OutputObstaclesEntry_DoNotUse::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SmartereyeObstacles_OutputObstaclesEntry_DoNotUse::MergeFrom(const SmartereyeObstacles_OutputObstaclesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SmartereyeObstacles_OutputObstaclesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_metadata[6];
}
void SmartereyeObstacles_OutputObstaclesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void SmartereyeObstacles::InitAsDefaultInstance() {
  ::apollo::drivers::_SmartereyeObstacles_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
}
void SmartereyeObstacles::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SmartereyeObstacles::kHeaderFieldNumber;
const int SmartereyeObstacles::kNumObstaclesFieldNumber;
const int SmartereyeObstacles::kOutputObstaclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SmartereyeObstacles::SmartereyeObstacles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_SmartereyeObstacles.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.SmartereyeObstacles)
}
SmartereyeObstacles::SmartereyeObstacles(const SmartereyeObstacles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_obstacles_.MergeFrom(from.output_obstacles_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  num_obstacles_ = from.num_obstacles_;
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.SmartereyeObstacles)
}

void SmartereyeObstacles::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_obstacles_) -
      reinterpret_cast<char*>(&header_)) + sizeof(num_obstacles_));
}

SmartereyeObstacles::~SmartereyeObstacles() {
  // @@protoc_insertion_point(destructor:apollo.drivers.SmartereyeObstacles)
  SharedDtor();
}

void SmartereyeObstacles::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void SmartereyeObstacles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SmartereyeObstacles::descriptor() {
  ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SmartereyeObstacles& SmartereyeObstacles::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_SmartereyeObstacles.base);
  return *internal_default_instance();
}


void SmartereyeObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.SmartereyeObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_obstacles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  num_obstacles_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SmartereyeObstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.SmartereyeObstacles)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_obstacles = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_obstacles();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_obstacles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .apollo.drivers.OutputObstacle> output_obstacles = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          SmartereyeObstacles_OutputObstaclesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SmartereyeObstacles_OutputObstaclesEntry_DoNotUse,
              ::google::protobuf::uint32, ::apollo::drivers::OutputObstacle,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::apollo::drivers::OutputObstacle > > parser(&output_obstacles_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.SmartereyeObstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.SmartereyeObstacles)
  return false;
#undef DO_
}

void SmartereyeObstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.SmartereyeObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // optional int32 num_obstacles = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_obstacles(), output);
  }

  // map<uint32, .apollo.drivers.OutputObstacle> output_obstacles = 3;
  if (!this->output_obstacles().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::apollo::drivers::OutputObstacle >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->output_obstacles().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->output_obstacles().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::apollo::drivers::OutputObstacle >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::apollo::drivers::OutputObstacle >::const_iterator
          it = this->output_obstacles().begin();
          it != this->output_obstacles().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SmartereyeObstacles_OutputObstaclesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(output_obstacles_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::std::unique_ptr<SmartereyeObstacles_OutputObstaclesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::apollo::drivers::OutputObstacle >::const_iterator
          it = this->output_obstacles().begin();
          it != this->output_obstacles().end(); ++it) {
        entry.reset(output_obstacles_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.SmartereyeObstacles)
}

::google::protobuf::uint8* SmartereyeObstacles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.SmartereyeObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // optional int32 num_obstacles = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_obstacles(), target);
  }

  // map<uint32, .apollo.drivers.OutputObstacle> output_obstacles = 3;
  if (!this->output_obstacles().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::apollo::drivers::OutputObstacle >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->output_obstacles().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->output_obstacles().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::apollo::drivers::OutputObstacle >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::apollo::drivers::OutputObstacle >::const_iterator
          it = this->output_obstacles().begin();
          it != this->output_obstacles().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SmartereyeObstacles_OutputObstaclesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(output_obstacles_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<SmartereyeObstacles_OutputObstaclesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::apollo::drivers::OutputObstacle >::const_iterator
          it = this->output_obstacles().begin();
          it != this->output_obstacles().end(); ++it) {
        entry.reset(output_obstacles_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.SmartereyeObstacles)
  return target;
}

size_t SmartereyeObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.SmartereyeObstacles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // map<uint32, .apollo.drivers.OutputObstacle> output_obstacles = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->output_obstacles_size());
  {
    ::std::unique_ptr<SmartereyeObstacles_OutputObstaclesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::apollo::drivers::OutputObstacle >::const_iterator
        it = this->output_obstacles().begin();
        it != this->output_obstacles().end(); ++it) {
      entry.reset(output_obstacles_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional int32 num_obstacles = 2;
    if (has_num_obstacles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_obstacles());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SmartereyeObstacles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.SmartereyeObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const SmartereyeObstacles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SmartereyeObstacles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.SmartereyeObstacles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.SmartereyeObstacles)
    MergeFrom(*source);
  }
}

void SmartereyeObstacles::MergeFrom(const SmartereyeObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.SmartereyeObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_obstacles_.MergeFrom(from.output_obstacles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      num_obstacles_ = from.num_obstacles_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SmartereyeObstacles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.SmartereyeObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmartereyeObstacles::CopyFrom(const SmartereyeObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.SmartereyeObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmartereyeObstacles::IsInitialized() const {
  return true;
}

void SmartereyeObstacles::Swap(SmartereyeObstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SmartereyeObstacles::InternalSwap(SmartereyeObstacles* other) {
  using std::swap;
  output_obstacles_.Swap(&other->output_obstacles_);
  swap(header_, other->header_);
  swap(num_obstacles_, other->num_obstacles_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SmartereyeObstacles::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SmartereyeLanemark::InitAsDefaultInstance() {
  ::apollo::drivers::_SmartereyeLanemark_default_instance_._instance.get_mutable()->lane_road_data_ = const_cast< ::apollo::drivers::LdwDataPacks*>(
      ::apollo::drivers::LdwDataPacks::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SmartereyeLanemark::kLaneRoadDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SmartereyeLanemark::SmartereyeLanemark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_SmartereyeLanemark.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.SmartereyeLanemark)
}
SmartereyeLanemark::SmartereyeLanemark(const SmartereyeLanemark& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lane_road_data()) {
    lane_road_data_ = new ::apollo::drivers::LdwDataPacks(*from.lane_road_data_);
  } else {
    lane_road_data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.SmartereyeLanemark)
}

void SmartereyeLanemark::SharedCtor() {
  lane_road_data_ = NULL;
}

SmartereyeLanemark::~SmartereyeLanemark() {
  // @@protoc_insertion_point(destructor:apollo.drivers.SmartereyeLanemark)
  SharedDtor();
}

void SmartereyeLanemark::SharedDtor() {
  if (this != internal_default_instance()) delete lane_road_data_;
}

void SmartereyeLanemark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SmartereyeLanemark::descriptor() {
  ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SmartereyeLanemark& SmartereyeLanemark::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::scc_info_SmartereyeLanemark.base);
  return *internal_default_instance();
}


void SmartereyeLanemark::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.SmartereyeLanemark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(lane_road_data_ != NULL);
    lane_road_data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SmartereyeLanemark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.SmartereyeLanemark)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.LdwDataPacks lane_road_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_road_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.SmartereyeLanemark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.SmartereyeLanemark)
  return false;
#undef DO_
}

void SmartereyeLanemark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.SmartereyeLanemark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.LdwDataPacks lane_road_data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_lane_road_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.SmartereyeLanemark)
}

::google::protobuf::uint8* SmartereyeLanemark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.SmartereyeLanemark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.LdwDataPacks lane_road_data = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_lane_road_data(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.SmartereyeLanemark)
  return target;
}

size_t SmartereyeLanemark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.SmartereyeLanemark)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .apollo.drivers.LdwDataPacks lane_road_data = 4;
  if (has_lane_road_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lane_road_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SmartereyeLanemark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.SmartereyeLanemark)
  GOOGLE_DCHECK_NE(&from, this);
  const SmartereyeLanemark* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SmartereyeLanemark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.SmartereyeLanemark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.SmartereyeLanemark)
    MergeFrom(*source);
  }
}

void SmartereyeLanemark::MergeFrom(const SmartereyeLanemark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.SmartereyeLanemark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lane_road_data()) {
    mutable_lane_road_data()->::apollo::drivers::LdwDataPacks::MergeFrom(from.lane_road_data());
  }
}

void SmartereyeLanemark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.SmartereyeLanemark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmartereyeLanemark::CopyFrom(const SmartereyeLanemark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.SmartereyeLanemark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmartereyeLanemark::IsInitialized() const {
  return true;
}

void SmartereyeLanemark::Swap(SmartereyeLanemark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SmartereyeLanemark::InternalSwap(SmartereyeLanemark* other) {
  using std::swap;
  swap(lane_road_data_, other->lane_road_data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SmartereyeLanemark::GetMetadata() const {
  protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fproto_2fsmartereye_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace drivers
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::LdwLaneBoundary* Arena::CreateMaybeMessage< ::apollo::drivers::LdwLaneBoundary >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::LdwLaneBoundary >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::LdwLane* Arena::CreateMaybeMessage< ::apollo::drivers::LdwLane >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::LdwLane >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::LdwRoadway* Arena::CreateMaybeMessage< ::apollo::drivers::LdwRoadway >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::LdwRoadway >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::LdwLensInfo* Arena::CreateMaybeMessage< ::apollo::drivers::LdwLensInfo >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::LdwLensInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::LdwDataPacks* Arena::CreateMaybeMessage< ::apollo::drivers::LdwDataPacks >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::LdwDataPacks >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::OutputObstacle* Arena::CreateMaybeMessage< ::apollo::drivers::OutputObstacle >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::OutputObstacle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::drivers::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::SmartereyeObstacles_OutputObstaclesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::SmartereyeObstacles* Arena::CreateMaybeMessage< ::apollo::drivers::SmartereyeObstacles >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::SmartereyeObstacles >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::SmartereyeLanemark* Arena::CreateMaybeMessage< ::apollo::drivers::SmartereyeLanemark >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::SmartereyeLanemark >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
