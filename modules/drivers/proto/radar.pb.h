// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/proto/radar.proto

#ifndef PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fradar_2eproto
#define PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fradar_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/error_code.pb.h"
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fproto_2fradar_2eproto 

namespace protobuf_modules_2fdrivers_2fproto_2fradar_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fdrivers_2fproto_2fradar_2eproto
namespace apollo {
namespace drivers {
class RadarObstacle;
class RadarObstacleDefaultTypeInternal;
extern RadarObstacleDefaultTypeInternal _RadarObstacle_default_instance_;
class RadarObstacles;
class RadarObstaclesDefaultTypeInternal;
extern RadarObstaclesDefaultTypeInternal _RadarObstacles_default_instance_;
class RadarObstacles_RadarObstacleEntry_DoNotUse;
class RadarObstacles_RadarObstacleEntry_DoNotUseDefaultTypeInternal;
extern RadarObstacles_RadarObstacleEntry_DoNotUseDefaultTypeInternal _RadarObstacles_RadarObstacleEntry_DoNotUse_default_instance_;
}  // namespace drivers
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::drivers::RadarObstacle* Arena::CreateMaybeMessage<::apollo::drivers::RadarObstacle>(Arena*);
template<> ::apollo::drivers::RadarObstacles* Arena::CreateMaybeMessage<::apollo::drivers::RadarObstacles>(Arena*);
template<> ::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::drivers::RadarObstacles_RadarObstacleEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace drivers {

enum RadarObstacle_Status {
  RadarObstacle_Status_NO_TARGET = 0,
  RadarObstacle_Status_NEW_TARGET = 1,
  RadarObstacle_Status_NEW_UPDATED_TARGET = 2,
  RadarObstacle_Status_UPDATED_TARGET = 3,
  RadarObstacle_Status_COASTED_TARGET = 4,
  RadarObstacle_Status_MERGED_TARGET = 5,
  RadarObstacle_Status_INVALID_COASTED_TARGET = 6,
  RadarObstacle_Status_NEW_COASTED_TARGET = 7
};
bool RadarObstacle_Status_IsValid(int value);
const RadarObstacle_Status RadarObstacle_Status_Status_MIN = RadarObstacle_Status_NO_TARGET;
const RadarObstacle_Status RadarObstacle_Status_Status_MAX = RadarObstacle_Status_NEW_COASTED_TARGET;
const int RadarObstacle_Status_Status_ARRAYSIZE = RadarObstacle_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* RadarObstacle_Status_descriptor();
inline const ::std::string& RadarObstacle_Status_Name(RadarObstacle_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    RadarObstacle_Status_descriptor(), value);
}
inline bool RadarObstacle_Status_Parse(
    const ::std::string& name, RadarObstacle_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RadarObstacle_Status>(
    RadarObstacle_Status_descriptor(), name, value);
}
enum RadarObstacle_MovingStatus {
  RadarObstacle_MovingStatus_STATIONARY = 0,
  RadarObstacle_MovingStatus_NEARING = 1,
  RadarObstacle_MovingStatus_AWAYING = 2,
  RadarObstacle_MovingStatus_NONE = 3
};
bool RadarObstacle_MovingStatus_IsValid(int value);
const RadarObstacle_MovingStatus RadarObstacle_MovingStatus_MovingStatus_MIN = RadarObstacle_MovingStatus_STATIONARY;
const RadarObstacle_MovingStatus RadarObstacle_MovingStatus_MovingStatus_MAX = RadarObstacle_MovingStatus_NONE;
const int RadarObstacle_MovingStatus_MovingStatus_ARRAYSIZE = RadarObstacle_MovingStatus_MovingStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* RadarObstacle_MovingStatus_descriptor();
inline const ::std::string& RadarObstacle_MovingStatus_Name(RadarObstacle_MovingStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    RadarObstacle_MovingStatus_descriptor(), value);
}
inline bool RadarObstacle_MovingStatus_Parse(
    const ::std::string& name, RadarObstacle_MovingStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RadarObstacle_MovingStatus>(
    RadarObstacle_MovingStatus_descriptor(), name, value);
}
// ===================================================================

class RadarObstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.RadarObstacle) */ {
 public:
  RadarObstacle();
  virtual ~RadarObstacle();

  RadarObstacle(const RadarObstacle& from);

  inline RadarObstacle& operator=(const RadarObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RadarObstacle(RadarObstacle&& from) noexcept
    : RadarObstacle() {
    *this = ::std::move(from);
  }

  inline RadarObstacle& operator=(RadarObstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarObstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarObstacle* internal_default_instance() {
    return reinterpret_cast<const RadarObstacle*>(
               &_RadarObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RadarObstacle* other);
  friend void swap(RadarObstacle& a, RadarObstacle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RadarObstacle* New() const final {
    return CreateMaybeMessage<RadarObstacle>(NULL);
  }

  RadarObstacle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RadarObstacle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RadarObstacle& from);
  void MergeFrom(const RadarObstacle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RadarObstacle_Status Status;
  static const Status NO_TARGET =
    RadarObstacle_Status_NO_TARGET;
  static const Status NEW_TARGET =
    RadarObstacle_Status_NEW_TARGET;
  static const Status NEW_UPDATED_TARGET =
    RadarObstacle_Status_NEW_UPDATED_TARGET;
  static const Status UPDATED_TARGET =
    RadarObstacle_Status_UPDATED_TARGET;
  static const Status COASTED_TARGET =
    RadarObstacle_Status_COASTED_TARGET;
  static const Status MERGED_TARGET =
    RadarObstacle_Status_MERGED_TARGET;
  static const Status INVALID_COASTED_TARGET =
    RadarObstacle_Status_INVALID_COASTED_TARGET;
  static const Status NEW_COASTED_TARGET =
    RadarObstacle_Status_NEW_COASTED_TARGET;
  static inline bool Status_IsValid(int value) {
    return RadarObstacle_Status_IsValid(value);
  }
  static const Status Status_MIN =
    RadarObstacle_Status_Status_MIN;
  static const Status Status_MAX =
    RadarObstacle_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    RadarObstacle_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return RadarObstacle_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return RadarObstacle_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return RadarObstacle_Status_Parse(name, value);
  }

  typedef RadarObstacle_MovingStatus MovingStatus;
  static const MovingStatus STATIONARY =
    RadarObstacle_MovingStatus_STATIONARY;
  static const MovingStatus NEARING =
    RadarObstacle_MovingStatus_NEARING;
  static const MovingStatus AWAYING =
    RadarObstacle_MovingStatus_AWAYING;
  static const MovingStatus NONE =
    RadarObstacle_MovingStatus_NONE;
  static inline bool MovingStatus_IsValid(int value) {
    return RadarObstacle_MovingStatus_IsValid(value);
  }
  static const MovingStatus MovingStatus_MIN =
    RadarObstacle_MovingStatus_MovingStatus_MIN;
  static const MovingStatus MovingStatus_MAX =
    RadarObstacle_MovingStatus_MovingStatus_MAX;
  static const int MovingStatus_ARRAYSIZE =
    RadarObstacle_MovingStatus_MovingStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MovingStatus_descriptor() {
    return RadarObstacle_MovingStatus_descriptor();
  }
  static inline const ::std::string& MovingStatus_Name(MovingStatus value) {
    return RadarObstacle_MovingStatus_Name(value);
  }
  static inline bool MovingStatus_Parse(const ::std::string& name,
      MovingStatus* value) {
    return RadarObstacle_MovingStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.common.Point2D relative_position = 2;
  bool has_relative_position() const;
  void clear_relative_position();
  static const int kRelativePositionFieldNumber = 2;
  private:
  const ::apollo::common::Point2D& _internal_relative_position() const;
  public:
  const ::apollo::common::Point2D& relative_position() const;
  ::apollo::common::Point2D* release_relative_position();
  ::apollo::common::Point2D* mutable_relative_position();
  void set_allocated_relative_position(::apollo::common::Point2D* relative_position);

  // optional .apollo.common.Point2D relative_velocity = 3;
  bool has_relative_velocity() const;
  void clear_relative_velocity();
  static const int kRelativeVelocityFieldNumber = 3;
  private:
  const ::apollo::common::Point2D& _internal_relative_velocity() const;
  public:
  const ::apollo::common::Point2D& relative_velocity() const;
  ::apollo::common::Point2D* release_relative_velocity();
  ::apollo::common::Point2D* mutable_relative_velocity();
  void set_allocated_relative_velocity(::apollo::common::Point2D* relative_velocity);

  // optional .apollo.common.Point2D absolute_position = 10;
  bool has_absolute_position() const;
  void clear_absolute_position();
  static const int kAbsolutePositionFieldNumber = 10;
  private:
  const ::apollo::common::Point2D& _internal_absolute_position() const;
  public:
  const ::apollo::common::Point2D& absolute_position() const;
  ::apollo::common::Point2D* release_absolute_position();
  ::apollo::common::Point2D* mutable_absolute_position();
  void set_allocated_absolute_position(::apollo::common::Point2D* absolute_position);

  // optional .apollo.common.Point2D absolute_velocity = 11;
  bool has_absolute_velocity() const;
  void clear_absolute_velocity();
  static const int kAbsoluteVelocityFieldNumber = 11;
  private:
  const ::apollo::common::Point2D& _internal_absolute_velocity() const;
  public:
  const ::apollo::common::Point2D& absolute_velocity() const;
  ::apollo::common::Point2D* release_absolute_velocity();
  ::apollo::common::Point2D* mutable_absolute_velocity();
  void set_allocated_absolute_velocity(::apollo::common::Point2D* absolute_velocity);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .apollo.drivers.RadarObstacle.MovingStatus moving_status = 5;
  bool has_moving_status() const;
  void clear_moving_status();
  static const int kMovingStatusFieldNumber = 5;
  ::apollo::drivers::RadarObstacle_MovingStatus moving_status() const;
  void set_moving_status(::apollo::drivers::RadarObstacle_MovingStatus value);

  // optional double rcs = 4;
  bool has_rcs() const;
  void clear_rcs();
  static const int kRcsFieldNumber = 4;
  double rcs() const;
  void set_rcs(double value);

  // optional double width = 6;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 6;
  double width() const;
  void set_width(double value);

  // optional double length = 7;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 7;
  double length() const;
  void set_length(double value);

  // optional double height = 8;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 8;
  double height() const;
  void set_height(double value);

  // optional double theta = 9;
  bool has_theta() const;
  void clear_theta();
  static const int kThetaFieldNumber = 9;
  double theta() const;
  void set_theta(double value);

  // optional int32 count = 12;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 12;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // optional int32 moving_frames_count = 13;
  bool has_moving_frames_count() const;
  void clear_moving_frames_count();
  static const int kMovingFramesCountFieldNumber = 13;
  ::google::protobuf::int32 moving_frames_count() const;
  void set_moving_frames_count(::google::protobuf::int32 value);

  // optional .apollo.drivers.RadarObstacle.Status status = 14;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 14;
  ::apollo::drivers::RadarObstacle_Status status() const;
  void set_status(::apollo::drivers::RadarObstacle_Status value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.RadarObstacle)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_relative_position();
  void clear_has_relative_position();
  void set_has_relative_velocity();
  void clear_has_relative_velocity();
  void set_has_rcs();
  void clear_has_rcs();
  void set_has_moving_status();
  void clear_has_moving_status();
  void set_has_width();
  void clear_has_width();
  void set_has_length();
  void clear_has_length();
  void set_has_height();
  void clear_has_height();
  void set_has_theta();
  void clear_has_theta();
  void set_has_absolute_position();
  void clear_has_absolute_position();
  void set_has_absolute_velocity();
  void clear_has_absolute_velocity();
  void set_has_count();
  void clear_has_count();
  void set_has_moving_frames_count();
  void clear_has_moving_frames_count();
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::common::Point2D* relative_position_;
  ::apollo::common::Point2D* relative_velocity_;
  ::apollo::common::Point2D* absolute_position_;
  ::apollo::common::Point2D* absolute_velocity_;
  ::google::protobuf::int32 id_;
  int moving_status_;
  double rcs_;
  double width_;
  double length_;
  double height_;
  double theta_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 moving_frames_count_;
  int status_;
  friend struct ::protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RadarObstacles_RadarObstacleEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<RadarObstacles_RadarObstacleEntry_DoNotUse, 
    ::google::protobuf::int32, ::apollo::drivers::RadarObstacle,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<RadarObstacles_RadarObstacleEntry_DoNotUse, 
    ::google::protobuf::int32, ::apollo::drivers::RadarObstacle,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  RadarObstacles_RadarObstacleEntry_DoNotUse();
  RadarObstacles_RadarObstacleEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RadarObstacles_RadarObstacleEntry_DoNotUse& other);
  static const RadarObstacles_RadarObstacleEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RadarObstacles_RadarObstacleEntry_DoNotUse*>(&_RadarObstacles_RadarObstacleEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class RadarObstacles : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.drivers.RadarObstacles) */ {
 public:
  RadarObstacles();
  virtual ~RadarObstacles();

  RadarObstacles(const RadarObstacles& from);

  inline RadarObstacles& operator=(const RadarObstacles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RadarObstacles(RadarObstacles&& from) noexcept
    : RadarObstacles() {
    *this = ::std::move(from);
  }

  inline RadarObstacles& operator=(RadarObstacles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarObstacles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarObstacles* internal_default_instance() {
    return reinterpret_cast<const RadarObstacles*>(
               &_RadarObstacles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RadarObstacles* other);
  friend void swap(RadarObstacles& a, RadarObstacles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RadarObstacles* New() const final {
    return CreateMaybeMessage<RadarObstacles>(NULL);
  }

  RadarObstacles* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RadarObstacles>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RadarObstacles& from);
  void MergeFrom(const RadarObstacles& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarObstacles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<int32, .apollo.drivers.RadarObstacle> radar_obstacle = 1;
  int radar_obstacle_size() const;
  void clear_radar_obstacle();
  static const int kRadarObstacleFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >&
      radar_obstacle() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >*
      mutable_radar_obstacle();

  // optional .apollo.common.Header header = 2;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 2;
  private:
  const ::apollo::common::Header& _internal_header() const;
  public:
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.common.ErrorCode error_code = 3 [default = OK];
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  ::apollo::common::ErrorCode error_code() const;
  void set_error_code(::apollo::common::ErrorCode value);

  // @@protoc_insertion_point(class_scope:apollo.drivers.RadarObstacles)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_error_code();
  void clear_has_error_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::MapField<
      RadarObstacles_RadarObstacleEntry_DoNotUse,
      ::google::protobuf::int32, ::apollo::drivers::RadarObstacle,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > radar_obstacle_;
  ::apollo::common::Header* header_;
  int error_code_;
  friend struct ::protobuf_modules_2fdrivers_2fproto_2fradar_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RadarObstacle

// optional int32 id = 1;
inline bool RadarObstacle::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarObstacle::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarObstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarObstacle::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RadarObstacle::id() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.id)
  return id_;
}
inline void RadarObstacle::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.id)
}

// optional .apollo.common.Point2D relative_position = 2;
inline bool RadarObstacle::has_relative_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarObstacle::set_has_relative_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarObstacle::clear_has_relative_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::common::Point2D& RadarObstacle::_internal_relative_position() const {
  return *relative_position_;
}
inline const ::apollo::common::Point2D& RadarObstacle::relative_position() const {
  const ::apollo::common::Point2D* p = relative_position_;
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.relative_position)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point2D*>(
      &::apollo::common::_Point2D_default_instance_);
}
inline ::apollo::common::Point2D* RadarObstacle::release_relative_position() {
  // @@protoc_insertion_point(field_release:apollo.drivers.RadarObstacle.relative_position)
  clear_has_relative_position();
  ::apollo::common::Point2D* temp = relative_position_;
  relative_position_ = NULL;
  return temp;
}
inline ::apollo::common::Point2D* RadarObstacle::mutable_relative_position() {
  set_has_relative_position();
  if (relative_position_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Point2D>(GetArenaNoVirtual());
    relative_position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RadarObstacle.relative_position)
  return relative_position_;
}
inline void RadarObstacle::set_allocated_relative_position(::apollo::common::Point2D* relative_position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(relative_position_);
  }
  if (relative_position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      relative_position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, relative_position, submessage_arena);
    }
    set_has_relative_position();
  } else {
    clear_has_relative_position();
  }
  relative_position_ = relative_position;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.RadarObstacle.relative_position)
}

// optional .apollo.common.Point2D relative_velocity = 3;
inline bool RadarObstacle::has_relative_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarObstacle::set_has_relative_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarObstacle::clear_has_relative_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::common::Point2D& RadarObstacle::_internal_relative_velocity() const {
  return *relative_velocity_;
}
inline const ::apollo::common::Point2D& RadarObstacle::relative_velocity() const {
  const ::apollo::common::Point2D* p = relative_velocity_;
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.relative_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point2D*>(
      &::apollo::common::_Point2D_default_instance_);
}
inline ::apollo::common::Point2D* RadarObstacle::release_relative_velocity() {
  // @@protoc_insertion_point(field_release:apollo.drivers.RadarObstacle.relative_velocity)
  clear_has_relative_velocity();
  ::apollo::common::Point2D* temp = relative_velocity_;
  relative_velocity_ = NULL;
  return temp;
}
inline ::apollo::common::Point2D* RadarObstacle::mutable_relative_velocity() {
  set_has_relative_velocity();
  if (relative_velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Point2D>(GetArenaNoVirtual());
    relative_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RadarObstacle.relative_velocity)
  return relative_velocity_;
}
inline void RadarObstacle::set_allocated_relative_velocity(::apollo::common::Point2D* relative_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(relative_velocity_);
  }
  if (relative_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      relative_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, relative_velocity, submessage_arena);
    }
    set_has_relative_velocity();
  } else {
    clear_has_relative_velocity();
  }
  relative_velocity_ = relative_velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.RadarObstacle.relative_velocity)
}

// optional double rcs = 4;
inline bool RadarObstacle::has_rcs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RadarObstacle::set_has_rcs() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RadarObstacle::clear_has_rcs() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RadarObstacle::clear_rcs() {
  rcs_ = 0;
  clear_has_rcs();
}
inline double RadarObstacle::rcs() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.rcs)
  return rcs_;
}
inline void RadarObstacle::set_rcs(double value) {
  set_has_rcs();
  rcs_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.rcs)
}

// optional .apollo.drivers.RadarObstacle.MovingStatus moving_status = 5;
inline bool RadarObstacle::has_moving_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarObstacle::set_has_moving_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarObstacle::clear_has_moving_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarObstacle::clear_moving_status() {
  moving_status_ = 0;
  clear_has_moving_status();
}
inline ::apollo::drivers::RadarObstacle_MovingStatus RadarObstacle::moving_status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.moving_status)
  return static_cast< ::apollo::drivers::RadarObstacle_MovingStatus >(moving_status_);
}
inline void RadarObstacle::set_moving_status(::apollo::drivers::RadarObstacle_MovingStatus value) {
  assert(::apollo::drivers::RadarObstacle_MovingStatus_IsValid(value));
  set_has_moving_status();
  moving_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.moving_status)
}

// optional double width = 6;
inline bool RadarObstacle::has_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RadarObstacle::set_has_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RadarObstacle::clear_has_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RadarObstacle::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double RadarObstacle::width() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.width)
  return width_;
}
inline void RadarObstacle::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.width)
}

// optional double length = 7;
inline bool RadarObstacle::has_length() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RadarObstacle::set_has_length() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RadarObstacle::clear_has_length() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RadarObstacle::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double RadarObstacle::length() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.length)
  return length_;
}
inline void RadarObstacle::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.length)
}

// optional double height = 8;
inline bool RadarObstacle::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RadarObstacle::set_has_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RadarObstacle::clear_has_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RadarObstacle::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double RadarObstacle::height() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.height)
  return height_;
}
inline void RadarObstacle::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.height)
}

// optional double theta = 9;
inline bool RadarObstacle::has_theta() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RadarObstacle::set_has_theta() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RadarObstacle::clear_has_theta() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RadarObstacle::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline double RadarObstacle::theta() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.theta)
  return theta_;
}
inline void RadarObstacle::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.theta)
}

// optional .apollo.common.Point2D absolute_position = 10;
inline bool RadarObstacle::has_absolute_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarObstacle::set_has_absolute_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarObstacle::clear_has_absolute_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::common::Point2D& RadarObstacle::_internal_absolute_position() const {
  return *absolute_position_;
}
inline const ::apollo::common::Point2D& RadarObstacle::absolute_position() const {
  const ::apollo::common::Point2D* p = absolute_position_;
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.absolute_position)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point2D*>(
      &::apollo::common::_Point2D_default_instance_);
}
inline ::apollo::common::Point2D* RadarObstacle::release_absolute_position() {
  // @@protoc_insertion_point(field_release:apollo.drivers.RadarObstacle.absolute_position)
  clear_has_absolute_position();
  ::apollo::common::Point2D* temp = absolute_position_;
  absolute_position_ = NULL;
  return temp;
}
inline ::apollo::common::Point2D* RadarObstacle::mutable_absolute_position() {
  set_has_absolute_position();
  if (absolute_position_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Point2D>(GetArenaNoVirtual());
    absolute_position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RadarObstacle.absolute_position)
  return absolute_position_;
}
inline void RadarObstacle::set_allocated_absolute_position(::apollo::common::Point2D* absolute_position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(absolute_position_);
  }
  if (absolute_position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      absolute_position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, absolute_position, submessage_arena);
    }
    set_has_absolute_position();
  } else {
    clear_has_absolute_position();
  }
  absolute_position_ = absolute_position;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.RadarObstacle.absolute_position)
}

// optional .apollo.common.Point2D absolute_velocity = 11;
inline bool RadarObstacle::has_absolute_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarObstacle::set_has_absolute_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarObstacle::clear_has_absolute_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::common::Point2D& RadarObstacle::_internal_absolute_velocity() const {
  return *absolute_velocity_;
}
inline const ::apollo::common::Point2D& RadarObstacle::absolute_velocity() const {
  const ::apollo::common::Point2D* p = absolute_velocity_;
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.absolute_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point2D*>(
      &::apollo::common::_Point2D_default_instance_);
}
inline ::apollo::common::Point2D* RadarObstacle::release_absolute_velocity() {
  // @@protoc_insertion_point(field_release:apollo.drivers.RadarObstacle.absolute_velocity)
  clear_has_absolute_velocity();
  ::apollo::common::Point2D* temp = absolute_velocity_;
  absolute_velocity_ = NULL;
  return temp;
}
inline ::apollo::common::Point2D* RadarObstacle::mutable_absolute_velocity() {
  set_has_absolute_velocity();
  if (absolute_velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Point2D>(GetArenaNoVirtual());
    absolute_velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RadarObstacle.absolute_velocity)
  return absolute_velocity_;
}
inline void RadarObstacle::set_allocated_absolute_velocity(::apollo::common::Point2D* absolute_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(absolute_velocity_);
  }
  if (absolute_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      absolute_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, absolute_velocity, submessage_arena);
    }
    set_has_absolute_velocity();
  } else {
    clear_has_absolute_velocity();
  }
  absolute_velocity_ = absolute_velocity;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.RadarObstacle.absolute_velocity)
}

// optional int32 count = 12;
inline bool RadarObstacle::has_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RadarObstacle::set_has_count() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RadarObstacle::clear_has_count() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RadarObstacle::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 RadarObstacle::count() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.count)
  return count_;
}
inline void RadarObstacle::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.count)
}

// optional int32 moving_frames_count = 13;
inline bool RadarObstacle::has_moving_frames_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RadarObstacle::set_has_moving_frames_count() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RadarObstacle::clear_has_moving_frames_count() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RadarObstacle::clear_moving_frames_count() {
  moving_frames_count_ = 0;
  clear_has_moving_frames_count();
}
inline ::google::protobuf::int32 RadarObstacle::moving_frames_count() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.moving_frames_count)
  return moving_frames_count_;
}
inline void RadarObstacle::set_moving_frames_count(::google::protobuf::int32 value) {
  set_has_moving_frames_count();
  moving_frames_count_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.moving_frames_count)
}

// optional .apollo.drivers.RadarObstacle.Status status = 14;
inline bool RadarObstacle::has_status() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RadarObstacle::set_has_status() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RadarObstacle::clear_has_status() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RadarObstacle::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::apollo::drivers::RadarObstacle_Status RadarObstacle::status() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacle.status)
  return static_cast< ::apollo::drivers::RadarObstacle_Status >(status_);
}
inline void RadarObstacle::set_status(::apollo::drivers::RadarObstacle_Status value) {
  assert(::apollo::drivers::RadarObstacle_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacle.status)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RadarObstacles

// map<int32, .apollo.drivers.RadarObstacle> radar_obstacle = 1;
inline int RadarObstacles::radar_obstacle_size() const {
  return radar_obstacle_.size();
}
inline void RadarObstacles::clear_radar_obstacle() {
  radar_obstacle_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >&
RadarObstacles::radar_obstacle() const {
  // @@protoc_insertion_point(field_map:apollo.drivers.RadarObstacles.radar_obstacle)
  return radar_obstacle_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::apollo::drivers::RadarObstacle >*
RadarObstacles::mutable_radar_obstacle() {
  // @@protoc_insertion_point(field_mutable_map:apollo.drivers.RadarObstacles.radar_obstacle)
  return radar_obstacle_.MutableMap();
}

// optional .apollo.common.Header header = 2;
inline bool RadarObstacles::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarObstacles::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarObstacles::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::common::Header& RadarObstacles::_internal_header() const {
  return *header_;
}
inline const ::apollo::common::Header& RadarObstacles::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacles.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* RadarObstacles::release_header() {
  // @@protoc_insertion_point(field_release:apollo.drivers.RadarObstacles.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::common::Header* RadarObstacles::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.drivers.RadarObstacles.header)
  return header_;
}
inline void RadarObstacles::set_allocated_header(::apollo::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.drivers.RadarObstacles.header)
}

// optional .apollo.common.ErrorCode error_code = 3 [default = OK];
inline bool RadarObstacles::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarObstacles::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarObstacles::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarObstacles::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::apollo::common::ErrorCode RadarObstacles::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.drivers.RadarObstacles.error_code)
  return static_cast< ::apollo::common::ErrorCode >(error_code_);
}
inline void RadarObstacles::set_error_code(::apollo::common::ErrorCode value) {
  assert(::apollo::common::ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.drivers.RadarObstacles.error_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::drivers::RadarObstacle_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::RadarObstacle_Status>() {
  return ::apollo::drivers::RadarObstacle_Status_descriptor();
}
template <> struct is_proto_enum< ::apollo::drivers::RadarObstacle_MovingStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::drivers::RadarObstacle_MovingStatus>() {
  return ::apollo::drivers::RadarObstacle_MovingStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fdrivers_2fproto_2fradar_2eproto
