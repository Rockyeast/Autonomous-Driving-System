// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/radar/racobit_radar/proto/racobit_radar_conf.proto

#include "modules/drivers/radar/racobit_radar/proto/racobit_radar_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CANCardParameter;
}  // namespace protobuf_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto
namespace protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RadarConf;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CanConf;
}  // namespace protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto
namespace apollo {
namespace drivers {
namespace racobit_radar {
class CanConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CanConf>
      _instance;
} _CanConf_default_instance_;
class RadarConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RadarConf>
      _instance;
} _RadarConf_default_instance_;
class RacobitRadarConfDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RacobitRadarConf>
      _instance;
} _RacobitRadarConf_default_instance_;
}  // namespace racobit_radar
}  // namespace drivers
}  // namespace apollo
namespace protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto {
static void InitDefaultsCanConf() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::racobit_radar::_CanConf_default_instance_;
    new (ptr) ::apollo::drivers::racobit_radar::CanConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::racobit_radar::CanConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CanConf =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCanConf}, {
      &protobuf_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto::scc_info_CANCardParameter.base,}};

static void InitDefaultsRadarConf() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::racobit_radar::_RadarConf_default_instance_;
    new (ptr) ::apollo::drivers::racobit_radar::RadarConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::racobit_radar::RadarConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RadarConf =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRadarConf}, {}};

static void InitDefaultsRacobitRadarConf() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::drivers::racobit_radar::_RacobitRadarConf_default_instance_;
    new (ptr) ::apollo::drivers::racobit_radar::RacobitRadarConf();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::drivers::racobit_radar::RacobitRadarConf::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RacobitRadarConf =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRacobitRadarConf}, {
      &protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::scc_info_CanConf.base,
      &protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::scc_info_RadarConf.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CanConf.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RadarConf.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RacobitRadarConf.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::CanConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::CanConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::CanConf, can_card_parameter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::CanConf, enable_debug_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::CanConf, enable_receiver_log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::CanConf, enable_sender_log_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, max_distance_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, sensor_id_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, radar_power_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, output_type_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, send_quality_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, send_ext_info_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, sort_index_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, store_in_nvm_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, ctrl_relay_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, rcs_threshold_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, max_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, sensor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, output_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, radar_power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, ctrl_relay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, send_ext_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, send_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, sort_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, store_in_nvm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RadarConf, rcs_threshold_),
  0,
  1,
  2,
  11,
  12,
  13,
  3,
  14,
  4,
  17,
  15,
  5,
  16,
  6,
  7,
  18,
  19,
  8,
  10,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RacobitRadarConf, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RacobitRadarConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RacobitRadarConf, can_conf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::drivers::racobit_radar::RacobitRadarConf, radar_conf_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::apollo::drivers::racobit_radar::CanConf)},
  { 13, 38, sizeof(::apollo::drivers::racobit_radar::RadarConf)},
  { 58, 65, sizeof(::apollo::drivers::racobit_radar::RacobitRadarConf)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::racobit_radar::_CanConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::racobit_radar::_RadarConf_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::drivers::racobit_radar::_RacobitRadarConf_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/drivers/radar/racobit_radar/proto/racobit_radar_conf.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nBmodules/drivers/radar/racobit_radar/pr"
      "oto/racobit_radar_conf.proto\022\034apollo.dri"
      "vers.racobit_radar\0325modules/drivers/canb"
      "us/proto/can_card_parameter.proto\"\266\001\n\007Ca"
      "nConf\022C\n\022can_card_parameter\030\001 \001(\0132\'.apol"
      "lo.drivers.canbus.CANCardParameter\022 \n\021en"
      "able_debug_mode\030\002 \001(\010:\005false\022\"\n\023enable_r"
      "eceiver_log\030\003 \001(\010:\005false\022 \n\021enable_sende"
      "r_log\030\004 \001(\010:\005false\"\325\005\n\tRadarConf\022!\n\022max_"
      "distance_valid\030\001 \001(\010:\005false\022\036\n\017sensor_id"
      "_valid\030\002 \001(\010:\005false\022 \n\021radar_power_valid"
      "\030\003 \001(\010:\005false\022\037\n\021output_type_valid\030\004 \001(\010"
      ":\004true\022 \n\022send_quality_valid\030\005 \001(\010:\004true"
      "\022!\n\023send_ext_info_valid\030\006 \001(\010:\004true\022\037\n\020s"
      "ort_index_valid\030\007 \001(\010:\005false\022 \n\022store_in"
      "_nvm_valid\030\010 \001(\010:\004true\022\037\n\020ctrl_relay_val"
      "id\030\t \001(\010:\005false\022!\n\023rcs_threshold_valid\030\n"
      " \001(\010:\004true\022\031\n\014max_distance\030\013 \001(\r:\003248\022\024\n"
      "\tsensor_id\030\014 \001(\r:\0010\022R\n\013output_type\030\r \001(\016"
      "2(.apollo.drivers.racobit_radar.OutputTy"
      "pe:\023OUTPUT_TYPE_OBJECTS\022\026\n\013radar_power\030\016"
      " \001(\r:\0010\022\025\n\nctrl_relay\030\017 \001(\r:\0010\022\033\n\rsend_e"
      "xt_info\030\020 \001(\010:\004true\022\032\n\014send_quality\030\021 \001("
      "\010:\004true\022\025\n\nsort_index\030\022 \001(\r:\0010\022\027\n\014store_"
      "in_nvm\030\023 \001(\r:\0011\022Y\n\rrcs_threshold\030\024 \001(\0162*"
      ".apollo.drivers.racobit_radar.RcsThresho"
      "ld:\026RCS_THRESHOLD_STANDARD\"\210\001\n\020RacobitRa"
      "darConf\0227\n\010can_conf\030\001 \001(\0132%.apollo.drive"
      "rs.racobit_radar.CanConf\022;\n\nradar_conf\030\002"
      " \001(\0132\'.apollo.drivers.racobit_radar.Rada"
      "rConf*l\n\nOutputType\022\024\n\020OUTPUT_TYPE_NONE\020"
      "\000\022\027\n\023OUTPUT_TYPE_OBJECTS\020\001\022\030\n\024OUTPUT_TYP"
      "E_CLUSTERS\020\002\022\025\n\021OUTPUT_TYPE_ERROR\020\003*g\n\014R"
      "csThreshold\022\032\n\026RCS_THRESHOLD_STANDARD\020\000\022"
      "\"\n\036RCS_THRESHOLD_HIGH_SENSITIVITY\020\001\022\027\n\023R"
      "CS_THRESHOLD_ERROR\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1420);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/drivers/radar/racobit_radar/proto/racobit_radar_conf.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fdrivers_2fcanbus_2fproto_2fcan_5fcard_5fparameter_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto
namespace apollo {
namespace drivers {
namespace racobit_radar {
const ::google::protobuf::EnumDescriptor* OutputType_descriptor() {
  protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::file_level_enum_descriptors[0];
}
bool OutputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RcsThreshold_descriptor() {
  protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::file_level_enum_descriptors[1];
}
bool RcsThreshold_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CanConf::InitAsDefaultInstance() {
  ::apollo::drivers::racobit_radar::_CanConf_default_instance_._instance.get_mutable()->can_card_parameter_ = const_cast< ::apollo::drivers::canbus::CANCardParameter*>(
      ::apollo::drivers::canbus::CANCardParameter::internal_default_instance());
}
void CanConf::clear_can_card_parameter() {
  if (can_card_parameter_ != NULL) can_card_parameter_->Clear();
  clear_has_can_card_parameter();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CanConf::kCanCardParameterFieldNumber;
const int CanConf::kEnableDebugModeFieldNumber;
const int CanConf::kEnableReceiverLogFieldNumber;
const int CanConf::kEnableSenderLogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CanConf::CanConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::scc_info_CanConf.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.racobit_radar.CanConf)
}
CanConf::CanConf(const CanConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_can_card_parameter()) {
    can_card_parameter_ = new ::apollo::drivers::canbus::CANCardParameter(*from.can_card_parameter_);
  } else {
    can_card_parameter_ = NULL;
  }
  ::memcpy(&enable_debug_mode_, &from.enable_debug_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_sender_log_) -
    reinterpret_cast<char*>(&enable_debug_mode_)) + sizeof(enable_sender_log_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.racobit_radar.CanConf)
}

void CanConf::SharedCtor() {
  ::memset(&can_card_parameter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_sender_log_) -
      reinterpret_cast<char*>(&can_card_parameter_)) + sizeof(enable_sender_log_));
}

CanConf::~CanConf() {
  // @@protoc_insertion_point(destructor:apollo.drivers.racobit_radar.CanConf)
  SharedDtor();
}

void CanConf::SharedDtor() {
  if (this != internal_default_instance()) delete can_card_parameter_;
}

void CanConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CanConf::descriptor() {
  ::protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CanConf& CanConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::scc_info_CanConf.base);
  return *internal_default_instance();
}


void CanConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.racobit_radar.CanConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(can_card_parameter_ != NULL);
    can_card_parameter_->Clear();
  }
  ::memset(&enable_debug_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_sender_log_) -
      reinterpret_cast<char*>(&enable_debug_mode_)) + sizeof(enable_sender_log_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CanConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.racobit_radar.CanConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_can_card_parameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_debug_mode = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_enable_debug_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_debug_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_receiver_log = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_enable_receiver_log();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_receiver_log_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_sender_log = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_enable_sender_log();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_sender_log_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.racobit_radar.CanConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.racobit_radar.CanConf)
  return false;
#undef DO_
}

void CanConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.racobit_radar.CanConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_can_card_parameter(), output);
  }

  // optional bool enable_debug_mode = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable_debug_mode(), output);
  }

  // optional bool enable_receiver_log = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable_receiver_log(), output);
  }

  // optional bool enable_sender_log = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enable_sender_log(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.racobit_radar.CanConf)
}

::google::protobuf::uint8* CanConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.racobit_radar.CanConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_can_card_parameter(), deterministic, target);
  }

  // optional bool enable_debug_mode = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable_debug_mode(), target);
  }

  // optional bool enable_receiver_log = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enable_receiver_log(), target);
  }

  // optional bool enable_sender_log = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enable_sender_log(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.racobit_radar.CanConf)
  return target;
}

size_t CanConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.racobit_radar.CanConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.drivers.canbus.CANCardParameter can_card_parameter = 1;
    if (has_can_card_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *can_card_parameter_);
    }

    // optional bool enable_debug_mode = 2 [default = false];
    if (has_enable_debug_mode()) {
      total_size += 1 + 1;
    }

    // optional bool enable_receiver_log = 3 [default = false];
    if (has_enable_receiver_log()) {
      total_size += 1 + 1;
    }

    // optional bool enable_sender_log = 4 [default = false];
    if (has_enable_sender_log()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CanConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.racobit_radar.CanConf)
  GOOGLE_DCHECK_NE(&from, this);
  const CanConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CanConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.racobit_radar.CanConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.racobit_radar.CanConf)
    MergeFrom(*source);
  }
}

void CanConf::MergeFrom(const CanConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.racobit_radar.CanConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_can_card_parameter()->::apollo::drivers::canbus::CANCardParameter::MergeFrom(from.can_card_parameter());
    }
    if (cached_has_bits & 0x00000002u) {
      enable_debug_mode_ = from.enable_debug_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_receiver_log_ = from.enable_receiver_log_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_sender_log_ = from.enable_sender_log_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CanConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.racobit_radar.CanConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanConf::CopyFrom(const CanConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.racobit_radar.CanConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanConf::IsInitialized() const {
  return true;
}

void CanConf::Swap(CanConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CanConf::InternalSwap(CanConf* other) {
  using std::swap;
  swap(can_card_parameter_, other->can_card_parameter_);
  swap(enable_debug_mode_, other->enable_debug_mode_);
  swap(enable_receiver_log_, other->enable_receiver_log_);
  swap(enable_sender_log_, other->enable_sender_log_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CanConf::GetMetadata() const {
  protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RadarConf::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarConf::kMaxDistanceValidFieldNumber;
const int RadarConf::kSensorIdValidFieldNumber;
const int RadarConf::kRadarPowerValidFieldNumber;
const int RadarConf::kOutputTypeValidFieldNumber;
const int RadarConf::kSendQualityValidFieldNumber;
const int RadarConf::kSendExtInfoValidFieldNumber;
const int RadarConf::kSortIndexValidFieldNumber;
const int RadarConf::kStoreInNvmValidFieldNumber;
const int RadarConf::kCtrlRelayValidFieldNumber;
const int RadarConf::kRcsThresholdValidFieldNumber;
const int RadarConf::kMaxDistanceFieldNumber;
const int RadarConf::kSensorIdFieldNumber;
const int RadarConf::kOutputTypeFieldNumber;
const int RadarConf::kRadarPowerFieldNumber;
const int RadarConf::kCtrlRelayFieldNumber;
const int RadarConf::kSendExtInfoFieldNumber;
const int RadarConf::kSendQualityFieldNumber;
const int RadarConf::kSortIndexFieldNumber;
const int RadarConf::kStoreInNvmFieldNumber;
const int RadarConf::kRcsThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarConf::RadarConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::scc_info_RadarConf.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.racobit_radar.RadarConf)
}
RadarConf::RadarConf(const RadarConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_distance_valid_, &from.max_distance_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&send_quality_) -
    reinterpret_cast<char*>(&max_distance_valid_)) + sizeof(send_quality_));
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.racobit_radar.RadarConf)
}

void RadarConf::SharedCtor() {
  ::memset(&max_distance_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rcs_threshold_) -
      reinterpret_cast<char*>(&max_distance_valid_)) + sizeof(rcs_threshold_));
  store_in_nvm_ = 1u;
  output_type_valid_ = true;
  send_quality_valid_ = true;
  send_ext_info_valid_ = true;
  store_in_nvm_valid_ = true;
  max_distance_ = 248u;
  output_type_ = 1;
  rcs_threshold_valid_ = true;
  send_ext_info_ = true;
  send_quality_ = true;
}

RadarConf::~RadarConf() {
  // @@protoc_insertion_point(destructor:apollo.drivers.racobit_radar.RadarConf)
  SharedDtor();
}

void RadarConf::SharedDtor() {
}

void RadarConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RadarConf::descriptor() {
  ::protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RadarConf& RadarConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::scc_info_RadarConf.base);
  return *internal_default_instance();
}


void RadarConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.racobit_radar.RadarConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&max_distance_valid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ctrl_relay_) -
        reinterpret_cast<char*>(&max_distance_valid_)) + sizeof(ctrl_relay_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&sort_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rcs_threshold_) -
        reinterpret_cast<char*>(&sort_index_)) + sizeof(rcs_threshold_));
    store_in_nvm_ = 1u;
    output_type_valid_ = true;
    send_quality_valid_ = true;
    send_ext_info_valid_ = true;
    store_in_nvm_valid_ = true;
    max_distance_ = 248u;
  }
  if (cached_has_bits & 983040u) {
    output_type_ = 1;
    rcs_threshold_valid_ = true;
    send_ext_info_ = true;
    send_quality_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RadarConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.racobit_radar.RadarConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool max_distance_valid = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_max_distance_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &max_distance_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sensor_id_valid = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sensor_id_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sensor_id_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool radar_power_valid = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_radar_power_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &radar_power_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool output_type_valid = 4 [default = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_output_type_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &output_type_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_quality_valid = 5 [default = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_send_quality_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_quality_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_ext_info_valid = 6 [default = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_send_ext_info_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_ext_info_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sort_index_valid = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_sort_index_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sort_index_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool store_in_nvm_valid = 8 [default = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_store_in_nvm_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &store_in_nvm_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ctrl_relay_valid = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_ctrl_relay_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ctrl_relay_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool rcs_threshold_valid = 10 [default = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_rcs_threshold_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rcs_threshold_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_distance = 11 [default = 248];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_max_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sensor_id = 12 [default = 0];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_sensor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.racobit_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::racobit_radar::OutputType_IsValid(value)) {
            set_output_type(static_cast< ::apollo::drivers::racobit_radar::OutputType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                13, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radar_power = 14 [default = 0];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_radar_power();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radar_power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ctrl_relay = 15 [default = 0];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_ctrl_relay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ctrl_relay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_ext_info = 16 [default = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_send_ext_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_ext_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool send_quality = 17 [default = true];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_send_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &send_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sort_index = 18 [default = 0];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_sort_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sort_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 store_in_nvm = 19 [default = 1];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_store_in_nvm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &store_in_nvm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.racobit_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::drivers::racobit_radar::RcsThreshold_IsValid(value)) {
            set_rcs_threshold(static_cast< ::apollo::drivers::racobit_radar::RcsThreshold >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                20, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.racobit_radar.RadarConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.racobit_radar.RadarConf)
  return false;
#undef DO_
}

void RadarConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.racobit_radar.RadarConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool max_distance_valid = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->max_distance_valid(), output);
  }

  // optional bool sensor_id_valid = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sensor_id_valid(), output);
  }

  // optional bool radar_power_valid = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->radar_power_valid(), output);
  }

  // optional bool output_type_valid = 4 [default = true];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->output_type_valid(), output);
  }

  // optional bool send_quality_valid = 5 [default = true];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->send_quality_valid(), output);
  }

  // optional bool send_ext_info_valid = 6 [default = true];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->send_ext_info_valid(), output);
  }

  // optional bool sort_index_valid = 7 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->sort_index_valid(), output);
  }

  // optional bool store_in_nvm_valid = 8 [default = true];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->store_in_nvm_valid(), output);
  }

  // optional bool ctrl_relay_valid = 9 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ctrl_relay_valid(), output);
  }

  // optional bool rcs_threshold_valid = 10 [default = true];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->rcs_threshold_valid(), output);
  }

  // optional uint32 max_distance = 11 [default = 248];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->max_distance(), output);
  }

  // optional uint32 sensor_id = 12 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->sensor_id(), output);
  }

  // optional .apollo.drivers.racobit_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->output_type(), output);
  }

  // optional uint32 radar_power = 14 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->radar_power(), output);
  }

  // optional uint32 ctrl_relay = 15 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->ctrl_relay(), output);
  }

  // optional bool send_ext_info = 16 [default = true];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->send_ext_info(), output);
  }

  // optional bool send_quality = 17 [default = true];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->send_quality(), output);
  }

  // optional uint32 sort_index = 18 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->sort_index(), output);
  }

  // optional uint32 store_in_nvm = 19 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->store_in_nvm(), output);
  }

  // optional .apollo.drivers.racobit_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->rcs_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.racobit_radar.RadarConf)
}

::google::protobuf::uint8* RadarConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.racobit_radar.RadarConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool max_distance_valid = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->max_distance_valid(), target);
  }

  // optional bool sensor_id_valid = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sensor_id_valid(), target);
  }

  // optional bool radar_power_valid = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->radar_power_valid(), target);
  }

  // optional bool output_type_valid = 4 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->output_type_valid(), target);
  }

  // optional bool send_quality_valid = 5 [default = true];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->send_quality_valid(), target);
  }

  // optional bool send_ext_info_valid = 6 [default = true];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->send_ext_info_valid(), target);
  }

  // optional bool sort_index_valid = 7 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->sort_index_valid(), target);
  }

  // optional bool store_in_nvm_valid = 8 [default = true];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->store_in_nvm_valid(), target);
  }

  // optional bool ctrl_relay_valid = 9 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ctrl_relay_valid(), target);
  }

  // optional bool rcs_threshold_valid = 10 [default = true];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->rcs_threshold_valid(), target);
  }

  // optional uint32 max_distance = 11 [default = 248];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->max_distance(), target);
  }

  // optional uint32 sensor_id = 12 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->sensor_id(), target);
  }

  // optional .apollo.drivers.racobit_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->output_type(), target);
  }

  // optional uint32 radar_power = 14 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->radar_power(), target);
  }

  // optional uint32 ctrl_relay = 15 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->ctrl_relay(), target);
  }

  // optional bool send_ext_info = 16 [default = true];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->send_ext_info(), target);
  }

  // optional bool send_quality = 17 [default = true];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->send_quality(), target);
  }

  // optional uint32 sort_index = 18 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->sort_index(), target);
  }

  // optional uint32 store_in_nvm = 19 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->store_in_nvm(), target);
  }

  // optional .apollo.drivers.racobit_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->rcs_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.racobit_radar.RadarConf)
  return target;
}

size_t RadarConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.racobit_radar.RadarConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bool max_distance_valid = 1 [default = false];
    if (has_max_distance_valid()) {
      total_size += 1 + 1;
    }

    // optional bool sensor_id_valid = 2 [default = false];
    if (has_sensor_id_valid()) {
      total_size += 1 + 1;
    }

    // optional bool radar_power_valid = 3 [default = false];
    if (has_radar_power_valid()) {
      total_size += 1 + 1;
    }

    // optional bool sort_index_valid = 7 [default = false];
    if (has_sort_index_valid()) {
      total_size += 1 + 1;
    }

    // optional bool ctrl_relay_valid = 9 [default = false];
    if (has_ctrl_relay_valid()) {
      total_size += 1 + 1;
    }

    // optional uint32 sensor_id = 12 [default = 0];
    if (has_sensor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sensor_id());
    }

    // optional uint32 radar_power = 14 [default = 0];
    if (has_radar_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radar_power());
    }

    // optional uint32 ctrl_relay = 15 [default = 0];
    if (has_ctrl_relay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ctrl_relay());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 sort_index = 18 [default = 0];
    if (has_sort_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sort_index());
    }

    // optional .apollo.drivers.racobit_radar.RcsThreshold rcs_threshold = 20 [default = RCS_THRESHOLD_STANDARD];
    if (has_rcs_threshold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rcs_threshold());
    }

    // optional uint32 store_in_nvm = 19 [default = 1];
    if (has_store_in_nvm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->store_in_nvm());
    }

    // optional bool output_type_valid = 4 [default = true];
    if (has_output_type_valid()) {
      total_size += 1 + 1;
    }

    // optional bool send_quality_valid = 5 [default = true];
    if (has_send_quality_valid()) {
      total_size += 1 + 1;
    }

    // optional bool send_ext_info_valid = 6 [default = true];
    if (has_send_ext_info_valid()) {
      total_size += 1 + 1;
    }

    // optional bool store_in_nvm_valid = 8 [default = true];
    if (has_store_in_nvm_valid()) {
      total_size += 1 + 1;
    }

    // optional uint32 max_distance = 11 [default = 248];
    if (has_max_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_distance());
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional .apollo.drivers.racobit_radar.OutputType output_type = 13 [default = OUTPUT_TYPE_OBJECTS];
    if (has_output_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_type());
    }

    // optional bool rcs_threshold_valid = 10 [default = true];
    if (has_rcs_threshold_valid()) {
      total_size += 1 + 1;
    }

    // optional bool send_ext_info = 16 [default = true];
    if (has_send_ext_info()) {
      total_size += 2 + 1;
    }

    // optional bool send_quality = 17 [default = true];
    if (has_send_quality()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.racobit_radar.RadarConf)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.racobit_radar.RadarConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.racobit_radar.RadarConf)
    MergeFrom(*source);
  }
}

void RadarConf::MergeFrom(const RadarConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.racobit_radar.RadarConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      max_distance_valid_ = from.max_distance_valid_;
    }
    if (cached_has_bits & 0x00000002u) {
      sensor_id_valid_ = from.sensor_id_valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      radar_power_valid_ = from.radar_power_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      sort_index_valid_ = from.sort_index_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      ctrl_relay_valid_ = from.ctrl_relay_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      sensor_id_ = from.sensor_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      radar_power_ = from.radar_power_;
    }
    if (cached_has_bits & 0x00000080u) {
      ctrl_relay_ = from.ctrl_relay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      sort_index_ = from.sort_index_;
    }
    if (cached_has_bits & 0x00000200u) {
      rcs_threshold_ = from.rcs_threshold_;
    }
    if (cached_has_bits & 0x00000400u) {
      store_in_nvm_ = from.store_in_nvm_;
    }
    if (cached_has_bits & 0x00000800u) {
      output_type_valid_ = from.output_type_valid_;
    }
    if (cached_has_bits & 0x00001000u) {
      send_quality_valid_ = from.send_quality_valid_;
    }
    if (cached_has_bits & 0x00002000u) {
      send_ext_info_valid_ = from.send_ext_info_valid_;
    }
    if (cached_has_bits & 0x00004000u) {
      store_in_nvm_valid_ = from.store_in_nvm_valid_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_distance_ = from.max_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      output_type_ = from.output_type_;
    }
    if (cached_has_bits & 0x00020000u) {
      rcs_threshold_valid_ = from.rcs_threshold_valid_;
    }
    if (cached_has_bits & 0x00040000u) {
      send_ext_info_ = from.send_ext_info_;
    }
    if (cached_has_bits & 0x00080000u) {
      send_quality_ = from.send_quality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadarConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.racobit_radar.RadarConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarConf::CopyFrom(const RadarConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.racobit_radar.RadarConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarConf::IsInitialized() const {
  return true;
}

void RadarConf::Swap(RadarConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarConf::InternalSwap(RadarConf* other) {
  using std::swap;
  swap(max_distance_valid_, other->max_distance_valid_);
  swap(sensor_id_valid_, other->sensor_id_valid_);
  swap(radar_power_valid_, other->radar_power_valid_);
  swap(sort_index_valid_, other->sort_index_valid_);
  swap(ctrl_relay_valid_, other->ctrl_relay_valid_);
  swap(sensor_id_, other->sensor_id_);
  swap(radar_power_, other->radar_power_);
  swap(ctrl_relay_, other->ctrl_relay_);
  swap(sort_index_, other->sort_index_);
  swap(rcs_threshold_, other->rcs_threshold_);
  swap(store_in_nvm_, other->store_in_nvm_);
  swap(output_type_valid_, other->output_type_valid_);
  swap(send_quality_valid_, other->send_quality_valid_);
  swap(send_ext_info_valid_, other->send_ext_info_valid_);
  swap(store_in_nvm_valid_, other->store_in_nvm_valid_);
  swap(max_distance_, other->max_distance_);
  swap(output_type_, other->output_type_);
  swap(rcs_threshold_valid_, other->rcs_threshold_valid_);
  swap(send_ext_info_, other->send_ext_info_);
  swap(send_quality_, other->send_quality_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RadarConf::GetMetadata() const {
  protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RacobitRadarConf::InitAsDefaultInstance() {
  ::apollo::drivers::racobit_radar::_RacobitRadarConf_default_instance_._instance.get_mutable()->can_conf_ = const_cast< ::apollo::drivers::racobit_radar::CanConf*>(
      ::apollo::drivers::racobit_radar::CanConf::internal_default_instance());
  ::apollo::drivers::racobit_radar::_RacobitRadarConf_default_instance_._instance.get_mutable()->radar_conf_ = const_cast< ::apollo::drivers::racobit_radar::RadarConf*>(
      ::apollo::drivers::racobit_radar::RadarConf::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RacobitRadarConf::kCanConfFieldNumber;
const int RacobitRadarConf::kRadarConfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RacobitRadarConf::RacobitRadarConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::scc_info_RacobitRadarConf.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.drivers.racobit_radar.RacobitRadarConf)
}
RacobitRadarConf::RacobitRadarConf(const RacobitRadarConf& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_can_conf()) {
    can_conf_ = new ::apollo::drivers::racobit_radar::CanConf(*from.can_conf_);
  } else {
    can_conf_ = NULL;
  }
  if (from.has_radar_conf()) {
    radar_conf_ = new ::apollo::drivers::racobit_radar::RadarConf(*from.radar_conf_);
  } else {
    radar_conf_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.drivers.racobit_radar.RacobitRadarConf)
}

void RacobitRadarConf::SharedCtor() {
  ::memset(&can_conf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radar_conf_) -
      reinterpret_cast<char*>(&can_conf_)) + sizeof(radar_conf_));
}

RacobitRadarConf::~RacobitRadarConf() {
  // @@protoc_insertion_point(destructor:apollo.drivers.racobit_radar.RacobitRadarConf)
  SharedDtor();
}

void RacobitRadarConf::SharedDtor() {
  if (this != internal_default_instance()) delete can_conf_;
  if (this != internal_default_instance()) delete radar_conf_;
}

void RacobitRadarConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RacobitRadarConf::descriptor() {
  ::protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RacobitRadarConf& RacobitRadarConf::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::scc_info_RacobitRadarConf.base);
  return *internal_default_instance();
}


void RacobitRadarConf::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.drivers.racobit_radar.RacobitRadarConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(can_conf_ != NULL);
      can_conf_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(radar_conf_ != NULL);
      radar_conf_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RacobitRadarConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.drivers.racobit_radar.RacobitRadarConf)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.drivers.racobit_radar.CanConf can_conf = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_can_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.drivers.racobit_radar.RadarConf radar_conf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_radar_conf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.drivers.racobit_radar.RacobitRadarConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.drivers.racobit_radar.RacobitRadarConf)
  return false;
#undef DO_
}

void RacobitRadarConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.drivers.racobit_radar.RacobitRadarConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.racobit_radar.CanConf can_conf = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_can_conf(), output);
  }

  // optional .apollo.drivers.racobit_radar.RadarConf radar_conf = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_radar_conf(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.drivers.racobit_radar.RacobitRadarConf)
}

::google::protobuf::uint8* RacobitRadarConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.drivers.racobit_radar.RacobitRadarConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.drivers.racobit_radar.CanConf can_conf = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_can_conf(), deterministic, target);
  }

  // optional .apollo.drivers.racobit_radar.RadarConf radar_conf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_radar_conf(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.drivers.racobit_radar.RacobitRadarConf)
  return target;
}

size_t RacobitRadarConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.drivers.racobit_radar.RacobitRadarConf)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.drivers.racobit_radar.CanConf can_conf = 1;
    if (has_can_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *can_conf_);
    }

    // optional .apollo.drivers.racobit_radar.RadarConf radar_conf = 2;
    if (has_radar_conf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *radar_conf_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RacobitRadarConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.drivers.racobit_radar.RacobitRadarConf)
  GOOGLE_DCHECK_NE(&from, this);
  const RacobitRadarConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RacobitRadarConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.drivers.racobit_radar.RacobitRadarConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.drivers.racobit_radar.RacobitRadarConf)
    MergeFrom(*source);
  }
}

void RacobitRadarConf::MergeFrom(const RacobitRadarConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.drivers.racobit_radar.RacobitRadarConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_can_conf()->::apollo::drivers::racobit_radar::CanConf::MergeFrom(from.can_conf());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_radar_conf()->::apollo::drivers::racobit_radar::RadarConf::MergeFrom(from.radar_conf());
    }
  }
}

void RacobitRadarConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.drivers.racobit_radar.RacobitRadarConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RacobitRadarConf::CopyFrom(const RacobitRadarConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.drivers.racobit_radar.RacobitRadarConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RacobitRadarConf::IsInitialized() const {
  return true;
}

void RacobitRadarConf::Swap(RacobitRadarConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RacobitRadarConf::InternalSwap(RacobitRadarConf* other) {
  using std::swap;
  swap(can_conf_, other->can_conf_);
  swap(radar_conf_, other->radar_conf_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RacobitRadarConf::GetMetadata() const {
  protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdrivers_2fradar_2fracobit_5fradar_2fproto_2fracobit_5fradar_5fconf_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace racobit_radar
}  // namespace drivers
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::racobit_radar::CanConf* Arena::CreateMaybeMessage< ::apollo::drivers::racobit_radar::CanConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::racobit_radar::CanConf >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::racobit_radar::RadarConf* Arena::CreateMaybeMessage< ::apollo::drivers::racobit_radar::RadarConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::racobit_radar::RadarConf >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::drivers::racobit_radar::RacobitRadarConf* Arena::CreateMaybeMessage< ::apollo::drivers::racobit_radar::RacobitRadarConf >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::drivers::racobit_radar::RacobitRadarConf >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
