// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/chassis_detail.proto

#include "modules/canbus/proto/chassis_detail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fcanbus_2fproto_2fch_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fch_2eproto ::google::protobuf::internal::SCCInfo<14> scc_info_Ch;
}  // namespace protobuf_modules_2fcanbus_2fproto_2fch_2eproto
namespace protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_License;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Surround;
}  // namespace protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto
namespace protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Accel_cmd_67;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Accel_rpt_68;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BasicInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Battery;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Brake;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Brake_cmd_6b;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Brake_motor_rpt_1_70;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Brake_motor_rpt_2_71;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Brake_motor_rpt_3_72;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Brake_rpt_6c;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CheckResponseSignal;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Date_time_rpt_83;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Deceleration;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Ems;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Epb;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Eps;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Esp;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Gas;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Gear;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Global_cmd_69;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Global_rpt_6a;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Headlight_cmd_76;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Headlight_rpt_77;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Horn_cmd_78;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Horn_rpt_79;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Lat_lon_heading_rpt_82;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Light;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Parking_brake_status_rpt_80;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Safety;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Shift_cmd_65;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Shift_rpt_66;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Steering_cmd_6d;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Steering_motor_rpt_1_73;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Steering_motor_rpt_2_74;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Steering_motor_rpt_3_75;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Steering_rpt_1_6e;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Turn_cmd_63;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Turn_rpt_64;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VehicleSpd;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vehicle_speed_rpt_6f;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Wheel_speed_rpt_7a;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Wiper_cmd_90;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Wiper_rpt_91;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Yaw_rate_rpt_81;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto ::google::protobuf::internal::SCCInfo<30> scc_info_Gem;
}  // namespace protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto
namespace protobuf_modules_2fcanbus_2fproto_2fdevkit_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fdevkit_2eproto ::google::protobuf::internal::SCCInfo<18> scc_info_Devkit;
}  // namespace protobuf_modules_2fcanbus_2fproto_2fdevkit_2eproto
namespace protobuf_modules_2fcanbus_2fproto_2fge3_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fge3_2eproto ::google::protobuf::internal::SCCInfo<16> scc_info_Ge3;
}  // namespace protobuf_modules_2fcanbus_2fproto_2fge3_2eproto
namespace protobuf_modules_2fcanbus_2fproto_2flexus_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2flexus_2eproto ::google::protobuf::internal::SCCInfo<56> scc_info_Lexus;
}  // namespace protobuf_modules_2fcanbus_2fproto_2flexus_2eproto
namespace protobuf_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto ::google::protobuf::internal::SCCInfo<21> scc_info_Neolix_edu;
}  // namespace protobuf_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto
namespace protobuf_modules_2fcanbus_2fproto_2ftransit_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2ftransit_2eproto ::google::protobuf::internal::SCCInfo<12> scc_info_Transit;
}  // namespace protobuf_modules_2fcanbus_2fproto_2ftransit_2eproto
namespace protobuf_modules_2fcanbus_2fproto_2fwey_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fwey_2eproto ::google::protobuf::internal::SCCInfo<14> scc_info_Wey;
}  // namespace protobuf_modules_2fcanbus_2fproto_2fwey_2eproto
namespace protobuf_modules_2fcanbus_2fproto_2fzhongyun_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fzhongyun_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_Zhongyun;
}  // namespace protobuf_modules_2fcanbus_2fproto_2fzhongyun_2eproto
namespace protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VehicleID;
}  // namespace protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto
namespace apollo {
namespace canbus {
class ChassisDetailDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChassisDetail>
      _instance;
} _ChassisDetail_default_instance_;
class CheckResponseSignalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CheckResponseSignal>
      _instance;
} _CheckResponseSignal_default_instance_;
class BatteryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Battery>
      _instance;
} _Battery_default_instance_;
class LightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Light>
      _instance;
} _Light_default_instance_;
class EpsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Eps>
      _instance;
} _Eps_default_instance_;
class VehicleSpdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleSpd>
      _instance;
} _VehicleSpd_default_instance_;
class DecelerationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Deceleration>
      _instance;
} _Deceleration_default_instance_;
class BrakeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Brake>
      _instance;
} _Brake_default_instance_;
class EpbDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Epb>
      _instance;
} _Epb_default_instance_;
class GasDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gas>
      _instance;
} _Gas_default_instance_;
class EspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Esp>
      _instance;
} _Esp_default_instance_;
class EmsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ems>
      _instance;
} _Ems_default_instance_;
class GearDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gear>
      _instance;
} _Gear_default_instance_;
class SafetyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Safety>
      _instance;
} _Safety_default_instance_;
class BasicInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BasicInfo>
      _instance;
} _BasicInfo_default_instance_;
class Global_rpt_6aDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Global_rpt_6a>
      _instance;
} _Global_rpt_6a_default_instance_;
class Brake_cmd_6bDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Brake_cmd_6b>
      _instance;
} _Brake_cmd_6b_default_instance_;
class Brake_rpt_6cDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Brake_rpt_6c>
      _instance;
} _Brake_rpt_6c_default_instance_;
class Steering_cmd_6dDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Steering_cmd_6d>
      _instance;
} _Steering_cmd_6d_default_instance_;
class Steering_rpt_1_6eDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Steering_rpt_1_6e>
      _instance;
} _Steering_rpt_1_6e_default_instance_;
class Wheel_speed_rpt_7aDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Wheel_speed_rpt_7a>
      _instance;
} _Wheel_speed_rpt_7a_default_instance_;
class Date_time_rpt_83DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Date_time_rpt_83>
      _instance;
} _Date_time_rpt_83_default_instance_;
class Brake_motor_rpt_1_70DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Brake_motor_rpt_1_70>
      _instance;
} _Brake_motor_rpt_1_70_default_instance_;
class Headlight_rpt_77DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Headlight_rpt_77>
      _instance;
} _Headlight_rpt_77_default_instance_;
class Accel_rpt_68DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Accel_rpt_68>
      _instance;
} _Accel_rpt_68_default_instance_;
class Steering_motor_rpt_3_75DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Steering_motor_rpt_3_75>
      _instance;
} _Steering_motor_rpt_3_75_default_instance_;
class Turn_cmd_63DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Turn_cmd_63>
      _instance;
} _Turn_cmd_63_default_instance_;
class Turn_rpt_64DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Turn_rpt_64>
      _instance;
} _Turn_rpt_64_default_instance_;
class Shift_cmd_65DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Shift_cmd_65>
      _instance;
} _Shift_cmd_65_default_instance_;
class Shift_rpt_66DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Shift_rpt_66>
      _instance;
} _Shift_rpt_66_default_instance_;
class Accel_cmd_67DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Accel_cmd_67>
      _instance;
} _Accel_cmd_67_default_instance_;
class Lat_lon_heading_rpt_82DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lat_lon_heading_rpt_82>
      _instance;
} _Lat_lon_heading_rpt_82_default_instance_;
class Global_cmd_69DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Global_cmd_69>
      _instance;
} _Global_cmd_69_default_instance_;
class Parking_brake_status_rpt_80DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Parking_brake_status_rpt_80>
      _instance;
} _Parking_brake_status_rpt_80_default_instance_;
class Yaw_rate_rpt_81DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Yaw_rate_rpt_81>
      _instance;
} _Yaw_rate_rpt_81_default_instance_;
class Horn_rpt_79DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Horn_rpt_79>
      _instance;
} _Horn_rpt_79_default_instance_;
class Horn_cmd_78DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Horn_cmd_78>
      _instance;
} _Horn_cmd_78_default_instance_;
class Wiper_rpt_91DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Wiper_rpt_91>
      _instance;
} _Wiper_rpt_91_default_instance_;
class Vehicle_speed_rpt_6fDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vehicle_speed_rpt_6f>
      _instance;
} _Vehicle_speed_rpt_6f_default_instance_;
class Headlight_cmd_76DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Headlight_cmd_76>
      _instance;
} _Headlight_cmd_76_default_instance_;
class Steering_motor_rpt_2_74DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Steering_motor_rpt_2_74>
      _instance;
} _Steering_motor_rpt_2_74_default_instance_;
class Brake_motor_rpt_2_71DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Brake_motor_rpt_2_71>
      _instance;
} _Brake_motor_rpt_2_71_default_instance_;
class Steering_motor_rpt_1_73DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Steering_motor_rpt_1_73>
      _instance;
} _Steering_motor_rpt_1_73_default_instance_;
class Wiper_cmd_90DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Wiper_cmd_90>
      _instance;
} _Wiper_cmd_90_default_instance_;
class Brake_motor_rpt_3_72DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Brake_motor_rpt_3_72>
      _instance;
} _Brake_motor_rpt_3_72_default_instance_;
class GemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Gem>
      _instance;
} _Gem_default_instance_;
}  // namespace canbus
}  // namespace apollo
namespace protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto {
static void InitDefaultsChassisDetail() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_ChassisDetail_default_instance_;
    new (ptr) ::apollo::canbus::ChassisDetail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::ChassisDetail::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<26> scc_info_ChassisDetail =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 26, InitDefaultsChassisDetail}, {
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_BasicInfo.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Safety.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Gear.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Ems.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Esp.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Gas.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Epb.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Brake.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Deceleration.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_VehicleSpd.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Eps.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Light.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Battery.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_CheckResponseSignal.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::scc_info_License.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::scc_info_Surround.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Gem.base,
      &protobuf_modules_2fcanbus_2fproto_2flexus_2eproto::scc_info_Lexus.base,
      &protobuf_modules_2fcanbus_2fproto_2ftransit_2eproto::scc_info_Transit.base,
      &protobuf_modules_2fcanbus_2fproto_2fge3_2eproto::scc_info_Ge3.base,
      &protobuf_modules_2fcanbus_2fproto_2fwey_2eproto::scc_info_Wey.base,
      &protobuf_modules_2fcanbus_2fproto_2fzhongyun_2eproto::scc_info_Zhongyun.base,
      &protobuf_modules_2fcanbus_2fproto_2fch_2eproto::scc_info_Ch.base,
      &protobuf_modules_2fcanbus_2fproto_2fdevkit_2eproto::scc_info_Devkit.base,
      &protobuf_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto::scc_info_Neolix_edu.base,
      &protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::scc_info_VehicleID.base,}};

static void InitDefaultsCheckResponseSignal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_CheckResponseSignal_default_instance_;
    new (ptr) ::apollo::canbus::CheckResponseSignal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::CheckResponseSignal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CheckResponseSignal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCheckResponseSignal}, {}};

static void InitDefaultsBattery() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Battery_default_instance_;
    new (ptr) ::apollo::canbus::Battery();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Battery::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Battery =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBattery}, {}};

static void InitDefaultsLight() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Light_default_instance_;
    new (ptr) ::apollo::canbus::Light();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Light::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Light =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLight}, {}};

static void InitDefaultsEps() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Eps_default_instance_;
    new (ptr) ::apollo::canbus::Eps();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Eps::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Eps =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEps}, {}};

static void InitDefaultsVehicleSpd() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_VehicleSpd_default_instance_;
    new (ptr) ::apollo::canbus::VehicleSpd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::VehicleSpd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VehicleSpd =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVehicleSpd}, {}};

static void InitDefaultsDeceleration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Deceleration_default_instance_;
    new (ptr) ::apollo::canbus::Deceleration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Deceleration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Deceleration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeceleration}, {}};

static void InitDefaultsBrake() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_default_instance_;
    new (ptr) ::apollo::canbus::Brake();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Brake =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBrake}, {}};

static void InitDefaultsEpb() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Epb_default_instance_;
    new (ptr) ::apollo::canbus::Epb();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Epb::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Epb =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEpb}, {}};

static void InitDefaultsGas() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Gas_default_instance_;
    new (ptr) ::apollo::canbus::Gas();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Gas::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Gas =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGas}, {}};

static void InitDefaultsEsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Esp_default_instance_;
    new (ptr) ::apollo::canbus::Esp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Esp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Esp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEsp}, {}};

static void InitDefaultsEms() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Ems_default_instance_;
    new (ptr) ::apollo::canbus::Ems();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Ems::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Ems =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEms}, {}};

static void InitDefaultsGear() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Gear_default_instance_;
    new (ptr) ::apollo::canbus::Gear();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Gear::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Gear =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGear}, {}};

static void InitDefaultsSafety() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Safety_default_instance_;
    new (ptr) ::apollo::canbus::Safety();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Safety::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Safety =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSafety}, {}};

static void InitDefaultsBasicInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_BasicInfo_default_instance_;
    new (ptr) ::apollo::canbus::BasicInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::BasicInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BasicInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBasicInfo}, {}};

static void InitDefaultsGlobal_rpt_6a() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Global_rpt_6a_default_instance_;
    new (ptr) ::apollo::canbus::Global_rpt_6a();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Global_rpt_6a::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Global_rpt_6a =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGlobal_rpt_6a}, {}};

static void InitDefaultsBrake_cmd_6b() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_cmd_6b_default_instance_;
    new (ptr) ::apollo::canbus::Brake_cmd_6b();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake_cmd_6b::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Brake_cmd_6b =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBrake_cmd_6b}, {}};

static void InitDefaultsBrake_rpt_6c() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_rpt_6c_default_instance_;
    new (ptr) ::apollo::canbus::Brake_rpt_6c();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake_rpt_6c::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Brake_rpt_6c =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBrake_rpt_6c}, {}};

static void InitDefaultsSteering_cmd_6d() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Steering_cmd_6d_default_instance_;
    new (ptr) ::apollo::canbus::Steering_cmd_6d();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Steering_cmd_6d::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Steering_cmd_6d =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSteering_cmd_6d}, {}};

static void InitDefaultsSteering_rpt_1_6e() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Steering_rpt_1_6e_default_instance_;
    new (ptr) ::apollo::canbus::Steering_rpt_1_6e();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Steering_rpt_1_6e::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Steering_rpt_1_6e =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSteering_rpt_1_6e}, {}};

static void InitDefaultsWheel_speed_rpt_7a() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Wheel_speed_rpt_7a_default_instance_;
    new (ptr) ::apollo::canbus::Wheel_speed_rpt_7a();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Wheel_speed_rpt_7a::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Wheel_speed_rpt_7a =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWheel_speed_rpt_7a}, {}};

static void InitDefaultsDate_time_rpt_83() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Date_time_rpt_83_default_instance_;
    new (ptr) ::apollo::canbus::Date_time_rpt_83();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Date_time_rpt_83::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Date_time_rpt_83 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDate_time_rpt_83}, {}};

static void InitDefaultsBrake_motor_rpt_1_70() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_motor_rpt_1_70_default_instance_;
    new (ptr) ::apollo::canbus::Brake_motor_rpt_1_70();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake_motor_rpt_1_70::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Brake_motor_rpt_1_70 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBrake_motor_rpt_1_70}, {}};

static void InitDefaultsHeadlight_rpt_77() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Headlight_rpt_77_default_instance_;
    new (ptr) ::apollo::canbus::Headlight_rpt_77();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Headlight_rpt_77::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Headlight_rpt_77 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeadlight_rpt_77}, {}};

static void InitDefaultsAccel_rpt_68() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Accel_rpt_68_default_instance_;
    new (ptr) ::apollo::canbus::Accel_rpt_68();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Accel_rpt_68::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Accel_rpt_68 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccel_rpt_68}, {}};

static void InitDefaultsSteering_motor_rpt_3_75() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Steering_motor_rpt_3_75_default_instance_;
    new (ptr) ::apollo::canbus::Steering_motor_rpt_3_75();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Steering_motor_rpt_3_75::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Steering_motor_rpt_3_75 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSteering_motor_rpt_3_75}, {}};

static void InitDefaultsTurn_cmd_63() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Turn_cmd_63_default_instance_;
    new (ptr) ::apollo::canbus::Turn_cmd_63();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Turn_cmd_63::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Turn_cmd_63 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTurn_cmd_63}, {}};

static void InitDefaultsTurn_rpt_64() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Turn_rpt_64_default_instance_;
    new (ptr) ::apollo::canbus::Turn_rpt_64();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Turn_rpt_64::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Turn_rpt_64 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTurn_rpt_64}, {}};

static void InitDefaultsShift_cmd_65() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Shift_cmd_65_default_instance_;
    new (ptr) ::apollo::canbus::Shift_cmd_65();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Shift_cmd_65::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Shift_cmd_65 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsShift_cmd_65}, {}};

static void InitDefaultsShift_rpt_66() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Shift_rpt_66_default_instance_;
    new (ptr) ::apollo::canbus::Shift_rpt_66();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Shift_rpt_66::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Shift_rpt_66 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsShift_rpt_66}, {}};

static void InitDefaultsAccel_cmd_67() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Accel_cmd_67_default_instance_;
    new (ptr) ::apollo::canbus::Accel_cmd_67();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Accel_cmd_67::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Accel_cmd_67 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAccel_cmd_67}, {}};

static void InitDefaultsLat_lon_heading_rpt_82() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Lat_lon_heading_rpt_82_default_instance_;
    new (ptr) ::apollo::canbus::Lat_lon_heading_rpt_82();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Lat_lon_heading_rpt_82::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Lat_lon_heading_rpt_82 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLat_lon_heading_rpt_82}, {}};

static void InitDefaultsGlobal_cmd_69() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Global_cmd_69_default_instance_;
    new (ptr) ::apollo::canbus::Global_cmd_69();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Global_cmd_69::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Global_cmd_69 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGlobal_cmd_69}, {}};

static void InitDefaultsParking_brake_status_rpt_80() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Parking_brake_status_rpt_80_default_instance_;
    new (ptr) ::apollo::canbus::Parking_brake_status_rpt_80();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Parking_brake_status_rpt_80::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Parking_brake_status_rpt_80 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsParking_brake_status_rpt_80}, {}};

static void InitDefaultsYaw_rate_rpt_81() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Yaw_rate_rpt_81_default_instance_;
    new (ptr) ::apollo::canbus::Yaw_rate_rpt_81();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Yaw_rate_rpt_81::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Yaw_rate_rpt_81 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsYaw_rate_rpt_81}, {}};

static void InitDefaultsHorn_rpt_79() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Horn_rpt_79_default_instance_;
    new (ptr) ::apollo::canbus::Horn_rpt_79();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Horn_rpt_79::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Horn_rpt_79 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHorn_rpt_79}, {}};

static void InitDefaultsHorn_cmd_78() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Horn_cmd_78_default_instance_;
    new (ptr) ::apollo::canbus::Horn_cmd_78();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Horn_cmd_78::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Horn_cmd_78 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHorn_cmd_78}, {}};

static void InitDefaultsWiper_rpt_91() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Wiper_rpt_91_default_instance_;
    new (ptr) ::apollo::canbus::Wiper_rpt_91();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Wiper_rpt_91::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Wiper_rpt_91 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWiper_rpt_91}, {}};

static void InitDefaultsVehicle_speed_rpt_6f() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Vehicle_speed_rpt_6f_default_instance_;
    new (ptr) ::apollo::canbus::Vehicle_speed_rpt_6f();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Vehicle_speed_rpt_6f::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Vehicle_speed_rpt_6f =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVehicle_speed_rpt_6f}, {}};

static void InitDefaultsHeadlight_cmd_76() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Headlight_cmd_76_default_instance_;
    new (ptr) ::apollo::canbus::Headlight_cmd_76();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Headlight_cmd_76::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Headlight_cmd_76 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeadlight_cmd_76}, {}};

static void InitDefaultsSteering_motor_rpt_2_74() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Steering_motor_rpt_2_74_default_instance_;
    new (ptr) ::apollo::canbus::Steering_motor_rpt_2_74();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Steering_motor_rpt_2_74::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Steering_motor_rpt_2_74 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSteering_motor_rpt_2_74}, {}};

static void InitDefaultsBrake_motor_rpt_2_71() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_motor_rpt_2_71_default_instance_;
    new (ptr) ::apollo::canbus::Brake_motor_rpt_2_71();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake_motor_rpt_2_71::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Brake_motor_rpt_2_71 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBrake_motor_rpt_2_71}, {}};

static void InitDefaultsSteering_motor_rpt_1_73() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Steering_motor_rpt_1_73_default_instance_;
    new (ptr) ::apollo::canbus::Steering_motor_rpt_1_73();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Steering_motor_rpt_1_73::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Steering_motor_rpt_1_73 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSteering_motor_rpt_1_73}, {}};

static void InitDefaultsWiper_cmd_90() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Wiper_cmd_90_default_instance_;
    new (ptr) ::apollo::canbus::Wiper_cmd_90();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Wiper_cmd_90::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Wiper_cmd_90 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWiper_cmd_90}, {}};

static void InitDefaultsBrake_motor_rpt_3_72() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Brake_motor_rpt_3_72_default_instance_;
    new (ptr) ::apollo::canbus::Brake_motor_rpt_3_72();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Brake_motor_rpt_3_72::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Brake_motor_rpt_3_72 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBrake_motor_rpt_3_72}, {}};

static void InitDefaultsGem() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::canbus::_Gem_default_instance_;
    new (ptr) ::apollo::canbus::Gem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::canbus::Gem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<30> scc_info_Gem =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 30, InitDefaultsGem}, {
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Global_rpt_6a.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Brake_cmd_6b.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Brake_rpt_6c.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Steering_cmd_6d.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Steering_rpt_1_6e.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Wheel_speed_rpt_7a.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Date_time_rpt_83.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Brake_motor_rpt_1_70.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Headlight_rpt_77.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Accel_rpt_68.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Steering_motor_rpt_3_75.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Turn_cmd_63.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Turn_rpt_64.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Shift_cmd_65.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Shift_rpt_66.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Accel_cmd_67.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Lat_lon_heading_rpt_82.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Global_cmd_69.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Parking_brake_status_rpt_80.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Yaw_rate_rpt_81.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Horn_rpt_79.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Horn_cmd_78.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Wiper_rpt_91.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Vehicle_speed_rpt_6f.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Headlight_cmd_76.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Steering_motor_rpt_2_74.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Brake_motor_rpt_2_71.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Steering_motor_rpt_1_73.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Wiper_cmd_90.base,
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Brake_motor_rpt_3_72.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ChassisDetail.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CheckResponseSignal.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Battery.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Light.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Eps.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleSpd.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Deceleration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Brake.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Epb.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Gas.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Esp.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ems.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Gear.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Safety.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BasicInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Global_rpt_6a.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Brake_cmd_6b.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Brake_rpt_6c.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Steering_cmd_6d.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Steering_rpt_1_6e.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Wheel_speed_rpt_7a.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Date_time_rpt_83.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Brake_motor_rpt_1_70.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Headlight_rpt_77.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Accel_rpt_68.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Steering_motor_rpt_3_75.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Turn_cmd_63.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Turn_rpt_64.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Shift_cmd_65.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Shift_rpt_66.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Accel_cmd_67.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Lat_lon_heading_rpt_82.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Global_cmd_69.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Parking_brake_status_rpt_80.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Yaw_rate_rpt_81.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Horn_rpt_79.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Horn_cmd_78.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Wiper_rpt_91.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Vehicle_speed_rpt_6f.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Headlight_cmd_76.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Steering_motor_rpt_2_74.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Brake_motor_rpt_2_71.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Steering_motor_rpt_1_73.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Wiper_cmd_90.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Brake_motor_rpt_3_72.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Gem.base);
}

::google::protobuf::Metadata file_level_metadata[46];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[41];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, car_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, basic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, safety_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, ems_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, esp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, gas_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, epb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, brake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, vehicle_spd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, eps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, battery_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, check_response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, license_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, surround_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, gem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, lexus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, transit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, ge3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, wey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, zhongyun_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, ch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, devkit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, neolix_edu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::ChassisDetail, vehicle_id_),
  26,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_eps_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_epb_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_esp_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_vtog_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_scu_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_switch_online_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::CheckResponseSignal, is_vcu_online_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Battery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Battery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Battery, battery_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Battery, fuel_level_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, turn_light_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, beam_lamp_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, is_brake_lamp_on_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, is_auto_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, wiper_gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, lotion_gear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, is_horn_on_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, lincoln_lamp_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, lincoln_wiper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Light, lincoln_ambient_),
  0,
  1,
  2,
  3,
  5,
  6,
  4,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, is_eps_fail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, eps_control_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, eps_driver_hand_torq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, is_steering_angle_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, steering_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, steering_angle_spd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, is_trimming_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, is_calibration_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, is_failure_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, allow_enter_autonomous_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, current_driving_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, steering_angle_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, vehicle_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, epas_torque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, steering_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, driver_override_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, driver_activity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, watchdog_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, channel_1_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, channel_2_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, calibration_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, connector_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, timestamp_65_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, major_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, minor_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Eps, build_number_),
  2,
  1,
  0,
  3,
  6,
  7,
  4,
  5,
  13,
  8,
  9,
  10,
  11,
  12,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  22,
  21,
  23,
  24,
  25,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_vehicle_standstill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_vehicle_spd_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, vehicle_spd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_wheel_spd_rr_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_direction_rr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_spd_rr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_wheel_spd_rl_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_direction_rl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_spd_rl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_wheel_spd_fr_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_direction_fr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_spd_fr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_wheel_spd_fl_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_direction_fl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, wheel_spd_fl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_yaw_rate_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, yaw_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, yaw_rate_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_ax_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, ax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, ax_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, is_ay_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, ay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, ay_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, lat_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, long_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, vert_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, roll_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, acc_est_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::VehicleSpd, timestamp_sec_),
  1,
  2,
  0,
  3,
  5,
  6,
  4,
  8,
  7,
  12,
  9,
  10,
  13,
  11,
  16,
  14,
  17,
  18,
  15,
  19,
  20,
  29,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Deceleration, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Deceleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Deceleration, is_deceleration_available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Deceleration, is_deceleration_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Deceleration, deceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Deceleration, is_evb_fail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Deceleration, evb_pressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Deceleration, brake_pressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Deceleration, brake_pressure_spd_),
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, is_brake_pedal_pressed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, is_brake_force_exist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, is_brake_over_heat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, is_hand_brake_on_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, brake_pedal_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, is_brake_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, brake_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, brake_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, brake_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, boo_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, boo_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, boo_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, watchdog_applying_brakes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, watchdog_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, brake_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, driver_override_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, driver_activity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, watchdog_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, channel_1_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, channel_2_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, boo_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, connector_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, brake_torque_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, hsa_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, brake_torque_act_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, hsa_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, wheel_torque_act_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, major_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, minor_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake, build_number_),
  1,
  2,
  3,
  4,
  0,
  5,
  9,
  10,
  11,
  6,
  7,
  8,
  13,
  12,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  24,
  23,
  25,
  26,
  27,
  28,
  29,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Epb, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Epb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Epb, is_epb_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Epb, is_epb_released_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Epb, epb_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Epb, parking_brake_status_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, is_gas_pedal_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, is_gas_pedal_pressed_more_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, gas_pedal_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, is_gas_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, throttle_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, throttle_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, throttle_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, watchdog_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, throttle_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, driver_override_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, driver_activity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, watchdog_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, channel_1_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, channel_2_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, connector_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, accelerator_pedal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, accelerator_pedal_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, major_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, minor_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gas, build_number_),
  1,
  2,
  0,
  3,
  6,
  7,
  8,
  5,
  4,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_esp_acc_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_esp_on_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_esp_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_abs_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_abs_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_tcsvdc_fail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_abs_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_stab_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_stab_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_trac_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Esp, is_trac_enabled_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, is_engine_acc_available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, is_engine_acc_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, engine_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, max_engine_torq_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, min_engine_torq_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, base_engine_torq_constant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, is_engine_speed_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, engine_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, engine_torque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, is_over_engine_torque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Ems, engine_rpm_),
  2,
  3,
  1,
  0,
  6,
  7,
  4,
  9,
  8,
  5,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gear, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gear, is_shift_position_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gear, gear_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gear, driver_override_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gear, gear_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gear, canbus_fault_),
  1,
  0,
  2,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_driver_car_door_close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_driver_buckled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, emergency_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, has_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_motor_invertor_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_system_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_power_battery_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_motor_invertor_over_temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_small_battery_charge_discharge_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, driving_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_passenger_door_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_rearleft_door_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_rearright_door_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_hood_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_trunk_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_passenger_detected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_passenger_airbag_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, is_passenger_buckled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, front_left_tire_press_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, front_right_tire_press_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, rear_left_tire_press_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, rear_right_tire_press_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Safety, car_driving_mode_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, is_auto_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, power_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, is_air_bag_deployed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, odo_meter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, drive_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, is_system_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, is_human_interrupt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_on_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_off_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_res_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_cancel_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_on_off_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_res_cancel_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_inc_spd_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_dec_spd_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_inc_gap_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, acc_dec_gap_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, lka_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, canbus_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, gps_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, hours_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, minutes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, compass_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, pdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, is_gps_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, is_inferred_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, hdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, vdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, num_satellites_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::BasicInfo, gps_speed_),
  1,
  0,
  2,
  5,
  6,
  3,
  4,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  20,
  21,
  27,
  19,
  22,
  23,
  24,
  25,
  26,
  30,
  31,
  28,
  29,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, pacmod_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, override_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, veh_can_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, str_can_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, brk_can_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, usr_can_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Global_rpt_6a, usr_can_read_errors_),
  0,
  1,
  2,
  3,
  5,
  4,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_cmd_6b, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_cmd_6b, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_cmd_6b, brake_cmd_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_rpt_6c, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_rpt_6c, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_rpt_6c, manual_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_rpt_6c, commanded_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_rpt_6c, output_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_rpt_6c, brake_on_off_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_cmd_6d, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_cmd_6d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_cmd_6d, position_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_cmd_6d, speed_limit_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_rpt_1_6e, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_rpt_1_6e, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_rpt_1_6e, manual_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_rpt_1_6e, commanded_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_rpt_1_6e, output_value_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_7a, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_7a, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_7a, wheel_spd_rear_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_7a, wheel_spd_rear_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_7a, wheel_spd_front_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Wheel_speed_rpt_7a, wheel_spd_front_left_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, time_second_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, time_minute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, time_hour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, date_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, date_month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Date_time_rpt_83, date_year_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_1_70, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_1_70, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_1_70, motor_current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_1_70, shaft_position_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_77, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_77, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_77, output_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_77, manual_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Headlight_rpt_77, commanded_value_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Accel_rpt_68, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Accel_rpt_68, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Accel_rpt_68, manual_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Accel_rpt_68, commanded_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Accel_rpt_68, output_value_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_3_75, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_3_75, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_3_75, torque_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_3_75, torque_input_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Turn_cmd_63, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Turn_cmd_63, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Turn_cmd_63, turn_signal_cmd_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Turn_rpt_64, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Turn_rpt_64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Turn_rpt_64, manual_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Turn_rpt_64, commanded_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Turn_rpt_64, output_value_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Shift_cmd_65, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Shift_cmd_65, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Shift_cmd_65, shift_cmd_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Shift_rpt_66, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Shift_rpt_66, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Shift_rpt_66, manual_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Shift_rpt_66, commanded_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Shift_rpt_66, output_value_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Accel_cmd_67, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Accel_cmd_67, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Accel_cmd_67, accel_cmd_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, longitude_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, longitude_minutes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, longitude_degrees_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, latitude_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, latitude_minutes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Lat_lon_heading_rpt_82, latitude_degrees_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Global_cmd_69, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Global_cmd_69, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Global_cmd_69, pacmod_enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Global_cmd_69, clear_override_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Global_cmd_69, ignore_override_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Parking_brake_status_rpt_80, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Parking_brake_status_rpt_80, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Parking_brake_status_rpt_80, parking_brake_enabled_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Yaw_rate_rpt_81, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Yaw_rate_rpt_81, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Yaw_rate_rpt_81, yaw_rate_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Horn_rpt_79, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Horn_rpt_79, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Horn_rpt_79, output_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Horn_rpt_79, commanded_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Horn_rpt_79, manual_input_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Horn_cmd_78, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Horn_cmd_78, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Horn_cmd_78, horn_cmd_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_91, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_91, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_91, output_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_91, commanded_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Wiper_rpt_91, manual_input_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Vehicle_speed_rpt_6f, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Vehicle_speed_rpt_6f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Vehicle_speed_rpt_6f, vehicle_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Vehicle_speed_rpt_6f, vehicle_speed_valid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_76, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_76, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Headlight_cmd_76, headlight_cmd_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_74, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_74, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_74, encoder_temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_74, motor_temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_2_74, angular_speed_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_71, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_71, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_71, encoder_temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_71, motor_temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_2_71, angular_speed_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_1_73, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_1_73, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_1_73, motor_current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Steering_motor_rpt_1_73, shaft_position_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_90, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_90, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Wiper_cmd_90, wiper_cmd_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_3_72, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_3_72, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_3_72, torque_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Brake_motor_rpt_3_72, torque_input_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, global_rpt_6a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, brake_cmd_6b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, brake_rpt_6c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, steering_cmd_6d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, steering_rpt_1_6e_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, wheel_speed_rpt_7a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, date_time_rpt_83_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, brake_motor_rpt_1_70_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, headlight_rpt_77_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, accel_rpt_68_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, steering_motor_rpt_3_75_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, turn_cmd_63_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, turn_rpt_64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, shift_cmd_65_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, shift_rpt_66_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, accel_cmd_67_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, lat_lon_heading_rpt_82_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, global_cmd_69_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, parking_brake_status_rpt_80_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, yaw_rate_rpt_81_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, horn_rpt_79_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, horn_cmd_78_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, wiper_rpt_91_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, vehicle_speed_rpt_6f_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, headlight_cmd_76_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, steering_motor_rpt_2_74_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, brake_motor_rpt_2_71_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, steering_motor_rpt_1_73_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, wiper_cmd_90_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::canbus::Gem, brake_motor_rpt_3_72_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 32, sizeof(::apollo::canbus::ChassisDetail)},
  { 59, 71, sizeof(::apollo::canbus::CheckResponseSignal)},
  { 78, 85, sizeof(::apollo::canbus::Battery)},
  { 87, 102, sizeof(::apollo::canbus::Light)},
  { 112, 143, sizeof(::apollo::canbus::Eps)},
  { 169, 204, sizeof(::apollo::canbus::VehicleSpd)},
  { 234, 246, sizeof(::apollo::canbus::Deceleration)},
  { 253, 288, sizeof(::apollo::canbus::Brake)},
  { 318, 327, sizeof(::apollo::canbus::Epb)},
  { 331, 356, sizeof(::apollo::canbus::Gas)},
  { 376, 392, sizeof(::apollo::canbus::Esp)},
  { 403, 419, sizeof(::apollo::canbus::Ems)},
  { 430, 440, sizeof(::apollo::canbus::Gear)},
  { 445, 473, sizeof(::apollo::canbus::Safety)},
  { 496, 540, sizeof(::apollo::canbus::BasicInfo)},
  { 579, 591, sizeof(::apollo::canbus::Global_rpt_6a)},
  { 598, 604, sizeof(::apollo::canbus::Brake_cmd_6b)},
  { 605, 614, sizeof(::apollo::canbus::Brake_rpt_6c)},
  { 618, 625, sizeof(::apollo::canbus::Steering_cmd_6d)},
  { 627, 635, sizeof(::apollo::canbus::Steering_rpt_1_6e)},
  { 638, 647, sizeof(::apollo::canbus::Wheel_speed_rpt_7a)},
  { 651, 662, sizeof(::apollo::canbus::Date_time_rpt_83)},
  { 668, 675, sizeof(::apollo::canbus::Brake_motor_rpt_1_70)},
  { 677, 685, sizeof(::apollo::canbus::Headlight_rpt_77)},
  { 688, 696, sizeof(::apollo::canbus::Accel_rpt_68)},
  { 699, 706, sizeof(::apollo::canbus::Steering_motor_rpt_3_75)},
  { 708, 714, sizeof(::apollo::canbus::Turn_cmd_63)},
  { 715, 723, sizeof(::apollo::canbus::Turn_rpt_64)},
  { 726, 732, sizeof(::apollo::canbus::Shift_cmd_65)},
  { 733, 741, sizeof(::apollo::canbus::Shift_rpt_66)},
  { 744, 750, sizeof(::apollo::canbus::Accel_cmd_67)},
  { 751, 763, sizeof(::apollo::canbus::Lat_lon_heading_rpt_82)},
  { 770, 778, sizeof(::apollo::canbus::Global_cmd_69)},
  { 781, 787, sizeof(::apollo::canbus::Parking_brake_status_rpt_80)},
  { 788, 794, sizeof(::apollo::canbus::Yaw_rate_rpt_81)},
  { 795, 803, sizeof(::apollo::canbus::Horn_rpt_79)},
  { 806, 812, sizeof(::apollo::canbus::Horn_cmd_78)},
  { 813, 821, sizeof(::apollo::canbus::Wiper_rpt_91)},
  { 824, 831, sizeof(::apollo::canbus::Vehicle_speed_rpt_6f)},
  { 833, 839, sizeof(::apollo::canbus::Headlight_cmd_76)},
  { 840, 848, sizeof(::apollo::canbus::Steering_motor_rpt_2_74)},
  { 851, 859, sizeof(::apollo::canbus::Brake_motor_rpt_2_71)},
  { 862, 869, sizeof(::apollo::canbus::Steering_motor_rpt_1_73)},
  { 871, 877, sizeof(::apollo::canbus::Wiper_cmd_90)},
  { 878, 885, sizeof(::apollo::canbus::Brake_motor_rpt_3_72)},
  { 887, 922, sizeof(::apollo::canbus::Gem)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_ChassisDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_CheckResponseSignal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Battery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Light_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Eps_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_VehicleSpd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Deceleration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Brake_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Epb_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Gas_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Esp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Ems_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Gear_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Safety_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_BasicInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Global_rpt_6a_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Brake_cmd_6b_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Brake_rpt_6c_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Steering_cmd_6d_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Steering_rpt_1_6e_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Wheel_speed_rpt_7a_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Date_time_rpt_83_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Brake_motor_rpt_1_70_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Headlight_rpt_77_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Accel_rpt_68_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Steering_motor_rpt_3_75_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Turn_cmd_63_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Turn_rpt_64_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Shift_cmd_65_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Shift_rpt_66_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Accel_cmd_67_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Lat_lon_heading_rpt_82_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Global_cmd_69_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Parking_brake_status_rpt_80_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Yaw_rate_rpt_81_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Horn_rpt_79_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Horn_cmd_78_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Wiper_rpt_91_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Vehicle_speed_rpt_6f_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Headlight_cmd_76_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Steering_motor_rpt_2_74_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Brake_motor_rpt_2_71_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Steering_motor_rpt_1_73_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Wiper_cmd_90_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Brake_motor_rpt_3_72_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::canbus::_Gem_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/canbus/proto/chassis_detail.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 46);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n)modules/canbus/proto/chassis_detail.pr"
      "oto\022\rapollo.canbus\0321modules/common/confi"
      "gs/proto/vehicle_config.proto\032\"modules/c"
      "anbus/proto/chassis.proto\032\035modules/canbu"
      "s/proto/ch.proto\032!modules/canbus/proto/d"
      "evkit.proto\032\036modules/canbus/proto/ge3.pr"
      "oto\032 modules/canbus/proto/lexus.proto\032\"m"
      "odules/canbus/proto/transit.proto\032\036modul"
      "es/canbus/proto/wey.proto\032#modules/canbu"
      "s/proto/zhongyun.proto\032%modules/canbus/p"
      "roto/neolix_edu.proto\"\364\010\n\rChassisDetail\022"
      "3\n\010car_type\030\001 \001(\0162!.apollo.canbus.Chassi"
      "sDetail.Type\022\'\n\005basic\030\002 \001(\0132\030.apollo.can"
      "bus.BasicInfo\022%\n\006safety\030\003 \001(\0132\025.apollo.c"
      "anbus.Safety\022!\n\004gear\030\004 \001(\0132\023.apollo.canb"
      "us.Gear\022\037\n\003ems\030\005 \001(\0132\022.apollo.canbus.Ems"
      "\022\037\n\003esp\030\006 \001(\0132\022.apollo.canbus.Esp\022\037\n\003gas"
      "\030\007 \001(\0132\022.apollo.canbus.Gas\022\037\n\003epb\030\010 \001(\0132"
      "\022.apollo.canbus.Epb\022#\n\005brake\030\t \001(\0132\024.apo"
      "llo.canbus.Brake\0221\n\014deceleration\030\n \001(\0132\033"
      ".apollo.canbus.Deceleration\022.\n\013vehicle_s"
      "pd\030\013 \001(\0132\031.apollo.canbus.VehicleSpd\022\037\n\003e"
      "ps\030\014 \001(\0132\022.apollo.canbus.Eps\022#\n\005light\030\r "
      "\001(\0132\024.apollo.canbus.Light\022\'\n\007battery\030\016 \001"
      "(\0132\026.apollo.canbus.Battery\022:\n\016check_resp"
      "onse\030\017 \001(\0132\".apollo.canbus.CheckResponse"
      "Signal\022+\n\007license\030\020 \001(\0132\026.apollo.canbus."
      "LicenseB\002\030\001\022)\n\010surround\030\021 \001(\0132\027.apollo.c"
      "anbus.Surround\022\037\n\003gem\030\022 \001(\0132\022.apollo.can"
      "bus.Gem\022#\n\005lexus\030\023 \001(\0132\024.apollo.canbus.L"
      "exus\022\'\n\007transit\030\024 \001(\0132\026.apollo.canbus.Tr"
      "ansit\022\037\n\003ge3\030\025 \001(\0132\022.apollo.canbus.Ge3\022\037"
      "\n\003wey\030\026 \001(\0132\022.apollo.canbus.Wey\022)\n\010zhong"
      "yun\030\027 \001(\0132\027.apollo.canbus.Zhongyun\022\035\n\002ch"
      "\030\030 \001(\0132\021.apollo.canbus.Ch\022%\n\006devkit\030\031 \001("
      "\0132\025.apollo.canbus.Devkit\022-\n\nneolix_edu\030\032"
      " \001(\0132\031.apollo.canbus.Neolix_edu\022,\n\nvehic"
      "le_id\030e \001(\0132\030.apollo.common.VehicleID\"-\n"
      "\004Type\022\017\n\013QIRUI_EQ_15\020\000\022\024\n\020CHANGAN_RUICHE"
      "NG\020\001\"\353\001\n\023CheckResponseSignal\022\034\n\ris_eps_o"
      "nline\030\001 \001(\010:\005false\022\034\n\ris_epb_online\030\002 \001("
      "\010:\005false\022\034\n\ris_esp_online\030\003 \001(\010:\005false\022\035"
      "\n\016is_vtog_online\030\004 \001(\010:\005false\022\034\n\ris_scu_"
      "online\030\005 \001(\010:\005false\022\037\n\020is_switch_online\030"
      "\006 \001(\010:\005false\022\034\n\ris_vcu_online\030\007 \001(\010:\005fal"
      "se\"6\n\007Battery\022\027\n\017battery_percent\030\001 \001(\001\022\022"
      "\n\nfuel_level\030\002 \001(\001\"\261\t\n\005Light\022;\n\017turn_lig"
      "ht_type\030\001 \001(\0162\".apollo.canbus.Light.Turn"
      "LightType\0229\n\016beam_lamp_type\030\002 \001(\0162!.apol"
      "lo.canbus.Light.BeamLampType\022\030\n\020is_brake"
      "_lamp_on\030\003 \001(\010\022\025\n\ris_auto_light\030\004 \001(\010\022\022\n"
      "\nwiper_gear\030\005 \001(\005\022\023\n\013lotion_gear\030\006 \001(\005\022\022"
      "\n\nis_horn_on\030\007 \001(\010\022\?\n\021lincoln_lamp_type\030"
      "\010 \001(\0162$.apollo.canbus.Light.LincolnLampT"
      "ype\022<\n\rlincoln_wiper\030\t \001(\0162%.apollo.canb"
      "us.Light.LincolnWiperType\022@\n\017lincoln_amb"
      "ient\030\n \001(\0162\'.apollo.canbus.Light.Lincoln"
      "AmbientType\"[\n\rTurnLightType\022\022\n\016TURN_LIG"
      "HT_OFF\020\000\022\020\n\014TURN_LEFT_ON\020\001\022\021\n\rTURN_RIGHT"
      "_ON\020\002\022\021\n\rTURN_LIGHT_ON\020\003\"\?\n\014BeamLampType"
      "\022\014\n\010BEAM_OFF\020\000\022\020\n\014HIGH_BEAM_ON\020\001\022\017\n\013LOW_"
      "BEAM_ON\020\002\"Y\n\017LincolnLampType\022\r\n\tBEAM_NUL"
      "L\020\000\022\026\n\022BEAM_FLASH_TO_PASS\020\001\022\r\n\tBEAM_HIGH"
      "\020\002\022\020\n\014BEAM_INVALID\020\003\"\334\002\n\020LincolnWiperTyp"
      "e\022\r\n\tWIPER_OFF\020\000\022\022\n\016WIPER_AUTO_OFF\020\001\022\024\n\020"
      "WIPER_OFF_MOVING\020\002\022\024\n\020WIPER_MANUAL_OFF\020\003"
      "\022\023\n\017WIPER_MANUAL_ON\020\004\022\024\n\020WIPER_MANUAL_LO"
      "W\020\005\022\025\n\021WIPER_MANUAL_HIGH\020\006\022\024\n\020WIPER_MIST"
      "_FLICK\020\007\022\016\n\nWIPER_WASH\020\010\022\022\n\016WIPER_AUTO_L"
      "OW\020\t\022\023\n\017WIPER_AUTO_HIGH\020\n\022\027\n\023WIPER_COURT"
      "ESY_WIPE\020\013\022\025\n\021WIPER_AUTO_ADJUST\020\014\022\022\n\016WIP"
      "ER_RESERVED\020\r\022\021\n\rWIPER_STALLED\020\016\022\021\n\rWIPE"
      "R_NO_DATA\020\017\"\250\001\n\022LincolnAmbientType\022\020\n\014AM"
      "BIENT_DARK\020\000\022\021\n\rAMBIENT_LIGHT\020\001\022\024\n\020AMBIE"
      "NT_TWILIGHT\020\002\022\025\n\021AMBIENT_TUNNEL_ON\020\003\022\026\n\022"
      "AMBIENT_TUNNEL_OFF\020\004\022\023\n\017AMBIENT_INVALID\020"
      "\005\022\023\n\017AMBIENT_NO_DATA\020\007\"\205\006\n\003Eps\022\023\n\013is_eps"
      "_fail\030\001 \001(\010\0222\n\021eps_control_state\030\002 \001(\0162\027"
      ".apollo.canbus.Eps.Type\022\034\n\024eps_driver_ha"
      "nd_torq\030\003 \001(\001\022\037\n\027is_steering_angle_valid"
      "\030\004 \001(\010\022\026\n\016steering_angle\030\005 \001(\001\022\032\n\022steeri"
      "ng_angle_spd\030\006 \001(\001\022\032\n\022is_trimming_status"
      "\030\007 \001(\010\022\035\n\025is_calibration_status\030\010 \001(\010\022\031\n"
      "\021is_failure_status\030\t \001(\010\022#\n\033allow_enter_"
      "autonomous_mode\030\n \001(\005\022\034\n\024current_driving"
      "_mode\030\013 \001(\005\022\032\n\022steering_angle_cmd\030\014 \001(\001\022"
      "\025\n\rvehicle_speed\030\r \001(\001\022\023\n\013epas_torque\030\016 "
      "\001(\001\022\030\n\020steering_enabled\030\017 \001(\010\022\027\n\017driver_"
      "override\030\020 \001(\010\022\027\n\017driver_activity\030\021 \001(\010\022"
      "\026\n\016watchdog_fault\030\022 \001(\010\022\027\n\017channel_1_fau"
      "lt\030\023 \001(\010\022\027\n\017channel_2_fault\030\024 \001(\010\022\031\n\021cal"
      "ibration_fault\030\025 \001(\010\022\027\n\017connector_fault\030"
      "\026 \001(\010\022\024\n\014timestamp_65\030\027 \001(\001\022\025\n\rmajor_ver"
      "sion\030\030 \001(\005\022\025\n\rminor_version\030\031 \001(\005\022\024\n\014bui"
      "ld_number\030\032 \001(\005\"=\n\004Type\022\021\n\rNOT_AVAILABLE"
      "\020\000\022\t\n\005READY\020\001\022\n\n\006ACTIVE\020\002\022\013\n\007INVALID\020\003\"\353"
      "\006\n\nVehicleSpd\022\035\n\025is_vehicle_standstill\030\001"
      " \001(\010\022\034\n\024is_vehicle_spd_valid\030\002 \001(\010\022\026\n\013ve"
      "hicle_spd\030\003 \001(\001:\0010\022\035\n\025is_wheel_spd_rr_va"
      "lid\030\004 \001(\010\022D\n\022wheel_direction_rr\030\005 \001(\0162(."
      "apollo.canbus.WheelSpeed.WheelSpeedType\022"
      "\024\n\014wheel_spd_rr\030\006 \001(\001\022\035\n\025is_wheel_spd_rl"
      "_valid\030\007 \001(\010\022D\n\022wheel_direction_rl\030\010 \001(\016"
      "2(.apollo.canbus.WheelSpeed.WheelSpeedTy"
      "pe\022\024\n\014wheel_spd_rl\030\t \001(\001\022\035\n\025is_wheel_spd"
      "_fr_valid\030\n \001(\010\022D\n\022wheel_direction_fr\030\013 "
      "\001(\0162(.apollo.canbus.WheelSpeed.WheelSpee"
      "dType\022\024\n\014wheel_spd_fr\030\014 \001(\001\022\035\n\025is_wheel_"
      "spd_fl_valid\030\r \001(\010\022D\n\022wheel_direction_fl"
      "\030\016 \001(\0162(.apollo.canbus.WheelSpeed.WheelS"
      "peedType\022\024\n\014wheel_spd_fl\030\017 \001(\001\022\031\n\021is_yaw"
      "_rate_valid\030\020 \001(\010\022\020\n\010yaw_rate\030\021 \001(\001\022\027\n\017y"
      "aw_rate_offset\030\022 \001(\001\022\023\n\013is_ax_valid\030\023 \001("
      "\010\022\n\n\002ax\030\024 \001(\001\022\021\n\tax_offset\030\025 \001(\001\022\023\n\013is_a"
      "y_valid\030\026 \001(\010\022\n\n\002ay\030\027 \001(\001\022\021\n\tay_offset\030\030"
      " \001(\001\022\017\n\007lat_acc\030\031 \001(\001\022\020\n\010long_acc\030\032 \001(\001\022"
      "\020\n\010vert_acc\030\033 \001(\001\022\021\n\troll_rate\030\034 \001(\001\022\017\n\007"
      "acc_est\030\035 \001(\001\022\025\n\rtimestamp_sec\030\036 \001(\001\"\322\001\n"
      "\014Deceleration\022!\n\031is_deceleration_availab"
      "le\030\001 \001(\010\022\036\n\026is_deceleration_active\030\002 \001(\010"
      "\022\027\n\014deceleration\030\003 \001(\001:\0010\022\023\n\013is_evb_fail"
      "\030\004 \001(\001\022\027\n\014evb_pressure\030\005 \001(\001:\0010\022\031\n\016brake"
      "_pressure\030\006 \001(\001:\0010\022\035\n\022brake_pressure_spd"
      "\030\007 \001(\001:\0010\"\266\010\n\005Brake\022%\n\026is_brake_pedal_pr"
      "essed\030\001 \001(\010:\005false\022\034\n\024is_brake_force_exi"
      "st\030\002 \001(\010\022\032\n\022is_brake_over_heat\030\003 \001(\010\022\030\n\020"
      "is_hand_brake_on\030\004 \001(\010\022\034\n\024brake_pedal_po"
      "sition\030\005 \001(\001\022\026\n\016is_brake_valid\030\006 \001(\010\022\023\n\013"
      "brake_input\030\007 \001(\001\022\021\n\tbrake_cmd\030\010 \001(\001\022\024\n\014"
      "brake_output\030\t \001(\001\022\021\n\tboo_input\030\n \001(\010\022\017\n"
      "\007boo_cmd\030\013 \001(\010\022\022\n\nboo_output\030\014 \001(\010\022 \n\030wa"
      "tchdog_applying_brakes\030\r \001(\010\022\027\n\017watchdog"
      "_source\030\016 \001(\005\022\025\n\rbrake_enabled\030\017 \001(\010\022\027\n\017"
      "driver_override\030\020 \001(\010\022\027\n\017driver_activity"
      "\030\021 \001(\010\022\026\n\016watchdog_fault\030\022 \001(\010\022\027\n\017channe"
      "l_1_fault\030\023 \001(\010\022\027\n\017channel_2_fault\030\024 \001(\010"
      "\022\021\n\tboo_fault\030\025 \001(\010\022\027\n\017connector_fault\030\026"
      " \001(\010\022\030\n\020brake_torque_req\030\027 \001(\001\0226\n\nhsa_st"
      "atus\030\030 \001(\0162\".apollo.canbus.Brake.HSAStat"
      "usType\022\030\n\020brake_torque_act\030\031 \001(\001\0222\n\010hsa_"
      "mode\030\032 \001(\0162 .apollo.canbus.Brake.HSAMode"
      "Type\022\030\n\020wheel_torque_act\030\033 \001(\001\022\025\n\rmajor_"
      "version\030\034 \001(\005\022\025\n\rminor_version\030\035 \001(\005\022\024\n\014"
      "build_number\030\036 \001(\005\"\273\001\n\rHSAStatusType\022\020\n\014"
      "HSA_INACTIVE\020\000\022\030\n\024HSA_FINDING_GRADIENT\020\001"
      "\022\026\n\022HSA_ACTIVE_PRESSED\020\002\022\027\n\023HSA_ACTIVE_R"
      "ELEASED\020\003\022\024\n\020HSA_FAST_RELEASE\020\004\022\024\n\020HSA_S"
      "LOW_RELEASE\020\005\022\016\n\nHSA_FAILED\020\006\022\021\n\rHSA_UND"
      "EFINED\020\007\"P\n\013HSAModeType\022\013\n\007HSA_OFF\020\000\022\014\n\010"
      "HSA_AUTO\020\001\022\016\n\nHSA_MANUAL\020\002\022\026\n\022HSA_MODE_U"
      "NDEFINED\020\003\"\333\001\n\003Epb\022\024\n\014is_epb_error\030\001 \001(\010"
      "\022\027\n\017is_epb_released\030\002 \001(\010\022\022\n\nepb_status\030"
      "\003 \001(\005\022;\n\024parking_brake_status\030\004 \001(\0162\035.ap"
      "ollo.canbus.Epb.PBrakeType\"T\n\nPBrakeType"
      "\022\016\n\nPBRAKE_OFF\020\000\022\025\n\021PBRAKE_TRANSITION\020\001\022"
      "\r\n\tPBRAKE_ON\020\002\022\020\n\014PBRAKE_FAULT\020\003\"\216\004\n\003Gas"
      "\022\032\n\022is_gas_pedal_error\030\001 \001(\010\022!\n\031is_gas_p"
      "edal_pressed_more\030\002 \001(\010\022\035\n\022gas_pedal_pos"
      "ition\030\003 \001(\001:\0010\022\033\n\014is_gas_valid\030\004 \001(\010:\005fa"
      "lse\022\026\n\016throttle_input\030\005 \001(\001\022\024\n\014throttle_"
      "cmd\030\006 \001(\001\022\027\n\017throttle_output\030\007 \001(\001\022\027\n\017wa"
      "tchdog_source\030\010 \001(\005\022\030\n\020throttle_enabled\030"
      "\t \001(\010\022\027\n\017driver_override\030\n \001(\010\022\027\n\017driver"
      "_activity\030\013 \001(\010\022\026\n\016watchdog_fault\030\014 \001(\010\022"
      "\027\n\017channel_1_fault\030\r \001(\010\022\027\n\017channel_2_fa"
      "ult\030\016 \001(\010\022\027\n\017connector_fault\030\017 \001(\010\022\031\n\021ac"
      "celerator_pedal\030\020 \001(\001\022\036\n\026accelerator_ped"
      "al_rate\030\021 \001(\001\022\025\n\rmajor_version\030\022 \001(\005\022\025\n\r"
      "minor_version\030\023 \001(\005\022\024\n\014build_number\030\024 \001("
      "\005\"\210\002\n\003Esp\022\030\n\020is_esp_acc_error\030\001 \001(\010\022\021\n\ti"
      "s_esp_on\030\002 \001(\010\022\025\n\ris_esp_active\030\003 \001(\010\022\024\n"
      "\014is_abs_error\030\004 \001(\010\022\025\n\ris_abs_active\030\005 \001"
      "(\010\022\026\n\016is_tcsvdc_fail\030\006 \001(\010\022\026\n\016is_abs_ena"
      "bled\030\007 \001(\010\022\026\n\016is_stab_active\030\010 \001(\010\022\027\n\017is"
      "_stab_enabled\030\t \001(\010\022\026\n\016is_trac_active\030\n "
      "\001(\010\022\027\n\017is_trac_enabled\030\013 \001(\010\"\215\003\n\003Ems\022\037\n\027"
      "is_engine_acc_available\030\001 \001(\010\022\033\n\023is_engi"
      "ne_acc_error\030\002 \001(\010\022-\n\014engine_state\030\003 \001(\016"
      "2\027.apollo.canbus.Ems.Type\022\037\n\027max_engine_"
      "torq_percent\030\004 \001(\001\022\037\n\027min_engine_torq_pe"
      "rcent\030\005 \001(\001\022!\n\031base_engine_torq_constant"
      "\030\006 \001(\005\022\035\n\025is_engine_speed_error\030\007 \001(\010\022\024\n"
      "\014engine_speed\030\010 \001(\001\022\025\n\rengine_torque\030\t \001"
      "(\005\022\035\n\025is_over_engine_torque\030\n \001(\010\022\022\n\neng"
      "ine_rpm\030\013 \001(\001\"5\n\004Type\022\010\n\004STOP\020\000\022\t\n\005CRANK"
      "\020\001\022\013\n\007RUNNING\020\002\022\013\n\007INVALID\020\003\"\306\001\n\004Gear\022\037\n"
      "\027is_shift_position_valid\030\001 \001(\010\0227\n\ngear_s"
      "tate\030\002 \001(\0162#.apollo.canbus.Chassis.GearP"
      "osition\022\027\n\017driver_override\030\003 \001(\010\0225\n\010gear"
      "_cmd\030\004 \001(\0162#.apollo.canbus.Chassis.GearP"
      "osition\022\024\n\014canbus_fault\030\005 \001(\010\"\356\005\n\006Safety"
      "\022 \n\030is_driver_car_door_close\030\001 \001(\010\022\031\n\021is"
      "_driver_buckled\030\002 \001(\010\022\030\n\020emergency_butto"
      "n\030\003 \001(\005\022\030\n\thas_error\030\004 \001(\010:\005false\022\037\n\027is_"
      "motor_invertor_fault\030\005 \001(\010\022\027\n\017is_system_"
      "fault\030\006 \001(\010\022\036\n\026is_power_battery_fault\030\007 "
      "\001(\010\022*\n\"is_motor_invertor_over_temperatur"
      "e\030\010 \001(\010\022/\n\'is_small_battery_charge_disch"
      "arge_fault\030\t \001(\010\022\024\n\014driving_mode\030\n \001(\005\022\036"
      "\n\026is_passenger_door_open\030\013 \001(\010\022\035\n\025is_rea"
      "rleft_door_open\030\014 \001(\010\022\036\n\026is_rearright_do"
      "or_open\030\r \001(\010\022\024\n\014is_hood_open\030\016 \001(\010\022\025\n\ri"
      "s_trunk_open\030\017 \001(\010\022\035\n\025is_passenger_detec"
      "ted\030\020 \001(\010\022#\n\033is_passenger_airbag_enabled"
      "\030\021 \001(\010\022\034\n\024is_passenger_buckled\030\022 \001(\010\022\035\n\025"
      "front_left_tire_press\030\023 \001(\005\022\036\n\026front_rig"
      "ht_tire_press\030\024 \001(\005\022\034\n\024rear_left_tire_pr"
      "ess\030\025 \001(\005\022\035\n\025rear_right_tire_press\030\026 \001(\005"
      "\022<\n\020car_driving_mode\030\027 \001(\0162\".apollo.canb"
      "us.Chassis.DrivingMode\"\274\007\n\tBasicInfo\022\024\n\014"
      "is_auto_mode\030\001 \001(\010\0222\n\013power_state\030\002 \001(\0162"
      "\035.apollo.canbus.BasicInfo.Type\022\033\n\023is_air"
      "_bag_deployed\030\003 \001(\010\022\021\n\todo_meter\030\004 \001(\001\022\023"
      "\n\013drive_range\030\005 \001(\001\022\027\n\017is_system_error\030\006"
      " \001(\010\022\032\n\022is_human_interrupt\030\007 \001(\010\022\025\n\racc_"
      "on_button\030\010 \001(\010\022\026\n\016acc_off_button\030\t \001(\010\022"
      "\026\n\016acc_res_button\030\n \001(\010\022\031\n\021acc_cancel_bu"
      "tton\030\013 \001(\010\022\031\n\021acc_on_off_button\030\014 \001(\010\022\035\n"
      "\025acc_res_cancel_button\030\r \001(\010\022\032\n\022acc_inc_"
      "spd_button\030\016 \001(\010\022\032\n\022acc_dec_spd_button\030\017"
      " \001(\010\022\032\n\022acc_inc_gap_button\030\020 \001(\010\022\032\n\022acc_"
      "dec_gap_button\030\021 \001(\010\022\022\n\nlka_button\030\022 \001(\010"
      "\022\024\n\014canbus_fault\030\023 \001(\010\022\020\n\010latitude\030\024 \001(\001"
      "\022\021\n\tlongitude\030\025 \001(\001\022\021\n\tgps_valid\030\026 \001(\010\022\014"
      "\n\004year\030\027 \001(\005\022\r\n\005month\030\030 \001(\005\022\013\n\003day\030\031 \001(\005"
      "\022\r\n\005hours\030\032 \001(\005\022\017\n\007minutes\030\033 \001(\005\022\017\n\007seco"
      "nds\030\034 \001(\005\022\031\n\021compass_direction\030\035 \001(\001\022\014\n\004"
      "pdop\030\036 \001(\001\022\024\n\014is_gps_fault\030\037 \001(\010\022\023\n\013is_i"
      "nferred\030  \001(\010\022\020\n\010altitude\030! \001(\001\022\017\n\007headi"
      "ng\030\" \001(\001\022\014\n\004hdop\030# \001(\001\022\014\n\004vdop\030$ \001(\001\022*\n\007"
      "quality\030% \001(\0162\031.apollo.canbus.GpsQuality"
      "\022\026\n\016num_satellites\030& \001(\005\022\021\n\tgps_speed\030\' "
      "\001(\001\"8\n\004Type\022\007\n\003OFF\020\000\022\007\n\003ACC\020\001\022\006\n\002ON\020\002\022\t\n"
      "\005START\020\003\022\013\n\007INVALID\020\004\"\365\004\n\rGlobal_rpt_6a\022"
      "E\n\rpacmod_status\030\001 \001(\0162..apollo.canbus.G"
      "lobal_rpt_6a.Pacmod_statusType\022I\n\017overri"
      "de_status\030\002 \001(\01620.apollo.canbus.Global_r"
      "pt_6a.Override_statusType\022\027\n\017veh_can_tim"
      "eout\030\003 \001(\010\022\027\n\017str_can_timeout\030\004 \001(\010\022I\n\017b"
      "rk_can_timeout\030\005 \001(\01620.apollo.canbus.Glo"
      "bal_rpt_6a.Brk_can_timeoutType\022\027\n\017usr_ca"
      "n_timeout\030\006 \001(\010\022\033\n\023usr_can_read_errors\030\007"
      " \001(\005\"Z\n\021Pacmod_statusType\022\"\n\036PACMOD_STAT"
      "US_CONTROL_DISABLED\020\000\022!\n\035PACMOD_STATUS_C"
      "ONTROL_ENABLED\020\001\"Y\n\023Override_statusType\022"
      "\"\n\036OVERRIDE_STATUS_NOT_OVERRIDDEN\020\000\022\036\n\032O"
      "VERRIDE_STATUS_OVERRIDDEN\020\001\"h\n\023Brk_can_t"
      "imeoutType\022)\n%BRK_CAN_TIMEOUT_NO_ACTIVE_"
      "CAN_TIMEOUT\020\000\022&\n\"BRK_CAN_TIMEOUT_ACTIVE_"
      "CAN_TIMEOUT\020\001\"!\n\014Brake_cmd_6b\022\021\n\tbrake_c"
      "md\030\001 \001(\001\"\326\001\n\014Brake_rpt_6c\022\024\n\014manual_inpu"
      "t\030\001 \001(\001\022\027\n\017commanded_value\030\002 \001(\001\022\024\n\014outp"
      "ut_value\030\003 \001(\001\022B\n\014brake_on_off\030\004 \001(\0162,.a"
      "pollo.canbus.Brake_rpt_6c.Brake_on_offTy"
      "pe\"=\n\020Brake_on_offType\022\024\n\020BRAKE_ON_OFF_O"
      "FF\020\000\022\023\n\017BRAKE_ON_OFF_ON\020\001\">\n\017Steering_cm"
      "d_6d\022\026\n\016position_value\030\001 \001(\001\022\023\n\013speed_li"
      "mit\030\002 \001(\001\"X\n\021Steering_rpt_1_6e\022\024\n\014manual"
      "_input\030\001 \001(\001\022\027\n\017commanded_value\030\002 \001(\001\022\024\n"
      "\014output_value\030\003 \001(\001\"\214\001\n\022Wheel_speed_rpt_"
      "7a\022\034\n\024wheel_spd_rear_right\030\001 \001(\005\022\033\n\023whee"
      "l_spd_rear_left\030\002 \001(\005\022\035\n\025wheel_spd_front"
      "_right\030\003 \001(\005\022\034\n\024wheel_spd_front_left\030\004 \001"
      "(\005\"\210\001\n\020Date_time_rpt_83\022\023\n\013time_second\030\001"
      " \001(\005\022\023\n\013time_minute\030\002 \001(\005\022\021\n\ttime_hour\030\003"
      " \001(\005\022\020\n\010date_day\030\004 \001(\005\022\022\n\ndate_month\030\005 \001"
      "(\005\022\021\n\tdate_year\030\006 \001(\005\"E\n\024Brake_motor_rpt"
      "_1_70\022\025\n\rmotor_current\030\001 \001(\001\022\026\n\016shaft_po"
      "sition\030\002 \001(\001\"\306\004\n\020Headlight_rpt_77\022F\n\014out"
      "put_value\030\001 \001(\01620.apollo.canbus.Headligh"
      "t_rpt_77.Output_valueType\022F\n\014manual_inpu"
      "t\030\002 \001(\01620.apollo.canbus.Headlight_rpt_77"
      ".Manual_inputType\022L\n\017commanded_value\030\003 \001"
      "(\01623.apollo.canbus.Headlight_rpt_77.Comm"
      "anded_valueType\"l\n\020Output_valueType\022\037\n\033O"
      "UTPUT_VALUE_HEADLIGHTS_OFF\020\000\022\032\n\026OUTPUT_V"
      "ALUE_LOW_BEAMS\020\001\022\033\n\027OUTPUT_VALUE_HIGH_BE"
      "AMS\020\002\"l\n\020Manual_inputType\022\037\n\033MANUAL_INPU"
      "T_HEADLIGHTS_OFF\020\000\022\032\n\026MANUAL_INPUT_LOW_B"
      "EAMS\020\001\022\033\n\027MANUAL_INPUT_HIGH_BEAMS\020\002\"x\n\023C"
      "ommanded_valueType\022\"\n\036COMMANDED_VALUE_HE"
      "ADLIGHTS_OFF\020\000\022\035\n\031COMMANDED_VALUE_LOW_BE"
      "AMS\020\001\022\036\n\032COMMANDED_VALUE_HIGH_BEAMS\020\002\"S\n"
      "\014Accel_rpt_68\022\024\n\014manual_input\030\001 \001(\001\022\027\n\017c"
      "ommanded_value\030\002 \001(\001\022\024\n\014output_value\030\003 \001"
      "(\001\"F\n\027Steering_motor_rpt_3_75\022\025\n\rtorque_"
      "output\030\001 \001(\001\022\024\n\014torque_input\030\002 \001(\001\"\331\001\n\013T"
      "urn_cmd_63\022G\n\017turn_signal_cmd\030\001 \001(\0162..ap"
      "ollo.canbus.Turn_cmd_63.Turn_signal_cmdT"
      "ype\"\200\001\n\023Turn_signal_cmdType\022\031\n\025TURN_SIGN"
      "AL_CMD_RIGHT\020\000\022\030\n\024TURN_SIGNAL_CMD_NONE\020\001"
      "\022\030\n\024TURN_SIGNAL_CMD_LEFT\020\002\022\032\n\026TURN_SIGNA"
      "L_CMD_HAZARD\020\003\"\305\004\n\013Turn_rpt_64\022A\n\014manual"
      "_input\030\001 \001(\0162+.apollo.canbus.Turn_rpt_64"
      ".Manual_inputType\022G\n\017commanded_value\030\002 \001"
      "(\0162..apollo.canbus.Turn_rpt_64.Commanded"
      "_valueType\022A\n\014output_value\030\003 \001(\0162+.apoll"
      "o.canbus.Turn_rpt_64.Output_valueType\"q\n"
      "\020Manual_inputType\022\026\n\022MANUAL_INPUT_RIGHT\020"
      "\000\022\025\n\021MANUAL_INPUT_NONE\020\001\022\025\n\021MANUAL_INPUT"
      "_LEFT\020\002\022\027\n\023MANUAL_INPUT_HAZARD\020\003\"\200\001\n\023Com"
      "manded_valueType\022\031\n\025COMMANDED_VALUE_RIGH"
      "T\020\000\022\030\n\024COMMANDED_VALUE_NONE\020\001\022\030\n\024COMMAND"
      "ED_VALUE_LEFT\020\002\022\032\n\026COMMANDED_VALUE_HAZAR"
      "D\020\003\"q\n\020Output_valueType\022\026\n\022OUTPUT_VALUE_"
      "RIGHT\020\000\022\025\n\021OUTPUT_VALUE_NONE\020\001\022\025\n\021OUTPUT"
      "_VALUE_LEFT\020\002\022\027\n\023OUTPUT_VALUE_HAZARD\020\003\"\311"
      "\001\n\014Shift_cmd_65\022<\n\tshift_cmd\030\001 \001(\0162).apo"
      "llo.canbus.Shift_cmd_65.Shift_cmdType\"{\n"
      "\rShift_cmdType\022\022\n\016SHIFT_CMD_PARK\020\000\022\025\n\021SH"
      "IFT_CMD_REVERSE\020\001\022\025\n\021SHIFT_CMD_NEUTRAL\020\002"
      "\022\025\n\021SHIFT_CMD_FORWARD\020\003\022\021\n\rSHIFT_CMD_LOW"
      "\020\004\"\245\005\n\014Shift_rpt_66\022B\n\014manual_input\030\001 \001("
      "\0162,.apollo.canbus.Shift_rpt_66.Manual_in"
      "putType\022H\n\017commanded_value\030\002 \001(\0162/.apoll"
      "o.canbus.Shift_rpt_66.Commanded_valueTyp"
      "e\022B\n\014output_value\030\003 \001(\0162,.apollo.canbus."
      "Shift_rpt_66.Output_valueType\"\216\001\n\020Manual"
      "_inputType\022\025\n\021MANUAL_INPUT_PARK\020\000\022\030\n\024MAN"
      "UAL_INPUT_REVERSE\020\001\022\030\n\024MANUAL_INPUT_NEUT"
      "RAL\020\002\022\030\n\024MANUAL_INPUT_FORWARD\020\003\022\025\n\021MANUA"
      "L_INPUT_HIGH\020\004\"\240\001\n\023Commanded_valueType\022\030"
      "\n\024COMMANDED_VALUE_PARK\020\000\022\033\n\027COMMANDED_VA"
      "LUE_REVERSE\020\001\022\033\n\027COMMANDED_VALUE_NEUTRAL"
      "\020\002\022\033\n\027COMMANDED_VALUE_FORWARD\020\003\022\030\n\024COMMA"
      "NDED_VALUE_HIGH\020\004\"\216\001\n\020Output_valueType\022\025"
      "\n\021OUTPUT_VALUE_PARK\020\000\022\030\n\024OUTPUT_VALUE_RE"
      "VERSE\020\001\022\030\n\024OUTPUT_VALUE_NEUTRAL\020\002\022\030\n\024OUT"
      "PUT_VALUE_FORWARD\020\003\022\025\n\021OUTPUT_VALUE_HIGH"
      "\020\004\"!\n\014Accel_cmd_67\022\021\n\taccel_cmd\030\001 \001(\001\"\310\001"
      "\n\026Lat_lon_heading_rpt_82\022\017\n\007heading\030\001 \001("
      "\001\022\031\n\021longitude_seconds\030\002 \001(\005\022\031\n\021longitud"
      "e_minutes\030\003 \001(\005\022\031\n\021longitude_degrees\030\004 \001"
      "(\005\022\030\n\020latitude_seconds\030\005 \001(\005\022\030\n\020latitude"
      "_minutes\030\006 \001(\005\022\030\n\020latitude_degrees\030\007 \001(\005"
      "\"\253\004\n\rGlobal_cmd_69\022E\n\rpacmod_enable\030\001 \001("
      "\0162..apollo.canbus.Global_cmd_69.Pacmod_e"
      "nableType\022G\n\016clear_override\030\002 \001(\0162/.apol"
      "lo.canbus.Global_cmd_69.Clear_overrideTy"
      "pe\022I\n\017ignore_override\030\003 \001(\01620.apollo.can"
      "bus.Global_cmd_69.Ignore_overrideType\"Z\n"
      "\021Pacmod_enableType\022\"\n\036PACMOD_ENABLE_CONT"
      "ROL_DISABLED\020\000\022!\n\035PACMOD_ENABLE_CONTROL_"
      "ENABLED\020\001\"p\n\022Clear_overrideType\022/\n+CLEAR"
      "_OVERRIDE_DON_T_CLEAR_ACTIVE_OVERRIDES\020\000"
      "\022)\n%CLEAR_OVERRIDE_CLEAR_ACTIVE_OVERRIDE"
      "S\020\001\"q\n\023Ignore_overrideType\022/\n+IGNORE_OVE"
      "RRIDE_DON_T_IGNORE_USER_OVERRIDES\020\000\022)\n%I"
      "GNORE_OVERRIDE_IGNORE_USER_OVERRIDES\020\001\"\334"
      "\001\n\033Parking_brake_status_rpt_80\022c\n\025parkin"
      "g_brake_enabled\030\001 \001(\0162D.apollo.canbus.Pa"
      "rking_brake_status_rpt_80.Parking_brake_"
      "enabledType\"X\n\031Parking_brake_enabledType"
      "\022\035\n\031PARKING_BRAKE_ENABLED_OFF\020\000\022\034\n\030PARKI"
      "NG_BRAKE_ENABLED_ON\020\001\"#\n\017Yaw_rate_rpt_81"
      "\022\020\n\010yaw_rate\030\001 \001(\001\"\242\003\n\013Horn_rpt_79\022A\n\014ou"
      "tput_value\030\001 \001(\0162+.apollo.canbus.Horn_rp"
      "t_79.Output_valueType\022G\n\017commanded_value"
      "\030\002 \001(\0162..apollo.canbus.Horn_rpt_79.Comma"
      "nded_valueType\022A\n\014manual_input\030\003 \001(\0162+.a"
      "pollo.canbus.Horn_rpt_79.Manual_inputTyp"
      "e\"=\n\020Output_valueType\022\024\n\020OUTPUT_VALUE_OF"
      "F\020\000\022\023\n\017OUTPUT_VALUE_ON\020\001\"F\n\023Commanded_va"
      "lueType\022\027\n\023COMMANDED_VALUE_OFF\020\000\022\026\n\022COMM"
      "ANDED_VALUE_ON\020\001\"=\n\020Manual_inputType\022\024\n\020"
      "MANUAL_INPUT_OFF\020\000\022\023\n\017MANUAL_INPUT_ON\020\001\""
      "{\n\013Horn_cmd_78\0229\n\010horn_cmd\030\001 \001(\0162\'.apoll"
      "o.canbus.Horn_cmd_78.Horn_cmdType\"1\n\014Hor"
      "n_cmdType\022\020\n\014HORN_CMD_OFF\020\000\022\017\n\013HORN_CMD_"
      "ON\020\001\"\207\010\n\014Wiper_rpt_91\022B\n\014output_value\030\001 "
      "\001(\0162,.apollo.canbus.Wiper_rpt_91.Output_"
      "valueType\022H\n\017commanded_value\030\002 \001(\0162/.apo"
      "llo.canbus.Wiper_rpt_91.Commanded_valueT"
      "ype\022B\n\014manual_input\030\003 \001(\0162,.apollo.canbu"
      "s.Wiper_rpt_91.Manual_inputType\"\201\002\n\020Outp"
      "ut_valueType\022\033\n\027OUTPUT_VALUE_WIPERS_OFF\020"
      "\000\022\037\n\033OUTPUT_VALUE_INTERMITTENT_1\020\001\022\037\n\033OU"
      "TPUT_VALUE_INTERMITTENT_2\020\002\022\037\n\033OUTPUT_VA"
      "LUE_INTERMITTENT_3\020\003\022\037\n\033OUTPUT_VALUE_INT"
      "ERMITTENT_4\020\004\022\037\n\033OUTPUT_VALUE_INTERMITTE"
      "NT_5\020\005\022\024\n\020OUTPUT_VALUE_LOW\020\006\022\025\n\021OUTPUT_V"
      "ALUE_HIGH\020\007\"\234\002\n\023Commanded_valueType\022\036\n\032C"
      "OMMANDED_VALUE_WIPERS_OFF\020\000\022\"\n\036COMMANDED"
      "_VALUE_INTERMITTENT_1\020\001\022\"\n\036COMMANDED_VAL"
      "UE_INTERMITTENT_2\020\002\022\"\n\036COMMANDED_VALUE_I"
      "NTERMITTENT_3\020\003\022\"\n\036COMMANDED_VALUE_INTER"
      "MITTENT_4\020\004\022\"\n\036COMMANDED_VALUE_INTERMITT"
      "ENT_5\020\005\022\027\n\023COMMANDED_VALUE_LOW\020\006\022\030\n\024COMM"
      "ANDED_VALUE_HIGH\020\007\"\201\002\n\020Manual_inputType\022"
      "\033\n\027MANUAL_INPUT_WIPERS_OFF\020\000\022\037\n\033MANUAL_I"
      "NPUT_INTERMITTENT_1\020\001\022\037\n\033MANUAL_INPUT_IN"
      "TERMITTENT_2\020\002\022\037\n\033MANUAL_INPUT_INTERMITT"
      "ENT_3\020\003\022\037\n\033MANUAL_INPUT_INTERMITTENT_4\020\004"
      "\022\037\n\033MANUAL_INPUT_INTERMITTENT_5\020\005\022\024\n\020MAN"
      "UAL_INPUT_LOW\020\006\022\025\n\021MANUAL_INPUT_HIGH\020\007\"\342"
      "\001\n\024Vehicle_speed_rpt_6f\022\025\n\rvehicle_speed"
      "\030\001 \001(\001\022X\n\023vehicle_speed_valid\030\002 \001(\0162;.ap"
      "ollo.canbus.Vehicle_speed_rpt_6f.Vehicle"
      "_speed_validType\"Y\n\027Vehicle_speed_validT"
      "ype\022\037\n\033VEHICLE_SPEED_VALID_INVALID\020\000\022\035\n\031"
      "VEHICLE_SPEED_VALID_VALID\020\001\"\316\001\n\020Headligh"
      "t_cmd_76\022H\n\rheadlight_cmd\030\001 \001(\01621.apollo"
      ".canbus.Headlight_cmd_76.Headlight_cmdTy"
      "pe\"p\n\021Headlight_cmdType\022 \n\034HEADLIGHT_CMD"
      "_HEADLIGHTS_OFF\020\000\022\033\n\027HEADLIGHT_CMD_LOW_B"
      "EAMS\020\001\022\034\n\030HEADLIGHT_CMD_HIGH_BEAMS\020\002\"h\n\027"
      "Steering_motor_rpt_2_74\022\033\n\023encoder_tempe"
      "rature\030\001 \001(\005\022\031\n\021motor_temperature\030\002 \001(\005\022"
      "\025\n\rangular_speed\030\003 \001(\001\"e\n\024Brake_motor_rp"
      "t_2_71\022\033\n\023encoder_temperature\030\001 \001(\005\022\031\n\021m"
      "otor_temperature\030\002 \001(\005\022\025\n\rangular_speed\030"
      "\003 \001(\001\"H\n\027Steering_motor_rpt_1_73\022\025\n\rmoto"
      "r_current\030\001 \001(\001\022\026\n\016shaft_position\030\002 \001(\001\""
      "\265\002\n\014Wiper_cmd_90\022<\n\twiper_cmd\030\001 \001(\0162).ap"
      "ollo.canbus.Wiper_cmd_90.Wiper_cmdType\"\346"
      "\001\n\rWiper_cmdType\022\030\n\024WIPER_CMD_WIPERS_OFF"
      "\020\000\022\034\n\030WIPER_CMD_INTERMITTENT_1\020\001\022\034\n\030WIPE"
      "R_CMD_INTERMITTENT_2\020\002\022\034\n\030WIPER_CMD_INTE"
      "RMITTENT_3\020\003\022\034\n\030WIPER_CMD_INTERMITTENT_4"
      "\020\004\022\034\n\030WIPER_CMD_INTERMITTENT_5\020\005\022\021\n\rWIPE"
      "R_CMD_LOW\020\006\022\022\n\016WIPER_CMD_HIGH\020\007\"C\n\024Brake"
      "_motor_rpt_3_72\022\025\n\rtorque_output\030\001 \001(\001\022\024"
      "\n\014torque_input\030\002 \001(\001\"\351\r\n\003Gem\0223\n\rglobal_r"
      "pt_6a\030\001 \001(\0132\034.apollo.canbus.Global_rpt_6"
      "a\0221\n\014brake_cmd_6b\030\002 \001(\0132\033.apollo.canbus."
      "Brake_cmd_6b\0221\n\014brake_rpt_6c\030\003 \001(\0132\033.apo"
      "llo.canbus.Brake_rpt_6c\0227\n\017steering_cmd_"
      "6d\030\004 \001(\0132\036.apollo.canbus.Steering_cmd_6d"
      "\022;\n\021steering_rpt_1_6e\030\005 \001(\0132 .apollo.can"
      "bus.Steering_rpt_1_6e\022=\n\022wheel_speed_rpt"
      "_7a\030\006 \001(\0132!.apollo.canbus.Wheel_speed_rp"
      "t_7a\0229\n\020date_time_rpt_83\030\007 \001(\0132\037.apollo."
      "canbus.Date_time_rpt_83\022A\n\024brake_motor_r"
      "pt_1_70\030\010 \001(\0132#.apollo.canbus.Brake_moto"
      "r_rpt_1_70\0229\n\020headlight_rpt_77\030\t \001(\0132\037.a"
      "pollo.canbus.Headlight_rpt_77\0221\n\014accel_r"
      "pt_68\030\n \001(\0132\033.apollo.canbus.Accel_rpt_68"
      "\022G\n\027steering_motor_rpt_3_75\030\013 \001(\0132&.apol"
      "lo.canbus.Steering_motor_rpt_3_75\022/\n\013tur"
      "n_cmd_63\030\014 \001(\0132\032.apollo.canbus.Turn_cmd_"
      "63\022/\n\013turn_rpt_64\030\r \001(\0132\032.apollo.canbus."
      "Turn_rpt_64\0221\n\014shift_cmd_65\030\016 \001(\0132\033.apol"
      "lo.canbus.Shift_cmd_65\0221\n\014shift_rpt_66\030\017"
      " \001(\0132\033.apollo.canbus.Shift_rpt_66\0221\n\014acc"
      "el_cmd_67\030\020 \001(\0132\033.apollo.canbus.Accel_cm"
      "d_67\022E\n\026lat_lon_heading_rpt_82\030\021 \001(\0132%.a"
      "pollo.canbus.Lat_lon_heading_rpt_82\0223\n\rg"
      "lobal_cmd_69\030\022 \001(\0132\034.apollo.canbus.Globa"
      "l_cmd_69\022O\n\033parking_brake_status_rpt_80\030"
      "\023 \001(\0132*.apollo.canbus.Parking_brake_stat"
      "us_rpt_80\0227\n\017yaw_rate_rpt_81\030\024 \001(\0132\036.apo"
      "llo.canbus.Yaw_rate_rpt_81\022/\n\013horn_rpt_7"
      "9\030\025 \001(\0132\032.apollo.canbus.Horn_rpt_79\022/\n\013h"
      "orn_cmd_78\030\026 \001(\0132\032.apollo.canbus.Horn_cm"
      "d_78\0221\n\014wiper_rpt_91\030\027 \001(\0132\033.apollo.canb"
      "us.Wiper_rpt_91\022A\n\024vehicle_speed_rpt_6f\030"
      "\030 \001(\0132#.apollo.canbus.Vehicle_speed_rpt_"
      "6f\0229\n\020headlight_cmd_76\030\031 \001(\0132\037.apollo.ca"
      "nbus.Headlight_cmd_76\022G\n\027steering_motor_"
      "rpt_2_74\030\032 \001(\0132&.apollo.canbus.Steering_"
      "motor_rpt_2_74\022A\n\024brake_motor_rpt_2_71\030\033"
      " \001(\0132#.apollo.canbus.Brake_motor_rpt_2_7"
      "1\022G\n\027steering_motor_rpt_1_73\030\034 \001(\0132&.apo"
      "llo.canbus.Steering_motor_rpt_1_73\0221\n\014wi"
      "per_cmd_90\030\035 \001(\0132\033.apollo.canbus.Wiper_c"
      "md_90\022A\n\024brake_motor_rpt_3_72\030\036 \001(\0132#.ap"
      "ollo.canbus.Brake_motor_rpt_3_72"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 18672);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/canbus/proto/chassis_detail.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fcommon_2fconfigs_2fproto_2fvehicle_5fconfig_2eproto::AddDescriptors();
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::AddDescriptors();
  ::protobuf_modules_2fcanbus_2fproto_2fch_2eproto::AddDescriptors();
  ::protobuf_modules_2fcanbus_2fproto_2fdevkit_2eproto::AddDescriptors();
  ::protobuf_modules_2fcanbus_2fproto_2fge3_2eproto::AddDescriptors();
  ::protobuf_modules_2fcanbus_2fproto_2flexus_2eproto::AddDescriptors();
  ::protobuf_modules_2fcanbus_2fproto_2ftransit_2eproto::AddDescriptors();
  ::protobuf_modules_2fcanbus_2fproto_2fwey_2eproto::AddDescriptors();
  ::protobuf_modules_2fcanbus_2fproto_2fzhongyun_2eproto::AddDescriptors();
  ::protobuf_modules_2fcanbus_2fproto_2fneolix_5fedu_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto
namespace apollo {
namespace canbus {
const ::google::protobuf::EnumDescriptor* ChassisDetail_Type_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[0];
}
bool ChassisDetail_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChassisDetail_Type ChassisDetail::QIRUI_EQ_15;
const ChassisDetail_Type ChassisDetail::CHANGAN_RUICHENG;
const ChassisDetail_Type ChassisDetail::Type_MIN;
const ChassisDetail_Type ChassisDetail::Type_MAX;
const int ChassisDetail::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Light_TurnLightType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[1];
}
bool Light_TurnLightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_TurnLightType Light::TURN_LIGHT_OFF;
const Light_TurnLightType Light::TURN_LEFT_ON;
const Light_TurnLightType Light::TURN_RIGHT_ON;
const Light_TurnLightType Light::TURN_LIGHT_ON;
const Light_TurnLightType Light::TurnLightType_MIN;
const Light_TurnLightType Light::TurnLightType_MAX;
const int Light::TurnLightType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Light_BeamLampType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[2];
}
bool Light_BeamLampType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_BeamLampType Light::BEAM_OFF;
const Light_BeamLampType Light::HIGH_BEAM_ON;
const Light_BeamLampType Light::LOW_BEAM_ON;
const Light_BeamLampType Light::BeamLampType_MIN;
const Light_BeamLampType Light::BeamLampType_MAX;
const int Light::BeamLampType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Light_LincolnLampType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[3];
}
bool Light_LincolnLampType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_LincolnLampType Light::BEAM_NULL;
const Light_LincolnLampType Light::BEAM_FLASH_TO_PASS;
const Light_LincolnLampType Light::BEAM_HIGH;
const Light_LincolnLampType Light::BEAM_INVALID;
const Light_LincolnLampType Light::LincolnLampType_MIN;
const Light_LincolnLampType Light::LincolnLampType_MAX;
const int Light::LincolnLampType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Light_LincolnWiperType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[4];
}
bool Light_LincolnWiperType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_LincolnWiperType Light::WIPER_OFF;
const Light_LincolnWiperType Light::WIPER_AUTO_OFF;
const Light_LincolnWiperType Light::WIPER_OFF_MOVING;
const Light_LincolnWiperType Light::WIPER_MANUAL_OFF;
const Light_LincolnWiperType Light::WIPER_MANUAL_ON;
const Light_LincolnWiperType Light::WIPER_MANUAL_LOW;
const Light_LincolnWiperType Light::WIPER_MANUAL_HIGH;
const Light_LincolnWiperType Light::WIPER_MIST_FLICK;
const Light_LincolnWiperType Light::WIPER_WASH;
const Light_LincolnWiperType Light::WIPER_AUTO_LOW;
const Light_LincolnWiperType Light::WIPER_AUTO_HIGH;
const Light_LincolnWiperType Light::WIPER_COURTESY_WIPE;
const Light_LincolnWiperType Light::WIPER_AUTO_ADJUST;
const Light_LincolnWiperType Light::WIPER_RESERVED;
const Light_LincolnWiperType Light::WIPER_STALLED;
const Light_LincolnWiperType Light::WIPER_NO_DATA;
const Light_LincolnWiperType Light::LincolnWiperType_MIN;
const Light_LincolnWiperType Light::LincolnWiperType_MAX;
const int Light::LincolnWiperType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Light_LincolnAmbientType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[5];
}
bool Light_LincolnAmbientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Light_LincolnAmbientType Light::AMBIENT_DARK;
const Light_LincolnAmbientType Light::AMBIENT_LIGHT;
const Light_LincolnAmbientType Light::AMBIENT_TWILIGHT;
const Light_LincolnAmbientType Light::AMBIENT_TUNNEL_ON;
const Light_LincolnAmbientType Light::AMBIENT_TUNNEL_OFF;
const Light_LincolnAmbientType Light::AMBIENT_INVALID;
const Light_LincolnAmbientType Light::AMBIENT_NO_DATA;
const Light_LincolnAmbientType Light::LincolnAmbientType_MIN;
const Light_LincolnAmbientType Light::LincolnAmbientType_MAX;
const int Light::LincolnAmbientType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_Type_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[6];
}
bool Eps_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_Type Eps::NOT_AVAILABLE;
const Eps_Type Eps::READY;
const Eps_Type Eps::ACTIVE;
const Eps_Type Eps::INVALID;
const Eps_Type Eps::Type_MIN;
const Eps_Type Eps::Type_MAX;
const int Eps::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Brake_HSAStatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[7];
}
bool Brake_HSAStatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Brake_HSAStatusType Brake::HSA_INACTIVE;
const Brake_HSAStatusType Brake::HSA_FINDING_GRADIENT;
const Brake_HSAStatusType Brake::HSA_ACTIVE_PRESSED;
const Brake_HSAStatusType Brake::HSA_ACTIVE_RELEASED;
const Brake_HSAStatusType Brake::HSA_FAST_RELEASE;
const Brake_HSAStatusType Brake::HSA_SLOW_RELEASE;
const Brake_HSAStatusType Brake::HSA_FAILED;
const Brake_HSAStatusType Brake::HSA_UNDEFINED;
const Brake_HSAStatusType Brake::HSAStatusType_MIN;
const Brake_HSAStatusType Brake::HSAStatusType_MAX;
const int Brake::HSAStatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Brake_HSAModeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[8];
}
bool Brake_HSAModeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Brake_HSAModeType Brake::HSA_OFF;
const Brake_HSAModeType Brake::HSA_AUTO;
const Brake_HSAModeType Brake::HSA_MANUAL;
const Brake_HSAModeType Brake::HSA_MODE_UNDEFINED;
const Brake_HSAModeType Brake::HSAModeType_MIN;
const Brake_HSAModeType Brake::HSAModeType_MAX;
const int Brake::HSAModeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Epb_PBrakeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[9];
}
bool Epb_PBrakeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Epb_PBrakeType Epb::PBRAKE_OFF;
const Epb_PBrakeType Epb::PBRAKE_TRANSITION;
const Epb_PBrakeType Epb::PBRAKE_ON;
const Epb_PBrakeType Epb::PBRAKE_FAULT;
const Epb_PBrakeType Epb::PBrakeType_MIN;
const Epb_PBrakeType Epb::PBrakeType_MAX;
const int Epb::PBrakeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ems_Type_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[10];
}
bool Ems_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ems_Type Ems::STOP;
const Ems_Type Ems::CRANK;
const Ems_Type Ems::RUNNING;
const Ems_Type Ems::INVALID;
const Ems_Type Ems::Type_MIN;
const Ems_Type Ems::Type_MAX;
const int Ems::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BasicInfo_Type_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[11];
}
bool BasicInfo_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BasicInfo_Type BasicInfo::OFF;
const BasicInfo_Type BasicInfo::ACC;
const BasicInfo_Type BasicInfo::ON;
const BasicInfo_Type BasicInfo::START;
const BasicInfo_Type BasicInfo::INVALID;
const BasicInfo_Type BasicInfo::Type_MIN;
const BasicInfo_Type BasicInfo::Type_MAX;
const int BasicInfo::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Global_rpt_6a_Pacmod_statusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[12];
}
bool Global_rpt_6a_Pacmod_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Global_rpt_6a_Pacmod_statusType Global_rpt_6a::PACMOD_STATUS_CONTROL_DISABLED;
const Global_rpt_6a_Pacmod_statusType Global_rpt_6a::PACMOD_STATUS_CONTROL_ENABLED;
const Global_rpt_6a_Pacmod_statusType Global_rpt_6a::Pacmod_statusType_MIN;
const Global_rpt_6a_Pacmod_statusType Global_rpt_6a::Pacmod_statusType_MAX;
const int Global_rpt_6a::Pacmod_statusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Global_rpt_6a_Override_statusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[13];
}
bool Global_rpt_6a_Override_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Global_rpt_6a_Override_statusType Global_rpt_6a::OVERRIDE_STATUS_NOT_OVERRIDDEN;
const Global_rpt_6a_Override_statusType Global_rpt_6a::OVERRIDE_STATUS_OVERRIDDEN;
const Global_rpt_6a_Override_statusType Global_rpt_6a::Override_statusType_MIN;
const Global_rpt_6a_Override_statusType Global_rpt_6a::Override_statusType_MAX;
const int Global_rpt_6a::Override_statusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Global_rpt_6a_Brk_can_timeoutType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[14];
}
bool Global_rpt_6a_Brk_can_timeoutType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Global_rpt_6a_Brk_can_timeoutType Global_rpt_6a::BRK_CAN_TIMEOUT_NO_ACTIVE_CAN_TIMEOUT;
const Global_rpt_6a_Brk_can_timeoutType Global_rpt_6a::BRK_CAN_TIMEOUT_ACTIVE_CAN_TIMEOUT;
const Global_rpt_6a_Brk_can_timeoutType Global_rpt_6a::Brk_can_timeoutType_MIN;
const Global_rpt_6a_Brk_can_timeoutType Global_rpt_6a::Brk_can_timeoutType_MAX;
const int Global_rpt_6a::Brk_can_timeoutType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Brake_rpt_6c_Brake_on_offType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[15];
}
bool Brake_rpt_6c_Brake_on_offType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Brake_rpt_6c_Brake_on_offType Brake_rpt_6c::BRAKE_ON_OFF_OFF;
const Brake_rpt_6c_Brake_on_offType Brake_rpt_6c::BRAKE_ON_OFF_ON;
const Brake_rpt_6c_Brake_on_offType Brake_rpt_6c::Brake_on_offType_MIN;
const Brake_rpt_6c_Brake_on_offType Brake_rpt_6c::Brake_on_offType_MAX;
const int Brake_rpt_6c::Brake_on_offType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Headlight_rpt_77_Output_valueType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[16];
}
bool Headlight_rpt_77_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Headlight_rpt_77_Output_valueType Headlight_rpt_77::OUTPUT_VALUE_HEADLIGHTS_OFF;
const Headlight_rpt_77_Output_valueType Headlight_rpt_77::OUTPUT_VALUE_LOW_BEAMS;
const Headlight_rpt_77_Output_valueType Headlight_rpt_77::OUTPUT_VALUE_HIGH_BEAMS;
const Headlight_rpt_77_Output_valueType Headlight_rpt_77::Output_valueType_MIN;
const Headlight_rpt_77_Output_valueType Headlight_rpt_77::Output_valueType_MAX;
const int Headlight_rpt_77::Output_valueType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Headlight_rpt_77_Manual_inputType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[17];
}
bool Headlight_rpt_77_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Headlight_rpt_77_Manual_inputType Headlight_rpt_77::MANUAL_INPUT_HEADLIGHTS_OFF;
const Headlight_rpt_77_Manual_inputType Headlight_rpt_77::MANUAL_INPUT_LOW_BEAMS;
const Headlight_rpt_77_Manual_inputType Headlight_rpt_77::MANUAL_INPUT_HIGH_BEAMS;
const Headlight_rpt_77_Manual_inputType Headlight_rpt_77::Manual_inputType_MIN;
const Headlight_rpt_77_Manual_inputType Headlight_rpt_77::Manual_inputType_MAX;
const int Headlight_rpt_77::Manual_inputType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Headlight_rpt_77_Commanded_valueType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[18];
}
bool Headlight_rpt_77_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Headlight_rpt_77_Commanded_valueType Headlight_rpt_77::COMMANDED_VALUE_HEADLIGHTS_OFF;
const Headlight_rpt_77_Commanded_valueType Headlight_rpt_77::COMMANDED_VALUE_LOW_BEAMS;
const Headlight_rpt_77_Commanded_valueType Headlight_rpt_77::COMMANDED_VALUE_HIGH_BEAMS;
const Headlight_rpt_77_Commanded_valueType Headlight_rpt_77::Commanded_valueType_MIN;
const Headlight_rpt_77_Commanded_valueType Headlight_rpt_77::Commanded_valueType_MAX;
const int Headlight_rpt_77::Commanded_valueType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Turn_cmd_63_Turn_signal_cmdType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[19];
}
bool Turn_cmd_63_Turn_signal_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Turn_cmd_63_Turn_signal_cmdType Turn_cmd_63::TURN_SIGNAL_CMD_RIGHT;
const Turn_cmd_63_Turn_signal_cmdType Turn_cmd_63::TURN_SIGNAL_CMD_NONE;
const Turn_cmd_63_Turn_signal_cmdType Turn_cmd_63::TURN_SIGNAL_CMD_LEFT;
const Turn_cmd_63_Turn_signal_cmdType Turn_cmd_63::TURN_SIGNAL_CMD_HAZARD;
const Turn_cmd_63_Turn_signal_cmdType Turn_cmd_63::Turn_signal_cmdType_MIN;
const Turn_cmd_63_Turn_signal_cmdType Turn_cmd_63::Turn_signal_cmdType_MAX;
const int Turn_cmd_63::Turn_signal_cmdType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Turn_rpt_64_Manual_inputType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[20];
}
bool Turn_rpt_64_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Turn_rpt_64_Manual_inputType Turn_rpt_64::MANUAL_INPUT_RIGHT;
const Turn_rpt_64_Manual_inputType Turn_rpt_64::MANUAL_INPUT_NONE;
const Turn_rpt_64_Manual_inputType Turn_rpt_64::MANUAL_INPUT_LEFT;
const Turn_rpt_64_Manual_inputType Turn_rpt_64::MANUAL_INPUT_HAZARD;
const Turn_rpt_64_Manual_inputType Turn_rpt_64::Manual_inputType_MIN;
const Turn_rpt_64_Manual_inputType Turn_rpt_64::Manual_inputType_MAX;
const int Turn_rpt_64::Manual_inputType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Turn_rpt_64_Commanded_valueType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[21];
}
bool Turn_rpt_64_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Turn_rpt_64_Commanded_valueType Turn_rpt_64::COMMANDED_VALUE_RIGHT;
const Turn_rpt_64_Commanded_valueType Turn_rpt_64::COMMANDED_VALUE_NONE;
const Turn_rpt_64_Commanded_valueType Turn_rpt_64::COMMANDED_VALUE_LEFT;
const Turn_rpt_64_Commanded_valueType Turn_rpt_64::COMMANDED_VALUE_HAZARD;
const Turn_rpt_64_Commanded_valueType Turn_rpt_64::Commanded_valueType_MIN;
const Turn_rpt_64_Commanded_valueType Turn_rpt_64::Commanded_valueType_MAX;
const int Turn_rpt_64::Commanded_valueType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Turn_rpt_64_Output_valueType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[22];
}
bool Turn_rpt_64_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Turn_rpt_64_Output_valueType Turn_rpt_64::OUTPUT_VALUE_RIGHT;
const Turn_rpt_64_Output_valueType Turn_rpt_64::OUTPUT_VALUE_NONE;
const Turn_rpt_64_Output_valueType Turn_rpt_64::OUTPUT_VALUE_LEFT;
const Turn_rpt_64_Output_valueType Turn_rpt_64::OUTPUT_VALUE_HAZARD;
const Turn_rpt_64_Output_valueType Turn_rpt_64::Output_valueType_MIN;
const Turn_rpt_64_Output_valueType Turn_rpt_64::Output_valueType_MAX;
const int Turn_rpt_64::Output_valueType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Shift_cmd_65_Shift_cmdType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[23];
}
bool Shift_cmd_65_Shift_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Shift_cmd_65_Shift_cmdType Shift_cmd_65::SHIFT_CMD_PARK;
const Shift_cmd_65_Shift_cmdType Shift_cmd_65::SHIFT_CMD_REVERSE;
const Shift_cmd_65_Shift_cmdType Shift_cmd_65::SHIFT_CMD_NEUTRAL;
const Shift_cmd_65_Shift_cmdType Shift_cmd_65::SHIFT_CMD_FORWARD;
const Shift_cmd_65_Shift_cmdType Shift_cmd_65::SHIFT_CMD_LOW;
const Shift_cmd_65_Shift_cmdType Shift_cmd_65::Shift_cmdType_MIN;
const Shift_cmd_65_Shift_cmdType Shift_cmd_65::Shift_cmdType_MAX;
const int Shift_cmd_65::Shift_cmdType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Shift_rpt_66_Manual_inputType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[24];
}
bool Shift_rpt_66_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Shift_rpt_66_Manual_inputType Shift_rpt_66::MANUAL_INPUT_PARK;
const Shift_rpt_66_Manual_inputType Shift_rpt_66::MANUAL_INPUT_REVERSE;
const Shift_rpt_66_Manual_inputType Shift_rpt_66::MANUAL_INPUT_NEUTRAL;
const Shift_rpt_66_Manual_inputType Shift_rpt_66::MANUAL_INPUT_FORWARD;
const Shift_rpt_66_Manual_inputType Shift_rpt_66::MANUAL_INPUT_HIGH;
const Shift_rpt_66_Manual_inputType Shift_rpt_66::Manual_inputType_MIN;
const Shift_rpt_66_Manual_inputType Shift_rpt_66::Manual_inputType_MAX;
const int Shift_rpt_66::Manual_inputType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Shift_rpt_66_Commanded_valueType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[25];
}
bool Shift_rpt_66_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Shift_rpt_66_Commanded_valueType Shift_rpt_66::COMMANDED_VALUE_PARK;
const Shift_rpt_66_Commanded_valueType Shift_rpt_66::COMMANDED_VALUE_REVERSE;
const Shift_rpt_66_Commanded_valueType Shift_rpt_66::COMMANDED_VALUE_NEUTRAL;
const Shift_rpt_66_Commanded_valueType Shift_rpt_66::COMMANDED_VALUE_FORWARD;
const Shift_rpt_66_Commanded_valueType Shift_rpt_66::COMMANDED_VALUE_HIGH;
const Shift_rpt_66_Commanded_valueType Shift_rpt_66::Commanded_valueType_MIN;
const Shift_rpt_66_Commanded_valueType Shift_rpt_66::Commanded_valueType_MAX;
const int Shift_rpt_66::Commanded_valueType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Shift_rpt_66_Output_valueType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[26];
}
bool Shift_rpt_66_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Shift_rpt_66_Output_valueType Shift_rpt_66::OUTPUT_VALUE_PARK;
const Shift_rpt_66_Output_valueType Shift_rpt_66::OUTPUT_VALUE_REVERSE;
const Shift_rpt_66_Output_valueType Shift_rpt_66::OUTPUT_VALUE_NEUTRAL;
const Shift_rpt_66_Output_valueType Shift_rpt_66::OUTPUT_VALUE_FORWARD;
const Shift_rpt_66_Output_valueType Shift_rpt_66::OUTPUT_VALUE_HIGH;
const Shift_rpt_66_Output_valueType Shift_rpt_66::Output_valueType_MIN;
const Shift_rpt_66_Output_valueType Shift_rpt_66::Output_valueType_MAX;
const int Shift_rpt_66::Output_valueType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Global_cmd_69_Pacmod_enableType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[27];
}
bool Global_cmd_69_Pacmod_enableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Global_cmd_69_Pacmod_enableType Global_cmd_69::PACMOD_ENABLE_CONTROL_DISABLED;
const Global_cmd_69_Pacmod_enableType Global_cmd_69::PACMOD_ENABLE_CONTROL_ENABLED;
const Global_cmd_69_Pacmod_enableType Global_cmd_69::Pacmod_enableType_MIN;
const Global_cmd_69_Pacmod_enableType Global_cmd_69::Pacmod_enableType_MAX;
const int Global_cmd_69::Pacmod_enableType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Global_cmd_69_Clear_overrideType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[28];
}
bool Global_cmd_69_Clear_overrideType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Global_cmd_69_Clear_overrideType Global_cmd_69::CLEAR_OVERRIDE_DON_T_CLEAR_ACTIVE_OVERRIDES;
const Global_cmd_69_Clear_overrideType Global_cmd_69::CLEAR_OVERRIDE_CLEAR_ACTIVE_OVERRIDES;
const Global_cmd_69_Clear_overrideType Global_cmd_69::Clear_overrideType_MIN;
const Global_cmd_69_Clear_overrideType Global_cmd_69::Clear_overrideType_MAX;
const int Global_cmd_69::Clear_overrideType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Global_cmd_69_Ignore_overrideType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[29];
}
bool Global_cmd_69_Ignore_overrideType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Global_cmd_69_Ignore_overrideType Global_cmd_69::IGNORE_OVERRIDE_DON_T_IGNORE_USER_OVERRIDES;
const Global_cmd_69_Ignore_overrideType Global_cmd_69::IGNORE_OVERRIDE_IGNORE_USER_OVERRIDES;
const Global_cmd_69_Ignore_overrideType Global_cmd_69::Ignore_overrideType_MIN;
const Global_cmd_69_Ignore_overrideType Global_cmd_69::Ignore_overrideType_MAX;
const int Global_cmd_69::Ignore_overrideType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Parking_brake_status_rpt_80_Parking_brake_enabledType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[30];
}
bool Parking_brake_status_rpt_80_Parking_brake_enabledType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Parking_brake_status_rpt_80_Parking_brake_enabledType Parking_brake_status_rpt_80::PARKING_BRAKE_ENABLED_OFF;
const Parking_brake_status_rpt_80_Parking_brake_enabledType Parking_brake_status_rpt_80::PARKING_BRAKE_ENABLED_ON;
const Parking_brake_status_rpt_80_Parking_brake_enabledType Parking_brake_status_rpt_80::Parking_brake_enabledType_MIN;
const Parking_brake_status_rpt_80_Parking_brake_enabledType Parking_brake_status_rpt_80::Parking_brake_enabledType_MAX;
const int Parking_brake_status_rpt_80::Parking_brake_enabledType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Horn_rpt_79_Output_valueType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[31];
}
bool Horn_rpt_79_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Horn_rpt_79_Output_valueType Horn_rpt_79::OUTPUT_VALUE_OFF;
const Horn_rpt_79_Output_valueType Horn_rpt_79::OUTPUT_VALUE_ON;
const Horn_rpt_79_Output_valueType Horn_rpt_79::Output_valueType_MIN;
const Horn_rpt_79_Output_valueType Horn_rpt_79::Output_valueType_MAX;
const int Horn_rpt_79::Output_valueType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Horn_rpt_79_Commanded_valueType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[32];
}
bool Horn_rpt_79_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Horn_rpt_79_Commanded_valueType Horn_rpt_79::COMMANDED_VALUE_OFF;
const Horn_rpt_79_Commanded_valueType Horn_rpt_79::COMMANDED_VALUE_ON;
const Horn_rpt_79_Commanded_valueType Horn_rpt_79::Commanded_valueType_MIN;
const Horn_rpt_79_Commanded_valueType Horn_rpt_79::Commanded_valueType_MAX;
const int Horn_rpt_79::Commanded_valueType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Horn_rpt_79_Manual_inputType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[33];
}
bool Horn_rpt_79_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Horn_rpt_79_Manual_inputType Horn_rpt_79::MANUAL_INPUT_OFF;
const Horn_rpt_79_Manual_inputType Horn_rpt_79::MANUAL_INPUT_ON;
const Horn_rpt_79_Manual_inputType Horn_rpt_79::Manual_inputType_MIN;
const Horn_rpt_79_Manual_inputType Horn_rpt_79::Manual_inputType_MAX;
const int Horn_rpt_79::Manual_inputType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Horn_cmd_78_Horn_cmdType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[34];
}
bool Horn_cmd_78_Horn_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Horn_cmd_78_Horn_cmdType Horn_cmd_78::HORN_CMD_OFF;
const Horn_cmd_78_Horn_cmdType Horn_cmd_78::HORN_CMD_ON;
const Horn_cmd_78_Horn_cmdType Horn_cmd_78::Horn_cmdType_MIN;
const Horn_cmd_78_Horn_cmdType Horn_cmd_78::Horn_cmdType_MAX;
const int Horn_cmd_78::Horn_cmdType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Wiper_rpt_91_Output_valueType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[35];
}
bool Wiper_rpt_91_Output_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_WIPERS_OFF;
const Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_INTERMITTENT_1;
const Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_INTERMITTENT_2;
const Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_INTERMITTENT_3;
const Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_INTERMITTENT_4;
const Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_INTERMITTENT_5;
const Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_LOW;
const Wiper_rpt_91_Output_valueType Wiper_rpt_91::OUTPUT_VALUE_HIGH;
const Wiper_rpt_91_Output_valueType Wiper_rpt_91::Output_valueType_MIN;
const Wiper_rpt_91_Output_valueType Wiper_rpt_91::Output_valueType_MAX;
const int Wiper_rpt_91::Output_valueType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Wiper_rpt_91_Commanded_valueType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[36];
}
bool Wiper_rpt_91_Commanded_valueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_WIPERS_OFF;
const Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_INTERMITTENT_1;
const Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_INTERMITTENT_2;
const Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_INTERMITTENT_3;
const Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_INTERMITTENT_4;
const Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_INTERMITTENT_5;
const Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_LOW;
const Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::COMMANDED_VALUE_HIGH;
const Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::Commanded_valueType_MIN;
const Wiper_rpt_91_Commanded_valueType Wiper_rpt_91::Commanded_valueType_MAX;
const int Wiper_rpt_91::Commanded_valueType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Wiper_rpt_91_Manual_inputType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[37];
}
bool Wiper_rpt_91_Manual_inputType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_WIPERS_OFF;
const Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_INTERMITTENT_1;
const Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_INTERMITTENT_2;
const Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_INTERMITTENT_3;
const Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_INTERMITTENT_4;
const Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_INTERMITTENT_5;
const Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_LOW;
const Wiper_rpt_91_Manual_inputType Wiper_rpt_91::MANUAL_INPUT_HIGH;
const Wiper_rpt_91_Manual_inputType Wiper_rpt_91::Manual_inputType_MIN;
const Wiper_rpt_91_Manual_inputType Wiper_rpt_91::Manual_inputType_MAX;
const int Wiper_rpt_91::Manual_inputType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Vehicle_speed_rpt_6f_Vehicle_speed_validType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[38];
}
bool Vehicle_speed_rpt_6f_Vehicle_speed_validType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Vehicle_speed_rpt_6f_Vehicle_speed_validType Vehicle_speed_rpt_6f::VEHICLE_SPEED_VALID_INVALID;
const Vehicle_speed_rpt_6f_Vehicle_speed_validType Vehicle_speed_rpt_6f::VEHICLE_SPEED_VALID_VALID;
const Vehicle_speed_rpt_6f_Vehicle_speed_validType Vehicle_speed_rpt_6f::Vehicle_speed_validType_MIN;
const Vehicle_speed_rpt_6f_Vehicle_speed_validType Vehicle_speed_rpt_6f::Vehicle_speed_validType_MAX;
const int Vehicle_speed_rpt_6f::Vehicle_speed_validType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Headlight_cmd_76_Headlight_cmdType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[39];
}
bool Headlight_cmd_76_Headlight_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Headlight_cmd_76_Headlight_cmdType Headlight_cmd_76::HEADLIGHT_CMD_HEADLIGHTS_OFF;
const Headlight_cmd_76_Headlight_cmdType Headlight_cmd_76::HEADLIGHT_CMD_LOW_BEAMS;
const Headlight_cmd_76_Headlight_cmdType Headlight_cmd_76::HEADLIGHT_CMD_HIGH_BEAMS;
const Headlight_cmd_76_Headlight_cmdType Headlight_cmd_76::Headlight_cmdType_MIN;
const Headlight_cmd_76_Headlight_cmdType Headlight_cmd_76::Headlight_cmdType_MAX;
const int Headlight_cmd_76::Headlight_cmdType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Wiper_cmd_90_Wiper_cmdType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_enum_descriptors[40];
}
bool Wiper_cmd_90_Wiper_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_WIPERS_OFF;
const Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_INTERMITTENT_1;
const Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_INTERMITTENT_2;
const Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_INTERMITTENT_3;
const Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_INTERMITTENT_4;
const Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_INTERMITTENT_5;
const Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_LOW;
const Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::WIPER_CMD_HIGH;
const Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::Wiper_cmdType_MIN;
const Wiper_cmd_90_Wiper_cmdType Wiper_cmd_90::Wiper_cmdType_MAX;
const int Wiper_cmd_90::Wiper_cmdType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ChassisDetail::InitAsDefaultInstance() {
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->basic_ = const_cast< ::apollo::canbus::BasicInfo*>(
      ::apollo::canbus::BasicInfo::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->safety_ = const_cast< ::apollo::canbus::Safety*>(
      ::apollo::canbus::Safety::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->gear_ = const_cast< ::apollo::canbus::Gear*>(
      ::apollo::canbus::Gear::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->ems_ = const_cast< ::apollo::canbus::Ems*>(
      ::apollo::canbus::Ems::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->esp_ = const_cast< ::apollo::canbus::Esp*>(
      ::apollo::canbus::Esp::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->gas_ = const_cast< ::apollo::canbus::Gas*>(
      ::apollo::canbus::Gas::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->epb_ = const_cast< ::apollo::canbus::Epb*>(
      ::apollo::canbus::Epb::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->brake_ = const_cast< ::apollo::canbus::Brake*>(
      ::apollo::canbus::Brake::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->deceleration_ = const_cast< ::apollo::canbus::Deceleration*>(
      ::apollo::canbus::Deceleration::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->vehicle_spd_ = const_cast< ::apollo::canbus::VehicleSpd*>(
      ::apollo::canbus::VehicleSpd::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->eps_ = const_cast< ::apollo::canbus::Eps*>(
      ::apollo::canbus::Eps::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->light_ = const_cast< ::apollo::canbus::Light*>(
      ::apollo::canbus::Light::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->battery_ = const_cast< ::apollo::canbus::Battery*>(
      ::apollo::canbus::Battery::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->check_response_ = const_cast< ::apollo::canbus::CheckResponseSignal*>(
      ::apollo::canbus::CheckResponseSignal::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->license_ = const_cast< ::apollo::canbus::License*>(
      ::apollo::canbus::License::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->surround_ = const_cast< ::apollo::canbus::Surround*>(
      ::apollo::canbus::Surround::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->gem_ = const_cast< ::apollo::canbus::Gem*>(
      ::apollo::canbus::Gem::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->lexus_ = const_cast< ::apollo::canbus::Lexus*>(
      ::apollo::canbus::Lexus::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->transit_ = const_cast< ::apollo::canbus::Transit*>(
      ::apollo::canbus::Transit::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->ge3_ = const_cast< ::apollo::canbus::Ge3*>(
      ::apollo::canbus::Ge3::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->wey_ = const_cast< ::apollo::canbus::Wey*>(
      ::apollo::canbus::Wey::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->zhongyun_ = const_cast< ::apollo::canbus::Zhongyun*>(
      ::apollo::canbus::Zhongyun::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->ch_ = const_cast< ::apollo::canbus::Ch*>(
      ::apollo::canbus::Ch::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->devkit_ = const_cast< ::apollo::canbus::Devkit*>(
      ::apollo::canbus::Devkit::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->neolix_edu_ = const_cast< ::apollo::canbus::Neolix_edu*>(
      ::apollo::canbus::Neolix_edu::internal_default_instance());
  ::apollo::canbus::_ChassisDetail_default_instance_._instance.get_mutable()->vehicle_id_ = const_cast< ::apollo::common::VehicleID*>(
      ::apollo::common::VehicleID::internal_default_instance());
}
void ChassisDetail::clear_license() {
  if (license_ != NULL) license_->Clear();
  clear_has_license();
}
void ChassisDetail::clear_surround() {
  if (surround_ != NULL) surround_->Clear();
  clear_has_surround();
}
void ChassisDetail::clear_lexus() {
  if (lexus_ != NULL) lexus_->Clear();
  clear_has_lexus();
}
void ChassisDetail::clear_transit() {
  if (transit_ != NULL) transit_->Clear();
  clear_has_transit();
}
void ChassisDetail::clear_ge3() {
  if (ge3_ != NULL) ge3_->Clear();
  clear_has_ge3();
}
void ChassisDetail::clear_wey() {
  if (wey_ != NULL) wey_->Clear();
  clear_has_wey();
}
void ChassisDetail::clear_zhongyun() {
  if (zhongyun_ != NULL) zhongyun_->Clear();
  clear_has_zhongyun();
}
void ChassisDetail::clear_ch() {
  if (ch_ != NULL) ch_->Clear();
  clear_has_ch();
}
void ChassisDetail::clear_devkit() {
  if (devkit_ != NULL) devkit_->Clear();
  clear_has_devkit();
}
void ChassisDetail::clear_neolix_edu() {
  if (neolix_edu_ != NULL) neolix_edu_->Clear();
  clear_has_neolix_edu();
}
void ChassisDetail::clear_vehicle_id() {
  if (vehicle_id_ != NULL) vehicle_id_->Clear();
  clear_has_vehicle_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChassisDetail::kCarTypeFieldNumber;
const int ChassisDetail::kBasicFieldNumber;
const int ChassisDetail::kSafetyFieldNumber;
const int ChassisDetail::kGearFieldNumber;
const int ChassisDetail::kEmsFieldNumber;
const int ChassisDetail::kEspFieldNumber;
const int ChassisDetail::kGasFieldNumber;
const int ChassisDetail::kEpbFieldNumber;
const int ChassisDetail::kBrakeFieldNumber;
const int ChassisDetail::kDecelerationFieldNumber;
const int ChassisDetail::kVehicleSpdFieldNumber;
const int ChassisDetail::kEpsFieldNumber;
const int ChassisDetail::kLightFieldNumber;
const int ChassisDetail::kBatteryFieldNumber;
const int ChassisDetail::kCheckResponseFieldNumber;
const int ChassisDetail::kLicenseFieldNumber;
const int ChassisDetail::kSurroundFieldNumber;
const int ChassisDetail::kGemFieldNumber;
const int ChassisDetail::kLexusFieldNumber;
const int ChassisDetail::kTransitFieldNumber;
const int ChassisDetail::kGe3FieldNumber;
const int ChassisDetail::kWeyFieldNumber;
const int ChassisDetail::kZhongyunFieldNumber;
const int ChassisDetail::kChFieldNumber;
const int ChassisDetail::kDevkitFieldNumber;
const int ChassisDetail::kNeolixEduFieldNumber;
const int ChassisDetail::kVehicleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChassisDetail::ChassisDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_ChassisDetail.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.ChassisDetail)
}
ChassisDetail::ChassisDetail(const ChassisDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_basic()) {
    basic_ = new ::apollo::canbus::BasicInfo(*from.basic_);
  } else {
    basic_ = NULL;
  }
  if (from.has_safety()) {
    safety_ = new ::apollo::canbus::Safety(*from.safety_);
  } else {
    safety_ = NULL;
  }
  if (from.has_gear()) {
    gear_ = new ::apollo::canbus::Gear(*from.gear_);
  } else {
    gear_ = NULL;
  }
  if (from.has_ems()) {
    ems_ = new ::apollo::canbus::Ems(*from.ems_);
  } else {
    ems_ = NULL;
  }
  if (from.has_esp()) {
    esp_ = new ::apollo::canbus::Esp(*from.esp_);
  } else {
    esp_ = NULL;
  }
  if (from.has_gas()) {
    gas_ = new ::apollo::canbus::Gas(*from.gas_);
  } else {
    gas_ = NULL;
  }
  if (from.has_epb()) {
    epb_ = new ::apollo::canbus::Epb(*from.epb_);
  } else {
    epb_ = NULL;
  }
  if (from.has_brake()) {
    brake_ = new ::apollo::canbus::Brake(*from.brake_);
  } else {
    brake_ = NULL;
  }
  if (from.has_deceleration()) {
    deceleration_ = new ::apollo::canbus::Deceleration(*from.deceleration_);
  } else {
    deceleration_ = NULL;
  }
  if (from.has_vehicle_spd()) {
    vehicle_spd_ = new ::apollo::canbus::VehicleSpd(*from.vehicle_spd_);
  } else {
    vehicle_spd_ = NULL;
  }
  if (from.has_eps()) {
    eps_ = new ::apollo::canbus::Eps(*from.eps_);
  } else {
    eps_ = NULL;
  }
  if (from.has_light()) {
    light_ = new ::apollo::canbus::Light(*from.light_);
  } else {
    light_ = NULL;
  }
  if (from.has_battery()) {
    battery_ = new ::apollo::canbus::Battery(*from.battery_);
  } else {
    battery_ = NULL;
  }
  if (from.has_check_response()) {
    check_response_ = new ::apollo::canbus::CheckResponseSignal(*from.check_response_);
  } else {
    check_response_ = NULL;
  }
  if (from.has_license()) {
    license_ = new ::apollo::canbus::License(*from.license_);
  } else {
    license_ = NULL;
  }
  if (from.has_surround()) {
    surround_ = new ::apollo::canbus::Surround(*from.surround_);
  } else {
    surround_ = NULL;
  }
  if (from.has_gem()) {
    gem_ = new ::apollo::canbus::Gem(*from.gem_);
  } else {
    gem_ = NULL;
  }
  if (from.has_lexus()) {
    lexus_ = new ::apollo::canbus::Lexus(*from.lexus_);
  } else {
    lexus_ = NULL;
  }
  if (from.has_transit()) {
    transit_ = new ::apollo::canbus::Transit(*from.transit_);
  } else {
    transit_ = NULL;
  }
  if (from.has_ge3()) {
    ge3_ = new ::apollo::canbus::Ge3(*from.ge3_);
  } else {
    ge3_ = NULL;
  }
  if (from.has_wey()) {
    wey_ = new ::apollo::canbus::Wey(*from.wey_);
  } else {
    wey_ = NULL;
  }
  if (from.has_zhongyun()) {
    zhongyun_ = new ::apollo::canbus::Zhongyun(*from.zhongyun_);
  } else {
    zhongyun_ = NULL;
  }
  if (from.has_ch()) {
    ch_ = new ::apollo::canbus::Ch(*from.ch_);
  } else {
    ch_ = NULL;
  }
  if (from.has_devkit()) {
    devkit_ = new ::apollo::canbus::Devkit(*from.devkit_);
  } else {
    devkit_ = NULL;
  }
  if (from.has_neolix_edu()) {
    neolix_edu_ = new ::apollo::canbus::Neolix_edu(*from.neolix_edu_);
  } else {
    neolix_edu_ = NULL;
  }
  if (from.has_vehicle_id()) {
    vehicle_id_ = new ::apollo::common::VehicleID(*from.vehicle_id_);
  } else {
    vehicle_id_ = NULL;
  }
  car_type_ = from.car_type_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.ChassisDetail)
}

void ChassisDetail::SharedCtor() {
  ::memset(&basic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&car_type_) -
      reinterpret_cast<char*>(&basic_)) + sizeof(car_type_));
}

ChassisDetail::~ChassisDetail() {
  // @@protoc_insertion_point(destructor:apollo.canbus.ChassisDetail)
  SharedDtor();
}

void ChassisDetail::SharedDtor() {
  if (this != internal_default_instance()) delete basic_;
  if (this != internal_default_instance()) delete safety_;
  if (this != internal_default_instance()) delete gear_;
  if (this != internal_default_instance()) delete ems_;
  if (this != internal_default_instance()) delete esp_;
  if (this != internal_default_instance()) delete gas_;
  if (this != internal_default_instance()) delete epb_;
  if (this != internal_default_instance()) delete brake_;
  if (this != internal_default_instance()) delete deceleration_;
  if (this != internal_default_instance()) delete vehicle_spd_;
  if (this != internal_default_instance()) delete eps_;
  if (this != internal_default_instance()) delete light_;
  if (this != internal_default_instance()) delete battery_;
  if (this != internal_default_instance()) delete check_response_;
  if (this != internal_default_instance()) delete license_;
  if (this != internal_default_instance()) delete surround_;
  if (this != internal_default_instance()) delete gem_;
  if (this != internal_default_instance()) delete lexus_;
  if (this != internal_default_instance()) delete transit_;
  if (this != internal_default_instance()) delete ge3_;
  if (this != internal_default_instance()) delete wey_;
  if (this != internal_default_instance()) delete zhongyun_;
  if (this != internal_default_instance()) delete ch_;
  if (this != internal_default_instance()) delete devkit_;
  if (this != internal_default_instance()) delete neolix_edu_;
  if (this != internal_default_instance()) delete vehicle_id_;
}

void ChassisDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChassisDetail::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChassisDetail& ChassisDetail::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_ChassisDetail.base);
  return *internal_default_instance();
}


void ChassisDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.ChassisDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(basic_ != NULL);
      basic_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(safety_ != NULL);
      safety_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(gear_ != NULL);
      gear_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ems_ != NULL);
      ems_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(esp_ != NULL);
      esp_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(gas_ != NULL);
      gas_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(epb_ != NULL);
      epb_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(brake_ != NULL);
      brake_->Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(deceleration_ != NULL);
      deceleration_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(vehicle_spd_ != NULL);
      vehicle_spd_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(eps_ != NULL);
      eps_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(light_ != NULL);
      light_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(battery_ != NULL);
      battery_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(check_response_ != NULL);
      check_response_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(license_ != NULL);
      license_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(surround_ != NULL);
      surround_->Clear();
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(gem_ != NULL);
      gem_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(lexus_ != NULL);
      lexus_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(transit_ != NULL);
      transit_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(ge3_ != NULL);
      ge3_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(wey_ != NULL);
      wey_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(zhongyun_ != NULL);
      zhongyun_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(ch_ != NULL);
      ch_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(devkit_ != NULL);
      devkit_->Clear();
    }
  }
  if (cached_has_bits & 50331648u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(neolix_edu_ != NULL);
      neolix_edu_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(vehicle_id_ != NULL);
      vehicle_id_->Clear();
    }
  }
  car_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChassisDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.ChassisDetail)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.ChassisDetail.Type car_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::ChassisDetail_Type_IsValid(value)) {
            set_car_type(static_cast< ::apollo::canbus::ChassisDetail_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.BasicInfo basic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_basic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Safety safety = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_safety()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Gear gear = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Ems ems = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ems()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Esp esp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_esp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Gas gas = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Epb epb = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_epb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Brake brake = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brake()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Deceleration deceleration = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.VehicleSpd vehicle_spd = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_spd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Eps eps = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_eps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Light light = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Battery battery = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_battery()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.CheckResponseSignal check_response = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_check_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.License license = 16 [deprecated = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_license()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Surround surround = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_surround()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Gem gem = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Lexus lexus = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lexus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Transit transit = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Ge3 ge3 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ge3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Wey wey = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Zhongyun zhongyun = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_zhongyun()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Ch ch = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Devkit devkit = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_devkit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Neolix_edu neolix_edu = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_neolix_edu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.VehicleID vehicle_id = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.ChassisDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.ChassisDetail)
  return false;
#undef DO_
}

void ChassisDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.ChassisDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.ChassisDetail.Type car_type = 1;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->car_type(), output);
  }

  // optional .apollo.canbus.BasicInfo basic = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_basic(), output);
  }

  // optional .apollo.canbus.Safety safety = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_safety(), output);
  }

  // optional .apollo.canbus.Gear gear = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_gear(), output);
  }

  // optional .apollo.canbus.Ems ems = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_ems(), output);
  }

  // optional .apollo.canbus.Esp esp = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_esp(), output);
  }

  // optional .apollo.canbus.Gas gas = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_gas(), output);
  }

  // optional .apollo.canbus.Epb epb = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_epb(), output);
  }

  // optional .apollo.canbus.Brake brake = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_brake(), output);
  }

  // optional .apollo.canbus.Deceleration deceleration = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_deceleration(), output);
  }

  // optional .apollo.canbus.VehicleSpd vehicle_spd = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_vehicle_spd(), output);
  }

  // optional .apollo.canbus.Eps eps = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_eps(), output);
  }

  // optional .apollo.canbus.Light light = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_light(), output);
  }

  // optional .apollo.canbus.Battery battery = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_battery(), output);
  }

  // optional .apollo.canbus.CheckResponseSignal check_response = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_check_response(), output);
  }

  // optional .apollo.canbus.License license = 16 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_license(), output);
  }

  // optional .apollo.canbus.Surround surround = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_surround(), output);
  }

  // optional .apollo.canbus.Gem gem = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_internal_gem(), output);
  }

  // optional .apollo.canbus.Lexus lexus = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_lexus(), output);
  }

  // optional .apollo.canbus.Transit transit = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_transit(), output);
  }

  // optional .apollo.canbus.Ge3 ge3 = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_ge3(), output);
  }

  // optional .apollo.canbus.Wey wey = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_internal_wey(), output);
  }

  // optional .apollo.canbus.Zhongyun zhongyun = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->_internal_zhongyun(), output);
  }

  // optional .apollo.canbus.Ch ch = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->_internal_ch(), output);
  }

  // optional .apollo.canbus.Devkit devkit = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->_internal_devkit(), output);
  }

  // optional .apollo.canbus.Neolix_edu neolix_edu = 26;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->_internal_neolix_edu(), output);
  }

  // optional .apollo.common.VehicleID vehicle_id = 101;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->_internal_vehicle_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.ChassisDetail)
}

::google::protobuf::uint8* ChassisDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.ChassisDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.ChassisDetail.Type car_type = 1;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->car_type(), target);
  }

  // optional .apollo.canbus.BasicInfo basic = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_basic(), deterministic, target);
  }

  // optional .apollo.canbus.Safety safety = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_safety(), deterministic, target);
  }

  // optional .apollo.canbus.Gear gear = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_gear(), deterministic, target);
  }

  // optional .apollo.canbus.Ems ems = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_ems(), deterministic, target);
  }

  // optional .apollo.canbus.Esp esp = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_esp(), deterministic, target);
  }

  // optional .apollo.canbus.Gas gas = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_gas(), deterministic, target);
  }

  // optional .apollo.canbus.Epb epb = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_epb(), deterministic, target);
  }

  // optional .apollo.canbus.Brake brake = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_brake(), deterministic, target);
  }

  // optional .apollo.canbus.Deceleration deceleration = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_deceleration(), deterministic, target);
  }

  // optional .apollo.canbus.VehicleSpd vehicle_spd = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_vehicle_spd(), deterministic, target);
  }

  // optional .apollo.canbus.Eps eps = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_eps(), deterministic, target);
  }

  // optional .apollo.canbus.Light light = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_light(), deterministic, target);
  }

  // optional .apollo.canbus.Battery battery = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_battery(), deterministic, target);
  }

  // optional .apollo.canbus.CheckResponseSignal check_response = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_check_response(), deterministic, target);
  }

  // optional .apollo.canbus.License license = 16 [deprecated = true];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_license(), deterministic, target);
  }

  // optional .apollo.canbus.Surround surround = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_surround(), deterministic, target);
  }

  // optional .apollo.canbus.Gem gem = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->_internal_gem(), deterministic, target);
  }

  // optional .apollo.canbus.Lexus lexus = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_lexus(), deterministic, target);
  }

  // optional .apollo.canbus.Transit transit = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_transit(), deterministic, target);
  }

  // optional .apollo.canbus.Ge3 ge3 = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_ge3(), deterministic, target);
  }

  // optional .apollo.canbus.Wey wey = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->_internal_wey(), deterministic, target);
  }

  // optional .apollo.canbus.Zhongyun zhongyun = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->_internal_zhongyun(), deterministic, target);
  }

  // optional .apollo.canbus.Ch ch = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->_internal_ch(), deterministic, target);
  }

  // optional .apollo.canbus.Devkit devkit = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->_internal_devkit(), deterministic, target);
  }

  // optional .apollo.canbus.Neolix_edu neolix_edu = 26;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, this->_internal_neolix_edu(), deterministic, target);
  }

  // optional .apollo.common.VehicleID vehicle_id = 101;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        101, this->_internal_vehicle_id(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.ChassisDetail)
  return target;
}

size_t ChassisDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.ChassisDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.canbus.BasicInfo basic = 2;
    if (has_basic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *basic_);
    }

    // optional .apollo.canbus.Safety safety = 3;
    if (has_safety()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *safety_);
    }

    // optional .apollo.canbus.Gear gear = 4;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gear_);
    }

    // optional .apollo.canbus.Ems ems = 5;
    if (has_ems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ems_);
    }

    // optional .apollo.canbus.Esp esp = 6;
    if (has_esp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *esp_);
    }

    // optional .apollo.canbus.Gas gas = 7;
    if (has_gas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gas_);
    }

    // optional .apollo.canbus.Epb epb = 8;
    if (has_epb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *epb_);
    }

    // optional .apollo.canbus.Brake brake = 9;
    if (has_brake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *brake_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .apollo.canbus.Deceleration deceleration = 10;
    if (has_deceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *deceleration_);
    }

    // optional .apollo.canbus.VehicleSpd vehicle_spd = 11;
    if (has_vehicle_spd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vehicle_spd_);
    }

    // optional .apollo.canbus.Eps eps = 12;
    if (has_eps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *eps_);
    }

    // optional .apollo.canbus.Light light = 13;
    if (has_light()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *light_);
    }

    // optional .apollo.canbus.Battery battery = 14;
    if (has_battery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *battery_);
    }

    // optional .apollo.canbus.CheckResponseSignal check_response = 15;
    if (has_check_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *check_response_);
    }

    // optional .apollo.canbus.License license = 16 [deprecated = true];
    if (has_license()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *license_);
    }

    // optional .apollo.canbus.Surround surround = 17;
    if (has_surround()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *surround_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .apollo.canbus.Gem gem = 18;
    if (has_gem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gem_);
    }

    // optional .apollo.canbus.Lexus lexus = 19;
    if (has_lexus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lexus_);
    }

    // optional .apollo.canbus.Transit transit = 20;
    if (has_transit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transit_);
    }

    // optional .apollo.canbus.Ge3 ge3 = 21;
    if (has_ge3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ge3_);
    }

    // optional .apollo.canbus.Wey wey = 22;
    if (has_wey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *wey_);
    }

    // optional .apollo.canbus.Zhongyun zhongyun = 23;
    if (has_zhongyun()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *zhongyun_);
    }

    // optional .apollo.canbus.Ch ch = 24;
    if (has_ch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ch_);
    }

    // optional .apollo.canbus.Devkit devkit = 25;
    if (has_devkit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *devkit_);
    }

  }
  if (_has_bits_[24 / 32] & 117440512u) {
    // optional .apollo.canbus.Neolix_edu neolix_edu = 26;
    if (has_neolix_edu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *neolix_edu_);
    }

    // optional .apollo.common.VehicleID vehicle_id = 101;
    if (has_vehicle_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vehicle_id_);
    }

    // optional .apollo.canbus.ChassisDetail.Type car_type = 1;
    if (has_car_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->car_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChassisDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.ChassisDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const ChassisDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChassisDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.ChassisDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.ChassisDetail)
    MergeFrom(*source);
  }
}

void ChassisDetail::MergeFrom(const ChassisDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.ChassisDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_basic()->::apollo::canbus::BasicInfo::MergeFrom(from.basic());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_safety()->::apollo::canbus::Safety::MergeFrom(from.safety());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_gear()->::apollo::canbus::Gear::MergeFrom(from.gear());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_ems()->::apollo::canbus::Ems::MergeFrom(from.ems());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_esp()->::apollo::canbus::Esp::MergeFrom(from.esp());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_gas()->::apollo::canbus::Gas::MergeFrom(from.gas());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_epb()->::apollo::canbus::Epb::MergeFrom(from.epb());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_brake()->::apollo::canbus::Brake::MergeFrom(from.brake());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_deceleration()->::apollo::canbus::Deceleration::MergeFrom(from.deceleration());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_vehicle_spd()->::apollo::canbus::VehicleSpd::MergeFrom(from.vehicle_spd());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_eps()->::apollo::canbus::Eps::MergeFrom(from.eps());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_light()->::apollo::canbus::Light::MergeFrom(from.light());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_battery()->::apollo::canbus::Battery::MergeFrom(from.battery());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_check_response()->::apollo::canbus::CheckResponseSignal::MergeFrom(from.check_response());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_license()->::apollo::canbus::License::MergeFrom(from.license());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_surround()->::apollo::canbus::Surround::MergeFrom(from.surround());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_gem()->::apollo::canbus::Gem::MergeFrom(from.gem());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_lexus()->::apollo::canbus::Lexus::MergeFrom(from.lexus());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_transit()->::apollo::canbus::Transit::MergeFrom(from.transit());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_ge3()->::apollo::canbus::Ge3::MergeFrom(from.ge3());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_wey()->::apollo::canbus::Wey::MergeFrom(from.wey());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_zhongyun()->::apollo::canbus::Zhongyun::MergeFrom(from.zhongyun());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_ch()->::apollo::canbus::Ch::MergeFrom(from.ch());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_devkit()->::apollo::canbus::Devkit::MergeFrom(from.devkit());
    }
  }
  if (cached_has_bits & 117440512u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_neolix_edu()->::apollo::canbus::Neolix_edu::MergeFrom(from.neolix_edu());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_vehicle_id()->::apollo::common::VehicleID::MergeFrom(from.vehicle_id());
    }
    if (cached_has_bits & 0x04000000u) {
      car_type_ = from.car_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChassisDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.ChassisDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisDetail::CopyFrom(const ChassisDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.ChassisDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisDetail::IsInitialized() const {
  return true;
}

void ChassisDetail::Swap(ChassisDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChassisDetail::InternalSwap(ChassisDetail* other) {
  using std::swap;
  swap(basic_, other->basic_);
  swap(safety_, other->safety_);
  swap(gear_, other->gear_);
  swap(ems_, other->ems_);
  swap(esp_, other->esp_);
  swap(gas_, other->gas_);
  swap(epb_, other->epb_);
  swap(brake_, other->brake_);
  swap(deceleration_, other->deceleration_);
  swap(vehicle_spd_, other->vehicle_spd_);
  swap(eps_, other->eps_);
  swap(light_, other->light_);
  swap(battery_, other->battery_);
  swap(check_response_, other->check_response_);
  swap(license_, other->license_);
  swap(surround_, other->surround_);
  swap(gem_, other->gem_);
  swap(lexus_, other->lexus_);
  swap(transit_, other->transit_);
  swap(ge3_, other->ge3_);
  swap(wey_, other->wey_);
  swap(zhongyun_, other->zhongyun_);
  swap(ch_, other->ch_);
  swap(devkit_, other->devkit_);
  swap(neolix_edu_, other->neolix_edu_);
  swap(vehicle_id_, other->vehicle_id_);
  swap(car_type_, other->car_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChassisDetail::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CheckResponseSignal::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckResponseSignal::kIsEpsOnlineFieldNumber;
const int CheckResponseSignal::kIsEpbOnlineFieldNumber;
const int CheckResponseSignal::kIsEspOnlineFieldNumber;
const int CheckResponseSignal::kIsVtogOnlineFieldNumber;
const int CheckResponseSignal::kIsScuOnlineFieldNumber;
const int CheckResponseSignal::kIsSwitchOnlineFieldNumber;
const int CheckResponseSignal::kIsVcuOnlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckResponseSignal::CheckResponseSignal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_CheckResponseSignal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.CheckResponseSignal)
}
CheckResponseSignal::CheckResponseSignal(const CheckResponseSignal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_eps_online_, &from.is_eps_online_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_vcu_online_) -
    reinterpret_cast<char*>(&is_eps_online_)) + sizeof(is_vcu_online_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.CheckResponseSignal)
}

void CheckResponseSignal::SharedCtor() {
  ::memset(&is_eps_online_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_vcu_online_) -
      reinterpret_cast<char*>(&is_eps_online_)) + sizeof(is_vcu_online_));
}

CheckResponseSignal::~CheckResponseSignal() {
  // @@protoc_insertion_point(destructor:apollo.canbus.CheckResponseSignal)
  SharedDtor();
}

void CheckResponseSignal::SharedDtor() {
}

void CheckResponseSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CheckResponseSignal::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckResponseSignal& CheckResponseSignal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_CheckResponseSignal.base);
  return *internal_default_instance();
}


void CheckResponseSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.CheckResponseSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&is_eps_online_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_vcu_online_) -
        reinterpret_cast<char*>(&is_eps_online_)) + sizeof(is_vcu_online_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckResponseSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.CheckResponseSignal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_eps_online = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_eps_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_eps_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_epb_online = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_epb_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_epb_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_esp_online = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_esp_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_esp_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_vtog_online = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_vtog_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vtog_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_scu_online = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_is_scu_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_scu_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_switch_online = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_is_switch_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_switch_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_vcu_online = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_is_vcu_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vcu_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.CheckResponseSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.CheckResponseSignal)
  return false;
#undef DO_
}

void CheckResponseSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.CheckResponseSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_eps_online = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_eps_online(), output);
  }

  // optional bool is_epb_online = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_epb_online(), output);
  }

  // optional bool is_esp_online = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_esp_online(), output);
  }

  // optional bool is_vtog_online = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_vtog_online(), output);
  }

  // optional bool is_scu_online = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_scu_online(), output);
  }

  // optional bool is_switch_online = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_switch_online(), output);
  }

  // optional bool is_vcu_online = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_vcu_online(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.CheckResponseSignal)
}

::google::protobuf::uint8* CheckResponseSignal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.CheckResponseSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_eps_online = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_eps_online(), target);
  }

  // optional bool is_epb_online = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_epb_online(), target);
  }

  // optional bool is_esp_online = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_esp_online(), target);
  }

  // optional bool is_vtog_online = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_vtog_online(), target);
  }

  // optional bool is_scu_online = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_scu_online(), target);
  }

  // optional bool is_switch_online = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_switch_online(), target);
  }

  // optional bool is_vcu_online = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_vcu_online(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.CheckResponseSignal)
  return target;
}

size_t CheckResponseSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.CheckResponseSignal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bool is_eps_online = 1 [default = false];
    if (has_is_eps_online()) {
      total_size += 1 + 1;
    }

    // optional bool is_epb_online = 2 [default = false];
    if (has_is_epb_online()) {
      total_size += 1 + 1;
    }

    // optional bool is_esp_online = 3 [default = false];
    if (has_is_esp_online()) {
      total_size += 1 + 1;
    }

    // optional bool is_vtog_online = 4 [default = false];
    if (has_is_vtog_online()) {
      total_size += 1 + 1;
    }

    // optional bool is_scu_online = 5 [default = false];
    if (has_is_scu_online()) {
      total_size += 1 + 1;
    }

    // optional bool is_switch_online = 6 [default = false];
    if (has_is_switch_online()) {
      total_size += 1 + 1;
    }

    // optional bool is_vcu_online = 7 [default = false];
    if (has_is_vcu_online()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckResponseSignal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.CheckResponseSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckResponseSignal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckResponseSignal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.CheckResponseSignal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.CheckResponseSignal)
    MergeFrom(*source);
  }
}

void CheckResponseSignal::MergeFrom(const CheckResponseSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.CheckResponseSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      is_eps_online_ = from.is_eps_online_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_epb_online_ = from.is_epb_online_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_esp_online_ = from.is_esp_online_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_vtog_online_ = from.is_vtog_online_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_scu_online_ = from.is_scu_online_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_switch_online_ = from.is_switch_online_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_vcu_online_ = from.is_vcu_online_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckResponseSignal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.CheckResponseSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckResponseSignal::CopyFrom(const CheckResponseSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.CheckResponseSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckResponseSignal::IsInitialized() const {
  return true;
}

void CheckResponseSignal::Swap(CheckResponseSignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckResponseSignal::InternalSwap(CheckResponseSignal* other) {
  using std::swap;
  swap(is_eps_online_, other->is_eps_online_);
  swap(is_epb_online_, other->is_epb_online_);
  swap(is_esp_online_, other->is_esp_online_);
  swap(is_vtog_online_, other->is_vtog_online_);
  swap(is_scu_online_, other->is_scu_online_);
  swap(is_switch_online_, other->is_switch_online_);
  swap(is_vcu_online_, other->is_vcu_online_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CheckResponseSignal::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Battery::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Battery::kBatteryPercentFieldNumber;
const int Battery::kFuelLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Battery::Battery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Battery.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Battery)
}
Battery::Battery(const Battery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&battery_percent_, &from.battery_percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&fuel_level_) -
    reinterpret_cast<char*>(&battery_percent_)) + sizeof(fuel_level_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Battery)
}

void Battery::SharedCtor() {
  ::memset(&battery_percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fuel_level_) -
      reinterpret_cast<char*>(&battery_percent_)) + sizeof(fuel_level_));
}

Battery::~Battery() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Battery)
  SharedDtor();
}

void Battery::SharedDtor() {
}

void Battery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Battery::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Battery& Battery::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Battery.base);
  return *internal_default_instance();
}


void Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Battery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&battery_percent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fuel_level_) -
        reinterpret_cast<char*>(&battery_percent_)) + sizeof(fuel_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Battery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Battery)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double battery_percent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_battery_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &battery_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double fuel_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_fuel_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fuel_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Battery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Battery)
  return false;
#undef DO_
}

void Battery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Battery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double battery_percent = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->battery_percent(), output);
  }

  // optional double fuel_level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->fuel_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Battery)
}

::google::protobuf::uint8* Battery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Battery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double battery_percent = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->battery_percent(), target);
  }

  // optional double fuel_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->fuel_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Battery)
  return target;
}

size_t Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Battery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double battery_percent = 1;
    if (has_battery_percent()) {
      total_size += 1 + 8;
    }

    // optional double fuel_level = 2;
    if (has_fuel_level()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Battery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  const Battery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Battery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Battery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Battery)
    MergeFrom(*source);
  }
}

void Battery::MergeFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      battery_percent_ = from.battery_percent_;
    }
    if (cached_has_bits & 0x00000002u) {
      fuel_level_ = from.fuel_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Battery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battery::CopyFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battery::IsInitialized() const {
  return true;
}

void Battery::Swap(Battery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Battery::InternalSwap(Battery* other) {
  using std::swap;
  swap(battery_percent_, other->battery_percent_);
  swap(fuel_level_, other->fuel_level_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Battery::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Light::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Light::kTurnLightTypeFieldNumber;
const int Light::kBeamLampTypeFieldNumber;
const int Light::kIsBrakeLampOnFieldNumber;
const int Light::kIsAutoLightFieldNumber;
const int Light::kWiperGearFieldNumber;
const int Light::kLotionGearFieldNumber;
const int Light::kIsHornOnFieldNumber;
const int Light::kLincolnLampTypeFieldNumber;
const int Light::kLincolnWiperFieldNumber;
const int Light::kLincolnAmbientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Light::Light()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Light.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Light)
}
Light::Light(const Light& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&turn_light_type_, &from.turn_light_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&lincoln_ambient_) -
    reinterpret_cast<char*>(&turn_light_type_)) + sizeof(lincoln_ambient_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Light)
}

void Light::SharedCtor() {
  ::memset(&turn_light_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lincoln_ambient_) -
      reinterpret_cast<char*>(&turn_light_type_)) + sizeof(lincoln_ambient_));
}

Light::~Light() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Light)
  SharedDtor();
}

void Light::SharedDtor() {
}

void Light::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Light::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Light& Light::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Light.base);
  return *internal_default_instance();
}


void Light::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Light)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&turn_light_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lincoln_lamp_type_) -
        reinterpret_cast<char*>(&turn_light_type_)) + sizeof(lincoln_lamp_type_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&lincoln_wiper_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lincoln_ambient_) -
        reinterpret_cast<char*>(&lincoln_wiper_)) + sizeof(lincoln_ambient_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Light::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Light)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.Light.TurnLightType turn_light_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Light_TurnLightType_IsValid(value)) {
            set_turn_light_type(static_cast< ::apollo::canbus::Light_TurnLightType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Light.BeamLampType beam_lamp_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Light_BeamLampType_IsValid(value)) {
            set_beam_lamp_type(static_cast< ::apollo::canbus::Light_BeamLampType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_brake_lamp_on = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_brake_lamp_on();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_brake_lamp_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_auto_light = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_auto_light();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 wiper_gear = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_wiper_gear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wiper_gear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lotion_gear = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_lotion_gear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lotion_gear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_horn_on = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_is_horn_on();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_horn_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Light_LincolnLampType_IsValid(value)) {
            set_lincoln_lamp_type(static_cast< ::apollo::canbus::Light_LincolnLampType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Light_LincolnWiperType_IsValid(value)) {
            set_lincoln_wiper(static_cast< ::apollo::canbus::Light_LincolnWiperType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Light_LincolnAmbientType_IsValid(value)) {
            set_lincoln_ambient(static_cast< ::apollo::canbus::Light_LincolnAmbientType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Light)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Light)
  return false;
#undef DO_
}

void Light::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Light)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Light.TurnLightType turn_light_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->turn_light_type(), output);
  }

  // optional .apollo.canbus.Light.BeamLampType beam_lamp_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->beam_lamp_type(), output);
  }

  // optional bool is_brake_lamp_on = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_brake_lamp_on(), output);
  }

  // optional bool is_auto_light = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_auto_light(), output);
  }

  // optional int32 wiper_gear = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wiper_gear(), output);
  }

  // optional int32 lotion_gear = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lotion_gear(), output);
  }

  // optional bool is_horn_on = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_horn_on(), output);
  }

  // optional .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->lincoln_lamp_type(), output);
  }

  // optional .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->lincoln_wiper(), output);
  }

  // optional .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->lincoln_ambient(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Light)
}

::google::protobuf::uint8* Light::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Light)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Light.TurnLightType turn_light_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->turn_light_type(), target);
  }

  // optional .apollo.canbus.Light.BeamLampType beam_lamp_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->beam_lamp_type(), target);
  }

  // optional bool is_brake_lamp_on = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_brake_lamp_on(), target);
  }

  // optional bool is_auto_light = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_auto_light(), target);
  }

  // optional int32 wiper_gear = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wiper_gear(), target);
  }

  // optional int32 lotion_gear = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lotion_gear(), target);
  }

  // optional bool is_horn_on = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_horn_on(), target);
  }

  // optional .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->lincoln_lamp_type(), target);
  }

  // optional .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->lincoln_wiper(), target);
  }

  // optional .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->lincoln_ambient(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Light)
  return target;
}

size_t Light::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Light)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.canbus.Light.TurnLightType turn_light_type = 1;
    if (has_turn_light_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn_light_type());
    }

    // optional .apollo.canbus.Light.BeamLampType beam_lamp_type = 2;
    if (has_beam_lamp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->beam_lamp_type());
    }

    // optional bool is_brake_lamp_on = 3;
    if (has_is_brake_lamp_on()) {
      total_size += 1 + 1;
    }

    // optional bool is_auto_light = 4;
    if (has_is_auto_light()) {
      total_size += 1 + 1;
    }

    // optional bool is_horn_on = 7;
    if (has_is_horn_on()) {
      total_size += 1 + 1;
    }

    // optional int32 wiper_gear = 5;
    if (has_wiper_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wiper_gear());
    }

    // optional int32 lotion_gear = 6;
    if (has_lotion_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lotion_gear());
    }

    // optional .apollo.canbus.Light.LincolnLampType lincoln_lamp_type = 8;
    if (has_lincoln_lamp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lincoln_lamp_type());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .apollo.canbus.Light.LincolnWiperType lincoln_wiper = 9;
    if (has_lincoln_wiper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lincoln_wiper());
    }

    // optional .apollo.canbus.Light.LincolnAmbientType lincoln_ambient = 10;
    if (has_lincoln_ambient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lincoln_ambient());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Light::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Light)
  GOOGLE_DCHECK_NE(&from, this);
  const Light* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Light>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Light)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Light)
    MergeFrom(*source);
  }
}

void Light::MergeFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Light)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      turn_light_type_ = from.turn_light_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      beam_lamp_type_ = from.beam_lamp_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_brake_lamp_on_ = from.is_brake_lamp_on_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_auto_light_ = from.is_auto_light_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_horn_on_ = from.is_horn_on_;
    }
    if (cached_has_bits & 0x00000020u) {
      wiper_gear_ = from.wiper_gear_;
    }
    if (cached_has_bits & 0x00000040u) {
      lotion_gear_ = from.lotion_gear_;
    }
    if (cached_has_bits & 0x00000080u) {
      lincoln_lamp_type_ = from.lincoln_lamp_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      lincoln_wiper_ = from.lincoln_wiper_;
    }
    if (cached_has_bits & 0x00000200u) {
      lincoln_ambient_ = from.lincoln_ambient_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Light::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Light::CopyFrom(const Light& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Light)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Light::IsInitialized() const {
  return true;
}

void Light::Swap(Light* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Light::InternalSwap(Light* other) {
  using std::swap;
  swap(turn_light_type_, other->turn_light_type_);
  swap(beam_lamp_type_, other->beam_lamp_type_);
  swap(is_brake_lamp_on_, other->is_brake_lamp_on_);
  swap(is_auto_light_, other->is_auto_light_);
  swap(is_horn_on_, other->is_horn_on_);
  swap(wiper_gear_, other->wiper_gear_);
  swap(lotion_gear_, other->lotion_gear_);
  swap(lincoln_lamp_type_, other->lincoln_lamp_type_);
  swap(lincoln_wiper_, other->lincoln_wiper_);
  swap(lincoln_ambient_, other->lincoln_ambient_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Light::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Eps::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Eps::kIsEpsFailFieldNumber;
const int Eps::kEpsControlStateFieldNumber;
const int Eps::kEpsDriverHandTorqFieldNumber;
const int Eps::kIsSteeringAngleValidFieldNumber;
const int Eps::kSteeringAngleFieldNumber;
const int Eps::kSteeringAngleSpdFieldNumber;
const int Eps::kIsTrimmingStatusFieldNumber;
const int Eps::kIsCalibrationStatusFieldNumber;
const int Eps::kIsFailureStatusFieldNumber;
const int Eps::kAllowEnterAutonomousModeFieldNumber;
const int Eps::kCurrentDrivingModeFieldNumber;
const int Eps::kSteeringAngleCmdFieldNumber;
const int Eps::kVehicleSpeedFieldNumber;
const int Eps::kEpasTorqueFieldNumber;
const int Eps::kSteeringEnabledFieldNumber;
const int Eps::kDriverOverrideFieldNumber;
const int Eps::kDriverActivityFieldNumber;
const int Eps::kWatchdogFaultFieldNumber;
const int Eps::kChannel1FaultFieldNumber;
const int Eps::kChannel2FaultFieldNumber;
const int Eps::kCalibrationFaultFieldNumber;
const int Eps::kConnectorFaultFieldNumber;
const int Eps::kTimestamp65FieldNumber;
const int Eps::kMajorVersionFieldNumber;
const int Eps::kMinorVersionFieldNumber;
const int Eps::kBuildNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Eps::Eps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Eps.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Eps)
}
Eps::Eps(const Eps& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eps_driver_hand_torq_, &from.eps_driver_hand_torq_,
    static_cast<size_t>(reinterpret_cast<char*>(&build_number_) -
    reinterpret_cast<char*>(&eps_driver_hand_torq_)) + sizeof(build_number_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Eps)
}

void Eps::SharedCtor() {
  ::memset(&eps_driver_hand_torq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&build_number_) -
      reinterpret_cast<char*>(&eps_driver_hand_torq_)) + sizeof(build_number_));
}

Eps::~Eps() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Eps)
  SharedDtor();
}

void Eps::SharedDtor() {
}

void Eps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Eps::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Eps& Eps::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Eps.base);
  return *internal_default_instance();
}


void Eps::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Eps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&eps_driver_hand_torq_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steering_angle_spd_) -
        reinterpret_cast<char*>(&eps_driver_hand_torq_)) + sizeof(steering_angle_spd_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&allow_enter_autonomous_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&driver_override_) -
        reinterpret_cast<char*>(&allow_enter_autonomous_mode_)) + sizeof(driver_override_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&driver_activity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&major_version_) -
        reinterpret_cast<char*>(&driver_activity_)) + sizeof(major_version_));
  }
  if (cached_has_bits & 50331648u) {
    ::memset(&minor_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&build_number_) -
        reinterpret_cast<char*>(&minor_version_)) + sizeof(build_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Eps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Eps)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_eps_fail = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_eps_fail();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_eps_fail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Eps.Type eps_control_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Eps_Type_IsValid(value)) {
            set_eps_control_state(static_cast< ::apollo::canbus::Eps_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double eps_driver_hand_torq = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_eps_driver_hand_torq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eps_driver_hand_torq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_steering_angle_valid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_steering_angle_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_steering_angle_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steering_angle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_steering_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steering_angle_spd = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_steering_angle_spd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_angle_spd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_trimming_status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_is_trimming_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trimming_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_calibration_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_is_calibration_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_calibration_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_failure_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_is_failure_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_failure_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 allow_enter_autonomous_mode = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_allow_enter_autonomous_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allow_enter_autonomous_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 current_driving_mode = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_current_driving_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_driving_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steering_angle_cmd = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_steering_angle_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_angle_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vehicle_speed = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_vehicle_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double epas_torque = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_epas_torque();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &epas_torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool steering_enabled = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_steering_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steering_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool driver_override = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_driver_override();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_override_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool driver_activity = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_driver_activity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool watchdog_fault = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_watchdog_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watchdog_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool channel_1_fault = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_channel_1_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_1_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool channel_2_fault = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_channel_2_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_2_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool calibration_fault = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_calibration_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &calibration_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool connector_fault = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_connector_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connector_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timestamp_65 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {
          set_has_timestamp_65();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_65_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 major_version = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_major_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minor_version = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_minor_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 build_number = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_build_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Eps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Eps)
  return false;
#undef DO_
}

void Eps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Eps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_eps_fail = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_eps_fail(), output);
  }

  // optional .apollo.canbus.Eps.Type eps_control_state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eps_control_state(), output);
  }

  // optional double eps_driver_hand_torq = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->eps_driver_hand_torq(), output);
  }

  // optional bool is_steering_angle_valid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_steering_angle_valid(), output);
  }

  // optional double steering_angle = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->steering_angle(), output);
  }

  // optional double steering_angle_spd = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->steering_angle_spd(), output);
  }

  // optional bool is_trimming_status = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_trimming_status(), output);
  }

  // optional bool is_calibration_status = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_calibration_status(), output);
  }

  // optional bool is_failure_status = 9;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_failure_status(), output);
  }

  // optional int32 allow_enter_autonomous_mode = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->allow_enter_autonomous_mode(), output);
  }

  // optional int32 current_driving_mode = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->current_driving_mode(), output);
  }

  // optional double steering_angle_cmd = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->steering_angle_cmd(), output);
  }

  // optional double vehicle_speed = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->vehicle_speed(), output);
  }

  // optional double epas_torque = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->epas_torque(), output);
  }

  // optional bool steering_enabled = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->steering_enabled(), output);
  }

  // optional bool driver_override = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->driver_override(), output);
  }

  // optional bool driver_activity = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->driver_activity(), output);
  }

  // optional bool watchdog_fault = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->watchdog_fault(), output);
  }

  // optional bool channel_1_fault = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->channel_1_fault(), output);
  }

  // optional bool channel_2_fault = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->channel_2_fault(), output);
  }

  // optional bool calibration_fault = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->calibration_fault(), output);
  }

  // optional bool connector_fault = 22;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->connector_fault(), output);
  }

  // optional double timestamp_65 = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->timestamp_65(), output);
  }

  // optional int32 major_version = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->major_version(), output);
  }

  // optional int32 minor_version = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->minor_version(), output);
  }

  // optional int32 build_number = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->build_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Eps)
}

::google::protobuf::uint8* Eps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Eps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_eps_fail = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_eps_fail(), target);
  }

  // optional .apollo.canbus.Eps.Type eps_control_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eps_control_state(), target);
  }

  // optional double eps_driver_hand_torq = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->eps_driver_hand_torq(), target);
  }

  // optional bool is_steering_angle_valid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_steering_angle_valid(), target);
  }

  // optional double steering_angle = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->steering_angle(), target);
  }

  // optional double steering_angle_spd = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->steering_angle_spd(), target);
  }

  // optional bool is_trimming_status = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_trimming_status(), target);
  }

  // optional bool is_calibration_status = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_calibration_status(), target);
  }

  // optional bool is_failure_status = 9;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_failure_status(), target);
  }

  // optional int32 allow_enter_autonomous_mode = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->allow_enter_autonomous_mode(), target);
  }

  // optional int32 current_driving_mode = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->current_driving_mode(), target);
  }

  // optional double steering_angle_cmd = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->steering_angle_cmd(), target);
  }

  // optional double vehicle_speed = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->vehicle_speed(), target);
  }

  // optional double epas_torque = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->epas_torque(), target);
  }

  // optional bool steering_enabled = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->steering_enabled(), target);
  }

  // optional bool driver_override = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->driver_override(), target);
  }

  // optional bool driver_activity = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->driver_activity(), target);
  }

  // optional bool watchdog_fault = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->watchdog_fault(), target);
  }

  // optional bool channel_1_fault = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->channel_1_fault(), target);
  }

  // optional bool channel_2_fault = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->channel_2_fault(), target);
  }

  // optional bool calibration_fault = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->calibration_fault(), target);
  }

  // optional bool connector_fault = 22;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->connector_fault(), target);
  }

  // optional double timestamp_65 = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->timestamp_65(), target);
  }

  // optional int32 major_version = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->major_version(), target);
  }

  // optional int32 minor_version = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->minor_version(), target);
  }

  // optional int32 build_number = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->build_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Eps)
  return target;
}

size_t Eps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Eps)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double eps_driver_hand_torq = 3;
    if (has_eps_driver_hand_torq()) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Eps.Type eps_control_state = 2;
    if (has_eps_control_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_control_state());
    }

    // optional bool is_eps_fail = 1;
    if (has_is_eps_fail()) {
      total_size += 1 + 1;
    }

    // optional bool is_steering_angle_valid = 4;
    if (has_is_steering_angle_valid()) {
      total_size += 1 + 1;
    }

    // optional bool is_trimming_status = 7;
    if (has_is_trimming_status()) {
      total_size += 1 + 1;
    }

    // optional bool is_calibration_status = 8;
    if (has_is_calibration_status()) {
      total_size += 1 + 1;
    }

    // optional double steering_angle = 5;
    if (has_steering_angle()) {
      total_size += 1 + 8;
    }

    // optional double steering_angle_spd = 6;
    if (has_steering_angle_spd()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 allow_enter_autonomous_mode = 10;
    if (has_allow_enter_autonomous_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allow_enter_autonomous_mode());
    }

    // optional int32 current_driving_mode = 11;
    if (has_current_driving_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_driving_mode());
    }

    // optional double steering_angle_cmd = 12;
    if (has_steering_angle_cmd()) {
      total_size += 1 + 8;
    }

    // optional double vehicle_speed = 13;
    if (has_vehicle_speed()) {
      total_size += 1 + 8;
    }

    // optional double epas_torque = 14;
    if (has_epas_torque()) {
      total_size += 1 + 8;
    }

    // optional bool is_failure_status = 9;
    if (has_is_failure_status()) {
      total_size += 1 + 1;
    }

    // optional bool steering_enabled = 15;
    if (has_steering_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool driver_override = 16;
    if (has_driver_override()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool driver_activity = 17;
    if (has_driver_activity()) {
      total_size += 2 + 1;
    }

    // optional bool watchdog_fault = 18;
    if (has_watchdog_fault()) {
      total_size += 2 + 1;
    }

    // optional bool channel_1_fault = 19;
    if (has_channel_1_fault()) {
      total_size += 2 + 1;
    }

    // optional bool channel_2_fault = 20;
    if (has_channel_2_fault()) {
      total_size += 2 + 1;
    }

    // optional bool calibration_fault = 21;
    if (has_calibration_fault()) {
      total_size += 2 + 1;
    }

    // optional double timestamp_65 = 23;
    if (has_timestamp_65()) {
      total_size += 2 + 8;
    }

    // optional bool connector_fault = 22;
    if (has_connector_fault()) {
      total_size += 2 + 1;
    }

    // optional int32 major_version = 24;
    if (has_major_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major_version());
    }

  }
  if (_has_bits_[24 / 32] & 50331648u) {
    // optional int32 minor_version = 25;
    if (has_minor_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor_version());
    }

    // optional int32 build_number = 26;
    if (has_build_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->build_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Eps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Eps)
  GOOGLE_DCHECK_NE(&from, this);
  const Eps* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Eps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Eps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Eps)
    MergeFrom(*source);
  }
}

void Eps::MergeFrom(const Eps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Eps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      eps_driver_hand_torq_ = from.eps_driver_hand_torq_;
    }
    if (cached_has_bits & 0x00000002u) {
      eps_control_state_ = from.eps_control_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_eps_fail_ = from.is_eps_fail_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_steering_angle_valid_ = from.is_steering_angle_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_trimming_status_ = from.is_trimming_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_calibration_status_ = from.is_calibration_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      steering_angle_ = from.steering_angle_;
    }
    if (cached_has_bits & 0x00000080u) {
      steering_angle_spd_ = from.steering_angle_spd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      allow_enter_autonomous_mode_ = from.allow_enter_autonomous_mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      current_driving_mode_ = from.current_driving_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      steering_angle_cmd_ = from.steering_angle_cmd_;
    }
    if (cached_has_bits & 0x00000800u) {
      vehicle_speed_ = from.vehicle_speed_;
    }
    if (cached_has_bits & 0x00001000u) {
      epas_torque_ = from.epas_torque_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_failure_status_ = from.is_failure_status_;
    }
    if (cached_has_bits & 0x00004000u) {
      steering_enabled_ = from.steering_enabled_;
    }
    if (cached_has_bits & 0x00008000u) {
      driver_override_ = from.driver_override_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      driver_activity_ = from.driver_activity_;
    }
    if (cached_has_bits & 0x00020000u) {
      watchdog_fault_ = from.watchdog_fault_;
    }
    if (cached_has_bits & 0x00040000u) {
      channel_1_fault_ = from.channel_1_fault_;
    }
    if (cached_has_bits & 0x00080000u) {
      channel_2_fault_ = from.channel_2_fault_;
    }
    if (cached_has_bits & 0x00100000u) {
      calibration_fault_ = from.calibration_fault_;
    }
    if (cached_has_bits & 0x00200000u) {
      timestamp_65_ = from.timestamp_65_;
    }
    if (cached_has_bits & 0x00400000u) {
      connector_fault_ = from.connector_fault_;
    }
    if (cached_has_bits & 0x00800000u) {
      major_version_ = from.major_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 50331648u) {
    if (cached_has_bits & 0x01000000u) {
      minor_version_ = from.minor_version_;
    }
    if (cached_has_bits & 0x02000000u) {
      build_number_ = from.build_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Eps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Eps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Eps::CopyFrom(const Eps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Eps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Eps::IsInitialized() const {
  return true;
}

void Eps::Swap(Eps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Eps::InternalSwap(Eps* other) {
  using std::swap;
  swap(eps_driver_hand_torq_, other->eps_driver_hand_torq_);
  swap(eps_control_state_, other->eps_control_state_);
  swap(is_eps_fail_, other->is_eps_fail_);
  swap(is_steering_angle_valid_, other->is_steering_angle_valid_);
  swap(is_trimming_status_, other->is_trimming_status_);
  swap(is_calibration_status_, other->is_calibration_status_);
  swap(steering_angle_, other->steering_angle_);
  swap(steering_angle_spd_, other->steering_angle_spd_);
  swap(allow_enter_autonomous_mode_, other->allow_enter_autonomous_mode_);
  swap(current_driving_mode_, other->current_driving_mode_);
  swap(steering_angle_cmd_, other->steering_angle_cmd_);
  swap(vehicle_speed_, other->vehicle_speed_);
  swap(epas_torque_, other->epas_torque_);
  swap(is_failure_status_, other->is_failure_status_);
  swap(steering_enabled_, other->steering_enabled_);
  swap(driver_override_, other->driver_override_);
  swap(driver_activity_, other->driver_activity_);
  swap(watchdog_fault_, other->watchdog_fault_);
  swap(channel_1_fault_, other->channel_1_fault_);
  swap(channel_2_fault_, other->channel_2_fault_);
  swap(calibration_fault_, other->calibration_fault_);
  swap(timestamp_65_, other->timestamp_65_);
  swap(connector_fault_, other->connector_fault_);
  swap(major_version_, other->major_version_);
  swap(minor_version_, other->minor_version_);
  swap(build_number_, other->build_number_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Eps::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleSpd::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleSpd::kIsVehicleStandstillFieldNumber;
const int VehicleSpd::kIsVehicleSpdValidFieldNumber;
const int VehicleSpd::kVehicleSpdFieldNumber;
const int VehicleSpd::kIsWheelSpdRrValidFieldNumber;
const int VehicleSpd::kWheelDirectionRrFieldNumber;
const int VehicleSpd::kWheelSpdRrFieldNumber;
const int VehicleSpd::kIsWheelSpdRlValidFieldNumber;
const int VehicleSpd::kWheelDirectionRlFieldNumber;
const int VehicleSpd::kWheelSpdRlFieldNumber;
const int VehicleSpd::kIsWheelSpdFrValidFieldNumber;
const int VehicleSpd::kWheelDirectionFrFieldNumber;
const int VehicleSpd::kWheelSpdFrFieldNumber;
const int VehicleSpd::kIsWheelSpdFlValidFieldNumber;
const int VehicleSpd::kWheelDirectionFlFieldNumber;
const int VehicleSpd::kWheelSpdFlFieldNumber;
const int VehicleSpd::kIsYawRateValidFieldNumber;
const int VehicleSpd::kYawRateFieldNumber;
const int VehicleSpd::kYawRateOffsetFieldNumber;
const int VehicleSpd::kIsAxValidFieldNumber;
const int VehicleSpd::kAxFieldNumber;
const int VehicleSpd::kAxOffsetFieldNumber;
const int VehicleSpd::kIsAyValidFieldNumber;
const int VehicleSpd::kAyFieldNumber;
const int VehicleSpd::kAyOffsetFieldNumber;
const int VehicleSpd::kLatAccFieldNumber;
const int VehicleSpd::kLongAccFieldNumber;
const int VehicleSpd::kVertAccFieldNumber;
const int VehicleSpd::kRollRateFieldNumber;
const int VehicleSpd::kAccEstFieldNumber;
const int VehicleSpd::kTimestampSecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleSpd::VehicleSpd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_VehicleSpd.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.VehicleSpd)
}
VehicleSpd::VehicleSpd(const VehicleSpd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_spd_, &from.vehicle_spd_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_ay_valid_) -
    reinterpret_cast<char*>(&vehicle_spd_)) + sizeof(is_ay_valid_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.VehicleSpd)
}

void VehicleSpd::SharedCtor() {
  ::memset(&vehicle_spd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_ay_valid_) -
      reinterpret_cast<char*>(&vehicle_spd_)) + sizeof(is_ay_valid_));
}

VehicleSpd::~VehicleSpd() {
  // @@protoc_insertion_point(destructor:apollo.canbus.VehicleSpd)
  SharedDtor();
}

void VehicleSpd::SharedDtor() {
}

void VehicleSpd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleSpd::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleSpd& VehicleSpd::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_VehicleSpd.base);
  return *internal_default_instance();
}


void VehicleSpd::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.VehicleSpd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&vehicle_spd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wheel_spd_rl_) -
        reinterpret_cast<char*>(&vehicle_spd_)) + sizeof(wheel_spd_rl_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&wheel_direction_rl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_ax_valid_) -
        reinterpret_cast<char*>(&wheel_direction_rl_)) + sizeof(is_ax_valid_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&wheel_spd_fl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lat_acc_) -
        reinterpret_cast<char*>(&wheel_spd_fl_)) + sizeof(lat_acc_));
  }
  if (cached_has_bits & 1056964608u) {
    ::memset(&long_acc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_ay_valid_) -
        reinterpret_cast<char*>(&long_acc_)) + sizeof(is_ay_valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleSpd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.VehicleSpd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_vehicle_standstill = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_vehicle_standstill();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vehicle_standstill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_vehicle_spd_valid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_vehicle_spd_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_vehicle_spd_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vehicle_spd = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_vehicle_spd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_spd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wheel_spd_rr_valid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_wheel_spd_rr_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_rr_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(value)) {
            set_wheel_direction_rr(static_cast< ::apollo::canbus::WheelSpeed_WheelSpeedType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_spd_rr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_wheel_spd_rr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_rr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wheel_spd_rl_valid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_is_wheel_spd_rl_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_rl_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(value)) {
            set_wheel_direction_rl(static_cast< ::apollo::canbus::WheelSpeed_WheelSpeedType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_spd_rl = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_wheel_spd_rl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_rl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wheel_spd_fr_valid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_is_wheel_spd_fr_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_fr_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(value)) {
            set_wheel_direction_fr(static_cast< ::apollo::canbus::WheelSpeed_WheelSpeedType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_spd_fr = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_wheel_spd_fr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_fr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wheel_spd_fl_valid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_is_wheel_spd_fl_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_fl_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::WheelSpeed_WheelSpeedType_IsValid(value)) {
            set_wheel_direction_fl(static_cast< ::apollo::canbus::WheelSpeed_WheelSpeedType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                14, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_spd_fl = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_wheel_spd_fl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_fl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_yaw_rate_valid = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_is_yaw_rate_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_yaw_rate_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double yaw_rate = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_yaw_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double yaw_rate_offset = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_yaw_rate_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_rate_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_ax_valid = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_is_ax_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ax_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ax = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {
          set_has_ax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ax_offset = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_ax_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ax_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_ay_valid = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_is_ay_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ay_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ay = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {
          set_has_ay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ay_offset = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {
          set_has_ay_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ay_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lat_acc = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {
          set_has_lat_acc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double long_acc = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {
          set_has_long_acc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &long_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vert_acc = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {
          set_has_vert_acc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vert_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double roll_rate = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {
          set_has_roll_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_est = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {
          set_has_acc_est();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_est_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timestamp_sec = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {
          set_has_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.VehicleSpd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.VehicleSpd)
  return false;
#undef DO_
}

void VehicleSpd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.VehicleSpd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_vehicle_standstill = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_vehicle_standstill(), output);
  }

  // optional bool is_vehicle_spd_valid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_vehicle_spd_valid(), output);
  }

  // optional double vehicle_spd = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->vehicle_spd(), output);
  }

  // optional bool is_wheel_spd_rr_valid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_wheel_spd_rr_valid(), output);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->wheel_direction_rr(), output);
  }

  // optional double wheel_spd_rr = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->wheel_spd_rr(), output);
  }

  // optional bool is_wheel_spd_rl_valid = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_wheel_spd_rl_valid(), output);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->wheel_direction_rl(), output);
  }

  // optional double wheel_spd_rl = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->wheel_spd_rl(), output);
  }

  // optional bool is_wheel_spd_fr_valid = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_wheel_spd_fr_valid(), output);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->wheel_direction_fr(), output);
  }

  // optional double wheel_spd_fr = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->wheel_spd_fr(), output);
  }

  // optional bool is_wheel_spd_fl_valid = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_wheel_spd_fl_valid(), output);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->wheel_direction_fl(), output);
  }

  // optional double wheel_spd_fl = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->wheel_spd_fl(), output);
  }

  // optional bool is_yaw_rate_valid = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_yaw_rate_valid(), output);
  }

  // optional double yaw_rate = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->yaw_rate(), output);
  }

  // optional double yaw_rate_offset = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->yaw_rate_offset(), output);
  }

  // optional bool is_ax_valid = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_ax_valid(), output);
  }

  // optional double ax = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->ax(), output);
  }

  // optional double ax_offset = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->ax_offset(), output);
  }

  // optional bool is_ay_valid = 22;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->is_ay_valid(), output);
  }

  // optional double ay = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->ay(), output);
  }

  // optional double ay_offset = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->ay_offset(), output);
  }

  // optional double lat_acc = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->lat_acc(), output);
  }

  // optional double long_acc = 26;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->long_acc(), output);
  }

  // optional double vert_acc = 27;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->vert_acc(), output);
  }

  // optional double roll_rate = 28;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->roll_rate(), output);
  }

  // optional double acc_est = 29;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->acc_est(), output);
  }

  // optional double timestamp_sec = 30;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->timestamp_sec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.VehicleSpd)
}

::google::protobuf::uint8* VehicleSpd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.VehicleSpd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_vehicle_standstill = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_vehicle_standstill(), target);
  }

  // optional bool is_vehicle_spd_valid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_vehicle_spd_valid(), target);
  }

  // optional double vehicle_spd = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->vehicle_spd(), target);
  }

  // optional bool is_wheel_spd_rr_valid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_wheel_spd_rr_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->wheel_direction_rr(), target);
  }

  // optional double wheel_spd_rr = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->wheel_spd_rr(), target);
  }

  // optional bool is_wheel_spd_rl_valid = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_wheel_spd_rl_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->wheel_direction_rl(), target);
  }

  // optional double wheel_spd_rl = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->wheel_spd_rl(), target);
  }

  // optional bool is_wheel_spd_fr_valid = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_wheel_spd_fr_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->wheel_direction_fr(), target);
  }

  // optional double wheel_spd_fr = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->wheel_spd_fr(), target);
  }

  // optional bool is_wheel_spd_fl_valid = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_wheel_spd_fl_valid(), target);
  }

  // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->wheel_direction_fl(), target);
  }

  // optional double wheel_spd_fl = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->wheel_spd_fl(), target);
  }

  // optional bool is_yaw_rate_valid = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_yaw_rate_valid(), target);
  }

  // optional double yaw_rate = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->yaw_rate(), target);
  }

  // optional double yaw_rate_offset = 18;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->yaw_rate_offset(), target);
  }

  // optional bool is_ax_valid = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_ax_valid(), target);
  }

  // optional double ax = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->ax(), target);
  }

  // optional double ax_offset = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->ax_offset(), target);
  }

  // optional bool is_ay_valid = 22;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->is_ay_valid(), target);
  }

  // optional double ay = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->ay(), target);
  }

  // optional double ay_offset = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->ay_offset(), target);
  }

  // optional double lat_acc = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->lat_acc(), target);
  }

  // optional double long_acc = 26;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->long_acc(), target);
  }

  // optional double vert_acc = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->vert_acc(), target);
  }

  // optional double roll_rate = 28;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->roll_rate(), target);
  }

  // optional double acc_est = 29;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->acc_est(), target);
  }

  // optional double timestamp_sec = 30;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->timestamp_sec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.VehicleSpd)
  return target;
}

size_t VehicleSpd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.VehicleSpd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double vehicle_spd = 3 [default = 0];
    if (has_vehicle_spd()) {
      total_size += 1 + 8;
    }

    // optional bool is_vehicle_standstill = 1;
    if (has_is_vehicle_standstill()) {
      total_size += 1 + 1;
    }

    // optional bool is_vehicle_spd_valid = 2;
    if (has_is_vehicle_spd_valid()) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_rr_valid = 4;
    if (has_is_wheel_spd_rr_valid()) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_rl_valid = 7;
    if (has_is_wheel_spd_rl_valid()) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 5;
    if (has_wheel_direction_rr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_rr());
    }

    // optional double wheel_spd_rr = 6;
    if (has_wheel_spd_rr()) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_rl = 9;
    if (has_wheel_spd_rl()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 8;
    if (has_wheel_direction_rl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_rl());
    }

    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 11;
    if (has_wheel_direction_fr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_fr());
    }

    // optional double wheel_spd_fr = 12;
    if (has_wheel_spd_fr()) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 14;
    if (has_wheel_direction_fl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_fl());
    }

    // optional bool is_wheel_spd_fr_valid = 10;
    if (has_is_wheel_spd_fr_valid()) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_fl_valid = 13;
    if (has_is_wheel_spd_fl_valid()) {
      total_size += 1 + 1;
    }

    // optional bool is_yaw_rate_valid = 16;
    if (has_is_yaw_rate_valid()) {
      total_size += 2 + 1;
    }

    // optional bool is_ax_valid = 19;
    if (has_is_ax_valid()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double wheel_spd_fl = 15;
    if (has_wheel_spd_fl()) {
      total_size += 1 + 8;
    }

    // optional double yaw_rate = 17;
    if (has_yaw_rate()) {
      total_size += 2 + 8;
    }

    // optional double yaw_rate_offset = 18;
    if (has_yaw_rate_offset()) {
      total_size += 2 + 8;
    }

    // optional double ax = 20;
    if (has_ax()) {
      total_size += 2 + 8;
    }

    // optional double ax_offset = 21;
    if (has_ax_offset()) {
      total_size += 2 + 8;
    }

    // optional double ay = 23;
    if (has_ay()) {
      total_size += 2 + 8;
    }

    // optional double ay_offset = 24;
    if (has_ay_offset()) {
      total_size += 2 + 8;
    }

    // optional double lat_acc = 25;
    if (has_lat_acc()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    // optional double long_acc = 26;
    if (has_long_acc()) {
      total_size += 2 + 8;
    }

    // optional double vert_acc = 27;
    if (has_vert_acc()) {
      total_size += 2 + 8;
    }

    // optional double roll_rate = 28;
    if (has_roll_rate()) {
      total_size += 2 + 8;
    }

    // optional double acc_est = 29;
    if (has_acc_est()) {
      total_size += 2 + 8;
    }

    // optional double timestamp_sec = 30;
    if (has_timestamp_sec()) {
      total_size += 2 + 8;
    }

    // optional bool is_ay_valid = 22;
    if (has_is_ay_valid()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleSpd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.VehicleSpd)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleSpd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleSpd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.VehicleSpd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.VehicleSpd)
    MergeFrom(*source);
  }
}

void VehicleSpd::MergeFrom(const VehicleSpd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.VehicleSpd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      vehicle_spd_ = from.vehicle_spd_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_vehicle_standstill_ = from.is_vehicle_standstill_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_vehicle_spd_valid_ = from.is_vehicle_spd_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_wheel_spd_rr_valid_ = from.is_wheel_spd_rr_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_wheel_spd_rl_valid_ = from.is_wheel_spd_rl_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      wheel_direction_rr_ = from.wheel_direction_rr_;
    }
    if (cached_has_bits & 0x00000040u) {
      wheel_spd_rr_ = from.wheel_spd_rr_;
    }
    if (cached_has_bits & 0x00000080u) {
      wheel_spd_rl_ = from.wheel_spd_rl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      wheel_direction_rl_ = from.wheel_direction_rl_;
    }
    if (cached_has_bits & 0x00000200u) {
      wheel_direction_fr_ = from.wheel_direction_fr_;
    }
    if (cached_has_bits & 0x00000400u) {
      wheel_spd_fr_ = from.wheel_spd_fr_;
    }
    if (cached_has_bits & 0x00000800u) {
      wheel_direction_fl_ = from.wheel_direction_fl_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_wheel_spd_fr_valid_ = from.is_wheel_spd_fr_valid_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_wheel_spd_fl_valid_ = from.is_wheel_spd_fl_valid_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_yaw_rate_valid_ = from.is_yaw_rate_valid_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_ax_valid_ = from.is_ax_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      wheel_spd_fl_ = from.wheel_spd_fl_;
    }
    if (cached_has_bits & 0x00020000u) {
      yaw_rate_ = from.yaw_rate_;
    }
    if (cached_has_bits & 0x00040000u) {
      yaw_rate_offset_ = from.yaw_rate_offset_;
    }
    if (cached_has_bits & 0x00080000u) {
      ax_ = from.ax_;
    }
    if (cached_has_bits & 0x00100000u) {
      ax_offset_ = from.ax_offset_;
    }
    if (cached_has_bits & 0x00200000u) {
      ay_ = from.ay_;
    }
    if (cached_has_bits & 0x00400000u) {
      ay_offset_ = from.ay_offset_;
    }
    if (cached_has_bits & 0x00800000u) {
      lat_acc_ = from.lat_acc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1056964608u) {
    if (cached_has_bits & 0x01000000u) {
      long_acc_ = from.long_acc_;
    }
    if (cached_has_bits & 0x02000000u) {
      vert_acc_ = from.vert_acc_;
    }
    if (cached_has_bits & 0x04000000u) {
      roll_rate_ = from.roll_rate_;
    }
    if (cached_has_bits & 0x08000000u) {
      acc_est_ = from.acc_est_;
    }
    if (cached_has_bits & 0x10000000u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    if (cached_has_bits & 0x20000000u) {
      is_ay_valid_ = from.is_ay_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleSpd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.VehicleSpd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleSpd::CopyFrom(const VehicleSpd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.VehicleSpd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSpd::IsInitialized() const {
  return true;
}

void VehicleSpd::Swap(VehicleSpd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleSpd::InternalSwap(VehicleSpd* other) {
  using std::swap;
  swap(vehicle_spd_, other->vehicle_spd_);
  swap(is_vehicle_standstill_, other->is_vehicle_standstill_);
  swap(is_vehicle_spd_valid_, other->is_vehicle_spd_valid_);
  swap(is_wheel_spd_rr_valid_, other->is_wheel_spd_rr_valid_);
  swap(is_wheel_spd_rl_valid_, other->is_wheel_spd_rl_valid_);
  swap(wheel_direction_rr_, other->wheel_direction_rr_);
  swap(wheel_spd_rr_, other->wheel_spd_rr_);
  swap(wheel_spd_rl_, other->wheel_spd_rl_);
  swap(wheel_direction_rl_, other->wheel_direction_rl_);
  swap(wheel_direction_fr_, other->wheel_direction_fr_);
  swap(wheel_spd_fr_, other->wheel_spd_fr_);
  swap(wheel_direction_fl_, other->wheel_direction_fl_);
  swap(is_wheel_spd_fr_valid_, other->is_wheel_spd_fr_valid_);
  swap(is_wheel_spd_fl_valid_, other->is_wheel_spd_fl_valid_);
  swap(is_yaw_rate_valid_, other->is_yaw_rate_valid_);
  swap(is_ax_valid_, other->is_ax_valid_);
  swap(wheel_spd_fl_, other->wheel_spd_fl_);
  swap(yaw_rate_, other->yaw_rate_);
  swap(yaw_rate_offset_, other->yaw_rate_offset_);
  swap(ax_, other->ax_);
  swap(ax_offset_, other->ax_offset_);
  swap(ay_, other->ay_);
  swap(ay_offset_, other->ay_offset_);
  swap(lat_acc_, other->lat_acc_);
  swap(long_acc_, other->long_acc_);
  swap(vert_acc_, other->vert_acc_);
  swap(roll_rate_, other->roll_rate_);
  swap(acc_est_, other->acc_est_);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(is_ay_valid_, other->is_ay_valid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleSpd::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Deceleration::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Deceleration::kIsDecelerationAvailableFieldNumber;
const int Deceleration::kIsDecelerationActiveFieldNumber;
const int Deceleration::kDecelerationFieldNumber;
const int Deceleration::kIsEvbFailFieldNumber;
const int Deceleration::kEvbPressureFieldNumber;
const int Deceleration::kBrakePressureFieldNumber;
const int Deceleration::kBrakePressureSpdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Deceleration::Deceleration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Deceleration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Deceleration)
}
Deceleration::Deceleration(const Deceleration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&deceleration_, &from.deceleration_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_deceleration_active_) -
    reinterpret_cast<char*>(&deceleration_)) + sizeof(is_deceleration_active_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Deceleration)
}

void Deceleration::SharedCtor() {
  ::memset(&deceleration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_deceleration_active_) -
      reinterpret_cast<char*>(&deceleration_)) + sizeof(is_deceleration_active_));
}

Deceleration::~Deceleration() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Deceleration)
  SharedDtor();
}

void Deceleration::SharedDtor() {
}

void Deceleration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Deceleration::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Deceleration& Deceleration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Deceleration.base);
  return *internal_default_instance();
}


void Deceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Deceleration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&deceleration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_deceleration_active_) -
        reinterpret_cast<char*>(&deceleration_)) + sizeof(is_deceleration_active_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Deceleration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Deceleration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_deceleration_available = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_deceleration_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_deceleration_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_deceleration_active = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_deceleration_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_deceleration_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double deceleration = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_deceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double is_evb_fail = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_is_evb_fail();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &is_evb_fail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double evb_pressure = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_evb_pressure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &evb_pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_pressure = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_brake_pressure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_pressure_spd = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_brake_pressure_spd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_pressure_spd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Deceleration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Deceleration)
  return false;
#undef DO_
}

void Deceleration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Deceleration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_deceleration_available = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_deceleration_available(), output);
  }

  // optional bool is_deceleration_active = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_deceleration_active(), output);
  }

  // optional double deceleration = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->deceleration(), output);
  }

  // optional double is_evb_fail = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->is_evb_fail(), output);
  }

  // optional double evb_pressure = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->evb_pressure(), output);
  }

  // optional double brake_pressure = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->brake_pressure(), output);
  }

  // optional double brake_pressure_spd = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->brake_pressure_spd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Deceleration)
}

::google::protobuf::uint8* Deceleration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Deceleration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_deceleration_available = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_deceleration_available(), target);
  }

  // optional bool is_deceleration_active = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_deceleration_active(), target);
  }

  // optional double deceleration = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->deceleration(), target);
  }

  // optional double is_evb_fail = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->is_evb_fail(), target);
  }

  // optional double evb_pressure = 5 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->evb_pressure(), target);
  }

  // optional double brake_pressure = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->brake_pressure(), target);
  }

  // optional double brake_pressure_spd = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->brake_pressure_spd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Deceleration)
  return target;
}

size_t Deceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Deceleration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional double deceleration = 3 [default = 0];
    if (has_deceleration()) {
      total_size += 1 + 8;
    }

    // optional double is_evb_fail = 4;
    if (has_is_evb_fail()) {
      total_size += 1 + 8;
    }

    // optional double evb_pressure = 5 [default = 0];
    if (has_evb_pressure()) {
      total_size += 1 + 8;
    }

    // optional double brake_pressure = 6 [default = 0];
    if (has_brake_pressure()) {
      total_size += 1 + 8;
    }

    // optional double brake_pressure_spd = 7 [default = 0];
    if (has_brake_pressure_spd()) {
      total_size += 1 + 8;
    }

    // optional bool is_deceleration_available = 1;
    if (has_is_deceleration_available()) {
      total_size += 1 + 1;
    }

    // optional bool is_deceleration_active = 2;
    if (has_is_deceleration_active()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Deceleration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Deceleration)
  GOOGLE_DCHECK_NE(&from, this);
  const Deceleration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Deceleration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Deceleration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Deceleration)
    MergeFrom(*source);
  }
}

void Deceleration::MergeFrom(const Deceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Deceleration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      deceleration_ = from.deceleration_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_evb_fail_ = from.is_evb_fail_;
    }
    if (cached_has_bits & 0x00000004u) {
      evb_pressure_ = from.evb_pressure_;
    }
    if (cached_has_bits & 0x00000008u) {
      brake_pressure_ = from.brake_pressure_;
    }
    if (cached_has_bits & 0x00000010u) {
      brake_pressure_spd_ = from.brake_pressure_spd_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_deceleration_available_ = from.is_deceleration_available_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_deceleration_active_ = from.is_deceleration_active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Deceleration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Deceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Deceleration::CopyFrom(const Deceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Deceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deceleration::IsInitialized() const {
  return true;
}

void Deceleration::Swap(Deceleration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Deceleration::InternalSwap(Deceleration* other) {
  using std::swap;
  swap(deceleration_, other->deceleration_);
  swap(is_evb_fail_, other->is_evb_fail_);
  swap(evb_pressure_, other->evb_pressure_);
  swap(brake_pressure_, other->brake_pressure_);
  swap(brake_pressure_spd_, other->brake_pressure_spd_);
  swap(is_deceleration_available_, other->is_deceleration_available_);
  swap(is_deceleration_active_, other->is_deceleration_active_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Deceleration::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Brake::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Brake::kIsBrakePedalPressedFieldNumber;
const int Brake::kIsBrakeForceExistFieldNumber;
const int Brake::kIsBrakeOverHeatFieldNumber;
const int Brake::kIsHandBrakeOnFieldNumber;
const int Brake::kBrakePedalPositionFieldNumber;
const int Brake::kIsBrakeValidFieldNumber;
const int Brake::kBrakeInputFieldNumber;
const int Brake::kBrakeCmdFieldNumber;
const int Brake::kBrakeOutputFieldNumber;
const int Brake::kBooInputFieldNumber;
const int Brake::kBooCmdFieldNumber;
const int Brake::kBooOutputFieldNumber;
const int Brake::kWatchdogApplyingBrakesFieldNumber;
const int Brake::kWatchdogSourceFieldNumber;
const int Brake::kBrakeEnabledFieldNumber;
const int Brake::kDriverOverrideFieldNumber;
const int Brake::kDriverActivityFieldNumber;
const int Brake::kWatchdogFaultFieldNumber;
const int Brake::kChannel1FaultFieldNumber;
const int Brake::kChannel2FaultFieldNumber;
const int Brake::kBooFaultFieldNumber;
const int Brake::kConnectorFaultFieldNumber;
const int Brake::kBrakeTorqueReqFieldNumber;
const int Brake::kHsaStatusFieldNumber;
const int Brake::kBrakeTorqueActFieldNumber;
const int Brake::kHsaModeFieldNumber;
const int Brake::kWheelTorqueActFieldNumber;
const int Brake::kMajorVersionFieldNumber;
const int Brake::kMinorVersionFieldNumber;
const int Brake::kBuildNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Brake::Brake()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Brake.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake)
}
Brake::Brake(const Brake& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brake_pedal_position_, &from.brake_pedal_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&build_number_) -
    reinterpret_cast<char*>(&brake_pedal_position_)) + sizeof(build_number_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake)
}

void Brake::SharedCtor() {
  ::memset(&brake_pedal_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&build_number_) -
      reinterpret_cast<char*>(&brake_pedal_position_)) + sizeof(build_number_));
}

Brake::~Brake() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake)
  SharedDtor();
}

void Brake::SharedDtor() {
}

void Brake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Brake::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Brake& Brake::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Brake.base);
  return *internal_default_instance();
}


void Brake::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&brake_pedal_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&boo_cmd_) -
        reinterpret_cast<char*>(&brake_pedal_position_)) + sizeof(boo_cmd_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&boo_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&driver_override_) -
        reinterpret_cast<char*>(&boo_output_)) + sizeof(driver_override_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&driver_activity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&brake_torque_act_) -
        reinterpret_cast<char*>(&driver_activity_)) + sizeof(brake_torque_act_));
  }
  if (cached_has_bits & 1056964608u) {
    ::memset(&hsa_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&build_number_) -
        reinterpret_cast<char*>(&hsa_status_)) + sizeof(build_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Brake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Brake)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_brake_pedal_pressed = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_brake_pedal_pressed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_brake_pedal_pressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_brake_force_exist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_brake_force_exist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_brake_force_exist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_brake_over_heat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_brake_over_heat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_brake_over_heat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_hand_brake_on = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_hand_brake_on();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hand_brake_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_pedal_position = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_brake_pedal_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_pedal_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_brake_valid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_is_brake_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_brake_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_input = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_brake_input();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_cmd = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_brake_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_output = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_brake_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool boo_input = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_boo_input();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boo_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool boo_cmd = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_boo_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boo_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool boo_output = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_boo_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boo_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool watchdog_applying_brakes = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_watchdog_applying_brakes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watchdog_applying_brakes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 watchdog_source = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_watchdog_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &watchdog_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool brake_enabled = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_brake_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &brake_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool driver_override = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_driver_override();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_override_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool driver_activity = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_driver_activity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool watchdog_fault = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_watchdog_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watchdog_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool channel_1_fault = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_channel_1_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_1_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool channel_2_fault = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_channel_2_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_2_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool boo_fault = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_boo_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boo_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool connector_fault = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_connector_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connector_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_torque_req = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {
          set_has_brake_torque_req();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_torque_req_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Brake_HSAStatusType_IsValid(value)) {
            set_hsa_status(static_cast< ::apollo::canbus::Brake_HSAStatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                24, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_torque_act = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {
          set_has_brake_torque_act();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_torque_act_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Brake_HSAModeType_IsValid(value)) {
            set_hsa_mode(static_cast< ::apollo::canbus::Brake_HSAModeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                26, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_torque_act = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {
          set_has_wheel_torque_act();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_torque_act_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 major_version = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_major_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minor_version = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_minor_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 build_number = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_build_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Brake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Brake)
  return false;
#undef DO_
}

void Brake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Brake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_brake_pedal_pressed = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_brake_pedal_pressed(), output);
  }

  // optional bool is_brake_force_exist = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_brake_force_exist(), output);
  }

  // optional bool is_brake_over_heat = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_brake_over_heat(), output);
  }

  // optional bool is_hand_brake_on = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_hand_brake_on(), output);
  }

  // optional double brake_pedal_position = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->brake_pedal_position(), output);
  }

  // optional bool is_brake_valid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_brake_valid(), output);
  }

  // optional double brake_input = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->brake_input(), output);
  }

  // optional double brake_cmd = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->brake_cmd(), output);
  }

  // optional double brake_output = 9;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->brake_output(), output);
  }

  // optional bool boo_input = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->boo_input(), output);
  }

  // optional bool boo_cmd = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->boo_cmd(), output);
  }

  // optional bool boo_output = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->boo_output(), output);
  }

  // optional bool watchdog_applying_brakes = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->watchdog_applying_brakes(), output);
  }

  // optional int32 watchdog_source = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->watchdog_source(), output);
  }

  // optional bool brake_enabled = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->brake_enabled(), output);
  }

  // optional bool driver_override = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->driver_override(), output);
  }

  // optional bool driver_activity = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->driver_activity(), output);
  }

  // optional bool watchdog_fault = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->watchdog_fault(), output);
  }

  // optional bool channel_1_fault = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->channel_1_fault(), output);
  }

  // optional bool channel_2_fault = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->channel_2_fault(), output);
  }

  // optional bool boo_fault = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->boo_fault(), output);
  }

  // optional bool connector_fault = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->connector_fault(), output);
  }

  // optional double brake_torque_req = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->brake_torque_req(), output);
  }

  // optional .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->hsa_status(), output);
  }

  // optional double brake_torque_act = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->brake_torque_act(), output);
  }

  // optional .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->hsa_mode(), output);
  }

  // optional double wheel_torque_act = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->wheel_torque_act(), output);
  }

  // optional int32 major_version = 28;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->major_version(), output);
  }

  // optional int32 minor_version = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->minor_version(), output);
  }

  // optional int32 build_number = 30;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->build_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Brake)
}

::google::protobuf::uint8* Brake::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_brake_pedal_pressed = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_brake_pedal_pressed(), target);
  }

  // optional bool is_brake_force_exist = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_brake_force_exist(), target);
  }

  // optional bool is_brake_over_heat = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_brake_over_heat(), target);
  }

  // optional bool is_hand_brake_on = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_hand_brake_on(), target);
  }

  // optional double brake_pedal_position = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->brake_pedal_position(), target);
  }

  // optional bool is_brake_valid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_brake_valid(), target);
  }

  // optional double brake_input = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->brake_input(), target);
  }

  // optional double brake_cmd = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->brake_cmd(), target);
  }

  // optional double brake_output = 9;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->brake_output(), target);
  }

  // optional bool boo_input = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->boo_input(), target);
  }

  // optional bool boo_cmd = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->boo_cmd(), target);
  }

  // optional bool boo_output = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->boo_output(), target);
  }

  // optional bool watchdog_applying_brakes = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->watchdog_applying_brakes(), target);
  }

  // optional int32 watchdog_source = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->watchdog_source(), target);
  }

  // optional bool brake_enabled = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->brake_enabled(), target);
  }

  // optional bool driver_override = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->driver_override(), target);
  }

  // optional bool driver_activity = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->driver_activity(), target);
  }

  // optional bool watchdog_fault = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->watchdog_fault(), target);
  }

  // optional bool channel_1_fault = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->channel_1_fault(), target);
  }

  // optional bool channel_2_fault = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->channel_2_fault(), target);
  }

  // optional bool boo_fault = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->boo_fault(), target);
  }

  // optional bool connector_fault = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->connector_fault(), target);
  }

  // optional double brake_torque_req = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->brake_torque_req(), target);
  }

  // optional .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->hsa_status(), target);
  }

  // optional double brake_torque_act = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->brake_torque_act(), target);
  }

  // optional .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      26, this->hsa_mode(), target);
  }

  // optional double wheel_torque_act = 27;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->wheel_torque_act(), target);
  }

  // optional int32 major_version = 28;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->major_version(), target);
  }

  // optional int32 minor_version = 29;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->minor_version(), target);
  }

  // optional int32 build_number = 30;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->build_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake)
  return target;
}

size_t Brake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double brake_pedal_position = 5;
    if (has_brake_pedal_position()) {
      total_size += 1 + 8;
    }

    // optional bool is_brake_pedal_pressed = 1 [default = false];
    if (has_is_brake_pedal_pressed()) {
      total_size += 1 + 1;
    }

    // optional bool is_brake_force_exist = 2;
    if (has_is_brake_force_exist()) {
      total_size += 1 + 1;
    }

    // optional bool is_brake_over_heat = 3;
    if (has_is_brake_over_heat()) {
      total_size += 1 + 1;
    }

    // optional bool is_hand_brake_on = 4;
    if (has_is_hand_brake_on()) {
      total_size += 1 + 1;
    }

    // optional bool is_brake_valid = 6;
    if (has_is_brake_valid()) {
      total_size += 1 + 1;
    }

    // optional bool boo_input = 10;
    if (has_boo_input()) {
      total_size += 1 + 1;
    }

    // optional bool boo_cmd = 11;
    if (has_boo_cmd()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool boo_output = 12;
    if (has_boo_output()) {
      total_size += 1 + 1;
    }

    // optional double brake_input = 7;
    if (has_brake_input()) {
      total_size += 1 + 8;
    }

    // optional double brake_cmd = 8;
    if (has_brake_cmd()) {
      total_size += 1 + 8;
    }

    // optional double brake_output = 9;
    if (has_brake_output()) {
      total_size += 1 + 8;
    }

    // optional int32 watchdog_source = 14;
    if (has_watchdog_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->watchdog_source());
    }

    // optional bool watchdog_applying_brakes = 13;
    if (has_watchdog_applying_brakes()) {
      total_size += 1 + 1;
    }

    // optional bool brake_enabled = 15;
    if (has_brake_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool driver_override = 16;
    if (has_driver_override()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool driver_activity = 17;
    if (has_driver_activity()) {
      total_size += 2 + 1;
    }

    // optional bool watchdog_fault = 18;
    if (has_watchdog_fault()) {
      total_size += 2 + 1;
    }

    // optional bool channel_1_fault = 19;
    if (has_channel_1_fault()) {
      total_size += 2 + 1;
    }

    // optional bool channel_2_fault = 20;
    if (has_channel_2_fault()) {
      total_size += 2 + 1;
    }

    // optional bool boo_fault = 21;
    if (has_boo_fault()) {
      total_size += 2 + 1;
    }

    // optional bool connector_fault = 22;
    if (has_connector_fault()) {
      total_size += 2 + 1;
    }

    // optional double brake_torque_req = 23;
    if (has_brake_torque_req()) {
      total_size += 2 + 8;
    }

    // optional double brake_torque_act = 25;
    if (has_brake_torque_act()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    // optional .apollo.canbus.Brake.HSAStatusType hsa_status = 24;
    if (has_hsa_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hsa_status());
    }

    // optional .apollo.canbus.Brake.HSAModeType hsa_mode = 26;
    if (has_hsa_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hsa_mode());
    }

    // optional double wheel_torque_act = 27;
    if (has_wheel_torque_act()) {
      total_size += 2 + 8;
    }

    // optional int32 major_version = 28;
    if (has_major_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major_version());
    }

    // optional int32 minor_version = 29;
    if (has_minor_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor_version());
    }

    // optional int32 build_number = 30;
    if (has_build_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->build_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Brake>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake)
    MergeFrom(*source);
  }
}

void Brake::MergeFrom(const Brake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      brake_pedal_position_ = from.brake_pedal_position_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_brake_pedal_pressed_ = from.is_brake_pedal_pressed_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_brake_force_exist_ = from.is_brake_force_exist_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_brake_over_heat_ = from.is_brake_over_heat_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_hand_brake_on_ = from.is_hand_brake_on_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_brake_valid_ = from.is_brake_valid_;
    }
    if (cached_has_bits & 0x00000040u) {
      boo_input_ = from.boo_input_;
    }
    if (cached_has_bits & 0x00000080u) {
      boo_cmd_ = from.boo_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      boo_output_ = from.boo_output_;
    }
    if (cached_has_bits & 0x00000200u) {
      brake_input_ = from.brake_input_;
    }
    if (cached_has_bits & 0x00000400u) {
      brake_cmd_ = from.brake_cmd_;
    }
    if (cached_has_bits & 0x00000800u) {
      brake_output_ = from.brake_output_;
    }
    if (cached_has_bits & 0x00001000u) {
      watchdog_source_ = from.watchdog_source_;
    }
    if (cached_has_bits & 0x00002000u) {
      watchdog_applying_brakes_ = from.watchdog_applying_brakes_;
    }
    if (cached_has_bits & 0x00004000u) {
      brake_enabled_ = from.brake_enabled_;
    }
    if (cached_has_bits & 0x00008000u) {
      driver_override_ = from.driver_override_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      driver_activity_ = from.driver_activity_;
    }
    if (cached_has_bits & 0x00020000u) {
      watchdog_fault_ = from.watchdog_fault_;
    }
    if (cached_has_bits & 0x00040000u) {
      channel_1_fault_ = from.channel_1_fault_;
    }
    if (cached_has_bits & 0x00080000u) {
      channel_2_fault_ = from.channel_2_fault_;
    }
    if (cached_has_bits & 0x00100000u) {
      boo_fault_ = from.boo_fault_;
    }
    if (cached_has_bits & 0x00200000u) {
      connector_fault_ = from.connector_fault_;
    }
    if (cached_has_bits & 0x00400000u) {
      brake_torque_req_ = from.brake_torque_req_;
    }
    if (cached_has_bits & 0x00800000u) {
      brake_torque_act_ = from.brake_torque_act_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1056964608u) {
    if (cached_has_bits & 0x01000000u) {
      hsa_status_ = from.hsa_status_;
    }
    if (cached_has_bits & 0x02000000u) {
      hsa_mode_ = from.hsa_mode_;
    }
    if (cached_has_bits & 0x04000000u) {
      wheel_torque_act_ = from.wheel_torque_act_;
    }
    if (cached_has_bits & 0x08000000u) {
      major_version_ = from.major_version_;
    }
    if (cached_has_bits & 0x10000000u) {
      minor_version_ = from.minor_version_;
    }
    if (cached_has_bits & 0x20000000u) {
      build_number_ = from.build_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake::CopyFrom(const Brake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake::IsInitialized() const {
  return true;
}

void Brake::Swap(Brake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Brake::InternalSwap(Brake* other) {
  using std::swap;
  swap(brake_pedal_position_, other->brake_pedal_position_);
  swap(is_brake_pedal_pressed_, other->is_brake_pedal_pressed_);
  swap(is_brake_force_exist_, other->is_brake_force_exist_);
  swap(is_brake_over_heat_, other->is_brake_over_heat_);
  swap(is_hand_brake_on_, other->is_hand_brake_on_);
  swap(is_brake_valid_, other->is_brake_valid_);
  swap(boo_input_, other->boo_input_);
  swap(boo_cmd_, other->boo_cmd_);
  swap(boo_output_, other->boo_output_);
  swap(brake_input_, other->brake_input_);
  swap(brake_cmd_, other->brake_cmd_);
  swap(brake_output_, other->brake_output_);
  swap(watchdog_source_, other->watchdog_source_);
  swap(watchdog_applying_brakes_, other->watchdog_applying_brakes_);
  swap(brake_enabled_, other->brake_enabled_);
  swap(driver_override_, other->driver_override_);
  swap(driver_activity_, other->driver_activity_);
  swap(watchdog_fault_, other->watchdog_fault_);
  swap(channel_1_fault_, other->channel_1_fault_);
  swap(channel_2_fault_, other->channel_2_fault_);
  swap(boo_fault_, other->boo_fault_);
  swap(connector_fault_, other->connector_fault_);
  swap(brake_torque_req_, other->brake_torque_req_);
  swap(brake_torque_act_, other->brake_torque_act_);
  swap(hsa_status_, other->hsa_status_);
  swap(hsa_mode_, other->hsa_mode_);
  swap(wheel_torque_act_, other->wheel_torque_act_);
  swap(major_version_, other->major_version_);
  swap(minor_version_, other->minor_version_);
  swap(build_number_, other->build_number_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Brake::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Epb::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Epb::kIsEpbErrorFieldNumber;
const int Epb::kIsEpbReleasedFieldNumber;
const int Epb::kEpbStatusFieldNumber;
const int Epb::kParkingBrakeStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Epb::Epb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Epb.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Epb)
}
Epb::Epb(const Epb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_epb_error_, &from.is_epb_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&parking_brake_status_) -
    reinterpret_cast<char*>(&is_epb_error_)) + sizeof(parking_brake_status_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Epb)
}

void Epb::SharedCtor() {
  ::memset(&is_epb_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parking_brake_status_) -
      reinterpret_cast<char*>(&is_epb_error_)) + sizeof(parking_brake_status_));
}

Epb::~Epb() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Epb)
  SharedDtor();
}

void Epb::SharedDtor() {
}

void Epb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Epb::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Epb& Epb::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Epb.base);
  return *internal_default_instance();
}


void Epb::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Epb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&is_epb_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parking_brake_status_) -
        reinterpret_cast<char*>(&is_epb_error_)) + sizeof(parking_brake_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Epb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Epb)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_epb_error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_epb_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_epb_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_epb_released = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_epb_released();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_epb_released_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 epb_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_epb_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epb_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Epb_PBrakeType_IsValid(value)) {
            set_parking_brake_status(static_cast< ::apollo::canbus::Epb_PBrakeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Epb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Epb)
  return false;
#undef DO_
}

void Epb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Epb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_epb_error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_epb_error(), output);
  }

  // optional bool is_epb_released = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_epb_released(), output);
  }

  // optional int32 epb_status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->epb_status(), output);
  }

  // optional .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->parking_brake_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Epb)
}

::google::protobuf::uint8* Epb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Epb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_epb_error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_epb_error(), target);
  }

  // optional bool is_epb_released = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_epb_released(), target);
  }

  // optional int32 epb_status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->epb_status(), target);
  }

  // optional .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->parking_brake_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Epb)
  return target;
}

size_t Epb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Epb)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bool is_epb_error = 1;
    if (has_is_epb_error()) {
      total_size += 1 + 1;
    }

    // optional bool is_epb_released = 2;
    if (has_is_epb_released()) {
      total_size += 1 + 1;
    }

    // optional int32 epb_status = 3;
    if (has_epb_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->epb_status());
    }

    // optional .apollo.canbus.Epb.PBrakeType parking_brake_status = 4;
    if (has_parking_brake_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->parking_brake_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Epb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Epb)
  GOOGLE_DCHECK_NE(&from, this);
  const Epb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Epb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Epb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Epb)
    MergeFrom(*source);
  }
}

void Epb::MergeFrom(const Epb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Epb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      is_epb_error_ = from.is_epb_error_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_epb_released_ = from.is_epb_released_;
    }
    if (cached_has_bits & 0x00000004u) {
      epb_status_ = from.epb_status_;
    }
    if (cached_has_bits & 0x00000008u) {
      parking_brake_status_ = from.parking_brake_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Epb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Epb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Epb::CopyFrom(const Epb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Epb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Epb::IsInitialized() const {
  return true;
}

void Epb::Swap(Epb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Epb::InternalSwap(Epb* other) {
  using std::swap;
  swap(is_epb_error_, other->is_epb_error_);
  swap(is_epb_released_, other->is_epb_released_);
  swap(epb_status_, other->epb_status_);
  swap(parking_brake_status_, other->parking_brake_status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Epb::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Gas::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gas::kIsGasPedalErrorFieldNumber;
const int Gas::kIsGasPedalPressedMoreFieldNumber;
const int Gas::kGasPedalPositionFieldNumber;
const int Gas::kIsGasValidFieldNumber;
const int Gas::kThrottleInputFieldNumber;
const int Gas::kThrottleCmdFieldNumber;
const int Gas::kThrottleOutputFieldNumber;
const int Gas::kWatchdogSourceFieldNumber;
const int Gas::kThrottleEnabledFieldNumber;
const int Gas::kDriverOverrideFieldNumber;
const int Gas::kDriverActivityFieldNumber;
const int Gas::kWatchdogFaultFieldNumber;
const int Gas::kChannel1FaultFieldNumber;
const int Gas::kChannel2FaultFieldNumber;
const int Gas::kConnectorFaultFieldNumber;
const int Gas::kAcceleratorPedalFieldNumber;
const int Gas::kAcceleratorPedalRateFieldNumber;
const int Gas::kMajorVersionFieldNumber;
const int Gas::kMinorVersionFieldNumber;
const int Gas::kBuildNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gas::Gas()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Gas.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Gas)
}
Gas::Gas(const Gas& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gas_pedal_position_, &from.gas_pedal_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&build_number_) -
    reinterpret_cast<char*>(&gas_pedal_position_)) + sizeof(build_number_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gas)
}

void Gas::SharedCtor() {
  ::memset(&gas_pedal_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&build_number_) -
      reinterpret_cast<char*>(&gas_pedal_position_)) + sizeof(build_number_));
}

Gas::~Gas() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gas)
  SharedDtor();
}

void Gas::SharedDtor() {
}

void Gas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Gas::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gas& Gas::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Gas.base);
  return *internal_default_instance();
}


void Gas::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&gas_pedal_position_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&throttle_cmd_) -
        reinterpret_cast<char*>(&gas_pedal_position_)) + sizeof(throttle_cmd_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&throttle_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accelerator_pedal_) -
        reinterpret_cast<char*>(&throttle_output_)) + sizeof(accelerator_pedal_));
  }
  if (cached_has_bits & 983040u) {
    ::memset(&accelerator_pedal_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&build_number_) -
        reinterpret_cast<char*>(&accelerator_pedal_rate_)) + sizeof(build_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Gas)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_gas_pedal_error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_gas_pedal_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gas_pedal_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_gas_pedal_pressed_more = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_gas_pedal_pressed_more();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gas_pedal_pressed_more_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gas_pedal_position = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_gas_pedal_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gas_pedal_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_gas_valid = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_gas_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gas_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double throttle_input = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_throttle_input();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double throttle_cmd = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_throttle_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double throttle_output = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_throttle_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 watchdog_source = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_watchdog_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &watchdog_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool throttle_enabled = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_throttle_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &throttle_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool driver_override = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_driver_override();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_override_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool driver_activity = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_driver_activity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool watchdog_fault = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_watchdog_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &watchdog_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool channel_1_fault = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_channel_1_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_1_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool channel_2_fault = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_channel_2_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_2_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool connector_fault = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_connector_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connector_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accelerator_pedal = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_accelerator_pedal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerator_pedal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accelerator_pedal_rate = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_accelerator_pedal_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerator_pedal_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 major_version = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_major_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minor_version = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_minor_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 build_number = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_build_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Gas)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Gas)
  return false;
#undef DO_
}

void Gas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Gas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_gas_pedal_error = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_gas_pedal_error(), output);
  }

  // optional bool is_gas_pedal_pressed_more = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_gas_pedal_pressed_more(), output);
  }

  // optional double gas_pedal_position = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->gas_pedal_position(), output);
  }

  // optional bool is_gas_valid = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_gas_valid(), output);
  }

  // optional double throttle_input = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->throttle_input(), output);
  }

  // optional double throttle_cmd = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->throttle_cmd(), output);
  }

  // optional double throttle_output = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->throttle_output(), output);
  }

  // optional int32 watchdog_source = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->watchdog_source(), output);
  }

  // optional bool throttle_enabled = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->throttle_enabled(), output);
  }

  // optional bool driver_override = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->driver_override(), output);
  }

  // optional bool driver_activity = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->driver_activity(), output);
  }

  // optional bool watchdog_fault = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->watchdog_fault(), output);
  }

  // optional bool channel_1_fault = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->channel_1_fault(), output);
  }

  // optional bool channel_2_fault = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->channel_2_fault(), output);
  }

  // optional bool connector_fault = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->connector_fault(), output);
  }

  // optional double accelerator_pedal = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->accelerator_pedal(), output);
  }

  // optional double accelerator_pedal_rate = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->accelerator_pedal_rate(), output);
  }

  // optional int32 major_version = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->major_version(), output);
  }

  // optional int32 minor_version = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->minor_version(), output);
  }

  // optional int32 build_number = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->build_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Gas)
}

::google::protobuf::uint8* Gas::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gas)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_gas_pedal_error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_gas_pedal_error(), target);
  }

  // optional bool is_gas_pedal_pressed_more = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_gas_pedal_pressed_more(), target);
  }

  // optional double gas_pedal_position = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->gas_pedal_position(), target);
  }

  // optional bool is_gas_valid = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_gas_valid(), target);
  }

  // optional double throttle_input = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->throttle_input(), target);
  }

  // optional double throttle_cmd = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->throttle_cmd(), target);
  }

  // optional double throttle_output = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->throttle_output(), target);
  }

  // optional int32 watchdog_source = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->watchdog_source(), target);
  }

  // optional bool throttle_enabled = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->throttle_enabled(), target);
  }

  // optional bool driver_override = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->driver_override(), target);
  }

  // optional bool driver_activity = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->driver_activity(), target);
  }

  // optional bool watchdog_fault = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->watchdog_fault(), target);
  }

  // optional bool channel_1_fault = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->channel_1_fault(), target);
  }

  // optional bool channel_2_fault = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->channel_2_fault(), target);
  }

  // optional bool connector_fault = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->connector_fault(), target);
  }

  // optional double accelerator_pedal = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->accelerator_pedal(), target);
  }

  // optional double accelerator_pedal_rate = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->accelerator_pedal_rate(), target);
  }

  // optional int32 major_version = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->major_version(), target);
  }

  // optional int32 minor_version = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->minor_version(), target);
  }

  // optional int32 build_number = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->build_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gas)
  return target;
}

size_t Gas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gas)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double gas_pedal_position = 3 [default = 0];
    if (has_gas_pedal_position()) {
      total_size += 1 + 8;
    }

    // optional bool is_gas_pedal_error = 1;
    if (has_is_gas_pedal_error()) {
      total_size += 1 + 1;
    }

    // optional bool is_gas_pedal_pressed_more = 2;
    if (has_is_gas_pedal_pressed_more()) {
      total_size += 1 + 1;
    }

    // optional bool is_gas_valid = 4 [default = false];
    if (has_is_gas_valid()) {
      total_size += 1 + 1;
    }

    // optional bool throttle_enabled = 9;
    if (has_throttle_enabled()) {
      total_size += 1 + 1;
    }

    // optional int32 watchdog_source = 8;
    if (has_watchdog_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->watchdog_source());
    }

    // optional double throttle_input = 5;
    if (has_throttle_input()) {
      total_size += 1 + 8;
    }

    // optional double throttle_cmd = 6;
    if (has_throttle_cmd()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double throttle_output = 7;
    if (has_throttle_output()) {
      total_size += 1 + 8;
    }

    // optional bool driver_override = 10;
    if (has_driver_override()) {
      total_size += 1 + 1;
    }

    // optional bool driver_activity = 11;
    if (has_driver_activity()) {
      total_size += 1 + 1;
    }

    // optional bool watchdog_fault = 12;
    if (has_watchdog_fault()) {
      total_size += 1 + 1;
    }

    // optional bool channel_1_fault = 13;
    if (has_channel_1_fault()) {
      total_size += 1 + 1;
    }

    // optional bool channel_2_fault = 14;
    if (has_channel_2_fault()) {
      total_size += 1 + 1;
    }

    // optional bool connector_fault = 15;
    if (has_connector_fault()) {
      total_size += 1 + 1;
    }

    // optional double accelerator_pedal = 16;
    if (has_accelerator_pedal()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional double accelerator_pedal_rate = 17;
    if (has_accelerator_pedal_rate()) {
      total_size += 2 + 8;
    }

    // optional int32 major_version = 18;
    if (has_major_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major_version());
    }

    // optional int32 minor_version = 19;
    if (has_minor_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor_version());
    }

    // optional int32 build_number = 20;
    if (has_build_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->build_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gas::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Gas)
  GOOGLE_DCHECK_NE(&from, this);
  const Gas* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gas>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Gas)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Gas)
    MergeFrom(*source);
  }
}

void Gas::MergeFrom(const Gas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      gas_pedal_position_ = from.gas_pedal_position_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_gas_pedal_error_ = from.is_gas_pedal_error_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_gas_pedal_pressed_more_ = from.is_gas_pedal_pressed_more_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_gas_valid_ = from.is_gas_valid_;
    }
    if (cached_has_bits & 0x00000010u) {
      throttle_enabled_ = from.throttle_enabled_;
    }
    if (cached_has_bits & 0x00000020u) {
      watchdog_source_ = from.watchdog_source_;
    }
    if (cached_has_bits & 0x00000040u) {
      throttle_input_ = from.throttle_input_;
    }
    if (cached_has_bits & 0x00000080u) {
      throttle_cmd_ = from.throttle_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      throttle_output_ = from.throttle_output_;
    }
    if (cached_has_bits & 0x00000200u) {
      driver_override_ = from.driver_override_;
    }
    if (cached_has_bits & 0x00000400u) {
      driver_activity_ = from.driver_activity_;
    }
    if (cached_has_bits & 0x00000800u) {
      watchdog_fault_ = from.watchdog_fault_;
    }
    if (cached_has_bits & 0x00001000u) {
      channel_1_fault_ = from.channel_1_fault_;
    }
    if (cached_has_bits & 0x00002000u) {
      channel_2_fault_ = from.channel_2_fault_;
    }
    if (cached_has_bits & 0x00004000u) {
      connector_fault_ = from.connector_fault_;
    }
    if (cached_has_bits & 0x00008000u) {
      accelerator_pedal_ = from.accelerator_pedal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      accelerator_pedal_rate_ = from.accelerator_pedal_rate_;
    }
    if (cached_has_bits & 0x00020000u) {
      major_version_ = from.major_version_;
    }
    if (cached_has_bits & 0x00040000u) {
      minor_version_ = from.minor_version_;
    }
    if (cached_has_bits & 0x00080000u) {
      build_number_ = from.build_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gas::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Gas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gas::CopyFrom(const Gas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gas::IsInitialized() const {
  return true;
}

void Gas::Swap(Gas* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gas::InternalSwap(Gas* other) {
  using std::swap;
  swap(gas_pedal_position_, other->gas_pedal_position_);
  swap(is_gas_pedal_error_, other->is_gas_pedal_error_);
  swap(is_gas_pedal_pressed_more_, other->is_gas_pedal_pressed_more_);
  swap(is_gas_valid_, other->is_gas_valid_);
  swap(throttle_enabled_, other->throttle_enabled_);
  swap(watchdog_source_, other->watchdog_source_);
  swap(throttle_input_, other->throttle_input_);
  swap(throttle_cmd_, other->throttle_cmd_);
  swap(throttle_output_, other->throttle_output_);
  swap(driver_override_, other->driver_override_);
  swap(driver_activity_, other->driver_activity_);
  swap(watchdog_fault_, other->watchdog_fault_);
  swap(channel_1_fault_, other->channel_1_fault_);
  swap(channel_2_fault_, other->channel_2_fault_);
  swap(connector_fault_, other->connector_fault_);
  swap(accelerator_pedal_, other->accelerator_pedal_);
  swap(accelerator_pedal_rate_, other->accelerator_pedal_rate_);
  swap(major_version_, other->major_version_);
  swap(minor_version_, other->minor_version_);
  swap(build_number_, other->build_number_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Gas::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Esp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esp::kIsEspAccErrorFieldNumber;
const int Esp::kIsEspOnFieldNumber;
const int Esp::kIsEspActiveFieldNumber;
const int Esp::kIsAbsErrorFieldNumber;
const int Esp::kIsAbsActiveFieldNumber;
const int Esp::kIsTcsvdcFailFieldNumber;
const int Esp::kIsAbsEnabledFieldNumber;
const int Esp::kIsStabActiveFieldNumber;
const int Esp::kIsStabEnabledFieldNumber;
const int Esp::kIsTracActiveFieldNumber;
const int Esp::kIsTracEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esp::Esp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Esp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Esp)
}
Esp::Esp(const Esp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_esp_acc_error_, &from.is_esp_acc_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_trac_enabled_) -
    reinterpret_cast<char*>(&is_esp_acc_error_)) + sizeof(is_trac_enabled_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Esp)
}

void Esp::SharedCtor() {
  ::memset(&is_esp_acc_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_trac_enabled_) -
      reinterpret_cast<char*>(&is_esp_acc_error_)) + sizeof(is_trac_enabled_));
}

Esp::~Esp() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Esp)
  SharedDtor();
}

void Esp::SharedDtor() {
}

void Esp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Esp::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esp& Esp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Esp.base);
  return *internal_default_instance();
}


void Esp::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Esp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&is_esp_acc_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_stab_active_) -
        reinterpret_cast<char*>(&is_esp_acc_error_)) + sizeof(is_stab_active_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&is_stab_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_trac_enabled_) -
        reinterpret_cast<char*>(&is_stab_enabled_)) + sizeof(is_trac_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Esp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_esp_acc_error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_esp_acc_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_esp_acc_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_esp_on = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_esp_on();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_esp_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_esp_active = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_esp_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_esp_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_abs_error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_abs_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_abs_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_abs_active = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_is_abs_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_abs_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_tcsvdc_fail = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_is_tcsvdc_fail();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tcsvdc_fail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_abs_enabled = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_is_abs_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_abs_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_stab_active = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_is_stab_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stab_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_stab_enabled = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_is_stab_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stab_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_trac_active = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_is_trac_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trac_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_trac_enabled = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_is_trac_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trac_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Esp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Esp)
  return false;
#undef DO_
}

void Esp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Esp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_esp_acc_error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_esp_acc_error(), output);
  }

  // optional bool is_esp_on = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_esp_on(), output);
  }

  // optional bool is_esp_active = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_esp_active(), output);
  }

  // optional bool is_abs_error = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_abs_error(), output);
  }

  // optional bool is_abs_active = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_abs_active(), output);
  }

  // optional bool is_tcsvdc_fail = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_tcsvdc_fail(), output);
  }

  // optional bool is_abs_enabled = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_abs_enabled(), output);
  }

  // optional bool is_stab_active = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_stab_active(), output);
  }

  // optional bool is_stab_enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_stab_enabled(), output);
  }

  // optional bool is_trac_active = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_trac_active(), output);
  }

  // optional bool is_trac_enabled = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_trac_enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Esp)
}

::google::protobuf::uint8* Esp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Esp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_esp_acc_error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_esp_acc_error(), target);
  }

  // optional bool is_esp_on = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_esp_on(), target);
  }

  // optional bool is_esp_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_esp_active(), target);
  }

  // optional bool is_abs_error = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_abs_error(), target);
  }

  // optional bool is_abs_active = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_abs_active(), target);
  }

  // optional bool is_tcsvdc_fail = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_tcsvdc_fail(), target);
  }

  // optional bool is_abs_enabled = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_abs_enabled(), target);
  }

  // optional bool is_stab_active = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_stab_active(), target);
  }

  // optional bool is_stab_enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_stab_enabled(), target);
  }

  // optional bool is_trac_active = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_trac_active(), target);
  }

  // optional bool is_trac_enabled = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_trac_enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Esp)
  return target;
}

size_t Esp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Esp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bool is_esp_acc_error = 1;
    if (has_is_esp_acc_error()) {
      total_size += 1 + 1;
    }

    // optional bool is_esp_on = 2;
    if (has_is_esp_on()) {
      total_size += 1 + 1;
    }

    // optional bool is_esp_active = 3;
    if (has_is_esp_active()) {
      total_size += 1 + 1;
    }

    // optional bool is_abs_error = 4;
    if (has_is_abs_error()) {
      total_size += 1 + 1;
    }

    // optional bool is_abs_active = 5;
    if (has_is_abs_active()) {
      total_size += 1 + 1;
    }

    // optional bool is_tcsvdc_fail = 6;
    if (has_is_tcsvdc_fail()) {
      total_size += 1 + 1;
    }

    // optional bool is_abs_enabled = 7;
    if (has_is_abs_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool is_stab_active = 8;
    if (has_is_stab_active()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional bool is_stab_enabled = 9;
    if (has_is_stab_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool is_trac_active = 10;
    if (has_is_trac_active()) {
      total_size += 1 + 1;
    }

    // optional bool is_trac_enabled = 11;
    if (has_is_trac_enabled()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Esp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Esp)
  GOOGLE_DCHECK_NE(&from, this);
  const Esp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Esp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Esp)
    MergeFrom(*source);
  }
}

void Esp::MergeFrom(const Esp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Esp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      is_esp_acc_error_ = from.is_esp_acc_error_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_esp_on_ = from.is_esp_on_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_esp_active_ = from.is_esp_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_abs_error_ = from.is_abs_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_abs_active_ = from.is_abs_active_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_tcsvdc_fail_ = from.is_tcsvdc_fail_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_abs_enabled_ = from.is_abs_enabled_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_stab_active_ = from.is_stab_active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      is_stab_enabled_ = from.is_stab_enabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_trac_active_ = from.is_trac_active_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_trac_enabled_ = from.is_trac_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Esp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esp::CopyFrom(const Esp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Esp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esp::IsInitialized() const {
  return true;
}

void Esp::Swap(Esp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esp::InternalSwap(Esp* other) {
  using std::swap;
  swap(is_esp_acc_error_, other->is_esp_acc_error_);
  swap(is_esp_on_, other->is_esp_on_);
  swap(is_esp_active_, other->is_esp_active_);
  swap(is_abs_error_, other->is_abs_error_);
  swap(is_abs_active_, other->is_abs_active_);
  swap(is_tcsvdc_fail_, other->is_tcsvdc_fail_);
  swap(is_abs_enabled_, other->is_abs_enabled_);
  swap(is_stab_active_, other->is_stab_active_);
  swap(is_stab_enabled_, other->is_stab_enabled_);
  swap(is_trac_active_, other->is_trac_active_);
  swap(is_trac_enabled_, other->is_trac_enabled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Esp::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ems::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ems::kIsEngineAccAvailableFieldNumber;
const int Ems::kIsEngineAccErrorFieldNumber;
const int Ems::kEngineStateFieldNumber;
const int Ems::kMaxEngineTorqPercentFieldNumber;
const int Ems::kMinEngineTorqPercentFieldNumber;
const int Ems::kBaseEngineTorqConstantFieldNumber;
const int Ems::kIsEngineSpeedErrorFieldNumber;
const int Ems::kEngineSpeedFieldNumber;
const int Ems::kEngineTorqueFieldNumber;
const int Ems::kIsOverEngineTorqueFieldNumber;
const int Ems::kEngineRpmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ems::Ems()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Ems.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Ems)
}
Ems::Ems(const Ems& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_engine_torq_percent_, &from.max_engine_torq_percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&engine_rpm_) -
    reinterpret_cast<char*>(&max_engine_torq_percent_)) + sizeof(engine_rpm_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Ems)
}

void Ems::SharedCtor() {
  ::memset(&max_engine_torq_percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&engine_rpm_) -
      reinterpret_cast<char*>(&max_engine_torq_percent_)) + sizeof(engine_rpm_));
}

Ems::~Ems() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Ems)
  SharedDtor();
}

void Ems::SharedDtor() {
}

void Ems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ems::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ems& Ems::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Ems.base);
  return *internal_default_instance();
}


void Ems::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Ems)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&max_engine_torq_percent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&base_engine_torq_constant_) -
        reinterpret_cast<char*>(&max_engine_torq_percent_)) + sizeof(base_engine_torq_constant_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&engine_torque_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&engine_rpm_) -
        reinterpret_cast<char*>(&engine_torque_)) + sizeof(engine_rpm_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Ems)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_engine_acc_available = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_engine_acc_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_engine_acc_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_engine_acc_error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_engine_acc_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_engine_acc_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Ems.Type engine_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Ems_Type_IsValid(value)) {
            set_engine_state(static_cast< ::apollo::canbus::Ems_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_engine_torq_percent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_max_engine_torq_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_engine_torq_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_engine_torq_percent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_min_engine_torq_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_engine_torq_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 base_engine_torq_constant = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_base_engine_torq_constant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_engine_torq_constant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_engine_speed_error = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_is_engine_speed_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_engine_speed_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double engine_speed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_engine_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &engine_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 engine_torque = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_engine_torque();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &engine_torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_over_engine_torque = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_is_over_engine_torque();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_over_engine_torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double engine_rpm = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_engine_rpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &engine_rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Ems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Ems)
  return false;
#undef DO_
}

void Ems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Ems)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_engine_acc_available = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_engine_acc_available(), output);
  }

  // optional bool is_engine_acc_error = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_engine_acc_error(), output);
  }

  // optional .apollo.canbus.Ems.Type engine_state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->engine_state(), output);
  }

  // optional double max_engine_torq_percent = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_engine_torq_percent(), output);
  }

  // optional double min_engine_torq_percent = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->min_engine_torq_percent(), output);
  }

  // optional int32 base_engine_torq_constant = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->base_engine_torq_constant(), output);
  }

  // optional bool is_engine_speed_error = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_engine_speed_error(), output);
  }

  // optional double engine_speed = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->engine_speed(), output);
  }

  // optional int32 engine_torque = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->engine_torque(), output);
  }

  // optional bool is_over_engine_torque = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_over_engine_torque(), output);
  }

  // optional double engine_rpm = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->engine_rpm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Ems)
}

::google::protobuf::uint8* Ems::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Ems)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_engine_acc_available = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_engine_acc_available(), target);
  }

  // optional bool is_engine_acc_error = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_engine_acc_error(), target);
  }

  // optional .apollo.canbus.Ems.Type engine_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->engine_state(), target);
  }

  // optional double max_engine_torq_percent = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_engine_torq_percent(), target);
  }

  // optional double min_engine_torq_percent = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->min_engine_torq_percent(), target);
  }

  // optional int32 base_engine_torq_constant = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->base_engine_torq_constant(), target);
  }

  // optional bool is_engine_speed_error = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_engine_speed_error(), target);
  }

  // optional double engine_speed = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->engine_speed(), target);
  }

  // optional int32 engine_torque = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->engine_torque(), target);
  }

  // optional bool is_over_engine_torque = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_over_engine_torque(), target);
  }

  // optional double engine_rpm = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->engine_rpm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Ems)
  return target;
}

size_t Ems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Ems)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double max_engine_torq_percent = 4;
    if (has_max_engine_torq_percent()) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Ems.Type engine_state = 3;
    if (has_engine_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->engine_state());
    }

    // optional bool is_engine_acc_available = 1;
    if (has_is_engine_acc_available()) {
      total_size += 1 + 1;
    }

    // optional bool is_engine_acc_error = 2;
    if (has_is_engine_acc_error()) {
      total_size += 1 + 1;
    }

    // optional bool is_engine_speed_error = 7;
    if (has_is_engine_speed_error()) {
      total_size += 1 + 1;
    }

    // optional bool is_over_engine_torque = 10;
    if (has_is_over_engine_torque()) {
      total_size += 1 + 1;
    }

    // optional double min_engine_torq_percent = 5;
    if (has_min_engine_torq_percent()) {
      total_size += 1 + 8;
    }

    // optional int32 base_engine_torq_constant = 6;
    if (has_base_engine_torq_constant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_engine_torq_constant());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 engine_torque = 9;
    if (has_engine_torque()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->engine_torque());
    }

    // optional double engine_speed = 8;
    if (has_engine_speed()) {
      total_size += 1 + 8;
    }

    // optional double engine_rpm = 11;
    if (has_engine_rpm()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ems::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Ems)
  GOOGLE_DCHECK_NE(&from, this);
  const Ems* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ems>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Ems)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Ems)
    MergeFrom(*source);
  }
}

void Ems::MergeFrom(const Ems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Ems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      max_engine_torq_percent_ = from.max_engine_torq_percent_;
    }
    if (cached_has_bits & 0x00000002u) {
      engine_state_ = from.engine_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_engine_acc_available_ = from.is_engine_acc_available_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_engine_acc_error_ = from.is_engine_acc_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_engine_speed_error_ = from.is_engine_speed_error_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_over_engine_torque_ = from.is_over_engine_torque_;
    }
    if (cached_has_bits & 0x00000040u) {
      min_engine_torq_percent_ = from.min_engine_torq_percent_;
    }
    if (cached_has_bits & 0x00000080u) {
      base_engine_torq_constant_ = from.base_engine_torq_constant_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      engine_torque_ = from.engine_torque_;
    }
    if (cached_has_bits & 0x00000200u) {
      engine_speed_ = from.engine_speed_;
    }
    if (cached_has_bits & 0x00000400u) {
      engine_rpm_ = from.engine_rpm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ems::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Ems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ems::CopyFrom(const Ems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Ems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ems::IsInitialized() const {
  return true;
}

void Ems::Swap(Ems* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ems::InternalSwap(Ems* other) {
  using std::swap;
  swap(max_engine_torq_percent_, other->max_engine_torq_percent_);
  swap(engine_state_, other->engine_state_);
  swap(is_engine_acc_available_, other->is_engine_acc_available_);
  swap(is_engine_acc_error_, other->is_engine_acc_error_);
  swap(is_engine_speed_error_, other->is_engine_speed_error_);
  swap(is_over_engine_torque_, other->is_over_engine_torque_);
  swap(min_engine_torq_percent_, other->min_engine_torq_percent_);
  swap(base_engine_torq_constant_, other->base_engine_torq_constant_);
  swap(engine_torque_, other->engine_torque_);
  swap(engine_speed_, other->engine_speed_);
  swap(engine_rpm_, other->engine_rpm_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ems::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Gear::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gear::kIsShiftPositionValidFieldNumber;
const int Gear::kGearStateFieldNumber;
const int Gear::kDriverOverrideFieldNumber;
const int Gear::kGearCmdFieldNumber;
const int Gear::kCanbusFaultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gear::Gear()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Gear.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Gear)
}
Gear::Gear(const Gear& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gear_state_, &from.gear_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_cmd_) -
    reinterpret_cast<char*>(&gear_state_)) + sizeof(gear_cmd_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gear)
}

void Gear::SharedCtor() {
  ::memset(&gear_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_cmd_) -
      reinterpret_cast<char*>(&gear_state_)) + sizeof(gear_cmd_));
}

Gear::~Gear() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gear)
  SharedDtor();
}

void Gear::SharedDtor() {
}

void Gear::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Gear::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gear& Gear::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Gear.base);
  return *internal_default_instance();
}


void Gear::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gear)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&gear_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gear_cmd_) -
        reinterpret_cast<char*>(&gear_state_)) + sizeof(gear_cmd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gear::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Gear)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_shift_position_valid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_shift_position_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_shift_position_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.GearPosition gear_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear_state(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool driver_override = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_driver_override();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &driver_override_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear_cmd(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool canbus_fault = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_canbus_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canbus_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Gear)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Gear)
  return false;
#undef DO_
}

void Gear::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Gear)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_shift_position_valid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_shift_position_valid(), output);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_state = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gear_state(), output);
  }

  // optional bool driver_override = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->driver_override(), output);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->gear_cmd(), output);
  }

  // optional bool canbus_fault = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->canbus_fault(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Gear)
}

::google::protobuf::uint8* Gear::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gear)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_shift_position_valid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_shift_position_valid(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->gear_state(), target);
  }

  // optional bool driver_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->driver_override(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->gear_cmd(), target);
  }

  // optional bool canbus_fault = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->canbus_fault(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gear)
  return target;
}

size_t Gear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gear)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .apollo.canbus.Chassis.GearPosition gear_state = 2;
    if (has_gear_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_state());
    }

    // optional bool is_shift_position_valid = 1;
    if (has_is_shift_position_valid()) {
      total_size += 1 + 1;
    }

    // optional bool driver_override = 3;
    if (has_driver_override()) {
      total_size += 1 + 1;
    }

    // optional bool canbus_fault = 5;
    if (has_canbus_fault()) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Chassis.GearPosition gear_cmd = 4;
    if (has_gear_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_cmd());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gear::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Gear)
  GOOGLE_DCHECK_NE(&from, this);
  const Gear* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gear>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Gear)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Gear)
    MergeFrom(*source);
  }
}

void Gear::MergeFrom(const Gear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gear)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      gear_state_ = from.gear_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_shift_position_valid_ = from.is_shift_position_valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      driver_override_ = from.driver_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      canbus_fault_ = from.canbus_fault_;
    }
    if (cached_has_bits & 0x00000010u) {
      gear_cmd_ = from.gear_cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gear::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Gear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gear::CopyFrom(const Gear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gear::IsInitialized() const {
  return true;
}

void Gear::Swap(Gear* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gear::InternalSwap(Gear* other) {
  using std::swap;
  swap(gear_state_, other->gear_state_);
  swap(is_shift_position_valid_, other->is_shift_position_valid_);
  swap(driver_override_, other->driver_override_);
  swap(canbus_fault_, other->canbus_fault_);
  swap(gear_cmd_, other->gear_cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Gear::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Safety::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Safety::kIsDriverCarDoorCloseFieldNumber;
const int Safety::kIsDriverBuckledFieldNumber;
const int Safety::kEmergencyButtonFieldNumber;
const int Safety::kHasErrorFieldNumber;
const int Safety::kIsMotorInvertorFaultFieldNumber;
const int Safety::kIsSystemFaultFieldNumber;
const int Safety::kIsPowerBatteryFaultFieldNumber;
const int Safety::kIsMotorInvertorOverTemperatureFieldNumber;
const int Safety::kIsSmallBatteryChargeDischargeFaultFieldNumber;
const int Safety::kDrivingModeFieldNumber;
const int Safety::kIsPassengerDoorOpenFieldNumber;
const int Safety::kIsRearleftDoorOpenFieldNumber;
const int Safety::kIsRearrightDoorOpenFieldNumber;
const int Safety::kIsHoodOpenFieldNumber;
const int Safety::kIsTrunkOpenFieldNumber;
const int Safety::kIsPassengerDetectedFieldNumber;
const int Safety::kIsPassengerAirbagEnabledFieldNumber;
const int Safety::kIsPassengerBuckledFieldNumber;
const int Safety::kFrontLeftTirePressFieldNumber;
const int Safety::kFrontRightTirePressFieldNumber;
const int Safety::kRearLeftTirePressFieldNumber;
const int Safety::kRearRightTirePressFieldNumber;
const int Safety::kCarDrivingModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Safety::Safety()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Safety.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Safety)
}
Safety::Safety(const Safety& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&emergency_button_, &from.emergency_button_,
    static_cast<size_t>(reinterpret_cast<char*>(&car_driving_mode_) -
    reinterpret_cast<char*>(&emergency_button_)) + sizeof(car_driving_mode_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Safety)
}

void Safety::SharedCtor() {
  ::memset(&emergency_button_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&car_driving_mode_) -
      reinterpret_cast<char*>(&emergency_button_)) + sizeof(car_driving_mode_));
}

Safety::~Safety() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Safety)
  SharedDtor();
}

void Safety::SharedDtor() {
}

void Safety::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Safety::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Safety& Safety::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Safety.base);
  return *internal_default_instance();
}


void Safety::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Safety)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&emergency_button_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_motor_invertor_over_temperature_) -
        reinterpret_cast<char*>(&emergency_button_)) + sizeof(is_motor_invertor_over_temperature_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&is_small_battery_charge_discharge_fault_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_passenger_detected_) -
        reinterpret_cast<char*>(&is_small_battery_charge_discharge_fault_)) + sizeof(is_passenger_detected_));
  }
  if (cached_has_bits & 8323072u) {
    ::memset(&is_passenger_airbag_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&car_driving_mode_) -
        reinterpret_cast<char*>(&is_passenger_airbag_enabled_)) + sizeof(car_driving_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Safety::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Safety)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_driver_car_door_close = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_driver_car_door_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_driver_car_door_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_driver_buckled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_driver_buckled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_driver_buckled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 emergency_button = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_emergency_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emergency_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_error = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_has_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_motor_invertor_fault = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_is_motor_invertor_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_motor_invertor_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_system_fault = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_is_system_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_system_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_power_battery_fault = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_is_power_battery_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_power_battery_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_motor_invertor_over_temperature = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_is_motor_invertor_over_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_motor_invertor_over_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_small_battery_charge_discharge_fault = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_is_small_battery_charge_discharge_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_small_battery_charge_discharge_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 driving_mode = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_driving_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &driving_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_passenger_door_open = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_is_passenger_door_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passenger_door_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_rearleft_door_open = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_is_rearleft_door_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rearleft_door_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_rearright_door_open = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_is_rearright_door_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rearright_door_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_hood_open = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_is_hood_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hood_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_trunk_open = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_is_trunk_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trunk_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_passenger_detected = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_is_passenger_detected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passenger_detected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_passenger_airbag_enabled = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_is_passenger_airbag_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passenger_airbag_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_passenger_buckled = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_is_passenger_buckled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passenger_buckled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 front_left_tire_press = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_front_left_tire_press();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_left_tire_press_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 front_right_tire_press = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_front_right_tire_press();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &front_right_tire_press_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rear_left_tire_press = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_rear_left_tire_press();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rear_left_tire_press_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rear_right_tire_press = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_rear_right_tire_press();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rear_right_tire_press_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_DrivingMode_IsValid(value)) {
            set_car_driving_mode(static_cast< ::apollo::canbus::Chassis_DrivingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                23, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Safety)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Safety)
  return false;
#undef DO_
}

void Safety::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Safety)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_driver_car_door_close = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_driver_car_door_close(), output);
  }

  // optional bool is_driver_buckled = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_driver_buckled(), output);
  }

  // optional int32 emergency_button = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->emergency_button(), output);
  }

  // optional bool has_error = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->has_error(), output);
  }

  // optional bool is_motor_invertor_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_motor_invertor_fault(), output);
  }

  // optional bool is_system_fault = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_system_fault(), output);
  }

  // optional bool is_power_battery_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_power_battery_fault(), output);
  }

  // optional bool is_motor_invertor_over_temperature = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_motor_invertor_over_temperature(), output);
  }

  // optional bool is_small_battery_charge_discharge_fault = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_small_battery_charge_discharge_fault(), output);
  }

  // optional int32 driving_mode = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->driving_mode(), output);
  }

  // optional bool is_passenger_door_open = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_passenger_door_open(), output);
  }

  // optional bool is_rearleft_door_open = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_rearleft_door_open(), output);
  }

  // optional bool is_rearright_door_open = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_rearright_door_open(), output);
  }

  // optional bool is_hood_open = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_hood_open(), output);
  }

  // optional bool is_trunk_open = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_trunk_open(), output);
  }

  // optional bool is_passenger_detected = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_passenger_detected(), output);
  }

  // optional bool is_passenger_airbag_enabled = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_passenger_airbag_enabled(), output);
  }

  // optional bool is_passenger_buckled = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_passenger_buckled(), output);
  }

  // optional int32 front_left_tire_press = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->front_left_tire_press(), output);
  }

  // optional int32 front_right_tire_press = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->front_right_tire_press(), output);
  }

  // optional int32 rear_left_tire_press = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->rear_left_tire_press(), output);
  }

  // optional int32 rear_right_tire_press = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->rear_right_tire_press(), output);
  }

  // optional .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->car_driving_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Safety)
}

::google::protobuf::uint8* Safety::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Safety)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_driver_car_door_close = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_driver_car_door_close(), target);
  }

  // optional bool is_driver_buckled = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_driver_buckled(), target);
  }

  // optional int32 emergency_button = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->emergency_button(), target);
  }

  // optional bool has_error = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->has_error(), target);
  }

  // optional bool is_motor_invertor_fault = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_motor_invertor_fault(), target);
  }

  // optional bool is_system_fault = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_system_fault(), target);
  }

  // optional bool is_power_battery_fault = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_power_battery_fault(), target);
  }

  // optional bool is_motor_invertor_over_temperature = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_motor_invertor_over_temperature(), target);
  }

  // optional bool is_small_battery_charge_discharge_fault = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_small_battery_charge_discharge_fault(), target);
  }

  // optional int32 driving_mode = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->driving_mode(), target);
  }

  // optional bool is_passenger_door_open = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_passenger_door_open(), target);
  }

  // optional bool is_rearleft_door_open = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_rearleft_door_open(), target);
  }

  // optional bool is_rearright_door_open = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_rearright_door_open(), target);
  }

  // optional bool is_hood_open = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_hood_open(), target);
  }

  // optional bool is_trunk_open = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_trunk_open(), target);
  }

  // optional bool is_passenger_detected = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_passenger_detected(), target);
  }

  // optional bool is_passenger_airbag_enabled = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_passenger_airbag_enabled(), target);
  }

  // optional bool is_passenger_buckled = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_passenger_buckled(), target);
  }

  // optional int32 front_left_tire_press = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->front_left_tire_press(), target);
  }

  // optional int32 front_right_tire_press = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->front_right_tire_press(), target);
  }

  // optional int32 rear_left_tire_press = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->rear_left_tire_press(), target);
  }

  // optional int32 rear_right_tire_press = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->rear_right_tire_press(), target);
  }

  // optional .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->car_driving_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Safety)
  return target;
}

size_t Safety::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Safety)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 emergency_button = 3;
    if (has_emergency_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->emergency_button());
    }

    // optional bool is_driver_car_door_close = 1;
    if (has_is_driver_car_door_close()) {
      total_size += 1 + 1;
    }

    // optional bool is_driver_buckled = 2;
    if (has_is_driver_buckled()) {
      total_size += 1 + 1;
    }

    // optional bool has_error = 4 [default = false];
    if (has_has_error()) {
      total_size += 1 + 1;
    }

    // optional bool is_motor_invertor_fault = 5;
    if (has_is_motor_invertor_fault()) {
      total_size += 1 + 1;
    }

    // optional bool is_system_fault = 6;
    if (has_is_system_fault()) {
      total_size += 1 + 1;
    }

    // optional bool is_power_battery_fault = 7;
    if (has_is_power_battery_fault()) {
      total_size += 1 + 1;
    }

    // optional bool is_motor_invertor_over_temperature = 8;
    if (has_is_motor_invertor_over_temperature()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool is_small_battery_charge_discharge_fault = 9;
    if (has_is_small_battery_charge_discharge_fault()) {
      total_size += 1 + 1;
    }

    // optional int32 driving_mode = 10;
    if (has_driving_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->driving_mode());
    }

    // optional bool is_passenger_door_open = 11;
    if (has_is_passenger_door_open()) {
      total_size += 1 + 1;
    }

    // optional bool is_rearleft_door_open = 12;
    if (has_is_rearleft_door_open()) {
      total_size += 1 + 1;
    }

    // optional bool is_rearright_door_open = 13;
    if (has_is_rearright_door_open()) {
      total_size += 1 + 1;
    }

    // optional bool is_hood_open = 14;
    if (has_is_hood_open()) {
      total_size += 1 + 1;
    }

    // optional bool is_trunk_open = 15;
    if (has_is_trunk_open()) {
      total_size += 1 + 1;
    }

    // optional bool is_passenger_detected = 16;
    if (has_is_passenger_detected()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional bool is_passenger_airbag_enabled = 17;
    if (has_is_passenger_airbag_enabled()) {
      total_size += 2 + 1;
    }

    // optional bool is_passenger_buckled = 18;
    if (has_is_passenger_buckled()) {
      total_size += 2 + 1;
    }

    // optional int32 front_left_tire_press = 19;
    if (has_front_left_tire_press()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->front_left_tire_press());
    }

    // optional int32 front_right_tire_press = 20;
    if (has_front_right_tire_press()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->front_right_tire_press());
    }

    // optional int32 rear_left_tire_press = 21;
    if (has_rear_left_tire_press()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rear_left_tire_press());
    }

    // optional int32 rear_right_tire_press = 22;
    if (has_rear_right_tire_press()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rear_right_tire_press());
    }

    // optional .apollo.canbus.Chassis.DrivingMode car_driving_mode = 23;
    if (has_car_driving_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->car_driving_mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Safety::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Safety)
  GOOGLE_DCHECK_NE(&from, this);
  const Safety* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Safety>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Safety)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Safety)
    MergeFrom(*source);
  }
}

void Safety::MergeFrom(const Safety& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Safety)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      emergency_button_ = from.emergency_button_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_driver_car_door_close_ = from.is_driver_car_door_close_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_driver_buckled_ = from.is_driver_buckled_;
    }
    if (cached_has_bits & 0x00000008u) {
      has_error_ = from.has_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_motor_invertor_fault_ = from.is_motor_invertor_fault_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_system_fault_ = from.is_system_fault_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_power_battery_fault_ = from.is_power_battery_fault_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_motor_invertor_over_temperature_ = from.is_motor_invertor_over_temperature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      is_small_battery_charge_discharge_fault_ = from.is_small_battery_charge_discharge_fault_;
    }
    if (cached_has_bits & 0x00000200u) {
      driving_mode_ = from.driving_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_passenger_door_open_ = from.is_passenger_door_open_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_rearleft_door_open_ = from.is_rearleft_door_open_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_rearright_door_open_ = from.is_rearright_door_open_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_hood_open_ = from.is_hood_open_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_trunk_open_ = from.is_trunk_open_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_passenger_detected_ = from.is_passenger_detected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      is_passenger_airbag_enabled_ = from.is_passenger_airbag_enabled_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_passenger_buckled_ = from.is_passenger_buckled_;
    }
    if (cached_has_bits & 0x00040000u) {
      front_left_tire_press_ = from.front_left_tire_press_;
    }
    if (cached_has_bits & 0x00080000u) {
      front_right_tire_press_ = from.front_right_tire_press_;
    }
    if (cached_has_bits & 0x00100000u) {
      rear_left_tire_press_ = from.rear_left_tire_press_;
    }
    if (cached_has_bits & 0x00200000u) {
      rear_right_tire_press_ = from.rear_right_tire_press_;
    }
    if (cached_has_bits & 0x00400000u) {
      car_driving_mode_ = from.car_driving_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Safety::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Safety)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Safety::CopyFrom(const Safety& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Safety)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Safety::IsInitialized() const {
  return true;
}

void Safety::Swap(Safety* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Safety::InternalSwap(Safety* other) {
  using std::swap;
  swap(emergency_button_, other->emergency_button_);
  swap(is_driver_car_door_close_, other->is_driver_car_door_close_);
  swap(is_driver_buckled_, other->is_driver_buckled_);
  swap(has_error_, other->has_error_);
  swap(is_motor_invertor_fault_, other->is_motor_invertor_fault_);
  swap(is_system_fault_, other->is_system_fault_);
  swap(is_power_battery_fault_, other->is_power_battery_fault_);
  swap(is_motor_invertor_over_temperature_, other->is_motor_invertor_over_temperature_);
  swap(is_small_battery_charge_discharge_fault_, other->is_small_battery_charge_discharge_fault_);
  swap(driving_mode_, other->driving_mode_);
  swap(is_passenger_door_open_, other->is_passenger_door_open_);
  swap(is_rearleft_door_open_, other->is_rearleft_door_open_);
  swap(is_rearright_door_open_, other->is_rearright_door_open_);
  swap(is_hood_open_, other->is_hood_open_);
  swap(is_trunk_open_, other->is_trunk_open_);
  swap(is_passenger_detected_, other->is_passenger_detected_);
  swap(is_passenger_airbag_enabled_, other->is_passenger_airbag_enabled_);
  swap(is_passenger_buckled_, other->is_passenger_buckled_);
  swap(front_left_tire_press_, other->front_left_tire_press_);
  swap(front_right_tire_press_, other->front_right_tire_press_);
  swap(rear_left_tire_press_, other->rear_left_tire_press_);
  swap(rear_right_tire_press_, other->rear_right_tire_press_);
  swap(car_driving_mode_, other->car_driving_mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Safety::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BasicInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasicInfo::kIsAutoModeFieldNumber;
const int BasicInfo::kPowerStateFieldNumber;
const int BasicInfo::kIsAirBagDeployedFieldNumber;
const int BasicInfo::kOdoMeterFieldNumber;
const int BasicInfo::kDriveRangeFieldNumber;
const int BasicInfo::kIsSystemErrorFieldNumber;
const int BasicInfo::kIsHumanInterruptFieldNumber;
const int BasicInfo::kAccOnButtonFieldNumber;
const int BasicInfo::kAccOffButtonFieldNumber;
const int BasicInfo::kAccResButtonFieldNumber;
const int BasicInfo::kAccCancelButtonFieldNumber;
const int BasicInfo::kAccOnOffButtonFieldNumber;
const int BasicInfo::kAccResCancelButtonFieldNumber;
const int BasicInfo::kAccIncSpdButtonFieldNumber;
const int BasicInfo::kAccDecSpdButtonFieldNumber;
const int BasicInfo::kAccIncGapButtonFieldNumber;
const int BasicInfo::kAccDecGapButtonFieldNumber;
const int BasicInfo::kLkaButtonFieldNumber;
const int BasicInfo::kCanbusFaultFieldNumber;
const int BasicInfo::kLatitudeFieldNumber;
const int BasicInfo::kLongitudeFieldNumber;
const int BasicInfo::kGpsValidFieldNumber;
const int BasicInfo::kYearFieldNumber;
const int BasicInfo::kMonthFieldNumber;
const int BasicInfo::kDayFieldNumber;
const int BasicInfo::kHoursFieldNumber;
const int BasicInfo::kMinutesFieldNumber;
const int BasicInfo::kSecondsFieldNumber;
const int BasicInfo::kCompassDirectionFieldNumber;
const int BasicInfo::kPdopFieldNumber;
const int BasicInfo::kIsGpsFaultFieldNumber;
const int BasicInfo::kIsInferredFieldNumber;
const int BasicInfo::kAltitudeFieldNumber;
const int BasicInfo::kHeadingFieldNumber;
const int BasicInfo::kHdopFieldNumber;
const int BasicInfo::kVdopFieldNumber;
const int BasicInfo::kQualityFieldNumber;
const int BasicInfo::kNumSatellitesFieldNumber;
const int BasicInfo::kGpsSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasicInfo::BasicInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_BasicInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.BasicInfo)
}
BasicInfo::BasicInfo(const BasicInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&power_state_, &from.power_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&gps_speed_) -
    reinterpret_cast<char*>(&power_state_)) + sizeof(gps_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.BasicInfo)
}

void BasicInfo::SharedCtor() {
  ::memset(&power_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gps_speed_) -
      reinterpret_cast<char*>(&power_state_)) + sizeof(gps_speed_));
}

BasicInfo::~BasicInfo() {
  // @@protoc_insertion_point(destructor:apollo.canbus.BasicInfo)
  SharedDtor();
}

void BasicInfo::SharedDtor() {
}

void BasicInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BasicInfo::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BasicInfo& BasicInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_BasicInfo.base);
  return *internal_default_instance();
}


void BasicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.BasicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&power_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acc_on_button_) -
        reinterpret_cast<char*>(&power_state_)) + sizeof(acc_on_button_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&acc_off_button_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acc_inc_gap_button_) -
        reinterpret_cast<char*>(&acc_off_button_)) + sizeof(acc_inc_gap_button_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&acc_dec_gap_button_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&day_) -
        reinterpret_cast<char*>(&acc_dec_gap_button_)) + sizeof(day_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&hours_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pdop_) -
        reinterpret_cast<char*>(&hours_)) + sizeof(pdop_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 127u) {
    ::memset(&altitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gps_speed_) -
        reinterpret_cast<char*>(&altitude_)) + sizeof(gps_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BasicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.BasicInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_auto_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_auto_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.BasicInfo.Type power_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::BasicInfo_Type_IsValid(value)) {
            set_power_state(static_cast< ::apollo::canbus::BasicInfo_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_air_bag_deployed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_air_bag_deployed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_air_bag_deployed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double odo_meter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_odo_meter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odo_meter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double drive_range = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_drive_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &drive_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_system_error = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_is_system_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_system_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_human_interrupt = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_is_human_interrupt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_human_interrupt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acc_on_button = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_acc_on_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_on_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acc_off_button = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_acc_off_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_off_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acc_res_button = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_acc_res_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_res_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acc_cancel_button = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_acc_cancel_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_cancel_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acc_on_off_button = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_acc_on_off_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_on_off_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acc_res_cancel_button = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_acc_res_cancel_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_res_cancel_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acc_inc_spd_button = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_acc_inc_spd_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_inc_spd_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acc_dec_spd_button = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_acc_dec_spd_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_dec_spd_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acc_inc_gap_button = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_acc_inc_gap_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_inc_gap_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool acc_dec_gap_button = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_acc_dec_gap_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &acc_dec_gap_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool lka_button = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_lka_button();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lka_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool canbus_fault = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_canbus_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canbus_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u /* 161 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool gps_valid = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_gps_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gps_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 year = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 month = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_month();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 day = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hours = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_hours();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minutes = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_minutes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seconds = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double compass_direction = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {
          set_has_compass_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &compass_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pdop = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {
          set_has_pdop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_gps_fault = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_is_gps_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gps_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_inferred = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_is_inferred();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_inferred_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double altitude = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 265 & 0xFF */)) {
          set_has_altitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 273 & 0xFF */)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double hdop = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 281 & 0xFF */)) {
          set_has_hdop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vdop = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 289 & 0xFF */)) {
          set_has_vdop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.GpsQuality quality = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::GpsQuality_IsValid(value)) {
            set_quality(static_cast< ::apollo::canbus::GpsQuality >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                37, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_satellites = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {
          set_has_num_satellites();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_satellites_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gps_speed = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 313 & 0xFF */)) {
          set_has_gps_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gps_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.BasicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.BasicInfo)
  return false;
#undef DO_
}

void BasicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.BasicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_auto_mode = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_auto_mode(), output);
  }

  // optional .apollo.canbus.BasicInfo.Type power_state = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->power_state(), output);
  }

  // optional bool is_air_bag_deployed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_air_bag_deployed(), output);
  }

  // optional double odo_meter = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->odo_meter(), output);
  }

  // optional double drive_range = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->drive_range(), output);
  }

  // optional bool is_system_error = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_system_error(), output);
  }

  // optional bool is_human_interrupt = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_human_interrupt(), output);
  }

  // optional bool acc_on_button = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->acc_on_button(), output);
  }

  // optional bool acc_off_button = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->acc_off_button(), output);
  }

  // optional bool acc_res_button = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->acc_res_button(), output);
  }

  // optional bool acc_cancel_button = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->acc_cancel_button(), output);
  }

  // optional bool acc_on_off_button = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->acc_on_off_button(), output);
  }

  // optional bool acc_res_cancel_button = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->acc_res_cancel_button(), output);
  }

  // optional bool acc_inc_spd_button = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->acc_inc_spd_button(), output);
  }

  // optional bool acc_dec_spd_button = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->acc_dec_spd_button(), output);
  }

  // optional bool acc_inc_gap_button = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->acc_inc_gap_button(), output);
  }

  // optional bool acc_dec_gap_button = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->acc_dec_gap_button(), output);
  }

  // optional bool lka_button = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->lka_button(), output);
  }

  // optional bool canbus_fault = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->canbus_fault(), output);
  }

  // optional double latitude = 20;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->latitude(), output);
  }

  // optional double longitude = 21;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->longitude(), output);
  }

  // optional bool gps_valid = 22;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->gps_valid(), output);
  }

  // optional int32 year = 23;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->year(), output);
  }

  // optional int32 month = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->month(), output);
  }

  // optional int32 day = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->day(), output);
  }

  // optional int32 hours = 26;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->hours(), output);
  }

  // optional int32 minutes = 27;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->minutes(), output);
  }

  // optional int32 seconds = 28;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->seconds(), output);
  }

  // optional double compass_direction = 29;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->compass_direction(), output);
  }

  // optional double pdop = 30;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->pdop(), output);
  }

  // optional bool is_gps_fault = 31;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->is_gps_fault(), output);
  }

  // optional bool is_inferred = 32;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->is_inferred(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional double altitude = 33;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->altitude(), output);
  }

  // optional double heading = 34;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->heading(), output);
  }

  // optional double hdop = 35;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->hdop(), output);
  }

  // optional double vdop = 36;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->vdop(), output);
  }

  // optional .apollo.canbus.GpsQuality quality = 37;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->quality(), output);
  }

  // optional int32 num_satellites = 38;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->num_satellites(), output);
  }

  // optional double gps_speed = 39;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->gps_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.BasicInfo)
}

::google::protobuf::uint8* BasicInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.BasicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_auto_mode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_auto_mode(), target);
  }

  // optional .apollo.canbus.BasicInfo.Type power_state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->power_state(), target);
  }

  // optional bool is_air_bag_deployed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_air_bag_deployed(), target);
  }

  // optional double odo_meter = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->odo_meter(), target);
  }

  // optional double drive_range = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->drive_range(), target);
  }

  // optional bool is_system_error = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_system_error(), target);
  }

  // optional bool is_human_interrupt = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_human_interrupt(), target);
  }

  // optional bool acc_on_button = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->acc_on_button(), target);
  }

  // optional bool acc_off_button = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->acc_off_button(), target);
  }

  // optional bool acc_res_button = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->acc_res_button(), target);
  }

  // optional bool acc_cancel_button = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->acc_cancel_button(), target);
  }

  // optional bool acc_on_off_button = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->acc_on_off_button(), target);
  }

  // optional bool acc_res_cancel_button = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->acc_res_cancel_button(), target);
  }

  // optional bool acc_inc_spd_button = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->acc_inc_spd_button(), target);
  }

  // optional bool acc_dec_spd_button = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->acc_dec_spd_button(), target);
  }

  // optional bool acc_inc_gap_button = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->acc_inc_gap_button(), target);
  }

  // optional bool acc_dec_gap_button = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->acc_dec_gap_button(), target);
  }

  // optional bool lka_button = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->lka_button(), target);
  }

  // optional bool canbus_fault = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->canbus_fault(), target);
  }

  // optional double latitude = 20;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->latitude(), target);
  }

  // optional double longitude = 21;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->longitude(), target);
  }

  // optional bool gps_valid = 22;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->gps_valid(), target);
  }

  // optional int32 year = 23;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->year(), target);
  }

  // optional int32 month = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->month(), target);
  }

  // optional int32 day = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->day(), target);
  }

  // optional int32 hours = 26;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->hours(), target);
  }

  // optional int32 minutes = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->minutes(), target);
  }

  // optional int32 seconds = 28;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->seconds(), target);
  }

  // optional double compass_direction = 29;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->compass_direction(), target);
  }

  // optional double pdop = 30;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->pdop(), target);
  }

  // optional bool is_gps_fault = 31;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->is_gps_fault(), target);
  }

  // optional bool is_inferred = 32;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->is_inferred(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double altitude = 33;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->altitude(), target);
  }

  // optional double heading = 34;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->heading(), target);
  }

  // optional double hdop = 35;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->hdop(), target);
  }

  // optional double vdop = 36;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->vdop(), target);
  }

  // optional .apollo.canbus.GpsQuality quality = 37;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->quality(), target);
  }

  // optional int32 num_satellites = 38;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->num_satellites(), target);
  }

  // optional double gps_speed = 39;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->gps_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.BasicInfo)
  return target;
}

size_t BasicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.BasicInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.canbus.BasicInfo.Type power_state = 2;
    if (has_power_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->power_state());
    }

    // optional bool is_auto_mode = 1;
    if (has_is_auto_mode()) {
      total_size += 1 + 1;
    }

    // optional bool is_air_bag_deployed = 3;
    if (has_is_air_bag_deployed()) {
      total_size += 1 + 1;
    }

    // optional bool is_system_error = 6;
    if (has_is_system_error()) {
      total_size += 1 + 1;
    }

    // optional bool is_human_interrupt = 7;
    if (has_is_human_interrupt()) {
      total_size += 1 + 1;
    }

    // optional double odo_meter = 4;
    if (has_odo_meter()) {
      total_size += 1 + 8;
    }

    // optional double drive_range = 5;
    if (has_drive_range()) {
      total_size += 1 + 8;
    }

    // optional bool acc_on_button = 8;
    if (has_acc_on_button()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool acc_off_button = 9;
    if (has_acc_off_button()) {
      total_size += 1 + 1;
    }

    // optional bool acc_res_button = 10;
    if (has_acc_res_button()) {
      total_size += 1 + 1;
    }

    // optional bool acc_cancel_button = 11;
    if (has_acc_cancel_button()) {
      total_size += 1 + 1;
    }

    // optional bool acc_on_off_button = 12;
    if (has_acc_on_off_button()) {
      total_size += 1 + 1;
    }

    // optional bool acc_res_cancel_button = 13;
    if (has_acc_res_cancel_button()) {
      total_size += 1 + 1;
    }

    // optional bool acc_inc_spd_button = 14;
    if (has_acc_inc_spd_button()) {
      total_size += 1 + 1;
    }

    // optional bool acc_dec_spd_button = 15;
    if (has_acc_dec_spd_button()) {
      total_size += 1 + 1;
    }

    // optional bool acc_inc_gap_button = 16;
    if (has_acc_inc_gap_button()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool acc_dec_gap_button = 17;
    if (has_acc_dec_gap_button()) {
      total_size += 2 + 1;
    }

    // optional bool lka_button = 18;
    if (has_lka_button()) {
      total_size += 2 + 1;
    }

    // optional bool canbus_fault = 19;
    if (has_canbus_fault()) {
      total_size += 2 + 1;
    }

    // optional int32 year = 23;
    if (has_year()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }

    // optional double latitude = 20;
    if (has_latitude()) {
      total_size += 2 + 8;
    }

    // optional double longitude = 21;
    if (has_longitude()) {
      total_size += 2 + 8;
    }

    // optional int32 month = 24;
    if (has_month()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month());
    }

    // optional int32 day = 25;
    if (has_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int32 hours = 26;
    if (has_hours()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hours());
    }

    // optional int32 minutes = 27;
    if (has_minutes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minutes());
    }

    // optional int32 seconds = 28;
    if (has_seconds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds());
    }

    // optional bool gps_valid = 22;
    if (has_gps_valid()) {
      total_size += 2 + 1;
    }

    // optional bool is_gps_fault = 31;
    if (has_is_gps_fault()) {
      total_size += 2 + 1;
    }

    // optional bool is_inferred = 32;
    if (has_is_inferred()) {
      total_size += 2 + 1;
    }

    // optional double compass_direction = 29;
    if (has_compass_direction()) {
      total_size += 2 + 8;
    }

    // optional double pdop = 30;
    if (has_pdop()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & 127u) {
    // optional double altitude = 33;
    if (has_altitude()) {
      total_size += 2 + 8;
    }

    // optional double heading = 34;
    if (has_heading()) {
      total_size += 2 + 8;
    }

    // optional double hdop = 35;
    if (has_hdop()) {
      total_size += 2 + 8;
    }

    // optional double vdop = 36;
    if (has_vdop()) {
      total_size += 2 + 8;
    }

    // optional .apollo.canbus.GpsQuality quality = 37;
    if (has_quality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }

    // optional int32 num_satellites = 38;
    if (has_num_satellites()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_satellites());
    }

    // optional double gps_speed = 39;
    if (has_gps_speed()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasicInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.BasicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BasicInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.BasicInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.BasicInfo)
    MergeFrom(*source);
  }
}

void BasicInfo::MergeFrom(const BasicInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.BasicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      power_state_ = from.power_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_auto_mode_ = from.is_auto_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_air_bag_deployed_ = from.is_air_bag_deployed_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_system_error_ = from.is_system_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_human_interrupt_ = from.is_human_interrupt_;
    }
    if (cached_has_bits & 0x00000020u) {
      odo_meter_ = from.odo_meter_;
    }
    if (cached_has_bits & 0x00000040u) {
      drive_range_ = from.drive_range_;
    }
    if (cached_has_bits & 0x00000080u) {
      acc_on_button_ = from.acc_on_button_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      acc_off_button_ = from.acc_off_button_;
    }
    if (cached_has_bits & 0x00000200u) {
      acc_res_button_ = from.acc_res_button_;
    }
    if (cached_has_bits & 0x00000400u) {
      acc_cancel_button_ = from.acc_cancel_button_;
    }
    if (cached_has_bits & 0x00000800u) {
      acc_on_off_button_ = from.acc_on_off_button_;
    }
    if (cached_has_bits & 0x00001000u) {
      acc_res_cancel_button_ = from.acc_res_cancel_button_;
    }
    if (cached_has_bits & 0x00002000u) {
      acc_inc_spd_button_ = from.acc_inc_spd_button_;
    }
    if (cached_has_bits & 0x00004000u) {
      acc_dec_spd_button_ = from.acc_dec_spd_button_;
    }
    if (cached_has_bits & 0x00008000u) {
      acc_inc_gap_button_ = from.acc_inc_gap_button_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      acc_dec_gap_button_ = from.acc_dec_gap_button_;
    }
    if (cached_has_bits & 0x00020000u) {
      lka_button_ = from.lka_button_;
    }
    if (cached_has_bits & 0x00040000u) {
      canbus_fault_ = from.canbus_fault_;
    }
    if (cached_has_bits & 0x00080000u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00100000u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00200000u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00400000u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00800000u) {
      day_ = from.day_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      hours_ = from.hours_;
    }
    if (cached_has_bits & 0x02000000u) {
      minutes_ = from.minutes_;
    }
    if (cached_has_bits & 0x04000000u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x08000000u) {
      gps_valid_ = from.gps_valid_;
    }
    if (cached_has_bits & 0x10000000u) {
      is_gps_fault_ = from.is_gps_fault_;
    }
    if (cached_has_bits & 0x20000000u) {
      is_inferred_ = from.is_inferred_;
    }
    if (cached_has_bits & 0x40000000u) {
      compass_direction_ = from.compass_direction_;
    }
    if (cached_has_bits & 0x80000000u) {
      pdop_ = from.pdop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      hdop_ = from.hdop_;
    }
    if (cached_has_bits & 0x00000008u) {
      vdop_ = from.vdop_;
    }
    if (cached_has_bits & 0x00000010u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_satellites_ = from.num_satellites_;
    }
    if (cached_has_bits & 0x00000040u) {
      gps_speed_ = from.gps_speed_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void BasicInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.BasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicInfo::CopyFrom(const BasicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.BasicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicInfo::IsInitialized() const {
  return true;
}

void BasicInfo::Swap(BasicInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasicInfo::InternalSwap(BasicInfo* other) {
  using std::swap;
  swap(power_state_, other->power_state_);
  swap(is_auto_mode_, other->is_auto_mode_);
  swap(is_air_bag_deployed_, other->is_air_bag_deployed_);
  swap(is_system_error_, other->is_system_error_);
  swap(is_human_interrupt_, other->is_human_interrupt_);
  swap(odo_meter_, other->odo_meter_);
  swap(drive_range_, other->drive_range_);
  swap(acc_on_button_, other->acc_on_button_);
  swap(acc_off_button_, other->acc_off_button_);
  swap(acc_res_button_, other->acc_res_button_);
  swap(acc_cancel_button_, other->acc_cancel_button_);
  swap(acc_on_off_button_, other->acc_on_off_button_);
  swap(acc_res_cancel_button_, other->acc_res_cancel_button_);
  swap(acc_inc_spd_button_, other->acc_inc_spd_button_);
  swap(acc_dec_spd_button_, other->acc_dec_spd_button_);
  swap(acc_inc_gap_button_, other->acc_inc_gap_button_);
  swap(acc_dec_gap_button_, other->acc_dec_gap_button_);
  swap(lka_button_, other->lka_button_);
  swap(canbus_fault_, other->canbus_fault_);
  swap(year_, other->year_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(month_, other->month_);
  swap(day_, other->day_);
  swap(hours_, other->hours_);
  swap(minutes_, other->minutes_);
  swap(seconds_, other->seconds_);
  swap(gps_valid_, other->gps_valid_);
  swap(is_gps_fault_, other->is_gps_fault_);
  swap(is_inferred_, other->is_inferred_);
  swap(compass_direction_, other->compass_direction_);
  swap(pdop_, other->pdop_);
  swap(altitude_, other->altitude_);
  swap(heading_, other->heading_);
  swap(hdop_, other->hdop_);
  swap(vdop_, other->vdop_);
  swap(quality_, other->quality_);
  swap(num_satellites_, other->num_satellites_);
  swap(gps_speed_, other->gps_speed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BasicInfo::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Global_rpt_6a::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Global_rpt_6a::kPacmodStatusFieldNumber;
const int Global_rpt_6a::kOverrideStatusFieldNumber;
const int Global_rpt_6a::kVehCanTimeoutFieldNumber;
const int Global_rpt_6a::kStrCanTimeoutFieldNumber;
const int Global_rpt_6a::kBrkCanTimeoutFieldNumber;
const int Global_rpt_6a::kUsrCanTimeoutFieldNumber;
const int Global_rpt_6a::kUsrCanReadErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Global_rpt_6a::Global_rpt_6a()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Global_rpt_6a.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Global_rpt_6a)
}
Global_rpt_6a::Global_rpt_6a(const Global_rpt_6a& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pacmod_status_, &from.pacmod_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&usr_can_read_errors_) -
    reinterpret_cast<char*>(&pacmod_status_)) + sizeof(usr_can_read_errors_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Global_rpt_6a)
}

void Global_rpt_6a::SharedCtor() {
  ::memset(&pacmod_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usr_can_read_errors_) -
      reinterpret_cast<char*>(&pacmod_status_)) + sizeof(usr_can_read_errors_));
}

Global_rpt_6a::~Global_rpt_6a() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Global_rpt_6a)
  SharedDtor();
}

void Global_rpt_6a::SharedDtor() {
}

void Global_rpt_6a::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Global_rpt_6a::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Global_rpt_6a& Global_rpt_6a::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Global_rpt_6a.base);
  return *internal_default_instance();
}


void Global_rpt_6a::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Global_rpt_6a)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&pacmod_status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usr_can_read_errors_) -
        reinterpret_cast<char*>(&pacmod_status_)) + sizeof(usr_can_read_errors_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Global_rpt_6a::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Global_rpt_6a)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.Global_rpt_6a.Pacmod_statusType pacmod_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Global_rpt_6a_Pacmod_statusType_IsValid(value)) {
            set_pacmod_status(static_cast< ::apollo::canbus::Global_rpt_6a_Pacmod_statusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Global_rpt_6a.Override_statusType override_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Global_rpt_6a_Override_statusType_IsValid(value)) {
            set_override_status(static_cast< ::apollo::canbus::Global_rpt_6a_Override_statusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool veh_can_timeout = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_veh_can_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &veh_can_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool str_can_timeout = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_str_can_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &str_can_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Global_rpt_6a.Brk_can_timeoutType brk_can_timeout = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Global_rpt_6a_Brk_can_timeoutType_IsValid(value)) {
            set_brk_can_timeout(static_cast< ::apollo::canbus::Global_rpt_6a_Brk_can_timeoutType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool usr_can_timeout = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_usr_can_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usr_can_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 usr_can_read_errors = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_usr_can_read_errors();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usr_can_read_errors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Global_rpt_6a)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Global_rpt_6a)
  return false;
#undef DO_
}

void Global_rpt_6a::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Global_rpt_6a)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Global_rpt_6a.Pacmod_statusType pacmod_status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pacmod_status(), output);
  }

  // optional .apollo.canbus.Global_rpt_6a.Override_statusType override_status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->override_status(), output);
  }

  // optional bool veh_can_timeout = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->veh_can_timeout(), output);
  }

  // optional bool str_can_timeout = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->str_can_timeout(), output);
  }

  // optional .apollo.canbus.Global_rpt_6a.Brk_can_timeoutType brk_can_timeout = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->brk_can_timeout(), output);
  }

  // optional bool usr_can_timeout = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->usr_can_timeout(), output);
  }

  // optional int32 usr_can_read_errors = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->usr_can_read_errors(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Global_rpt_6a)
}

::google::protobuf::uint8* Global_rpt_6a::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Global_rpt_6a)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Global_rpt_6a.Pacmod_statusType pacmod_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pacmod_status(), target);
  }

  // optional .apollo.canbus.Global_rpt_6a.Override_statusType override_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->override_status(), target);
  }

  // optional bool veh_can_timeout = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->veh_can_timeout(), target);
  }

  // optional bool str_can_timeout = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->str_can_timeout(), target);
  }

  // optional .apollo.canbus.Global_rpt_6a.Brk_can_timeoutType brk_can_timeout = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->brk_can_timeout(), target);
  }

  // optional bool usr_can_timeout = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->usr_can_timeout(), target);
  }

  // optional int32 usr_can_read_errors = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->usr_can_read_errors(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Global_rpt_6a)
  return target;
}

size_t Global_rpt_6a::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Global_rpt_6a)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .apollo.canbus.Global_rpt_6a.Pacmod_statusType pacmod_status = 1;
    if (has_pacmod_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pacmod_status());
    }

    // optional .apollo.canbus.Global_rpt_6a.Override_statusType override_status = 2;
    if (has_override_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->override_status());
    }

    // optional bool veh_can_timeout = 3;
    if (has_veh_can_timeout()) {
      total_size += 1 + 1;
    }

    // optional bool str_can_timeout = 4;
    if (has_str_can_timeout()) {
      total_size += 1 + 1;
    }

    // optional bool usr_can_timeout = 6;
    if (has_usr_can_timeout()) {
      total_size += 1 + 1;
    }

    // optional .apollo.canbus.Global_rpt_6a.Brk_can_timeoutType brk_can_timeout = 5;
    if (has_brk_can_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->brk_can_timeout());
    }

    // optional int32 usr_can_read_errors = 7;
    if (has_usr_can_read_errors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usr_can_read_errors());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Global_rpt_6a::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Global_rpt_6a)
  GOOGLE_DCHECK_NE(&from, this);
  const Global_rpt_6a* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Global_rpt_6a>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Global_rpt_6a)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Global_rpt_6a)
    MergeFrom(*source);
  }
}

void Global_rpt_6a::MergeFrom(const Global_rpt_6a& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Global_rpt_6a)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      pacmod_status_ = from.pacmod_status_;
    }
    if (cached_has_bits & 0x00000002u) {
      override_status_ = from.override_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      veh_can_timeout_ = from.veh_can_timeout_;
    }
    if (cached_has_bits & 0x00000008u) {
      str_can_timeout_ = from.str_can_timeout_;
    }
    if (cached_has_bits & 0x00000010u) {
      usr_can_timeout_ = from.usr_can_timeout_;
    }
    if (cached_has_bits & 0x00000020u) {
      brk_can_timeout_ = from.brk_can_timeout_;
    }
    if (cached_has_bits & 0x00000040u) {
      usr_can_read_errors_ = from.usr_can_read_errors_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Global_rpt_6a::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Global_rpt_6a)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Global_rpt_6a::CopyFrom(const Global_rpt_6a& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Global_rpt_6a)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Global_rpt_6a::IsInitialized() const {
  return true;
}

void Global_rpt_6a::Swap(Global_rpt_6a* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Global_rpt_6a::InternalSwap(Global_rpt_6a* other) {
  using std::swap;
  swap(pacmod_status_, other->pacmod_status_);
  swap(override_status_, other->override_status_);
  swap(veh_can_timeout_, other->veh_can_timeout_);
  swap(str_can_timeout_, other->str_can_timeout_);
  swap(usr_can_timeout_, other->usr_can_timeout_);
  swap(brk_can_timeout_, other->brk_can_timeout_);
  swap(usr_can_read_errors_, other->usr_can_read_errors_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Global_rpt_6a::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Brake_cmd_6b::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Brake_cmd_6b::kBrakeCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Brake_cmd_6b::Brake_cmd_6b()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Brake_cmd_6b.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake_cmd_6b)
}
Brake_cmd_6b::Brake_cmd_6b(const Brake_cmd_6b& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  brake_cmd_ = from.brake_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_cmd_6b)
}

void Brake_cmd_6b::SharedCtor() {
  brake_cmd_ = 0;
}

Brake_cmd_6b::~Brake_cmd_6b() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_cmd_6b)
  SharedDtor();
}

void Brake_cmd_6b::SharedDtor() {
}

void Brake_cmd_6b::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Brake_cmd_6b::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Brake_cmd_6b& Brake_cmd_6b::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Brake_cmd_6b.base);
  return *internal_default_instance();
}


void Brake_cmd_6b::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_cmd_6b)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brake_cmd_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Brake_cmd_6b::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Brake_cmd_6b)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double brake_cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_brake_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Brake_cmd_6b)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Brake_cmd_6b)
  return false;
#undef DO_
}

void Brake_cmd_6b::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Brake_cmd_6b)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double brake_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->brake_cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Brake_cmd_6b)
}

::google::protobuf::uint8* Brake_cmd_6b::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_cmd_6b)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double brake_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->brake_cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_cmd_6b)
  return target;
}

size_t Brake_cmd_6b::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_cmd_6b)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional double brake_cmd = 1;
  if (has_brake_cmd()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake_cmd_6b::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake_cmd_6b)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_cmd_6b* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Brake_cmd_6b>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake_cmd_6b)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake_cmd_6b)
    MergeFrom(*source);
  }
}

void Brake_cmd_6b::MergeFrom(const Brake_cmd_6b& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_cmd_6b)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_brake_cmd()) {
    set_brake_cmd(from.brake_cmd());
  }
}

void Brake_cmd_6b::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake_cmd_6b)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_cmd_6b::CopyFrom(const Brake_cmd_6b& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_cmd_6b)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_cmd_6b::IsInitialized() const {
  return true;
}

void Brake_cmd_6b::Swap(Brake_cmd_6b* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Brake_cmd_6b::InternalSwap(Brake_cmd_6b* other) {
  using std::swap;
  swap(brake_cmd_, other->brake_cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Brake_cmd_6b::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Brake_rpt_6c::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Brake_rpt_6c::kManualInputFieldNumber;
const int Brake_rpt_6c::kCommandedValueFieldNumber;
const int Brake_rpt_6c::kOutputValueFieldNumber;
const int Brake_rpt_6c::kBrakeOnOffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Brake_rpt_6c::Brake_rpt_6c()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Brake_rpt_6c.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake_rpt_6c)
}
Brake_rpt_6c::Brake_rpt_6c(const Brake_rpt_6c& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&manual_input_, &from.manual_input_,
    static_cast<size_t>(reinterpret_cast<char*>(&brake_on_off_) -
    reinterpret_cast<char*>(&manual_input_)) + sizeof(brake_on_off_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_rpt_6c)
}

void Brake_rpt_6c::SharedCtor() {
  ::memset(&manual_input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_on_off_) -
      reinterpret_cast<char*>(&manual_input_)) + sizeof(brake_on_off_));
}

Brake_rpt_6c::~Brake_rpt_6c() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_rpt_6c)
  SharedDtor();
}

void Brake_rpt_6c::SharedDtor() {
}

void Brake_rpt_6c::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Brake_rpt_6c::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Brake_rpt_6c& Brake_rpt_6c::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Brake_rpt_6c.base);
  return *internal_default_instance();
}


void Brake_rpt_6c::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_rpt_6c)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&manual_input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&brake_on_off_) -
        reinterpret_cast<char*>(&manual_input_)) + sizeof(brake_on_off_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Brake_rpt_6c::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Brake_rpt_6c)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double manual_input = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_manual_input();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &manual_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double commanded_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_commanded_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commanded_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double output_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_output_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &output_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Brake_rpt_6c.Brake_on_offType brake_on_off = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Brake_rpt_6c_Brake_on_offType_IsValid(value)) {
            set_brake_on_off(static_cast< ::apollo::canbus::Brake_rpt_6c_Brake_on_offType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Brake_rpt_6c)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Brake_rpt_6c)
  return false;
#undef DO_
}

void Brake_rpt_6c::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Brake_rpt_6c)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double manual_input = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->manual_input(), output);
  }

  // optional double commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->commanded_value(), output);
  }

  // optional double output_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->output_value(), output);
  }

  // optional .apollo.canbus.Brake_rpt_6c.Brake_on_offType brake_on_off = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->brake_on_off(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Brake_rpt_6c)
}

::google::protobuf::uint8* Brake_rpt_6c::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_rpt_6c)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double manual_input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->manual_input(), target);
  }

  // optional double commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->commanded_value(), target);
  }

  // optional double output_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->output_value(), target);
  }

  // optional .apollo.canbus.Brake_rpt_6c.Brake_on_offType brake_on_off = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->brake_on_off(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_rpt_6c)
  return target;
}

size_t Brake_rpt_6c::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_rpt_6c)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double manual_input = 1;
    if (has_manual_input()) {
      total_size += 1 + 8;
    }

    // optional double commanded_value = 2;
    if (has_commanded_value()) {
      total_size += 1 + 8;
    }

    // optional double output_value = 3;
    if (has_output_value()) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Brake_rpt_6c.Brake_on_offType brake_on_off = 4;
    if (has_brake_on_off()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->brake_on_off());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake_rpt_6c::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake_rpt_6c)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_rpt_6c* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Brake_rpt_6c>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake_rpt_6c)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake_rpt_6c)
    MergeFrom(*source);
  }
}

void Brake_rpt_6c::MergeFrom(const Brake_rpt_6c& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_rpt_6c)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      manual_input_ = from.manual_input_;
    }
    if (cached_has_bits & 0x00000002u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      output_value_ = from.output_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      brake_on_off_ = from.brake_on_off_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake_rpt_6c::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake_rpt_6c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_rpt_6c::CopyFrom(const Brake_rpt_6c& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_rpt_6c)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_rpt_6c::IsInitialized() const {
  return true;
}

void Brake_rpt_6c::Swap(Brake_rpt_6c* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Brake_rpt_6c::InternalSwap(Brake_rpt_6c* other) {
  using std::swap;
  swap(manual_input_, other->manual_input_);
  swap(commanded_value_, other->commanded_value_);
  swap(output_value_, other->output_value_);
  swap(brake_on_off_, other->brake_on_off_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Brake_rpt_6c::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Steering_cmd_6d::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Steering_cmd_6d::kPositionValueFieldNumber;
const int Steering_cmd_6d::kSpeedLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Steering_cmd_6d::Steering_cmd_6d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Steering_cmd_6d.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Steering_cmd_6d)
}
Steering_cmd_6d::Steering_cmd_6d(const Steering_cmd_6d& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&position_value_, &from.position_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_limit_) -
    reinterpret_cast<char*>(&position_value_)) + sizeof(speed_limit_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_cmd_6d)
}

void Steering_cmd_6d::SharedCtor() {
  ::memset(&position_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_limit_) -
      reinterpret_cast<char*>(&position_value_)) + sizeof(speed_limit_));
}

Steering_cmd_6d::~Steering_cmd_6d() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_cmd_6d)
  SharedDtor();
}

void Steering_cmd_6d::SharedDtor() {
}

void Steering_cmd_6d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Steering_cmd_6d::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Steering_cmd_6d& Steering_cmd_6d::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Steering_cmd_6d.base);
  return *internal_default_instance();
}


void Steering_cmd_6d::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_cmd_6d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&position_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_limit_) -
        reinterpret_cast<char*>(&position_value_)) + sizeof(speed_limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Steering_cmd_6d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Steering_cmd_6d)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double position_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_position_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Steering_cmd_6d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Steering_cmd_6d)
  return false;
#undef DO_
}

void Steering_cmd_6d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Steering_cmd_6d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double position_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->position_value(), output);
  }

  // optional double speed_limit = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->speed_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Steering_cmd_6d)
}

::google::protobuf::uint8* Steering_cmd_6d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_cmd_6d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double position_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->position_value(), target);
  }

  // optional double speed_limit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->speed_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_cmd_6d)
  return target;
}

size_t Steering_cmd_6d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_cmd_6d)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double position_value = 1;
    if (has_position_value()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 2;
    if (has_speed_limit()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steering_cmd_6d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Steering_cmd_6d)
  GOOGLE_DCHECK_NE(&from, this);
  const Steering_cmd_6d* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Steering_cmd_6d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Steering_cmd_6d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Steering_cmd_6d)
    MergeFrom(*source);
  }
}

void Steering_cmd_6d::MergeFrom(const Steering_cmd_6d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_cmd_6d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      position_value_ = from.position_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      speed_limit_ = from.speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steering_cmd_6d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Steering_cmd_6d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steering_cmd_6d::CopyFrom(const Steering_cmd_6d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_cmd_6d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_cmd_6d::IsInitialized() const {
  return true;
}

void Steering_cmd_6d::Swap(Steering_cmd_6d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Steering_cmd_6d::InternalSwap(Steering_cmd_6d* other) {
  using std::swap;
  swap(position_value_, other->position_value_);
  swap(speed_limit_, other->speed_limit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Steering_cmd_6d::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Steering_rpt_1_6e::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Steering_rpt_1_6e::kManualInputFieldNumber;
const int Steering_rpt_1_6e::kCommandedValueFieldNumber;
const int Steering_rpt_1_6e::kOutputValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Steering_rpt_1_6e::Steering_rpt_1_6e()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Steering_rpt_1_6e.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Steering_rpt_1_6e)
}
Steering_rpt_1_6e::Steering_rpt_1_6e(const Steering_rpt_1_6e& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&manual_input_, &from.manual_input_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_value_) -
    reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_rpt_1_6e)
}

void Steering_rpt_1_6e::SharedCtor() {
  ::memset(&manual_input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_value_) -
      reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
}

Steering_rpt_1_6e::~Steering_rpt_1_6e() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_rpt_1_6e)
  SharedDtor();
}

void Steering_rpt_1_6e::SharedDtor() {
}

void Steering_rpt_1_6e::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Steering_rpt_1_6e::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Steering_rpt_1_6e& Steering_rpt_1_6e::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Steering_rpt_1_6e.base);
  return *internal_default_instance();
}


void Steering_rpt_1_6e::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_rpt_1_6e)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&manual_input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_value_) -
        reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Steering_rpt_1_6e::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Steering_rpt_1_6e)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double manual_input = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_manual_input();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &manual_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double commanded_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_commanded_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commanded_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double output_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_output_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &output_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Steering_rpt_1_6e)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Steering_rpt_1_6e)
  return false;
#undef DO_
}

void Steering_rpt_1_6e::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Steering_rpt_1_6e)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double manual_input = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->manual_input(), output);
  }

  // optional double commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->commanded_value(), output);
  }

  // optional double output_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->output_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Steering_rpt_1_6e)
}

::google::protobuf::uint8* Steering_rpt_1_6e::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_rpt_1_6e)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double manual_input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->manual_input(), target);
  }

  // optional double commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->commanded_value(), target);
  }

  // optional double output_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->output_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_rpt_1_6e)
  return target;
}

size_t Steering_rpt_1_6e::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_rpt_1_6e)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double manual_input = 1;
    if (has_manual_input()) {
      total_size += 1 + 8;
    }

    // optional double commanded_value = 2;
    if (has_commanded_value()) {
      total_size += 1 + 8;
    }

    // optional double output_value = 3;
    if (has_output_value()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steering_rpt_1_6e::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Steering_rpt_1_6e)
  GOOGLE_DCHECK_NE(&from, this);
  const Steering_rpt_1_6e* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Steering_rpt_1_6e>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Steering_rpt_1_6e)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Steering_rpt_1_6e)
    MergeFrom(*source);
  }
}

void Steering_rpt_1_6e::MergeFrom(const Steering_rpt_1_6e& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_rpt_1_6e)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      manual_input_ = from.manual_input_;
    }
    if (cached_has_bits & 0x00000002u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      output_value_ = from.output_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steering_rpt_1_6e::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Steering_rpt_1_6e)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steering_rpt_1_6e::CopyFrom(const Steering_rpt_1_6e& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_rpt_1_6e)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_rpt_1_6e::IsInitialized() const {
  return true;
}

void Steering_rpt_1_6e::Swap(Steering_rpt_1_6e* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Steering_rpt_1_6e::InternalSwap(Steering_rpt_1_6e* other) {
  using std::swap;
  swap(manual_input_, other->manual_input_);
  swap(commanded_value_, other->commanded_value_);
  swap(output_value_, other->output_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Steering_rpt_1_6e::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Wheel_speed_rpt_7a::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Wheel_speed_rpt_7a::kWheelSpdRearRightFieldNumber;
const int Wheel_speed_rpt_7a::kWheelSpdRearLeftFieldNumber;
const int Wheel_speed_rpt_7a::kWheelSpdFrontRightFieldNumber;
const int Wheel_speed_rpt_7a::kWheelSpdFrontLeftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Wheel_speed_rpt_7a::Wheel_speed_rpt_7a()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Wheel_speed_rpt_7a.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Wheel_speed_rpt_7a)
}
Wheel_speed_rpt_7a::Wheel_speed_rpt_7a(const Wheel_speed_rpt_7a& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wheel_spd_rear_right_, &from.wheel_spd_rear_right_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheel_spd_front_left_) -
    reinterpret_cast<char*>(&wheel_spd_rear_right_)) + sizeof(wheel_spd_front_left_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Wheel_speed_rpt_7a)
}

void Wheel_speed_rpt_7a::SharedCtor() {
  ::memset(&wheel_spd_rear_right_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheel_spd_front_left_) -
      reinterpret_cast<char*>(&wheel_spd_rear_right_)) + sizeof(wheel_spd_front_left_));
}

Wheel_speed_rpt_7a::~Wheel_speed_rpt_7a() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Wheel_speed_rpt_7a)
  SharedDtor();
}

void Wheel_speed_rpt_7a::SharedDtor() {
}

void Wheel_speed_rpt_7a::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Wheel_speed_rpt_7a::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Wheel_speed_rpt_7a& Wheel_speed_rpt_7a::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Wheel_speed_rpt_7a.base);
  return *internal_default_instance();
}


void Wheel_speed_rpt_7a::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Wheel_speed_rpt_7a)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&wheel_spd_rear_right_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wheel_spd_front_left_) -
        reinterpret_cast<char*>(&wheel_spd_rear_right_)) + sizeof(wheel_spd_front_left_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Wheel_speed_rpt_7a::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Wheel_speed_rpt_7a)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wheel_spd_rear_right = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_wheel_spd_rear_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wheel_spd_rear_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 wheel_spd_rear_left = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_wheel_spd_rear_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wheel_spd_rear_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 wheel_spd_front_right = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_wheel_spd_front_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wheel_spd_front_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 wheel_spd_front_left = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_wheel_spd_front_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wheel_spd_front_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Wheel_speed_rpt_7a)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Wheel_speed_rpt_7a)
  return false;
#undef DO_
}

void Wheel_speed_rpt_7a::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Wheel_speed_rpt_7a)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 wheel_spd_rear_right = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wheel_spd_rear_right(), output);
  }

  // optional int32 wheel_spd_rear_left = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wheel_spd_rear_left(), output);
  }

  // optional int32 wheel_spd_front_right = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wheel_spd_front_right(), output);
  }

  // optional int32 wheel_spd_front_left = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wheel_spd_front_left(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Wheel_speed_rpt_7a)
}

::google::protobuf::uint8* Wheel_speed_rpt_7a::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Wheel_speed_rpt_7a)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 wheel_spd_rear_right = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wheel_spd_rear_right(), target);
  }

  // optional int32 wheel_spd_rear_left = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wheel_spd_rear_left(), target);
  }

  // optional int32 wheel_spd_front_right = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wheel_spd_front_right(), target);
  }

  // optional int32 wheel_spd_front_left = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wheel_spd_front_left(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Wheel_speed_rpt_7a)
  return target;
}

size_t Wheel_speed_rpt_7a::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Wheel_speed_rpt_7a)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 wheel_spd_rear_right = 1;
    if (has_wheel_spd_rear_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wheel_spd_rear_right());
    }

    // optional int32 wheel_spd_rear_left = 2;
    if (has_wheel_spd_rear_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wheel_spd_rear_left());
    }

    // optional int32 wheel_spd_front_right = 3;
    if (has_wheel_spd_front_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wheel_spd_front_right());
    }

    // optional int32 wheel_spd_front_left = 4;
    if (has_wheel_spd_front_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wheel_spd_front_left());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wheel_speed_rpt_7a::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Wheel_speed_rpt_7a)
  GOOGLE_DCHECK_NE(&from, this);
  const Wheel_speed_rpt_7a* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Wheel_speed_rpt_7a>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Wheel_speed_rpt_7a)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Wheel_speed_rpt_7a)
    MergeFrom(*source);
  }
}

void Wheel_speed_rpt_7a::MergeFrom(const Wheel_speed_rpt_7a& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Wheel_speed_rpt_7a)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      wheel_spd_rear_right_ = from.wheel_spd_rear_right_;
    }
    if (cached_has_bits & 0x00000002u) {
      wheel_spd_rear_left_ = from.wheel_spd_rear_left_;
    }
    if (cached_has_bits & 0x00000004u) {
      wheel_spd_front_right_ = from.wheel_spd_front_right_;
    }
    if (cached_has_bits & 0x00000008u) {
      wheel_spd_front_left_ = from.wheel_spd_front_left_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Wheel_speed_rpt_7a::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Wheel_speed_rpt_7a)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wheel_speed_rpt_7a::CopyFrom(const Wheel_speed_rpt_7a& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Wheel_speed_rpt_7a)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wheel_speed_rpt_7a::IsInitialized() const {
  return true;
}

void Wheel_speed_rpt_7a::Swap(Wheel_speed_rpt_7a* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Wheel_speed_rpt_7a::InternalSwap(Wheel_speed_rpt_7a* other) {
  using std::swap;
  swap(wheel_spd_rear_right_, other->wheel_spd_rear_right_);
  swap(wheel_spd_rear_left_, other->wheel_spd_rear_left_);
  swap(wheel_spd_front_right_, other->wheel_spd_front_right_);
  swap(wheel_spd_front_left_, other->wheel_spd_front_left_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Wheel_speed_rpt_7a::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Date_time_rpt_83::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Date_time_rpt_83::kTimeSecondFieldNumber;
const int Date_time_rpt_83::kTimeMinuteFieldNumber;
const int Date_time_rpt_83::kTimeHourFieldNumber;
const int Date_time_rpt_83::kDateDayFieldNumber;
const int Date_time_rpt_83::kDateMonthFieldNumber;
const int Date_time_rpt_83::kDateYearFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Date_time_rpt_83::Date_time_rpt_83()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Date_time_rpt_83.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Date_time_rpt_83)
}
Date_time_rpt_83::Date_time_rpt_83(const Date_time_rpt_83& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_second_, &from.time_second_,
    static_cast<size_t>(reinterpret_cast<char*>(&date_year_) -
    reinterpret_cast<char*>(&time_second_)) + sizeof(date_year_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Date_time_rpt_83)
}

void Date_time_rpt_83::SharedCtor() {
  ::memset(&time_second_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&date_year_) -
      reinterpret_cast<char*>(&time_second_)) + sizeof(date_year_));
}

Date_time_rpt_83::~Date_time_rpt_83() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Date_time_rpt_83)
  SharedDtor();
}

void Date_time_rpt_83::SharedDtor() {
}

void Date_time_rpt_83::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Date_time_rpt_83::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Date_time_rpt_83& Date_time_rpt_83::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Date_time_rpt_83.base);
  return *internal_default_instance();
}


void Date_time_rpt_83::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Date_time_rpt_83)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&time_second_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&date_year_) -
        reinterpret_cast<char*>(&time_second_)) + sizeof(date_year_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Date_time_rpt_83::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Date_time_rpt_83)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 time_second = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time_second();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 time_minute = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_time_minute();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 time_hour = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_time_hour();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 date_day = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_date_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 date_month = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_date_month();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 date_year = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_date_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Date_time_rpt_83)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Date_time_rpt_83)
  return false;
#undef DO_
}

void Date_time_rpt_83::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Date_time_rpt_83)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 time_second = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time_second(), output);
  }

  // optional int32 time_minute = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time_minute(), output);
  }

  // optional int32 time_hour = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time_hour(), output);
  }

  // optional int32 date_day = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->date_day(), output);
  }

  // optional int32 date_month = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->date_month(), output);
  }

  // optional int32 date_year = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->date_year(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Date_time_rpt_83)
}

::google::protobuf::uint8* Date_time_rpt_83::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Date_time_rpt_83)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 time_second = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time_second(), target);
  }

  // optional int32 time_minute = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time_minute(), target);
  }

  // optional int32 time_hour = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time_hour(), target);
  }

  // optional int32 date_day = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->date_day(), target);
  }

  // optional int32 date_month = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->date_month(), target);
  }

  // optional int32 date_year = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->date_year(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Date_time_rpt_83)
  return target;
}

size_t Date_time_rpt_83::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Date_time_rpt_83)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 time_second = 1;
    if (has_time_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_second());
    }

    // optional int32 time_minute = 2;
    if (has_time_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_minute());
    }

    // optional int32 time_hour = 3;
    if (has_time_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_hour());
    }

    // optional int32 date_day = 4;
    if (has_date_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date_day());
    }

    // optional int32 date_month = 5;
    if (has_date_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date_month());
    }

    // optional int32 date_year = 6;
    if (has_date_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date_year());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Date_time_rpt_83::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Date_time_rpt_83)
  GOOGLE_DCHECK_NE(&from, this);
  const Date_time_rpt_83* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Date_time_rpt_83>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Date_time_rpt_83)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Date_time_rpt_83)
    MergeFrom(*source);
  }
}

void Date_time_rpt_83::MergeFrom(const Date_time_rpt_83& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Date_time_rpt_83)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      time_second_ = from.time_second_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_minute_ = from.time_minute_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_hour_ = from.time_hour_;
    }
    if (cached_has_bits & 0x00000008u) {
      date_day_ = from.date_day_;
    }
    if (cached_has_bits & 0x00000010u) {
      date_month_ = from.date_month_;
    }
    if (cached_has_bits & 0x00000020u) {
      date_year_ = from.date_year_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Date_time_rpt_83::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Date_time_rpt_83)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Date_time_rpt_83::CopyFrom(const Date_time_rpt_83& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Date_time_rpt_83)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Date_time_rpt_83::IsInitialized() const {
  return true;
}

void Date_time_rpt_83::Swap(Date_time_rpt_83* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Date_time_rpt_83::InternalSwap(Date_time_rpt_83* other) {
  using std::swap;
  swap(time_second_, other->time_second_);
  swap(time_minute_, other->time_minute_);
  swap(time_hour_, other->time_hour_);
  swap(date_day_, other->date_day_);
  swap(date_month_, other->date_month_);
  swap(date_year_, other->date_year_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Date_time_rpt_83::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Brake_motor_rpt_1_70::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Brake_motor_rpt_1_70::kMotorCurrentFieldNumber;
const int Brake_motor_rpt_1_70::kShaftPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Brake_motor_rpt_1_70::Brake_motor_rpt_1_70()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Brake_motor_rpt_1_70.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake_motor_rpt_1_70)
}
Brake_motor_rpt_1_70::Brake_motor_rpt_1_70(const Brake_motor_rpt_1_70& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&motor_current_, &from.motor_current_,
    static_cast<size_t>(reinterpret_cast<char*>(&shaft_position_) -
    reinterpret_cast<char*>(&motor_current_)) + sizeof(shaft_position_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_motor_rpt_1_70)
}

void Brake_motor_rpt_1_70::SharedCtor() {
  ::memset(&motor_current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shaft_position_) -
      reinterpret_cast<char*>(&motor_current_)) + sizeof(shaft_position_));
}

Brake_motor_rpt_1_70::~Brake_motor_rpt_1_70() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_motor_rpt_1_70)
  SharedDtor();
}

void Brake_motor_rpt_1_70::SharedDtor() {
}

void Brake_motor_rpt_1_70::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Brake_motor_rpt_1_70::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Brake_motor_rpt_1_70& Brake_motor_rpt_1_70::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Brake_motor_rpt_1_70.base);
  return *internal_default_instance();
}


void Brake_motor_rpt_1_70::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_motor_rpt_1_70)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&motor_current_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shaft_position_) -
        reinterpret_cast<char*>(&motor_current_)) + sizeof(shaft_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Brake_motor_rpt_1_70::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Brake_motor_rpt_1_70)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double motor_current = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_motor_current();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &motor_current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double shaft_position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_shaft_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shaft_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Brake_motor_rpt_1_70)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Brake_motor_rpt_1_70)
  return false;
#undef DO_
}

void Brake_motor_rpt_1_70::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Brake_motor_rpt_1_70)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double motor_current = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->motor_current(), output);
  }

  // optional double shaft_position = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->shaft_position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Brake_motor_rpt_1_70)
}

::google::protobuf::uint8* Brake_motor_rpt_1_70::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_motor_rpt_1_70)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double motor_current = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->motor_current(), target);
  }

  // optional double shaft_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->shaft_position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_motor_rpt_1_70)
  return target;
}

size_t Brake_motor_rpt_1_70::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_motor_rpt_1_70)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double motor_current = 1;
    if (has_motor_current()) {
      total_size += 1 + 8;
    }

    // optional double shaft_position = 2;
    if (has_shaft_position()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake_motor_rpt_1_70::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake_motor_rpt_1_70)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_motor_rpt_1_70* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Brake_motor_rpt_1_70>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake_motor_rpt_1_70)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake_motor_rpt_1_70)
    MergeFrom(*source);
  }
}

void Brake_motor_rpt_1_70::MergeFrom(const Brake_motor_rpt_1_70& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_motor_rpt_1_70)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      motor_current_ = from.motor_current_;
    }
    if (cached_has_bits & 0x00000002u) {
      shaft_position_ = from.shaft_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake_motor_rpt_1_70::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake_motor_rpt_1_70)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_motor_rpt_1_70::CopyFrom(const Brake_motor_rpt_1_70& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_motor_rpt_1_70)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_motor_rpt_1_70::IsInitialized() const {
  return true;
}

void Brake_motor_rpt_1_70::Swap(Brake_motor_rpt_1_70* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Brake_motor_rpt_1_70::InternalSwap(Brake_motor_rpt_1_70* other) {
  using std::swap;
  swap(motor_current_, other->motor_current_);
  swap(shaft_position_, other->shaft_position_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Brake_motor_rpt_1_70::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Headlight_rpt_77::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Headlight_rpt_77::kOutputValueFieldNumber;
const int Headlight_rpt_77::kManualInputFieldNumber;
const int Headlight_rpt_77::kCommandedValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Headlight_rpt_77::Headlight_rpt_77()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Headlight_rpt_77.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Headlight_rpt_77)
}
Headlight_rpt_77::Headlight_rpt_77(const Headlight_rpt_77& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&output_value_, &from.output_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&commanded_value_) -
    reinterpret_cast<char*>(&output_value_)) + sizeof(commanded_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Headlight_rpt_77)
}

void Headlight_rpt_77::SharedCtor() {
  ::memset(&output_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commanded_value_) -
      reinterpret_cast<char*>(&output_value_)) + sizeof(commanded_value_));
}

Headlight_rpt_77::~Headlight_rpt_77() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Headlight_rpt_77)
  SharedDtor();
}

void Headlight_rpt_77::SharedDtor() {
}

void Headlight_rpt_77::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Headlight_rpt_77::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Headlight_rpt_77& Headlight_rpt_77::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Headlight_rpt_77.base);
  return *internal_default_instance();
}


void Headlight_rpt_77::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Headlight_rpt_77)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&output_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&commanded_value_) -
        reinterpret_cast<char*>(&output_value_)) + sizeof(commanded_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Headlight_rpt_77::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Headlight_rpt_77)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.Headlight_rpt_77.Output_valueType output_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Headlight_rpt_77_Output_valueType_IsValid(value)) {
            set_output_value(static_cast< ::apollo::canbus::Headlight_rpt_77_Output_valueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Headlight_rpt_77.Manual_inputType manual_input = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Headlight_rpt_77_Manual_inputType_IsValid(value)) {
            set_manual_input(static_cast< ::apollo::canbus::Headlight_rpt_77_Manual_inputType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Headlight_rpt_77.Commanded_valueType commanded_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Headlight_rpt_77_Commanded_valueType_IsValid(value)) {
            set_commanded_value(static_cast< ::apollo::canbus::Headlight_rpt_77_Commanded_valueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Headlight_rpt_77)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Headlight_rpt_77)
  return false;
#undef DO_
}

void Headlight_rpt_77::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Headlight_rpt_77)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Headlight_rpt_77.Output_valueType output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->output_value(), output);
  }

  // optional .apollo.canbus.Headlight_rpt_77.Manual_inputType manual_input = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->manual_input(), output);
  }

  // optional .apollo.canbus.Headlight_rpt_77.Commanded_valueType commanded_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->commanded_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Headlight_rpt_77)
}

::google::protobuf::uint8* Headlight_rpt_77::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Headlight_rpt_77)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Headlight_rpt_77.Output_valueType output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->output_value(), target);
  }

  // optional .apollo.canbus.Headlight_rpt_77.Manual_inputType manual_input = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->manual_input(), target);
  }

  // optional .apollo.canbus.Headlight_rpt_77.Commanded_valueType commanded_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->commanded_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Headlight_rpt_77)
  return target;
}

size_t Headlight_rpt_77::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Headlight_rpt_77)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.canbus.Headlight_rpt_77.Output_valueType output_value = 1;
    if (has_output_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_value());
    }

    // optional .apollo.canbus.Headlight_rpt_77.Manual_inputType manual_input = 2;
    if (has_manual_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->manual_input());
    }

    // optional .apollo.canbus.Headlight_rpt_77.Commanded_valueType commanded_value = 3;
    if (has_commanded_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->commanded_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Headlight_rpt_77::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Headlight_rpt_77)
  GOOGLE_DCHECK_NE(&from, this);
  const Headlight_rpt_77* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Headlight_rpt_77>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Headlight_rpt_77)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Headlight_rpt_77)
    MergeFrom(*source);
  }
}

void Headlight_rpt_77::MergeFrom(const Headlight_rpt_77& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Headlight_rpt_77)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      output_value_ = from.output_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      manual_input_ = from.manual_input_;
    }
    if (cached_has_bits & 0x00000004u) {
      commanded_value_ = from.commanded_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Headlight_rpt_77::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Headlight_rpt_77)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Headlight_rpt_77::CopyFrom(const Headlight_rpt_77& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Headlight_rpt_77)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Headlight_rpt_77::IsInitialized() const {
  return true;
}

void Headlight_rpt_77::Swap(Headlight_rpt_77* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Headlight_rpt_77::InternalSwap(Headlight_rpt_77* other) {
  using std::swap;
  swap(output_value_, other->output_value_);
  swap(manual_input_, other->manual_input_);
  swap(commanded_value_, other->commanded_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Headlight_rpt_77::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Accel_rpt_68::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Accel_rpt_68::kManualInputFieldNumber;
const int Accel_rpt_68::kCommandedValueFieldNumber;
const int Accel_rpt_68::kOutputValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Accel_rpt_68::Accel_rpt_68()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Accel_rpt_68.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Accel_rpt_68)
}
Accel_rpt_68::Accel_rpt_68(const Accel_rpt_68& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&manual_input_, &from.manual_input_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_value_) -
    reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Accel_rpt_68)
}

void Accel_rpt_68::SharedCtor() {
  ::memset(&manual_input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_value_) -
      reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
}

Accel_rpt_68::~Accel_rpt_68() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Accel_rpt_68)
  SharedDtor();
}

void Accel_rpt_68::SharedDtor() {
}

void Accel_rpt_68::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Accel_rpt_68::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Accel_rpt_68& Accel_rpt_68::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Accel_rpt_68.base);
  return *internal_default_instance();
}


void Accel_rpt_68::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Accel_rpt_68)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&manual_input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_value_) -
        reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Accel_rpt_68::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Accel_rpt_68)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double manual_input = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_manual_input();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &manual_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double commanded_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_commanded_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commanded_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double output_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_output_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &output_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Accel_rpt_68)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Accel_rpt_68)
  return false;
#undef DO_
}

void Accel_rpt_68::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Accel_rpt_68)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double manual_input = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->manual_input(), output);
  }

  // optional double commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->commanded_value(), output);
  }

  // optional double output_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->output_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Accel_rpt_68)
}

::google::protobuf::uint8* Accel_rpt_68::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Accel_rpt_68)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double manual_input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->manual_input(), target);
  }

  // optional double commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->commanded_value(), target);
  }

  // optional double output_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->output_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Accel_rpt_68)
  return target;
}

size_t Accel_rpt_68::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Accel_rpt_68)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double manual_input = 1;
    if (has_manual_input()) {
      total_size += 1 + 8;
    }

    // optional double commanded_value = 2;
    if (has_commanded_value()) {
      total_size += 1 + 8;
    }

    // optional double output_value = 3;
    if (has_output_value()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Accel_rpt_68::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Accel_rpt_68)
  GOOGLE_DCHECK_NE(&from, this);
  const Accel_rpt_68* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Accel_rpt_68>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Accel_rpt_68)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Accel_rpt_68)
    MergeFrom(*source);
  }
}

void Accel_rpt_68::MergeFrom(const Accel_rpt_68& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Accel_rpt_68)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      manual_input_ = from.manual_input_;
    }
    if (cached_has_bits & 0x00000002u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      output_value_ = from.output_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Accel_rpt_68::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Accel_rpt_68)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Accel_rpt_68::CopyFrom(const Accel_rpt_68& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Accel_rpt_68)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accel_rpt_68::IsInitialized() const {
  return true;
}

void Accel_rpt_68::Swap(Accel_rpt_68* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Accel_rpt_68::InternalSwap(Accel_rpt_68* other) {
  using std::swap;
  swap(manual_input_, other->manual_input_);
  swap(commanded_value_, other->commanded_value_);
  swap(output_value_, other->output_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Accel_rpt_68::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Steering_motor_rpt_3_75::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Steering_motor_rpt_3_75::kTorqueOutputFieldNumber;
const int Steering_motor_rpt_3_75::kTorqueInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Steering_motor_rpt_3_75::Steering_motor_rpt_3_75()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Steering_motor_rpt_3_75.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Steering_motor_rpt_3_75)
}
Steering_motor_rpt_3_75::Steering_motor_rpt_3_75(const Steering_motor_rpt_3_75& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&torque_output_, &from.torque_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&torque_input_) -
    reinterpret_cast<char*>(&torque_output_)) + sizeof(torque_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_motor_rpt_3_75)
}

void Steering_motor_rpt_3_75::SharedCtor() {
  ::memset(&torque_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&torque_input_) -
      reinterpret_cast<char*>(&torque_output_)) + sizeof(torque_input_));
}

Steering_motor_rpt_3_75::~Steering_motor_rpt_3_75() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_motor_rpt_3_75)
  SharedDtor();
}

void Steering_motor_rpt_3_75::SharedDtor() {
}

void Steering_motor_rpt_3_75::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Steering_motor_rpt_3_75::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Steering_motor_rpt_3_75& Steering_motor_rpt_3_75::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Steering_motor_rpt_3_75.base);
  return *internal_default_instance();
}


void Steering_motor_rpt_3_75::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_motor_rpt_3_75)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&torque_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&torque_input_) -
        reinterpret_cast<char*>(&torque_output_)) + sizeof(torque_input_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Steering_motor_rpt_3_75::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Steering_motor_rpt_3_75)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double torque_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_torque_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &torque_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double torque_input = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_torque_input();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &torque_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Steering_motor_rpt_3_75)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Steering_motor_rpt_3_75)
  return false;
#undef DO_
}

void Steering_motor_rpt_3_75::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Steering_motor_rpt_3_75)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double torque_output = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->torque_output(), output);
  }

  // optional double torque_input = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->torque_input(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Steering_motor_rpt_3_75)
}

::google::protobuf::uint8* Steering_motor_rpt_3_75::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_motor_rpt_3_75)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double torque_output = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->torque_output(), target);
  }

  // optional double torque_input = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->torque_input(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_motor_rpt_3_75)
  return target;
}

size_t Steering_motor_rpt_3_75::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_motor_rpt_3_75)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double torque_output = 1;
    if (has_torque_output()) {
      total_size += 1 + 8;
    }

    // optional double torque_input = 2;
    if (has_torque_input()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steering_motor_rpt_3_75::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Steering_motor_rpt_3_75)
  GOOGLE_DCHECK_NE(&from, this);
  const Steering_motor_rpt_3_75* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Steering_motor_rpt_3_75>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Steering_motor_rpt_3_75)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Steering_motor_rpt_3_75)
    MergeFrom(*source);
  }
}

void Steering_motor_rpt_3_75::MergeFrom(const Steering_motor_rpt_3_75& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_motor_rpt_3_75)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      torque_output_ = from.torque_output_;
    }
    if (cached_has_bits & 0x00000002u) {
      torque_input_ = from.torque_input_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steering_motor_rpt_3_75::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Steering_motor_rpt_3_75)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steering_motor_rpt_3_75::CopyFrom(const Steering_motor_rpt_3_75& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_motor_rpt_3_75)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_motor_rpt_3_75::IsInitialized() const {
  return true;
}

void Steering_motor_rpt_3_75::Swap(Steering_motor_rpt_3_75* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Steering_motor_rpt_3_75::InternalSwap(Steering_motor_rpt_3_75* other) {
  using std::swap;
  swap(torque_output_, other->torque_output_);
  swap(torque_input_, other->torque_input_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Steering_motor_rpt_3_75::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Turn_cmd_63::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Turn_cmd_63::kTurnSignalCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Turn_cmd_63::Turn_cmd_63()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Turn_cmd_63.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Turn_cmd_63)
}
Turn_cmd_63::Turn_cmd_63(const Turn_cmd_63& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  turn_signal_cmd_ = from.turn_signal_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Turn_cmd_63)
}

void Turn_cmd_63::SharedCtor() {
  turn_signal_cmd_ = 0;
}

Turn_cmd_63::~Turn_cmd_63() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Turn_cmd_63)
  SharedDtor();
}

void Turn_cmd_63::SharedDtor() {
}

void Turn_cmd_63::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Turn_cmd_63::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Turn_cmd_63& Turn_cmd_63::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Turn_cmd_63.base);
  return *internal_default_instance();
}


void Turn_cmd_63::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Turn_cmd_63)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  turn_signal_cmd_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Turn_cmd_63::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Turn_cmd_63)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.Turn_cmd_63.Turn_signal_cmdType turn_signal_cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Turn_cmd_63_Turn_signal_cmdType_IsValid(value)) {
            set_turn_signal_cmd(static_cast< ::apollo::canbus::Turn_cmd_63_Turn_signal_cmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Turn_cmd_63)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Turn_cmd_63)
  return false;
#undef DO_
}

void Turn_cmd_63::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Turn_cmd_63)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Turn_cmd_63.Turn_signal_cmdType turn_signal_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->turn_signal_cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Turn_cmd_63)
}

::google::protobuf::uint8* Turn_cmd_63::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Turn_cmd_63)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Turn_cmd_63.Turn_signal_cmdType turn_signal_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->turn_signal_cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Turn_cmd_63)
  return target;
}

size_t Turn_cmd_63::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Turn_cmd_63)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .apollo.canbus.Turn_cmd_63.Turn_signal_cmdType turn_signal_cmd = 1;
  if (has_turn_signal_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn_signal_cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Turn_cmd_63::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Turn_cmd_63)
  GOOGLE_DCHECK_NE(&from, this);
  const Turn_cmd_63* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Turn_cmd_63>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Turn_cmd_63)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Turn_cmd_63)
    MergeFrom(*source);
  }
}

void Turn_cmd_63::MergeFrom(const Turn_cmd_63& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Turn_cmd_63)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_turn_signal_cmd()) {
    set_turn_signal_cmd(from.turn_signal_cmd());
  }
}

void Turn_cmd_63::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Turn_cmd_63)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Turn_cmd_63::CopyFrom(const Turn_cmd_63& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Turn_cmd_63)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turn_cmd_63::IsInitialized() const {
  return true;
}

void Turn_cmd_63::Swap(Turn_cmd_63* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Turn_cmd_63::InternalSwap(Turn_cmd_63* other) {
  using std::swap;
  swap(turn_signal_cmd_, other->turn_signal_cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Turn_cmd_63::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Turn_rpt_64::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Turn_rpt_64::kManualInputFieldNumber;
const int Turn_rpt_64::kCommandedValueFieldNumber;
const int Turn_rpt_64::kOutputValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Turn_rpt_64::Turn_rpt_64()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Turn_rpt_64.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Turn_rpt_64)
}
Turn_rpt_64::Turn_rpt_64(const Turn_rpt_64& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&manual_input_, &from.manual_input_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_value_) -
    reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Turn_rpt_64)
}

void Turn_rpt_64::SharedCtor() {
  ::memset(&manual_input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_value_) -
      reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
}

Turn_rpt_64::~Turn_rpt_64() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Turn_rpt_64)
  SharedDtor();
}

void Turn_rpt_64::SharedDtor() {
}

void Turn_rpt_64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Turn_rpt_64::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Turn_rpt_64& Turn_rpt_64::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Turn_rpt_64.base);
  return *internal_default_instance();
}


void Turn_rpt_64::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Turn_rpt_64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&manual_input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_value_) -
        reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Turn_rpt_64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Turn_rpt_64)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.Turn_rpt_64.Manual_inputType manual_input = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Turn_rpt_64_Manual_inputType_IsValid(value)) {
            set_manual_input(static_cast< ::apollo::canbus::Turn_rpt_64_Manual_inputType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Turn_rpt_64.Commanded_valueType commanded_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Turn_rpt_64_Commanded_valueType_IsValid(value)) {
            set_commanded_value(static_cast< ::apollo::canbus::Turn_rpt_64_Commanded_valueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Turn_rpt_64.Output_valueType output_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Turn_rpt_64_Output_valueType_IsValid(value)) {
            set_output_value(static_cast< ::apollo::canbus::Turn_rpt_64_Output_valueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Turn_rpt_64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Turn_rpt_64)
  return false;
#undef DO_
}

void Turn_rpt_64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Turn_rpt_64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Turn_rpt_64.Manual_inputType manual_input = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->manual_input(), output);
  }

  // optional .apollo.canbus.Turn_rpt_64.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->commanded_value(), output);
  }

  // optional .apollo.canbus.Turn_rpt_64.Output_valueType output_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->output_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Turn_rpt_64)
}

::google::protobuf::uint8* Turn_rpt_64::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Turn_rpt_64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Turn_rpt_64.Manual_inputType manual_input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->manual_input(), target);
  }

  // optional .apollo.canbus.Turn_rpt_64.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->commanded_value(), target);
  }

  // optional .apollo.canbus.Turn_rpt_64.Output_valueType output_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->output_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Turn_rpt_64)
  return target;
}

size_t Turn_rpt_64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Turn_rpt_64)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.canbus.Turn_rpt_64.Manual_inputType manual_input = 1;
    if (has_manual_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->manual_input());
    }

    // optional .apollo.canbus.Turn_rpt_64.Commanded_valueType commanded_value = 2;
    if (has_commanded_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->commanded_value());
    }

    // optional .apollo.canbus.Turn_rpt_64.Output_valueType output_value = 3;
    if (has_output_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Turn_rpt_64::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Turn_rpt_64)
  GOOGLE_DCHECK_NE(&from, this);
  const Turn_rpt_64* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Turn_rpt_64>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Turn_rpt_64)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Turn_rpt_64)
    MergeFrom(*source);
  }
}

void Turn_rpt_64::MergeFrom(const Turn_rpt_64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Turn_rpt_64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      manual_input_ = from.manual_input_;
    }
    if (cached_has_bits & 0x00000002u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      output_value_ = from.output_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Turn_rpt_64::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Turn_rpt_64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Turn_rpt_64::CopyFrom(const Turn_rpt_64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Turn_rpt_64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Turn_rpt_64::IsInitialized() const {
  return true;
}

void Turn_rpt_64::Swap(Turn_rpt_64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Turn_rpt_64::InternalSwap(Turn_rpt_64* other) {
  using std::swap;
  swap(manual_input_, other->manual_input_);
  swap(commanded_value_, other->commanded_value_);
  swap(output_value_, other->output_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Turn_rpt_64::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Shift_cmd_65::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Shift_cmd_65::kShiftCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Shift_cmd_65::Shift_cmd_65()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Shift_cmd_65.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Shift_cmd_65)
}
Shift_cmd_65::Shift_cmd_65(const Shift_cmd_65& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shift_cmd_ = from.shift_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Shift_cmd_65)
}

void Shift_cmd_65::SharedCtor() {
  shift_cmd_ = 0;
}

Shift_cmd_65::~Shift_cmd_65() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Shift_cmd_65)
  SharedDtor();
}

void Shift_cmd_65::SharedDtor() {
}

void Shift_cmd_65::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Shift_cmd_65::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Shift_cmd_65& Shift_cmd_65::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Shift_cmd_65.base);
  return *internal_default_instance();
}


void Shift_cmd_65::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Shift_cmd_65)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shift_cmd_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Shift_cmd_65::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Shift_cmd_65)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.Shift_cmd_65.Shift_cmdType shift_cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Shift_cmd_65_Shift_cmdType_IsValid(value)) {
            set_shift_cmd(static_cast< ::apollo::canbus::Shift_cmd_65_Shift_cmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Shift_cmd_65)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Shift_cmd_65)
  return false;
#undef DO_
}

void Shift_cmd_65::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Shift_cmd_65)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Shift_cmd_65.Shift_cmdType shift_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->shift_cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Shift_cmd_65)
}

::google::protobuf::uint8* Shift_cmd_65::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Shift_cmd_65)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Shift_cmd_65.Shift_cmdType shift_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->shift_cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Shift_cmd_65)
  return target;
}

size_t Shift_cmd_65::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Shift_cmd_65)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .apollo.canbus.Shift_cmd_65.Shift_cmdType shift_cmd = 1;
  if (has_shift_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->shift_cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Shift_cmd_65::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Shift_cmd_65)
  GOOGLE_DCHECK_NE(&from, this);
  const Shift_cmd_65* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Shift_cmd_65>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Shift_cmd_65)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Shift_cmd_65)
    MergeFrom(*source);
  }
}

void Shift_cmd_65::MergeFrom(const Shift_cmd_65& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Shift_cmd_65)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shift_cmd()) {
    set_shift_cmd(from.shift_cmd());
  }
}

void Shift_cmd_65::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Shift_cmd_65)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shift_cmd_65::CopyFrom(const Shift_cmd_65& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Shift_cmd_65)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shift_cmd_65::IsInitialized() const {
  return true;
}

void Shift_cmd_65::Swap(Shift_cmd_65* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Shift_cmd_65::InternalSwap(Shift_cmd_65* other) {
  using std::swap;
  swap(shift_cmd_, other->shift_cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Shift_cmd_65::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Shift_rpt_66::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Shift_rpt_66::kManualInputFieldNumber;
const int Shift_rpt_66::kCommandedValueFieldNumber;
const int Shift_rpt_66::kOutputValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Shift_rpt_66::Shift_rpt_66()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Shift_rpt_66.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Shift_rpt_66)
}
Shift_rpt_66::Shift_rpt_66(const Shift_rpt_66& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&manual_input_, &from.manual_input_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_value_) -
    reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Shift_rpt_66)
}

void Shift_rpt_66::SharedCtor() {
  ::memset(&manual_input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_value_) -
      reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
}

Shift_rpt_66::~Shift_rpt_66() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Shift_rpt_66)
  SharedDtor();
}

void Shift_rpt_66::SharedDtor() {
}

void Shift_rpt_66::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Shift_rpt_66::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Shift_rpt_66& Shift_rpt_66::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Shift_rpt_66.base);
  return *internal_default_instance();
}


void Shift_rpt_66::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Shift_rpt_66)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&manual_input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&output_value_) -
        reinterpret_cast<char*>(&manual_input_)) + sizeof(output_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Shift_rpt_66::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Shift_rpt_66)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.Shift_rpt_66.Manual_inputType manual_input = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Shift_rpt_66_Manual_inputType_IsValid(value)) {
            set_manual_input(static_cast< ::apollo::canbus::Shift_rpt_66_Manual_inputType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Shift_rpt_66.Commanded_valueType commanded_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Shift_rpt_66_Commanded_valueType_IsValid(value)) {
            set_commanded_value(static_cast< ::apollo::canbus::Shift_rpt_66_Commanded_valueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Shift_rpt_66.Output_valueType output_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Shift_rpt_66_Output_valueType_IsValid(value)) {
            set_output_value(static_cast< ::apollo::canbus::Shift_rpt_66_Output_valueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Shift_rpt_66)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Shift_rpt_66)
  return false;
#undef DO_
}

void Shift_rpt_66::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Shift_rpt_66)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Shift_rpt_66.Manual_inputType manual_input = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->manual_input(), output);
  }

  // optional .apollo.canbus.Shift_rpt_66.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->commanded_value(), output);
  }

  // optional .apollo.canbus.Shift_rpt_66.Output_valueType output_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->output_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Shift_rpt_66)
}

::google::protobuf::uint8* Shift_rpt_66::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Shift_rpt_66)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Shift_rpt_66.Manual_inputType manual_input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->manual_input(), target);
  }

  // optional .apollo.canbus.Shift_rpt_66.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->commanded_value(), target);
  }

  // optional .apollo.canbus.Shift_rpt_66.Output_valueType output_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->output_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Shift_rpt_66)
  return target;
}

size_t Shift_rpt_66::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Shift_rpt_66)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.canbus.Shift_rpt_66.Manual_inputType manual_input = 1;
    if (has_manual_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->manual_input());
    }

    // optional .apollo.canbus.Shift_rpt_66.Commanded_valueType commanded_value = 2;
    if (has_commanded_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->commanded_value());
    }

    // optional .apollo.canbus.Shift_rpt_66.Output_valueType output_value = 3;
    if (has_output_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Shift_rpt_66::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Shift_rpt_66)
  GOOGLE_DCHECK_NE(&from, this);
  const Shift_rpt_66* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Shift_rpt_66>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Shift_rpt_66)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Shift_rpt_66)
    MergeFrom(*source);
  }
}

void Shift_rpt_66::MergeFrom(const Shift_rpt_66& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Shift_rpt_66)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      manual_input_ = from.manual_input_;
    }
    if (cached_has_bits & 0x00000002u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      output_value_ = from.output_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Shift_rpt_66::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Shift_rpt_66)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shift_rpt_66::CopyFrom(const Shift_rpt_66& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Shift_rpt_66)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shift_rpt_66::IsInitialized() const {
  return true;
}

void Shift_rpt_66::Swap(Shift_rpt_66* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Shift_rpt_66::InternalSwap(Shift_rpt_66* other) {
  using std::swap;
  swap(manual_input_, other->manual_input_);
  swap(commanded_value_, other->commanded_value_);
  swap(output_value_, other->output_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Shift_rpt_66::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Accel_cmd_67::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Accel_cmd_67::kAccelCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Accel_cmd_67::Accel_cmd_67()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Accel_cmd_67.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Accel_cmd_67)
}
Accel_cmd_67::Accel_cmd_67(const Accel_cmd_67& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  accel_cmd_ = from.accel_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Accel_cmd_67)
}

void Accel_cmd_67::SharedCtor() {
  accel_cmd_ = 0;
}

Accel_cmd_67::~Accel_cmd_67() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Accel_cmd_67)
  SharedDtor();
}

void Accel_cmd_67::SharedDtor() {
}

void Accel_cmd_67::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Accel_cmd_67::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Accel_cmd_67& Accel_cmd_67::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Accel_cmd_67.base);
  return *internal_default_instance();
}


void Accel_cmd_67::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Accel_cmd_67)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accel_cmd_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Accel_cmd_67::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Accel_cmd_67)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double accel_cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_accel_cmd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accel_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Accel_cmd_67)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Accel_cmd_67)
  return false;
#undef DO_
}

void Accel_cmd_67::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Accel_cmd_67)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double accel_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->accel_cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Accel_cmd_67)
}

::google::protobuf::uint8* Accel_cmd_67::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Accel_cmd_67)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double accel_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->accel_cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Accel_cmd_67)
  return target;
}

size_t Accel_cmd_67::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Accel_cmd_67)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional double accel_cmd = 1;
  if (has_accel_cmd()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Accel_cmd_67::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Accel_cmd_67)
  GOOGLE_DCHECK_NE(&from, this);
  const Accel_cmd_67* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Accel_cmd_67>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Accel_cmd_67)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Accel_cmd_67)
    MergeFrom(*source);
  }
}

void Accel_cmd_67::MergeFrom(const Accel_cmd_67& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Accel_cmd_67)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_accel_cmd()) {
    set_accel_cmd(from.accel_cmd());
  }
}

void Accel_cmd_67::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Accel_cmd_67)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Accel_cmd_67::CopyFrom(const Accel_cmd_67& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Accel_cmd_67)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accel_cmd_67::IsInitialized() const {
  return true;
}

void Accel_cmd_67::Swap(Accel_cmd_67* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Accel_cmd_67::InternalSwap(Accel_cmd_67* other) {
  using std::swap;
  swap(accel_cmd_, other->accel_cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Accel_cmd_67::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Lat_lon_heading_rpt_82::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lat_lon_heading_rpt_82::kHeadingFieldNumber;
const int Lat_lon_heading_rpt_82::kLongitudeSecondsFieldNumber;
const int Lat_lon_heading_rpt_82::kLongitudeMinutesFieldNumber;
const int Lat_lon_heading_rpt_82::kLongitudeDegreesFieldNumber;
const int Lat_lon_heading_rpt_82::kLatitudeSecondsFieldNumber;
const int Lat_lon_heading_rpt_82::kLatitudeMinutesFieldNumber;
const int Lat_lon_heading_rpt_82::kLatitudeDegreesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lat_lon_heading_rpt_82::Lat_lon_heading_rpt_82()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Lat_lon_heading_rpt_82.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Lat_lon_heading_rpt_82)
}
Lat_lon_heading_rpt_82::Lat_lon_heading_rpt_82(const Lat_lon_heading_rpt_82& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&heading_, &from.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_degrees_) -
    reinterpret_cast<char*>(&heading_)) + sizeof(latitude_degrees_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Lat_lon_heading_rpt_82)
}

void Lat_lon_heading_rpt_82::SharedCtor() {
  ::memset(&heading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_degrees_) -
      reinterpret_cast<char*>(&heading_)) + sizeof(latitude_degrees_));
}

Lat_lon_heading_rpt_82::~Lat_lon_heading_rpt_82() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Lat_lon_heading_rpt_82)
  SharedDtor();
}

void Lat_lon_heading_rpt_82::SharedDtor() {
}

void Lat_lon_heading_rpt_82::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Lat_lon_heading_rpt_82::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lat_lon_heading_rpt_82& Lat_lon_heading_rpt_82::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Lat_lon_heading_rpt_82.base);
  return *internal_default_instance();
}


void Lat_lon_heading_rpt_82::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Lat_lon_heading_rpt_82)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latitude_degrees_) -
        reinterpret_cast<char*>(&heading_)) + sizeof(latitude_degrees_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Lat_lon_heading_rpt_82::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Lat_lon_heading_rpt_82)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double heading = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 longitude_seconds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_longitude_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longitude_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 longitude_minutes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_longitude_minutes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longitude_minutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 longitude_degrees = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_longitude_degrees();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longitude_degrees_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 latitude_seconds = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_latitude_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latitude_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 latitude_minutes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_latitude_minutes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latitude_minutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 latitude_degrees = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_latitude_degrees();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latitude_degrees_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Lat_lon_heading_rpt_82)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Lat_lon_heading_rpt_82)
  return false;
#undef DO_
}

void Lat_lon_heading_rpt_82::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Lat_lon_heading_rpt_82)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double heading = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->heading(), output);
  }

  // optional int32 longitude_seconds = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->longitude_seconds(), output);
  }

  // optional int32 longitude_minutes = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->longitude_minutes(), output);
  }

  // optional int32 longitude_degrees = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->longitude_degrees(), output);
  }

  // optional int32 latitude_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->latitude_seconds(), output);
  }

  // optional int32 latitude_minutes = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->latitude_minutes(), output);
  }

  // optional int32 latitude_degrees = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->latitude_degrees(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Lat_lon_heading_rpt_82)
}

::google::protobuf::uint8* Lat_lon_heading_rpt_82::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Lat_lon_heading_rpt_82)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double heading = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->heading(), target);
  }

  // optional int32 longitude_seconds = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->longitude_seconds(), target);
  }

  // optional int32 longitude_minutes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->longitude_minutes(), target);
  }

  // optional int32 longitude_degrees = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->longitude_degrees(), target);
  }

  // optional int32 latitude_seconds = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->latitude_seconds(), target);
  }

  // optional int32 latitude_minutes = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->latitude_minutes(), target);
  }

  // optional int32 latitude_degrees = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->latitude_degrees(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Lat_lon_heading_rpt_82)
  return target;
}

size_t Lat_lon_heading_rpt_82::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Lat_lon_heading_rpt_82)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional double heading = 1;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional int32 longitude_seconds = 2;
    if (has_longitude_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->longitude_seconds());
    }

    // optional int32 longitude_minutes = 3;
    if (has_longitude_minutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->longitude_minutes());
    }

    // optional int32 longitude_degrees = 4;
    if (has_longitude_degrees()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->longitude_degrees());
    }

    // optional int32 latitude_seconds = 5;
    if (has_latitude_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latitude_seconds());
    }

    // optional int32 latitude_minutes = 6;
    if (has_latitude_minutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latitude_minutes());
    }

    // optional int32 latitude_degrees = 7;
    if (has_latitude_degrees()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latitude_degrees());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lat_lon_heading_rpt_82::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Lat_lon_heading_rpt_82)
  GOOGLE_DCHECK_NE(&from, this);
  const Lat_lon_heading_rpt_82* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lat_lon_heading_rpt_82>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Lat_lon_heading_rpt_82)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Lat_lon_heading_rpt_82)
    MergeFrom(*source);
  }
}

void Lat_lon_heading_rpt_82::MergeFrom(const Lat_lon_heading_rpt_82& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Lat_lon_heading_rpt_82)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_seconds_ = from.longitude_seconds_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_minutes_ = from.longitude_minutes_;
    }
    if (cached_has_bits & 0x00000008u) {
      longitude_degrees_ = from.longitude_degrees_;
    }
    if (cached_has_bits & 0x00000010u) {
      latitude_seconds_ = from.latitude_seconds_;
    }
    if (cached_has_bits & 0x00000020u) {
      latitude_minutes_ = from.latitude_minutes_;
    }
    if (cached_has_bits & 0x00000040u) {
      latitude_degrees_ = from.latitude_degrees_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Lat_lon_heading_rpt_82::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Lat_lon_heading_rpt_82)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lat_lon_heading_rpt_82::CopyFrom(const Lat_lon_heading_rpt_82& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Lat_lon_heading_rpt_82)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lat_lon_heading_rpt_82::IsInitialized() const {
  return true;
}

void Lat_lon_heading_rpt_82::Swap(Lat_lon_heading_rpt_82* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lat_lon_heading_rpt_82::InternalSwap(Lat_lon_heading_rpt_82* other) {
  using std::swap;
  swap(heading_, other->heading_);
  swap(longitude_seconds_, other->longitude_seconds_);
  swap(longitude_minutes_, other->longitude_minutes_);
  swap(longitude_degrees_, other->longitude_degrees_);
  swap(latitude_seconds_, other->latitude_seconds_);
  swap(latitude_minutes_, other->latitude_minutes_);
  swap(latitude_degrees_, other->latitude_degrees_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Lat_lon_heading_rpt_82::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Global_cmd_69::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Global_cmd_69::kPacmodEnableFieldNumber;
const int Global_cmd_69::kClearOverrideFieldNumber;
const int Global_cmd_69::kIgnoreOverrideFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Global_cmd_69::Global_cmd_69()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Global_cmd_69.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Global_cmd_69)
}
Global_cmd_69::Global_cmd_69(const Global_cmd_69& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pacmod_enable_, &from.pacmod_enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&ignore_override_) -
    reinterpret_cast<char*>(&pacmod_enable_)) + sizeof(ignore_override_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Global_cmd_69)
}

void Global_cmd_69::SharedCtor() {
  ::memset(&pacmod_enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_override_) -
      reinterpret_cast<char*>(&pacmod_enable_)) + sizeof(ignore_override_));
}

Global_cmd_69::~Global_cmd_69() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Global_cmd_69)
  SharedDtor();
}

void Global_cmd_69::SharedDtor() {
}

void Global_cmd_69::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Global_cmd_69::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Global_cmd_69& Global_cmd_69::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Global_cmd_69.base);
  return *internal_default_instance();
}


void Global_cmd_69::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Global_cmd_69)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&pacmod_enable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ignore_override_) -
        reinterpret_cast<char*>(&pacmod_enable_)) + sizeof(ignore_override_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Global_cmd_69::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Global_cmd_69)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.Global_cmd_69.Pacmod_enableType pacmod_enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Global_cmd_69_Pacmod_enableType_IsValid(value)) {
            set_pacmod_enable(static_cast< ::apollo::canbus::Global_cmd_69_Pacmod_enableType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Global_cmd_69.Clear_overrideType clear_override = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Global_cmd_69_Clear_overrideType_IsValid(value)) {
            set_clear_override(static_cast< ::apollo::canbus::Global_cmd_69_Clear_overrideType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Global_cmd_69.Ignore_overrideType ignore_override = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Global_cmd_69_Ignore_overrideType_IsValid(value)) {
            set_ignore_override(static_cast< ::apollo::canbus::Global_cmd_69_Ignore_overrideType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Global_cmd_69)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Global_cmd_69)
  return false;
#undef DO_
}

void Global_cmd_69::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Global_cmd_69)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Global_cmd_69.Pacmod_enableType pacmod_enable = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pacmod_enable(), output);
  }

  // optional .apollo.canbus.Global_cmd_69.Clear_overrideType clear_override = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->clear_override(), output);
  }

  // optional .apollo.canbus.Global_cmd_69.Ignore_overrideType ignore_override = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ignore_override(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Global_cmd_69)
}

::google::protobuf::uint8* Global_cmd_69::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Global_cmd_69)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Global_cmd_69.Pacmod_enableType pacmod_enable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pacmod_enable(), target);
  }

  // optional .apollo.canbus.Global_cmd_69.Clear_overrideType clear_override = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->clear_override(), target);
  }

  // optional .apollo.canbus.Global_cmd_69.Ignore_overrideType ignore_override = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ignore_override(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Global_cmd_69)
  return target;
}

size_t Global_cmd_69::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Global_cmd_69)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.canbus.Global_cmd_69.Pacmod_enableType pacmod_enable = 1;
    if (has_pacmod_enable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pacmod_enable());
    }

    // optional .apollo.canbus.Global_cmd_69.Clear_overrideType clear_override = 2;
    if (has_clear_override()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->clear_override());
    }

    // optional .apollo.canbus.Global_cmd_69.Ignore_overrideType ignore_override = 3;
    if (has_ignore_override()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ignore_override());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Global_cmd_69::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Global_cmd_69)
  GOOGLE_DCHECK_NE(&from, this);
  const Global_cmd_69* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Global_cmd_69>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Global_cmd_69)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Global_cmd_69)
    MergeFrom(*source);
  }
}

void Global_cmd_69::MergeFrom(const Global_cmd_69& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Global_cmd_69)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      pacmod_enable_ = from.pacmod_enable_;
    }
    if (cached_has_bits & 0x00000002u) {
      clear_override_ = from.clear_override_;
    }
    if (cached_has_bits & 0x00000004u) {
      ignore_override_ = from.ignore_override_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Global_cmd_69::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Global_cmd_69)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Global_cmd_69::CopyFrom(const Global_cmd_69& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Global_cmd_69)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Global_cmd_69::IsInitialized() const {
  return true;
}

void Global_cmd_69::Swap(Global_cmd_69* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Global_cmd_69::InternalSwap(Global_cmd_69* other) {
  using std::swap;
  swap(pacmod_enable_, other->pacmod_enable_);
  swap(clear_override_, other->clear_override_);
  swap(ignore_override_, other->ignore_override_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Global_cmd_69::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Parking_brake_status_rpt_80::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Parking_brake_status_rpt_80::kParkingBrakeEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Parking_brake_status_rpt_80::Parking_brake_status_rpt_80()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Parking_brake_status_rpt_80.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Parking_brake_status_rpt_80)
}
Parking_brake_status_rpt_80::Parking_brake_status_rpt_80(const Parking_brake_status_rpt_80& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parking_brake_enabled_ = from.parking_brake_enabled_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Parking_brake_status_rpt_80)
}

void Parking_brake_status_rpt_80::SharedCtor() {
  parking_brake_enabled_ = 0;
}

Parking_brake_status_rpt_80::~Parking_brake_status_rpt_80() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Parking_brake_status_rpt_80)
  SharedDtor();
}

void Parking_brake_status_rpt_80::SharedDtor() {
}

void Parking_brake_status_rpt_80::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Parking_brake_status_rpt_80::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Parking_brake_status_rpt_80& Parking_brake_status_rpt_80::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Parking_brake_status_rpt_80.base);
  return *internal_default_instance();
}


void Parking_brake_status_rpt_80::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Parking_brake_status_rpt_80)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parking_brake_enabled_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Parking_brake_status_rpt_80::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Parking_brake_status_rpt_80)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.Parking_brake_status_rpt_80.Parking_brake_enabledType parking_brake_enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Parking_brake_status_rpt_80_Parking_brake_enabledType_IsValid(value)) {
            set_parking_brake_enabled(static_cast< ::apollo::canbus::Parking_brake_status_rpt_80_Parking_brake_enabledType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Parking_brake_status_rpt_80)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Parking_brake_status_rpt_80)
  return false;
#undef DO_
}

void Parking_brake_status_rpt_80::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Parking_brake_status_rpt_80)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Parking_brake_status_rpt_80.Parking_brake_enabledType parking_brake_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->parking_brake_enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Parking_brake_status_rpt_80)
}

::google::protobuf::uint8* Parking_brake_status_rpt_80::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Parking_brake_status_rpt_80)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Parking_brake_status_rpt_80.Parking_brake_enabledType parking_brake_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->parking_brake_enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Parking_brake_status_rpt_80)
  return target;
}

size_t Parking_brake_status_rpt_80::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Parking_brake_status_rpt_80)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .apollo.canbus.Parking_brake_status_rpt_80.Parking_brake_enabledType parking_brake_enabled = 1;
  if (has_parking_brake_enabled()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->parking_brake_enabled());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Parking_brake_status_rpt_80::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Parking_brake_status_rpt_80)
  GOOGLE_DCHECK_NE(&from, this);
  const Parking_brake_status_rpt_80* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Parking_brake_status_rpt_80>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Parking_brake_status_rpt_80)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Parking_brake_status_rpt_80)
    MergeFrom(*source);
  }
}

void Parking_brake_status_rpt_80::MergeFrom(const Parking_brake_status_rpt_80& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Parking_brake_status_rpt_80)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_parking_brake_enabled()) {
    set_parking_brake_enabled(from.parking_brake_enabled());
  }
}

void Parking_brake_status_rpt_80::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Parking_brake_status_rpt_80)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parking_brake_status_rpt_80::CopyFrom(const Parking_brake_status_rpt_80& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Parking_brake_status_rpt_80)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parking_brake_status_rpt_80::IsInitialized() const {
  return true;
}

void Parking_brake_status_rpt_80::Swap(Parking_brake_status_rpt_80* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Parking_brake_status_rpt_80::InternalSwap(Parking_brake_status_rpt_80* other) {
  using std::swap;
  swap(parking_brake_enabled_, other->parking_brake_enabled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Parking_brake_status_rpt_80::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Yaw_rate_rpt_81::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Yaw_rate_rpt_81::kYawRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Yaw_rate_rpt_81::Yaw_rate_rpt_81()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Yaw_rate_rpt_81.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Yaw_rate_rpt_81)
}
Yaw_rate_rpt_81::Yaw_rate_rpt_81(const Yaw_rate_rpt_81& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  yaw_rate_ = from.yaw_rate_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Yaw_rate_rpt_81)
}

void Yaw_rate_rpt_81::SharedCtor() {
  yaw_rate_ = 0;
}

Yaw_rate_rpt_81::~Yaw_rate_rpt_81() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Yaw_rate_rpt_81)
  SharedDtor();
}

void Yaw_rate_rpt_81::SharedDtor() {
}

void Yaw_rate_rpt_81::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Yaw_rate_rpt_81::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Yaw_rate_rpt_81& Yaw_rate_rpt_81::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Yaw_rate_rpt_81.base);
  return *internal_default_instance();
}


void Yaw_rate_rpt_81::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Yaw_rate_rpt_81)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  yaw_rate_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Yaw_rate_rpt_81::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Yaw_rate_rpt_81)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double yaw_rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_yaw_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Yaw_rate_rpt_81)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Yaw_rate_rpt_81)
  return false;
#undef DO_
}

void Yaw_rate_rpt_81::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Yaw_rate_rpt_81)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double yaw_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->yaw_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Yaw_rate_rpt_81)
}

::google::protobuf::uint8* Yaw_rate_rpt_81::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Yaw_rate_rpt_81)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double yaw_rate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->yaw_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Yaw_rate_rpt_81)
  return target;
}

size_t Yaw_rate_rpt_81::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Yaw_rate_rpt_81)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional double yaw_rate = 1;
  if (has_yaw_rate()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Yaw_rate_rpt_81::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Yaw_rate_rpt_81)
  GOOGLE_DCHECK_NE(&from, this);
  const Yaw_rate_rpt_81* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Yaw_rate_rpt_81>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Yaw_rate_rpt_81)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Yaw_rate_rpt_81)
    MergeFrom(*source);
  }
}

void Yaw_rate_rpt_81::MergeFrom(const Yaw_rate_rpt_81& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Yaw_rate_rpt_81)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_yaw_rate()) {
    set_yaw_rate(from.yaw_rate());
  }
}

void Yaw_rate_rpt_81::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Yaw_rate_rpt_81)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Yaw_rate_rpt_81::CopyFrom(const Yaw_rate_rpt_81& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Yaw_rate_rpt_81)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Yaw_rate_rpt_81::IsInitialized() const {
  return true;
}

void Yaw_rate_rpt_81::Swap(Yaw_rate_rpt_81* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Yaw_rate_rpt_81::InternalSwap(Yaw_rate_rpt_81* other) {
  using std::swap;
  swap(yaw_rate_, other->yaw_rate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Yaw_rate_rpt_81::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Horn_rpt_79::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Horn_rpt_79::kOutputValueFieldNumber;
const int Horn_rpt_79::kCommandedValueFieldNumber;
const int Horn_rpt_79::kManualInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Horn_rpt_79::Horn_rpt_79()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Horn_rpt_79.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Horn_rpt_79)
}
Horn_rpt_79::Horn_rpt_79(const Horn_rpt_79& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&output_value_, &from.output_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&manual_input_) -
    reinterpret_cast<char*>(&output_value_)) + sizeof(manual_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Horn_rpt_79)
}

void Horn_rpt_79::SharedCtor() {
  ::memset(&output_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&manual_input_) -
      reinterpret_cast<char*>(&output_value_)) + sizeof(manual_input_));
}

Horn_rpt_79::~Horn_rpt_79() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Horn_rpt_79)
  SharedDtor();
}

void Horn_rpt_79::SharedDtor() {
}

void Horn_rpt_79::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Horn_rpt_79::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Horn_rpt_79& Horn_rpt_79::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Horn_rpt_79.base);
  return *internal_default_instance();
}


void Horn_rpt_79::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Horn_rpt_79)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&output_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manual_input_) -
        reinterpret_cast<char*>(&output_value_)) + sizeof(manual_input_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Horn_rpt_79::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Horn_rpt_79)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.Horn_rpt_79.Output_valueType output_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Horn_rpt_79_Output_valueType_IsValid(value)) {
            set_output_value(static_cast< ::apollo::canbus::Horn_rpt_79_Output_valueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Horn_rpt_79.Commanded_valueType commanded_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Horn_rpt_79_Commanded_valueType_IsValid(value)) {
            set_commanded_value(static_cast< ::apollo::canbus::Horn_rpt_79_Commanded_valueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Horn_rpt_79.Manual_inputType manual_input = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Horn_rpt_79_Manual_inputType_IsValid(value)) {
            set_manual_input(static_cast< ::apollo::canbus::Horn_rpt_79_Manual_inputType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Horn_rpt_79)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Horn_rpt_79)
  return false;
#undef DO_
}

void Horn_rpt_79::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Horn_rpt_79)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Horn_rpt_79.Output_valueType output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->output_value(), output);
  }

  // optional .apollo.canbus.Horn_rpt_79.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->commanded_value(), output);
  }

  // optional .apollo.canbus.Horn_rpt_79.Manual_inputType manual_input = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->manual_input(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Horn_rpt_79)
}

::google::protobuf::uint8* Horn_rpt_79::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Horn_rpt_79)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Horn_rpt_79.Output_valueType output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->output_value(), target);
  }

  // optional .apollo.canbus.Horn_rpt_79.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->commanded_value(), target);
  }

  // optional .apollo.canbus.Horn_rpt_79.Manual_inputType manual_input = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->manual_input(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Horn_rpt_79)
  return target;
}

size_t Horn_rpt_79::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Horn_rpt_79)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.canbus.Horn_rpt_79.Output_valueType output_value = 1;
    if (has_output_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_value());
    }

    // optional .apollo.canbus.Horn_rpt_79.Commanded_valueType commanded_value = 2;
    if (has_commanded_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->commanded_value());
    }

    // optional .apollo.canbus.Horn_rpt_79.Manual_inputType manual_input = 3;
    if (has_manual_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->manual_input());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Horn_rpt_79::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Horn_rpt_79)
  GOOGLE_DCHECK_NE(&from, this);
  const Horn_rpt_79* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Horn_rpt_79>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Horn_rpt_79)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Horn_rpt_79)
    MergeFrom(*source);
  }
}

void Horn_rpt_79::MergeFrom(const Horn_rpt_79& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Horn_rpt_79)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      output_value_ = from.output_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      manual_input_ = from.manual_input_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Horn_rpt_79::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Horn_rpt_79)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Horn_rpt_79::CopyFrom(const Horn_rpt_79& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Horn_rpt_79)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Horn_rpt_79::IsInitialized() const {
  return true;
}

void Horn_rpt_79::Swap(Horn_rpt_79* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Horn_rpt_79::InternalSwap(Horn_rpt_79* other) {
  using std::swap;
  swap(output_value_, other->output_value_);
  swap(commanded_value_, other->commanded_value_);
  swap(manual_input_, other->manual_input_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Horn_rpt_79::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Horn_cmd_78::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Horn_cmd_78::kHornCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Horn_cmd_78::Horn_cmd_78()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Horn_cmd_78.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Horn_cmd_78)
}
Horn_cmd_78::Horn_cmd_78(const Horn_cmd_78& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  horn_cmd_ = from.horn_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Horn_cmd_78)
}

void Horn_cmd_78::SharedCtor() {
  horn_cmd_ = 0;
}

Horn_cmd_78::~Horn_cmd_78() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Horn_cmd_78)
  SharedDtor();
}

void Horn_cmd_78::SharedDtor() {
}

void Horn_cmd_78::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Horn_cmd_78::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Horn_cmd_78& Horn_cmd_78::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Horn_cmd_78.base);
  return *internal_default_instance();
}


void Horn_cmd_78::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Horn_cmd_78)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  horn_cmd_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Horn_cmd_78::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Horn_cmd_78)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.Horn_cmd_78.Horn_cmdType horn_cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Horn_cmd_78_Horn_cmdType_IsValid(value)) {
            set_horn_cmd(static_cast< ::apollo::canbus::Horn_cmd_78_Horn_cmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Horn_cmd_78)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Horn_cmd_78)
  return false;
#undef DO_
}

void Horn_cmd_78::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Horn_cmd_78)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Horn_cmd_78.Horn_cmdType horn_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->horn_cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Horn_cmd_78)
}

::google::protobuf::uint8* Horn_cmd_78::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Horn_cmd_78)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Horn_cmd_78.Horn_cmdType horn_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->horn_cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Horn_cmd_78)
  return target;
}

size_t Horn_cmd_78::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Horn_cmd_78)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .apollo.canbus.Horn_cmd_78.Horn_cmdType horn_cmd = 1;
  if (has_horn_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->horn_cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Horn_cmd_78::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Horn_cmd_78)
  GOOGLE_DCHECK_NE(&from, this);
  const Horn_cmd_78* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Horn_cmd_78>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Horn_cmd_78)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Horn_cmd_78)
    MergeFrom(*source);
  }
}

void Horn_cmd_78::MergeFrom(const Horn_cmd_78& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Horn_cmd_78)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_horn_cmd()) {
    set_horn_cmd(from.horn_cmd());
  }
}

void Horn_cmd_78::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Horn_cmd_78)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Horn_cmd_78::CopyFrom(const Horn_cmd_78& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Horn_cmd_78)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Horn_cmd_78::IsInitialized() const {
  return true;
}

void Horn_cmd_78::Swap(Horn_cmd_78* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Horn_cmd_78::InternalSwap(Horn_cmd_78* other) {
  using std::swap;
  swap(horn_cmd_, other->horn_cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Horn_cmd_78::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Wiper_rpt_91::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Wiper_rpt_91::kOutputValueFieldNumber;
const int Wiper_rpt_91::kCommandedValueFieldNumber;
const int Wiper_rpt_91::kManualInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Wiper_rpt_91::Wiper_rpt_91()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Wiper_rpt_91.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Wiper_rpt_91)
}
Wiper_rpt_91::Wiper_rpt_91(const Wiper_rpt_91& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&output_value_, &from.output_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&manual_input_) -
    reinterpret_cast<char*>(&output_value_)) + sizeof(manual_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Wiper_rpt_91)
}

void Wiper_rpt_91::SharedCtor() {
  ::memset(&output_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&manual_input_) -
      reinterpret_cast<char*>(&output_value_)) + sizeof(manual_input_));
}

Wiper_rpt_91::~Wiper_rpt_91() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Wiper_rpt_91)
  SharedDtor();
}

void Wiper_rpt_91::SharedDtor() {
}

void Wiper_rpt_91::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Wiper_rpt_91::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Wiper_rpt_91& Wiper_rpt_91::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Wiper_rpt_91.base);
  return *internal_default_instance();
}


void Wiper_rpt_91::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Wiper_rpt_91)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&output_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&manual_input_) -
        reinterpret_cast<char*>(&output_value_)) + sizeof(manual_input_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Wiper_rpt_91::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Wiper_rpt_91)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.Wiper_rpt_91.Output_valueType output_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Wiper_rpt_91_Output_valueType_IsValid(value)) {
            set_output_value(static_cast< ::apollo::canbus::Wiper_rpt_91_Output_valueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Wiper_rpt_91.Commanded_valueType commanded_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Wiper_rpt_91_Commanded_valueType_IsValid(value)) {
            set_commanded_value(static_cast< ::apollo::canbus::Wiper_rpt_91_Commanded_valueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Wiper_rpt_91.Manual_inputType manual_input = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Wiper_rpt_91_Manual_inputType_IsValid(value)) {
            set_manual_input(static_cast< ::apollo::canbus::Wiper_rpt_91_Manual_inputType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Wiper_rpt_91)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Wiper_rpt_91)
  return false;
#undef DO_
}

void Wiper_rpt_91::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Wiper_rpt_91)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Wiper_rpt_91.Output_valueType output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->output_value(), output);
  }

  // optional .apollo.canbus.Wiper_rpt_91.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->commanded_value(), output);
  }

  // optional .apollo.canbus.Wiper_rpt_91.Manual_inputType manual_input = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->manual_input(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Wiper_rpt_91)
}

::google::protobuf::uint8* Wiper_rpt_91::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Wiper_rpt_91)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Wiper_rpt_91.Output_valueType output_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->output_value(), target);
  }

  // optional .apollo.canbus.Wiper_rpt_91.Commanded_valueType commanded_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->commanded_value(), target);
  }

  // optional .apollo.canbus.Wiper_rpt_91.Manual_inputType manual_input = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->manual_input(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Wiper_rpt_91)
  return target;
}

size_t Wiper_rpt_91::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Wiper_rpt_91)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .apollo.canbus.Wiper_rpt_91.Output_valueType output_value = 1;
    if (has_output_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->output_value());
    }

    // optional .apollo.canbus.Wiper_rpt_91.Commanded_valueType commanded_value = 2;
    if (has_commanded_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->commanded_value());
    }

    // optional .apollo.canbus.Wiper_rpt_91.Manual_inputType manual_input = 3;
    if (has_manual_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->manual_input());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wiper_rpt_91::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Wiper_rpt_91)
  GOOGLE_DCHECK_NE(&from, this);
  const Wiper_rpt_91* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Wiper_rpt_91>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Wiper_rpt_91)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Wiper_rpt_91)
    MergeFrom(*source);
  }
}

void Wiper_rpt_91::MergeFrom(const Wiper_rpt_91& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Wiper_rpt_91)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      output_value_ = from.output_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      commanded_value_ = from.commanded_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      manual_input_ = from.manual_input_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Wiper_rpt_91::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Wiper_rpt_91)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wiper_rpt_91::CopyFrom(const Wiper_rpt_91& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Wiper_rpt_91)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wiper_rpt_91::IsInitialized() const {
  return true;
}

void Wiper_rpt_91::Swap(Wiper_rpt_91* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Wiper_rpt_91::InternalSwap(Wiper_rpt_91* other) {
  using std::swap;
  swap(output_value_, other->output_value_);
  swap(commanded_value_, other->commanded_value_);
  swap(manual_input_, other->manual_input_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Wiper_rpt_91::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vehicle_speed_rpt_6f::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vehicle_speed_rpt_6f::kVehicleSpeedFieldNumber;
const int Vehicle_speed_rpt_6f::kVehicleSpeedValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vehicle_speed_rpt_6f::Vehicle_speed_rpt_6f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Vehicle_speed_rpt_6f.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Vehicle_speed_rpt_6f)
}
Vehicle_speed_rpt_6f::Vehicle_speed_rpt_6f(const Vehicle_speed_rpt_6f& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vehicle_speed_, &from.vehicle_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&vehicle_speed_valid_) -
    reinterpret_cast<char*>(&vehicle_speed_)) + sizeof(vehicle_speed_valid_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Vehicle_speed_rpt_6f)
}

void Vehicle_speed_rpt_6f::SharedCtor() {
  ::memset(&vehicle_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vehicle_speed_valid_) -
      reinterpret_cast<char*>(&vehicle_speed_)) + sizeof(vehicle_speed_valid_));
}

Vehicle_speed_rpt_6f::~Vehicle_speed_rpt_6f() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Vehicle_speed_rpt_6f)
  SharedDtor();
}

void Vehicle_speed_rpt_6f::SharedDtor() {
}

void Vehicle_speed_rpt_6f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Vehicle_speed_rpt_6f::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vehicle_speed_rpt_6f& Vehicle_speed_rpt_6f::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Vehicle_speed_rpt_6f.base);
  return *internal_default_instance();
}


void Vehicle_speed_rpt_6f::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Vehicle_speed_rpt_6f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&vehicle_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vehicle_speed_valid_) -
        reinterpret_cast<char*>(&vehicle_speed_)) + sizeof(vehicle_speed_valid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vehicle_speed_rpt_6f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Vehicle_speed_rpt_6f)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double vehicle_speed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_vehicle_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Vehicle_speed_rpt_6f.Vehicle_speed_validType vehicle_speed_valid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Vehicle_speed_rpt_6f_Vehicle_speed_validType_IsValid(value)) {
            set_vehicle_speed_valid(static_cast< ::apollo::canbus::Vehicle_speed_rpt_6f_Vehicle_speed_validType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Vehicle_speed_rpt_6f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Vehicle_speed_rpt_6f)
  return false;
#undef DO_
}

void Vehicle_speed_rpt_6f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Vehicle_speed_rpt_6f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double vehicle_speed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->vehicle_speed(), output);
  }

  // optional .apollo.canbus.Vehicle_speed_rpt_6f.Vehicle_speed_validType vehicle_speed_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->vehicle_speed_valid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Vehicle_speed_rpt_6f)
}

::google::protobuf::uint8* Vehicle_speed_rpt_6f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Vehicle_speed_rpt_6f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double vehicle_speed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->vehicle_speed(), target);
  }

  // optional .apollo.canbus.Vehicle_speed_rpt_6f.Vehicle_speed_validType vehicle_speed_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->vehicle_speed_valid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Vehicle_speed_rpt_6f)
  return target;
}

size_t Vehicle_speed_rpt_6f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Vehicle_speed_rpt_6f)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double vehicle_speed = 1;
    if (has_vehicle_speed()) {
      total_size += 1 + 8;
    }

    // optional .apollo.canbus.Vehicle_speed_rpt_6f.Vehicle_speed_validType vehicle_speed_valid = 2;
    if (has_vehicle_speed_valid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->vehicle_speed_valid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vehicle_speed_rpt_6f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Vehicle_speed_rpt_6f)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle_speed_rpt_6f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vehicle_speed_rpt_6f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Vehicle_speed_rpt_6f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Vehicle_speed_rpt_6f)
    MergeFrom(*source);
  }
}

void Vehicle_speed_rpt_6f::MergeFrom(const Vehicle_speed_rpt_6f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Vehicle_speed_rpt_6f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      vehicle_speed_ = from.vehicle_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      vehicle_speed_valid_ = from.vehicle_speed_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vehicle_speed_rpt_6f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Vehicle_speed_rpt_6f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle_speed_rpt_6f::CopyFrom(const Vehicle_speed_rpt_6f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Vehicle_speed_rpt_6f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle_speed_rpt_6f::IsInitialized() const {
  return true;
}

void Vehicle_speed_rpt_6f::Swap(Vehicle_speed_rpt_6f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vehicle_speed_rpt_6f::InternalSwap(Vehicle_speed_rpt_6f* other) {
  using std::swap;
  swap(vehicle_speed_, other->vehicle_speed_);
  swap(vehicle_speed_valid_, other->vehicle_speed_valid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Vehicle_speed_rpt_6f::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Headlight_cmd_76::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Headlight_cmd_76::kHeadlightCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Headlight_cmd_76::Headlight_cmd_76()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Headlight_cmd_76.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Headlight_cmd_76)
}
Headlight_cmd_76::Headlight_cmd_76(const Headlight_cmd_76& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  headlight_cmd_ = from.headlight_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Headlight_cmd_76)
}

void Headlight_cmd_76::SharedCtor() {
  headlight_cmd_ = 0;
}

Headlight_cmd_76::~Headlight_cmd_76() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Headlight_cmd_76)
  SharedDtor();
}

void Headlight_cmd_76::SharedDtor() {
}

void Headlight_cmd_76::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Headlight_cmd_76::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Headlight_cmd_76& Headlight_cmd_76::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Headlight_cmd_76.base);
  return *internal_default_instance();
}


void Headlight_cmd_76::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Headlight_cmd_76)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headlight_cmd_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Headlight_cmd_76::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Headlight_cmd_76)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.Headlight_cmd_76.Headlight_cmdType headlight_cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Headlight_cmd_76_Headlight_cmdType_IsValid(value)) {
            set_headlight_cmd(static_cast< ::apollo::canbus::Headlight_cmd_76_Headlight_cmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Headlight_cmd_76)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Headlight_cmd_76)
  return false;
#undef DO_
}

void Headlight_cmd_76::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Headlight_cmd_76)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Headlight_cmd_76.Headlight_cmdType headlight_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->headlight_cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Headlight_cmd_76)
}

::google::protobuf::uint8* Headlight_cmd_76::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Headlight_cmd_76)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Headlight_cmd_76.Headlight_cmdType headlight_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->headlight_cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Headlight_cmd_76)
  return target;
}

size_t Headlight_cmd_76::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Headlight_cmd_76)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .apollo.canbus.Headlight_cmd_76.Headlight_cmdType headlight_cmd = 1;
  if (has_headlight_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->headlight_cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Headlight_cmd_76::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Headlight_cmd_76)
  GOOGLE_DCHECK_NE(&from, this);
  const Headlight_cmd_76* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Headlight_cmd_76>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Headlight_cmd_76)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Headlight_cmd_76)
    MergeFrom(*source);
  }
}

void Headlight_cmd_76::MergeFrom(const Headlight_cmd_76& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Headlight_cmd_76)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_headlight_cmd()) {
    set_headlight_cmd(from.headlight_cmd());
  }
}

void Headlight_cmd_76::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Headlight_cmd_76)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Headlight_cmd_76::CopyFrom(const Headlight_cmd_76& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Headlight_cmd_76)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Headlight_cmd_76::IsInitialized() const {
  return true;
}

void Headlight_cmd_76::Swap(Headlight_cmd_76* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Headlight_cmd_76::InternalSwap(Headlight_cmd_76* other) {
  using std::swap;
  swap(headlight_cmd_, other->headlight_cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Headlight_cmd_76::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Steering_motor_rpt_2_74::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Steering_motor_rpt_2_74::kEncoderTemperatureFieldNumber;
const int Steering_motor_rpt_2_74::kMotorTemperatureFieldNumber;
const int Steering_motor_rpt_2_74::kAngularSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Steering_motor_rpt_2_74::Steering_motor_rpt_2_74()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Steering_motor_rpt_2_74.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Steering_motor_rpt_2_74)
}
Steering_motor_rpt_2_74::Steering_motor_rpt_2_74(const Steering_motor_rpt_2_74& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&encoder_temperature_, &from.encoder_temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&angular_speed_) -
    reinterpret_cast<char*>(&encoder_temperature_)) + sizeof(angular_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_motor_rpt_2_74)
}

void Steering_motor_rpt_2_74::SharedCtor() {
  ::memset(&encoder_temperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_speed_) -
      reinterpret_cast<char*>(&encoder_temperature_)) + sizeof(angular_speed_));
}

Steering_motor_rpt_2_74::~Steering_motor_rpt_2_74() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_motor_rpt_2_74)
  SharedDtor();
}

void Steering_motor_rpt_2_74::SharedDtor() {
}

void Steering_motor_rpt_2_74::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Steering_motor_rpt_2_74::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Steering_motor_rpt_2_74& Steering_motor_rpt_2_74::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Steering_motor_rpt_2_74.base);
  return *internal_default_instance();
}


void Steering_motor_rpt_2_74::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_motor_rpt_2_74)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&encoder_temperature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angular_speed_) -
        reinterpret_cast<char*>(&encoder_temperature_)) + sizeof(angular_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Steering_motor_rpt_2_74::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Steering_motor_rpt_2_74)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 encoder_temperature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_encoder_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encoder_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 motor_temperature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_motor_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &motor_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double angular_speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_angular_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angular_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Steering_motor_rpt_2_74)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Steering_motor_rpt_2_74)
  return false;
#undef DO_
}

void Steering_motor_rpt_2_74::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Steering_motor_rpt_2_74)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 encoder_temperature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->encoder_temperature(), output);
  }

  // optional int32 motor_temperature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->motor_temperature(), output);
  }

  // optional double angular_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->angular_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Steering_motor_rpt_2_74)
}

::google::protobuf::uint8* Steering_motor_rpt_2_74::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_motor_rpt_2_74)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 encoder_temperature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->encoder_temperature(), target);
  }

  // optional int32 motor_temperature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->motor_temperature(), target);
  }

  // optional double angular_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->angular_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_motor_rpt_2_74)
  return target;
}

size_t Steering_motor_rpt_2_74::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_motor_rpt_2_74)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 encoder_temperature = 1;
    if (has_encoder_temperature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->encoder_temperature());
    }

    // optional int32 motor_temperature = 2;
    if (has_motor_temperature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->motor_temperature());
    }

    // optional double angular_speed = 3;
    if (has_angular_speed()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steering_motor_rpt_2_74::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Steering_motor_rpt_2_74)
  GOOGLE_DCHECK_NE(&from, this);
  const Steering_motor_rpt_2_74* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Steering_motor_rpt_2_74>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Steering_motor_rpt_2_74)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Steering_motor_rpt_2_74)
    MergeFrom(*source);
  }
}

void Steering_motor_rpt_2_74::MergeFrom(const Steering_motor_rpt_2_74& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_motor_rpt_2_74)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      encoder_temperature_ = from.encoder_temperature_;
    }
    if (cached_has_bits & 0x00000002u) {
      motor_temperature_ = from.motor_temperature_;
    }
    if (cached_has_bits & 0x00000004u) {
      angular_speed_ = from.angular_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steering_motor_rpt_2_74::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Steering_motor_rpt_2_74)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steering_motor_rpt_2_74::CopyFrom(const Steering_motor_rpt_2_74& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_motor_rpt_2_74)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_motor_rpt_2_74::IsInitialized() const {
  return true;
}

void Steering_motor_rpt_2_74::Swap(Steering_motor_rpt_2_74* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Steering_motor_rpt_2_74::InternalSwap(Steering_motor_rpt_2_74* other) {
  using std::swap;
  swap(encoder_temperature_, other->encoder_temperature_);
  swap(motor_temperature_, other->motor_temperature_);
  swap(angular_speed_, other->angular_speed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Steering_motor_rpt_2_74::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Brake_motor_rpt_2_71::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Brake_motor_rpt_2_71::kEncoderTemperatureFieldNumber;
const int Brake_motor_rpt_2_71::kMotorTemperatureFieldNumber;
const int Brake_motor_rpt_2_71::kAngularSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Brake_motor_rpt_2_71::Brake_motor_rpt_2_71()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Brake_motor_rpt_2_71.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake_motor_rpt_2_71)
}
Brake_motor_rpt_2_71::Brake_motor_rpt_2_71(const Brake_motor_rpt_2_71& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&encoder_temperature_, &from.encoder_temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&angular_speed_) -
    reinterpret_cast<char*>(&encoder_temperature_)) + sizeof(angular_speed_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_motor_rpt_2_71)
}

void Brake_motor_rpt_2_71::SharedCtor() {
  ::memset(&encoder_temperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_speed_) -
      reinterpret_cast<char*>(&encoder_temperature_)) + sizeof(angular_speed_));
}

Brake_motor_rpt_2_71::~Brake_motor_rpt_2_71() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_motor_rpt_2_71)
  SharedDtor();
}

void Brake_motor_rpt_2_71::SharedDtor() {
}

void Brake_motor_rpt_2_71::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Brake_motor_rpt_2_71::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Brake_motor_rpt_2_71& Brake_motor_rpt_2_71::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Brake_motor_rpt_2_71.base);
  return *internal_default_instance();
}


void Brake_motor_rpt_2_71::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_motor_rpt_2_71)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&encoder_temperature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angular_speed_) -
        reinterpret_cast<char*>(&encoder_temperature_)) + sizeof(angular_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Brake_motor_rpt_2_71::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Brake_motor_rpt_2_71)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 encoder_temperature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_encoder_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encoder_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 motor_temperature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_motor_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &motor_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double angular_speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_angular_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angular_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Brake_motor_rpt_2_71)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Brake_motor_rpt_2_71)
  return false;
#undef DO_
}

void Brake_motor_rpt_2_71::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Brake_motor_rpt_2_71)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 encoder_temperature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->encoder_temperature(), output);
  }

  // optional int32 motor_temperature = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->motor_temperature(), output);
  }

  // optional double angular_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->angular_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Brake_motor_rpt_2_71)
}

::google::protobuf::uint8* Brake_motor_rpt_2_71::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_motor_rpt_2_71)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 encoder_temperature = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->encoder_temperature(), target);
  }

  // optional int32 motor_temperature = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->motor_temperature(), target);
  }

  // optional double angular_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->angular_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_motor_rpt_2_71)
  return target;
}

size_t Brake_motor_rpt_2_71::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_motor_rpt_2_71)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 encoder_temperature = 1;
    if (has_encoder_temperature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->encoder_temperature());
    }

    // optional int32 motor_temperature = 2;
    if (has_motor_temperature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->motor_temperature());
    }

    // optional double angular_speed = 3;
    if (has_angular_speed()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake_motor_rpt_2_71::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake_motor_rpt_2_71)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_motor_rpt_2_71* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Brake_motor_rpt_2_71>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake_motor_rpt_2_71)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake_motor_rpt_2_71)
    MergeFrom(*source);
  }
}

void Brake_motor_rpt_2_71::MergeFrom(const Brake_motor_rpt_2_71& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_motor_rpt_2_71)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      encoder_temperature_ = from.encoder_temperature_;
    }
    if (cached_has_bits & 0x00000002u) {
      motor_temperature_ = from.motor_temperature_;
    }
    if (cached_has_bits & 0x00000004u) {
      angular_speed_ = from.angular_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake_motor_rpt_2_71::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake_motor_rpt_2_71)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_motor_rpt_2_71::CopyFrom(const Brake_motor_rpt_2_71& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_motor_rpt_2_71)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_motor_rpt_2_71::IsInitialized() const {
  return true;
}

void Brake_motor_rpt_2_71::Swap(Brake_motor_rpt_2_71* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Brake_motor_rpt_2_71::InternalSwap(Brake_motor_rpt_2_71* other) {
  using std::swap;
  swap(encoder_temperature_, other->encoder_temperature_);
  swap(motor_temperature_, other->motor_temperature_);
  swap(angular_speed_, other->angular_speed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Brake_motor_rpt_2_71::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Steering_motor_rpt_1_73::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Steering_motor_rpt_1_73::kMotorCurrentFieldNumber;
const int Steering_motor_rpt_1_73::kShaftPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Steering_motor_rpt_1_73::Steering_motor_rpt_1_73()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Steering_motor_rpt_1_73.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Steering_motor_rpt_1_73)
}
Steering_motor_rpt_1_73::Steering_motor_rpt_1_73(const Steering_motor_rpt_1_73& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&motor_current_, &from.motor_current_,
    static_cast<size_t>(reinterpret_cast<char*>(&shaft_position_) -
    reinterpret_cast<char*>(&motor_current_)) + sizeof(shaft_position_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Steering_motor_rpt_1_73)
}

void Steering_motor_rpt_1_73::SharedCtor() {
  ::memset(&motor_current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shaft_position_) -
      reinterpret_cast<char*>(&motor_current_)) + sizeof(shaft_position_));
}

Steering_motor_rpt_1_73::~Steering_motor_rpt_1_73() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Steering_motor_rpt_1_73)
  SharedDtor();
}

void Steering_motor_rpt_1_73::SharedDtor() {
}

void Steering_motor_rpt_1_73::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Steering_motor_rpt_1_73::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Steering_motor_rpt_1_73& Steering_motor_rpt_1_73::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Steering_motor_rpt_1_73.base);
  return *internal_default_instance();
}


void Steering_motor_rpt_1_73::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Steering_motor_rpt_1_73)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&motor_current_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shaft_position_) -
        reinterpret_cast<char*>(&motor_current_)) + sizeof(shaft_position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Steering_motor_rpt_1_73::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Steering_motor_rpt_1_73)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double motor_current = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_motor_current();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &motor_current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double shaft_position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_shaft_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shaft_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Steering_motor_rpt_1_73)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Steering_motor_rpt_1_73)
  return false;
#undef DO_
}

void Steering_motor_rpt_1_73::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Steering_motor_rpt_1_73)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double motor_current = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->motor_current(), output);
  }

  // optional double shaft_position = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->shaft_position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Steering_motor_rpt_1_73)
}

::google::protobuf::uint8* Steering_motor_rpt_1_73::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Steering_motor_rpt_1_73)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double motor_current = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->motor_current(), target);
  }

  // optional double shaft_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->shaft_position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Steering_motor_rpt_1_73)
  return target;
}

size_t Steering_motor_rpt_1_73::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Steering_motor_rpt_1_73)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double motor_current = 1;
    if (has_motor_current()) {
      total_size += 1 + 8;
    }

    // optional double shaft_position = 2;
    if (has_shaft_position()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Steering_motor_rpt_1_73::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Steering_motor_rpt_1_73)
  GOOGLE_DCHECK_NE(&from, this);
  const Steering_motor_rpt_1_73* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Steering_motor_rpt_1_73>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Steering_motor_rpt_1_73)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Steering_motor_rpt_1_73)
    MergeFrom(*source);
  }
}

void Steering_motor_rpt_1_73::MergeFrom(const Steering_motor_rpt_1_73& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Steering_motor_rpt_1_73)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      motor_current_ = from.motor_current_;
    }
    if (cached_has_bits & 0x00000002u) {
      shaft_position_ = from.shaft_position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Steering_motor_rpt_1_73::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Steering_motor_rpt_1_73)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Steering_motor_rpt_1_73::CopyFrom(const Steering_motor_rpt_1_73& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Steering_motor_rpt_1_73)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Steering_motor_rpt_1_73::IsInitialized() const {
  return true;
}

void Steering_motor_rpt_1_73::Swap(Steering_motor_rpt_1_73* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Steering_motor_rpt_1_73::InternalSwap(Steering_motor_rpt_1_73* other) {
  using std::swap;
  swap(motor_current_, other->motor_current_);
  swap(shaft_position_, other->shaft_position_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Steering_motor_rpt_1_73::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Wiper_cmd_90::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Wiper_cmd_90::kWiperCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Wiper_cmd_90::Wiper_cmd_90()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Wiper_cmd_90.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Wiper_cmd_90)
}
Wiper_cmd_90::Wiper_cmd_90(const Wiper_cmd_90& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wiper_cmd_ = from.wiper_cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Wiper_cmd_90)
}

void Wiper_cmd_90::SharedCtor() {
  wiper_cmd_ = 0;
}

Wiper_cmd_90::~Wiper_cmd_90() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Wiper_cmd_90)
  SharedDtor();
}

void Wiper_cmd_90::SharedDtor() {
}

void Wiper_cmd_90::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Wiper_cmd_90::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Wiper_cmd_90& Wiper_cmd_90::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Wiper_cmd_90.base);
  return *internal_default_instance();
}


void Wiper_cmd_90::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Wiper_cmd_90)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wiper_cmd_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Wiper_cmd_90::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Wiper_cmd_90)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.Wiper_cmd_90.Wiper_cmdType wiper_cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Wiper_cmd_90_Wiper_cmdType_IsValid(value)) {
            set_wiper_cmd(static_cast< ::apollo::canbus::Wiper_cmd_90_Wiper_cmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Wiper_cmd_90)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Wiper_cmd_90)
  return false;
#undef DO_
}

void Wiper_cmd_90::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Wiper_cmd_90)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Wiper_cmd_90.Wiper_cmdType wiper_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->wiper_cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Wiper_cmd_90)
}

::google::protobuf::uint8* Wiper_cmd_90::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Wiper_cmd_90)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Wiper_cmd_90.Wiper_cmdType wiper_cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->wiper_cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Wiper_cmd_90)
  return target;
}

size_t Wiper_cmd_90::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Wiper_cmd_90)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .apollo.canbus.Wiper_cmd_90.Wiper_cmdType wiper_cmd = 1;
  if (has_wiper_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->wiper_cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wiper_cmd_90::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Wiper_cmd_90)
  GOOGLE_DCHECK_NE(&from, this);
  const Wiper_cmd_90* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Wiper_cmd_90>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Wiper_cmd_90)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Wiper_cmd_90)
    MergeFrom(*source);
  }
}

void Wiper_cmd_90::MergeFrom(const Wiper_cmd_90& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Wiper_cmd_90)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wiper_cmd()) {
    set_wiper_cmd(from.wiper_cmd());
  }
}

void Wiper_cmd_90::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Wiper_cmd_90)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wiper_cmd_90::CopyFrom(const Wiper_cmd_90& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Wiper_cmd_90)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wiper_cmd_90::IsInitialized() const {
  return true;
}

void Wiper_cmd_90::Swap(Wiper_cmd_90* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Wiper_cmd_90::InternalSwap(Wiper_cmd_90* other) {
  using std::swap;
  swap(wiper_cmd_, other->wiper_cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Wiper_cmd_90::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Brake_motor_rpt_3_72::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Brake_motor_rpt_3_72::kTorqueOutputFieldNumber;
const int Brake_motor_rpt_3_72::kTorqueInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Brake_motor_rpt_3_72::Brake_motor_rpt_3_72()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Brake_motor_rpt_3_72.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Brake_motor_rpt_3_72)
}
Brake_motor_rpt_3_72::Brake_motor_rpt_3_72(const Brake_motor_rpt_3_72& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&torque_output_, &from.torque_output_,
    static_cast<size_t>(reinterpret_cast<char*>(&torque_input_) -
    reinterpret_cast<char*>(&torque_output_)) + sizeof(torque_input_));
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Brake_motor_rpt_3_72)
}

void Brake_motor_rpt_3_72::SharedCtor() {
  ::memset(&torque_output_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&torque_input_) -
      reinterpret_cast<char*>(&torque_output_)) + sizeof(torque_input_));
}

Brake_motor_rpt_3_72::~Brake_motor_rpt_3_72() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Brake_motor_rpt_3_72)
  SharedDtor();
}

void Brake_motor_rpt_3_72::SharedDtor() {
}

void Brake_motor_rpt_3_72::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Brake_motor_rpt_3_72::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Brake_motor_rpt_3_72& Brake_motor_rpt_3_72::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Brake_motor_rpt_3_72.base);
  return *internal_default_instance();
}


void Brake_motor_rpt_3_72::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Brake_motor_rpt_3_72)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&torque_output_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&torque_input_) -
        reinterpret_cast<char*>(&torque_output_)) + sizeof(torque_input_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Brake_motor_rpt_3_72::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Brake_motor_rpt_3_72)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double torque_output = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_torque_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &torque_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double torque_input = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_torque_input();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &torque_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Brake_motor_rpt_3_72)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Brake_motor_rpt_3_72)
  return false;
#undef DO_
}

void Brake_motor_rpt_3_72::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Brake_motor_rpt_3_72)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double torque_output = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->torque_output(), output);
  }

  // optional double torque_input = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->torque_input(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Brake_motor_rpt_3_72)
}

::google::protobuf::uint8* Brake_motor_rpt_3_72::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Brake_motor_rpt_3_72)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double torque_output = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->torque_output(), target);
  }

  // optional double torque_input = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->torque_input(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Brake_motor_rpt_3_72)
  return target;
}

size_t Brake_motor_rpt_3_72::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Brake_motor_rpt_3_72)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double torque_output = 1;
    if (has_torque_output()) {
      total_size += 1 + 8;
    }

    // optional double torque_input = 2;
    if (has_torque_input()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Brake_motor_rpt_3_72::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Brake_motor_rpt_3_72)
  GOOGLE_DCHECK_NE(&from, this);
  const Brake_motor_rpt_3_72* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Brake_motor_rpt_3_72>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Brake_motor_rpt_3_72)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Brake_motor_rpt_3_72)
    MergeFrom(*source);
  }
}

void Brake_motor_rpt_3_72::MergeFrom(const Brake_motor_rpt_3_72& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Brake_motor_rpt_3_72)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      torque_output_ = from.torque_output_;
    }
    if (cached_has_bits & 0x00000002u) {
      torque_input_ = from.torque_input_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Brake_motor_rpt_3_72::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Brake_motor_rpt_3_72)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brake_motor_rpt_3_72::CopyFrom(const Brake_motor_rpt_3_72& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Brake_motor_rpt_3_72)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brake_motor_rpt_3_72::IsInitialized() const {
  return true;
}

void Brake_motor_rpt_3_72::Swap(Brake_motor_rpt_3_72* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Brake_motor_rpt_3_72::InternalSwap(Brake_motor_rpt_3_72* other) {
  using std::swap;
  swap(torque_output_, other->torque_output_);
  swap(torque_input_, other->torque_input_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Brake_motor_rpt_3_72::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Gem::InitAsDefaultInstance() {
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->global_rpt_6a_ = const_cast< ::apollo::canbus::Global_rpt_6a*>(
      ::apollo::canbus::Global_rpt_6a::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->brake_cmd_6b_ = const_cast< ::apollo::canbus::Brake_cmd_6b*>(
      ::apollo::canbus::Brake_cmd_6b::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->brake_rpt_6c_ = const_cast< ::apollo::canbus::Brake_rpt_6c*>(
      ::apollo::canbus::Brake_rpt_6c::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->steering_cmd_6d_ = const_cast< ::apollo::canbus::Steering_cmd_6d*>(
      ::apollo::canbus::Steering_cmd_6d::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->steering_rpt_1_6e_ = const_cast< ::apollo::canbus::Steering_rpt_1_6e*>(
      ::apollo::canbus::Steering_rpt_1_6e::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->wheel_speed_rpt_7a_ = const_cast< ::apollo::canbus::Wheel_speed_rpt_7a*>(
      ::apollo::canbus::Wheel_speed_rpt_7a::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->date_time_rpt_83_ = const_cast< ::apollo::canbus::Date_time_rpt_83*>(
      ::apollo::canbus::Date_time_rpt_83::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->brake_motor_rpt_1_70_ = const_cast< ::apollo::canbus::Brake_motor_rpt_1_70*>(
      ::apollo::canbus::Brake_motor_rpt_1_70::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->headlight_rpt_77_ = const_cast< ::apollo::canbus::Headlight_rpt_77*>(
      ::apollo::canbus::Headlight_rpt_77::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->accel_rpt_68_ = const_cast< ::apollo::canbus::Accel_rpt_68*>(
      ::apollo::canbus::Accel_rpt_68::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->steering_motor_rpt_3_75_ = const_cast< ::apollo::canbus::Steering_motor_rpt_3_75*>(
      ::apollo::canbus::Steering_motor_rpt_3_75::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->turn_cmd_63_ = const_cast< ::apollo::canbus::Turn_cmd_63*>(
      ::apollo::canbus::Turn_cmd_63::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->turn_rpt_64_ = const_cast< ::apollo::canbus::Turn_rpt_64*>(
      ::apollo::canbus::Turn_rpt_64::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->shift_cmd_65_ = const_cast< ::apollo::canbus::Shift_cmd_65*>(
      ::apollo::canbus::Shift_cmd_65::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->shift_rpt_66_ = const_cast< ::apollo::canbus::Shift_rpt_66*>(
      ::apollo::canbus::Shift_rpt_66::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->accel_cmd_67_ = const_cast< ::apollo::canbus::Accel_cmd_67*>(
      ::apollo::canbus::Accel_cmd_67::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->lat_lon_heading_rpt_82_ = const_cast< ::apollo::canbus::Lat_lon_heading_rpt_82*>(
      ::apollo::canbus::Lat_lon_heading_rpt_82::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->global_cmd_69_ = const_cast< ::apollo::canbus::Global_cmd_69*>(
      ::apollo::canbus::Global_cmd_69::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->parking_brake_status_rpt_80_ = const_cast< ::apollo::canbus::Parking_brake_status_rpt_80*>(
      ::apollo::canbus::Parking_brake_status_rpt_80::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->yaw_rate_rpt_81_ = const_cast< ::apollo::canbus::Yaw_rate_rpt_81*>(
      ::apollo::canbus::Yaw_rate_rpt_81::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->horn_rpt_79_ = const_cast< ::apollo::canbus::Horn_rpt_79*>(
      ::apollo::canbus::Horn_rpt_79::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->horn_cmd_78_ = const_cast< ::apollo::canbus::Horn_cmd_78*>(
      ::apollo::canbus::Horn_cmd_78::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->wiper_rpt_91_ = const_cast< ::apollo::canbus::Wiper_rpt_91*>(
      ::apollo::canbus::Wiper_rpt_91::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->vehicle_speed_rpt_6f_ = const_cast< ::apollo::canbus::Vehicle_speed_rpt_6f*>(
      ::apollo::canbus::Vehicle_speed_rpt_6f::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->headlight_cmd_76_ = const_cast< ::apollo::canbus::Headlight_cmd_76*>(
      ::apollo::canbus::Headlight_cmd_76::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->steering_motor_rpt_2_74_ = const_cast< ::apollo::canbus::Steering_motor_rpt_2_74*>(
      ::apollo::canbus::Steering_motor_rpt_2_74::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->brake_motor_rpt_2_71_ = const_cast< ::apollo::canbus::Brake_motor_rpt_2_71*>(
      ::apollo::canbus::Brake_motor_rpt_2_71::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->steering_motor_rpt_1_73_ = const_cast< ::apollo::canbus::Steering_motor_rpt_1_73*>(
      ::apollo::canbus::Steering_motor_rpt_1_73::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->wiper_cmd_90_ = const_cast< ::apollo::canbus::Wiper_cmd_90*>(
      ::apollo::canbus::Wiper_cmd_90::internal_default_instance());
  ::apollo::canbus::_Gem_default_instance_._instance.get_mutable()->brake_motor_rpt_3_72_ = const_cast< ::apollo::canbus::Brake_motor_rpt_3_72*>(
      ::apollo::canbus::Brake_motor_rpt_3_72::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gem::kGlobalRpt6AFieldNumber;
const int Gem::kBrakeCmd6BFieldNumber;
const int Gem::kBrakeRpt6CFieldNumber;
const int Gem::kSteeringCmd6DFieldNumber;
const int Gem::kSteeringRpt16EFieldNumber;
const int Gem::kWheelSpeedRpt7AFieldNumber;
const int Gem::kDateTimeRpt83FieldNumber;
const int Gem::kBrakeMotorRpt170FieldNumber;
const int Gem::kHeadlightRpt77FieldNumber;
const int Gem::kAccelRpt68FieldNumber;
const int Gem::kSteeringMotorRpt375FieldNumber;
const int Gem::kTurnCmd63FieldNumber;
const int Gem::kTurnRpt64FieldNumber;
const int Gem::kShiftCmd65FieldNumber;
const int Gem::kShiftRpt66FieldNumber;
const int Gem::kAccelCmd67FieldNumber;
const int Gem::kLatLonHeadingRpt82FieldNumber;
const int Gem::kGlobalCmd69FieldNumber;
const int Gem::kParkingBrakeStatusRpt80FieldNumber;
const int Gem::kYawRateRpt81FieldNumber;
const int Gem::kHornRpt79FieldNumber;
const int Gem::kHornCmd78FieldNumber;
const int Gem::kWiperRpt91FieldNumber;
const int Gem::kVehicleSpeedRpt6FFieldNumber;
const int Gem::kHeadlightCmd76FieldNumber;
const int Gem::kSteeringMotorRpt274FieldNumber;
const int Gem::kBrakeMotorRpt271FieldNumber;
const int Gem::kSteeringMotorRpt173FieldNumber;
const int Gem::kWiperCmd90FieldNumber;
const int Gem::kBrakeMotorRpt372FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gem::Gem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Gem.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.canbus.Gem)
}
Gem::Gem(const Gem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_global_rpt_6a()) {
    global_rpt_6a_ = new ::apollo::canbus::Global_rpt_6a(*from.global_rpt_6a_);
  } else {
    global_rpt_6a_ = NULL;
  }
  if (from.has_brake_cmd_6b()) {
    brake_cmd_6b_ = new ::apollo::canbus::Brake_cmd_6b(*from.brake_cmd_6b_);
  } else {
    brake_cmd_6b_ = NULL;
  }
  if (from.has_brake_rpt_6c()) {
    brake_rpt_6c_ = new ::apollo::canbus::Brake_rpt_6c(*from.brake_rpt_6c_);
  } else {
    brake_rpt_6c_ = NULL;
  }
  if (from.has_steering_cmd_6d()) {
    steering_cmd_6d_ = new ::apollo::canbus::Steering_cmd_6d(*from.steering_cmd_6d_);
  } else {
    steering_cmd_6d_ = NULL;
  }
  if (from.has_steering_rpt_1_6e()) {
    steering_rpt_1_6e_ = new ::apollo::canbus::Steering_rpt_1_6e(*from.steering_rpt_1_6e_);
  } else {
    steering_rpt_1_6e_ = NULL;
  }
  if (from.has_wheel_speed_rpt_7a()) {
    wheel_speed_rpt_7a_ = new ::apollo::canbus::Wheel_speed_rpt_7a(*from.wheel_speed_rpt_7a_);
  } else {
    wheel_speed_rpt_7a_ = NULL;
  }
  if (from.has_date_time_rpt_83()) {
    date_time_rpt_83_ = new ::apollo::canbus::Date_time_rpt_83(*from.date_time_rpt_83_);
  } else {
    date_time_rpt_83_ = NULL;
  }
  if (from.has_brake_motor_rpt_1_70()) {
    brake_motor_rpt_1_70_ = new ::apollo::canbus::Brake_motor_rpt_1_70(*from.brake_motor_rpt_1_70_);
  } else {
    brake_motor_rpt_1_70_ = NULL;
  }
  if (from.has_headlight_rpt_77()) {
    headlight_rpt_77_ = new ::apollo::canbus::Headlight_rpt_77(*from.headlight_rpt_77_);
  } else {
    headlight_rpt_77_ = NULL;
  }
  if (from.has_accel_rpt_68()) {
    accel_rpt_68_ = new ::apollo::canbus::Accel_rpt_68(*from.accel_rpt_68_);
  } else {
    accel_rpt_68_ = NULL;
  }
  if (from.has_steering_motor_rpt_3_75()) {
    steering_motor_rpt_3_75_ = new ::apollo::canbus::Steering_motor_rpt_3_75(*from.steering_motor_rpt_3_75_);
  } else {
    steering_motor_rpt_3_75_ = NULL;
  }
  if (from.has_turn_cmd_63()) {
    turn_cmd_63_ = new ::apollo::canbus::Turn_cmd_63(*from.turn_cmd_63_);
  } else {
    turn_cmd_63_ = NULL;
  }
  if (from.has_turn_rpt_64()) {
    turn_rpt_64_ = new ::apollo::canbus::Turn_rpt_64(*from.turn_rpt_64_);
  } else {
    turn_rpt_64_ = NULL;
  }
  if (from.has_shift_cmd_65()) {
    shift_cmd_65_ = new ::apollo::canbus::Shift_cmd_65(*from.shift_cmd_65_);
  } else {
    shift_cmd_65_ = NULL;
  }
  if (from.has_shift_rpt_66()) {
    shift_rpt_66_ = new ::apollo::canbus::Shift_rpt_66(*from.shift_rpt_66_);
  } else {
    shift_rpt_66_ = NULL;
  }
  if (from.has_accel_cmd_67()) {
    accel_cmd_67_ = new ::apollo::canbus::Accel_cmd_67(*from.accel_cmd_67_);
  } else {
    accel_cmd_67_ = NULL;
  }
  if (from.has_lat_lon_heading_rpt_82()) {
    lat_lon_heading_rpt_82_ = new ::apollo::canbus::Lat_lon_heading_rpt_82(*from.lat_lon_heading_rpt_82_);
  } else {
    lat_lon_heading_rpt_82_ = NULL;
  }
  if (from.has_global_cmd_69()) {
    global_cmd_69_ = new ::apollo::canbus::Global_cmd_69(*from.global_cmd_69_);
  } else {
    global_cmd_69_ = NULL;
  }
  if (from.has_parking_brake_status_rpt_80()) {
    parking_brake_status_rpt_80_ = new ::apollo::canbus::Parking_brake_status_rpt_80(*from.parking_brake_status_rpt_80_);
  } else {
    parking_brake_status_rpt_80_ = NULL;
  }
  if (from.has_yaw_rate_rpt_81()) {
    yaw_rate_rpt_81_ = new ::apollo::canbus::Yaw_rate_rpt_81(*from.yaw_rate_rpt_81_);
  } else {
    yaw_rate_rpt_81_ = NULL;
  }
  if (from.has_horn_rpt_79()) {
    horn_rpt_79_ = new ::apollo::canbus::Horn_rpt_79(*from.horn_rpt_79_);
  } else {
    horn_rpt_79_ = NULL;
  }
  if (from.has_horn_cmd_78()) {
    horn_cmd_78_ = new ::apollo::canbus::Horn_cmd_78(*from.horn_cmd_78_);
  } else {
    horn_cmd_78_ = NULL;
  }
  if (from.has_wiper_rpt_91()) {
    wiper_rpt_91_ = new ::apollo::canbus::Wiper_rpt_91(*from.wiper_rpt_91_);
  } else {
    wiper_rpt_91_ = NULL;
  }
  if (from.has_vehicle_speed_rpt_6f()) {
    vehicle_speed_rpt_6f_ = new ::apollo::canbus::Vehicle_speed_rpt_6f(*from.vehicle_speed_rpt_6f_);
  } else {
    vehicle_speed_rpt_6f_ = NULL;
  }
  if (from.has_headlight_cmd_76()) {
    headlight_cmd_76_ = new ::apollo::canbus::Headlight_cmd_76(*from.headlight_cmd_76_);
  } else {
    headlight_cmd_76_ = NULL;
  }
  if (from.has_steering_motor_rpt_2_74()) {
    steering_motor_rpt_2_74_ = new ::apollo::canbus::Steering_motor_rpt_2_74(*from.steering_motor_rpt_2_74_);
  } else {
    steering_motor_rpt_2_74_ = NULL;
  }
  if (from.has_brake_motor_rpt_2_71()) {
    brake_motor_rpt_2_71_ = new ::apollo::canbus::Brake_motor_rpt_2_71(*from.brake_motor_rpt_2_71_);
  } else {
    brake_motor_rpt_2_71_ = NULL;
  }
  if (from.has_steering_motor_rpt_1_73()) {
    steering_motor_rpt_1_73_ = new ::apollo::canbus::Steering_motor_rpt_1_73(*from.steering_motor_rpt_1_73_);
  } else {
    steering_motor_rpt_1_73_ = NULL;
  }
  if (from.has_wiper_cmd_90()) {
    wiper_cmd_90_ = new ::apollo::canbus::Wiper_cmd_90(*from.wiper_cmd_90_);
  } else {
    wiper_cmd_90_ = NULL;
  }
  if (from.has_brake_motor_rpt_3_72()) {
    brake_motor_rpt_3_72_ = new ::apollo::canbus::Brake_motor_rpt_3_72(*from.brake_motor_rpt_3_72_);
  } else {
    brake_motor_rpt_3_72_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.canbus.Gem)
}

void Gem::SharedCtor() {
  ::memset(&global_rpt_6a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_motor_rpt_3_72_) -
      reinterpret_cast<char*>(&global_rpt_6a_)) + sizeof(brake_motor_rpt_3_72_));
}

Gem::~Gem() {
  // @@protoc_insertion_point(destructor:apollo.canbus.Gem)
  SharedDtor();
}

void Gem::SharedDtor() {
  if (this != internal_default_instance()) delete global_rpt_6a_;
  if (this != internal_default_instance()) delete brake_cmd_6b_;
  if (this != internal_default_instance()) delete brake_rpt_6c_;
  if (this != internal_default_instance()) delete steering_cmd_6d_;
  if (this != internal_default_instance()) delete steering_rpt_1_6e_;
  if (this != internal_default_instance()) delete wheel_speed_rpt_7a_;
  if (this != internal_default_instance()) delete date_time_rpt_83_;
  if (this != internal_default_instance()) delete brake_motor_rpt_1_70_;
  if (this != internal_default_instance()) delete headlight_rpt_77_;
  if (this != internal_default_instance()) delete accel_rpt_68_;
  if (this != internal_default_instance()) delete steering_motor_rpt_3_75_;
  if (this != internal_default_instance()) delete turn_cmd_63_;
  if (this != internal_default_instance()) delete turn_rpt_64_;
  if (this != internal_default_instance()) delete shift_cmd_65_;
  if (this != internal_default_instance()) delete shift_rpt_66_;
  if (this != internal_default_instance()) delete accel_cmd_67_;
  if (this != internal_default_instance()) delete lat_lon_heading_rpt_82_;
  if (this != internal_default_instance()) delete global_cmd_69_;
  if (this != internal_default_instance()) delete parking_brake_status_rpt_80_;
  if (this != internal_default_instance()) delete yaw_rate_rpt_81_;
  if (this != internal_default_instance()) delete horn_rpt_79_;
  if (this != internal_default_instance()) delete horn_cmd_78_;
  if (this != internal_default_instance()) delete wiper_rpt_91_;
  if (this != internal_default_instance()) delete vehicle_speed_rpt_6f_;
  if (this != internal_default_instance()) delete headlight_cmd_76_;
  if (this != internal_default_instance()) delete steering_motor_rpt_2_74_;
  if (this != internal_default_instance()) delete brake_motor_rpt_2_71_;
  if (this != internal_default_instance()) delete steering_motor_rpt_1_73_;
  if (this != internal_default_instance()) delete wiper_cmd_90_;
  if (this != internal_default_instance()) delete brake_motor_rpt_3_72_;
}

void Gem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Gem::descriptor() {
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gem& Gem::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::scc_info_Gem.base);
  return *internal_default_instance();
}


void Gem::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.canbus.Gem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(global_rpt_6a_ != NULL);
      global_rpt_6a_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(brake_cmd_6b_ != NULL);
      brake_cmd_6b_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(brake_rpt_6c_ != NULL);
      brake_rpt_6c_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(steering_cmd_6d_ != NULL);
      steering_cmd_6d_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(steering_rpt_1_6e_ != NULL);
      steering_rpt_1_6e_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(wheel_speed_rpt_7a_ != NULL);
      wheel_speed_rpt_7a_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(date_time_rpt_83_ != NULL);
      date_time_rpt_83_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(brake_motor_rpt_1_70_ != NULL);
      brake_motor_rpt_1_70_->Clear();
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(headlight_rpt_77_ != NULL);
      headlight_rpt_77_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(accel_rpt_68_ != NULL);
      accel_rpt_68_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(steering_motor_rpt_3_75_ != NULL);
      steering_motor_rpt_3_75_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(turn_cmd_63_ != NULL);
      turn_cmd_63_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(turn_rpt_64_ != NULL);
      turn_rpt_64_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(shift_cmd_65_ != NULL);
      shift_cmd_65_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(shift_rpt_66_ != NULL);
      shift_rpt_66_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(accel_cmd_67_ != NULL);
      accel_cmd_67_->Clear();
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(lat_lon_heading_rpt_82_ != NULL);
      lat_lon_heading_rpt_82_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(global_cmd_69_ != NULL);
      global_cmd_69_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(parking_brake_status_rpt_80_ != NULL);
      parking_brake_status_rpt_80_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(yaw_rate_rpt_81_ != NULL);
      yaw_rate_rpt_81_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(horn_rpt_79_ != NULL);
      horn_rpt_79_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(horn_cmd_78_ != NULL);
      horn_cmd_78_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(wiper_rpt_91_ != NULL);
      wiper_rpt_91_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(vehicle_speed_rpt_6f_ != NULL);
      vehicle_speed_rpt_6f_->Clear();
    }
  }
  if (cached_has_bits & 1056964608u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(headlight_cmd_76_ != NULL);
      headlight_cmd_76_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(steering_motor_rpt_2_74_ != NULL);
      steering_motor_rpt_2_74_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(brake_motor_rpt_2_71_ != NULL);
      brake_motor_rpt_2_71_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(steering_motor_rpt_1_73_ != NULL);
      steering_motor_rpt_1_73_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(wiper_cmd_90_ != NULL);
      wiper_cmd_90_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(brake_motor_rpt_3_72_ != NULL);
      brake_motor_rpt_3_72_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.canbus.Gem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.canbus.Global_rpt_6a global_rpt_6a = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_rpt_6a()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Brake_cmd_6b brake_cmd_6b = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brake_cmd_6b()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Brake_rpt_6c brake_rpt_6c = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brake_rpt_6c()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Steering_cmd_6d steering_cmd_6d = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_steering_cmd_6d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Steering_rpt_1_6e steering_rpt_1_6e = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_steering_rpt_1_6e()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Wheel_speed_rpt_7a wheel_speed_rpt_7a = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wheel_speed_rpt_7a()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Date_time_rpt_83 date_time_rpt_83 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_date_time_rpt_83()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Brake_motor_rpt_1_70 brake_motor_rpt_1_70 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brake_motor_rpt_1_70()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Headlight_rpt_77 headlight_rpt_77 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_headlight_rpt_77()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Accel_rpt_68 accel_rpt_68 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_accel_rpt_68()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Steering_motor_rpt_3_75 steering_motor_rpt_3_75 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_steering_motor_rpt_3_75()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Turn_cmd_63 turn_cmd_63 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_turn_cmd_63()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Turn_rpt_64 turn_rpt_64 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_turn_rpt_64()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Shift_cmd_65 shift_cmd_65 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shift_cmd_65()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Shift_rpt_66 shift_rpt_66 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shift_rpt_66()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Accel_cmd_67 accel_cmd_67 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_accel_cmd_67()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Lat_lon_heading_rpt_82 lat_lon_heading_rpt_82 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lat_lon_heading_rpt_82()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Global_cmd_69 global_cmd_69 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_cmd_69()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Parking_brake_status_rpt_80 parking_brake_status_rpt_80 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parking_brake_status_rpt_80()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Yaw_rate_rpt_81 yaw_rate_rpt_81 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_yaw_rate_rpt_81()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Horn_rpt_79 horn_rpt_79 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_horn_rpt_79()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Horn_cmd_78 horn_cmd_78 = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_horn_cmd_78()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Wiper_rpt_91 wiper_rpt_91 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wiper_rpt_91()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Vehicle_speed_rpt_6f vehicle_speed_rpt_6f = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_speed_rpt_6f()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Headlight_cmd_76 headlight_cmd_76 = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_headlight_cmd_76()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Steering_motor_rpt_2_74 steering_motor_rpt_2_74 = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_steering_motor_rpt_2_74()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Brake_motor_rpt_2_71 brake_motor_rpt_2_71 = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brake_motor_rpt_2_71()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Steering_motor_rpt_1_73 steering_motor_rpt_1_73 = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_steering_motor_rpt_1_73()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Wiper_cmd_90 wiper_cmd_90 = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wiper_cmd_90()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Brake_motor_rpt_3_72 brake_motor_rpt_3_72 = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brake_motor_rpt_3_72()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.canbus.Gem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.canbus.Gem)
  return false;
#undef DO_
}

void Gem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.canbus.Gem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Global_rpt_6a global_rpt_6a = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_global_rpt_6a(), output);
  }

  // optional .apollo.canbus.Brake_cmd_6b brake_cmd_6b = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_brake_cmd_6b(), output);
  }

  // optional .apollo.canbus.Brake_rpt_6c brake_rpt_6c = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_brake_rpt_6c(), output);
  }

  // optional .apollo.canbus.Steering_cmd_6d steering_cmd_6d = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_steering_cmd_6d(), output);
  }

  // optional .apollo.canbus.Steering_rpt_1_6e steering_rpt_1_6e = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_steering_rpt_1_6e(), output);
  }

  // optional .apollo.canbus.Wheel_speed_rpt_7a wheel_speed_rpt_7a = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_wheel_speed_rpt_7a(), output);
  }

  // optional .apollo.canbus.Date_time_rpt_83 date_time_rpt_83 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_date_time_rpt_83(), output);
  }

  // optional .apollo.canbus.Brake_motor_rpt_1_70 brake_motor_rpt_1_70 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_brake_motor_rpt_1_70(), output);
  }

  // optional .apollo.canbus.Headlight_rpt_77 headlight_rpt_77 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_headlight_rpt_77(), output);
  }

  // optional .apollo.canbus.Accel_rpt_68 accel_rpt_68 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_accel_rpt_68(), output);
  }

  // optional .apollo.canbus.Steering_motor_rpt_3_75 steering_motor_rpt_3_75 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_steering_motor_rpt_3_75(), output);
  }

  // optional .apollo.canbus.Turn_cmd_63 turn_cmd_63 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_turn_cmd_63(), output);
  }

  // optional .apollo.canbus.Turn_rpt_64 turn_rpt_64 = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_turn_rpt_64(), output);
  }

  // optional .apollo.canbus.Shift_cmd_65 shift_cmd_65 = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_shift_cmd_65(), output);
  }

  // optional .apollo.canbus.Shift_rpt_66 shift_rpt_66 = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_shift_rpt_66(), output);
  }

  // optional .apollo.canbus.Accel_cmd_67 accel_cmd_67 = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_accel_cmd_67(), output);
  }

  // optional .apollo.canbus.Lat_lon_heading_rpt_82 lat_lon_heading_rpt_82 = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_lat_lon_heading_rpt_82(), output);
  }

  // optional .apollo.canbus.Global_cmd_69 global_cmd_69 = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_internal_global_cmd_69(), output);
  }

  // optional .apollo.canbus.Parking_brake_status_rpt_80 parking_brake_status_rpt_80 = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_parking_brake_status_rpt_80(), output);
  }

  // optional .apollo.canbus.Yaw_rate_rpt_81 yaw_rate_rpt_81 = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_yaw_rate_rpt_81(), output);
  }

  // optional .apollo.canbus.Horn_rpt_79 horn_rpt_79 = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_horn_rpt_79(), output);
  }

  // optional .apollo.canbus.Horn_cmd_78 horn_cmd_78 = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_internal_horn_cmd_78(), output);
  }

  // optional .apollo.canbus.Wiper_rpt_91 wiper_rpt_91 = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->_internal_wiper_rpt_91(), output);
  }

  // optional .apollo.canbus.Vehicle_speed_rpt_6f vehicle_speed_rpt_6f = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->_internal_vehicle_speed_rpt_6f(), output);
  }

  // optional .apollo.canbus.Headlight_cmd_76 headlight_cmd_76 = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->_internal_headlight_cmd_76(), output);
  }

  // optional .apollo.canbus.Steering_motor_rpt_2_74 steering_motor_rpt_2_74 = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->_internal_steering_motor_rpt_2_74(), output);
  }

  // optional .apollo.canbus.Brake_motor_rpt_2_71 brake_motor_rpt_2_71 = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->_internal_brake_motor_rpt_2_71(), output);
  }

  // optional .apollo.canbus.Steering_motor_rpt_1_73 steering_motor_rpt_1_73 = 28;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->_internal_steering_motor_rpt_1_73(), output);
  }

  // optional .apollo.canbus.Wiper_cmd_90 wiper_cmd_90 = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->_internal_wiper_cmd_90(), output);
  }

  // optional .apollo.canbus.Brake_motor_rpt_3_72 brake_motor_rpt_3_72 = 30;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->_internal_brake_motor_rpt_3_72(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.canbus.Gem)
}

::google::protobuf::uint8* Gem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.canbus.Gem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.canbus.Global_rpt_6a global_rpt_6a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_global_rpt_6a(), deterministic, target);
  }

  // optional .apollo.canbus.Brake_cmd_6b brake_cmd_6b = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_brake_cmd_6b(), deterministic, target);
  }

  // optional .apollo.canbus.Brake_rpt_6c brake_rpt_6c = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_brake_rpt_6c(), deterministic, target);
  }

  // optional .apollo.canbus.Steering_cmd_6d steering_cmd_6d = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_steering_cmd_6d(), deterministic, target);
  }

  // optional .apollo.canbus.Steering_rpt_1_6e steering_rpt_1_6e = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_steering_rpt_1_6e(), deterministic, target);
  }

  // optional .apollo.canbus.Wheel_speed_rpt_7a wheel_speed_rpt_7a = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_wheel_speed_rpt_7a(), deterministic, target);
  }

  // optional .apollo.canbus.Date_time_rpt_83 date_time_rpt_83 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_date_time_rpt_83(), deterministic, target);
  }

  // optional .apollo.canbus.Brake_motor_rpt_1_70 brake_motor_rpt_1_70 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_brake_motor_rpt_1_70(), deterministic, target);
  }

  // optional .apollo.canbus.Headlight_rpt_77 headlight_rpt_77 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_headlight_rpt_77(), deterministic, target);
  }

  // optional .apollo.canbus.Accel_rpt_68 accel_rpt_68 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_accel_rpt_68(), deterministic, target);
  }

  // optional .apollo.canbus.Steering_motor_rpt_3_75 steering_motor_rpt_3_75 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_steering_motor_rpt_3_75(), deterministic, target);
  }

  // optional .apollo.canbus.Turn_cmd_63 turn_cmd_63 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_turn_cmd_63(), deterministic, target);
  }

  // optional .apollo.canbus.Turn_rpt_64 turn_rpt_64 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_turn_rpt_64(), deterministic, target);
  }

  // optional .apollo.canbus.Shift_cmd_65 shift_cmd_65 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_shift_cmd_65(), deterministic, target);
  }

  // optional .apollo.canbus.Shift_rpt_66 shift_rpt_66 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_shift_rpt_66(), deterministic, target);
  }

  // optional .apollo.canbus.Accel_cmd_67 accel_cmd_67 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_accel_cmd_67(), deterministic, target);
  }

  // optional .apollo.canbus.Lat_lon_heading_rpt_82 lat_lon_heading_rpt_82 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_lat_lon_heading_rpt_82(), deterministic, target);
  }

  // optional .apollo.canbus.Global_cmd_69 global_cmd_69 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->_internal_global_cmd_69(), deterministic, target);
  }

  // optional .apollo.canbus.Parking_brake_status_rpt_80 parking_brake_status_rpt_80 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_parking_brake_status_rpt_80(), deterministic, target);
  }

  // optional .apollo.canbus.Yaw_rate_rpt_81 yaw_rate_rpt_81 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_yaw_rate_rpt_81(), deterministic, target);
  }

  // optional .apollo.canbus.Horn_rpt_79 horn_rpt_79 = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_horn_rpt_79(), deterministic, target);
  }

  // optional .apollo.canbus.Horn_cmd_78 horn_cmd_78 = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->_internal_horn_cmd_78(), deterministic, target);
  }

  // optional .apollo.canbus.Wiper_rpt_91 wiper_rpt_91 = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->_internal_wiper_rpt_91(), deterministic, target);
  }

  // optional .apollo.canbus.Vehicle_speed_rpt_6f vehicle_speed_rpt_6f = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->_internal_vehicle_speed_rpt_6f(), deterministic, target);
  }

  // optional .apollo.canbus.Headlight_cmd_76 headlight_cmd_76 = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->_internal_headlight_cmd_76(), deterministic, target);
  }

  // optional .apollo.canbus.Steering_motor_rpt_2_74 steering_motor_rpt_2_74 = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, this->_internal_steering_motor_rpt_2_74(), deterministic, target);
  }

  // optional .apollo.canbus.Brake_motor_rpt_2_71 brake_motor_rpt_2_71 = 27;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, this->_internal_brake_motor_rpt_2_71(), deterministic, target);
  }

  // optional .apollo.canbus.Steering_motor_rpt_1_73 steering_motor_rpt_1_73 = 28;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, this->_internal_steering_motor_rpt_1_73(), deterministic, target);
  }

  // optional .apollo.canbus.Wiper_cmd_90 wiper_cmd_90 = 29;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, this->_internal_wiper_cmd_90(), deterministic, target);
  }

  // optional .apollo.canbus.Brake_motor_rpt_3_72 brake_motor_rpt_3_72 = 30;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->_internal_brake_motor_rpt_3_72(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.canbus.Gem)
  return target;
}

size_t Gem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.canbus.Gem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.canbus.Global_rpt_6a global_rpt_6a = 1;
    if (has_global_rpt_6a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *global_rpt_6a_);
    }

    // optional .apollo.canbus.Brake_cmd_6b brake_cmd_6b = 2;
    if (has_brake_cmd_6b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *brake_cmd_6b_);
    }

    // optional .apollo.canbus.Brake_rpt_6c brake_rpt_6c = 3;
    if (has_brake_rpt_6c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *brake_rpt_6c_);
    }

    // optional .apollo.canbus.Steering_cmd_6d steering_cmd_6d = 4;
    if (has_steering_cmd_6d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *steering_cmd_6d_);
    }

    // optional .apollo.canbus.Steering_rpt_1_6e steering_rpt_1_6e = 5;
    if (has_steering_rpt_1_6e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *steering_rpt_1_6e_);
    }

    // optional .apollo.canbus.Wheel_speed_rpt_7a wheel_speed_rpt_7a = 6;
    if (has_wheel_speed_rpt_7a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *wheel_speed_rpt_7a_);
    }

    // optional .apollo.canbus.Date_time_rpt_83 date_time_rpt_83 = 7;
    if (has_date_time_rpt_83()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *date_time_rpt_83_);
    }

    // optional .apollo.canbus.Brake_motor_rpt_1_70 brake_motor_rpt_1_70 = 8;
    if (has_brake_motor_rpt_1_70()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *brake_motor_rpt_1_70_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .apollo.canbus.Headlight_rpt_77 headlight_rpt_77 = 9;
    if (has_headlight_rpt_77()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *headlight_rpt_77_);
    }

    // optional .apollo.canbus.Accel_rpt_68 accel_rpt_68 = 10;
    if (has_accel_rpt_68()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *accel_rpt_68_);
    }

    // optional .apollo.canbus.Steering_motor_rpt_3_75 steering_motor_rpt_3_75 = 11;
    if (has_steering_motor_rpt_3_75()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *steering_motor_rpt_3_75_);
    }

    // optional .apollo.canbus.Turn_cmd_63 turn_cmd_63 = 12;
    if (has_turn_cmd_63()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *turn_cmd_63_);
    }

    // optional .apollo.canbus.Turn_rpt_64 turn_rpt_64 = 13;
    if (has_turn_rpt_64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *turn_rpt_64_);
    }

    // optional .apollo.canbus.Shift_cmd_65 shift_cmd_65 = 14;
    if (has_shift_cmd_65()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *shift_cmd_65_);
    }

    // optional .apollo.canbus.Shift_rpt_66 shift_rpt_66 = 15;
    if (has_shift_rpt_66()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *shift_rpt_66_);
    }

    // optional .apollo.canbus.Accel_cmd_67 accel_cmd_67 = 16;
    if (has_accel_cmd_67()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *accel_cmd_67_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .apollo.canbus.Lat_lon_heading_rpt_82 lat_lon_heading_rpt_82 = 17;
    if (has_lat_lon_heading_rpt_82()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lat_lon_heading_rpt_82_);
    }

    // optional .apollo.canbus.Global_cmd_69 global_cmd_69 = 18;
    if (has_global_cmd_69()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *global_cmd_69_);
    }

    // optional .apollo.canbus.Parking_brake_status_rpt_80 parking_brake_status_rpt_80 = 19;
    if (has_parking_brake_status_rpt_80()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *parking_brake_status_rpt_80_);
    }

    // optional .apollo.canbus.Yaw_rate_rpt_81 yaw_rate_rpt_81 = 20;
    if (has_yaw_rate_rpt_81()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *yaw_rate_rpt_81_);
    }

    // optional .apollo.canbus.Horn_rpt_79 horn_rpt_79 = 21;
    if (has_horn_rpt_79()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *horn_rpt_79_);
    }

    // optional .apollo.canbus.Horn_cmd_78 horn_cmd_78 = 22;
    if (has_horn_cmd_78()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *horn_cmd_78_);
    }

    // optional .apollo.canbus.Wiper_rpt_91 wiper_rpt_91 = 23;
    if (has_wiper_rpt_91()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *wiper_rpt_91_);
    }

    // optional .apollo.canbus.Vehicle_speed_rpt_6f vehicle_speed_rpt_6f = 24;
    if (has_vehicle_speed_rpt_6f()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *vehicle_speed_rpt_6f_);
    }

  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    // optional .apollo.canbus.Headlight_cmd_76 headlight_cmd_76 = 25;
    if (has_headlight_cmd_76()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *headlight_cmd_76_);
    }

    // optional .apollo.canbus.Steering_motor_rpt_2_74 steering_motor_rpt_2_74 = 26;
    if (has_steering_motor_rpt_2_74()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *steering_motor_rpt_2_74_);
    }

    // optional .apollo.canbus.Brake_motor_rpt_2_71 brake_motor_rpt_2_71 = 27;
    if (has_brake_motor_rpt_2_71()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *brake_motor_rpt_2_71_);
    }

    // optional .apollo.canbus.Steering_motor_rpt_1_73 steering_motor_rpt_1_73 = 28;
    if (has_steering_motor_rpt_1_73()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *steering_motor_rpt_1_73_);
    }

    // optional .apollo.canbus.Wiper_cmd_90 wiper_cmd_90 = 29;
    if (has_wiper_cmd_90()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *wiper_cmd_90_);
    }

    // optional .apollo.canbus.Brake_motor_rpt_3_72 brake_motor_rpt_3_72 = 30;
    if (has_brake_motor_rpt_3_72()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *brake_motor_rpt_3_72_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.canbus.Gem)
  GOOGLE_DCHECK_NE(&from, this);
  const Gem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.canbus.Gem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.canbus.Gem)
    MergeFrom(*source);
  }
}

void Gem::MergeFrom(const Gem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.canbus.Gem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_global_rpt_6a()->::apollo::canbus::Global_rpt_6a::MergeFrom(from.global_rpt_6a());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_brake_cmd_6b()->::apollo::canbus::Brake_cmd_6b::MergeFrom(from.brake_cmd_6b());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_brake_rpt_6c()->::apollo::canbus::Brake_rpt_6c::MergeFrom(from.brake_rpt_6c());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_steering_cmd_6d()->::apollo::canbus::Steering_cmd_6d::MergeFrom(from.steering_cmd_6d());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_steering_rpt_1_6e()->::apollo::canbus::Steering_rpt_1_6e::MergeFrom(from.steering_rpt_1_6e());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_wheel_speed_rpt_7a()->::apollo::canbus::Wheel_speed_rpt_7a::MergeFrom(from.wheel_speed_rpt_7a());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_date_time_rpt_83()->::apollo::canbus::Date_time_rpt_83::MergeFrom(from.date_time_rpt_83());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_brake_motor_rpt_1_70()->::apollo::canbus::Brake_motor_rpt_1_70::MergeFrom(from.brake_motor_rpt_1_70());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_headlight_rpt_77()->::apollo::canbus::Headlight_rpt_77::MergeFrom(from.headlight_rpt_77());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_accel_rpt_68()->::apollo::canbus::Accel_rpt_68::MergeFrom(from.accel_rpt_68());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_steering_motor_rpt_3_75()->::apollo::canbus::Steering_motor_rpt_3_75::MergeFrom(from.steering_motor_rpt_3_75());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_turn_cmd_63()->::apollo::canbus::Turn_cmd_63::MergeFrom(from.turn_cmd_63());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_turn_rpt_64()->::apollo::canbus::Turn_rpt_64::MergeFrom(from.turn_rpt_64());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_shift_cmd_65()->::apollo::canbus::Shift_cmd_65::MergeFrom(from.shift_cmd_65());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_shift_rpt_66()->::apollo::canbus::Shift_rpt_66::MergeFrom(from.shift_rpt_66());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_accel_cmd_67()->::apollo::canbus::Accel_cmd_67::MergeFrom(from.accel_cmd_67());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_lat_lon_heading_rpt_82()->::apollo::canbus::Lat_lon_heading_rpt_82::MergeFrom(from.lat_lon_heading_rpt_82());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_global_cmd_69()->::apollo::canbus::Global_cmd_69::MergeFrom(from.global_cmd_69());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_parking_brake_status_rpt_80()->::apollo::canbus::Parking_brake_status_rpt_80::MergeFrom(from.parking_brake_status_rpt_80());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_yaw_rate_rpt_81()->::apollo::canbus::Yaw_rate_rpt_81::MergeFrom(from.yaw_rate_rpt_81());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_horn_rpt_79()->::apollo::canbus::Horn_rpt_79::MergeFrom(from.horn_rpt_79());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_horn_cmd_78()->::apollo::canbus::Horn_cmd_78::MergeFrom(from.horn_cmd_78());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_wiper_rpt_91()->::apollo::canbus::Wiper_rpt_91::MergeFrom(from.wiper_rpt_91());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_vehicle_speed_rpt_6f()->::apollo::canbus::Vehicle_speed_rpt_6f::MergeFrom(from.vehicle_speed_rpt_6f());
    }
  }
  if (cached_has_bits & 1056964608u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_headlight_cmd_76()->::apollo::canbus::Headlight_cmd_76::MergeFrom(from.headlight_cmd_76());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_steering_motor_rpt_2_74()->::apollo::canbus::Steering_motor_rpt_2_74::MergeFrom(from.steering_motor_rpt_2_74());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_brake_motor_rpt_2_71()->::apollo::canbus::Brake_motor_rpt_2_71::MergeFrom(from.brake_motor_rpt_2_71());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_steering_motor_rpt_1_73()->::apollo::canbus::Steering_motor_rpt_1_73::MergeFrom(from.steering_motor_rpt_1_73());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_wiper_cmd_90()->::apollo::canbus::Wiper_cmd_90::MergeFrom(from.wiper_cmd_90());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_brake_motor_rpt_3_72()->::apollo::canbus::Brake_motor_rpt_3_72::MergeFrom(from.brake_motor_rpt_3_72());
    }
  }
}

void Gem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.canbus.Gem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gem::CopyFrom(const Gem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.canbus.Gem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gem::IsInitialized() const {
  return true;
}

void Gem::Swap(Gem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gem::InternalSwap(Gem* other) {
  using std::swap;
  swap(global_rpt_6a_, other->global_rpt_6a_);
  swap(brake_cmd_6b_, other->brake_cmd_6b_);
  swap(brake_rpt_6c_, other->brake_rpt_6c_);
  swap(steering_cmd_6d_, other->steering_cmd_6d_);
  swap(steering_rpt_1_6e_, other->steering_rpt_1_6e_);
  swap(wheel_speed_rpt_7a_, other->wheel_speed_rpt_7a_);
  swap(date_time_rpt_83_, other->date_time_rpt_83_);
  swap(brake_motor_rpt_1_70_, other->brake_motor_rpt_1_70_);
  swap(headlight_rpt_77_, other->headlight_rpt_77_);
  swap(accel_rpt_68_, other->accel_rpt_68_);
  swap(steering_motor_rpt_3_75_, other->steering_motor_rpt_3_75_);
  swap(turn_cmd_63_, other->turn_cmd_63_);
  swap(turn_rpt_64_, other->turn_rpt_64_);
  swap(shift_cmd_65_, other->shift_cmd_65_);
  swap(shift_rpt_66_, other->shift_rpt_66_);
  swap(accel_cmd_67_, other->accel_cmd_67_);
  swap(lat_lon_heading_rpt_82_, other->lat_lon_heading_rpt_82_);
  swap(global_cmd_69_, other->global_cmd_69_);
  swap(parking_brake_status_rpt_80_, other->parking_brake_status_rpt_80_);
  swap(yaw_rate_rpt_81_, other->yaw_rate_rpt_81_);
  swap(horn_rpt_79_, other->horn_rpt_79_);
  swap(horn_cmd_78_, other->horn_cmd_78_);
  swap(wiper_rpt_91_, other->wiper_rpt_91_);
  swap(vehicle_speed_rpt_6f_, other->vehicle_speed_rpt_6f_);
  swap(headlight_cmd_76_, other->headlight_cmd_76_);
  swap(steering_motor_rpt_2_74_, other->steering_motor_rpt_2_74_);
  swap(brake_motor_rpt_2_71_, other->brake_motor_rpt_2_71_);
  swap(steering_motor_rpt_1_73_, other->steering_motor_rpt_1_73_);
  swap(wiper_cmd_90_, other->wiper_cmd_90_);
  swap(brake_motor_rpt_3_72_, other->brake_motor_rpt_3_72_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Gem::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fcanbus_2fproto_2fchassis_5fdetail_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::ChassisDetail* Arena::CreateMaybeMessage< ::apollo::canbus::ChassisDetail >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::ChassisDetail >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::CheckResponseSignal* Arena::CreateMaybeMessage< ::apollo::canbus::CheckResponseSignal >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::CheckResponseSignal >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Battery* Arena::CreateMaybeMessage< ::apollo::canbus::Battery >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Battery >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Light* Arena::CreateMaybeMessage< ::apollo::canbus::Light >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Light >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Eps* Arena::CreateMaybeMessage< ::apollo::canbus::Eps >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Eps >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::VehicleSpd* Arena::CreateMaybeMessage< ::apollo::canbus::VehicleSpd >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::VehicleSpd >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Deceleration* Arena::CreateMaybeMessage< ::apollo::canbus::Deceleration >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Deceleration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Brake* Arena::CreateMaybeMessage< ::apollo::canbus::Brake >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Epb* Arena::CreateMaybeMessage< ::apollo::canbus::Epb >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Epb >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Gas* Arena::CreateMaybeMessage< ::apollo::canbus::Gas >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Gas >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Esp* Arena::CreateMaybeMessage< ::apollo::canbus::Esp >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Esp >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Ems* Arena::CreateMaybeMessage< ::apollo::canbus::Ems >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Ems >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Gear* Arena::CreateMaybeMessage< ::apollo::canbus::Gear >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Gear >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Safety* Arena::CreateMaybeMessage< ::apollo::canbus::Safety >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Safety >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::BasicInfo* Arena::CreateMaybeMessage< ::apollo::canbus::BasicInfo >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::BasicInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Global_rpt_6a* Arena::CreateMaybeMessage< ::apollo::canbus::Global_rpt_6a >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Global_rpt_6a >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Brake_cmd_6b* Arena::CreateMaybeMessage< ::apollo::canbus::Brake_cmd_6b >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake_cmd_6b >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Brake_rpt_6c* Arena::CreateMaybeMessage< ::apollo::canbus::Brake_rpt_6c >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake_rpt_6c >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Steering_cmd_6d* Arena::CreateMaybeMessage< ::apollo::canbus::Steering_cmd_6d >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Steering_cmd_6d >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Steering_rpt_1_6e* Arena::CreateMaybeMessage< ::apollo::canbus::Steering_rpt_1_6e >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Steering_rpt_1_6e >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Wheel_speed_rpt_7a* Arena::CreateMaybeMessage< ::apollo::canbus::Wheel_speed_rpt_7a >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Wheel_speed_rpt_7a >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Date_time_rpt_83* Arena::CreateMaybeMessage< ::apollo::canbus::Date_time_rpt_83 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Date_time_rpt_83 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Brake_motor_rpt_1_70* Arena::CreateMaybeMessage< ::apollo::canbus::Brake_motor_rpt_1_70 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake_motor_rpt_1_70 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Headlight_rpt_77* Arena::CreateMaybeMessage< ::apollo::canbus::Headlight_rpt_77 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Headlight_rpt_77 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Accel_rpt_68* Arena::CreateMaybeMessage< ::apollo::canbus::Accel_rpt_68 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Accel_rpt_68 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Steering_motor_rpt_3_75* Arena::CreateMaybeMessage< ::apollo::canbus::Steering_motor_rpt_3_75 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Steering_motor_rpt_3_75 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Turn_cmd_63* Arena::CreateMaybeMessage< ::apollo::canbus::Turn_cmd_63 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Turn_cmd_63 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Turn_rpt_64* Arena::CreateMaybeMessage< ::apollo::canbus::Turn_rpt_64 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Turn_rpt_64 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Shift_cmd_65* Arena::CreateMaybeMessage< ::apollo::canbus::Shift_cmd_65 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Shift_cmd_65 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Shift_rpt_66* Arena::CreateMaybeMessage< ::apollo::canbus::Shift_rpt_66 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Shift_rpt_66 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Accel_cmd_67* Arena::CreateMaybeMessage< ::apollo::canbus::Accel_cmd_67 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Accel_cmd_67 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Lat_lon_heading_rpt_82* Arena::CreateMaybeMessage< ::apollo::canbus::Lat_lon_heading_rpt_82 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Lat_lon_heading_rpt_82 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Global_cmd_69* Arena::CreateMaybeMessage< ::apollo::canbus::Global_cmd_69 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Global_cmd_69 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Parking_brake_status_rpt_80* Arena::CreateMaybeMessage< ::apollo::canbus::Parking_brake_status_rpt_80 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Parking_brake_status_rpt_80 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Yaw_rate_rpt_81* Arena::CreateMaybeMessage< ::apollo::canbus::Yaw_rate_rpt_81 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Yaw_rate_rpt_81 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Horn_rpt_79* Arena::CreateMaybeMessage< ::apollo::canbus::Horn_rpt_79 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Horn_rpt_79 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Horn_cmd_78* Arena::CreateMaybeMessage< ::apollo::canbus::Horn_cmd_78 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Horn_cmd_78 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Wiper_rpt_91* Arena::CreateMaybeMessage< ::apollo::canbus::Wiper_rpt_91 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Wiper_rpt_91 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Vehicle_speed_rpt_6f* Arena::CreateMaybeMessage< ::apollo::canbus::Vehicle_speed_rpt_6f >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Vehicle_speed_rpt_6f >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Headlight_cmd_76* Arena::CreateMaybeMessage< ::apollo::canbus::Headlight_cmd_76 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Headlight_cmd_76 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Steering_motor_rpt_2_74* Arena::CreateMaybeMessage< ::apollo::canbus::Steering_motor_rpt_2_74 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Steering_motor_rpt_2_74 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Brake_motor_rpt_2_71* Arena::CreateMaybeMessage< ::apollo::canbus::Brake_motor_rpt_2_71 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake_motor_rpt_2_71 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Steering_motor_rpt_1_73* Arena::CreateMaybeMessage< ::apollo::canbus::Steering_motor_rpt_1_73 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Steering_motor_rpt_1_73 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Wiper_cmd_90* Arena::CreateMaybeMessage< ::apollo::canbus::Wiper_cmd_90 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Wiper_cmd_90 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Brake_motor_rpt_3_72* Arena::CreateMaybeMessage< ::apollo::canbus::Brake_motor_rpt_3_72 >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Brake_motor_rpt_3_72 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::canbus::Gem* Arena::CreateMaybeMessage< ::apollo::canbus::Gem >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::canbus::Gem >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
