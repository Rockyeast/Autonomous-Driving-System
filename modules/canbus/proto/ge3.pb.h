// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/ge3.proto

#ifndef PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2fge3_2eproto
#define PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2fge3_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcanbus_2fproto_2fge3_2eproto 

namespace protobuf_modules_2fcanbus_2fproto_2fge3_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[17];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fcanbus_2fproto_2fge3_2eproto
namespace apollo {
namespace canbus {
class Ge3;
class Ge3DefaultTypeInternal;
extern Ge3DefaultTypeInternal _Ge3_default_instance_;
class Pc_bcm_201;
class Pc_bcm_201DefaultTypeInternal;
extern Pc_bcm_201DefaultTypeInternal _Pc_bcm_201_default_instance_;
class Pc_bcs_202;
class Pc_bcs_202DefaultTypeInternal;
extern Pc_bcs_202DefaultTypeInternal _Pc_bcs_202_default_instance_;
class Pc_epb_203;
class Pc_epb_203DefaultTypeInternal;
extern Pc_epb_203DefaultTypeInternal _Pc_epb_203_default_instance_;
class Pc_eps_204;
class Pc_eps_204DefaultTypeInternal;
extern Pc_eps_204DefaultTypeInternal _Pc_eps_204_default_instance_;
class Pc_vcu_205;
class Pc_vcu_205DefaultTypeInternal;
extern Pc_vcu_205DefaultTypeInternal _Pc_vcu_205_default_instance_;
class Scu_1_301;
class Scu_1_301DefaultTypeInternal;
extern Scu_1_301DefaultTypeInternal _Scu_1_301_default_instance_;
class Scu_2_302;
class Scu_2_302DefaultTypeInternal;
extern Scu_2_302DefaultTypeInternal _Scu_2_302_default_instance_;
class Scu_3_303;
class Scu_3_303DefaultTypeInternal;
extern Scu_3_303DefaultTypeInternal _Scu_3_303_default_instance_;
class Scu_bcm_304;
class Scu_bcm_304DefaultTypeInternal;
extern Scu_bcm_304DefaultTypeInternal _Scu_bcm_304_default_instance_;
class Scu_bcs_1_306;
class Scu_bcs_1_306DefaultTypeInternal;
extern Scu_bcs_1_306DefaultTypeInternal _Scu_bcs_1_306_default_instance_;
class Scu_bcs_2_307;
class Scu_bcs_2_307DefaultTypeInternal;
extern Scu_bcs_2_307DefaultTypeInternal _Scu_bcs_2_307_default_instance_;
class Scu_bcs_3_308;
class Scu_bcs_3_308DefaultTypeInternal;
extern Scu_bcs_3_308DefaultTypeInternal _Scu_bcs_3_308_default_instance_;
class Scu_epb_310;
class Scu_epb_310DefaultTypeInternal;
extern Scu_epb_310DefaultTypeInternal _Scu_epb_310_default_instance_;
class Scu_eps_311;
class Scu_eps_311DefaultTypeInternal;
extern Scu_eps_311DefaultTypeInternal _Scu_eps_311_default_instance_;
class Scu_vcu_1_312;
class Scu_vcu_1_312DefaultTypeInternal;
extern Scu_vcu_1_312DefaultTypeInternal _Scu_vcu_1_312_default_instance_;
class Scu_vcu_2_313;
class Scu_vcu_2_313DefaultTypeInternal;
extern Scu_vcu_2_313DefaultTypeInternal _Scu_vcu_2_313_default_instance_;
}  // namespace canbus
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::canbus::Ge3* Arena::CreateMaybeMessage<::apollo::canbus::Ge3>(Arena*);
template<> ::apollo::canbus::Pc_bcm_201* Arena::CreateMaybeMessage<::apollo::canbus::Pc_bcm_201>(Arena*);
template<> ::apollo::canbus::Pc_bcs_202* Arena::CreateMaybeMessage<::apollo::canbus::Pc_bcs_202>(Arena*);
template<> ::apollo::canbus::Pc_epb_203* Arena::CreateMaybeMessage<::apollo::canbus::Pc_epb_203>(Arena*);
template<> ::apollo::canbus::Pc_eps_204* Arena::CreateMaybeMessage<::apollo::canbus::Pc_eps_204>(Arena*);
template<> ::apollo::canbus::Pc_vcu_205* Arena::CreateMaybeMessage<::apollo::canbus::Pc_vcu_205>(Arena*);
template<> ::apollo::canbus::Scu_1_301* Arena::CreateMaybeMessage<::apollo::canbus::Scu_1_301>(Arena*);
template<> ::apollo::canbus::Scu_2_302* Arena::CreateMaybeMessage<::apollo::canbus::Scu_2_302>(Arena*);
template<> ::apollo::canbus::Scu_3_303* Arena::CreateMaybeMessage<::apollo::canbus::Scu_3_303>(Arena*);
template<> ::apollo::canbus::Scu_bcm_304* Arena::CreateMaybeMessage<::apollo::canbus::Scu_bcm_304>(Arena*);
template<> ::apollo::canbus::Scu_bcs_1_306* Arena::CreateMaybeMessage<::apollo::canbus::Scu_bcs_1_306>(Arena*);
template<> ::apollo::canbus::Scu_bcs_2_307* Arena::CreateMaybeMessage<::apollo::canbus::Scu_bcs_2_307>(Arena*);
template<> ::apollo::canbus::Scu_bcs_3_308* Arena::CreateMaybeMessage<::apollo::canbus::Scu_bcs_3_308>(Arena*);
template<> ::apollo::canbus::Scu_epb_310* Arena::CreateMaybeMessage<::apollo::canbus::Scu_epb_310>(Arena*);
template<> ::apollo::canbus::Scu_eps_311* Arena::CreateMaybeMessage<::apollo::canbus::Scu_eps_311>(Arena*);
template<> ::apollo::canbus::Scu_vcu_1_312* Arena::CreateMaybeMessage<::apollo::canbus::Scu_vcu_1_312>(Arena*);
template<> ::apollo::canbus::Scu_vcu_2_313* Arena::CreateMaybeMessage<::apollo::canbus::Scu_vcu_2_313>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace canbus {

enum Pc_bcm_201_Pc_reverselampreqType {
  Pc_bcm_201_Pc_reverselampreqType_PC_REVERSELAMPREQ_NOREQ = 0,
  Pc_bcm_201_Pc_reverselampreqType_PC_REVERSELAMPREQ_REQ = 1
};
bool Pc_bcm_201_Pc_reverselampreqType_IsValid(int value);
const Pc_bcm_201_Pc_reverselampreqType Pc_bcm_201_Pc_reverselampreqType_Pc_reverselampreqType_MIN = Pc_bcm_201_Pc_reverselampreqType_PC_REVERSELAMPREQ_NOREQ;
const Pc_bcm_201_Pc_reverselampreqType Pc_bcm_201_Pc_reverselampreqType_Pc_reverselampreqType_MAX = Pc_bcm_201_Pc_reverselampreqType_PC_REVERSELAMPREQ_REQ;
const int Pc_bcm_201_Pc_reverselampreqType_Pc_reverselampreqType_ARRAYSIZE = Pc_bcm_201_Pc_reverselampreqType_Pc_reverselampreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pc_bcm_201_Pc_reverselampreqType_descriptor();
inline const ::std::string& Pc_bcm_201_Pc_reverselampreqType_Name(Pc_bcm_201_Pc_reverselampreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pc_bcm_201_Pc_reverselampreqType_descriptor(), value);
}
inline bool Pc_bcm_201_Pc_reverselampreqType_Parse(
    const ::std::string& name, Pc_bcm_201_Pc_reverselampreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pc_bcm_201_Pc_reverselampreqType>(
    Pc_bcm_201_Pc_reverselampreqType_descriptor(), name, value);
}
enum Pc_bcm_201_Pc_lowbeamreqType {
  Pc_bcm_201_Pc_lowbeamreqType_PC_LOWBEAMREQ_NOREQ = 0,
  Pc_bcm_201_Pc_lowbeamreqType_PC_LOWBEAMREQ_REQ = 1
};
bool Pc_bcm_201_Pc_lowbeamreqType_IsValid(int value);
const Pc_bcm_201_Pc_lowbeamreqType Pc_bcm_201_Pc_lowbeamreqType_Pc_lowbeamreqType_MIN = Pc_bcm_201_Pc_lowbeamreqType_PC_LOWBEAMREQ_NOREQ;
const Pc_bcm_201_Pc_lowbeamreqType Pc_bcm_201_Pc_lowbeamreqType_Pc_lowbeamreqType_MAX = Pc_bcm_201_Pc_lowbeamreqType_PC_LOWBEAMREQ_REQ;
const int Pc_bcm_201_Pc_lowbeamreqType_Pc_lowbeamreqType_ARRAYSIZE = Pc_bcm_201_Pc_lowbeamreqType_Pc_lowbeamreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pc_bcm_201_Pc_lowbeamreqType_descriptor();
inline const ::std::string& Pc_bcm_201_Pc_lowbeamreqType_Name(Pc_bcm_201_Pc_lowbeamreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pc_bcm_201_Pc_lowbeamreqType_descriptor(), value);
}
inline bool Pc_bcm_201_Pc_lowbeamreqType_Parse(
    const ::std::string& name, Pc_bcm_201_Pc_lowbeamreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pc_bcm_201_Pc_lowbeamreqType>(
    Pc_bcm_201_Pc_lowbeamreqType_descriptor(), name, value);
}
enum Pc_bcm_201_Pc_highbeamreqType {
  Pc_bcm_201_Pc_highbeamreqType_PC_HIGHBEAMREQ_NOREQ = 0,
  Pc_bcm_201_Pc_highbeamreqType_PC_HIGHBEAMREQ_REQ = 1
};
bool Pc_bcm_201_Pc_highbeamreqType_IsValid(int value);
const Pc_bcm_201_Pc_highbeamreqType Pc_bcm_201_Pc_highbeamreqType_Pc_highbeamreqType_MIN = Pc_bcm_201_Pc_highbeamreqType_PC_HIGHBEAMREQ_NOREQ;
const Pc_bcm_201_Pc_highbeamreqType Pc_bcm_201_Pc_highbeamreqType_Pc_highbeamreqType_MAX = Pc_bcm_201_Pc_highbeamreqType_PC_HIGHBEAMREQ_REQ;
const int Pc_bcm_201_Pc_highbeamreqType_Pc_highbeamreqType_ARRAYSIZE = Pc_bcm_201_Pc_highbeamreqType_Pc_highbeamreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pc_bcm_201_Pc_highbeamreqType_descriptor();
inline const ::std::string& Pc_bcm_201_Pc_highbeamreqType_Name(Pc_bcm_201_Pc_highbeamreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pc_bcm_201_Pc_highbeamreqType_descriptor(), value);
}
inline bool Pc_bcm_201_Pc_highbeamreqType_Parse(
    const ::std::string& name, Pc_bcm_201_Pc_highbeamreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pc_bcm_201_Pc_highbeamreqType>(
    Pc_bcm_201_Pc_highbeamreqType_descriptor(), name, value);
}
enum Pc_bcm_201_Pc_rightturnlampreqType {
  Pc_bcm_201_Pc_rightturnlampreqType_PC_RIGHTTURNLAMPREQ_NOREQ = 0,
  Pc_bcm_201_Pc_rightturnlampreqType_PC_RIGHTTURNLAMPREQ_REQ = 1
};
bool Pc_bcm_201_Pc_rightturnlampreqType_IsValid(int value);
const Pc_bcm_201_Pc_rightturnlampreqType Pc_bcm_201_Pc_rightturnlampreqType_Pc_rightturnlampreqType_MIN = Pc_bcm_201_Pc_rightturnlampreqType_PC_RIGHTTURNLAMPREQ_NOREQ;
const Pc_bcm_201_Pc_rightturnlampreqType Pc_bcm_201_Pc_rightturnlampreqType_Pc_rightturnlampreqType_MAX = Pc_bcm_201_Pc_rightturnlampreqType_PC_RIGHTTURNLAMPREQ_REQ;
const int Pc_bcm_201_Pc_rightturnlampreqType_Pc_rightturnlampreqType_ARRAYSIZE = Pc_bcm_201_Pc_rightturnlampreqType_Pc_rightturnlampreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pc_bcm_201_Pc_rightturnlampreqType_descriptor();
inline const ::std::string& Pc_bcm_201_Pc_rightturnlampreqType_Name(Pc_bcm_201_Pc_rightturnlampreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pc_bcm_201_Pc_rightturnlampreqType_descriptor(), value);
}
inline bool Pc_bcm_201_Pc_rightturnlampreqType_Parse(
    const ::std::string& name, Pc_bcm_201_Pc_rightturnlampreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pc_bcm_201_Pc_rightturnlampreqType>(
    Pc_bcm_201_Pc_rightturnlampreqType_descriptor(), name, value);
}
enum Pc_bcm_201_Pc_leftturnlampreqType {
  Pc_bcm_201_Pc_leftturnlampreqType_PC_LEFTTURNLAMPREQ_NOREQ = 0,
  Pc_bcm_201_Pc_leftturnlampreqType_PC_LEFTTURNLAMPREQ_REQ = 1
};
bool Pc_bcm_201_Pc_leftturnlampreqType_IsValid(int value);
const Pc_bcm_201_Pc_leftturnlampreqType Pc_bcm_201_Pc_leftturnlampreqType_Pc_leftturnlampreqType_MIN = Pc_bcm_201_Pc_leftturnlampreqType_PC_LEFTTURNLAMPREQ_NOREQ;
const Pc_bcm_201_Pc_leftturnlampreqType Pc_bcm_201_Pc_leftturnlampreqType_Pc_leftturnlampreqType_MAX = Pc_bcm_201_Pc_leftturnlampreqType_PC_LEFTTURNLAMPREQ_REQ;
const int Pc_bcm_201_Pc_leftturnlampreqType_Pc_leftturnlampreqType_ARRAYSIZE = Pc_bcm_201_Pc_leftturnlampreqType_Pc_leftturnlampreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pc_bcm_201_Pc_leftturnlampreqType_descriptor();
inline const ::std::string& Pc_bcm_201_Pc_leftturnlampreqType_Name(Pc_bcm_201_Pc_leftturnlampreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pc_bcm_201_Pc_leftturnlampreqType_descriptor(), value);
}
inline bool Pc_bcm_201_Pc_leftturnlampreqType_Parse(
    const ::std::string& name, Pc_bcm_201_Pc_leftturnlampreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pc_bcm_201_Pc_leftturnlampreqType>(
    Pc_bcm_201_Pc_leftturnlampreqType_descriptor(), name, value);
}
enum Pc_bcm_201_Pc_hornreqType {
  Pc_bcm_201_Pc_hornreqType_PC_HORNREQ_NOREQ = 0,
  Pc_bcm_201_Pc_hornreqType_PC_HORNREQ_REQ = 1
};
bool Pc_bcm_201_Pc_hornreqType_IsValid(int value);
const Pc_bcm_201_Pc_hornreqType Pc_bcm_201_Pc_hornreqType_Pc_hornreqType_MIN = Pc_bcm_201_Pc_hornreqType_PC_HORNREQ_NOREQ;
const Pc_bcm_201_Pc_hornreqType Pc_bcm_201_Pc_hornreqType_Pc_hornreqType_MAX = Pc_bcm_201_Pc_hornreqType_PC_HORNREQ_REQ;
const int Pc_bcm_201_Pc_hornreqType_Pc_hornreqType_ARRAYSIZE = Pc_bcm_201_Pc_hornreqType_Pc_hornreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pc_bcm_201_Pc_hornreqType_descriptor();
inline const ::std::string& Pc_bcm_201_Pc_hornreqType_Name(Pc_bcm_201_Pc_hornreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pc_bcm_201_Pc_hornreqType_descriptor(), value);
}
inline bool Pc_bcm_201_Pc_hornreqType_Parse(
    const ::std::string& name, Pc_bcm_201_Pc_hornreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pc_bcm_201_Pc_hornreqType>(
    Pc_bcm_201_Pc_hornreqType_descriptor(), name, value);
}
enum Pc_bcm_201_Pc_hazardlampreqType {
  Pc_bcm_201_Pc_hazardlampreqType_PC_HAZARDLAMPREQ_NOREQ = 0,
  Pc_bcm_201_Pc_hazardlampreqType_PC_HAZARDLAMPREQ_REQ = 1
};
bool Pc_bcm_201_Pc_hazardlampreqType_IsValid(int value);
const Pc_bcm_201_Pc_hazardlampreqType Pc_bcm_201_Pc_hazardlampreqType_Pc_hazardlampreqType_MIN = Pc_bcm_201_Pc_hazardlampreqType_PC_HAZARDLAMPREQ_NOREQ;
const Pc_bcm_201_Pc_hazardlampreqType Pc_bcm_201_Pc_hazardlampreqType_Pc_hazardlampreqType_MAX = Pc_bcm_201_Pc_hazardlampreqType_PC_HAZARDLAMPREQ_REQ;
const int Pc_bcm_201_Pc_hazardlampreqType_Pc_hazardlampreqType_ARRAYSIZE = Pc_bcm_201_Pc_hazardlampreqType_Pc_hazardlampreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pc_bcm_201_Pc_hazardlampreqType_descriptor();
inline const ::std::string& Pc_bcm_201_Pc_hazardlampreqType_Name(Pc_bcm_201_Pc_hazardlampreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pc_bcm_201_Pc_hazardlampreqType_descriptor(), value);
}
inline bool Pc_bcm_201_Pc_hazardlampreqType_Parse(
    const ::std::string& name, Pc_bcm_201_Pc_hazardlampreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pc_bcm_201_Pc_hazardlampreqType>(
    Pc_bcm_201_Pc_hazardlampreqType_descriptor(), name, value);
}
enum Scu_bcs_3_308_Bcs_rrwheelspdvdType {
  Scu_bcs_3_308_Bcs_rrwheelspdvdType_BCS_RRWHEELSPDVD_INVALID = 0,
  Scu_bcs_3_308_Bcs_rrwheelspdvdType_BCS_RRWHEELSPDVD_VALID = 1
};
bool Scu_bcs_3_308_Bcs_rrwheelspdvdType_IsValid(int value);
const Scu_bcs_3_308_Bcs_rrwheelspdvdType Scu_bcs_3_308_Bcs_rrwheelspdvdType_Bcs_rrwheelspdvdType_MIN = Scu_bcs_3_308_Bcs_rrwheelspdvdType_BCS_RRWHEELSPDVD_INVALID;
const Scu_bcs_3_308_Bcs_rrwheelspdvdType Scu_bcs_3_308_Bcs_rrwheelspdvdType_Bcs_rrwheelspdvdType_MAX = Scu_bcs_3_308_Bcs_rrwheelspdvdType_BCS_RRWHEELSPDVD_VALID;
const int Scu_bcs_3_308_Bcs_rrwheelspdvdType_Bcs_rrwheelspdvdType_ARRAYSIZE = Scu_bcs_3_308_Bcs_rrwheelspdvdType_Bcs_rrwheelspdvdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_3_308_Bcs_rrwheelspdvdType_descriptor();
inline const ::std::string& Scu_bcs_3_308_Bcs_rrwheelspdvdType_Name(Scu_bcs_3_308_Bcs_rrwheelspdvdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_3_308_Bcs_rrwheelspdvdType_descriptor(), value);
}
inline bool Scu_bcs_3_308_Bcs_rrwheelspdvdType_Parse(
    const ::std::string& name, Scu_bcs_3_308_Bcs_rrwheelspdvdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_3_308_Bcs_rrwheelspdvdType>(
    Scu_bcs_3_308_Bcs_rrwheelspdvdType_descriptor(), name, value);
}
enum Scu_bcs_3_308_Bcs_rrwheeldirectionvdType {
  Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_BCS_RRWHEELDIRECTIONVD_INVALID = 0,
  Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_BCS_RRWHEELDIRECTIONVD_VALID = 1
};
bool Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_IsValid(int value);
const Scu_bcs_3_308_Bcs_rrwheeldirectionvdType Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_Bcs_rrwheeldirectionvdType_MIN = Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_BCS_RRWHEELDIRECTIONVD_INVALID;
const Scu_bcs_3_308_Bcs_rrwheeldirectionvdType Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_Bcs_rrwheeldirectionvdType_MAX = Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_BCS_RRWHEELDIRECTIONVD_VALID;
const int Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_Bcs_rrwheeldirectionvdType_ARRAYSIZE = Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_Bcs_rrwheeldirectionvdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_descriptor();
inline const ::std::string& Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_Name(Scu_bcs_3_308_Bcs_rrwheeldirectionvdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_descriptor(), value);
}
inline bool Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_Parse(
    const ::std::string& name, Scu_bcs_3_308_Bcs_rrwheeldirectionvdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_3_308_Bcs_rrwheeldirectionvdType>(
    Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_descriptor(), name, value);
}
enum Scu_bcs_3_308_Bcs_rlwheelspdvdType {
  Scu_bcs_3_308_Bcs_rlwheelspdvdType_BCS_RLWHEELSPDVD_INVALID = 0,
  Scu_bcs_3_308_Bcs_rlwheelspdvdType_BCS_RLWHEELSPDVD_VALID = 1
};
bool Scu_bcs_3_308_Bcs_rlwheelspdvdType_IsValid(int value);
const Scu_bcs_3_308_Bcs_rlwheelspdvdType Scu_bcs_3_308_Bcs_rlwheelspdvdType_Bcs_rlwheelspdvdType_MIN = Scu_bcs_3_308_Bcs_rlwheelspdvdType_BCS_RLWHEELSPDVD_INVALID;
const Scu_bcs_3_308_Bcs_rlwheelspdvdType Scu_bcs_3_308_Bcs_rlwheelspdvdType_Bcs_rlwheelspdvdType_MAX = Scu_bcs_3_308_Bcs_rlwheelspdvdType_BCS_RLWHEELSPDVD_VALID;
const int Scu_bcs_3_308_Bcs_rlwheelspdvdType_Bcs_rlwheelspdvdType_ARRAYSIZE = Scu_bcs_3_308_Bcs_rlwheelspdvdType_Bcs_rlwheelspdvdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_3_308_Bcs_rlwheelspdvdType_descriptor();
inline const ::std::string& Scu_bcs_3_308_Bcs_rlwheelspdvdType_Name(Scu_bcs_3_308_Bcs_rlwheelspdvdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_3_308_Bcs_rlwheelspdvdType_descriptor(), value);
}
inline bool Scu_bcs_3_308_Bcs_rlwheelspdvdType_Parse(
    const ::std::string& name, Scu_bcs_3_308_Bcs_rlwheelspdvdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_3_308_Bcs_rlwheelspdvdType>(
    Scu_bcs_3_308_Bcs_rlwheelspdvdType_descriptor(), name, value);
}
enum Scu_bcs_3_308_Bcs_rlwheeldirectionvdType {
  Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_BCS_RLWHEELDIRECTIONVD_INVALID = 0,
  Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_BCS_RLWHEELDIRECTIONVD_VALID = 1
};
bool Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_IsValid(int value);
const Scu_bcs_3_308_Bcs_rlwheeldirectionvdType Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_Bcs_rlwheeldirectionvdType_MIN = Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_BCS_RLWHEELDIRECTIONVD_INVALID;
const Scu_bcs_3_308_Bcs_rlwheeldirectionvdType Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_Bcs_rlwheeldirectionvdType_MAX = Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_BCS_RLWHEELDIRECTIONVD_VALID;
const int Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_Bcs_rlwheeldirectionvdType_ARRAYSIZE = Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_Bcs_rlwheeldirectionvdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_descriptor();
inline const ::std::string& Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_Name(Scu_bcs_3_308_Bcs_rlwheeldirectionvdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_descriptor(), value);
}
inline bool Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_Parse(
    const ::std::string& name, Scu_bcs_3_308_Bcs_rlwheeldirectionvdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_3_308_Bcs_rlwheeldirectionvdType>(
    Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_descriptor(), name, value);
}
enum Scu_bcs_3_308_Bcs_frwheelspdvdType {
  Scu_bcs_3_308_Bcs_frwheelspdvdType_BCS_FRWHEELSPDVD_INVALID = 0,
  Scu_bcs_3_308_Bcs_frwheelspdvdType_BCS_FRWHEELSPDVD_VALID = 1
};
bool Scu_bcs_3_308_Bcs_frwheelspdvdType_IsValid(int value);
const Scu_bcs_3_308_Bcs_frwheelspdvdType Scu_bcs_3_308_Bcs_frwheelspdvdType_Bcs_frwheelspdvdType_MIN = Scu_bcs_3_308_Bcs_frwheelspdvdType_BCS_FRWHEELSPDVD_INVALID;
const Scu_bcs_3_308_Bcs_frwheelspdvdType Scu_bcs_3_308_Bcs_frwheelspdvdType_Bcs_frwheelspdvdType_MAX = Scu_bcs_3_308_Bcs_frwheelspdvdType_BCS_FRWHEELSPDVD_VALID;
const int Scu_bcs_3_308_Bcs_frwheelspdvdType_Bcs_frwheelspdvdType_ARRAYSIZE = Scu_bcs_3_308_Bcs_frwheelspdvdType_Bcs_frwheelspdvdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_3_308_Bcs_frwheelspdvdType_descriptor();
inline const ::std::string& Scu_bcs_3_308_Bcs_frwheelspdvdType_Name(Scu_bcs_3_308_Bcs_frwheelspdvdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_3_308_Bcs_frwheelspdvdType_descriptor(), value);
}
inline bool Scu_bcs_3_308_Bcs_frwheelspdvdType_Parse(
    const ::std::string& name, Scu_bcs_3_308_Bcs_frwheelspdvdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_3_308_Bcs_frwheelspdvdType>(
    Scu_bcs_3_308_Bcs_frwheelspdvdType_descriptor(), name, value);
}
enum Scu_bcs_3_308_Bcs_frwheeldirectionvdType {
  Scu_bcs_3_308_Bcs_frwheeldirectionvdType_BCS_FRWHEELDIRECTIONVD_INVALID = 0,
  Scu_bcs_3_308_Bcs_frwheeldirectionvdType_BCS_FRWHEELDIRECTIONVD_VALID = 1
};
bool Scu_bcs_3_308_Bcs_frwheeldirectionvdType_IsValid(int value);
const Scu_bcs_3_308_Bcs_frwheeldirectionvdType Scu_bcs_3_308_Bcs_frwheeldirectionvdType_Bcs_frwheeldirectionvdType_MIN = Scu_bcs_3_308_Bcs_frwheeldirectionvdType_BCS_FRWHEELDIRECTIONVD_INVALID;
const Scu_bcs_3_308_Bcs_frwheeldirectionvdType Scu_bcs_3_308_Bcs_frwheeldirectionvdType_Bcs_frwheeldirectionvdType_MAX = Scu_bcs_3_308_Bcs_frwheeldirectionvdType_BCS_FRWHEELDIRECTIONVD_VALID;
const int Scu_bcs_3_308_Bcs_frwheeldirectionvdType_Bcs_frwheeldirectionvdType_ARRAYSIZE = Scu_bcs_3_308_Bcs_frwheeldirectionvdType_Bcs_frwheeldirectionvdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_3_308_Bcs_frwheeldirectionvdType_descriptor();
inline const ::std::string& Scu_bcs_3_308_Bcs_frwheeldirectionvdType_Name(Scu_bcs_3_308_Bcs_frwheeldirectionvdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_3_308_Bcs_frwheeldirectionvdType_descriptor(), value);
}
inline bool Scu_bcs_3_308_Bcs_frwheeldirectionvdType_Parse(
    const ::std::string& name, Scu_bcs_3_308_Bcs_frwheeldirectionvdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_3_308_Bcs_frwheeldirectionvdType>(
    Scu_bcs_3_308_Bcs_frwheeldirectionvdType_descriptor(), name, value);
}
enum Scu_bcs_3_308_Bcs_flwheelspdvdType {
  Scu_bcs_3_308_Bcs_flwheelspdvdType_BCS_FLWHEELSPDVD_INVALID = 0,
  Scu_bcs_3_308_Bcs_flwheelspdvdType_BCS_FLWHEELSPDVD_VALID = 1
};
bool Scu_bcs_3_308_Bcs_flwheelspdvdType_IsValid(int value);
const Scu_bcs_3_308_Bcs_flwheelspdvdType Scu_bcs_3_308_Bcs_flwheelspdvdType_Bcs_flwheelspdvdType_MIN = Scu_bcs_3_308_Bcs_flwheelspdvdType_BCS_FLWHEELSPDVD_INVALID;
const Scu_bcs_3_308_Bcs_flwheelspdvdType Scu_bcs_3_308_Bcs_flwheelspdvdType_Bcs_flwheelspdvdType_MAX = Scu_bcs_3_308_Bcs_flwheelspdvdType_BCS_FLWHEELSPDVD_VALID;
const int Scu_bcs_3_308_Bcs_flwheelspdvdType_Bcs_flwheelspdvdType_ARRAYSIZE = Scu_bcs_3_308_Bcs_flwheelspdvdType_Bcs_flwheelspdvdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_3_308_Bcs_flwheelspdvdType_descriptor();
inline const ::std::string& Scu_bcs_3_308_Bcs_flwheelspdvdType_Name(Scu_bcs_3_308_Bcs_flwheelspdvdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_3_308_Bcs_flwheelspdvdType_descriptor(), value);
}
inline bool Scu_bcs_3_308_Bcs_flwheelspdvdType_Parse(
    const ::std::string& name, Scu_bcs_3_308_Bcs_flwheelspdvdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_3_308_Bcs_flwheelspdvdType>(
    Scu_bcs_3_308_Bcs_flwheelspdvdType_descriptor(), name, value);
}
enum Scu_bcs_3_308_Bcs_flwheeldirectionvdType {
  Scu_bcs_3_308_Bcs_flwheeldirectionvdType_BCS_FLWHEELDIRECTIONVD_INVALID = 0,
  Scu_bcs_3_308_Bcs_flwheeldirectionvdType_BCS_FLWHEELDIRECTIONVD_VALID = 1
};
bool Scu_bcs_3_308_Bcs_flwheeldirectionvdType_IsValid(int value);
const Scu_bcs_3_308_Bcs_flwheeldirectionvdType Scu_bcs_3_308_Bcs_flwheeldirectionvdType_Bcs_flwheeldirectionvdType_MIN = Scu_bcs_3_308_Bcs_flwheeldirectionvdType_BCS_FLWHEELDIRECTIONVD_INVALID;
const Scu_bcs_3_308_Bcs_flwheeldirectionvdType Scu_bcs_3_308_Bcs_flwheeldirectionvdType_Bcs_flwheeldirectionvdType_MAX = Scu_bcs_3_308_Bcs_flwheeldirectionvdType_BCS_FLWHEELDIRECTIONVD_VALID;
const int Scu_bcs_3_308_Bcs_flwheeldirectionvdType_Bcs_flwheeldirectionvdType_ARRAYSIZE = Scu_bcs_3_308_Bcs_flwheeldirectionvdType_Bcs_flwheeldirectionvdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_3_308_Bcs_flwheeldirectionvdType_descriptor();
inline const ::std::string& Scu_bcs_3_308_Bcs_flwheeldirectionvdType_Name(Scu_bcs_3_308_Bcs_flwheeldirectionvdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_3_308_Bcs_flwheeldirectionvdType_descriptor(), value);
}
inline bool Scu_bcs_3_308_Bcs_flwheeldirectionvdType_Parse(
    const ::std::string& name, Scu_bcs_3_308_Bcs_flwheeldirectionvdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_3_308_Bcs_flwheeldirectionvdType>(
    Scu_bcs_3_308_Bcs_flwheeldirectionvdType_descriptor(), name, value);
}
enum Scu_bcs_3_308_Bcs_rrwheeldirectionType {
  Scu_bcs_3_308_Bcs_rrwheeldirectionType_BCS_RRWHEELDIRECTION_FORWARD = 0,
  Scu_bcs_3_308_Bcs_rrwheeldirectionType_BCS_RRWHEELDIRECTION_BACKWARD = 1
};
bool Scu_bcs_3_308_Bcs_rrwheeldirectionType_IsValid(int value);
const Scu_bcs_3_308_Bcs_rrwheeldirectionType Scu_bcs_3_308_Bcs_rrwheeldirectionType_Bcs_rrwheeldirectionType_MIN = Scu_bcs_3_308_Bcs_rrwheeldirectionType_BCS_RRWHEELDIRECTION_FORWARD;
const Scu_bcs_3_308_Bcs_rrwheeldirectionType Scu_bcs_3_308_Bcs_rrwheeldirectionType_Bcs_rrwheeldirectionType_MAX = Scu_bcs_3_308_Bcs_rrwheeldirectionType_BCS_RRWHEELDIRECTION_BACKWARD;
const int Scu_bcs_3_308_Bcs_rrwheeldirectionType_Bcs_rrwheeldirectionType_ARRAYSIZE = Scu_bcs_3_308_Bcs_rrwheeldirectionType_Bcs_rrwheeldirectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_3_308_Bcs_rrwheeldirectionType_descriptor();
inline const ::std::string& Scu_bcs_3_308_Bcs_rrwheeldirectionType_Name(Scu_bcs_3_308_Bcs_rrwheeldirectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_3_308_Bcs_rrwheeldirectionType_descriptor(), value);
}
inline bool Scu_bcs_3_308_Bcs_rrwheeldirectionType_Parse(
    const ::std::string& name, Scu_bcs_3_308_Bcs_rrwheeldirectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_3_308_Bcs_rrwheeldirectionType>(
    Scu_bcs_3_308_Bcs_rrwheeldirectionType_descriptor(), name, value);
}
enum Scu_bcs_3_308_Bcs_rlwheeldirectionType {
  Scu_bcs_3_308_Bcs_rlwheeldirectionType_BCS_RLWHEELDIRECTION_FORWARD = 0,
  Scu_bcs_3_308_Bcs_rlwheeldirectionType_BCS_RLWHEELDIRECTION_BACKWARD = 1
};
bool Scu_bcs_3_308_Bcs_rlwheeldirectionType_IsValid(int value);
const Scu_bcs_3_308_Bcs_rlwheeldirectionType Scu_bcs_3_308_Bcs_rlwheeldirectionType_Bcs_rlwheeldirectionType_MIN = Scu_bcs_3_308_Bcs_rlwheeldirectionType_BCS_RLWHEELDIRECTION_FORWARD;
const Scu_bcs_3_308_Bcs_rlwheeldirectionType Scu_bcs_3_308_Bcs_rlwheeldirectionType_Bcs_rlwheeldirectionType_MAX = Scu_bcs_3_308_Bcs_rlwheeldirectionType_BCS_RLWHEELDIRECTION_BACKWARD;
const int Scu_bcs_3_308_Bcs_rlwheeldirectionType_Bcs_rlwheeldirectionType_ARRAYSIZE = Scu_bcs_3_308_Bcs_rlwheeldirectionType_Bcs_rlwheeldirectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_3_308_Bcs_rlwheeldirectionType_descriptor();
inline const ::std::string& Scu_bcs_3_308_Bcs_rlwheeldirectionType_Name(Scu_bcs_3_308_Bcs_rlwheeldirectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_3_308_Bcs_rlwheeldirectionType_descriptor(), value);
}
inline bool Scu_bcs_3_308_Bcs_rlwheeldirectionType_Parse(
    const ::std::string& name, Scu_bcs_3_308_Bcs_rlwheeldirectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_3_308_Bcs_rlwheeldirectionType>(
    Scu_bcs_3_308_Bcs_rlwheeldirectionType_descriptor(), name, value);
}
enum Scu_bcs_3_308_Bcs_frwheeldirectionType {
  Scu_bcs_3_308_Bcs_frwheeldirectionType_BCS_FRWHEELDIRECTION_FORWARD = 0,
  Scu_bcs_3_308_Bcs_frwheeldirectionType_BCS_FRWHEELDIRECTION_BACKWARD = 1
};
bool Scu_bcs_3_308_Bcs_frwheeldirectionType_IsValid(int value);
const Scu_bcs_3_308_Bcs_frwheeldirectionType Scu_bcs_3_308_Bcs_frwheeldirectionType_Bcs_frwheeldirectionType_MIN = Scu_bcs_3_308_Bcs_frwheeldirectionType_BCS_FRWHEELDIRECTION_FORWARD;
const Scu_bcs_3_308_Bcs_frwheeldirectionType Scu_bcs_3_308_Bcs_frwheeldirectionType_Bcs_frwheeldirectionType_MAX = Scu_bcs_3_308_Bcs_frwheeldirectionType_BCS_FRWHEELDIRECTION_BACKWARD;
const int Scu_bcs_3_308_Bcs_frwheeldirectionType_Bcs_frwheeldirectionType_ARRAYSIZE = Scu_bcs_3_308_Bcs_frwheeldirectionType_Bcs_frwheeldirectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_3_308_Bcs_frwheeldirectionType_descriptor();
inline const ::std::string& Scu_bcs_3_308_Bcs_frwheeldirectionType_Name(Scu_bcs_3_308_Bcs_frwheeldirectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_3_308_Bcs_frwheeldirectionType_descriptor(), value);
}
inline bool Scu_bcs_3_308_Bcs_frwheeldirectionType_Parse(
    const ::std::string& name, Scu_bcs_3_308_Bcs_frwheeldirectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_3_308_Bcs_frwheeldirectionType>(
    Scu_bcs_3_308_Bcs_frwheeldirectionType_descriptor(), name, value);
}
enum Scu_bcs_3_308_Bcs_flwheeldirectionType {
  Scu_bcs_3_308_Bcs_flwheeldirectionType_BCS_FLWHEELDIRECTION_FORWARD = 0,
  Scu_bcs_3_308_Bcs_flwheeldirectionType_BCS_FLWHEELDIRECTION_BACKWARD = 1
};
bool Scu_bcs_3_308_Bcs_flwheeldirectionType_IsValid(int value);
const Scu_bcs_3_308_Bcs_flwheeldirectionType Scu_bcs_3_308_Bcs_flwheeldirectionType_Bcs_flwheeldirectionType_MIN = Scu_bcs_3_308_Bcs_flwheeldirectionType_BCS_FLWHEELDIRECTION_FORWARD;
const Scu_bcs_3_308_Bcs_flwheeldirectionType Scu_bcs_3_308_Bcs_flwheeldirectionType_Bcs_flwheeldirectionType_MAX = Scu_bcs_3_308_Bcs_flwheeldirectionType_BCS_FLWHEELDIRECTION_BACKWARD;
const int Scu_bcs_3_308_Bcs_flwheeldirectionType_Bcs_flwheeldirectionType_ARRAYSIZE = Scu_bcs_3_308_Bcs_flwheeldirectionType_Bcs_flwheeldirectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_3_308_Bcs_flwheeldirectionType_descriptor();
inline const ::std::string& Scu_bcs_3_308_Bcs_flwheeldirectionType_Name(Scu_bcs_3_308_Bcs_flwheeldirectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_3_308_Bcs_flwheeldirectionType_descriptor(), value);
}
inline bool Scu_bcs_3_308_Bcs_flwheeldirectionType_Parse(
    const ::std::string& name, Scu_bcs_3_308_Bcs_flwheeldirectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_3_308_Bcs_flwheeldirectionType>(
    Scu_bcs_3_308_Bcs_flwheeldirectionType_descriptor(), name, value);
}
enum Pc_epb_203_Pc_epbreqType {
  Pc_epb_203_Pc_epbreqType_PC_EPBREQ_INVALID = 0,
  Pc_epb_203_Pc_epbreqType_PC_EPBREQ_RELEASE = 1,
  Pc_epb_203_Pc_epbreqType_PC_EPBREQ_APPLY = 2
};
bool Pc_epb_203_Pc_epbreqType_IsValid(int value);
const Pc_epb_203_Pc_epbreqType Pc_epb_203_Pc_epbreqType_Pc_epbreqType_MIN = Pc_epb_203_Pc_epbreqType_PC_EPBREQ_INVALID;
const Pc_epb_203_Pc_epbreqType Pc_epb_203_Pc_epbreqType_Pc_epbreqType_MAX = Pc_epb_203_Pc_epbreqType_PC_EPBREQ_APPLY;
const int Pc_epb_203_Pc_epbreqType_Pc_epbreqType_ARRAYSIZE = Pc_epb_203_Pc_epbreqType_Pc_epbreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pc_epb_203_Pc_epbreqType_descriptor();
inline const ::std::string& Pc_epb_203_Pc_epbreqType_Name(Pc_epb_203_Pc_epbreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pc_epb_203_Pc_epbreqType_descriptor(), value);
}
inline bool Pc_epb_203_Pc_epbreqType_Parse(
    const ::std::string& name, Pc_epb_203_Pc_epbreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pc_epb_203_Pc_epbreqType>(
    Pc_epb_203_Pc_epbreqType_descriptor(), name, value);
}
enum Pc_epb_203_Pc_epbenableType {
  Pc_epb_203_Pc_epbenableType_PC_EPBENABLE_DISABLE = 0,
  Pc_epb_203_Pc_epbenableType_PC_EPBENABLE_ENABLE = 1
};
bool Pc_epb_203_Pc_epbenableType_IsValid(int value);
const Pc_epb_203_Pc_epbenableType Pc_epb_203_Pc_epbenableType_Pc_epbenableType_MIN = Pc_epb_203_Pc_epbenableType_PC_EPBENABLE_DISABLE;
const Pc_epb_203_Pc_epbenableType Pc_epb_203_Pc_epbenableType_Pc_epbenableType_MAX = Pc_epb_203_Pc_epbenableType_PC_EPBENABLE_ENABLE;
const int Pc_epb_203_Pc_epbenableType_Pc_epbenableType_ARRAYSIZE = Pc_epb_203_Pc_epbenableType_Pc_epbenableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pc_epb_203_Pc_epbenableType_descriptor();
inline const ::std::string& Pc_epb_203_Pc_epbenableType_Name(Pc_epb_203_Pc_epbenableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pc_epb_203_Pc_epbenableType_descriptor(), value);
}
inline bool Pc_epb_203_Pc_epbenableType_Parse(
    const ::std::string& name, Pc_epb_203_Pc_epbenableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pc_epb_203_Pc_epbenableType>(
    Pc_epb_203_Pc_epbenableType_descriptor(), name, value);
}
enum Pc_bcs_202_Pc_brkpedenableType {
  Pc_bcs_202_Pc_brkpedenableType_PC_BRKPEDENABLE_DISABLE = 0,
  Pc_bcs_202_Pc_brkpedenableType_PC_BRKPEDENABLE_ENABLE = 1
};
bool Pc_bcs_202_Pc_brkpedenableType_IsValid(int value);
const Pc_bcs_202_Pc_brkpedenableType Pc_bcs_202_Pc_brkpedenableType_Pc_brkpedenableType_MIN = Pc_bcs_202_Pc_brkpedenableType_PC_BRKPEDENABLE_DISABLE;
const Pc_bcs_202_Pc_brkpedenableType Pc_bcs_202_Pc_brkpedenableType_Pc_brkpedenableType_MAX = Pc_bcs_202_Pc_brkpedenableType_PC_BRKPEDENABLE_ENABLE;
const int Pc_bcs_202_Pc_brkpedenableType_Pc_brkpedenableType_ARRAYSIZE = Pc_bcs_202_Pc_brkpedenableType_Pc_brkpedenableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pc_bcs_202_Pc_brkpedenableType_descriptor();
inline const ::std::string& Pc_bcs_202_Pc_brkpedenableType_Name(Pc_bcs_202_Pc_brkpedenableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pc_bcs_202_Pc_brkpedenableType_descriptor(), value);
}
inline bool Pc_bcs_202_Pc_brkpedenableType_Parse(
    const ::std::string& name, Pc_bcs_202_Pc_brkpedenableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pc_bcs_202_Pc_brkpedenableType>(
    Pc_bcs_202_Pc_brkpedenableType_descriptor(), name, value);
}
enum Pc_vcu_205_Pc_accpedenableType {
  Pc_vcu_205_Pc_accpedenableType_PC_ACCPEDENABLE_DISABLE = 0,
  Pc_vcu_205_Pc_accpedenableType_PC_ACCPEDENABLE_ENABLE = 1
};
bool Pc_vcu_205_Pc_accpedenableType_IsValid(int value);
const Pc_vcu_205_Pc_accpedenableType Pc_vcu_205_Pc_accpedenableType_Pc_accpedenableType_MIN = Pc_vcu_205_Pc_accpedenableType_PC_ACCPEDENABLE_DISABLE;
const Pc_vcu_205_Pc_accpedenableType Pc_vcu_205_Pc_accpedenableType_Pc_accpedenableType_MAX = Pc_vcu_205_Pc_accpedenableType_PC_ACCPEDENABLE_ENABLE;
const int Pc_vcu_205_Pc_accpedenableType_Pc_accpedenableType_ARRAYSIZE = Pc_vcu_205_Pc_accpedenableType_Pc_accpedenableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pc_vcu_205_Pc_accpedenableType_descriptor();
inline const ::std::string& Pc_vcu_205_Pc_accpedenableType_Name(Pc_vcu_205_Pc_accpedenableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pc_vcu_205_Pc_accpedenableType_descriptor(), value);
}
inline bool Pc_vcu_205_Pc_accpedenableType_Parse(
    const ::std::string& name, Pc_vcu_205_Pc_accpedenableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pc_vcu_205_Pc_accpedenableType>(
    Pc_vcu_205_Pc_accpedenableType_descriptor(), name, value);
}
enum Pc_vcu_205_Pc_torqenableType {
  Pc_vcu_205_Pc_torqenableType_PC_TORQENABLE_DISABLE = 0,
  Pc_vcu_205_Pc_torqenableType_PC_TORQENABLE_ENABLE = 1
};
bool Pc_vcu_205_Pc_torqenableType_IsValid(int value);
const Pc_vcu_205_Pc_torqenableType Pc_vcu_205_Pc_torqenableType_Pc_torqenableType_MIN = Pc_vcu_205_Pc_torqenableType_PC_TORQENABLE_DISABLE;
const Pc_vcu_205_Pc_torqenableType Pc_vcu_205_Pc_torqenableType_Pc_torqenableType_MAX = Pc_vcu_205_Pc_torqenableType_PC_TORQENABLE_ENABLE;
const int Pc_vcu_205_Pc_torqenableType_Pc_torqenableType_ARRAYSIZE = Pc_vcu_205_Pc_torqenableType_Pc_torqenableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pc_vcu_205_Pc_torqenableType_descriptor();
inline const ::std::string& Pc_vcu_205_Pc_torqenableType_Name(Pc_vcu_205_Pc_torqenableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pc_vcu_205_Pc_torqenableType_descriptor(), value);
}
inline bool Pc_vcu_205_Pc_torqenableType_Parse(
    const ::std::string& name, Pc_vcu_205_Pc_torqenableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pc_vcu_205_Pc_torqenableType>(
    Pc_vcu_205_Pc_torqenableType_descriptor(), name, value);
}
enum Pc_vcu_205_Pc_gearreqType {
  Pc_vcu_205_Pc_gearreqType_PC_GEARREQ_INVALID = 0,
  Pc_vcu_205_Pc_gearreqType_PC_GEARREQ_DRIVE = 1,
  Pc_vcu_205_Pc_gearreqType_PC_GEARREQ_NEUTRAL = 2,
  Pc_vcu_205_Pc_gearreqType_PC_GEARREQ_REVERSE = 3,
  Pc_vcu_205_Pc_gearreqType_PC_GEARREQ_PARK = 4
};
bool Pc_vcu_205_Pc_gearreqType_IsValid(int value);
const Pc_vcu_205_Pc_gearreqType Pc_vcu_205_Pc_gearreqType_Pc_gearreqType_MIN = Pc_vcu_205_Pc_gearreqType_PC_GEARREQ_INVALID;
const Pc_vcu_205_Pc_gearreqType Pc_vcu_205_Pc_gearreqType_Pc_gearreqType_MAX = Pc_vcu_205_Pc_gearreqType_PC_GEARREQ_PARK;
const int Pc_vcu_205_Pc_gearreqType_Pc_gearreqType_ARRAYSIZE = Pc_vcu_205_Pc_gearreqType_Pc_gearreqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pc_vcu_205_Pc_gearreqType_descriptor();
inline const ::std::string& Pc_vcu_205_Pc_gearreqType_Name(Pc_vcu_205_Pc_gearreqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pc_vcu_205_Pc_gearreqType_descriptor(), value);
}
inline bool Pc_vcu_205_Pc_gearreqType_Parse(
    const ::std::string& name, Pc_vcu_205_Pc_gearreqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pc_vcu_205_Pc_gearreqType>(
    Pc_vcu_205_Pc_gearreqType_descriptor(), name, value);
}
enum Pc_vcu_205_Pc_gearenableType {
  Pc_vcu_205_Pc_gearenableType_PC_GEARENABLE_DISABLE = 0,
  Pc_vcu_205_Pc_gearenableType_PC_GEARENABLE_ENABLE = 1
};
bool Pc_vcu_205_Pc_gearenableType_IsValid(int value);
const Pc_vcu_205_Pc_gearenableType Pc_vcu_205_Pc_gearenableType_Pc_gearenableType_MIN = Pc_vcu_205_Pc_gearenableType_PC_GEARENABLE_DISABLE;
const Pc_vcu_205_Pc_gearenableType Pc_vcu_205_Pc_gearenableType_Pc_gearenableType_MAX = Pc_vcu_205_Pc_gearenableType_PC_GEARENABLE_ENABLE;
const int Pc_vcu_205_Pc_gearenableType_Pc_gearenableType_ARRAYSIZE = Pc_vcu_205_Pc_gearenableType_Pc_gearenableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pc_vcu_205_Pc_gearenableType_descriptor();
inline const ::std::string& Pc_vcu_205_Pc_gearenableType_Name(Pc_vcu_205_Pc_gearenableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pc_vcu_205_Pc_gearenableType_descriptor(), value);
}
inline bool Pc_vcu_205_Pc_gearenableType_Parse(
    const ::std::string& name, Pc_vcu_205_Pc_gearenableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pc_vcu_205_Pc_gearenableType>(
    Pc_vcu_205_Pc_gearenableType_descriptor(), name, value);
}
enum Pc_eps_204_Pc_steerenableType {
  Pc_eps_204_Pc_steerenableType_PC_STEERENABLE_DISABLE = 0,
  Pc_eps_204_Pc_steerenableType_PC_STEERENABLE_ENABLE = 1
};
bool Pc_eps_204_Pc_steerenableType_IsValid(int value);
const Pc_eps_204_Pc_steerenableType Pc_eps_204_Pc_steerenableType_Pc_steerenableType_MIN = Pc_eps_204_Pc_steerenableType_PC_STEERENABLE_DISABLE;
const Pc_eps_204_Pc_steerenableType Pc_eps_204_Pc_steerenableType_Pc_steerenableType_MAX = Pc_eps_204_Pc_steerenableType_PC_STEERENABLE_ENABLE;
const int Pc_eps_204_Pc_steerenableType_Pc_steerenableType_ARRAYSIZE = Pc_eps_204_Pc_steerenableType_Pc_steerenableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Pc_eps_204_Pc_steerenableType_descriptor();
inline const ::std::string& Pc_eps_204_Pc_steerenableType_Name(Pc_eps_204_Pc_steerenableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Pc_eps_204_Pc_steerenableType_descriptor(), value);
}
inline bool Pc_eps_204_Pc_steerenableType_Parse(
    const ::std::string& name, Pc_eps_204_Pc_steerenableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Pc_eps_204_Pc_steerenableType>(
    Pc_eps_204_Pc_steerenableType_descriptor(), name, value);
}
enum Scu_1_301_Scu_stopbutstType {
  Scu_1_301_Scu_stopbutstType_SCU_STOPBUTST_UNPRESSED = 0,
  Scu_1_301_Scu_stopbutstType_SCU_STOPBUTST_PRESSED = 1
};
bool Scu_1_301_Scu_stopbutstType_IsValid(int value);
const Scu_1_301_Scu_stopbutstType Scu_1_301_Scu_stopbutstType_Scu_stopbutstType_MIN = Scu_1_301_Scu_stopbutstType_SCU_STOPBUTST_UNPRESSED;
const Scu_1_301_Scu_stopbutstType Scu_1_301_Scu_stopbutstType_Scu_stopbutstType_MAX = Scu_1_301_Scu_stopbutstType_SCU_STOPBUTST_PRESSED;
const int Scu_1_301_Scu_stopbutstType_Scu_stopbutstType_ARRAYSIZE = Scu_1_301_Scu_stopbutstType_Scu_stopbutstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_1_301_Scu_stopbutstType_descriptor();
inline const ::std::string& Scu_1_301_Scu_stopbutstType_Name(Scu_1_301_Scu_stopbutstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_1_301_Scu_stopbutstType_descriptor(), value);
}
inline bool Scu_1_301_Scu_stopbutstType_Parse(
    const ::std::string& name, Scu_1_301_Scu_stopbutstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_1_301_Scu_stopbutstType>(
    Scu_1_301_Scu_stopbutstType_descriptor(), name, value);
}
enum Scu_1_301_Scu_drvmodeType {
  Scu_1_301_Scu_drvmodeType_SCU_DRVMODE_INVALID = 0,
  Scu_1_301_Scu_drvmodeType_SCU_DRVMODE_MANUAL = 1,
  Scu_1_301_Scu_drvmodeType_SCU_DRVMODE_INTERRUPT = 2,
  Scu_1_301_Scu_drvmodeType_SCU_DRVMODE_AUTO = 3
};
bool Scu_1_301_Scu_drvmodeType_IsValid(int value);
const Scu_1_301_Scu_drvmodeType Scu_1_301_Scu_drvmodeType_Scu_drvmodeType_MIN = Scu_1_301_Scu_drvmodeType_SCU_DRVMODE_INVALID;
const Scu_1_301_Scu_drvmodeType Scu_1_301_Scu_drvmodeType_Scu_drvmodeType_MAX = Scu_1_301_Scu_drvmodeType_SCU_DRVMODE_AUTO;
const int Scu_1_301_Scu_drvmodeType_Scu_drvmodeType_ARRAYSIZE = Scu_1_301_Scu_drvmodeType_Scu_drvmodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_1_301_Scu_drvmodeType_descriptor();
inline const ::std::string& Scu_1_301_Scu_drvmodeType_Name(Scu_1_301_Scu_drvmodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_1_301_Scu_drvmodeType_descriptor(), value);
}
inline bool Scu_1_301_Scu_drvmodeType_Parse(
    const ::std::string& name, Scu_1_301_Scu_drvmodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_1_301_Scu_drvmodeType>(
    Scu_1_301_Scu_drvmodeType_descriptor(), name, value);
}
enum Scu_1_301_Scu_faultstType {
  Scu_1_301_Scu_faultstType_SCU_FAULTST_NORMAL = 0,
  Scu_1_301_Scu_faultstType_SCU_FAULTST_FAULT = 1
};
bool Scu_1_301_Scu_faultstType_IsValid(int value);
const Scu_1_301_Scu_faultstType Scu_1_301_Scu_faultstType_Scu_faultstType_MIN = Scu_1_301_Scu_faultstType_SCU_FAULTST_NORMAL;
const Scu_1_301_Scu_faultstType Scu_1_301_Scu_faultstType_Scu_faultstType_MAX = Scu_1_301_Scu_faultstType_SCU_FAULTST_FAULT;
const int Scu_1_301_Scu_faultstType_Scu_faultstType_ARRAYSIZE = Scu_1_301_Scu_faultstType_Scu_faultstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_1_301_Scu_faultstType_descriptor();
inline const ::std::string& Scu_1_301_Scu_faultstType_Name(Scu_1_301_Scu_faultstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_1_301_Scu_faultstType_descriptor(), value);
}
inline bool Scu_1_301_Scu_faultstType_Parse(
    const ::std::string& name, Scu_1_301_Scu_faultstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_1_301_Scu_faultstType>(
    Scu_1_301_Scu_faultstType_descriptor(), name, value);
}
enum Scu_bcm_304_Bcm_vehreversestType {
  Scu_bcm_304_Bcm_vehreversestType_BCM_VEHREVERSEST_NORMAL = 0,
  Scu_bcm_304_Bcm_vehreversestType_BCM_VEHREVERSEST_REVERSE = 1
};
bool Scu_bcm_304_Bcm_vehreversestType_IsValid(int value);
const Scu_bcm_304_Bcm_vehreversestType Scu_bcm_304_Bcm_vehreversestType_Bcm_vehreversestType_MIN = Scu_bcm_304_Bcm_vehreversestType_BCM_VEHREVERSEST_NORMAL;
const Scu_bcm_304_Bcm_vehreversestType Scu_bcm_304_Bcm_vehreversestType_Bcm_vehreversestType_MAX = Scu_bcm_304_Bcm_vehreversestType_BCM_VEHREVERSEST_REVERSE;
const int Scu_bcm_304_Bcm_vehreversestType_Bcm_vehreversestType_ARRAYSIZE = Scu_bcm_304_Bcm_vehreversestType_Bcm_vehreversestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcm_304_Bcm_vehreversestType_descriptor();
inline const ::std::string& Scu_bcm_304_Bcm_vehreversestType_Name(Scu_bcm_304_Bcm_vehreversestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcm_304_Bcm_vehreversestType_descriptor(), value);
}
inline bool Scu_bcm_304_Bcm_vehreversestType_Parse(
    const ::std::string& name, Scu_bcm_304_Bcm_vehreversestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcm_304_Bcm_vehreversestType>(
    Scu_bcm_304_Bcm_vehreversestType_descriptor(), name, value);
}
enum Scu_bcm_304_Bcm_rightturnlampstType {
  Scu_bcm_304_Bcm_rightturnlampstType_BCM_RIGHTTURNLAMPST_INACTIVE = 0,
  Scu_bcm_304_Bcm_rightturnlampstType_BCM_RIGHTTURNLAMPST_ACTIVE = 1
};
bool Scu_bcm_304_Bcm_rightturnlampstType_IsValid(int value);
const Scu_bcm_304_Bcm_rightturnlampstType Scu_bcm_304_Bcm_rightturnlampstType_Bcm_rightturnlampstType_MIN = Scu_bcm_304_Bcm_rightturnlampstType_BCM_RIGHTTURNLAMPST_INACTIVE;
const Scu_bcm_304_Bcm_rightturnlampstType Scu_bcm_304_Bcm_rightturnlampstType_Bcm_rightturnlampstType_MAX = Scu_bcm_304_Bcm_rightturnlampstType_BCM_RIGHTTURNLAMPST_ACTIVE;
const int Scu_bcm_304_Bcm_rightturnlampstType_Bcm_rightturnlampstType_ARRAYSIZE = Scu_bcm_304_Bcm_rightturnlampstType_Bcm_rightturnlampstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcm_304_Bcm_rightturnlampstType_descriptor();
inline const ::std::string& Scu_bcm_304_Bcm_rightturnlampstType_Name(Scu_bcm_304_Bcm_rightturnlampstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcm_304_Bcm_rightturnlampstType_descriptor(), value);
}
inline bool Scu_bcm_304_Bcm_rightturnlampstType_Parse(
    const ::std::string& name, Scu_bcm_304_Bcm_rightturnlampstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcm_304_Bcm_rightturnlampstType>(
    Scu_bcm_304_Bcm_rightturnlampstType_descriptor(), name, value);
}
enum Scu_bcm_304_Bcm_rearfoglampstType {
  Scu_bcm_304_Bcm_rearfoglampstType_BCM_REARFOGLAMPST_INACTIVE = 0,
  Scu_bcm_304_Bcm_rearfoglampstType_BCM_REARFOGLAMPST_ACTIVE = 1
};
bool Scu_bcm_304_Bcm_rearfoglampstType_IsValid(int value);
const Scu_bcm_304_Bcm_rearfoglampstType Scu_bcm_304_Bcm_rearfoglampstType_Bcm_rearfoglampstType_MIN = Scu_bcm_304_Bcm_rearfoglampstType_BCM_REARFOGLAMPST_INACTIVE;
const Scu_bcm_304_Bcm_rearfoglampstType Scu_bcm_304_Bcm_rearfoglampstType_Bcm_rearfoglampstType_MAX = Scu_bcm_304_Bcm_rearfoglampstType_BCM_REARFOGLAMPST_ACTIVE;
const int Scu_bcm_304_Bcm_rearfoglampstType_Bcm_rearfoglampstType_ARRAYSIZE = Scu_bcm_304_Bcm_rearfoglampstType_Bcm_rearfoglampstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcm_304_Bcm_rearfoglampstType_descriptor();
inline const ::std::string& Scu_bcm_304_Bcm_rearfoglampstType_Name(Scu_bcm_304_Bcm_rearfoglampstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcm_304_Bcm_rearfoglampstType_descriptor(), value);
}
inline bool Scu_bcm_304_Bcm_rearfoglampstType_Parse(
    const ::std::string& name, Scu_bcm_304_Bcm_rearfoglampstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcm_304_Bcm_rearfoglampstType>(
    Scu_bcm_304_Bcm_rearfoglampstType_descriptor(), name, value);
}
enum Scu_bcm_304_Bcm_parkinglampstType {
  Scu_bcm_304_Bcm_parkinglampstType_BCM_PARKINGLAMPST_INACTIVE = 0,
  Scu_bcm_304_Bcm_parkinglampstType_BCM_PARKINGLAMPST_ACTIVE = 1
};
bool Scu_bcm_304_Bcm_parkinglampstType_IsValid(int value);
const Scu_bcm_304_Bcm_parkinglampstType Scu_bcm_304_Bcm_parkinglampstType_Bcm_parkinglampstType_MIN = Scu_bcm_304_Bcm_parkinglampstType_BCM_PARKINGLAMPST_INACTIVE;
const Scu_bcm_304_Bcm_parkinglampstType Scu_bcm_304_Bcm_parkinglampstType_Bcm_parkinglampstType_MAX = Scu_bcm_304_Bcm_parkinglampstType_BCM_PARKINGLAMPST_ACTIVE;
const int Scu_bcm_304_Bcm_parkinglampstType_Bcm_parkinglampstType_ARRAYSIZE = Scu_bcm_304_Bcm_parkinglampstType_Bcm_parkinglampstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcm_304_Bcm_parkinglampstType_descriptor();
inline const ::std::string& Scu_bcm_304_Bcm_parkinglampstType_Name(Scu_bcm_304_Bcm_parkinglampstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcm_304_Bcm_parkinglampstType_descriptor(), value);
}
inline bool Scu_bcm_304_Bcm_parkinglampstType_Parse(
    const ::std::string& name, Scu_bcm_304_Bcm_parkinglampstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcm_304_Bcm_parkinglampstType>(
    Scu_bcm_304_Bcm_parkinglampstType_descriptor(), name, value);
}
enum Scu_bcm_304_Bcm_lowbeamstType {
  Scu_bcm_304_Bcm_lowbeamstType_BCM_LOWBEAMST_INACTIVE = 0,
  Scu_bcm_304_Bcm_lowbeamstType_BCM_LOWBEAMST_ACTIVE = 1
};
bool Scu_bcm_304_Bcm_lowbeamstType_IsValid(int value);
const Scu_bcm_304_Bcm_lowbeamstType Scu_bcm_304_Bcm_lowbeamstType_Bcm_lowbeamstType_MIN = Scu_bcm_304_Bcm_lowbeamstType_BCM_LOWBEAMST_INACTIVE;
const Scu_bcm_304_Bcm_lowbeamstType Scu_bcm_304_Bcm_lowbeamstType_Bcm_lowbeamstType_MAX = Scu_bcm_304_Bcm_lowbeamstType_BCM_LOWBEAMST_ACTIVE;
const int Scu_bcm_304_Bcm_lowbeamstType_Bcm_lowbeamstType_ARRAYSIZE = Scu_bcm_304_Bcm_lowbeamstType_Bcm_lowbeamstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcm_304_Bcm_lowbeamstType_descriptor();
inline const ::std::string& Scu_bcm_304_Bcm_lowbeamstType_Name(Scu_bcm_304_Bcm_lowbeamstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcm_304_Bcm_lowbeamstType_descriptor(), value);
}
inline bool Scu_bcm_304_Bcm_lowbeamstType_Parse(
    const ::std::string& name, Scu_bcm_304_Bcm_lowbeamstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcm_304_Bcm_lowbeamstType>(
    Scu_bcm_304_Bcm_lowbeamstType_descriptor(), name, value);
}
enum Scu_bcm_304_Bcm_leftturnlampstType {
  Scu_bcm_304_Bcm_leftturnlampstType_BCM_LEFTTURNLAMPST_INACTIVE = 0,
  Scu_bcm_304_Bcm_leftturnlampstType_BCM_LEFTTURNLAMPST_ACTIVE = 1
};
bool Scu_bcm_304_Bcm_leftturnlampstType_IsValid(int value);
const Scu_bcm_304_Bcm_leftturnlampstType Scu_bcm_304_Bcm_leftturnlampstType_Bcm_leftturnlampstType_MIN = Scu_bcm_304_Bcm_leftturnlampstType_BCM_LEFTTURNLAMPST_INACTIVE;
const Scu_bcm_304_Bcm_leftturnlampstType Scu_bcm_304_Bcm_leftturnlampstType_Bcm_leftturnlampstType_MAX = Scu_bcm_304_Bcm_leftturnlampstType_BCM_LEFTTURNLAMPST_ACTIVE;
const int Scu_bcm_304_Bcm_leftturnlampstType_Bcm_leftturnlampstType_ARRAYSIZE = Scu_bcm_304_Bcm_leftturnlampstType_Bcm_leftturnlampstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcm_304_Bcm_leftturnlampstType_descriptor();
inline const ::std::string& Scu_bcm_304_Bcm_leftturnlampstType_Name(Scu_bcm_304_Bcm_leftturnlampstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcm_304_Bcm_leftturnlampstType_descriptor(), value);
}
inline bool Scu_bcm_304_Bcm_leftturnlampstType_Parse(
    const ::std::string& name, Scu_bcm_304_Bcm_leftturnlampstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcm_304_Bcm_leftturnlampstType>(
    Scu_bcm_304_Bcm_leftturnlampstType_descriptor(), name, value);
}
enum Scu_bcm_304_Bcm_keystType {
  Scu_bcm_304_Bcm_keystType_BCM_KEYST_OFF = 0,
  Scu_bcm_304_Bcm_keystType_BCM_KEYST_ACC = 1,
  Scu_bcm_304_Bcm_keystType_BCM_KEYST_ON = 2,
  Scu_bcm_304_Bcm_keystType_BCM_KEYST_CRANK = 3
};
bool Scu_bcm_304_Bcm_keystType_IsValid(int value);
const Scu_bcm_304_Bcm_keystType Scu_bcm_304_Bcm_keystType_Bcm_keystType_MIN = Scu_bcm_304_Bcm_keystType_BCM_KEYST_OFF;
const Scu_bcm_304_Bcm_keystType Scu_bcm_304_Bcm_keystType_Bcm_keystType_MAX = Scu_bcm_304_Bcm_keystType_BCM_KEYST_CRANK;
const int Scu_bcm_304_Bcm_keystType_Bcm_keystType_ARRAYSIZE = Scu_bcm_304_Bcm_keystType_Bcm_keystType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcm_304_Bcm_keystType_descriptor();
inline const ::std::string& Scu_bcm_304_Bcm_keystType_Name(Scu_bcm_304_Bcm_keystType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcm_304_Bcm_keystType_descriptor(), value);
}
inline bool Scu_bcm_304_Bcm_keystType_Parse(
    const ::std::string& name, Scu_bcm_304_Bcm_keystType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcm_304_Bcm_keystType>(
    Scu_bcm_304_Bcm_keystType_descriptor(), name, value);
}
enum Scu_bcm_304_Bcm_hornstType {
  Scu_bcm_304_Bcm_hornstType_BCM_HORNST_INACTIVE = 0,
  Scu_bcm_304_Bcm_hornstType_BCM_HORNST_ACTIVE = 1
};
bool Scu_bcm_304_Bcm_hornstType_IsValid(int value);
const Scu_bcm_304_Bcm_hornstType Scu_bcm_304_Bcm_hornstType_Bcm_hornstType_MIN = Scu_bcm_304_Bcm_hornstType_BCM_HORNST_INACTIVE;
const Scu_bcm_304_Bcm_hornstType Scu_bcm_304_Bcm_hornstType_Bcm_hornstType_MAX = Scu_bcm_304_Bcm_hornstType_BCM_HORNST_ACTIVE;
const int Scu_bcm_304_Bcm_hornstType_Bcm_hornstType_ARRAYSIZE = Scu_bcm_304_Bcm_hornstType_Bcm_hornstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcm_304_Bcm_hornstType_descriptor();
inline const ::std::string& Scu_bcm_304_Bcm_hornstType_Name(Scu_bcm_304_Bcm_hornstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcm_304_Bcm_hornstType_descriptor(), value);
}
inline bool Scu_bcm_304_Bcm_hornstType_Parse(
    const ::std::string& name, Scu_bcm_304_Bcm_hornstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcm_304_Bcm_hornstType>(
    Scu_bcm_304_Bcm_hornstType_descriptor(), name, value);
}
enum Scu_bcm_304_Bcm_highbeamstType {
  Scu_bcm_304_Bcm_highbeamstType_BCM_HIGHBEAMST_INACTIVE = 0,
  Scu_bcm_304_Bcm_highbeamstType_BCM_HIGHBEAMST_ACTIVE = 1
};
bool Scu_bcm_304_Bcm_highbeamstType_IsValid(int value);
const Scu_bcm_304_Bcm_highbeamstType Scu_bcm_304_Bcm_highbeamstType_Bcm_highbeamstType_MIN = Scu_bcm_304_Bcm_highbeamstType_BCM_HIGHBEAMST_INACTIVE;
const Scu_bcm_304_Bcm_highbeamstType Scu_bcm_304_Bcm_highbeamstType_Bcm_highbeamstType_MAX = Scu_bcm_304_Bcm_highbeamstType_BCM_HIGHBEAMST_ACTIVE;
const int Scu_bcm_304_Bcm_highbeamstType_Bcm_highbeamstType_ARRAYSIZE = Scu_bcm_304_Bcm_highbeamstType_Bcm_highbeamstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcm_304_Bcm_highbeamstType_descriptor();
inline const ::std::string& Scu_bcm_304_Bcm_highbeamstType_Name(Scu_bcm_304_Bcm_highbeamstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcm_304_Bcm_highbeamstType_descriptor(), value);
}
inline bool Scu_bcm_304_Bcm_highbeamstType_Parse(
    const ::std::string& name, Scu_bcm_304_Bcm_highbeamstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcm_304_Bcm_highbeamstType>(
    Scu_bcm_304_Bcm_highbeamstType_descriptor(), name, value);
}
enum Scu_bcm_304_Bcm_hazardlampstType {
  Scu_bcm_304_Bcm_hazardlampstType_BCM_HAZARDLAMPST_INACTIVE = 0,
  Scu_bcm_304_Bcm_hazardlampstType_BCM_HAZARDLAMPST_ACTIVE = 1
};
bool Scu_bcm_304_Bcm_hazardlampstType_IsValid(int value);
const Scu_bcm_304_Bcm_hazardlampstType Scu_bcm_304_Bcm_hazardlampstType_Bcm_hazardlampstType_MIN = Scu_bcm_304_Bcm_hazardlampstType_BCM_HAZARDLAMPST_INACTIVE;
const Scu_bcm_304_Bcm_hazardlampstType Scu_bcm_304_Bcm_hazardlampstType_Bcm_hazardlampstType_MAX = Scu_bcm_304_Bcm_hazardlampstType_BCM_HAZARDLAMPST_ACTIVE;
const int Scu_bcm_304_Bcm_hazardlampstType_Bcm_hazardlampstType_ARRAYSIZE = Scu_bcm_304_Bcm_hazardlampstType_Bcm_hazardlampstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcm_304_Bcm_hazardlampstType_descriptor();
inline const ::std::string& Scu_bcm_304_Bcm_hazardlampstType_Name(Scu_bcm_304_Bcm_hazardlampstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcm_304_Bcm_hazardlampstType_descriptor(), value);
}
inline bool Scu_bcm_304_Bcm_hazardlampstType_Parse(
    const ::std::string& name, Scu_bcm_304_Bcm_hazardlampstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcm_304_Bcm_hazardlampstType>(
    Scu_bcm_304_Bcm_hazardlampstType_descriptor(), name, value);
}
enum Scu_bcm_304_Bcm_frontfoglampstType {
  Scu_bcm_304_Bcm_frontfoglampstType_BCM_FRONTFOGLAMPST_INACTIVE = 0,
  Scu_bcm_304_Bcm_frontfoglampstType_BCM_FRONTFOGLAMPST_ACTIVE = 1
};
bool Scu_bcm_304_Bcm_frontfoglampstType_IsValid(int value);
const Scu_bcm_304_Bcm_frontfoglampstType Scu_bcm_304_Bcm_frontfoglampstType_Bcm_frontfoglampstType_MIN = Scu_bcm_304_Bcm_frontfoglampstType_BCM_FRONTFOGLAMPST_INACTIVE;
const Scu_bcm_304_Bcm_frontfoglampstType Scu_bcm_304_Bcm_frontfoglampstType_Bcm_frontfoglampstType_MAX = Scu_bcm_304_Bcm_frontfoglampstType_BCM_FRONTFOGLAMPST_ACTIVE;
const int Scu_bcm_304_Bcm_frontfoglampstType_Bcm_frontfoglampstType_ARRAYSIZE = Scu_bcm_304_Bcm_frontfoglampstType_Bcm_frontfoglampstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcm_304_Bcm_frontfoglampstType_descriptor();
inline const ::std::string& Scu_bcm_304_Bcm_frontfoglampstType_Name(Scu_bcm_304_Bcm_frontfoglampstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcm_304_Bcm_frontfoglampstType_descriptor(), value);
}
inline bool Scu_bcm_304_Bcm_frontfoglampstType_Parse(
    const ::std::string& name, Scu_bcm_304_Bcm_frontfoglampstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcm_304_Bcm_frontfoglampstType>(
    Scu_bcm_304_Bcm_frontfoglampstType_descriptor(), name, value);
}
enum Scu_bcm_304_Bcm_brakelightswitchstType {
  Scu_bcm_304_Bcm_brakelightswitchstType_BCM_BRAKELIGHTSWITCHST_INACTIVE = 0,
  Scu_bcm_304_Bcm_brakelightswitchstType_BCM_BRAKELIGHTSWITCHST_ACTIVE = 1
};
bool Scu_bcm_304_Bcm_brakelightswitchstType_IsValid(int value);
const Scu_bcm_304_Bcm_brakelightswitchstType Scu_bcm_304_Bcm_brakelightswitchstType_Bcm_brakelightswitchstType_MIN = Scu_bcm_304_Bcm_brakelightswitchstType_BCM_BRAKELIGHTSWITCHST_INACTIVE;
const Scu_bcm_304_Bcm_brakelightswitchstType Scu_bcm_304_Bcm_brakelightswitchstType_Bcm_brakelightswitchstType_MAX = Scu_bcm_304_Bcm_brakelightswitchstType_BCM_BRAKELIGHTSWITCHST_ACTIVE;
const int Scu_bcm_304_Bcm_brakelightswitchstType_Bcm_brakelightswitchstType_ARRAYSIZE = Scu_bcm_304_Bcm_brakelightswitchstType_Bcm_brakelightswitchstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcm_304_Bcm_brakelightswitchstType_descriptor();
inline const ::std::string& Scu_bcm_304_Bcm_brakelightswitchstType_Name(Scu_bcm_304_Bcm_brakelightswitchstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcm_304_Bcm_brakelightswitchstType_descriptor(), value);
}
inline bool Scu_bcm_304_Bcm_brakelightswitchstType_Parse(
    const ::std::string& name, Scu_bcm_304_Bcm_brakelightswitchstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcm_304_Bcm_brakelightswitchstType>(
    Scu_bcm_304_Bcm_brakelightswitchstType_descriptor(), name, value);
}
enum Scu_bcs_1_306_Bcs_aebavailableType {
  Scu_bcs_1_306_Bcs_aebavailableType_BCS_AEBAVAILABLE_UNAVAILABLE = 0,
  Scu_bcs_1_306_Bcs_aebavailableType_BCS_AEBAVAILABLE_AVAILABLE = 1
};
bool Scu_bcs_1_306_Bcs_aebavailableType_IsValid(int value);
const Scu_bcs_1_306_Bcs_aebavailableType Scu_bcs_1_306_Bcs_aebavailableType_Bcs_aebavailableType_MIN = Scu_bcs_1_306_Bcs_aebavailableType_BCS_AEBAVAILABLE_UNAVAILABLE;
const Scu_bcs_1_306_Bcs_aebavailableType Scu_bcs_1_306_Bcs_aebavailableType_Bcs_aebavailableType_MAX = Scu_bcs_1_306_Bcs_aebavailableType_BCS_AEBAVAILABLE_AVAILABLE;
const int Scu_bcs_1_306_Bcs_aebavailableType_Bcs_aebavailableType_ARRAYSIZE = Scu_bcs_1_306_Bcs_aebavailableType_Bcs_aebavailableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_1_306_Bcs_aebavailableType_descriptor();
inline const ::std::string& Scu_bcs_1_306_Bcs_aebavailableType_Name(Scu_bcs_1_306_Bcs_aebavailableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_1_306_Bcs_aebavailableType_descriptor(), value);
}
inline bool Scu_bcs_1_306_Bcs_aebavailableType_Parse(
    const ::std::string& name, Scu_bcs_1_306_Bcs_aebavailableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_1_306_Bcs_aebavailableType>(
    Scu_bcs_1_306_Bcs_aebavailableType_descriptor(), name, value);
}
enum Scu_bcs_1_306_Bcs_cddavailableType {
  Scu_bcs_1_306_Bcs_cddavailableType_BCS_CDDAVAILABLE_UNAVAILABLE = 0,
  Scu_bcs_1_306_Bcs_cddavailableType_BCS_CDDAVAILABLE_AVAILABLE = 1
};
bool Scu_bcs_1_306_Bcs_cddavailableType_IsValid(int value);
const Scu_bcs_1_306_Bcs_cddavailableType Scu_bcs_1_306_Bcs_cddavailableType_Bcs_cddavailableType_MIN = Scu_bcs_1_306_Bcs_cddavailableType_BCS_CDDAVAILABLE_UNAVAILABLE;
const Scu_bcs_1_306_Bcs_cddavailableType Scu_bcs_1_306_Bcs_cddavailableType_Bcs_cddavailableType_MAX = Scu_bcs_1_306_Bcs_cddavailableType_BCS_CDDAVAILABLE_AVAILABLE;
const int Scu_bcs_1_306_Bcs_cddavailableType_Bcs_cddavailableType_ARRAYSIZE = Scu_bcs_1_306_Bcs_cddavailableType_Bcs_cddavailableType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_1_306_Bcs_cddavailableType_descriptor();
inline const ::std::string& Scu_bcs_1_306_Bcs_cddavailableType_Name(Scu_bcs_1_306_Bcs_cddavailableType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_1_306_Bcs_cddavailableType_descriptor(), value);
}
inline bool Scu_bcs_1_306_Bcs_cddavailableType_Parse(
    const ::std::string& name, Scu_bcs_1_306_Bcs_cddavailableType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_1_306_Bcs_cddavailableType>(
    Scu_bcs_1_306_Bcs_cddavailableType_descriptor(), name, value);
}
enum Scu_bcs_1_306_Bcs_intidxType {
  Scu_bcs_1_306_Bcs_intidxType_BCS_INTIDX_NOINT = 0,
  Scu_bcs_1_306_Bcs_intidxType_BCS_INTIDX_OVERFLOW = 1,
  Scu_bcs_1_306_Bcs_intidxType_BCS_INTIDX_TIMEOUT = 2,
  Scu_bcs_1_306_Bcs_intidxType_BCS_INTIDX_ACCPEDINT = 3,
  Scu_bcs_1_306_Bcs_intidxType_BCS_INTIDX_BRKPEDINT = 4,
  Scu_bcs_1_306_Bcs_intidxType_BCS_INTIDX_GEARINT = 5
};
bool Scu_bcs_1_306_Bcs_intidxType_IsValid(int value);
const Scu_bcs_1_306_Bcs_intidxType Scu_bcs_1_306_Bcs_intidxType_Bcs_intidxType_MIN = Scu_bcs_1_306_Bcs_intidxType_BCS_INTIDX_NOINT;
const Scu_bcs_1_306_Bcs_intidxType Scu_bcs_1_306_Bcs_intidxType_Bcs_intidxType_MAX = Scu_bcs_1_306_Bcs_intidxType_BCS_INTIDX_GEARINT;
const int Scu_bcs_1_306_Bcs_intidxType_Bcs_intidxType_ARRAYSIZE = Scu_bcs_1_306_Bcs_intidxType_Bcs_intidxType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_1_306_Bcs_intidxType_descriptor();
inline const ::std::string& Scu_bcs_1_306_Bcs_intidxType_Name(Scu_bcs_1_306_Bcs_intidxType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_1_306_Bcs_intidxType_descriptor(), value);
}
inline bool Scu_bcs_1_306_Bcs_intidxType_Parse(
    const ::std::string& name, Scu_bcs_1_306_Bcs_intidxType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_1_306_Bcs_intidxType>(
    Scu_bcs_1_306_Bcs_intidxType_descriptor(), name, value);
}
enum Scu_bcs_1_306_Bcs_vdcfaultstType {
  Scu_bcs_1_306_Bcs_vdcfaultstType_BCS_VDCFAULTST_NORMAL = 0,
  Scu_bcs_1_306_Bcs_vdcfaultstType_BCS_VDCFAULTST_FAULT = 1
};
bool Scu_bcs_1_306_Bcs_vdcfaultstType_IsValid(int value);
const Scu_bcs_1_306_Bcs_vdcfaultstType Scu_bcs_1_306_Bcs_vdcfaultstType_Bcs_vdcfaultstType_MIN = Scu_bcs_1_306_Bcs_vdcfaultstType_BCS_VDCFAULTST_NORMAL;
const Scu_bcs_1_306_Bcs_vdcfaultstType Scu_bcs_1_306_Bcs_vdcfaultstType_Bcs_vdcfaultstType_MAX = Scu_bcs_1_306_Bcs_vdcfaultstType_BCS_VDCFAULTST_FAULT;
const int Scu_bcs_1_306_Bcs_vdcfaultstType_Bcs_vdcfaultstType_ARRAYSIZE = Scu_bcs_1_306_Bcs_vdcfaultstType_Bcs_vdcfaultstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_1_306_Bcs_vdcfaultstType_descriptor();
inline const ::std::string& Scu_bcs_1_306_Bcs_vdcfaultstType_Name(Scu_bcs_1_306_Bcs_vdcfaultstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_1_306_Bcs_vdcfaultstType_descriptor(), value);
}
inline bool Scu_bcs_1_306_Bcs_vdcfaultstType_Parse(
    const ::std::string& name, Scu_bcs_1_306_Bcs_vdcfaultstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_1_306_Bcs_vdcfaultstType>(
    Scu_bcs_1_306_Bcs_vdcfaultstType_descriptor(), name, value);
}
enum Scu_bcs_1_306_Bcs_vdcactivestType {
  Scu_bcs_1_306_Bcs_vdcactivestType_BCS_VDCACTIVEST_INACTIVE = 0,
  Scu_bcs_1_306_Bcs_vdcactivestType_BCS_VDCACTIVEST_ACTIVE = 1
};
bool Scu_bcs_1_306_Bcs_vdcactivestType_IsValid(int value);
const Scu_bcs_1_306_Bcs_vdcactivestType Scu_bcs_1_306_Bcs_vdcactivestType_Bcs_vdcactivestType_MIN = Scu_bcs_1_306_Bcs_vdcactivestType_BCS_VDCACTIVEST_INACTIVE;
const Scu_bcs_1_306_Bcs_vdcactivestType Scu_bcs_1_306_Bcs_vdcactivestType_Bcs_vdcactivestType_MAX = Scu_bcs_1_306_Bcs_vdcactivestType_BCS_VDCACTIVEST_ACTIVE;
const int Scu_bcs_1_306_Bcs_vdcactivestType_Bcs_vdcactivestType_ARRAYSIZE = Scu_bcs_1_306_Bcs_vdcactivestType_Bcs_vdcactivestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_1_306_Bcs_vdcactivestType_descriptor();
inline const ::std::string& Scu_bcs_1_306_Bcs_vdcactivestType_Name(Scu_bcs_1_306_Bcs_vdcactivestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_1_306_Bcs_vdcactivestType_descriptor(), value);
}
inline bool Scu_bcs_1_306_Bcs_vdcactivestType_Parse(
    const ::std::string& name, Scu_bcs_1_306_Bcs_vdcactivestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_1_306_Bcs_vdcactivestType>(
    Scu_bcs_1_306_Bcs_vdcactivestType_descriptor(), name, value);
}
enum Scu_bcs_1_306_Bcs_absfaultstType {
  Scu_bcs_1_306_Bcs_absfaultstType_BCS_ABSFAULTST_NORMAL = 0,
  Scu_bcs_1_306_Bcs_absfaultstType_BCS_ABSFAULTST_FAULT = 1
};
bool Scu_bcs_1_306_Bcs_absfaultstType_IsValid(int value);
const Scu_bcs_1_306_Bcs_absfaultstType Scu_bcs_1_306_Bcs_absfaultstType_Bcs_absfaultstType_MIN = Scu_bcs_1_306_Bcs_absfaultstType_BCS_ABSFAULTST_NORMAL;
const Scu_bcs_1_306_Bcs_absfaultstType Scu_bcs_1_306_Bcs_absfaultstType_Bcs_absfaultstType_MAX = Scu_bcs_1_306_Bcs_absfaultstType_BCS_ABSFAULTST_FAULT;
const int Scu_bcs_1_306_Bcs_absfaultstType_Bcs_absfaultstType_ARRAYSIZE = Scu_bcs_1_306_Bcs_absfaultstType_Bcs_absfaultstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_1_306_Bcs_absfaultstType_descriptor();
inline const ::std::string& Scu_bcs_1_306_Bcs_absfaultstType_Name(Scu_bcs_1_306_Bcs_absfaultstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_1_306_Bcs_absfaultstType_descriptor(), value);
}
inline bool Scu_bcs_1_306_Bcs_absfaultstType_Parse(
    const ::std::string& name, Scu_bcs_1_306_Bcs_absfaultstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_1_306_Bcs_absfaultstType>(
    Scu_bcs_1_306_Bcs_absfaultstType_descriptor(), name, value);
}
enum Scu_bcs_1_306_Bcs_absactivestType {
  Scu_bcs_1_306_Bcs_absactivestType_BCS_ABSACTIVEST_INACTIVE = 0,
  Scu_bcs_1_306_Bcs_absactivestType_BCS_ABSACTIVEST_ACTIVE = 1
};
bool Scu_bcs_1_306_Bcs_absactivestType_IsValid(int value);
const Scu_bcs_1_306_Bcs_absactivestType Scu_bcs_1_306_Bcs_absactivestType_Bcs_absactivestType_MIN = Scu_bcs_1_306_Bcs_absactivestType_BCS_ABSACTIVEST_INACTIVE;
const Scu_bcs_1_306_Bcs_absactivestType Scu_bcs_1_306_Bcs_absactivestType_Bcs_absactivestType_MAX = Scu_bcs_1_306_Bcs_absactivestType_BCS_ABSACTIVEST_ACTIVE;
const int Scu_bcs_1_306_Bcs_absactivestType_Bcs_absactivestType_ARRAYSIZE = Scu_bcs_1_306_Bcs_absactivestType_Bcs_absactivestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_1_306_Bcs_absactivestType_descriptor();
inline const ::std::string& Scu_bcs_1_306_Bcs_absactivestType_Name(Scu_bcs_1_306_Bcs_absactivestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_1_306_Bcs_absactivestType_descriptor(), value);
}
inline bool Scu_bcs_1_306_Bcs_absactivestType_Parse(
    const ::std::string& name, Scu_bcs_1_306_Bcs_absactivestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_1_306_Bcs_absactivestType>(
    Scu_bcs_1_306_Bcs_absactivestType_descriptor(), name, value);
}
enum Scu_bcs_1_306_Bcs_faultstType {
  Scu_bcs_1_306_Bcs_faultstType_BCS_FAULTST_NORMAL = 0,
  Scu_bcs_1_306_Bcs_faultstType_BCS_FAULTST_FAULT = 1
};
bool Scu_bcs_1_306_Bcs_faultstType_IsValid(int value);
const Scu_bcs_1_306_Bcs_faultstType Scu_bcs_1_306_Bcs_faultstType_Bcs_faultstType_MIN = Scu_bcs_1_306_Bcs_faultstType_BCS_FAULTST_NORMAL;
const Scu_bcs_1_306_Bcs_faultstType Scu_bcs_1_306_Bcs_faultstType_Bcs_faultstType_MAX = Scu_bcs_1_306_Bcs_faultstType_BCS_FAULTST_FAULT;
const int Scu_bcs_1_306_Bcs_faultstType_Bcs_faultstType_ARRAYSIZE = Scu_bcs_1_306_Bcs_faultstType_Bcs_faultstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_1_306_Bcs_faultstType_descriptor();
inline const ::std::string& Scu_bcs_1_306_Bcs_faultstType_Name(Scu_bcs_1_306_Bcs_faultstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_1_306_Bcs_faultstType_descriptor(), value);
}
inline bool Scu_bcs_1_306_Bcs_faultstType_Parse(
    const ::std::string& name, Scu_bcs_1_306_Bcs_faultstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_1_306_Bcs_faultstType>(
    Scu_bcs_1_306_Bcs_faultstType_descriptor(), name, value);
}
enum Scu_bcs_1_306_Bcs_drvmodeType {
  Scu_bcs_1_306_Bcs_drvmodeType_BCS_DRVMODE_INVALID = 0,
  Scu_bcs_1_306_Bcs_drvmodeType_BCS_DRVMODE_MANUAL = 1,
  Scu_bcs_1_306_Bcs_drvmodeType_BCS_DRVMODE_INTERRUPT = 2,
  Scu_bcs_1_306_Bcs_drvmodeType_BCS_DRVMODE_AUTO = 3
};
bool Scu_bcs_1_306_Bcs_drvmodeType_IsValid(int value);
const Scu_bcs_1_306_Bcs_drvmodeType Scu_bcs_1_306_Bcs_drvmodeType_Bcs_drvmodeType_MIN = Scu_bcs_1_306_Bcs_drvmodeType_BCS_DRVMODE_INVALID;
const Scu_bcs_1_306_Bcs_drvmodeType Scu_bcs_1_306_Bcs_drvmodeType_Bcs_drvmodeType_MAX = Scu_bcs_1_306_Bcs_drvmodeType_BCS_DRVMODE_AUTO;
const int Scu_bcs_1_306_Bcs_drvmodeType_Bcs_drvmodeType_ARRAYSIZE = Scu_bcs_1_306_Bcs_drvmodeType_Bcs_drvmodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_1_306_Bcs_drvmodeType_descriptor();
inline const ::std::string& Scu_bcs_1_306_Bcs_drvmodeType_Name(Scu_bcs_1_306_Bcs_drvmodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_1_306_Bcs_drvmodeType_descriptor(), value);
}
inline bool Scu_bcs_1_306_Bcs_drvmodeType_Parse(
    const ::std::string& name, Scu_bcs_1_306_Bcs_drvmodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_1_306_Bcs_drvmodeType>(
    Scu_bcs_1_306_Bcs_drvmodeType_descriptor(), name, value);
}
enum Scu_bcs_2_307_Bcs_vehspdvdType {
  Scu_bcs_2_307_Bcs_vehspdvdType_BCS_VEHSPDVD_INVALID = 0,
  Scu_bcs_2_307_Bcs_vehspdvdType_BCS_VEHSPDVD_VALID = 1
};
bool Scu_bcs_2_307_Bcs_vehspdvdType_IsValid(int value);
const Scu_bcs_2_307_Bcs_vehspdvdType Scu_bcs_2_307_Bcs_vehspdvdType_Bcs_vehspdvdType_MIN = Scu_bcs_2_307_Bcs_vehspdvdType_BCS_VEHSPDVD_INVALID;
const Scu_bcs_2_307_Bcs_vehspdvdType Scu_bcs_2_307_Bcs_vehspdvdType_Bcs_vehspdvdType_MAX = Scu_bcs_2_307_Bcs_vehspdvdType_BCS_VEHSPDVD_VALID;
const int Scu_bcs_2_307_Bcs_vehspdvdType_Bcs_vehspdvdType_ARRAYSIZE = Scu_bcs_2_307_Bcs_vehspdvdType_Bcs_vehspdvdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_bcs_2_307_Bcs_vehspdvdType_descriptor();
inline const ::std::string& Scu_bcs_2_307_Bcs_vehspdvdType_Name(Scu_bcs_2_307_Bcs_vehspdvdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_bcs_2_307_Bcs_vehspdvdType_descriptor(), value);
}
inline bool Scu_bcs_2_307_Bcs_vehspdvdType_Parse(
    const ::std::string& name, Scu_bcs_2_307_Bcs_vehspdvdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_bcs_2_307_Bcs_vehspdvdType>(
    Scu_bcs_2_307_Bcs_vehspdvdType_descriptor(), name, value);
}
enum Scu_epb_310_Epb_intidxType {
  Scu_epb_310_Epb_intidxType_EPB_INTIDX_NOINT = 0,
  Scu_epb_310_Epb_intidxType_EPB_INTIDX_OVERFLOW = 1,
  Scu_epb_310_Epb_intidxType_EPB_INTIDX_TIMEOUT = 2
};
bool Scu_epb_310_Epb_intidxType_IsValid(int value);
const Scu_epb_310_Epb_intidxType Scu_epb_310_Epb_intidxType_Epb_intidxType_MIN = Scu_epb_310_Epb_intidxType_EPB_INTIDX_NOINT;
const Scu_epb_310_Epb_intidxType Scu_epb_310_Epb_intidxType_Epb_intidxType_MAX = Scu_epb_310_Epb_intidxType_EPB_INTIDX_TIMEOUT;
const int Scu_epb_310_Epb_intidxType_Epb_intidxType_ARRAYSIZE = Scu_epb_310_Epb_intidxType_Epb_intidxType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_epb_310_Epb_intidxType_descriptor();
inline const ::std::string& Scu_epb_310_Epb_intidxType_Name(Scu_epb_310_Epb_intidxType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_epb_310_Epb_intidxType_descriptor(), value);
}
inline bool Scu_epb_310_Epb_intidxType_Parse(
    const ::std::string& name, Scu_epb_310_Epb_intidxType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_epb_310_Epb_intidxType>(
    Scu_epb_310_Epb_intidxType_descriptor(), name, value);
}
enum Scu_epb_310_Epb_drvmodeType {
  Scu_epb_310_Epb_drvmodeType_EPB_DRVMODE_INVALID = 0,
  Scu_epb_310_Epb_drvmodeType_EPB_DRVMODE_MANUAL = 1,
  Scu_epb_310_Epb_drvmodeType_EPB_DRVMODE_INTERRUPT = 2,
  Scu_epb_310_Epb_drvmodeType_EPB_DRVMODE_AUTO = 3
};
bool Scu_epb_310_Epb_drvmodeType_IsValid(int value);
const Scu_epb_310_Epb_drvmodeType Scu_epb_310_Epb_drvmodeType_Epb_drvmodeType_MIN = Scu_epb_310_Epb_drvmodeType_EPB_DRVMODE_INVALID;
const Scu_epb_310_Epb_drvmodeType Scu_epb_310_Epb_drvmodeType_Epb_drvmodeType_MAX = Scu_epb_310_Epb_drvmodeType_EPB_DRVMODE_AUTO;
const int Scu_epb_310_Epb_drvmodeType_Epb_drvmodeType_ARRAYSIZE = Scu_epb_310_Epb_drvmodeType_Epb_drvmodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_epb_310_Epb_drvmodeType_descriptor();
inline const ::std::string& Scu_epb_310_Epb_drvmodeType_Name(Scu_epb_310_Epb_drvmodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_epb_310_Epb_drvmodeType_descriptor(), value);
}
inline bool Scu_epb_310_Epb_drvmodeType_Parse(
    const ::std::string& name, Scu_epb_310_Epb_drvmodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_epb_310_Epb_drvmodeType>(
    Scu_epb_310_Epb_drvmodeType_descriptor(), name, value);
}
enum Scu_epb_310_Epb_sysstType {
  Scu_epb_310_Epb_sysstType_EPB_SYSST_RELEASED = 0,
  Scu_epb_310_Epb_sysstType_EPB_SYSST_APPLIED = 1,
  Scu_epb_310_Epb_sysstType_EPB_SYSST_RELEASING = 2,
  Scu_epb_310_Epb_sysstType_EPB_SYSST_FAULT = 3,
  Scu_epb_310_Epb_sysstType_EPB_SYSST_APPLYING = 4,
  Scu_epb_310_Epb_sysstType_EPB_SYSST_DISENGAGED = 5
};
bool Scu_epb_310_Epb_sysstType_IsValid(int value);
const Scu_epb_310_Epb_sysstType Scu_epb_310_Epb_sysstType_Epb_sysstType_MIN = Scu_epb_310_Epb_sysstType_EPB_SYSST_RELEASED;
const Scu_epb_310_Epb_sysstType Scu_epb_310_Epb_sysstType_Epb_sysstType_MAX = Scu_epb_310_Epb_sysstType_EPB_SYSST_DISENGAGED;
const int Scu_epb_310_Epb_sysstType_Epb_sysstType_ARRAYSIZE = Scu_epb_310_Epb_sysstType_Epb_sysstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_epb_310_Epb_sysstType_descriptor();
inline const ::std::string& Scu_epb_310_Epb_sysstType_Name(Scu_epb_310_Epb_sysstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_epb_310_Epb_sysstType_descriptor(), value);
}
inline bool Scu_epb_310_Epb_sysstType_Parse(
    const ::std::string& name, Scu_epb_310_Epb_sysstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_epb_310_Epb_sysstType>(
    Scu_epb_310_Epb_sysstType_descriptor(), name, value);
}
enum Scu_epb_310_Epb_faultstType {
  Scu_epb_310_Epb_faultstType_EPB_FAULTST_NORMAL = 0,
  Scu_epb_310_Epb_faultstType_EPB_FAULTST_FAULT = 1
};
bool Scu_epb_310_Epb_faultstType_IsValid(int value);
const Scu_epb_310_Epb_faultstType Scu_epb_310_Epb_faultstType_Epb_faultstType_MIN = Scu_epb_310_Epb_faultstType_EPB_FAULTST_NORMAL;
const Scu_epb_310_Epb_faultstType Scu_epb_310_Epb_faultstType_Epb_faultstType_MAX = Scu_epb_310_Epb_faultstType_EPB_FAULTST_FAULT;
const int Scu_epb_310_Epb_faultstType_Epb_faultstType_ARRAYSIZE = Scu_epb_310_Epb_faultstType_Epb_faultstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_epb_310_Epb_faultstType_descriptor();
inline const ::std::string& Scu_epb_310_Epb_faultstType_Name(Scu_epb_310_Epb_faultstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_epb_310_Epb_faultstType_descriptor(), value);
}
inline bool Scu_epb_310_Epb_faultstType_Parse(
    const ::std::string& name, Scu_epb_310_Epb_faultstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_epb_310_Epb_faultstType>(
    Scu_epb_310_Epb_faultstType_descriptor(), name, value);
}
enum Scu_vcu_1_312_Vcu_elcsysfaultType {
  Scu_vcu_1_312_Vcu_elcsysfaultType_VCU_ELCSYSFAULT_NORMAL = 0,
  Scu_vcu_1_312_Vcu_elcsysfaultType_VCU_ELCSYSFAULT_FAULT = 1
};
bool Scu_vcu_1_312_Vcu_elcsysfaultType_IsValid(int value);
const Scu_vcu_1_312_Vcu_elcsysfaultType Scu_vcu_1_312_Vcu_elcsysfaultType_Vcu_elcsysfaultType_MIN = Scu_vcu_1_312_Vcu_elcsysfaultType_VCU_ELCSYSFAULT_NORMAL;
const Scu_vcu_1_312_Vcu_elcsysfaultType Scu_vcu_1_312_Vcu_elcsysfaultType_Vcu_elcsysfaultType_MAX = Scu_vcu_1_312_Vcu_elcsysfaultType_VCU_ELCSYSFAULT_FAULT;
const int Scu_vcu_1_312_Vcu_elcsysfaultType_Vcu_elcsysfaultType_ARRAYSIZE = Scu_vcu_1_312_Vcu_elcsysfaultType_Vcu_elcsysfaultType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_vcu_1_312_Vcu_elcsysfaultType_descriptor();
inline const ::std::string& Scu_vcu_1_312_Vcu_elcsysfaultType_Name(Scu_vcu_1_312_Vcu_elcsysfaultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_vcu_1_312_Vcu_elcsysfaultType_descriptor(), value);
}
inline bool Scu_vcu_1_312_Vcu_elcsysfaultType_Parse(
    const ::std::string& name, Scu_vcu_1_312_Vcu_elcsysfaultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_vcu_1_312_Vcu_elcsysfaultType>(
    Scu_vcu_1_312_Vcu_elcsysfaultType_descriptor(), name, value);
}
enum Scu_vcu_1_312_Vcu_brkpedstType {
  Scu_vcu_1_312_Vcu_brkpedstType_VCU_BRKPEDST_UNPRESSED = 0,
  Scu_vcu_1_312_Vcu_brkpedstType_VCU_BRKPEDST_PRESSED = 1
};
bool Scu_vcu_1_312_Vcu_brkpedstType_IsValid(int value);
const Scu_vcu_1_312_Vcu_brkpedstType Scu_vcu_1_312_Vcu_brkpedstType_Vcu_brkpedstType_MIN = Scu_vcu_1_312_Vcu_brkpedstType_VCU_BRKPEDST_UNPRESSED;
const Scu_vcu_1_312_Vcu_brkpedstType Scu_vcu_1_312_Vcu_brkpedstType_Vcu_brkpedstType_MAX = Scu_vcu_1_312_Vcu_brkpedstType_VCU_BRKPEDST_PRESSED;
const int Scu_vcu_1_312_Vcu_brkpedstType_Vcu_brkpedstType_ARRAYSIZE = Scu_vcu_1_312_Vcu_brkpedstType_Vcu_brkpedstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_vcu_1_312_Vcu_brkpedstType_descriptor();
inline const ::std::string& Scu_vcu_1_312_Vcu_brkpedstType_Name(Scu_vcu_1_312_Vcu_brkpedstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_vcu_1_312_Vcu_brkpedstType_descriptor(), value);
}
inline bool Scu_vcu_1_312_Vcu_brkpedstType_Parse(
    const ::std::string& name, Scu_vcu_1_312_Vcu_brkpedstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_vcu_1_312_Vcu_brkpedstType>(
    Scu_vcu_1_312_Vcu_brkpedstType_descriptor(), name, value);
}
enum Scu_vcu_1_312_Vcu_intidxType {
  Scu_vcu_1_312_Vcu_intidxType_VCU_INTIDX_NOINT = 0,
  Scu_vcu_1_312_Vcu_intidxType_VCU_INTIDX_OVERFLOW = 1,
  Scu_vcu_1_312_Vcu_intidxType_VCU_INTIDX_TIMEOUT = 2,
  Scu_vcu_1_312_Vcu_intidxType_VCU_INTIDX_ACCPEDINT = 3,
  Scu_vcu_1_312_Vcu_intidxType_VCU_INTIDX_BRKPEDINT = 4,
  Scu_vcu_1_312_Vcu_intidxType_VCU_INTIDX_GEARINT = 5
};
bool Scu_vcu_1_312_Vcu_intidxType_IsValid(int value);
const Scu_vcu_1_312_Vcu_intidxType Scu_vcu_1_312_Vcu_intidxType_Vcu_intidxType_MIN = Scu_vcu_1_312_Vcu_intidxType_VCU_INTIDX_NOINT;
const Scu_vcu_1_312_Vcu_intidxType Scu_vcu_1_312_Vcu_intidxType_Vcu_intidxType_MAX = Scu_vcu_1_312_Vcu_intidxType_VCU_INTIDX_GEARINT;
const int Scu_vcu_1_312_Vcu_intidxType_Vcu_intidxType_ARRAYSIZE = Scu_vcu_1_312_Vcu_intidxType_Vcu_intidxType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_vcu_1_312_Vcu_intidxType_descriptor();
inline const ::std::string& Scu_vcu_1_312_Vcu_intidxType_Name(Scu_vcu_1_312_Vcu_intidxType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_vcu_1_312_Vcu_intidxType_descriptor(), value);
}
inline bool Scu_vcu_1_312_Vcu_intidxType_Parse(
    const ::std::string& name, Scu_vcu_1_312_Vcu_intidxType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_vcu_1_312_Vcu_intidxType>(
    Scu_vcu_1_312_Vcu_intidxType_descriptor(), name, value);
}
enum Scu_vcu_1_312_Vcu_gearintidxType {
  Scu_vcu_1_312_Vcu_gearintidxType_VCU_GEARINTIDX_NOINT = 0,
  Scu_vcu_1_312_Vcu_gearintidxType_VCU_GEARINTIDX_OVERFLOW = 1,
  Scu_vcu_1_312_Vcu_gearintidxType_VCU_GEARINTIDX_TIMEOUT = 2
};
bool Scu_vcu_1_312_Vcu_gearintidxType_IsValid(int value);
const Scu_vcu_1_312_Vcu_gearintidxType Scu_vcu_1_312_Vcu_gearintidxType_Vcu_gearintidxType_MIN = Scu_vcu_1_312_Vcu_gearintidxType_VCU_GEARINTIDX_NOINT;
const Scu_vcu_1_312_Vcu_gearintidxType Scu_vcu_1_312_Vcu_gearintidxType_Vcu_gearintidxType_MAX = Scu_vcu_1_312_Vcu_gearintidxType_VCU_GEARINTIDX_TIMEOUT;
const int Scu_vcu_1_312_Vcu_gearintidxType_Vcu_gearintidxType_ARRAYSIZE = Scu_vcu_1_312_Vcu_gearintidxType_Vcu_gearintidxType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_vcu_1_312_Vcu_gearintidxType_descriptor();
inline const ::std::string& Scu_vcu_1_312_Vcu_gearintidxType_Name(Scu_vcu_1_312_Vcu_gearintidxType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_vcu_1_312_Vcu_gearintidxType_descriptor(), value);
}
inline bool Scu_vcu_1_312_Vcu_gearintidxType_Parse(
    const ::std::string& name, Scu_vcu_1_312_Vcu_gearintidxType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_vcu_1_312_Vcu_gearintidxType>(
    Scu_vcu_1_312_Vcu_gearintidxType_descriptor(), name, value);
}
enum Scu_vcu_1_312_Vcu_geardrvmodeType {
  Scu_vcu_1_312_Vcu_geardrvmodeType_VCU_GEARDRVMODE_INVALID = 0,
  Scu_vcu_1_312_Vcu_geardrvmodeType_VCU_GEARDRVMODE_MANUAL = 1,
  Scu_vcu_1_312_Vcu_geardrvmodeType_VCU_GEARDRVMODE_INTERRUPT = 2,
  Scu_vcu_1_312_Vcu_geardrvmodeType_VCU_GEARDRVMODE_AUTO = 3
};
bool Scu_vcu_1_312_Vcu_geardrvmodeType_IsValid(int value);
const Scu_vcu_1_312_Vcu_geardrvmodeType Scu_vcu_1_312_Vcu_geardrvmodeType_Vcu_geardrvmodeType_MIN = Scu_vcu_1_312_Vcu_geardrvmodeType_VCU_GEARDRVMODE_INVALID;
const Scu_vcu_1_312_Vcu_geardrvmodeType Scu_vcu_1_312_Vcu_geardrvmodeType_Vcu_geardrvmodeType_MAX = Scu_vcu_1_312_Vcu_geardrvmodeType_VCU_GEARDRVMODE_AUTO;
const int Scu_vcu_1_312_Vcu_geardrvmodeType_Vcu_geardrvmodeType_ARRAYSIZE = Scu_vcu_1_312_Vcu_geardrvmodeType_Vcu_geardrvmodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_vcu_1_312_Vcu_geardrvmodeType_descriptor();
inline const ::std::string& Scu_vcu_1_312_Vcu_geardrvmodeType_Name(Scu_vcu_1_312_Vcu_geardrvmodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_vcu_1_312_Vcu_geardrvmodeType_descriptor(), value);
}
inline bool Scu_vcu_1_312_Vcu_geardrvmodeType_Parse(
    const ::std::string& name, Scu_vcu_1_312_Vcu_geardrvmodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_vcu_1_312_Vcu_geardrvmodeType>(
    Scu_vcu_1_312_Vcu_geardrvmodeType_descriptor(), name, value);
}
enum Scu_vcu_1_312_Vcu_vehrdystType {
  Scu_vcu_1_312_Vcu_vehrdystType_VCU_VEHRDYST_NOTREADY = 0,
  Scu_vcu_1_312_Vcu_vehrdystType_VCU_VEHRDYST_READY = 1
};
bool Scu_vcu_1_312_Vcu_vehrdystType_IsValid(int value);
const Scu_vcu_1_312_Vcu_vehrdystType Scu_vcu_1_312_Vcu_vehrdystType_Vcu_vehrdystType_MIN = Scu_vcu_1_312_Vcu_vehrdystType_VCU_VEHRDYST_NOTREADY;
const Scu_vcu_1_312_Vcu_vehrdystType Scu_vcu_1_312_Vcu_vehrdystType_Vcu_vehrdystType_MAX = Scu_vcu_1_312_Vcu_vehrdystType_VCU_VEHRDYST_READY;
const int Scu_vcu_1_312_Vcu_vehrdystType_Vcu_vehrdystType_ARRAYSIZE = Scu_vcu_1_312_Vcu_vehrdystType_Vcu_vehrdystType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_vcu_1_312_Vcu_vehrdystType_descriptor();
inline const ::std::string& Scu_vcu_1_312_Vcu_vehrdystType_Name(Scu_vcu_1_312_Vcu_vehrdystType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_vcu_1_312_Vcu_vehrdystType_descriptor(), value);
}
inline bool Scu_vcu_1_312_Vcu_vehrdystType_Parse(
    const ::std::string& name, Scu_vcu_1_312_Vcu_vehrdystType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_vcu_1_312_Vcu_vehrdystType>(
    Scu_vcu_1_312_Vcu_vehrdystType_descriptor(), name, value);
}
enum Scu_vcu_1_312_Vcu_faultstType {
  Scu_vcu_1_312_Vcu_faultstType_VCU_FAULTST_NORMAL = 0,
  Scu_vcu_1_312_Vcu_faultstType_VCU_FAULTST_DERATE = 1,
  Scu_vcu_1_312_Vcu_faultstType_VCU_FAULTST_RSV1 = 2,
  Scu_vcu_1_312_Vcu_faultstType_VCU_FAULTST_RSV2 = 3,
  Scu_vcu_1_312_Vcu_faultstType_VCU_FAULTST_RSV3 = 4,
  Scu_vcu_1_312_Vcu_faultstType_VCU_FAULTST_FAULT = 5
};
bool Scu_vcu_1_312_Vcu_faultstType_IsValid(int value);
const Scu_vcu_1_312_Vcu_faultstType Scu_vcu_1_312_Vcu_faultstType_Vcu_faultstType_MIN = Scu_vcu_1_312_Vcu_faultstType_VCU_FAULTST_NORMAL;
const Scu_vcu_1_312_Vcu_faultstType Scu_vcu_1_312_Vcu_faultstType_Vcu_faultstType_MAX = Scu_vcu_1_312_Vcu_faultstType_VCU_FAULTST_FAULT;
const int Scu_vcu_1_312_Vcu_faultstType_Vcu_faultstType_ARRAYSIZE = Scu_vcu_1_312_Vcu_faultstType_Vcu_faultstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_vcu_1_312_Vcu_faultstType_descriptor();
inline const ::std::string& Scu_vcu_1_312_Vcu_faultstType_Name(Scu_vcu_1_312_Vcu_faultstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_vcu_1_312_Vcu_faultstType_descriptor(), value);
}
inline bool Scu_vcu_1_312_Vcu_faultstType_Parse(
    const ::std::string& name, Scu_vcu_1_312_Vcu_faultstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_vcu_1_312_Vcu_faultstType>(
    Scu_vcu_1_312_Vcu_faultstType_descriptor(), name, value);
}
enum Scu_vcu_1_312_Vcu_drvmodeType {
  Scu_vcu_1_312_Vcu_drvmodeType_VCU_DRVMODE_INVALID = 0,
  Scu_vcu_1_312_Vcu_drvmodeType_VCU_DRVMODE_MANUAL = 1,
  Scu_vcu_1_312_Vcu_drvmodeType_VCU_DRVMODE_INTERRUPT = 2,
  Scu_vcu_1_312_Vcu_drvmodeType_VCU_DRVMODE_AUTO = 3
};
bool Scu_vcu_1_312_Vcu_drvmodeType_IsValid(int value);
const Scu_vcu_1_312_Vcu_drvmodeType Scu_vcu_1_312_Vcu_drvmodeType_Vcu_drvmodeType_MIN = Scu_vcu_1_312_Vcu_drvmodeType_VCU_DRVMODE_INVALID;
const Scu_vcu_1_312_Vcu_drvmodeType Scu_vcu_1_312_Vcu_drvmodeType_Vcu_drvmodeType_MAX = Scu_vcu_1_312_Vcu_drvmodeType_VCU_DRVMODE_AUTO;
const int Scu_vcu_1_312_Vcu_drvmodeType_Vcu_drvmodeType_ARRAYSIZE = Scu_vcu_1_312_Vcu_drvmodeType_Vcu_drvmodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_vcu_1_312_Vcu_drvmodeType_descriptor();
inline const ::std::string& Scu_vcu_1_312_Vcu_drvmodeType_Name(Scu_vcu_1_312_Vcu_drvmodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_vcu_1_312_Vcu_drvmodeType_descriptor(), value);
}
inline bool Scu_vcu_1_312_Vcu_drvmodeType_Parse(
    const ::std::string& name, Scu_vcu_1_312_Vcu_drvmodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_vcu_1_312_Vcu_drvmodeType>(
    Scu_vcu_1_312_Vcu_drvmodeType_descriptor(), name, value);
}
enum Scu_vcu_1_312_Vcu_gearpstType {
  Scu_vcu_1_312_Vcu_gearpstType_VCU_GEARPST_INVALID = 0,
  Scu_vcu_1_312_Vcu_gearpstType_VCU_GEARPST_DRIVE = 1,
  Scu_vcu_1_312_Vcu_gearpstType_VCU_GEARPST_NEUTRAL = 2,
  Scu_vcu_1_312_Vcu_gearpstType_VCU_GEARPST_REVERSE = 3,
  Scu_vcu_1_312_Vcu_gearpstType_VCU_GEARPST_PARK = 4
};
bool Scu_vcu_1_312_Vcu_gearpstType_IsValid(int value);
const Scu_vcu_1_312_Vcu_gearpstType Scu_vcu_1_312_Vcu_gearpstType_Vcu_gearpstType_MIN = Scu_vcu_1_312_Vcu_gearpstType_VCU_GEARPST_INVALID;
const Scu_vcu_1_312_Vcu_gearpstType Scu_vcu_1_312_Vcu_gearpstType_Vcu_gearpstType_MAX = Scu_vcu_1_312_Vcu_gearpstType_VCU_GEARPST_PARK;
const int Scu_vcu_1_312_Vcu_gearpstType_Vcu_gearpstType_ARRAYSIZE = Scu_vcu_1_312_Vcu_gearpstType_Vcu_gearpstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_vcu_1_312_Vcu_gearpstType_descriptor();
inline const ::std::string& Scu_vcu_1_312_Vcu_gearpstType_Name(Scu_vcu_1_312_Vcu_gearpstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_vcu_1_312_Vcu_gearpstType_descriptor(), value);
}
inline bool Scu_vcu_1_312_Vcu_gearpstType_Parse(
    const ::std::string& name, Scu_vcu_1_312_Vcu_gearpstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_vcu_1_312_Vcu_gearpstType>(
    Scu_vcu_1_312_Vcu_gearpstType_descriptor(), name, value);
}
enum Scu_vcu_1_312_Vcu_gearfaultstType {
  Scu_vcu_1_312_Vcu_gearfaultstType_VCU_GEARFAULTST_NORMAL = 0,
  Scu_vcu_1_312_Vcu_gearfaultstType_VCU_GEARFAULTST_FAULT = 1
};
bool Scu_vcu_1_312_Vcu_gearfaultstType_IsValid(int value);
const Scu_vcu_1_312_Vcu_gearfaultstType Scu_vcu_1_312_Vcu_gearfaultstType_Vcu_gearfaultstType_MIN = Scu_vcu_1_312_Vcu_gearfaultstType_VCU_GEARFAULTST_NORMAL;
const Scu_vcu_1_312_Vcu_gearfaultstType Scu_vcu_1_312_Vcu_gearfaultstType_Vcu_gearfaultstType_MAX = Scu_vcu_1_312_Vcu_gearfaultstType_VCU_GEARFAULTST_FAULT;
const int Scu_vcu_1_312_Vcu_gearfaultstType_Vcu_gearfaultstType_ARRAYSIZE = Scu_vcu_1_312_Vcu_gearfaultstType_Vcu_gearfaultstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_vcu_1_312_Vcu_gearfaultstType_descriptor();
inline const ::std::string& Scu_vcu_1_312_Vcu_gearfaultstType_Name(Scu_vcu_1_312_Vcu_gearfaultstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_vcu_1_312_Vcu_gearfaultstType_descriptor(), value);
}
inline bool Scu_vcu_1_312_Vcu_gearfaultstType_Parse(
    const ::std::string& name, Scu_vcu_1_312_Vcu_gearfaultstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_vcu_1_312_Vcu_gearfaultstType>(
    Scu_vcu_1_312_Vcu_gearfaultstType_descriptor(), name, value);
}
enum Scu_vcu_1_312_Vcu_gearactType {
  Scu_vcu_1_312_Vcu_gearactType_VCU_GEARACT_INVALID = 0,
  Scu_vcu_1_312_Vcu_gearactType_VCU_GEARACT_DRIVE = 1,
  Scu_vcu_1_312_Vcu_gearactType_VCU_GEARACT_NEUTRAL = 2,
  Scu_vcu_1_312_Vcu_gearactType_VCU_GEARACT_REVERSE = 3,
  Scu_vcu_1_312_Vcu_gearactType_VCU_GEARACT_PARK = 4
};
bool Scu_vcu_1_312_Vcu_gearactType_IsValid(int value);
const Scu_vcu_1_312_Vcu_gearactType Scu_vcu_1_312_Vcu_gearactType_Vcu_gearactType_MIN = Scu_vcu_1_312_Vcu_gearactType_VCU_GEARACT_INVALID;
const Scu_vcu_1_312_Vcu_gearactType Scu_vcu_1_312_Vcu_gearactType_Vcu_gearactType_MAX = Scu_vcu_1_312_Vcu_gearactType_VCU_GEARACT_PARK;
const int Scu_vcu_1_312_Vcu_gearactType_Vcu_gearactType_ARRAYSIZE = Scu_vcu_1_312_Vcu_gearactType_Vcu_gearactType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_vcu_1_312_Vcu_gearactType_descriptor();
inline const ::std::string& Scu_vcu_1_312_Vcu_gearactType_Name(Scu_vcu_1_312_Vcu_gearactType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_vcu_1_312_Vcu_gearactType_descriptor(), value);
}
inline bool Scu_vcu_1_312_Vcu_gearactType_Parse(
    const ::std::string& name, Scu_vcu_1_312_Vcu_gearactType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_vcu_1_312_Vcu_gearactType>(
    Scu_vcu_1_312_Vcu_gearactType_descriptor(), name, value);
}
enum Scu_eps_311_Eps_intidxType {
  Scu_eps_311_Eps_intidxType_EPS_INTIDX_NOINT = 0,
  Scu_eps_311_Eps_intidxType_EPS_INTIDX_OVERFLOW = 1,
  Scu_eps_311_Eps_intidxType_EPS_INTIDX_TIMEOUT = 2,
  Scu_eps_311_Eps_intidxType_EPS_INTIDX_STEERINT = 3
};
bool Scu_eps_311_Eps_intidxType_IsValid(int value);
const Scu_eps_311_Eps_intidxType Scu_eps_311_Eps_intidxType_Eps_intidxType_MIN = Scu_eps_311_Eps_intidxType_EPS_INTIDX_NOINT;
const Scu_eps_311_Eps_intidxType Scu_eps_311_Eps_intidxType_Eps_intidxType_MAX = Scu_eps_311_Eps_intidxType_EPS_INTIDX_STEERINT;
const int Scu_eps_311_Eps_intidxType_Eps_intidxType_ARRAYSIZE = Scu_eps_311_Eps_intidxType_Eps_intidxType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_eps_311_Eps_intidxType_descriptor();
inline const ::std::string& Scu_eps_311_Eps_intidxType_Name(Scu_eps_311_Eps_intidxType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_eps_311_Eps_intidxType_descriptor(), value);
}
inline bool Scu_eps_311_Eps_intidxType_Parse(
    const ::std::string& name, Scu_eps_311_Eps_intidxType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_eps_311_Eps_intidxType>(
    Scu_eps_311_Eps_intidxType_descriptor(), name, value);
}
enum Scu_eps_311_Eps_faultstType {
  Scu_eps_311_Eps_faultstType_EPS_FAULTST_NORMAL = 0,
  Scu_eps_311_Eps_faultstType_EPS_FAULTST_FAULT = 1
};
bool Scu_eps_311_Eps_faultstType_IsValid(int value);
const Scu_eps_311_Eps_faultstType Scu_eps_311_Eps_faultstType_Eps_faultstType_MIN = Scu_eps_311_Eps_faultstType_EPS_FAULTST_NORMAL;
const Scu_eps_311_Eps_faultstType Scu_eps_311_Eps_faultstType_Eps_faultstType_MAX = Scu_eps_311_Eps_faultstType_EPS_FAULTST_FAULT;
const int Scu_eps_311_Eps_faultstType_Eps_faultstType_ARRAYSIZE = Scu_eps_311_Eps_faultstType_Eps_faultstType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_eps_311_Eps_faultstType_descriptor();
inline const ::std::string& Scu_eps_311_Eps_faultstType_Name(Scu_eps_311_Eps_faultstType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_eps_311_Eps_faultstType_descriptor(), value);
}
inline bool Scu_eps_311_Eps_faultstType_Parse(
    const ::std::string& name, Scu_eps_311_Eps_faultstType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_eps_311_Eps_faultstType>(
    Scu_eps_311_Eps_faultstType_descriptor(), name, value);
}
enum Scu_eps_311_Eps_drvmodeType {
  Scu_eps_311_Eps_drvmodeType_EPS_DRVMODE_INVALID = 0,
  Scu_eps_311_Eps_drvmodeType_EPS_DRVMODE_MANUAL = 1,
  Scu_eps_311_Eps_drvmodeType_EPS_DRVMODE_INTERRUPT = 2,
  Scu_eps_311_Eps_drvmodeType_EPS_DRVMODE_AUTO = 3
};
bool Scu_eps_311_Eps_drvmodeType_IsValid(int value);
const Scu_eps_311_Eps_drvmodeType Scu_eps_311_Eps_drvmodeType_Eps_drvmodeType_MIN = Scu_eps_311_Eps_drvmodeType_EPS_DRVMODE_INVALID;
const Scu_eps_311_Eps_drvmodeType Scu_eps_311_Eps_drvmodeType_Eps_drvmodeType_MAX = Scu_eps_311_Eps_drvmodeType_EPS_DRVMODE_AUTO;
const int Scu_eps_311_Eps_drvmodeType_Eps_drvmodeType_ARRAYSIZE = Scu_eps_311_Eps_drvmodeType_Eps_drvmodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Scu_eps_311_Eps_drvmodeType_descriptor();
inline const ::std::string& Scu_eps_311_Eps_drvmodeType_Name(Scu_eps_311_Eps_drvmodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Scu_eps_311_Eps_drvmodeType_descriptor(), value);
}
inline bool Scu_eps_311_Eps_drvmodeType_Parse(
    const ::std::string& name, Scu_eps_311_Eps_drvmodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Scu_eps_311_Eps_drvmodeType>(
    Scu_eps_311_Eps_drvmodeType_descriptor(), name, value);
}
// ===================================================================

class Pc_bcm_201 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Pc_bcm_201) */ {
 public:
  Pc_bcm_201();
  virtual ~Pc_bcm_201();

  Pc_bcm_201(const Pc_bcm_201& from);

  inline Pc_bcm_201& operator=(const Pc_bcm_201& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pc_bcm_201(Pc_bcm_201&& from) noexcept
    : Pc_bcm_201() {
    *this = ::std::move(from);
  }

  inline Pc_bcm_201& operator=(Pc_bcm_201&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pc_bcm_201& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pc_bcm_201* internal_default_instance() {
    return reinterpret_cast<const Pc_bcm_201*>(
               &_Pc_bcm_201_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Pc_bcm_201* other);
  friend void swap(Pc_bcm_201& a, Pc_bcm_201& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pc_bcm_201* New() const final {
    return CreateMaybeMessage<Pc_bcm_201>(NULL);
  }

  Pc_bcm_201* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pc_bcm_201>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pc_bcm_201& from);
  void MergeFrom(const Pc_bcm_201& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pc_bcm_201* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Pc_bcm_201_Pc_reverselampreqType Pc_reverselampreqType;
  static const Pc_reverselampreqType PC_REVERSELAMPREQ_NOREQ =
    Pc_bcm_201_Pc_reverselampreqType_PC_REVERSELAMPREQ_NOREQ;
  static const Pc_reverselampreqType PC_REVERSELAMPREQ_REQ =
    Pc_bcm_201_Pc_reverselampreqType_PC_REVERSELAMPREQ_REQ;
  static inline bool Pc_reverselampreqType_IsValid(int value) {
    return Pc_bcm_201_Pc_reverselampreqType_IsValid(value);
  }
  static const Pc_reverselampreqType Pc_reverselampreqType_MIN =
    Pc_bcm_201_Pc_reverselampreqType_Pc_reverselampreqType_MIN;
  static const Pc_reverselampreqType Pc_reverselampreqType_MAX =
    Pc_bcm_201_Pc_reverselampreqType_Pc_reverselampreqType_MAX;
  static const int Pc_reverselampreqType_ARRAYSIZE =
    Pc_bcm_201_Pc_reverselampreqType_Pc_reverselampreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pc_reverselampreqType_descriptor() {
    return Pc_bcm_201_Pc_reverselampreqType_descriptor();
  }
  static inline const ::std::string& Pc_reverselampreqType_Name(Pc_reverselampreqType value) {
    return Pc_bcm_201_Pc_reverselampreqType_Name(value);
  }
  static inline bool Pc_reverselampreqType_Parse(const ::std::string& name,
      Pc_reverselampreqType* value) {
    return Pc_bcm_201_Pc_reverselampreqType_Parse(name, value);
  }

  typedef Pc_bcm_201_Pc_lowbeamreqType Pc_lowbeamreqType;
  static const Pc_lowbeamreqType PC_LOWBEAMREQ_NOREQ =
    Pc_bcm_201_Pc_lowbeamreqType_PC_LOWBEAMREQ_NOREQ;
  static const Pc_lowbeamreqType PC_LOWBEAMREQ_REQ =
    Pc_bcm_201_Pc_lowbeamreqType_PC_LOWBEAMREQ_REQ;
  static inline bool Pc_lowbeamreqType_IsValid(int value) {
    return Pc_bcm_201_Pc_lowbeamreqType_IsValid(value);
  }
  static const Pc_lowbeamreqType Pc_lowbeamreqType_MIN =
    Pc_bcm_201_Pc_lowbeamreqType_Pc_lowbeamreqType_MIN;
  static const Pc_lowbeamreqType Pc_lowbeamreqType_MAX =
    Pc_bcm_201_Pc_lowbeamreqType_Pc_lowbeamreqType_MAX;
  static const int Pc_lowbeamreqType_ARRAYSIZE =
    Pc_bcm_201_Pc_lowbeamreqType_Pc_lowbeamreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pc_lowbeamreqType_descriptor() {
    return Pc_bcm_201_Pc_lowbeamreqType_descriptor();
  }
  static inline const ::std::string& Pc_lowbeamreqType_Name(Pc_lowbeamreqType value) {
    return Pc_bcm_201_Pc_lowbeamreqType_Name(value);
  }
  static inline bool Pc_lowbeamreqType_Parse(const ::std::string& name,
      Pc_lowbeamreqType* value) {
    return Pc_bcm_201_Pc_lowbeamreqType_Parse(name, value);
  }

  typedef Pc_bcm_201_Pc_highbeamreqType Pc_highbeamreqType;
  static const Pc_highbeamreqType PC_HIGHBEAMREQ_NOREQ =
    Pc_bcm_201_Pc_highbeamreqType_PC_HIGHBEAMREQ_NOREQ;
  static const Pc_highbeamreqType PC_HIGHBEAMREQ_REQ =
    Pc_bcm_201_Pc_highbeamreqType_PC_HIGHBEAMREQ_REQ;
  static inline bool Pc_highbeamreqType_IsValid(int value) {
    return Pc_bcm_201_Pc_highbeamreqType_IsValid(value);
  }
  static const Pc_highbeamreqType Pc_highbeamreqType_MIN =
    Pc_bcm_201_Pc_highbeamreqType_Pc_highbeamreqType_MIN;
  static const Pc_highbeamreqType Pc_highbeamreqType_MAX =
    Pc_bcm_201_Pc_highbeamreqType_Pc_highbeamreqType_MAX;
  static const int Pc_highbeamreqType_ARRAYSIZE =
    Pc_bcm_201_Pc_highbeamreqType_Pc_highbeamreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pc_highbeamreqType_descriptor() {
    return Pc_bcm_201_Pc_highbeamreqType_descriptor();
  }
  static inline const ::std::string& Pc_highbeamreqType_Name(Pc_highbeamreqType value) {
    return Pc_bcm_201_Pc_highbeamreqType_Name(value);
  }
  static inline bool Pc_highbeamreqType_Parse(const ::std::string& name,
      Pc_highbeamreqType* value) {
    return Pc_bcm_201_Pc_highbeamreqType_Parse(name, value);
  }

  typedef Pc_bcm_201_Pc_rightturnlampreqType Pc_rightturnlampreqType;
  static const Pc_rightturnlampreqType PC_RIGHTTURNLAMPREQ_NOREQ =
    Pc_bcm_201_Pc_rightturnlampreqType_PC_RIGHTTURNLAMPREQ_NOREQ;
  static const Pc_rightturnlampreqType PC_RIGHTTURNLAMPREQ_REQ =
    Pc_bcm_201_Pc_rightturnlampreqType_PC_RIGHTTURNLAMPREQ_REQ;
  static inline bool Pc_rightturnlampreqType_IsValid(int value) {
    return Pc_bcm_201_Pc_rightturnlampreqType_IsValid(value);
  }
  static const Pc_rightturnlampreqType Pc_rightturnlampreqType_MIN =
    Pc_bcm_201_Pc_rightturnlampreqType_Pc_rightturnlampreqType_MIN;
  static const Pc_rightturnlampreqType Pc_rightturnlampreqType_MAX =
    Pc_bcm_201_Pc_rightturnlampreqType_Pc_rightturnlampreqType_MAX;
  static const int Pc_rightturnlampreqType_ARRAYSIZE =
    Pc_bcm_201_Pc_rightturnlampreqType_Pc_rightturnlampreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pc_rightturnlampreqType_descriptor() {
    return Pc_bcm_201_Pc_rightturnlampreqType_descriptor();
  }
  static inline const ::std::string& Pc_rightturnlampreqType_Name(Pc_rightturnlampreqType value) {
    return Pc_bcm_201_Pc_rightturnlampreqType_Name(value);
  }
  static inline bool Pc_rightturnlampreqType_Parse(const ::std::string& name,
      Pc_rightturnlampreqType* value) {
    return Pc_bcm_201_Pc_rightturnlampreqType_Parse(name, value);
  }

  typedef Pc_bcm_201_Pc_leftturnlampreqType Pc_leftturnlampreqType;
  static const Pc_leftturnlampreqType PC_LEFTTURNLAMPREQ_NOREQ =
    Pc_bcm_201_Pc_leftturnlampreqType_PC_LEFTTURNLAMPREQ_NOREQ;
  static const Pc_leftturnlampreqType PC_LEFTTURNLAMPREQ_REQ =
    Pc_bcm_201_Pc_leftturnlampreqType_PC_LEFTTURNLAMPREQ_REQ;
  static inline bool Pc_leftturnlampreqType_IsValid(int value) {
    return Pc_bcm_201_Pc_leftturnlampreqType_IsValid(value);
  }
  static const Pc_leftturnlampreqType Pc_leftturnlampreqType_MIN =
    Pc_bcm_201_Pc_leftturnlampreqType_Pc_leftturnlampreqType_MIN;
  static const Pc_leftturnlampreqType Pc_leftturnlampreqType_MAX =
    Pc_bcm_201_Pc_leftturnlampreqType_Pc_leftturnlampreqType_MAX;
  static const int Pc_leftturnlampreqType_ARRAYSIZE =
    Pc_bcm_201_Pc_leftturnlampreqType_Pc_leftturnlampreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pc_leftturnlampreqType_descriptor() {
    return Pc_bcm_201_Pc_leftturnlampreqType_descriptor();
  }
  static inline const ::std::string& Pc_leftturnlampreqType_Name(Pc_leftturnlampreqType value) {
    return Pc_bcm_201_Pc_leftturnlampreqType_Name(value);
  }
  static inline bool Pc_leftturnlampreqType_Parse(const ::std::string& name,
      Pc_leftturnlampreqType* value) {
    return Pc_bcm_201_Pc_leftturnlampreqType_Parse(name, value);
  }

  typedef Pc_bcm_201_Pc_hornreqType Pc_hornreqType;
  static const Pc_hornreqType PC_HORNREQ_NOREQ =
    Pc_bcm_201_Pc_hornreqType_PC_HORNREQ_NOREQ;
  static const Pc_hornreqType PC_HORNREQ_REQ =
    Pc_bcm_201_Pc_hornreqType_PC_HORNREQ_REQ;
  static inline bool Pc_hornreqType_IsValid(int value) {
    return Pc_bcm_201_Pc_hornreqType_IsValid(value);
  }
  static const Pc_hornreqType Pc_hornreqType_MIN =
    Pc_bcm_201_Pc_hornreqType_Pc_hornreqType_MIN;
  static const Pc_hornreqType Pc_hornreqType_MAX =
    Pc_bcm_201_Pc_hornreqType_Pc_hornreqType_MAX;
  static const int Pc_hornreqType_ARRAYSIZE =
    Pc_bcm_201_Pc_hornreqType_Pc_hornreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pc_hornreqType_descriptor() {
    return Pc_bcm_201_Pc_hornreqType_descriptor();
  }
  static inline const ::std::string& Pc_hornreqType_Name(Pc_hornreqType value) {
    return Pc_bcm_201_Pc_hornreqType_Name(value);
  }
  static inline bool Pc_hornreqType_Parse(const ::std::string& name,
      Pc_hornreqType* value) {
    return Pc_bcm_201_Pc_hornreqType_Parse(name, value);
  }

  typedef Pc_bcm_201_Pc_hazardlampreqType Pc_hazardlampreqType;
  static const Pc_hazardlampreqType PC_HAZARDLAMPREQ_NOREQ =
    Pc_bcm_201_Pc_hazardlampreqType_PC_HAZARDLAMPREQ_NOREQ;
  static const Pc_hazardlampreqType PC_HAZARDLAMPREQ_REQ =
    Pc_bcm_201_Pc_hazardlampreqType_PC_HAZARDLAMPREQ_REQ;
  static inline bool Pc_hazardlampreqType_IsValid(int value) {
    return Pc_bcm_201_Pc_hazardlampreqType_IsValid(value);
  }
  static const Pc_hazardlampreqType Pc_hazardlampreqType_MIN =
    Pc_bcm_201_Pc_hazardlampreqType_Pc_hazardlampreqType_MIN;
  static const Pc_hazardlampreqType Pc_hazardlampreqType_MAX =
    Pc_bcm_201_Pc_hazardlampreqType_Pc_hazardlampreqType_MAX;
  static const int Pc_hazardlampreqType_ARRAYSIZE =
    Pc_bcm_201_Pc_hazardlampreqType_Pc_hazardlampreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pc_hazardlampreqType_descriptor() {
    return Pc_bcm_201_Pc_hazardlampreqType_descriptor();
  }
  static inline const ::std::string& Pc_hazardlampreqType_Name(Pc_hazardlampreqType value) {
    return Pc_bcm_201_Pc_hazardlampreqType_Name(value);
  }
  static inline bool Pc_hazardlampreqType_Parse(const ::std::string& name,
      Pc_hazardlampreqType* value) {
    return Pc_bcm_201_Pc_hazardlampreqType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.canbus.Pc_bcm_201.Pc_reverselampreqType pc_reverselampreq = 1;
  bool has_pc_reverselampreq() const;
  void clear_pc_reverselampreq();
  static const int kPcReverselampreqFieldNumber = 1;
  ::apollo::canbus::Pc_bcm_201_Pc_reverselampreqType pc_reverselampreq() const;
  void set_pc_reverselampreq(::apollo::canbus::Pc_bcm_201_Pc_reverselampreqType value);

  // optional .apollo.canbus.Pc_bcm_201.Pc_lowbeamreqType pc_lowbeamreq = 2;
  bool has_pc_lowbeamreq() const;
  void clear_pc_lowbeamreq();
  static const int kPcLowbeamreqFieldNumber = 2;
  ::apollo::canbus::Pc_bcm_201_Pc_lowbeamreqType pc_lowbeamreq() const;
  void set_pc_lowbeamreq(::apollo::canbus::Pc_bcm_201_Pc_lowbeamreqType value);

  // optional .apollo.canbus.Pc_bcm_201.Pc_highbeamreqType pc_highbeamreq = 3;
  bool has_pc_highbeamreq() const;
  void clear_pc_highbeamreq();
  static const int kPcHighbeamreqFieldNumber = 3;
  ::apollo::canbus::Pc_bcm_201_Pc_highbeamreqType pc_highbeamreq() const;
  void set_pc_highbeamreq(::apollo::canbus::Pc_bcm_201_Pc_highbeamreqType value);

  // optional .apollo.canbus.Pc_bcm_201.Pc_rightturnlampreqType pc_rightturnlampreq = 4;
  bool has_pc_rightturnlampreq() const;
  void clear_pc_rightturnlampreq();
  static const int kPcRightturnlampreqFieldNumber = 4;
  ::apollo::canbus::Pc_bcm_201_Pc_rightturnlampreqType pc_rightturnlampreq() const;
  void set_pc_rightturnlampreq(::apollo::canbus::Pc_bcm_201_Pc_rightturnlampreqType value);

  // optional .apollo.canbus.Pc_bcm_201.Pc_leftturnlampreqType pc_leftturnlampreq = 5;
  bool has_pc_leftturnlampreq() const;
  void clear_pc_leftturnlampreq();
  static const int kPcLeftturnlampreqFieldNumber = 5;
  ::apollo::canbus::Pc_bcm_201_Pc_leftturnlampreqType pc_leftturnlampreq() const;
  void set_pc_leftturnlampreq(::apollo::canbus::Pc_bcm_201_Pc_leftturnlampreqType value);

  // optional .apollo.canbus.Pc_bcm_201.Pc_hornreqType pc_hornreq = 6;
  bool has_pc_hornreq() const;
  void clear_pc_hornreq();
  static const int kPcHornreqFieldNumber = 6;
  ::apollo::canbus::Pc_bcm_201_Pc_hornreqType pc_hornreq() const;
  void set_pc_hornreq(::apollo::canbus::Pc_bcm_201_Pc_hornreqType value);

  // optional .apollo.canbus.Pc_bcm_201.Pc_hazardlampreqType pc_hazardlampreq = 7;
  bool has_pc_hazardlampreq() const;
  void clear_pc_hazardlampreq();
  static const int kPcHazardlampreqFieldNumber = 7;
  ::apollo::canbus::Pc_bcm_201_Pc_hazardlampreqType pc_hazardlampreq() const;
  void set_pc_hazardlampreq(::apollo::canbus::Pc_bcm_201_Pc_hazardlampreqType value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Pc_bcm_201)
 private:
  void set_has_pc_reverselampreq();
  void clear_has_pc_reverselampreq();
  void set_has_pc_lowbeamreq();
  void clear_has_pc_lowbeamreq();
  void set_has_pc_highbeamreq();
  void clear_has_pc_highbeamreq();
  void set_has_pc_rightturnlampreq();
  void clear_has_pc_rightturnlampreq();
  void set_has_pc_leftturnlampreq();
  void clear_has_pc_leftturnlampreq();
  void set_has_pc_hornreq();
  void clear_has_pc_hornreq();
  void set_has_pc_hazardlampreq();
  void clear_has_pc_hazardlampreq();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int pc_reverselampreq_;
  int pc_lowbeamreq_;
  int pc_highbeamreq_;
  int pc_rightturnlampreq_;
  int pc_leftturnlampreq_;
  int pc_hornreq_;
  int pc_hazardlampreq_;
  friend struct ::protobuf_modules_2fcanbus_2fproto_2fge3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Scu_bcs_3_308 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Scu_bcs_3_308) */ {
 public:
  Scu_bcs_3_308();
  virtual ~Scu_bcs_3_308();

  Scu_bcs_3_308(const Scu_bcs_3_308& from);

  inline Scu_bcs_3_308& operator=(const Scu_bcs_3_308& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Scu_bcs_3_308(Scu_bcs_3_308&& from) noexcept
    : Scu_bcs_3_308() {
    *this = ::std::move(from);
  }

  inline Scu_bcs_3_308& operator=(Scu_bcs_3_308&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scu_bcs_3_308& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scu_bcs_3_308* internal_default_instance() {
    return reinterpret_cast<const Scu_bcs_3_308*>(
               &_Scu_bcs_3_308_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Scu_bcs_3_308* other);
  friend void swap(Scu_bcs_3_308& a, Scu_bcs_3_308& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Scu_bcs_3_308* New() const final {
    return CreateMaybeMessage<Scu_bcs_3_308>(NULL);
  }

  Scu_bcs_3_308* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Scu_bcs_3_308>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Scu_bcs_3_308& from);
  void MergeFrom(const Scu_bcs_3_308& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scu_bcs_3_308* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Scu_bcs_3_308_Bcs_rrwheelspdvdType Bcs_rrwheelspdvdType;
  static const Bcs_rrwheelspdvdType BCS_RRWHEELSPDVD_INVALID =
    Scu_bcs_3_308_Bcs_rrwheelspdvdType_BCS_RRWHEELSPDVD_INVALID;
  static const Bcs_rrwheelspdvdType BCS_RRWHEELSPDVD_VALID =
    Scu_bcs_3_308_Bcs_rrwheelspdvdType_BCS_RRWHEELSPDVD_VALID;
  static inline bool Bcs_rrwheelspdvdType_IsValid(int value) {
    return Scu_bcs_3_308_Bcs_rrwheelspdvdType_IsValid(value);
  }
  static const Bcs_rrwheelspdvdType Bcs_rrwheelspdvdType_MIN =
    Scu_bcs_3_308_Bcs_rrwheelspdvdType_Bcs_rrwheelspdvdType_MIN;
  static const Bcs_rrwheelspdvdType Bcs_rrwheelspdvdType_MAX =
    Scu_bcs_3_308_Bcs_rrwheelspdvdType_Bcs_rrwheelspdvdType_MAX;
  static const int Bcs_rrwheelspdvdType_ARRAYSIZE =
    Scu_bcs_3_308_Bcs_rrwheelspdvdType_Bcs_rrwheelspdvdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_rrwheelspdvdType_descriptor() {
    return Scu_bcs_3_308_Bcs_rrwheelspdvdType_descriptor();
  }
  static inline const ::std::string& Bcs_rrwheelspdvdType_Name(Bcs_rrwheelspdvdType value) {
    return Scu_bcs_3_308_Bcs_rrwheelspdvdType_Name(value);
  }
  static inline bool Bcs_rrwheelspdvdType_Parse(const ::std::string& name,
      Bcs_rrwheelspdvdType* value) {
    return Scu_bcs_3_308_Bcs_rrwheelspdvdType_Parse(name, value);
  }

  typedef Scu_bcs_3_308_Bcs_rrwheeldirectionvdType Bcs_rrwheeldirectionvdType;
  static const Bcs_rrwheeldirectionvdType BCS_RRWHEELDIRECTIONVD_INVALID =
    Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_BCS_RRWHEELDIRECTIONVD_INVALID;
  static const Bcs_rrwheeldirectionvdType BCS_RRWHEELDIRECTIONVD_VALID =
    Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_BCS_RRWHEELDIRECTIONVD_VALID;
  static inline bool Bcs_rrwheeldirectionvdType_IsValid(int value) {
    return Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_IsValid(value);
  }
  static const Bcs_rrwheeldirectionvdType Bcs_rrwheeldirectionvdType_MIN =
    Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_Bcs_rrwheeldirectionvdType_MIN;
  static const Bcs_rrwheeldirectionvdType Bcs_rrwheeldirectionvdType_MAX =
    Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_Bcs_rrwheeldirectionvdType_MAX;
  static const int Bcs_rrwheeldirectionvdType_ARRAYSIZE =
    Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_Bcs_rrwheeldirectionvdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_rrwheeldirectionvdType_descriptor() {
    return Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_descriptor();
  }
  static inline const ::std::string& Bcs_rrwheeldirectionvdType_Name(Bcs_rrwheeldirectionvdType value) {
    return Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_Name(value);
  }
  static inline bool Bcs_rrwheeldirectionvdType_Parse(const ::std::string& name,
      Bcs_rrwheeldirectionvdType* value) {
    return Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_Parse(name, value);
  }

  typedef Scu_bcs_3_308_Bcs_rlwheelspdvdType Bcs_rlwheelspdvdType;
  static const Bcs_rlwheelspdvdType BCS_RLWHEELSPDVD_INVALID =
    Scu_bcs_3_308_Bcs_rlwheelspdvdType_BCS_RLWHEELSPDVD_INVALID;
  static const Bcs_rlwheelspdvdType BCS_RLWHEELSPDVD_VALID =
    Scu_bcs_3_308_Bcs_rlwheelspdvdType_BCS_RLWHEELSPDVD_VALID;
  static inline bool Bcs_rlwheelspdvdType_IsValid(int value) {
    return Scu_bcs_3_308_Bcs_rlwheelspdvdType_IsValid(value);
  }
  static const Bcs_rlwheelspdvdType Bcs_rlwheelspdvdType_MIN =
    Scu_bcs_3_308_Bcs_rlwheelspdvdType_Bcs_rlwheelspdvdType_MIN;
  static const Bcs_rlwheelspdvdType Bcs_rlwheelspdvdType_MAX =
    Scu_bcs_3_308_Bcs_rlwheelspdvdType_Bcs_rlwheelspdvdType_MAX;
  static const int Bcs_rlwheelspdvdType_ARRAYSIZE =
    Scu_bcs_3_308_Bcs_rlwheelspdvdType_Bcs_rlwheelspdvdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_rlwheelspdvdType_descriptor() {
    return Scu_bcs_3_308_Bcs_rlwheelspdvdType_descriptor();
  }
  static inline const ::std::string& Bcs_rlwheelspdvdType_Name(Bcs_rlwheelspdvdType value) {
    return Scu_bcs_3_308_Bcs_rlwheelspdvdType_Name(value);
  }
  static inline bool Bcs_rlwheelspdvdType_Parse(const ::std::string& name,
      Bcs_rlwheelspdvdType* value) {
    return Scu_bcs_3_308_Bcs_rlwheelspdvdType_Parse(name, value);
  }

  typedef Scu_bcs_3_308_Bcs_rlwheeldirectionvdType Bcs_rlwheeldirectionvdType;
  static const Bcs_rlwheeldirectionvdType BCS_RLWHEELDIRECTIONVD_INVALID =
    Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_BCS_RLWHEELDIRECTIONVD_INVALID;
  static const Bcs_rlwheeldirectionvdType BCS_RLWHEELDIRECTIONVD_VALID =
    Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_BCS_RLWHEELDIRECTIONVD_VALID;
  static inline bool Bcs_rlwheeldirectionvdType_IsValid(int value) {
    return Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_IsValid(value);
  }
  static const Bcs_rlwheeldirectionvdType Bcs_rlwheeldirectionvdType_MIN =
    Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_Bcs_rlwheeldirectionvdType_MIN;
  static const Bcs_rlwheeldirectionvdType Bcs_rlwheeldirectionvdType_MAX =
    Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_Bcs_rlwheeldirectionvdType_MAX;
  static const int Bcs_rlwheeldirectionvdType_ARRAYSIZE =
    Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_Bcs_rlwheeldirectionvdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_rlwheeldirectionvdType_descriptor() {
    return Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_descriptor();
  }
  static inline const ::std::string& Bcs_rlwheeldirectionvdType_Name(Bcs_rlwheeldirectionvdType value) {
    return Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_Name(value);
  }
  static inline bool Bcs_rlwheeldirectionvdType_Parse(const ::std::string& name,
      Bcs_rlwheeldirectionvdType* value) {
    return Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_Parse(name, value);
  }

  typedef Scu_bcs_3_308_Bcs_frwheelspdvdType Bcs_frwheelspdvdType;
  static const Bcs_frwheelspdvdType BCS_FRWHEELSPDVD_INVALID =
    Scu_bcs_3_308_Bcs_frwheelspdvdType_BCS_FRWHEELSPDVD_INVALID;
  static const Bcs_frwheelspdvdType BCS_FRWHEELSPDVD_VALID =
    Scu_bcs_3_308_Bcs_frwheelspdvdType_BCS_FRWHEELSPDVD_VALID;
  static inline bool Bcs_frwheelspdvdType_IsValid(int value) {
    return Scu_bcs_3_308_Bcs_frwheelspdvdType_IsValid(value);
  }
  static const Bcs_frwheelspdvdType Bcs_frwheelspdvdType_MIN =
    Scu_bcs_3_308_Bcs_frwheelspdvdType_Bcs_frwheelspdvdType_MIN;
  static const Bcs_frwheelspdvdType Bcs_frwheelspdvdType_MAX =
    Scu_bcs_3_308_Bcs_frwheelspdvdType_Bcs_frwheelspdvdType_MAX;
  static const int Bcs_frwheelspdvdType_ARRAYSIZE =
    Scu_bcs_3_308_Bcs_frwheelspdvdType_Bcs_frwheelspdvdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_frwheelspdvdType_descriptor() {
    return Scu_bcs_3_308_Bcs_frwheelspdvdType_descriptor();
  }
  static inline const ::std::string& Bcs_frwheelspdvdType_Name(Bcs_frwheelspdvdType value) {
    return Scu_bcs_3_308_Bcs_frwheelspdvdType_Name(value);
  }
  static inline bool Bcs_frwheelspdvdType_Parse(const ::std::string& name,
      Bcs_frwheelspdvdType* value) {
    return Scu_bcs_3_308_Bcs_frwheelspdvdType_Parse(name, value);
  }

  typedef Scu_bcs_3_308_Bcs_frwheeldirectionvdType Bcs_frwheeldirectionvdType;
  static const Bcs_frwheeldirectionvdType BCS_FRWHEELDIRECTIONVD_INVALID =
    Scu_bcs_3_308_Bcs_frwheeldirectionvdType_BCS_FRWHEELDIRECTIONVD_INVALID;
  static const Bcs_frwheeldirectionvdType BCS_FRWHEELDIRECTIONVD_VALID =
    Scu_bcs_3_308_Bcs_frwheeldirectionvdType_BCS_FRWHEELDIRECTIONVD_VALID;
  static inline bool Bcs_frwheeldirectionvdType_IsValid(int value) {
    return Scu_bcs_3_308_Bcs_frwheeldirectionvdType_IsValid(value);
  }
  static const Bcs_frwheeldirectionvdType Bcs_frwheeldirectionvdType_MIN =
    Scu_bcs_3_308_Bcs_frwheeldirectionvdType_Bcs_frwheeldirectionvdType_MIN;
  static const Bcs_frwheeldirectionvdType Bcs_frwheeldirectionvdType_MAX =
    Scu_bcs_3_308_Bcs_frwheeldirectionvdType_Bcs_frwheeldirectionvdType_MAX;
  static const int Bcs_frwheeldirectionvdType_ARRAYSIZE =
    Scu_bcs_3_308_Bcs_frwheeldirectionvdType_Bcs_frwheeldirectionvdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_frwheeldirectionvdType_descriptor() {
    return Scu_bcs_3_308_Bcs_frwheeldirectionvdType_descriptor();
  }
  static inline const ::std::string& Bcs_frwheeldirectionvdType_Name(Bcs_frwheeldirectionvdType value) {
    return Scu_bcs_3_308_Bcs_frwheeldirectionvdType_Name(value);
  }
  static inline bool Bcs_frwheeldirectionvdType_Parse(const ::std::string& name,
      Bcs_frwheeldirectionvdType* value) {
    return Scu_bcs_3_308_Bcs_frwheeldirectionvdType_Parse(name, value);
  }

  typedef Scu_bcs_3_308_Bcs_flwheelspdvdType Bcs_flwheelspdvdType;
  static const Bcs_flwheelspdvdType BCS_FLWHEELSPDVD_INVALID =
    Scu_bcs_3_308_Bcs_flwheelspdvdType_BCS_FLWHEELSPDVD_INVALID;
  static const Bcs_flwheelspdvdType BCS_FLWHEELSPDVD_VALID =
    Scu_bcs_3_308_Bcs_flwheelspdvdType_BCS_FLWHEELSPDVD_VALID;
  static inline bool Bcs_flwheelspdvdType_IsValid(int value) {
    return Scu_bcs_3_308_Bcs_flwheelspdvdType_IsValid(value);
  }
  static const Bcs_flwheelspdvdType Bcs_flwheelspdvdType_MIN =
    Scu_bcs_3_308_Bcs_flwheelspdvdType_Bcs_flwheelspdvdType_MIN;
  static const Bcs_flwheelspdvdType Bcs_flwheelspdvdType_MAX =
    Scu_bcs_3_308_Bcs_flwheelspdvdType_Bcs_flwheelspdvdType_MAX;
  static const int Bcs_flwheelspdvdType_ARRAYSIZE =
    Scu_bcs_3_308_Bcs_flwheelspdvdType_Bcs_flwheelspdvdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_flwheelspdvdType_descriptor() {
    return Scu_bcs_3_308_Bcs_flwheelspdvdType_descriptor();
  }
  static inline const ::std::string& Bcs_flwheelspdvdType_Name(Bcs_flwheelspdvdType value) {
    return Scu_bcs_3_308_Bcs_flwheelspdvdType_Name(value);
  }
  static inline bool Bcs_flwheelspdvdType_Parse(const ::std::string& name,
      Bcs_flwheelspdvdType* value) {
    return Scu_bcs_3_308_Bcs_flwheelspdvdType_Parse(name, value);
  }

  typedef Scu_bcs_3_308_Bcs_flwheeldirectionvdType Bcs_flwheeldirectionvdType;
  static const Bcs_flwheeldirectionvdType BCS_FLWHEELDIRECTIONVD_INVALID =
    Scu_bcs_3_308_Bcs_flwheeldirectionvdType_BCS_FLWHEELDIRECTIONVD_INVALID;
  static const Bcs_flwheeldirectionvdType BCS_FLWHEELDIRECTIONVD_VALID =
    Scu_bcs_3_308_Bcs_flwheeldirectionvdType_BCS_FLWHEELDIRECTIONVD_VALID;
  static inline bool Bcs_flwheeldirectionvdType_IsValid(int value) {
    return Scu_bcs_3_308_Bcs_flwheeldirectionvdType_IsValid(value);
  }
  static const Bcs_flwheeldirectionvdType Bcs_flwheeldirectionvdType_MIN =
    Scu_bcs_3_308_Bcs_flwheeldirectionvdType_Bcs_flwheeldirectionvdType_MIN;
  static const Bcs_flwheeldirectionvdType Bcs_flwheeldirectionvdType_MAX =
    Scu_bcs_3_308_Bcs_flwheeldirectionvdType_Bcs_flwheeldirectionvdType_MAX;
  static const int Bcs_flwheeldirectionvdType_ARRAYSIZE =
    Scu_bcs_3_308_Bcs_flwheeldirectionvdType_Bcs_flwheeldirectionvdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_flwheeldirectionvdType_descriptor() {
    return Scu_bcs_3_308_Bcs_flwheeldirectionvdType_descriptor();
  }
  static inline const ::std::string& Bcs_flwheeldirectionvdType_Name(Bcs_flwheeldirectionvdType value) {
    return Scu_bcs_3_308_Bcs_flwheeldirectionvdType_Name(value);
  }
  static inline bool Bcs_flwheeldirectionvdType_Parse(const ::std::string& name,
      Bcs_flwheeldirectionvdType* value) {
    return Scu_bcs_3_308_Bcs_flwheeldirectionvdType_Parse(name, value);
  }

  typedef Scu_bcs_3_308_Bcs_rrwheeldirectionType Bcs_rrwheeldirectionType;
  static const Bcs_rrwheeldirectionType BCS_RRWHEELDIRECTION_FORWARD =
    Scu_bcs_3_308_Bcs_rrwheeldirectionType_BCS_RRWHEELDIRECTION_FORWARD;
  static const Bcs_rrwheeldirectionType BCS_RRWHEELDIRECTION_BACKWARD =
    Scu_bcs_3_308_Bcs_rrwheeldirectionType_BCS_RRWHEELDIRECTION_BACKWARD;
  static inline bool Bcs_rrwheeldirectionType_IsValid(int value) {
    return Scu_bcs_3_308_Bcs_rrwheeldirectionType_IsValid(value);
  }
  static const Bcs_rrwheeldirectionType Bcs_rrwheeldirectionType_MIN =
    Scu_bcs_3_308_Bcs_rrwheeldirectionType_Bcs_rrwheeldirectionType_MIN;
  static const Bcs_rrwheeldirectionType Bcs_rrwheeldirectionType_MAX =
    Scu_bcs_3_308_Bcs_rrwheeldirectionType_Bcs_rrwheeldirectionType_MAX;
  static const int Bcs_rrwheeldirectionType_ARRAYSIZE =
    Scu_bcs_3_308_Bcs_rrwheeldirectionType_Bcs_rrwheeldirectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_rrwheeldirectionType_descriptor() {
    return Scu_bcs_3_308_Bcs_rrwheeldirectionType_descriptor();
  }
  static inline const ::std::string& Bcs_rrwheeldirectionType_Name(Bcs_rrwheeldirectionType value) {
    return Scu_bcs_3_308_Bcs_rrwheeldirectionType_Name(value);
  }
  static inline bool Bcs_rrwheeldirectionType_Parse(const ::std::string& name,
      Bcs_rrwheeldirectionType* value) {
    return Scu_bcs_3_308_Bcs_rrwheeldirectionType_Parse(name, value);
  }

  typedef Scu_bcs_3_308_Bcs_rlwheeldirectionType Bcs_rlwheeldirectionType;
  static const Bcs_rlwheeldirectionType BCS_RLWHEELDIRECTION_FORWARD =
    Scu_bcs_3_308_Bcs_rlwheeldirectionType_BCS_RLWHEELDIRECTION_FORWARD;
  static const Bcs_rlwheeldirectionType BCS_RLWHEELDIRECTION_BACKWARD =
    Scu_bcs_3_308_Bcs_rlwheeldirectionType_BCS_RLWHEELDIRECTION_BACKWARD;
  static inline bool Bcs_rlwheeldirectionType_IsValid(int value) {
    return Scu_bcs_3_308_Bcs_rlwheeldirectionType_IsValid(value);
  }
  static const Bcs_rlwheeldirectionType Bcs_rlwheeldirectionType_MIN =
    Scu_bcs_3_308_Bcs_rlwheeldirectionType_Bcs_rlwheeldirectionType_MIN;
  static const Bcs_rlwheeldirectionType Bcs_rlwheeldirectionType_MAX =
    Scu_bcs_3_308_Bcs_rlwheeldirectionType_Bcs_rlwheeldirectionType_MAX;
  static const int Bcs_rlwheeldirectionType_ARRAYSIZE =
    Scu_bcs_3_308_Bcs_rlwheeldirectionType_Bcs_rlwheeldirectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_rlwheeldirectionType_descriptor() {
    return Scu_bcs_3_308_Bcs_rlwheeldirectionType_descriptor();
  }
  static inline const ::std::string& Bcs_rlwheeldirectionType_Name(Bcs_rlwheeldirectionType value) {
    return Scu_bcs_3_308_Bcs_rlwheeldirectionType_Name(value);
  }
  static inline bool Bcs_rlwheeldirectionType_Parse(const ::std::string& name,
      Bcs_rlwheeldirectionType* value) {
    return Scu_bcs_3_308_Bcs_rlwheeldirectionType_Parse(name, value);
  }

  typedef Scu_bcs_3_308_Bcs_frwheeldirectionType Bcs_frwheeldirectionType;
  static const Bcs_frwheeldirectionType BCS_FRWHEELDIRECTION_FORWARD =
    Scu_bcs_3_308_Bcs_frwheeldirectionType_BCS_FRWHEELDIRECTION_FORWARD;
  static const Bcs_frwheeldirectionType BCS_FRWHEELDIRECTION_BACKWARD =
    Scu_bcs_3_308_Bcs_frwheeldirectionType_BCS_FRWHEELDIRECTION_BACKWARD;
  static inline bool Bcs_frwheeldirectionType_IsValid(int value) {
    return Scu_bcs_3_308_Bcs_frwheeldirectionType_IsValid(value);
  }
  static const Bcs_frwheeldirectionType Bcs_frwheeldirectionType_MIN =
    Scu_bcs_3_308_Bcs_frwheeldirectionType_Bcs_frwheeldirectionType_MIN;
  static const Bcs_frwheeldirectionType Bcs_frwheeldirectionType_MAX =
    Scu_bcs_3_308_Bcs_frwheeldirectionType_Bcs_frwheeldirectionType_MAX;
  static const int Bcs_frwheeldirectionType_ARRAYSIZE =
    Scu_bcs_3_308_Bcs_frwheeldirectionType_Bcs_frwheeldirectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_frwheeldirectionType_descriptor() {
    return Scu_bcs_3_308_Bcs_frwheeldirectionType_descriptor();
  }
  static inline const ::std::string& Bcs_frwheeldirectionType_Name(Bcs_frwheeldirectionType value) {
    return Scu_bcs_3_308_Bcs_frwheeldirectionType_Name(value);
  }
  static inline bool Bcs_frwheeldirectionType_Parse(const ::std::string& name,
      Bcs_frwheeldirectionType* value) {
    return Scu_bcs_3_308_Bcs_frwheeldirectionType_Parse(name, value);
  }

  typedef Scu_bcs_3_308_Bcs_flwheeldirectionType Bcs_flwheeldirectionType;
  static const Bcs_flwheeldirectionType BCS_FLWHEELDIRECTION_FORWARD =
    Scu_bcs_3_308_Bcs_flwheeldirectionType_BCS_FLWHEELDIRECTION_FORWARD;
  static const Bcs_flwheeldirectionType BCS_FLWHEELDIRECTION_BACKWARD =
    Scu_bcs_3_308_Bcs_flwheeldirectionType_BCS_FLWHEELDIRECTION_BACKWARD;
  static inline bool Bcs_flwheeldirectionType_IsValid(int value) {
    return Scu_bcs_3_308_Bcs_flwheeldirectionType_IsValid(value);
  }
  static const Bcs_flwheeldirectionType Bcs_flwheeldirectionType_MIN =
    Scu_bcs_3_308_Bcs_flwheeldirectionType_Bcs_flwheeldirectionType_MIN;
  static const Bcs_flwheeldirectionType Bcs_flwheeldirectionType_MAX =
    Scu_bcs_3_308_Bcs_flwheeldirectionType_Bcs_flwheeldirectionType_MAX;
  static const int Bcs_flwheeldirectionType_ARRAYSIZE =
    Scu_bcs_3_308_Bcs_flwheeldirectionType_Bcs_flwheeldirectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_flwheeldirectionType_descriptor() {
    return Scu_bcs_3_308_Bcs_flwheeldirectionType_descriptor();
  }
  static inline const ::std::string& Bcs_flwheeldirectionType_Name(Bcs_flwheeldirectionType value) {
    return Scu_bcs_3_308_Bcs_flwheeldirectionType_Name(value);
  }
  static inline bool Bcs_flwheeldirectionType_Parse(const ::std::string& name,
      Bcs_flwheeldirectionType* value) {
    return Scu_bcs_3_308_Bcs_flwheeldirectionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rrwheelspdvdType bcs_rrwheelspdvd = 1;
  bool has_bcs_rrwheelspdvd() const;
  void clear_bcs_rrwheelspdvd();
  static const int kBcsRrwheelspdvdFieldNumber = 1;
  ::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheelspdvdType bcs_rrwheelspdvd() const;
  void set_bcs_rrwheelspdvd(::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheelspdvdType value);

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rrwheeldirectionvdType bcs_rrwheeldirectionvd = 2;
  bool has_bcs_rrwheeldirectionvd() const;
  void clear_bcs_rrwheeldirectionvd();
  static const int kBcsRrwheeldirectionvdFieldNumber = 2;
  ::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionvdType bcs_rrwheeldirectionvd() const;
  void set_bcs_rrwheeldirectionvd(::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionvdType value);

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rlwheelspdvdType bcs_rlwheelspdvd = 3;
  bool has_bcs_rlwheelspdvd() const;
  void clear_bcs_rlwheelspdvd();
  static const int kBcsRlwheelspdvdFieldNumber = 3;
  ::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheelspdvdType bcs_rlwheelspdvd() const;
  void set_bcs_rlwheelspdvd(::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheelspdvdType value);

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rlwheeldirectionvdType bcs_rlwheeldirectionvd = 4;
  bool has_bcs_rlwheeldirectionvd() const;
  void clear_bcs_rlwheeldirectionvd();
  static const int kBcsRlwheeldirectionvdFieldNumber = 4;
  ::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionvdType bcs_rlwheeldirectionvd() const;
  void set_bcs_rlwheeldirectionvd(::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionvdType value);

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_frwheelspdvdType bcs_frwheelspdvd = 5;
  bool has_bcs_frwheelspdvd() const;
  void clear_bcs_frwheelspdvd();
  static const int kBcsFrwheelspdvdFieldNumber = 5;
  ::apollo::canbus::Scu_bcs_3_308_Bcs_frwheelspdvdType bcs_frwheelspdvd() const;
  void set_bcs_frwheelspdvd(::apollo::canbus::Scu_bcs_3_308_Bcs_frwheelspdvdType value);

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_frwheeldirectionvdType bcs_frwheeldirectionvd = 6;
  bool has_bcs_frwheeldirectionvd() const;
  void clear_bcs_frwheeldirectionvd();
  static const int kBcsFrwheeldirectionvdFieldNumber = 6;
  ::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionvdType bcs_frwheeldirectionvd() const;
  void set_bcs_frwheeldirectionvd(::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionvdType value);

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_flwheelspdvdType bcs_flwheelspdvd = 7;
  bool has_bcs_flwheelspdvd() const;
  void clear_bcs_flwheelspdvd();
  static const int kBcsFlwheelspdvdFieldNumber = 7;
  ::apollo::canbus::Scu_bcs_3_308_Bcs_flwheelspdvdType bcs_flwheelspdvd() const;
  void set_bcs_flwheelspdvd(::apollo::canbus::Scu_bcs_3_308_Bcs_flwheelspdvdType value);

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_flwheeldirectionvdType bcs_flwheeldirectionvd = 8;
  bool has_bcs_flwheeldirectionvd() const;
  void clear_bcs_flwheeldirectionvd();
  static const int kBcsFlwheeldirectionvdFieldNumber = 8;
  ::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionvdType bcs_flwheeldirectionvd() const;
  void set_bcs_flwheeldirectionvd(::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionvdType value);

  // optional double bcs_rrwheelspd = 9;
  bool has_bcs_rrwheelspd() const;
  void clear_bcs_rrwheelspd();
  static const int kBcsRrwheelspdFieldNumber = 9;
  double bcs_rrwheelspd() const;
  void set_bcs_rrwheelspd(double value);

  // optional double bcs_rlwheelspd = 11;
  bool has_bcs_rlwheelspd() const;
  void clear_bcs_rlwheelspd();
  static const int kBcsRlwheelspdFieldNumber = 11;
  double bcs_rlwheelspd() const;
  void set_bcs_rlwheelspd(double value);

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rrwheeldirectionType bcs_rrwheeldirection = 10;
  bool has_bcs_rrwheeldirection() const;
  void clear_bcs_rrwheeldirection();
  static const int kBcsRrwheeldirectionFieldNumber = 10;
  ::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionType bcs_rrwheeldirection() const;
  void set_bcs_rrwheeldirection(::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionType value);

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_rlwheeldirectionType bcs_rlwheeldirection = 12;
  bool has_bcs_rlwheeldirection() const;
  void clear_bcs_rlwheeldirection();
  static const int kBcsRlwheeldirectionFieldNumber = 12;
  ::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionType bcs_rlwheeldirection() const;
  void set_bcs_rlwheeldirection(::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionType value);

  // optional double bcs_frwheelspd = 13;
  bool has_bcs_frwheelspd() const;
  void clear_bcs_frwheelspd();
  static const int kBcsFrwheelspdFieldNumber = 13;
  double bcs_frwheelspd() const;
  void set_bcs_frwheelspd(double value);

  // optional double bcs_flwheelspd = 15;
  bool has_bcs_flwheelspd() const;
  void clear_bcs_flwheelspd();
  static const int kBcsFlwheelspdFieldNumber = 15;
  double bcs_flwheelspd() const;
  void set_bcs_flwheelspd(double value);

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_frwheeldirectionType bcs_frwheeldirection = 14;
  bool has_bcs_frwheeldirection() const;
  void clear_bcs_frwheeldirection();
  static const int kBcsFrwheeldirectionFieldNumber = 14;
  ::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionType bcs_frwheeldirection() const;
  void set_bcs_frwheeldirection(::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionType value);

  // optional .apollo.canbus.Scu_bcs_3_308.Bcs_flwheeldirectionType bcs_flwheeldirection = 16;
  bool has_bcs_flwheeldirection() const;
  void clear_bcs_flwheeldirection();
  static const int kBcsFlwheeldirectionFieldNumber = 16;
  ::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionType bcs_flwheeldirection() const;
  void set_bcs_flwheeldirection(::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionType value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Scu_bcs_3_308)
 private:
  void set_has_bcs_rrwheelspdvd();
  void clear_has_bcs_rrwheelspdvd();
  void set_has_bcs_rrwheeldirectionvd();
  void clear_has_bcs_rrwheeldirectionvd();
  void set_has_bcs_rlwheelspdvd();
  void clear_has_bcs_rlwheelspdvd();
  void set_has_bcs_rlwheeldirectionvd();
  void clear_has_bcs_rlwheeldirectionvd();
  void set_has_bcs_frwheelspdvd();
  void clear_has_bcs_frwheelspdvd();
  void set_has_bcs_frwheeldirectionvd();
  void clear_has_bcs_frwheeldirectionvd();
  void set_has_bcs_flwheelspdvd();
  void clear_has_bcs_flwheelspdvd();
  void set_has_bcs_flwheeldirectionvd();
  void clear_has_bcs_flwheeldirectionvd();
  void set_has_bcs_rrwheelspd();
  void clear_has_bcs_rrwheelspd();
  void set_has_bcs_rrwheeldirection();
  void clear_has_bcs_rrwheeldirection();
  void set_has_bcs_rlwheelspd();
  void clear_has_bcs_rlwheelspd();
  void set_has_bcs_rlwheeldirection();
  void clear_has_bcs_rlwheeldirection();
  void set_has_bcs_frwheelspd();
  void clear_has_bcs_frwheelspd();
  void set_has_bcs_frwheeldirection();
  void clear_has_bcs_frwheeldirection();
  void set_has_bcs_flwheelspd();
  void clear_has_bcs_flwheelspd();
  void set_has_bcs_flwheeldirection();
  void clear_has_bcs_flwheeldirection();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int bcs_rrwheelspdvd_;
  int bcs_rrwheeldirectionvd_;
  int bcs_rlwheelspdvd_;
  int bcs_rlwheeldirectionvd_;
  int bcs_frwheelspdvd_;
  int bcs_frwheeldirectionvd_;
  int bcs_flwheelspdvd_;
  int bcs_flwheeldirectionvd_;
  double bcs_rrwheelspd_;
  double bcs_rlwheelspd_;
  int bcs_rrwheeldirection_;
  int bcs_rlwheeldirection_;
  double bcs_frwheelspd_;
  double bcs_flwheelspd_;
  int bcs_frwheeldirection_;
  int bcs_flwheeldirection_;
  friend struct ::protobuf_modules_2fcanbus_2fproto_2fge3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pc_epb_203 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Pc_epb_203) */ {
 public:
  Pc_epb_203();
  virtual ~Pc_epb_203();

  Pc_epb_203(const Pc_epb_203& from);

  inline Pc_epb_203& operator=(const Pc_epb_203& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pc_epb_203(Pc_epb_203&& from) noexcept
    : Pc_epb_203() {
    *this = ::std::move(from);
  }

  inline Pc_epb_203& operator=(Pc_epb_203&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pc_epb_203& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pc_epb_203* internal_default_instance() {
    return reinterpret_cast<const Pc_epb_203*>(
               &_Pc_epb_203_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Pc_epb_203* other);
  friend void swap(Pc_epb_203& a, Pc_epb_203& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pc_epb_203* New() const final {
    return CreateMaybeMessage<Pc_epb_203>(NULL);
  }

  Pc_epb_203* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pc_epb_203>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pc_epb_203& from);
  void MergeFrom(const Pc_epb_203& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pc_epb_203* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Pc_epb_203_Pc_epbreqType Pc_epbreqType;
  static const Pc_epbreqType PC_EPBREQ_INVALID =
    Pc_epb_203_Pc_epbreqType_PC_EPBREQ_INVALID;
  static const Pc_epbreqType PC_EPBREQ_RELEASE =
    Pc_epb_203_Pc_epbreqType_PC_EPBREQ_RELEASE;
  static const Pc_epbreqType PC_EPBREQ_APPLY =
    Pc_epb_203_Pc_epbreqType_PC_EPBREQ_APPLY;
  static inline bool Pc_epbreqType_IsValid(int value) {
    return Pc_epb_203_Pc_epbreqType_IsValid(value);
  }
  static const Pc_epbreqType Pc_epbreqType_MIN =
    Pc_epb_203_Pc_epbreqType_Pc_epbreqType_MIN;
  static const Pc_epbreqType Pc_epbreqType_MAX =
    Pc_epb_203_Pc_epbreqType_Pc_epbreqType_MAX;
  static const int Pc_epbreqType_ARRAYSIZE =
    Pc_epb_203_Pc_epbreqType_Pc_epbreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pc_epbreqType_descriptor() {
    return Pc_epb_203_Pc_epbreqType_descriptor();
  }
  static inline const ::std::string& Pc_epbreqType_Name(Pc_epbreqType value) {
    return Pc_epb_203_Pc_epbreqType_Name(value);
  }
  static inline bool Pc_epbreqType_Parse(const ::std::string& name,
      Pc_epbreqType* value) {
    return Pc_epb_203_Pc_epbreqType_Parse(name, value);
  }

  typedef Pc_epb_203_Pc_epbenableType Pc_epbenableType;
  static const Pc_epbenableType PC_EPBENABLE_DISABLE =
    Pc_epb_203_Pc_epbenableType_PC_EPBENABLE_DISABLE;
  static const Pc_epbenableType PC_EPBENABLE_ENABLE =
    Pc_epb_203_Pc_epbenableType_PC_EPBENABLE_ENABLE;
  static inline bool Pc_epbenableType_IsValid(int value) {
    return Pc_epb_203_Pc_epbenableType_IsValid(value);
  }
  static const Pc_epbenableType Pc_epbenableType_MIN =
    Pc_epb_203_Pc_epbenableType_Pc_epbenableType_MIN;
  static const Pc_epbenableType Pc_epbenableType_MAX =
    Pc_epb_203_Pc_epbenableType_Pc_epbenableType_MAX;
  static const int Pc_epbenableType_ARRAYSIZE =
    Pc_epb_203_Pc_epbenableType_Pc_epbenableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pc_epbenableType_descriptor() {
    return Pc_epb_203_Pc_epbenableType_descriptor();
  }
  static inline const ::std::string& Pc_epbenableType_Name(Pc_epbenableType value) {
    return Pc_epb_203_Pc_epbenableType_Name(value);
  }
  static inline bool Pc_epbenableType_Parse(const ::std::string& name,
      Pc_epbenableType* value) {
    return Pc_epb_203_Pc_epbenableType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.canbus.Pc_epb_203.Pc_epbreqType pc_epbreq = 1;
  bool has_pc_epbreq() const;
  void clear_pc_epbreq();
  static const int kPcEpbreqFieldNumber = 1;
  ::apollo::canbus::Pc_epb_203_Pc_epbreqType pc_epbreq() const;
  void set_pc_epbreq(::apollo::canbus::Pc_epb_203_Pc_epbreqType value);

  // optional .apollo.canbus.Pc_epb_203.Pc_epbenableType pc_epbenable = 2;
  bool has_pc_epbenable() const;
  void clear_pc_epbenable();
  static const int kPcEpbenableFieldNumber = 2;
  ::apollo::canbus::Pc_epb_203_Pc_epbenableType pc_epbenable() const;
  void set_pc_epbenable(::apollo::canbus::Pc_epb_203_Pc_epbenableType value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Pc_epb_203)
 private:
  void set_has_pc_epbreq();
  void clear_has_pc_epbreq();
  void set_has_pc_epbenable();
  void clear_has_pc_epbenable();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int pc_epbreq_;
  int pc_epbenable_;
  friend struct ::protobuf_modules_2fcanbus_2fproto_2fge3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pc_bcs_202 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Pc_bcs_202) */ {
 public:
  Pc_bcs_202();
  virtual ~Pc_bcs_202();

  Pc_bcs_202(const Pc_bcs_202& from);

  inline Pc_bcs_202& operator=(const Pc_bcs_202& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pc_bcs_202(Pc_bcs_202&& from) noexcept
    : Pc_bcs_202() {
    *this = ::std::move(from);
  }

  inline Pc_bcs_202& operator=(Pc_bcs_202&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pc_bcs_202& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pc_bcs_202* internal_default_instance() {
    return reinterpret_cast<const Pc_bcs_202*>(
               &_Pc_bcs_202_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Pc_bcs_202* other);
  friend void swap(Pc_bcs_202& a, Pc_bcs_202& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pc_bcs_202* New() const final {
    return CreateMaybeMessage<Pc_bcs_202>(NULL);
  }

  Pc_bcs_202* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pc_bcs_202>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pc_bcs_202& from);
  void MergeFrom(const Pc_bcs_202& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pc_bcs_202* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Pc_bcs_202_Pc_brkpedenableType Pc_brkpedenableType;
  static const Pc_brkpedenableType PC_BRKPEDENABLE_DISABLE =
    Pc_bcs_202_Pc_brkpedenableType_PC_BRKPEDENABLE_DISABLE;
  static const Pc_brkpedenableType PC_BRKPEDENABLE_ENABLE =
    Pc_bcs_202_Pc_brkpedenableType_PC_BRKPEDENABLE_ENABLE;
  static inline bool Pc_brkpedenableType_IsValid(int value) {
    return Pc_bcs_202_Pc_brkpedenableType_IsValid(value);
  }
  static const Pc_brkpedenableType Pc_brkpedenableType_MIN =
    Pc_bcs_202_Pc_brkpedenableType_Pc_brkpedenableType_MIN;
  static const Pc_brkpedenableType Pc_brkpedenableType_MAX =
    Pc_bcs_202_Pc_brkpedenableType_Pc_brkpedenableType_MAX;
  static const int Pc_brkpedenableType_ARRAYSIZE =
    Pc_bcs_202_Pc_brkpedenableType_Pc_brkpedenableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pc_brkpedenableType_descriptor() {
    return Pc_bcs_202_Pc_brkpedenableType_descriptor();
  }
  static inline const ::std::string& Pc_brkpedenableType_Name(Pc_brkpedenableType value) {
    return Pc_bcs_202_Pc_brkpedenableType_Name(value);
  }
  static inline bool Pc_brkpedenableType_Parse(const ::std::string& name,
      Pc_brkpedenableType* value) {
    return Pc_bcs_202_Pc_brkpedenableType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double pc_brkpedreq = 1;
  bool has_pc_brkpedreq() const;
  void clear_pc_brkpedreq();
  static const int kPcBrkpedreqFieldNumber = 1;
  double pc_brkpedreq() const;
  void set_pc_brkpedreq(double value);

  // optional .apollo.canbus.Pc_bcs_202.Pc_brkpedenableType pc_brkpedenable = 2;
  bool has_pc_brkpedenable() const;
  void clear_pc_brkpedenable();
  static const int kPcBrkpedenableFieldNumber = 2;
  ::apollo::canbus::Pc_bcs_202_Pc_brkpedenableType pc_brkpedenable() const;
  void set_pc_brkpedenable(::apollo::canbus::Pc_bcs_202_Pc_brkpedenableType value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Pc_bcs_202)
 private:
  void set_has_pc_brkpedreq();
  void clear_has_pc_brkpedreq();
  void set_has_pc_brkpedenable();
  void clear_has_pc_brkpedenable();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double pc_brkpedreq_;
  int pc_brkpedenable_;
  friend struct ::protobuf_modules_2fcanbus_2fproto_2fge3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pc_vcu_205 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Pc_vcu_205) */ {
 public:
  Pc_vcu_205();
  virtual ~Pc_vcu_205();

  Pc_vcu_205(const Pc_vcu_205& from);

  inline Pc_vcu_205& operator=(const Pc_vcu_205& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pc_vcu_205(Pc_vcu_205&& from) noexcept
    : Pc_vcu_205() {
    *this = ::std::move(from);
  }

  inline Pc_vcu_205& operator=(Pc_vcu_205&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pc_vcu_205& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pc_vcu_205* internal_default_instance() {
    return reinterpret_cast<const Pc_vcu_205*>(
               &_Pc_vcu_205_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Pc_vcu_205* other);
  friend void swap(Pc_vcu_205& a, Pc_vcu_205& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pc_vcu_205* New() const final {
    return CreateMaybeMessage<Pc_vcu_205>(NULL);
  }

  Pc_vcu_205* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pc_vcu_205>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pc_vcu_205& from);
  void MergeFrom(const Pc_vcu_205& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pc_vcu_205* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Pc_vcu_205_Pc_accpedenableType Pc_accpedenableType;
  static const Pc_accpedenableType PC_ACCPEDENABLE_DISABLE =
    Pc_vcu_205_Pc_accpedenableType_PC_ACCPEDENABLE_DISABLE;
  static const Pc_accpedenableType PC_ACCPEDENABLE_ENABLE =
    Pc_vcu_205_Pc_accpedenableType_PC_ACCPEDENABLE_ENABLE;
  static inline bool Pc_accpedenableType_IsValid(int value) {
    return Pc_vcu_205_Pc_accpedenableType_IsValid(value);
  }
  static const Pc_accpedenableType Pc_accpedenableType_MIN =
    Pc_vcu_205_Pc_accpedenableType_Pc_accpedenableType_MIN;
  static const Pc_accpedenableType Pc_accpedenableType_MAX =
    Pc_vcu_205_Pc_accpedenableType_Pc_accpedenableType_MAX;
  static const int Pc_accpedenableType_ARRAYSIZE =
    Pc_vcu_205_Pc_accpedenableType_Pc_accpedenableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pc_accpedenableType_descriptor() {
    return Pc_vcu_205_Pc_accpedenableType_descriptor();
  }
  static inline const ::std::string& Pc_accpedenableType_Name(Pc_accpedenableType value) {
    return Pc_vcu_205_Pc_accpedenableType_Name(value);
  }
  static inline bool Pc_accpedenableType_Parse(const ::std::string& name,
      Pc_accpedenableType* value) {
    return Pc_vcu_205_Pc_accpedenableType_Parse(name, value);
  }

  typedef Pc_vcu_205_Pc_torqenableType Pc_torqenableType;
  static const Pc_torqenableType PC_TORQENABLE_DISABLE =
    Pc_vcu_205_Pc_torqenableType_PC_TORQENABLE_DISABLE;
  static const Pc_torqenableType PC_TORQENABLE_ENABLE =
    Pc_vcu_205_Pc_torqenableType_PC_TORQENABLE_ENABLE;
  static inline bool Pc_torqenableType_IsValid(int value) {
    return Pc_vcu_205_Pc_torqenableType_IsValid(value);
  }
  static const Pc_torqenableType Pc_torqenableType_MIN =
    Pc_vcu_205_Pc_torqenableType_Pc_torqenableType_MIN;
  static const Pc_torqenableType Pc_torqenableType_MAX =
    Pc_vcu_205_Pc_torqenableType_Pc_torqenableType_MAX;
  static const int Pc_torqenableType_ARRAYSIZE =
    Pc_vcu_205_Pc_torqenableType_Pc_torqenableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pc_torqenableType_descriptor() {
    return Pc_vcu_205_Pc_torqenableType_descriptor();
  }
  static inline const ::std::string& Pc_torqenableType_Name(Pc_torqenableType value) {
    return Pc_vcu_205_Pc_torqenableType_Name(value);
  }
  static inline bool Pc_torqenableType_Parse(const ::std::string& name,
      Pc_torqenableType* value) {
    return Pc_vcu_205_Pc_torqenableType_Parse(name, value);
  }

  typedef Pc_vcu_205_Pc_gearreqType Pc_gearreqType;
  static const Pc_gearreqType PC_GEARREQ_INVALID =
    Pc_vcu_205_Pc_gearreqType_PC_GEARREQ_INVALID;
  static const Pc_gearreqType PC_GEARREQ_DRIVE =
    Pc_vcu_205_Pc_gearreqType_PC_GEARREQ_DRIVE;
  static const Pc_gearreqType PC_GEARREQ_NEUTRAL =
    Pc_vcu_205_Pc_gearreqType_PC_GEARREQ_NEUTRAL;
  static const Pc_gearreqType PC_GEARREQ_REVERSE =
    Pc_vcu_205_Pc_gearreqType_PC_GEARREQ_REVERSE;
  static const Pc_gearreqType PC_GEARREQ_PARK =
    Pc_vcu_205_Pc_gearreqType_PC_GEARREQ_PARK;
  static inline bool Pc_gearreqType_IsValid(int value) {
    return Pc_vcu_205_Pc_gearreqType_IsValid(value);
  }
  static const Pc_gearreqType Pc_gearreqType_MIN =
    Pc_vcu_205_Pc_gearreqType_Pc_gearreqType_MIN;
  static const Pc_gearreqType Pc_gearreqType_MAX =
    Pc_vcu_205_Pc_gearreqType_Pc_gearreqType_MAX;
  static const int Pc_gearreqType_ARRAYSIZE =
    Pc_vcu_205_Pc_gearreqType_Pc_gearreqType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pc_gearreqType_descriptor() {
    return Pc_vcu_205_Pc_gearreqType_descriptor();
  }
  static inline const ::std::string& Pc_gearreqType_Name(Pc_gearreqType value) {
    return Pc_vcu_205_Pc_gearreqType_Name(value);
  }
  static inline bool Pc_gearreqType_Parse(const ::std::string& name,
      Pc_gearreqType* value) {
    return Pc_vcu_205_Pc_gearreqType_Parse(name, value);
  }

  typedef Pc_vcu_205_Pc_gearenableType Pc_gearenableType;
  static const Pc_gearenableType PC_GEARENABLE_DISABLE =
    Pc_vcu_205_Pc_gearenableType_PC_GEARENABLE_DISABLE;
  static const Pc_gearenableType PC_GEARENABLE_ENABLE =
    Pc_vcu_205_Pc_gearenableType_PC_GEARENABLE_ENABLE;
  static inline bool Pc_gearenableType_IsValid(int value) {
    return Pc_vcu_205_Pc_gearenableType_IsValid(value);
  }
  static const Pc_gearenableType Pc_gearenableType_MIN =
    Pc_vcu_205_Pc_gearenableType_Pc_gearenableType_MIN;
  static const Pc_gearenableType Pc_gearenableType_MAX =
    Pc_vcu_205_Pc_gearenableType_Pc_gearenableType_MAX;
  static const int Pc_gearenableType_ARRAYSIZE =
    Pc_vcu_205_Pc_gearenableType_Pc_gearenableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pc_gearenableType_descriptor() {
    return Pc_vcu_205_Pc_gearenableType_descriptor();
  }
  static inline const ::std::string& Pc_gearenableType_Name(Pc_gearenableType value) {
    return Pc_vcu_205_Pc_gearenableType_Name(value);
  }
  static inline bool Pc_gearenableType_Parse(const ::std::string& name,
      Pc_gearenableType* value) {
    return Pc_vcu_205_Pc_gearenableType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double pc_accpedreq = 1;
  bool has_pc_accpedreq() const;
  void clear_pc_accpedreq();
  static const int kPcAccpedreqFieldNumber = 1;
  double pc_accpedreq() const;
  void set_pc_accpedreq(double value);

  // optional double pc_torqreq = 3;
  bool has_pc_torqreq() const;
  void clear_pc_torqreq();
  static const int kPcTorqreqFieldNumber = 3;
  double pc_torqreq() const;
  void set_pc_torqreq(double value);

  // optional .apollo.canbus.Pc_vcu_205.Pc_accpedenableType pc_accpedenable = 2;
  bool has_pc_accpedenable() const;
  void clear_pc_accpedenable();
  static const int kPcAccpedenableFieldNumber = 2;
  ::apollo::canbus::Pc_vcu_205_Pc_accpedenableType pc_accpedenable() const;
  void set_pc_accpedenable(::apollo::canbus::Pc_vcu_205_Pc_accpedenableType value);

  // optional .apollo.canbus.Pc_vcu_205.Pc_torqenableType pc_torqenable = 4;
  bool has_pc_torqenable() const;
  void clear_pc_torqenable();
  static const int kPcTorqenableFieldNumber = 4;
  ::apollo::canbus::Pc_vcu_205_Pc_torqenableType pc_torqenable() const;
  void set_pc_torqenable(::apollo::canbus::Pc_vcu_205_Pc_torqenableType value);

  // optional .apollo.canbus.Pc_vcu_205.Pc_gearreqType pc_gearreq = 5;
  bool has_pc_gearreq() const;
  void clear_pc_gearreq();
  static const int kPcGearreqFieldNumber = 5;
  ::apollo::canbus::Pc_vcu_205_Pc_gearreqType pc_gearreq() const;
  void set_pc_gearreq(::apollo::canbus::Pc_vcu_205_Pc_gearreqType value);

  // optional .apollo.canbus.Pc_vcu_205.Pc_gearenableType pc_gearenable = 6;
  bool has_pc_gearenable() const;
  void clear_pc_gearenable();
  static const int kPcGearenableFieldNumber = 6;
  ::apollo::canbus::Pc_vcu_205_Pc_gearenableType pc_gearenable() const;
  void set_pc_gearenable(::apollo::canbus::Pc_vcu_205_Pc_gearenableType value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Pc_vcu_205)
 private:
  void set_has_pc_accpedreq();
  void clear_has_pc_accpedreq();
  void set_has_pc_accpedenable();
  void clear_has_pc_accpedenable();
  void set_has_pc_torqreq();
  void clear_has_pc_torqreq();
  void set_has_pc_torqenable();
  void clear_has_pc_torqenable();
  void set_has_pc_gearreq();
  void clear_has_pc_gearreq();
  void set_has_pc_gearenable();
  void clear_has_pc_gearenable();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double pc_accpedreq_;
  double pc_torqreq_;
  int pc_accpedenable_;
  int pc_torqenable_;
  int pc_gearreq_;
  int pc_gearenable_;
  friend struct ::protobuf_modules_2fcanbus_2fproto_2fge3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pc_eps_204 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Pc_eps_204) */ {
 public:
  Pc_eps_204();
  virtual ~Pc_eps_204();

  Pc_eps_204(const Pc_eps_204& from);

  inline Pc_eps_204& operator=(const Pc_eps_204& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pc_eps_204(Pc_eps_204&& from) noexcept
    : Pc_eps_204() {
    *this = ::std::move(from);
  }

  inline Pc_eps_204& operator=(Pc_eps_204&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pc_eps_204& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pc_eps_204* internal_default_instance() {
    return reinterpret_cast<const Pc_eps_204*>(
               &_Pc_eps_204_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Pc_eps_204* other);
  friend void swap(Pc_eps_204& a, Pc_eps_204& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pc_eps_204* New() const final {
    return CreateMaybeMessage<Pc_eps_204>(NULL);
  }

  Pc_eps_204* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pc_eps_204>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pc_eps_204& from);
  void MergeFrom(const Pc_eps_204& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pc_eps_204* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Pc_eps_204_Pc_steerenableType Pc_steerenableType;
  static const Pc_steerenableType PC_STEERENABLE_DISABLE =
    Pc_eps_204_Pc_steerenableType_PC_STEERENABLE_DISABLE;
  static const Pc_steerenableType PC_STEERENABLE_ENABLE =
    Pc_eps_204_Pc_steerenableType_PC_STEERENABLE_ENABLE;
  static inline bool Pc_steerenableType_IsValid(int value) {
    return Pc_eps_204_Pc_steerenableType_IsValid(value);
  }
  static const Pc_steerenableType Pc_steerenableType_MIN =
    Pc_eps_204_Pc_steerenableType_Pc_steerenableType_MIN;
  static const Pc_steerenableType Pc_steerenableType_MAX =
    Pc_eps_204_Pc_steerenableType_Pc_steerenableType_MAX;
  static const int Pc_steerenableType_ARRAYSIZE =
    Pc_eps_204_Pc_steerenableType_Pc_steerenableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pc_steerenableType_descriptor() {
    return Pc_eps_204_Pc_steerenableType_descriptor();
  }
  static inline const ::std::string& Pc_steerenableType_Name(Pc_steerenableType value) {
    return Pc_eps_204_Pc_steerenableType_Name(value);
  }
  static inline bool Pc_steerenableType_Parse(const ::std::string& name,
      Pc_steerenableType* value) {
    return Pc_eps_204_Pc_steerenableType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 pc_steerspdreq = 1;
  bool has_pc_steerspdreq() const;
  void clear_pc_steerspdreq();
  static const int kPcSteerspdreqFieldNumber = 1;
  ::google::protobuf::int32 pc_steerspdreq() const;
  void set_pc_steerspdreq(::google::protobuf::int32 value);

  // optional .apollo.canbus.Pc_eps_204.Pc_steerenableType pc_steerenable = 2;
  bool has_pc_steerenable() const;
  void clear_pc_steerenable();
  static const int kPcSteerenableFieldNumber = 2;
  ::apollo::canbus::Pc_eps_204_Pc_steerenableType pc_steerenable() const;
  void set_pc_steerenable(::apollo::canbus::Pc_eps_204_Pc_steerenableType value);

  // optional double pc_steerangreq = 3;
  bool has_pc_steerangreq() const;
  void clear_pc_steerangreq();
  static const int kPcSteerangreqFieldNumber = 3;
  double pc_steerangreq() const;
  void set_pc_steerangreq(double value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Pc_eps_204)
 private:
  void set_has_pc_steerspdreq();
  void clear_has_pc_steerspdreq();
  void set_has_pc_steerenable();
  void clear_has_pc_steerenable();
  void set_has_pc_steerangreq();
  void clear_has_pc_steerangreq();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 pc_steerspdreq_;
  int pc_steerenable_;
  double pc_steerangreq_;
  friend struct ::protobuf_modules_2fcanbus_2fproto_2fge3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Scu_vcu_2_313 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Scu_vcu_2_313) */ {
 public:
  Scu_vcu_2_313();
  virtual ~Scu_vcu_2_313();

  Scu_vcu_2_313(const Scu_vcu_2_313& from);

  inline Scu_vcu_2_313& operator=(const Scu_vcu_2_313& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Scu_vcu_2_313(Scu_vcu_2_313&& from) noexcept
    : Scu_vcu_2_313() {
    *this = ::std::move(from);
  }

  inline Scu_vcu_2_313& operator=(Scu_vcu_2_313&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scu_vcu_2_313& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scu_vcu_2_313* internal_default_instance() {
    return reinterpret_cast<const Scu_vcu_2_313*>(
               &_Scu_vcu_2_313_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Scu_vcu_2_313* other);
  friend void swap(Scu_vcu_2_313& a, Scu_vcu_2_313& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Scu_vcu_2_313* New() const final {
    return CreateMaybeMessage<Scu_vcu_2_313>(NULL);
  }

  Scu_vcu_2_313* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Scu_vcu_2_313>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Scu_vcu_2_313& from);
  void MergeFrom(const Scu_vcu_2_313& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scu_vcu_2_313* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double vcu_torqposmax = 1;
  bool has_vcu_torqposmax() const;
  void clear_vcu_torqposmax();
  static const int kVcuTorqposmaxFieldNumber = 1;
  double vcu_torqposmax() const;
  void set_vcu_torqposmax(double value);

  // optional double vcu_torqnegmax = 2;
  bool has_vcu_torqnegmax() const;
  void clear_vcu_torqnegmax();
  static const int kVcuTorqnegmaxFieldNumber = 2;
  double vcu_torqnegmax() const;
  void set_vcu_torqnegmax(double value);

  // optional double vcu_torqact = 3;
  bool has_vcu_torqact() const;
  void clear_vcu_torqact();
  static const int kVcuTorqactFieldNumber = 3;
  double vcu_torqact() const;
  void set_vcu_torqact(double value);

  // optional int32 vcu_engspd = 4;
  bool has_vcu_engspd() const;
  void clear_vcu_engspd();
  static const int kVcuEngspdFieldNumber = 4;
  ::google::protobuf::int32 vcu_engspd() const;
  void set_vcu_engspd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Scu_vcu_2_313)
 private:
  void set_has_vcu_torqposmax();
  void clear_has_vcu_torqposmax();
  void set_has_vcu_torqnegmax();
  void clear_has_vcu_torqnegmax();
  void set_has_vcu_torqact();
  void clear_has_vcu_torqact();
  void set_has_vcu_engspd();
  void clear_has_vcu_engspd();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double vcu_torqposmax_;
  double vcu_torqnegmax_;
  double vcu_torqact_;
  ::google::protobuf::int32 vcu_engspd_;
  friend struct ::protobuf_modules_2fcanbus_2fproto_2fge3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Scu_1_301 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Scu_1_301) */ {
 public:
  Scu_1_301();
  virtual ~Scu_1_301();

  Scu_1_301(const Scu_1_301& from);

  inline Scu_1_301& operator=(const Scu_1_301& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Scu_1_301(Scu_1_301&& from) noexcept
    : Scu_1_301() {
    *this = ::std::move(from);
  }

  inline Scu_1_301& operator=(Scu_1_301&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scu_1_301& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scu_1_301* internal_default_instance() {
    return reinterpret_cast<const Scu_1_301*>(
               &_Scu_1_301_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Scu_1_301* other);
  friend void swap(Scu_1_301& a, Scu_1_301& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Scu_1_301* New() const final {
    return CreateMaybeMessage<Scu_1_301>(NULL);
  }

  Scu_1_301* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Scu_1_301>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Scu_1_301& from);
  void MergeFrom(const Scu_1_301& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scu_1_301* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Scu_1_301_Scu_stopbutstType Scu_stopbutstType;
  static const Scu_stopbutstType SCU_STOPBUTST_UNPRESSED =
    Scu_1_301_Scu_stopbutstType_SCU_STOPBUTST_UNPRESSED;
  static const Scu_stopbutstType SCU_STOPBUTST_PRESSED =
    Scu_1_301_Scu_stopbutstType_SCU_STOPBUTST_PRESSED;
  static inline bool Scu_stopbutstType_IsValid(int value) {
    return Scu_1_301_Scu_stopbutstType_IsValid(value);
  }
  static const Scu_stopbutstType Scu_stopbutstType_MIN =
    Scu_1_301_Scu_stopbutstType_Scu_stopbutstType_MIN;
  static const Scu_stopbutstType Scu_stopbutstType_MAX =
    Scu_1_301_Scu_stopbutstType_Scu_stopbutstType_MAX;
  static const int Scu_stopbutstType_ARRAYSIZE =
    Scu_1_301_Scu_stopbutstType_Scu_stopbutstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Scu_stopbutstType_descriptor() {
    return Scu_1_301_Scu_stopbutstType_descriptor();
  }
  static inline const ::std::string& Scu_stopbutstType_Name(Scu_stopbutstType value) {
    return Scu_1_301_Scu_stopbutstType_Name(value);
  }
  static inline bool Scu_stopbutstType_Parse(const ::std::string& name,
      Scu_stopbutstType* value) {
    return Scu_1_301_Scu_stopbutstType_Parse(name, value);
  }

  typedef Scu_1_301_Scu_drvmodeType Scu_drvmodeType;
  static const Scu_drvmodeType SCU_DRVMODE_INVALID =
    Scu_1_301_Scu_drvmodeType_SCU_DRVMODE_INVALID;
  static const Scu_drvmodeType SCU_DRVMODE_MANUAL =
    Scu_1_301_Scu_drvmodeType_SCU_DRVMODE_MANUAL;
  static const Scu_drvmodeType SCU_DRVMODE_INTERRUPT =
    Scu_1_301_Scu_drvmodeType_SCU_DRVMODE_INTERRUPT;
  static const Scu_drvmodeType SCU_DRVMODE_AUTO =
    Scu_1_301_Scu_drvmodeType_SCU_DRVMODE_AUTO;
  static inline bool Scu_drvmodeType_IsValid(int value) {
    return Scu_1_301_Scu_drvmodeType_IsValid(value);
  }
  static const Scu_drvmodeType Scu_drvmodeType_MIN =
    Scu_1_301_Scu_drvmodeType_Scu_drvmodeType_MIN;
  static const Scu_drvmodeType Scu_drvmodeType_MAX =
    Scu_1_301_Scu_drvmodeType_Scu_drvmodeType_MAX;
  static const int Scu_drvmodeType_ARRAYSIZE =
    Scu_1_301_Scu_drvmodeType_Scu_drvmodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Scu_drvmodeType_descriptor() {
    return Scu_1_301_Scu_drvmodeType_descriptor();
  }
  static inline const ::std::string& Scu_drvmodeType_Name(Scu_drvmodeType value) {
    return Scu_1_301_Scu_drvmodeType_Name(value);
  }
  static inline bool Scu_drvmodeType_Parse(const ::std::string& name,
      Scu_drvmodeType* value) {
    return Scu_1_301_Scu_drvmodeType_Parse(name, value);
  }

  typedef Scu_1_301_Scu_faultstType Scu_faultstType;
  static const Scu_faultstType SCU_FAULTST_NORMAL =
    Scu_1_301_Scu_faultstType_SCU_FAULTST_NORMAL;
  static const Scu_faultstType SCU_FAULTST_FAULT =
    Scu_1_301_Scu_faultstType_SCU_FAULTST_FAULT;
  static inline bool Scu_faultstType_IsValid(int value) {
    return Scu_1_301_Scu_faultstType_IsValid(value);
  }
  static const Scu_faultstType Scu_faultstType_MIN =
    Scu_1_301_Scu_faultstType_Scu_faultstType_MIN;
  static const Scu_faultstType Scu_faultstType_MAX =
    Scu_1_301_Scu_faultstType_Scu_faultstType_MAX;
  static const int Scu_faultstType_ARRAYSIZE =
    Scu_1_301_Scu_faultstType_Scu_faultstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Scu_faultstType_descriptor() {
    return Scu_1_301_Scu_faultstType_descriptor();
  }
  static inline const ::std::string& Scu_faultstType_Name(Scu_faultstType value) {
    return Scu_1_301_Scu_faultstType_Name(value);
  }
  static inline bool Scu_faultstType_Parse(const ::std::string& name,
      Scu_faultstType* value) {
    return Scu_1_301_Scu_faultstType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 vin16 = 1;
  bool has_vin16() const;
  void clear_vin16();
  static const int kVin16FieldNumber = 1;
  ::google::protobuf::int32 vin16() const;
  void set_vin16(::google::protobuf::int32 value);

  // optional .apollo.canbus.Scu_1_301.Scu_stopbutstType scu_stopbutst = 2;
  bool has_scu_stopbutst() const;
  void clear_scu_stopbutst();
  static const int kScuStopbutstFieldNumber = 2;
  ::apollo::canbus::Scu_1_301_Scu_stopbutstType scu_stopbutst() const;
  void set_scu_stopbutst(::apollo::canbus::Scu_1_301_Scu_stopbutstType value);

  // optional .apollo.canbus.Scu_1_301.Scu_drvmodeType scu_drvmode = 3;
  bool has_scu_drvmode() const;
  void clear_scu_drvmode();
  static const int kScuDrvmodeFieldNumber = 3;
  ::apollo::canbus::Scu_1_301_Scu_drvmodeType scu_drvmode() const;
  void set_scu_drvmode(::apollo::canbus::Scu_1_301_Scu_drvmodeType value);

  // optional .apollo.canbus.Scu_1_301.Scu_faultstType scu_faultst = 4;
  bool has_scu_faultst() const;
  void clear_scu_faultst();
  static const int kScuFaultstFieldNumber = 4;
  ::apollo::canbus::Scu_1_301_Scu_faultstType scu_faultst() const;
  void set_scu_faultst(::apollo::canbus::Scu_1_301_Scu_faultstType value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Scu_1_301)
 private:
  void set_has_vin16();
  void clear_has_vin16();
  void set_has_scu_stopbutst();
  void clear_has_scu_stopbutst();
  void set_has_scu_drvmode();
  void clear_has_scu_drvmode();
  void set_has_scu_faultst();
  void clear_has_scu_faultst();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 vin16_;
  int scu_stopbutst_;
  int scu_drvmode_;
  int scu_faultst_;
  friend struct ::protobuf_modules_2fcanbus_2fproto_2fge3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Scu_2_302 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Scu_2_302) */ {
 public:
  Scu_2_302();
  virtual ~Scu_2_302();

  Scu_2_302(const Scu_2_302& from);

  inline Scu_2_302& operator=(const Scu_2_302& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Scu_2_302(Scu_2_302&& from) noexcept
    : Scu_2_302() {
    *this = ::std::move(from);
  }

  inline Scu_2_302& operator=(Scu_2_302&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scu_2_302& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scu_2_302* internal_default_instance() {
    return reinterpret_cast<const Scu_2_302*>(
               &_Scu_2_302_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Scu_2_302* other);
  friend void swap(Scu_2_302& a, Scu_2_302& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Scu_2_302* New() const final {
    return CreateMaybeMessage<Scu_2_302>(NULL);
  }

  Scu_2_302* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Scu_2_302>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Scu_2_302& from);
  void MergeFrom(const Scu_2_302& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scu_2_302* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 vin07 = 1;
  bool has_vin07() const;
  void clear_vin07();
  static const int kVin07FieldNumber = 1;
  ::google::protobuf::int32 vin07() const;
  void set_vin07(::google::protobuf::int32 value);

  // optional int32 vin06 = 2;
  bool has_vin06() const;
  void clear_vin06();
  static const int kVin06FieldNumber = 2;
  ::google::protobuf::int32 vin06() const;
  void set_vin06(::google::protobuf::int32 value);

  // optional int32 vin05 = 3;
  bool has_vin05() const;
  void clear_vin05();
  static const int kVin05FieldNumber = 3;
  ::google::protobuf::int32 vin05() const;
  void set_vin05(::google::protobuf::int32 value);

  // optional int32 vin04 = 4;
  bool has_vin04() const;
  void clear_vin04();
  static const int kVin04FieldNumber = 4;
  ::google::protobuf::int32 vin04() const;
  void set_vin04(::google::protobuf::int32 value);

  // optional int32 vin03 = 5;
  bool has_vin03() const;
  void clear_vin03();
  static const int kVin03FieldNumber = 5;
  ::google::protobuf::int32 vin03() const;
  void set_vin03(::google::protobuf::int32 value);

  // optional int32 vin02 = 6;
  bool has_vin02() const;
  void clear_vin02();
  static const int kVin02FieldNumber = 6;
  ::google::protobuf::int32 vin02() const;
  void set_vin02(::google::protobuf::int32 value);

  // optional int32 vin01 = 7;
  bool has_vin01() const;
  void clear_vin01();
  static const int kVin01FieldNumber = 7;
  ::google::protobuf::int32 vin01() const;
  void set_vin01(::google::protobuf::int32 value);

  // optional int32 vin00 = 8;
  bool has_vin00() const;
  void clear_vin00();
  static const int kVin00FieldNumber = 8;
  ::google::protobuf::int32 vin00() const;
  void set_vin00(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Scu_2_302)
 private:
  void set_has_vin07();
  void clear_has_vin07();
  void set_has_vin06();
  void clear_has_vin06();
  void set_has_vin05();
  void clear_has_vin05();
  void set_has_vin04();
  void clear_has_vin04();
  void set_has_vin03();
  void clear_has_vin03();
  void set_has_vin02();
  void clear_has_vin02();
  void set_has_vin01();
  void clear_has_vin01();
  void set_has_vin00();
  void clear_has_vin00();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 vin07_;
  ::google::protobuf::int32 vin06_;
  ::google::protobuf::int32 vin05_;
  ::google::protobuf::int32 vin04_;
  ::google::protobuf::int32 vin03_;
  ::google::protobuf::int32 vin02_;
  ::google::protobuf::int32 vin01_;
  ::google::protobuf::int32 vin00_;
  friend struct ::protobuf_modules_2fcanbus_2fproto_2fge3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Scu_3_303 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Scu_3_303) */ {
 public:
  Scu_3_303();
  virtual ~Scu_3_303();

  Scu_3_303(const Scu_3_303& from);

  inline Scu_3_303& operator=(const Scu_3_303& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Scu_3_303(Scu_3_303&& from) noexcept
    : Scu_3_303() {
    *this = ::std::move(from);
  }

  inline Scu_3_303& operator=(Scu_3_303&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scu_3_303& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scu_3_303* internal_default_instance() {
    return reinterpret_cast<const Scu_3_303*>(
               &_Scu_3_303_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Scu_3_303* other);
  friend void swap(Scu_3_303& a, Scu_3_303& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Scu_3_303* New() const final {
    return CreateMaybeMessage<Scu_3_303>(NULL);
  }

  Scu_3_303* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Scu_3_303>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Scu_3_303& from);
  void MergeFrom(const Scu_3_303& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scu_3_303* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 vin15 = 1;
  bool has_vin15() const;
  void clear_vin15();
  static const int kVin15FieldNumber = 1;
  ::google::protobuf::int32 vin15() const;
  void set_vin15(::google::protobuf::int32 value);

  // optional int32 vin14 = 2;
  bool has_vin14() const;
  void clear_vin14();
  static const int kVin14FieldNumber = 2;
  ::google::protobuf::int32 vin14() const;
  void set_vin14(::google::protobuf::int32 value);

  // optional int32 vin13 = 3;
  bool has_vin13() const;
  void clear_vin13();
  static const int kVin13FieldNumber = 3;
  ::google::protobuf::int32 vin13() const;
  void set_vin13(::google::protobuf::int32 value);

  // optional int32 vin12 = 4;
  bool has_vin12() const;
  void clear_vin12();
  static const int kVin12FieldNumber = 4;
  ::google::protobuf::int32 vin12() const;
  void set_vin12(::google::protobuf::int32 value);

  // optional int32 vin11 = 5;
  bool has_vin11() const;
  void clear_vin11();
  static const int kVin11FieldNumber = 5;
  ::google::protobuf::int32 vin11() const;
  void set_vin11(::google::protobuf::int32 value);

  // optional int32 vin10 = 6;
  bool has_vin10() const;
  void clear_vin10();
  static const int kVin10FieldNumber = 6;
  ::google::protobuf::int32 vin10() const;
  void set_vin10(::google::protobuf::int32 value);

  // optional int32 vin09 = 7;
  bool has_vin09() const;
  void clear_vin09();
  static const int kVin09FieldNumber = 7;
  ::google::protobuf::int32 vin09() const;
  void set_vin09(::google::protobuf::int32 value);

  // optional int32 vin08 = 8;
  bool has_vin08() const;
  void clear_vin08();
  static const int kVin08FieldNumber = 8;
  ::google::protobuf::int32 vin08() const;
  void set_vin08(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Scu_3_303)
 private:
  void set_has_vin15();
  void clear_has_vin15();
  void set_has_vin14();
  void clear_has_vin14();
  void set_has_vin13();
  void clear_has_vin13();
  void set_has_vin12();
  void clear_has_vin12();
  void set_has_vin11();
  void clear_has_vin11();
  void set_has_vin10();
  void clear_has_vin10();
  void set_has_vin09();
  void clear_has_vin09();
  void set_has_vin08();
  void clear_has_vin08();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 vin15_;
  ::google::protobuf::int32 vin14_;
  ::google::protobuf::int32 vin13_;
  ::google::protobuf::int32 vin12_;
  ::google::protobuf::int32 vin11_;
  ::google::protobuf::int32 vin10_;
  ::google::protobuf::int32 vin09_;
  ::google::protobuf::int32 vin08_;
  friend struct ::protobuf_modules_2fcanbus_2fproto_2fge3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Scu_bcm_304 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Scu_bcm_304) */ {
 public:
  Scu_bcm_304();
  virtual ~Scu_bcm_304();

  Scu_bcm_304(const Scu_bcm_304& from);

  inline Scu_bcm_304& operator=(const Scu_bcm_304& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Scu_bcm_304(Scu_bcm_304&& from) noexcept
    : Scu_bcm_304() {
    *this = ::std::move(from);
  }

  inline Scu_bcm_304& operator=(Scu_bcm_304&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scu_bcm_304& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scu_bcm_304* internal_default_instance() {
    return reinterpret_cast<const Scu_bcm_304*>(
               &_Scu_bcm_304_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Scu_bcm_304* other);
  friend void swap(Scu_bcm_304& a, Scu_bcm_304& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Scu_bcm_304* New() const final {
    return CreateMaybeMessage<Scu_bcm_304>(NULL);
  }

  Scu_bcm_304* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Scu_bcm_304>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Scu_bcm_304& from);
  void MergeFrom(const Scu_bcm_304& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scu_bcm_304* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Scu_bcm_304_Bcm_vehreversestType Bcm_vehreversestType;
  static const Bcm_vehreversestType BCM_VEHREVERSEST_NORMAL =
    Scu_bcm_304_Bcm_vehreversestType_BCM_VEHREVERSEST_NORMAL;
  static const Bcm_vehreversestType BCM_VEHREVERSEST_REVERSE =
    Scu_bcm_304_Bcm_vehreversestType_BCM_VEHREVERSEST_REVERSE;
  static inline bool Bcm_vehreversestType_IsValid(int value) {
    return Scu_bcm_304_Bcm_vehreversestType_IsValid(value);
  }
  static const Bcm_vehreversestType Bcm_vehreversestType_MIN =
    Scu_bcm_304_Bcm_vehreversestType_Bcm_vehreversestType_MIN;
  static const Bcm_vehreversestType Bcm_vehreversestType_MAX =
    Scu_bcm_304_Bcm_vehreversestType_Bcm_vehreversestType_MAX;
  static const int Bcm_vehreversestType_ARRAYSIZE =
    Scu_bcm_304_Bcm_vehreversestType_Bcm_vehreversestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_vehreversestType_descriptor() {
    return Scu_bcm_304_Bcm_vehreversestType_descriptor();
  }
  static inline const ::std::string& Bcm_vehreversestType_Name(Bcm_vehreversestType value) {
    return Scu_bcm_304_Bcm_vehreversestType_Name(value);
  }
  static inline bool Bcm_vehreversestType_Parse(const ::std::string& name,
      Bcm_vehreversestType* value) {
    return Scu_bcm_304_Bcm_vehreversestType_Parse(name, value);
  }

  typedef Scu_bcm_304_Bcm_rightturnlampstType Bcm_rightturnlampstType;
  static const Bcm_rightturnlampstType BCM_RIGHTTURNLAMPST_INACTIVE =
    Scu_bcm_304_Bcm_rightturnlampstType_BCM_RIGHTTURNLAMPST_INACTIVE;
  static const Bcm_rightturnlampstType BCM_RIGHTTURNLAMPST_ACTIVE =
    Scu_bcm_304_Bcm_rightturnlampstType_BCM_RIGHTTURNLAMPST_ACTIVE;
  static inline bool Bcm_rightturnlampstType_IsValid(int value) {
    return Scu_bcm_304_Bcm_rightturnlampstType_IsValid(value);
  }
  static const Bcm_rightturnlampstType Bcm_rightturnlampstType_MIN =
    Scu_bcm_304_Bcm_rightturnlampstType_Bcm_rightturnlampstType_MIN;
  static const Bcm_rightturnlampstType Bcm_rightturnlampstType_MAX =
    Scu_bcm_304_Bcm_rightturnlampstType_Bcm_rightturnlampstType_MAX;
  static const int Bcm_rightturnlampstType_ARRAYSIZE =
    Scu_bcm_304_Bcm_rightturnlampstType_Bcm_rightturnlampstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_rightturnlampstType_descriptor() {
    return Scu_bcm_304_Bcm_rightturnlampstType_descriptor();
  }
  static inline const ::std::string& Bcm_rightturnlampstType_Name(Bcm_rightturnlampstType value) {
    return Scu_bcm_304_Bcm_rightturnlampstType_Name(value);
  }
  static inline bool Bcm_rightturnlampstType_Parse(const ::std::string& name,
      Bcm_rightturnlampstType* value) {
    return Scu_bcm_304_Bcm_rightturnlampstType_Parse(name, value);
  }

  typedef Scu_bcm_304_Bcm_rearfoglampstType Bcm_rearfoglampstType;
  static const Bcm_rearfoglampstType BCM_REARFOGLAMPST_INACTIVE =
    Scu_bcm_304_Bcm_rearfoglampstType_BCM_REARFOGLAMPST_INACTIVE;
  static const Bcm_rearfoglampstType BCM_REARFOGLAMPST_ACTIVE =
    Scu_bcm_304_Bcm_rearfoglampstType_BCM_REARFOGLAMPST_ACTIVE;
  static inline bool Bcm_rearfoglampstType_IsValid(int value) {
    return Scu_bcm_304_Bcm_rearfoglampstType_IsValid(value);
  }
  static const Bcm_rearfoglampstType Bcm_rearfoglampstType_MIN =
    Scu_bcm_304_Bcm_rearfoglampstType_Bcm_rearfoglampstType_MIN;
  static const Bcm_rearfoglampstType Bcm_rearfoglampstType_MAX =
    Scu_bcm_304_Bcm_rearfoglampstType_Bcm_rearfoglampstType_MAX;
  static const int Bcm_rearfoglampstType_ARRAYSIZE =
    Scu_bcm_304_Bcm_rearfoglampstType_Bcm_rearfoglampstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_rearfoglampstType_descriptor() {
    return Scu_bcm_304_Bcm_rearfoglampstType_descriptor();
  }
  static inline const ::std::string& Bcm_rearfoglampstType_Name(Bcm_rearfoglampstType value) {
    return Scu_bcm_304_Bcm_rearfoglampstType_Name(value);
  }
  static inline bool Bcm_rearfoglampstType_Parse(const ::std::string& name,
      Bcm_rearfoglampstType* value) {
    return Scu_bcm_304_Bcm_rearfoglampstType_Parse(name, value);
  }

  typedef Scu_bcm_304_Bcm_parkinglampstType Bcm_parkinglampstType;
  static const Bcm_parkinglampstType BCM_PARKINGLAMPST_INACTIVE =
    Scu_bcm_304_Bcm_parkinglampstType_BCM_PARKINGLAMPST_INACTIVE;
  static const Bcm_parkinglampstType BCM_PARKINGLAMPST_ACTIVE =
    Scu_bcm_304_Bcm_parkinglampstType_BCM_PARKINGLAMPST_ACTIVE;
  static inline bool Bcm_parkinglampstType_IsValid(int value) {
    return Scu_bcm_304_Bcm_parkinglampstType_IsValid(value);
  }
  static const Bcm_parkinglampstType Bcm_parkinglampstType_MIN =
    Scu_bcm_304_Bcm_parkinglampstType_Bcm_parkinglampstType_MIN;
  static const Bcm_parkinglampstType Bcm_parkinglampstType_MAX =
    Scu_bcm_304_Bcm_parkinglampstType_Bcm_parkinglampstType_MAX;
  static const int Bcm_parkinglampstType_ARRAYSIZE =
    Scu_bcm_304_Bcm_parkinglampstType_Bcm_parkinglampstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_parkinglampstType_descriptor() {
    return Scu_bcm_304_Bcm_parkinglampstType_descriptor();
  }
  static inline const ::std::string& Bcm_parkinglampstType_Name(Bcm_parkinglampstType value) {
    return Scu_bcm_304_Bcm_parkinglampstType_Name(value);
  }
  static inline bool Bcm_parkinglampstType_Parse(const ::std::string& name,
      Bcm_parkinglampstType* value) {
    return Scu_bcm_304_Bcm_parkinglampstType_Parse(name, value);
  }

  typedef Scu_bcm_304_Bcm_lowbeamstType Bcm_lowbeamstType;
  static const Bcm_lowbeamstType BCM_LOWBEAMST_INACTIVE =
    Scu_bcm_304_Bcm_lowbeamstType_BCM_LOWBEAMST_INACTIVE;
  static const Bcm_lowbeamstType BCM_LOWBEAMST_ACTIVE =
    Scu_bcm_304_Bcm_lowbeamstType_BCM_LOWBEAMST_ACTIVE;
  static inline bool Bcm_lowbeamstType_IsValid(int value) {
    return Scu_bcm_304_Bcm_lowbeamstType_IsValid(value);
  }
  static const Bcm_lowbeamstType Bcm_lowbeamstType_MIN =
    Scu_bcm_304_Bcm_lowbeamstType_Bcm_lowbeamstType_MIN;
  static const Bcm_lowbeamstType Bcm_lowbeamstType_MAX =
    Scu_bcm_304_Bcm_lowbeamstType_Bcm_lowbeamstType_MAX;
  static const int Bcm_lowbeamstType_ARRAYSIZE =
    Scu_bcm_304_Bcm_lowbeamstType_Bcm_lowbeamstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_lowbeamstType_descriptor() {
    return Scu_bcm_304_Bcm_lowbeamstType_descriptor();
  }
  static inline const ::std::string& Bcm_lowbeamstType_Name(Bcm_lowbeamstType value) {
    return Scu_bcm_304_Bcm_lowbeamstType_Name(value);
  }
  static inline bool Bcm_lowbeamstType_Parse(const ::std::string& name,
      Bcm_lowbeamstType* value) {
    return Scu_bcm_304_Bcm_lowbeamstType_Parse(name, value);
  }

  typedef Scu_bcm_304_Bcm_leftturnlampstType Bcm_leftturnlampstType;
  static const Bcm_leftturnlampstType BCM_LEFTTURNLAMPST_INACTIVE =
    Scu_bcm_304_Bcm_leftturnlampstType_BCM_LEFTTURNLAMPST_INACTIVE;
  static const Bcm_leftturnlampstType BCM_LEFTTURNLAMPST_ACTIVE =
    Scu_bcm_304_Bcm_leftturnlampstType_BCM_LEFTTURNLAMPST_ACTIVE;
  static inline bool Bcm_leftturnlampstType_IsValid(int value) {
    return Scu_bcm_304_Bcm_leftturnlampstType_IsValid(value);
  }
  static const Bcm_leftturnlampstType Bcm_leftturnlampstType_MIN =
    Scu_bcm_304_Bcm_leftturnlampstType_Bcm_leftturnlampstType_MIN;
  static const Bcm_leftturnlampstType Bcm_leftturnlampstType_MAX =
    Scu_bcm_304_Bcm_leftturnlampstType_Bcm_leftturnlampstType_MAX;
  static const int Bcm_leftturnlampstType_ARRAYSIZE =
    Scu_bcm_304_Bcm_leftturnlampstType_Bcm_leftturnlampstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_leftturnlampstType_descriptor() {
    return Scu_bcm_304_Bcm_leftturnlampstType_descriptor();
  }
  static inline const ::std::string& Bcm_leftturnlampstType_Name(Bcm_leftturnlampstType value) {
    return Scu_bcm_304_Bcm_leftturnlampstType_Name(value);
  }
  static inline bool Bcm_leftturnlampstType_Parse(const ::std::string& name,
      Bcm_leftturnlampstType* value) {
    return Scu_bcm_304_Bcm_leftturnlampstType_Parse(name, value);
  }

  typedef Scu_bcm_304_Bcm_keystType Bcm_keystType;
  static const Bcm_keystType BCM_KEYST_OFF =
    Scu_bcm_304_Bcm_keystType_BCM_KEYST_OFF;
  static const Bcm_keystType BCM_KEYST_ACC =
    Scu_bcm_304_Bcm_keystType_BCM_KEYST_ACC;
  static const Bcm_keystType BCM_KEYST_ON =
    Scu_bcm_304_Bcm_keystType_BCM_KEYST_ON;
  static const Bcm_keystType BCM_KEYST_CRANK =
    Scu_bcm_304_Bcm_keystType_BCM_KEYST_CRANK;
  static inline bool Bcm_keystType_IsValid(int value) {
    return Scu_bcm_304_Bcm_keystType_IsValid(value);
  }
  static const Bcm_keystType Bcm_keystType_MIN =
    Scu_bcm_304_Bcm_keystType_Bcm_keystType_MIN;
  static const Bcm_keystType Bcm_keystType_MAX =
    Scu_bcm_304_Bcm_keystType_Bcm_keystType_MAX;
  static const int Bcm_keystType_ARRAYSIZE =
    Scu_bcm_304_Bcm_keystType_Bcm_keystType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_keystType_descriptor() {
    return Scu_bcm_304_Bcm_keystType_descriptor();
  }
  static inline const ::std::string& Bcm_keystType_Name(Bcm_keystType value) {
    return Scu_bcm_304_Bcm_keystType_Name(value);
  }
  static inline bool Bcm_keystType_Parse(const ::std::string& name,
      Bcm_keystType* value) {
    return Scu_bcm_304_Bcm_keystType_Parse(name, value);
  }

  typedef Scu_bcm_304_Bcm_hornstType Bcm_hornstType;
  static const Bcm_hornstType BCM_HORNST_INACTIVE =
    Scu_bcm_304_Bcm_hornstType_BCM_HORNST_INACTIVE;
  static const Bcm_hornstType BCM_HORNST_ACTIVE =
    Scu_bcm_304_Bcm_hornstType_BCM_HORNST_ACTIVE;
  static inline bool Bcm_hornstType_IsValid(int value) {
    return Scu_bcm_304_Bcm_hornstType_IsValid(value);
  }
  static const Bcm_hornstType Bcm_hornstType_MIN =
    Scu_bcm_304_Bcm_hornstType_Bcm_hornstType_MIN;
  static const Bcm_hornstType Bcm_hornstType_MAX =
    Scu_bcm_304_Bcm_hornstType_Bcm_hornstType_MAX;
  static const int Bcm_hornstType_ARRAYSIZE =
    Scu_bcm_304_Bcm_hornstType_Bcm_hornstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_hornstType_descriptor() {
    return Scu_bcm_304_Bcm_hornstType_descriptor();
  }
  static inline const ::std::string& Bcm_hornstType_Name(Bcm_hornstType value) {
    return Scu_bcm_304_Bcm_hornstType_Name(value);
  }
  static inline bool Bcm_hornstType_Parse(const ::std::string& name,
      Bcm_hornstType* value) {
    return Scu_bcm_304_Bcm_hornstType_Parse(name, value);
  }

  typedef Scu_bcm_304_Bcm_highbeamstType Bcm_highbeamstType;
  static const Bcm_highbeamstType BCM_HIGHBEAMST_INACTIVE =
    Scu_bcm_304_Bcm_highbeamstType_BCM_HIGHBEAMST_INACTIVE;
  static const Bcm_highbeamstType BCM_HIGHBEAMST_ACTIVE =
    Scu_bcm_304_Bcm_highbeamstType_BCM_HIGHBEAMST_ACTIVE;
  static inline bool Bcm_highbeamstType_IsValid(int value) {
    return Scu_bcm_304_Bcm_highbeamstType_IsValid(value);
  }
  static const Bcm_highbeamstType Bcm_highbeamstType_MIN =
    Scu_bcm_304_Bcm_highbeamstType_Bcm_highbeamstType_MIN;
  static const Bcm_highbeamstType Bcm_highbeamstType_MAX =
    Scu_bcm_304_Bcm_highbeamstType_Bcm_highbeamstType_MAX;
  static const int Bcm_highbeamstType_ARRAYSIZE =
    Scu_bcm_304_Bcm_highbeamstType_Bcm_highbeamstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_highbeamstType_descriptor() {
    return Scu_bcm_304_Bcm_highbeamstType_descriptor();
  }
  static inline const ::std::string& Bcm_highbeamstType_Name(Bcm_highbeamstType value) {
    return Scu_bcm_304_Bcm_highbeamstType_Name(value);
  }
  static inline bool Bcm_highbeamstType_Parse(const ::std::string& name,
      Bcm_highbeamstType* value) {
    return Scu_bcm_304_Bcm_highbeamstType_Parse(name, value);
  }

  typedef Scu_bcm_304_Bcm_hazardlampstType Bcm_hazardlampstType;
  static const Bcm_hazardlampstType BCM_HAZARDLAMPST_INACTIVE =
    Scu_bcm_304_Bcm_hazardlampstType_BCM_HAZARDLAMPST_INACTIVE;
  static const Bcm_hazardlampstType BCM_HAZARDLAMPST_ACTIVE =
    Scu_bcm_304_Bcm_hazardlampstType_BCM_HAZARDLAMPST_ACTIVE;
  static inline bool Bcm_hazardlampstType_IsValid(int value) {
    return Scu_bcm_304_Bcm_hazardlampstType_IsValid(value);
  }
  static const Bcm_hazardlampstType Bcm_hazardlampstType_MIN =
    Scu_bcm_304_Bcm_hazardlampstType_Bcm_hazardlampstType_MIN;
  static const Bcm_hazardlampstType Bcm_hazardlampstType_MAX =
    Scu_bcm_304_Bcm_hazardlampstType_Bcm_hazardlampstType_MAX;
  static const int Bcm_hazardlampstType_ARRAYSIZE =
    Scu_bcm_304_Bcm_hazardlampstType_Bcm_hazardlampstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_hazardlampstType_descriptor() {
    return Scu_bcm_304_Bcm_hazardlampstType_descriptor();
  }
  static inline const ::std::string& Bcm_hazardlampstType_Name(Bcm_hazardlampstType value) {
    return Scu_bcm_304_Bcm_hazardlampstType_Name(value);
  }
  static inline bool Bcm_hazardlampstType_Parse(const ::std::string& name,
      Bcm_hazardlampstType* value) {
    return Scu_bcm_304_Bcm_hazardlampstType_Parse(name, value);
  }

  typedef Scu_bcm_304_Bcm_frontfoglampstType Bcm_frontfoglampstType;
  static const Bcm_frontfoglampstType BCM_FRONTFOGLAMPST_INACTIVE =
    Scu_bcm_304_Bcm_frontfoglampstType_BCM_FRONTFOGLAMPST_INACTIVE;
  static const Bcm_frontfoglampstType BCM_FRONTFOGLAMPST_ACTIVE =
    Scu_bcm_304_Bcm_frontfoglampstType_BCM_FRONTFOGLAMPST_ACTIVE;
  static inline bool Bcm_frontfoglampstType_IsValid(int value) {
    return Scu_bcm_304_Bcm_frontfoglampstType_IsValid(value);
  }
  static const Bcm_frontfoglampstType Bcm_frontfoglampstType_MIN =
    Scu_bcm_304_Bcm_frontfoglampstType_Bcm_frontfoglampstType_MIN;
  static const Bcm_frontfoglampstType Bcm_frontfoglampstType_MAX =
    Scu_bcm_304_Bcm_frontfoglampstType_Bcm_frontfoglampstType_MAX;
  static const int Bcm_frontfoglampstType_ARRAYSIZE =
    Scu_bcm_304_Bcm_frontfoglampstType_Bcm_frontfoglampstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_frontfoglampstType_descriptor() {
    return Scu_bcm_304_Bcm_frontfoglampstType_descriptor();
  }
  static inline const ::std::string& Bcm_frontfoglampstType_Name(Bcm_frontfoglampstType value) {
    return Scu_bcm_304_Bcm_frontfoglampstType_Name(value);
  }
  static inline bool Bcm_frontfoglampstType_Parse(const ::std::string& name,
      Bcm_frontfoglampstType* value) {
    return Scu_bcm_304_Bcm_frontfoglampstType_Parse(name, value);
  }

  typedef Scu_bcm_304_Bcm_brakelightswitchstType Bcm_brakelightswitchstType;
  static const Bcm_brakelightswitchstType BCM_BRAKELIGHTSWITCHST_INACTIVE =
    Scu_bcm_304_Bcm_brakelightswitchstType_BCM_BRAKELIGHTSWITCHST_INACTIVE;
  static const Bcm_brakelightswitchstType BCM_BRAKELIGHTSWITCHST_ACTIVE =
    Scu_bcm_304_Bcm_brakelightswitchstType_BCM_BRAKELIGHTSWITCHST_ACTIVE;
  static inline bool Bcm_brakelightswitchstType_IsValid(int value) {
    return Scu_bcm_304_Bcm_brakelightswitchstType_IsValid(value);
  }
  static const Bcm_brakelightswitchstType Bcm_brakelightswitchstType_MIN =
    Scu_bcm_304_Bcm_brakelightswitchstType_Bcm_brakelightswitchstType_MIN;
  static const Bcm_brakelightswitchstType Bcm_brakelightswitchstType_MAX =
    Scu_bcm_304_Bcm_brakelightswitchstType_Bcm_brakelightswitchstType_MAX;
  static const int Bcm_brakelightswitchstType_ARRAYSIZE =
    Scu_bcm_304_Bcm_brakelightswitchstType_Bcm_brakelightswitchstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcm_brakelightswitchstType_descriptor() {
    return Scu_bcm_304_Bcm_brakelightswitchstType_descriptor();
  }
  static inline const ::std::string& Bcm_brakelightswitchstType_Name(Bcm_brakelightswitchstType value) {
    return Scu_bcm_304_Bcm_brakelightswitchstType_Name(value);
  }
  static inline bool Bcm_brakelightswitchstType_Parse(const ::std::string& name,
      Bcm_brakelightswitchstType* value) {
    return Scu_bcm_304_Bcm_brakelightswitchstType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.canbus.Scu_bcm_304.Bcm_vehreversestType bcm_vehreversest = 1;
  bool has_bcm_vehreversest() const;
  void clear_bcm_vehreversest();
  static const int kBcmVehreversestFieldNumber = 1;
  ::apollo::canbus::Scu_bcm_304_Bcm_vehreversestType bcm_vehreversest() const;
  void set_bcm_vehreversest(::apollo::canbus::Scu_bcm_304_Bcm_vehreversestType value);

  // optional .apollo.canbus.Scu_bcm_304.Bcm_rightturnlampstType bcm_rightturnlampst = 2;
  bool has_bcm_rightturnlampst() const;
  void clear_bcm_rightturnlampst();
  static const int kBcmRightturnlampstFieldNumber = 2;
  ::apollo::canbus::Scu_bcm_304_Bcm_rightturnlampstType bcm_rightturnlampst() const;
  void set_bcm_rightturnlampst(::apollo::canbus::Scu_bcm_304_Bcm_rightturnlampstType value);

  // optional .apollo.canbus.Scu_bcm_304.Bcm_rearfoglampstType bcm_rearfoglampst = 3;
  bool has_bcm_rearfoglampst() const;
  void clear_bcm_rearfoglampst();
  static const int kBcmRearfoglampstFieldNumber = 3;
  ::apollo::canbus::Scu_bcm_304_Bcm_rearfoglampstType bcm_rearfoglampst() const;
  void set_bcm_rearfoglampst(::apollo::canbus::Scu_bcm_304_Bcm_rearfoglampstType value);

  // optional .apollo.canbus.Scu_bcm_304.Bcm_parkinglampstType bcm_parkinglampst = 4;
  bool has_bcm_parkinglampst() const;
  void clear_bcm_parkinglampst();
  static const int kBcmParkinglampstFieldNumber = 4;
  ::apollo::canbus::Scu_bcm_304_Bcm_parkinglampstType bcm_parkinglampst() const;
  void set_bcm_parkinglampst(::apollo::canbus::Scu_bcm_304_Bcm_parkinglampstType value);

  // optional .apollo.canbus.Scu_bcm_304.Bcm_lowbeamstType bcm_lowbeamst = 5;
  bool has_bcm_lowbeamst() const;
  void clear_bcm_lowbeamst();
  static const int kBcmLowbeamstFieldNumber = 5;
  ::apollo::canbus::Scu_bcm_304_Bcm_lowbeamstType bcm_lowbeamst() const;
  void set_bcm_lowbeamst(::apollo::canbus::Scu_bcm_304_Bcm_lowbeamstType value);

  // optional .apollo.canbus.Scu_bcm_304.Bcm_leftturnlampstType bcm_leftturnlampst = 6;
  bool has_bcm_leftturnlampst() const;
  void clear_bcm_leftturnlampst();
  static const int kBcmLeftturnlampstFieldNumber = 6;
  ::apollo::canbus::Scu_bcm_304_Bcm_leftturnlampstType bcm_leftturnlampst() const;
  void set_bcm_leftturnlampst(::apollo::canbus::Scu_bcm_304_Bcm_leftturnlampstType value);

  // optional .apollo.canbus.Scu_bcm_304.Bcm_keystType bcm_keyst = 7;
  bool has_bcm_keyst() const;
  void clear_bcm_keyst();
  static const int kBcmKeystFieldNumber = 7;
  ::apollo::canbus::Scu_bcm_304_Bcm_keystType bcm_keyst() const;
  void set_bcm_keyst(::apollo::canbus::Scu_bcm_304_Bcm_keystType value);

  // optional .apollo.canbus.Scu_bcm_304.Bcm_hornstType bcm_hornst = 8;
  bool has_bcm_hornst() const;
  void clear_bcm_hornst();
  static const int kBcmHornstFieldNumber = 8;
  ::apollo::canbus::Scu_bcm_304_Bcm_hornstType bcm_hornst() const;
  void set_bcm_hornst(::apollo::canbus::Scu_bcm_304_Bcm_hornstType value);

  // optional .apollo.canbus.Scu_bcm_304.Bcm_highbeamstType bcm_highbeamst = 9;
  bool has_bcm_highbeamst() const;
  void clear_bcm_highbeamst();
  static const int kBcmHighbeamstFieldNumber = 9;
  ::apollo::canbus::Scu_bcm_304_Bcm_highbeamstType bcm_highbeamst() const;
  void set_bcm_highbeamst(::apollo::canbus::Scu_bcm_304_Bcm_highbeamstType value);

  // optional .apollo.canbus.Scu_bcm_304.Bcm_hazardlampstType bcm_hazardlampst = 10;
  bool has_bcm_hazardlampst() const;
  void clear_bcm_hazardlampst();
  static const int kBcmHazardlampstFieldNumber = 10;
  ::apollo::canbus::Scu_bcm_304_Bcm_hazardlampstType bcm_hazardlampst() const;
  void set_bcm_hazardlampst(::apollo::canbus::Scu_bcm_304_Bcm_hazardlampstType value);

  // optional .apollo.canbus.Scu_bcm_304.Bcm_frontfoglampstType bcm_frontfoglampst = 11;
  bool has_bcm_frontfoglampst() const;
  void clear_bcm_frontfoglampst();
  static const int kBcmFrontfoglampstFieldNumber = 11;
  ::apollo::canbus::Scu_bcm_304_Bcm_frontfoglampstType bcm_frontfoglampst() const;
  void set_bcm_frontfoglampst(::apollo::canbus::Scu_bcm_304_Bcm_frontfoglampstType value);

  // optional .apollo.canbus.Scu_bcm_304.Bcm_brakelightswitchstType bcm_brakelightswitchst = 12;
  bool has_bcm_brakelightswitchst() const;
  void clear_bcm_brakelightswitchst();
  static const int kBcmBrakelightswitchstFieldNumber = 12;
  ::apollo::canbus::Scu_bcm_304_Bcm_brakelightswitchstType bcm_brakelightswitchst() const;
  void set_bcm_brakelightswitchst(::apollo::canbus::Scu_bcm_304_Bcm_brakelightswitchstType value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Scu_bcm_304)
 private:
  void set_has_bcm_vehreversest();
  void clear_has_bcm_vehreversest();
  void set_has_bcm_rightturnlampst();
  void clear_has_bcm_rightturnlampst();
  void set_has_bcm_rearfoglampst();
  void clear_has_bcm_rearfoglampst();
  void set_has_bcm_parkinglampst();
  void clear_has_bcm_parkinglampst();
  void set_has_bcm_lowbeamst();
  void clear_has_bcm_lowbeamst();
  void set_has_bcm_leftturnlampst();
  void clear_has_bcm_leftturnlampst();
  void set_has_bcm_keyst();
  void clear_has_bcm_keyst();
  void set_has_bcm_hornst();
  void clear_has_bcm_hornst();
  void set_has_bcm_highbeamst();
  void clear_has_bcm_highbeamst();
  void set_has_bcm_hazardlampst();
  void clear_has_bcm_hazardlampst();
  void set_has_bcm_frontfoglampst();
  void clear_has_bcm_frontfoglampst();
  void set_has_bcm_brakelightswitchst();
  void clear_has_bcm_brakelightswitchst();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int bcm_vehreversest_;
  int bcm_rightturnlampst_;
  int bcm_rearfoglampst_;
  int bcm_parkinglampst_;
  int bcm_lowbeamst_;
  int bcm_leftturnlampst_;
  int bcm_keyst_;
  int bcm_hornst_;
  int bcm_highbeamst_;
  int bcm_hazardlampst_;
  int bcm_frontfoglampst_;
  int bcm_brakelightswitchst_;
  friend struct ::protobuf_modules_2fcanbus_2fproto_2fge3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Scu_bcs_1_306 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Scu_bcs_1_306) */ {
 public:
  Scu_bcs_1_306();
  virtual ~Scu_bcs_1_306();

  Scu_bcs_1_306(const Scu_bcs_1_306& from);

  inline Scu_bcs_1_306& operator=(const Scu_bcs_1_306& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Scu_bcs_1_306(Scu_bcs_1_306&& from) noexcept
    : Scu_bcs_1_306() {
    *this = ::std::move(from);
  }

  inline Scu_bcs_1_306& operator=(Scu_bcs_1_306&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scu_bcs_1_306& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scu_bcs_1_306* internal_default_instance() {
    return reinterpret_cast<const Scu_bcs_1_306*>(
               &_Scu_bcs_1_306_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Scu_bcs_1_306* other);
  friend void swap(Scu_bcs_1_306& a, Scu_bcs_1_306& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Scu_bcs_1_306* New() const final {
    return CreateMaybeMessage<Scu_bcs_1_306>(NULL);
  }

  Scu_bcs_1_306* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Scu_bcs_1_306>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Scu_bcs_1_306& from);
  void MergeFrom(const Scu_bcs_1_306& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scu_bcs_1_306* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Scu_bcs_1_306_Bcs_aebavailableType Bcs_aebavailableType;
  static const Bcs_aebavailableType BCS_AEBAVAILABLE_UNAVAILABLE =
    Scu_bcs_1_306_Bcs_aebavailableType_BCS_AEBAVAILABLE_UNAVAILABLE;
  static const Bcs_aebavailableType BCS_AEBAVAILABLE_AVAILABLE =
    Scu_bcs_1_306_Bcs_aebavailableType_BCS_AEBAVAILABLE_AVAILABLE;
  static inline bool Bcs_aebavailableType_IsValid(int value) {
    return Scu_bcs_1_306_Bcs_aebavailableType_IsValid(value);
  }
  static const Bcs_aebavailableType Bcs_aebavailableType_MIN =
    Scu_bcs_1_306_Bcs_aebavailableType_Bcs_aebavailableType_MIN;
  static const Bcs_aebavailableType Bcs_aebavailableType_MAX =
    Scu_bcs_1_306_Bcs_aebavailableType_Bcs_aebavailableType_MAX;
  static const int Bcs_aebavailableType_ARRAYSIZE =
    Scu_bcs_1_306_Bcs_aebavailableType_Bcs_aebavailableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_aebavailableType_descriptor() {
    return Scu_bcs_1_306_Bcs_aebavailableType_descriptor();
  }
  static inline const ::std::string& Bcs_aebavailableType_Name(Bcs_aebavailableType value) {
    return Scu_bcs_1_306_Bcs_aebavailableType_Name(value);
  }
  static inline bool Bcs_aebavailableType_Parse(const ::std::string& name,
      Bcs_aebavailableType* value) {
    return Scu_bcs_1_306_Bcs_aebavailableType_Parse(name, value);
  }

  typedef Scu_bcs_1_306_Bcs_cddavailableType Bcs_cddavailableType;
  static const Bcs_cddavailableType BCS_CDDAVAILABLE_UNAVAILABLE =
    Scu_bcs_1_306_Bcs_cddavailableType_BCS_CDDAVAILABLE_UNAVAILABLE;
  static const Bcs_cddavailableType BCS_CDDAVAILABLE_AVAILABLE =
    Scu_bcs_1_306_Bcs_cddavailableType_BCS_CDDAVAILABLE_AVAILABLE;
  static inline bool Bcs_cddavailableType_IsValid(int value) {
    return Scu_bcs_1_306_Bcs_cddavailableType_IsValid(value);
  }
  static const Bcs_cddavailableType Bcs_cddavailableType_MIN =
    Scu_bcs_1_306_Bcs_cddavailableType_Bcs_cddavailableType_MIN;
  static const Bcs_cddavailableType Bcs_cddavailableType_MAX =
    Scu_bcs_1_306_Bcs_cddavailableType_Bcs_cddavailableType_MAX;
  static const int Bcs_cddavailableType_ARRAYSIZE =
    Scu_bcs_1_306_Bcs_cddavailableType_Bcs_cddavailableType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_cddavailableType_descriptor() {
    return Scu_bcs_1_306_Bcs_cddavailableType_descriptor();
  }
  static inline const ::std::string& Bcs_cddavailableType_Name(Bcs_cddavailableType value) {
    return Scu_bcs_1_306_Bcs_cddavailableType_Name(value);
  }
  static inline bool Bcs_cddavailableType_Parse(const ::std::string& name,
      Bcs_cddavailableType* value) {
    return Scu_bcs_1_306_Bcs_cddavailableType_Parse(name, value);
  }

  typedef Scu_bcs_1_306_Bcs_intidxType Bcs_intidxType;
  static const Bcs_intidxType BCS_INTIDX_NOINT =
    Scu_bcs_1_306_Bcs_intidxType_BCS_INTIDX_NOINT;
  static const Bcs_intidxType BCS_INTIDX_OVERFLOW =
    Scu_bcs_1_306_Bcs_intidxType_BCS_INTIDX_OVERFLOW;
  static const Bcs_intidxType BCS_INTIDX_TIMEOUT =
    Scu_bcs_1_306_Bcs_intidxType_BCS_INTIDX_TIMEOUT;
  static const Bcs_intidxType BCS_INTIDX_ACCPEDINT =
    Scu_bcs_1_306_Bcs_intidxType_BCS_INTIDX_ACCPEDINT;
  static const Bcs_intidxType BCS_INTIDX_BRKPEDINT =
    Scu_bcs_1_306_Bcs_intidxType_BCS_INTIDX_BRKPEDINT;
  static const Bcs_intidxType BCS_INTIDX_GEARINT =
    Scu_bcs_1_306_Bcs_intidxType_BCS_INTIDX_GEARINT;
  static inline bool Bcs_intidxType_IsValid(int value) {
    return Scu_bcs_1_306_Bcs_intidxType_IsValid(value);
  }
  static const Bcs_intidxType Bcs_intidxType_MIN =
    Scu_bcs_1_306_Bcs_intidxType_Bcs_intidxType_MIN;
  static const Bcs_intidxType Bcs_intidxType_MAX =
    Scu_bcs_1_306_Bcs_intidxType_Bcs_intidxType_MAX;
  static const int Bcs_intidxType_ARRAYSIZE =
    Scu_bcs_1_306_Bcs_intidxType_Bcs_intidxType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_intidxType_descriptor() {
    return Scu_bcs_1_306_Bcs_intidxType_descriptor();
  }
  static inline const ::std::string& Bcs_intidxType_Name(Bcs_intidxType value) {
    return Scu_bcs_1_306_Bcs_intidxType_Name(value);
  }
  static inline bool Bcs_intidxType_Parse(const ::std::string& name,
      Bcs_intidxType* value) {
    return Scu_bcs_1_306_Bcs_intidxType_Parse(name, value);
  }

  typedef Scu_bcs_1_306_Bcs_vdcfaultstType Bcs_vdcfaultstType;
  static const Bcs_vdcfaultstType BCS_VDCFAULTST_NORMAL =
    Scu_bcs_1_306_Bcs_vdcfaultstType_BCS_VDCFAULTST_NORMAL;
  static const Bcs_vdcfaultstType BCS_VDCFAULTST_FAULT =
    Scu_bcs_1_306_Bcs_vdcfaultstType_BCS_VDCFAULTST_FAULT;
  static inline bool Bcs_vdcfaultstType_IsValid(int value) {
    return Scu_bcs_1_306_Bcs_vdcfaultstType_IsValid(value);
  }
  static const Bcs_vdcfaultstType Bcs_vdcfaultstType_MIN =
    Scu_bcs_1_306_Bcs_vdcfaultstType_Bcs_vdcfaultstType_MIN;
  static const Bcs_vdcfaultstType Bcs_vdcfaultstType_MAX =
    Scu_bcs_1_306_Bcs_vdcfaultstType_Bcs_vdcfaultstType_MAX;
  static const int Bcs_vdcfaultstType_ARRAYSIZE =
    Scu_bcs_1_306_Bcs_vdcfaultstType_Bcs_vdcfaultstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_vdcfaultstType_descriptor() {
    return Scu_bcs_1_306_Bcs_vdcfaultstType_descriptor();
  }
  static inline const ::std::string& Bcs_vdcfaultstType_Name(Bcs_vdcfaultstType value) {
    return Scu_bcs_1_306_Bcs_vdcfaultstType_Name(value);
  }
  static inline bool Bcs_vdcfaultstType_Parse(const ::std::string& name,
      Bcs_vdcfaultstType* value) {
    return Scu_bcs_1_306_Bcs_vdcfaultstType_Parse(name, value);
  }

  typedef Scu_bcs_1_306_Bcs_vdcactivestType Bcs_vdcactivestType;
  static const Bcs_vdcactivestType BCS_VDCACTIVEST_INACTIVE =
    Scu_bcs_1_306_Bcs_vdcactivestType_BCS_VDCACTIVEST_INACTIVE;
  static const Bcs_vdcactivestType BCS_VDCACTIVEST_ACTIVE =
    Scu_bcs_1_306_Bcs_vdcactivestType_BCS_VDCACTIVEST_ACTIVE;
  static inline bool Bcs_vdcactivestType_IsValid(int value) {
    return Scu_bcs_1_306_Bcs_vdcactivestType_IsValid(value);
  }
  static const Bcs_vdcactivestType Bcs_vdcactivestType_MIN =
    Scu_bcs_1_306_Bcs_vdcactivestType_Bcs_vdcactivestType_MIN;
  static const Bcs_vdcactivestType Bcs_vdcactivestType_MAX =
    Scu_bcs_1_306_Bcs_vdcactivestType_Bcs_vdcactivestType_MAX;
  static const int Bcs_vdcactivestType_ARRAYSIZE =
    Scu_bcs_1_306_Bcs_vdcactivestType_Bcs_vdcactivestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_vdcactivestType_descriptor() {
    return Scu_bcs_1_306_Bcs_vdcactivestType_descriptor();
  }
  static inline const ::std::string& Bcs_vdcactivestType_Name(Bcs_vdcactivestType value) {
    return Scu_bcs_1_306_Bcs_vdcactivestType_Name(value);
  }
  static inline bool Bcs_vdcactivestType_Parse(const ::std::string& name,
      Bcs_vdcactivestType* value) {
    return Scu_bcs_1_306_Bcs_vdcactivestType_Parse(name, value);
  }

  typedef Scu_bcs_1_306_Bcs_absfaultstType Bcs_absfaultstType;
  static const Bcs_absfaultstType BCS_ABSFAULTST_NORMAL =
    Scu_bcs_1_306_Bcs_absfaultstType_BCS_ABSFAULTST_NORMAL;
  static const Bcs_absfaultstType BCS_ABSFAULTST_FAULT =
    Scu_bcs_1_306_Bcs_absfaultstType_BCS_ABSFAULTST_FAULT;
  static inline bool Bcs_absfaultstType_IsValid(int value) {
    return Scu_bcs_1_306_Bcs_absfaultstType_IsValid(value);
  }
  static const Bcs_absfaultstType Bcs_absfaultstType_MIN =
    Scu_bcs_1_306_Bcs_absfaultstType_Bcs_absfaultstType_MIN;
  static const Bcs_absfaultstType Bcs_absfaultstType_MAX =
    Scu_bcs_1_306_Bcs_absfaultstType_Bcs_absfaultstType_MAX;
  static const int Bcs_absfaultstType_ARRAYSIZE =
    Scu_bcs_1_306_Bcs_absfaultstType_Bcs_absfaultstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_absfaultstType_descriptor() {
    return Scu_bcs_1_306_Bcs_absfaultstType_descriptor();
  }
  static inline const ::std::string& Bcs_absfaultstType_Name(Bcs_absfaultstType value) {
    return Scu_bcs_1_306_Bcs_absfaultstType_Name(value);
  }
  static inline bool Bcs_absfaultstType_Parse(const ::std::string& name,
      Bcs_absfaultstType* value) {
    return Scu_bcs_1_306_Bcs_absfaultstType_Parse(name, value);
  }

  typedef Scu_bcs_1_306_Bcs_absactivestType Bcs_absactivestType;
  static const Bcs_absactivestType BCS_ABSACTIVEST_INACTIVE =
    Scu_bcs_1_306_Bcs_absactivestType_BCS_ABSACTIVEST_INACTIVE;
  static const Bcs_absactivestType BCS_ABSACTIVEST_ACTIVE =
    Scu_bcs_1_306_Bcs_absactivestType_BCS_ABSACTIVEST_ACTIVE;
  static inline bool Bcs_absactivestType_IsValid(int value) {
    return Scu_bcs_1_306_Bcs_absactivestType_IsValid(value);
  }
  static const Bcs_absactivestType Bcs_absactivestType_MIN =
    Scu_bcs_1_306_Bcs_absactivestType_Bcs_absactivestType_MIN;
  static const Bcs_absactivestType Bcs_absactivestType_MAX =
    Scu_bcs_1_306_Bcs_absactivestType_Bcs_absactivestType_MAX;
  static const int Bcs_absactivestType_ARRAYSIZE =
    Scu_bcs_1_306_Bcs_absactivestType_Bcs_absactivestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_absactivestType_descriptor() {
    return Scu_bcs_1_306_Bcs_absactivestType_descriptor();
  }
  static inline const ::std::string& Bcs_absactivestType_Name(Bcs_absactivestType value) {
    return Scu_bcs_1_306_Bcs_absactivestType_Name(value);
  }
  static inline bool Bcs_absactivestType_Parse(const ::std::string& name,
      Bcs_absactivestType* value) {
    return Scu_bcs_1_306_Bcs_absactivestType_Parse(name, value);
  }

  typedef Scu_bcs_1_306_Bcs_faultstType Bcs_faultstType;
  static const Bcs_faultstType BCS_FAULTST_NORMAL =
    Scu_bcs_1_306_Bcs_faultstType_BCS_FAULTST_NORMAL;
  static const Bcs_faultstType BCS_FAULTST_FAULT =
    Scu_bcs_1_306_Bcs_faultstType_BCS_FAULTST_FAULT;
  static inline bool Bcs_faultstType_IsValid(int value) {
    return Scu_bcs_1_306_Bcs_faultstType_IsValid(value);
  }
  static const Bcs_faultstType Bcs_faultstType_MIN =
    Scu_bcs_1_306_Bcs_faultstType_Bcs_faultstType_MIN;
  static const Bcs_faultstType Bcs_faultstType_MAX =
    Scu_bcs_1_306_Bcs_faultstType_Bcs_faultstType_MAX;
  static const int Bcs_faultstType_ARRAYSIZE =
    Scu_bcs_1_306_Bcs_faultstType_Bcs_faultstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_faultstType_descriptor() {
    return Scu_bcs_1_306_Bcs_faultstType_descriptor();
  }
  static inline const ::std::string& Bcs_faultstType_Name(Bcs_faultstType value) {
    return Scu_bcs_1_306_Bcs_faultstType_Name(value);
  }
  static inline bool Bcs_faultstType_Parse(const ::std::string& name,
      Bcs_faultstType* value) {
    return Scu_bcs_1_306_Bcs_faultstType_Parse(name, value);
  }

  typedef Scu_bcs_1_306_Bcs_drvmodeType Bcs_drvmodeType;
  static const Bcs_drvmodeType BCS_DRVMODE_INVALID =
    Scu_bcs_1_306_Bcs_drvmodeType_BCS_DRVMODE_INVALID;
  static const Bcs_drvmodeType BCS_DRVMODE_MANUAL =
    Scu_bcs_1_306_Bcs_drvmodeType_BCS_DRVMODE_MANUAL;
  static const Bcs_drvmodeType BCS_DRVMODE_INTERRUPT =
    Scu_bcs_1_306_Bcs_drvmodeType_BCS_DRVMODE_INTERRUPT;
  static const Bcs_drvmodeType BCS_DRVMODE_AUTO =
    Scu_bcs_1_306_Bcs_drvmodeType_BCS_DRVMODE_AUTO;
  static inline bool Bcs_drvmodeType_IsValid(int value) {
    return Scu_bcs_1_306_Bcs_drvmodeType_IsValid(value);
  }
  static const Bcs_drvmodeType Bcs_drvmodeType_MIN =
    Scu_bcs_1_306_Bcs_drvmodeType_Bcs_drvmodeType_MIN;
  static const Bcs_drvmodeType Bcs_drvmodeType_MAX =
    Scu_bcs_1_306_Bcs_drvmodeType_Bcs_drvmodeType_MAX;
  static const int Bcs_drvmodeType_ARRAYSIZE =
    Scu_bcs_1_306_Bcs_drvmodeType_Bcs_drvmodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_drvmodeType_descriptor() {
    return Scu_bcs_1_306_Bcs_drvmodeType_descriptor();
  }
  static inline const ::std::string& Bcs_drvmodeType_Name(Bcs_drvmodeType value) {
    return Scu_bcs_1_306_Bcs_drvmodeType_Name(value);
  }
  static inline bool Bcs_drvmodeType_Parse(const ::std::string& name,
      Bcs_drvmodeType* value) {
    return Scu_bcs_1_306_Bcs_drvmodeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.canbus.Scu_bcs_1_306.Bcs_aebavailableType bcs_aebavailable = 1;
  bool has_bcs_aebavailable() const;
  void clear_bcs_aebavailable();
  static const int kBcsAebavailableFieldNumber = 1;
  ::apollo::canbus::Scu_bcs_1_306_Bcs_aebavailableType bcs_aebavailable() const;
  void set_bcs_aebavailable(::apollo::canbus::Scu_bcs_1_306_Bcs_aebavailableType value);

  // optional .apollo.canbus.Scu_bcs_1_306.Bcs_cddavailableType bcs_cddavailable = 2;
  bool has_bcs_cddavailable() const;
  void clear_bcs_cddavailable();
  static const int kBcsCddavailableFieldNumber = 2;
  ::apollo::canbus::Scu_bcs_1_306_Bcs_cddavailableType bcs_cddavailable() const;
  void set_bcs_cddavailable(::apollo::canbus::Scu_bcs_1_306_Bcs_cddavailableType value);

  // optional double bcs_brkpedact = 3;
  bool has_bcs_brkpedact() const;
  void clear_bcs_brkpedact();
  static const int kBcsBrkpedactFieldNumber = 3;
  double bcs_brkpedact() const;
  void set_bcs_brkpedact(double value);

  // optional .apollo.canbus.Scu_bcs_1_306.Bcs_intidxType bcs_intidx = 4;
  bool has_bcs_intidx() const;
  void clear_bcs_intidx();
  static const int kBcsIntidxFieldNumber = 4;
  ::apollo::canbus::Scu_bcs_1_306_Bcs_intidxType bcs_intidx() const;
  void set_bcs_intidx(::apollo::canbus::Scu_bcs_1_306_Bcs_intidxType value);

  // optional .apollo.canbus.Scu_bcs_1_306.Bcs_vdcfaultstType bcs_vdcfaultst = 5;
  bool has_bcs_vdcfaultst() const;
  void clear_bcs_vdcfaultst();
  static const int kBcsVdcfaultstFieldNumber = 5;
  ::apollo::canbus::Scu_bcs_1_306_Bcs_vdcfaultstType bcs_vdcfaultst() const;
  void set_bcs_vdcfaultst(::apollo::canbus::Scu_bcs_1_306_Bcs_vdcfaultstType value);

  // optional .apollo.canbus.Scu_bcs_1_306.Bcs_vdcactivestType bcs_vdcactivest = 6;
  bool has_bcs_vdcactivest() const;
  void clear_bcs_vdcactivest();
  static const int kBcsVdcactivestFieldNumber = 6;
  ::apollo::canbus::Scu_bcs_1_306_Bcs_vdcactivestType bcs_vdcactivest() const;
  void set_bcs_vdcactivest(::apollo::canbus::Scu_bcs_1_306_Bcs_vdcactivestType value);

  // optional .apollo.canbus.Scu_bcs_1_306.Bcs_absfaultstType bcs_absfaultst = 7;
  bool has_bcs_absfaultst() const;
  void clear_bcs_absfaultst();
  static const int kBcsAbsfaultstFieldNumber = 7;
  ::apollo::canbus::Scu_bcs_1_306_Bcs_absfaultstType bcs_absfaultst() const;
  void set_bcs_absfaultst(::apollo::canbus::Scu_bcs_1_306_Bcs_absfaultstType value);

  // optional .apollo.canbus.Scu_bcs_1_306.Bcs_absactivestType bcs_absactivest = 8;
  bool has_bcs_absactivest() const;
  void clear_bcs_absactivest();
  static const int kBcsAbsactivestFieldNumber = 8;
  ::apollo::canbus::Scu_bcs_1_306_Bcs_absactivestType bcs_absactivest() const;
  void set_bcs_absactivest(::apollo::canbus::Scu_bcs_1_306_Bcs_absactivestType value);

  // optional .apollo.canbus.Scu_bcs_1_306.Bcs_faultstType bcs_faultst = 9;
  bool has_bcs_faultst() const;
  void clear_bcs_faultst();
  static const int kBcsFaultstFieldNumber = 9;
  ::apollo::canbus::Scu_bcs_1_306_Bcs_faultstType bcs_faultst() const;
  void set_bcs_faultst(::apollo::canbus::Scu_bcs_1_306_Bcs_faultstType value);

  // optional .apollo.canbus.Scu_bcs_1_306.Bcs_drvmodeType bcs_drvmode = 10;
  bool has_bcs_drvmode() const;
  void clear_bcs_drvmode();
  static const int kBcsDrvmodeFieldNumber = 10;
  ::apollo::canbus::Scu_bcs_1_306_Bcs_drvmodeType bcs_drvmode() const;
  void set_bcs_drvmode(::apollo::canbus::Scu_bcs_1_306_Bcs_drvmodeType value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Scu_bcs_1_306)
 private:
  void set_has_bcs_aebavailable();
  void clear_has_bcs_aebavailable();
  void set_has_bcs_cddavailable();
  void clear_has_bcs_cddavailable();
  void set_has_bcs_brkpedact();
  void clear_has_bcs_brkpedact();
  void set_has_bcs_intidx();
  void clear_has_bcs_intidx();
  void set_has_bcs_vdcfaultst();
  void clear_has_bcs_vdcfaultst();
  void set_has_bcs_vdcactivest();
  void clear_has_bcs_vdcactivest();
  void set_has_bcs_absfaultst();
  void clear_has_bcs_absfaultst();
  void set_has_bcs_absactivest();
  void clear_has_bcs_absactivest();
  void set_has_bcs_faultst();
  void clear_has_bcs_faultst();
  void set_has_bcs_drvmode();
  void clear_has_bcs_drvmode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int bcs_aebavailable_;
  int bcs_cddavailable_;
  double bcs_brkpedact_;
  int bcs_intidx_;
  int bcs_vdcfaultst_;
  int bcs_vdcactivest_;
  int bcs_absfaultst_;
  int bcs_absactivest_;
  int bcs_faultst_;
  int bcs_drvmode_;
  friend struct ::protobuf_modules_2fcanbus_2fproto_2fge3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Scu_bcs_2_307 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Scu_bcs_2_307) */ {
 public:
  Scu_bcs_2_307();
  virtual ~Scu_bcs_2_307();

  Scu_bcs_2_307(const Scu_bcs_2_307& from);

  inline Scu_bcs_2_307& operator=(const Scu_bcs_2_307& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Scu_bcs_2_307(Scu_bcs_2_307&& from) noexcept
    : Scu_bcs_2_307() {
    *this = ::std::move(from);
  }

  inline Scu_bcs_2_307& operator=(Scu_bcs_2_307&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scu_bcs_2_307& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scu_bcs_2_307* internal_default_instance() {
    return reinterpret_cast<const Scu_bcs_2_307*>(
               &_Scu_bcs_2_307_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Scu_bcs_2_307* other);
  friend void swap(Scu_bcs_2_307& a, Scu_bcs_2_307& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Scu_bcs_2_307* New() const final {
    return CreateMaybeMessage<Scu_bcs_2_307>(NULL);
  }

  Scu_bcs_2_307* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Scu_bcs_2_307>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Scu_bcs_2_307& from);
  void MergeFrom(const Scu_bcs_2_307& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scu_bcs_2_307* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Scu_bcs_2_307_Bcs_vehspdvdType Bcs_vehspdvdType;
  static const Bcs_vehspdvdType BCS_VEHSPDVD_INVALID =
    Scu_bcs_2_307_Bcs_vehspdvdType_BCS_VEHSPDVD_INVALID;
  static const Bcs_vehspdvdType BCS_VEHSPDVD_VALID =
    Scu_bcs_2_307_Bcs_vehspdvdType_BCS_VEHSPDVD_VALID;
  static inline bool Bcs_vehspdvdType_IsValid(int value) {
    return Scu_bcs_2_307_Bcs_vehspdvdType_IsValid(value);
  }
  static const Bcs_vehspdvdType Bcs_vehspdvdType_MIN =
    Scu_bcs_2_307_Bcs_vehspdvdType_Bcs_vehspdvdType_MIN;
  static const Bcs_vehspdvdType Bcs_vehspdvdType_MAX =
    Scu_bcs_2_307_Bcs_vehspdvdType_Bcs_vehspdvdType_MAX;
  static const int Bcs_vehspdvdType_ARRAYSIZE =
    Scu_bcs_2_307_Bcs_vehspdvdType_Bcs_vehspdvdType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Bcs_vehspdvdType_descriptor() {
    return Scu_bcs_2_307_Bcs_vehspdvdType_descriptor();
  }
  static inline const ::std::string& Bcs_vehspdvdType_Name(Bcs_vehspdvdType value) {
    return Scu_bcs_2_307_Bcs_vehspdvdType_Name(value);
  }
  static inline bool Bcs_vehspdvdType_Parse(const ::std::string& name,
      Bcs_vehspdvdType* value) {
    return Scu_bcs_2_307_Bcs_vehspdvdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double bcs_yawrate = 2;
  bool has_bcs_yawrate() const;
  void clear_bcs_yawrate();
  static const int kBcsYawrateFieldNumber = 2;
  double bcs_yawrate() const;
  void set_bcs_yawrate(double value);

  // optional double bcs_vehspd = 3;
  bool has_bcs_vehspd() const;
  void clear_bcs_vehspd();
  static const int kBcsVehspdFieldNumber = 3;
  double bcs_vehspd() const;
  void set_bcs_vehspd(double value);

  // optional double bcs_vehlongaccel = 4;
  bool has_bcs_vehlongaccel() const;
  void clear_bcs_vehlongaccel();
  static const int kBcsVehlongaccelFieldNumber = 4;
  double bcs_vehlongaccel() const;
  void set_bcs_vehlongaccel(double value);

  // optional double bcs_vehlataccel = 5;
  bool has_bcs_vehlataccel() const;
  void clear_bcs_vehlataccel();
  static const int kBcsVehlataccelFieldNumber = 5;
  double bcs_vehlataccel() const;
  void set_bcs_vehlataccel(double value);

  // optional .apollo.canbus.Scu_bcs_2_307.Bcs_vehspdvdType bcs_vehspdvd = 1;
  bool has_bcs_vehspdvd() const;
  void clear_bcs_vehspdvd();
  static const int kBcsVehspdvdFieldNumber = 1;
  ::apollo::canbus::Scu_bcs_2_307_Bcs_vehspdvdType bcs_vehspdvd() const;
  void set_bcs_vehspdvd(::apollo::canbus::Scu_bcs_2_307_Bcs_vehspdvdType value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Scu_bcs_2_307)
 private:
  void set_has_bcs_vehspdvd();
  void clear_has_bcs_vehspdvd();
  void set_has_bcs_yawrate();
  void clear_has_bcs_yawrate();
  void set_has_bcs_vehspd();
  void clear_has_bcs_vehspd();
  void set_has_bcs_vehlongaccel();
  void clear_has_bcs_vehlongaccel();
  void set_has_bcs_vehlataccel();
  void clear_has_bcs_vehlataccel();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double bcs_yawrate_;
  double bcs_vehspd_;
  double bcs_vehlongaccel_;
  double bcs_vehlataccel_;
  int bcs_vehspdvd_;
  friend struct ::protobuf_modules_2fcanbus_2fproto_2fge3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Scu_epb_310 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Scu_epb_310) */ {
 public:
  Scu_epb_310();
  virtual ~Scu_epb_310();

  Scu_epb_310(const Scu_epb_310& from);

  inline Scu_epb_310& operator=(const Scu_epb_310& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Scu_epb_310(Scu_epb_310&& from) noexcept
    : Scu_epb_310() {
    *this = ::std::move(from);
  }

  inline Scu_epb_310& operator=(Scu_epb_310&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scu_epb_310& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scu_epb_310* internal_default_instance() {
    return reinterpret_cast<const Scu_epb_310*>(
               &_Scu_epb_310_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Scu_epb_310* other);
  friend void swap(Scu_epb_310& a, Scu_epb_310& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Scu_epb_310* New() const final {
    return CreateMaybeMessage<Scu_epb_310>(NULL);
  }

  Scu_epb_310* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Scu_epb_310>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Scu_epb_310& from);
  void MergeFrom(const Scu_epb_310& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scu_epb_310* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Scu_epb_310_Epb_intidxType Epb_intidxType;
  static const Epb_intidxType EPB_INTIDX_NOINT =
    Scu_epb_310_Epb_intidxType_EPB_INTIDX_NOINT;
  static const Epb_intidxType EPB_INTIDX_OVERFLOW =
    Scu_epb_310_Epb_intidxType_EPB_INTIDX_OVERFLOW;
  static const Epb_intidxType EPB_INTIDX_TIMEOUT =
    Scu_epb_310_Epb_intidxType_EPB_INTIDX_TIMEOUT;
  static inline bool Epb_intidxType_IsValid(int value) {
    return Scu_epb_310_Epb_intidxType_IsValid(value);
  }
  static const Epb_intidxType Epb_intidxType_MIN =
    Scu_epb_310_Epb_intidxType_Epb_intidxType_MIN;
  static const Epb_intidxType Epb_intidxType_MAX =
    Scu_epb_310_Epb_intidxType_Epb_intidxType_MAX;
  static const int Epb_intidxType_ARRAYSIZE =
    Scu_epb_310_Epb_intidxType_Epb_intidxType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Epb_intidxType_descriptor() {
    return Scu_epb_310_Epb_intidxType_descriptor();
  }
  static inline const ::std::string& Epb_intidxType_Name(Epb_intidxType value) {
    return Scu_epb_310_Epb_intidxType_Name(value);
  }
  static inline bool Epb_intidxType_Parse(const ::std::string& name,
      Epb_intidxType* value) {
    return Scu_epb_310_Epb_intidxType_Parse(name, value);
  }

  typedef Scu_epb_310_Epb_drvmodeType Epb_drvmodeType;
  static const Epb_drvmodeType EPB_DRVMODE_INVALID =
    Scu_epb_310_Epb_drvmodeType_EPB_DRVMODE_INVALID;
  static const Epb_drvmodeType EPB_DRVMODE_MANUAL =
    Scu_epb_310_Epb_drvmodeType_EPB_DRVMODE_MANUAL;
  static const Epb_drvmodeType EPB_DRVMODE_INTERRUPT =
    Scu_epb_310_Epb_drvmodeType_EPB_DRVMODE_INTERRUPT;
  static const Epb_drvmodeType EPB_DRVMODE_AUTO =
    Scu_epb_310_Epb_drvmodeType_EPB_DRVMODE_AUTO;
  static inline bool Epb_drvmodeType_IsValid(int value) {
    return Scu_epb_310_Epb_drvmodeType_IsValid(value);
  }
  static const Epb_drvmodeType Epb_drvmodeType_MIN =
    Scu_epb_310_Epb_drvmodeType_Epb_drvmodeType_MIN;
  static const Epb_drvmodeType Epb_drvmodeType_MAX =
    Scu_epb_310_Epb_drvmodeType_Epb_drvmodeType_MAX;
  static const int Epb_drvmodeType_ARRAYSIZE =
    Scu_epb_310_Epb_drvmodeType_Epb_drvmodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Epb_drvmodeType_descriptor() {
    return Scu_epb_310_Epb_drvmodeType_descriptor();
  }
  static inline const ::std::string& Epb_drvmodeType_Name(Epb_drvmodeType value) {
    return Scu_epb_310_Epb_drvmodeType_Name(value);
  }
  static inline bool Epb_drvmodeType_Parse(const ::std::string& name,
      Epb_drvmodeType* value) {
    return Scu_epb_310_Epb_drvmodeType_Parse(name, value);
  }

  typedef Scu_epb_310_Epb_sysstType Epb_sysstType;
  static const Epb_sysstType EPB_SYSST_RELEASED =
    Scu_epb_310_Epb_sysstType_EPB_SYSST_RELEASED;
  static const Epb_sysstType EPB_SYSST_APPLIED =
    Scu_epb_310_Epb_sysstType_EPB_SYSST_APPLIED;
  static const Epb_sysstType EPB_SYSST_RELEASING =
    Scu_epb_310_Epb_sysstType_EPB_SYSST_RELEASING;
  static const Epb_sysstType EPB_SYSST_FAULT =
    Scu_epb_310_Epb_sysstType_EPB_SYSST_FAULT;
  static const Epb_sysstType EPB_SYSST_APPLYING =
    Scu_epb_310_Epb_sysstType_EPB_SYSST_APPLYING;
  static const Epb_sysstType EPB_SYSST_DISENGAGED =
    Scu_epb_310_Epb_sysstType_EPB_SYSST_DISENGAGED;
  static inline bool Epb_sysstType_IsValid(int value) {
    return Scu_epb_310_Epb_sysstType_IsValid(value);
  }
  static const Epb_sysstType Epb_sysstType_MIN =
    Scu_epb_310_Epb_sysstType_Epb_sysstType_MIN;
  static const Epb_sysstType Epb_sysstType_MAX =
    Scu_epb_310_Epb_sysstType_Epb_sysstType_MAX;
  static const int Epb_sysstType_ARRAYSIZE =
    Scu_epb_310_Epb_sysstType_Epb_sysstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Epb_sysstType_descriptor() {
    return Scu_epb_310_Epb_sysstType_descriptor();
  }
  static inline const ::std::string& Epb_sysstType_Name(Epb_sysstType value) {
    return Scu_epb_310_Epb_sysstType_Name(value);
  }
  static inline bool Epb_sysstType_Parse(const ::std::string& name,
      Epb_sysstType* value) {
    return Scu_epb_310_Epb_sysstType_Parse(name, value);
  }

  typedef Scu_epb_310_Epb_faultstType Epb_faultstType;
  static const Epb_faultstType EPB_FAULTST_NORMAL =
    Scu_epb_310_Epb_faultstType_EPB_FAULTST_NORMAL;
  static const Epb_faultstType EPB_FAULTST_FAULT =
    Scu_epb_310_Epb_faultstType_EPB_FAULTST_FAULT;
  static inline bool Epb_faultstType_IsValid(int value) {
    return Scu_epb_310_Epb_faultstType_IsValid(value);
  }
  static const Epb_faultstType Epb_faultstType_MIN =
    Scu_epb_310_Epb_faultstType_Epb_faultstType_MIN;
  static const Epb_faultstType Epb_faultstType_MAX =
    Scu_epb_310_Epb_faultstType_Epb_faultstType_MAX;
  static const int Epb_faultstType_ARRAYSIZE =
    Scu_epb_310_Epb_faultstType_Epb_faultstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Epb_faultstType_descriptor() {
    return Scu_epb_310_Epb_faultstType_descriptor();
  }
  static inline const ::std::string& Epb_faultstType_Name(Epb_faultstType value) {
    return Scu_epb_310_Epb_faultstType_Name(value);
  }
  static inline bool Epb_faultstType_Parse(const ::std::string& name,
      Epb_faultstType* value) {
    return Scu_epb_310_Epb_faultstType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.canbus.Scu_epb_310.Epb_intidxType epb_intidx = 1;
  bool has_epb_intidx() const;
  void clear_epb_intidx();
  static const int kEpbIntidxFieldNumber = 1;
  ::apollo::canbus::Scu_epb_310_Epb_intidxType epb_intidx() const;
  void set_epb_intidx(::apollo::canbus::Scu_epb_310_Epb_intidxType value);

  // optional .apollo.canbus.Scu_epb_310.Epb_drvmodeType epb_drvmode = 2;
  bool has_epb_drvmode() const;
  void clear_epb_drvmode();
  static const int kEpbDrvmodeFieldNumber = 2;
  ::apollo::canbus::Scu_epb_310_Epb_drvmodeType epb_drvmode() const;
  void set_epb_drvmode(::apollo::canbus::Scu_epb_310_Epb_drvmodeType value);

  // optional .apollo.canbus.Scu_epb_310.Epb_sysstType epb_sysst = 3;
  bool has_epb_sysst() const;
  void clear_epb_sysst();
  static const int kEpbSysstFieldNumber = 3;
  ::apollo::canbus::Scu_epb_310_Epb_sysstType epb_sysst() const;
  void set_epb_sysst(::apollo::canbus::Scu_epb_310_Epb_sysstType value);

  // optional .apollo.canbus.Scu_epb_310.Epb_faultstType epb_faultst = 4;
  bool has_epb_faultst() const;
  void clear_epb_faultst();
  static const int kEpbFaultstFieldNumber = 4;
  ::apollo::canbus::Scu_epb_310_Epb_faultstType epb_faultst() const;
  void set_epb_faultst(::apollo::canbus::Scu_epb_310_Epb_faultstType value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Scu_epb_310)
 private:
  void set_has_epb_intidx();
  void clear_has_epb_intidx();
  void set_has_epb_drvmode();
  void clear_has_epb_drvmode();
  void set_has_epb_sysst();
  void clear_has_epb_sysst();
  void set_has_epb_faultst();
  void clear_has_epb_faultst();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int epb_intidx_;
  int epb_drvmode_;
  int epb_sysst_;
  int epb_faultst_;
  friend struct ::protobuf_modules_2fcanbus_2fproto_2fge3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Scu_vcu_1_312 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Scu_vcu_1_312) */ {
 public:
  Scu_vcu_1_312();
  virtual ~Scu_vcu_1_312();

  Scu_vcu_1_312(const Scu_vcu_1_312& from);

  inline Scu_vcu_1_312& operator=(const Scu_vcu_1_312& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Scu_vcu_1_312(Scu_vcu_1_312&& from) noexcept
    : Scu_vcu_1_312() {
    *this = ::std::move(from);
  }

  inline Scu_vcu_1_312& operator=(Scu_vcu_1_312&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scu_vcu_1_312& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scu_vcu_1_312* internal_default_instance() {
    return reinterpret_cast<const Scu_vcu_1_312*>(
               &_Scu_vcu_1_312_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Scu_vcu_1_312* other);
  friend void swap(Scu_vcu_1_312& a, Scu_vcu_1_312& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Scu_vcu_1_312* New() const final {
    return CreateMaybeMessage<Scu_vcu_1_312>(NULL);
  }

  Scu_vcu_1_312* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Scu_vcu_1_312>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Scu_vcu_1_312& from);
  void MergeFrom(const Scu_vcu_1_312& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scu_vcu_1_312* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Scu_vcu_1_312_Vcu_elcsysfaultType Vcu_elcsysfaultType;
  static const Vcu_elcsysfaultType VCU_ELCSYSFAULT_NORMAL =
    Scu_vcu_1_312_Vcu_elcsysfaultType_VCU_ELCSYSFAULT_NORMAL;
  static const Vcu_elcsysfaultType VCU_ELCSYSFAULT_FAULT =
    Scu_vcu_1_312_Vcu_elcsysfaultType_VCU_ELCSYSFAULT_FAULT;
  static inline bool Vcu_elcsysfaultType_IsValid(int value) {
    return Scu_vcu_1_312_Vcu_elcsysfaultType_IsValid(value);
  }
  static const Vcu_elcsysfaultType Vcu_elcsysfaultType_MIN =
    Scu_vcu_1_312_Vcu_elcsysfaultType_Vcu_elcsysfaultType_MIN;
  static const Vcu_elcsysfaultType Vcu_elcsysfaultType_MAX =
    Scu_vcu_1_312_Vcu_elcsysfaultType_Vcu_elcsysfaultType_MAX;
  static const int Vcu_elcsysfaultType_ARRAYSIZE =
    Scu_vcu_1_312_Vcu_elcsysfaultType_Vcu_elcsysfaultType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_elcsysfaultType_descriptor() {
    return Scu_vcu_1_312_Vcu_elcsysfaultType_descriptor();
  }
  static inline const ::std::string& Vcu_elcsysfaultType_Name(Vcu_elcsysfaultType value) {
    return Scu_vcu_1_312_Vcu_elcsysfaultType_Name(value);
  }
  static inline bool Vcu_elcsysfaultType_Parse(const ::std::string& name,
      Vcu_elcsysfaultType* value) {
    return Scu_vcu_1_312_Vcu_elcsysfaultType_Parse(name, value);
  }

  typedef Scu_vcu_1_312_Vcu_brkpedstType Vcu_brkpedstType;
  static const Vcu_brkpedstType VCU_BRKPEDST_UNPRESSED =
    Scu_vcu_1_312_Vcu_brkpedstType_VCU_BRKPEDST_UNPRESSED;
  static const Vcu_brkpedstType VCU_BRKPEDST_PRESSED =
    Scu_vcu_1_312_Vcu_brkpedstType_VCU_BRKPEDST_PRESSED;
  static inline bool Vcu_brkpedstType_IsValid(int value) {
    return Scu_vcu_1_312_Vcu_brkpedstType_IsValid(value);
  }
  static const Vcu_brkpedstType Vcu_brkpedstType_MIN =
    Scu_vcu_1_312_Vcu_brkpedstType_Vcu_brkpedstType_MIN;
  static const Vcu_brkpedstType Vcu_brkpedstType_MAX =
    Scu_vcu_1_312_Vcu_brkpedstType_Vcu_brkpedstType_MAX;
  static const int Vcu_brkpedstType_ARRAYSIZE =
    Scu_vcu_1_312_Vcu_brkpedstType_Vcu_brkpedstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_brkpedstType_descriptor() {
    return Scu_vcu_1_312_Vcu_brkpedstType_descriptor();
  }
  static inline const ::std::string& Vcu_brkpedstType_Name(Vcu_brkpedstType value) {
    return Scu_vcu_1_312_Vcu_brkpedstType_Name(value);
  }
  static inline bool Vcu_brkpedstType_Parse(const ::std::string& name,
      Vcu_brkpedstType* value) {
    return Scu_vcu_1_312_Vcu_brkpedstType_Parse(name, value);
  }

  typedef Scu_vcu_1_312_Vcu_intidxType Vcu_intidxType;
  static const Vcu_intidxType VCU_INTIDX_NOINT =
    Scu_vcu_1_312_Vcu_intidxType_VCU_INTIDX_NOINT;
  static const Vcu_intidxType VCU_INTIDX_OVERFLOW =
    Scu_vcu_1_312_Vcu_intidxType_VCU_INTIDX_OVERFLOW;
  static const Vcu_intidxType VCU_INTIDX_TIMEOUT =
    Scu_vcu_1_312_Vcu_intidxType_VCU_INTIDX_TIMEOUT;
  static const Vcu_intidxType VCU_INTIDX_ACCPEDINT =
    Scu_vcu_1_312_Vcu_intidxType_VCU_INTIDX_ACCPEDINT;
  static const Vcu_intidxType VCU_INTIDX_BRKPEDINT =
    Scu_vcu_1_312_Vcu_intidxType_VCU_INTIDX_BRKPEDINT;
  static const Vcu_intidxType VCU_INTIDX_GEARINT =
    Scu_vcu_1_312_Vcu_intidxType_VCU_INTIDX_GEARINT;
  static inline bool Vcu_intidxType_IsValid(int value) {
    return Scu_vcu_1_312_Vcu_intidxType_IsValid(value);
  }
  static const Vcu_intidxType Vcu_intidxType_MIN =
    Scu_vcu_1_312_Vcu_intidxType_Vcu_intidxType_MIN;
  static const Vcu_intidxType Vcu_intidxType_MAX =
    Scu_vcu_1_312_Vcu_intidxType_Vcu_intidxType_MAX;
  static const int Vcu_intidxType_ARRAYSIZE =
    Scu_vcu_1_312_Vcu_intidxType_Vcu_intidxType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_intidxType_descriptor() {
    return Scu_vcu_1_312_Vcu_intidxType_descriptor();
  }
  static inline const ::std::string& Vcu_intidxType_Name(Vcu_intidxType value) {
    return Scu_vcu_1_312_Vcu_intidxType_Name(value);
  }
  static inline bool Vcu_intidxType_Parse(const ::std::string& name,
      Vcu_intidxType* value) {
    return Scu_vcu_1_312_Vcu_intidxType_Parse(name, value);
  }

  typedef Scu_vcu_1_312_Vcu_gearintidxType Vcu_gearintidxType;
  static const Vcu_gearintidxType VCU_GEARINTIDX_NOINT =
    Scu_vcu_1_312_Vcu_gearintidxType_VCU_GEARINTIDX_NOINT;
  static const Vcu_gearintidxType VCU_GEARINTIDX_OVERFLOW =
    Scu_vcu_1_312_Vcu_gearintidxType_VCU_GEARINTIDX_OVERFLOW;
  static const Vcu_gearintidxType VCU_GEARINTIDX_TIMEOUT =
    Scu_vcu_1_312_Vcu_gearintidxType_VCU_GEARINTIDX_TIMEOUT;
  static inline bool Vcu_gearintidxType_IsValid(int value) {
    return Scu_vcu_1_312_Vcu_gearintidxType_IsValid(value);
  }
  static const Vcu_gearintidxType Vcu_gearintidxType_MIN =
    Scu_vcu_1_312_Vcu_gearintidxType_Vcu_gearintidxType_MIN;
  static const Vcu_gearintidxType Vcu_gearintidxType_MAX =
    Scu_vcu_1_312_Vcu_gearintidxType_Vcu_gearintidxType_MAX;
  static const int Vcu_gearintidxType_ARRAYSIZE =
    Scu_vcu_1_312_Vcu_gearintidxType_Vcu_gearintidxType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_gearintidxType_descriptor() {
    return Scu_vcu_1_312_Vcu_gearintidxType_descriptor();
  }
  static inline const ::std::string& Vcu_gearintidxType_Name(Vcu_gearintidxType value) {
    return Scu_vcu_1_312_Vcu_gearintidxType_Name(value);
  }
  static inline bool Vcu_gearintidxType_Parse(const ::std::string& name,
      Vcu_gearintidxType* value) {
    return Scu_vcu_1_312_Vcu_gearintidxType_Parse(name, value);
  }

  typedef Scu_vcu_1_312_Vcu_geardrvmodeType Vcu_geardrvmodeType;
  static const Vcu_geardrvmodeType VCU_GEARDRVMODE_INVALID =
    Scu_vcu_1_312_Vcu_geardrvmodeType_VCU_GEARDRVMODE_INVALID;
  static const Vcu_geardrvmodeType VCU_GEARDRVMODE_MANUAL =
    Scu_vcu_1_312_Vcu_geardrvmodeType_VCU_GEARDRVMODE_MANUAL;
  static const Vcu_geardrvmodeType VCU_GEARDRVMODE_INTERRUPT =
    Scu_vcu_1_312_Vcu_geardrvmodeType_VCU_GEARDRVMODE_INTERRUPT;
  static const Vcu_geardrvmodeType VCU_GEARDRVMODE_AUTO =
    Scu_vcu_1_312_Vcu_geardrvmodeType_VCU_GEARDRVMODE_AUTO;
  static inline bool Vcu_geardrvmodeType_IsValid(int value) {
    return Scu_vcu_1_312_Vcu_geardrvmodeType_IsValid(value);
  }
  static const Vcu_geardrvmodeType Vcu_geardrvmodeType_MIN =
    Scu_vcu_1_312_Vcu_geardrvmodeType_Vcu_geardrvmodeType_MIN;
  static const Vcu_geardrvmodeType Vcu_geardrvmodeType_MAX =
    Scu_vcu_1_312_Vcu_geardrvmodeType_Vcu_geardrvmodeType_MAX;
  static const int Vcu_geardrvmodeType_ARRAYSIZE =
    Scu_vcu_1_312_Vcu_geardrvmodeType_Vcu_geardrvmodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_geardrvmodeType_descriptor() {
    return Scu_vcu_1_312_Vcu_geardrvmodeType_descriptor();
  }
  static inline const ::std::string& Vcu_geardrvmodeType_Name(Vcu_geardrvmodeType value) {
    return Scu_vcu_1_312_Vcu_geardrvmodeType_Name(value);
  }
  static inline bool Vcu_geardrvmodeType_Parse(const ::std::string& name,
      Vcu_geardrvmodeType* value) {
    return Scu_vcu_1_312_Vcu_geardrvmodeType_Parse(name, value);
  }

  typedef Scu_vcu_1_312_Vcu_vehrdystType Vcu_vehrdystType;
  static const Vcu_vehrdystType VCU_VEHRDYST_NOTREADY =
    Scu_vcu_1_312_Vcu_vehrdystType_VCU_VEHRDYST_NOTREADY;
  static const Vcu_vehrdystType VCU_VEHRDYST_READY =
    Scu_vcu_1_312_Vcu_vehrdystType_VCU_VEHRDYST_READY;
  static inline bool Vcu_vehrdystType_IsValid(int value) {
    return Scu_vcu_1_312_Vcu_vehrdystType_IsValid(value);
  }
  static const Vcu_vehrdystType Vcu_vehrdystType_MIN =
    Scu_vcu_1_312_Vcu_vehrdystType_Vcu_vehrdystType_MIN;
  static const Vcu_vehrdystType Vcu_vehrdystType_MAX =
    Scu_vcu_1_312_Vcu_vehrdystType_Vcu_vehrdystType_MAX;
  static const int Vcu_vehrdystType_ARRAYSIZE =
    Scu_vcu_1_312_Vcu_vehrdystType_Vcu_vehrdystType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_vehrdystType_descriptor() {
    return Scu_vcu_1_312_Vcu_vehrdystType_descriptor();
  }
  static inline const ::std::string& Vcu_vehrdystType_Name(Vcu_vehrdystType value) {
    return Scu_vcu_1_312_Vcu_vehrdystType_Name(value);
  }
  static inline bool Vcu_vehrdystType_Parse(const ::std::string& name,
      Vcu_vehrdystType* value) {
    return Scu_vcu_1_312_Vcu_vehrdystType_Parse(name, value);
  }

  typedef Scu_vcu_1_312_Vcu_faultstType Vcu_faultstType;
  static const Vcu_faultstType VCU_FAULTST_NORMAL =
    Scu_vcu_1_312_Vcu_faultstType_VCU_FAULTST_NORMAL;
  static const Vcu_faultstType VCU_FAULTST_DERATE =
    Scu_vcu_1_312_Vcu_faultstType_VCU_FAULTST_DERATE;
  static const Vcu_faultstType VCU_FAULTST_RSV1 =
    Scu_vcu_1_312_Vcu_faultstType_VCU_FAULTST_RSV1;
  static const Vcu_faultstType VCU_FAULTST_RSV2 =
    Scu_vcu_1_312_Vcu_faultstType_VCU_FAULTST_RSV2;
  static const Vcu_faultstType VCU_FAULTST_RSV3 =
    Scu_vcu_1_312_Vcu_faultstType_VCU_FAULTST_RSV3;
  static const Vcu_faultstType VCU_FAULTST_FAULT =
    Scu_vcu_1_312_Vcu_faultstType_VCU_FAULTST_FAULT;
  static inline bool Vcu_faultstType_IsValid(int value) {
    return Scu_vcu_1_312_Vcu_faultstType_IsValid(value);
  }
  static const Vcu_faultstType Vcu_faultstType_MIN =
    Scu_vcu_1_312_Vcu_faultstType_Vcu_faultstType_MIN;
  static const Vcu_faultstType Vcu_faultstType_MAX =
    Scu_vcu_1_312_Vcu_faultstType_Vcu_faultstType_MAX;
  static const int Vcu_faultstType_ARRAYSIZE =
    Scu_vcu_1_312_Vcu_faultstType_Vcu_faultstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_faultstType_descriptor() {
    return Scu_vcu_1_312_Vcu_faultstType_descriptor();
  }
  static inline const ::std::string& Vcu_faultstType_Name(Vcu_faultstType value) {
    return Scu_vcu_1_312_Vcu_faultstType_Name(value);
  }
  static inline bool Vcu_faultstType_Parse(const ::std::string& name,
      Vcu_faultstType* value) {
    return Scu_vcu_1_312_Vcu_faultstType_Parse(name, value);
  }

  typedef Scu_vcu_1_312_Vcu_drvmodeType Vcu_drvmodeType;
  static const Vcu_drvmodeType VCU_DRVMODE_INVALID =
    Scu_vcu_1_312_Vcu_drvmodeType_VCU_DRVMODE_INVALID;
  static const Vcu_drvmodeType VCU_DRVMODE_MANUAL =
    Scu_vcu_1_312_Vcu_drvmodeType_VCU_DRVMODE_MANUAL;
  static const Vcu_drvmodeType VCU_DRVMODE_INTERRUPT =
    Scu_vcu_1_312_Vcu_drvmodeType_VCU_DRVMODE_INTERRUPT;
  static const Vcu_drvmodeType VCU_DRVMODE_AUTO =
    Scu_vcu_1_312_Vcu_drvmodeType_VCU_DRVMODE_AUTO;
  static inline bool Vcu_drvmodeType_IsValid(int value) {
    return Scu_vcu_1_312_Vcu_drvmodeType_IsValid(value);
  }
  static const Vcu_drvmodeType Vcu_drvmodeType_MIN =
    Scu_vcu_1_312_Vcu_drvmodeType_Vcu_drvmodeType_MIN;
  static const Vcu_drvmodeType Vcu_drvmodeType_MAX =
    Scu_vcu_1_312_Vcu_drvmodeType_Vcu_drvmodeType_MAX;
  static const int Vcu_drvmodeType_ARRAYSIZE =
    Scu_vcu_1_312_Vcu_drvmodeType_Vcu_drvmodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_drvmodeType_descriptor() {
    return Scu_vcu_1_312_Vcu_drvmodeType_descriptor();
  }
  static inline const ::std::string& Vcu_drvmodeType_Name(Vcu_drvmodeType value) {
    return Scu_vcu_1_312_Vcu_drvmodeType_Name(value);
  }
  static inline bool Vcu_drvmodeType_Parse(const ::std::string& name,
      Vcu_drvmodeType* value) {
    return Scu_vcu_1_312_Vcu_drvmodeType_Parse(name, value);
  }

  typedef Scu_vcu_1_312_Vcu_gearpstType Vcu_gearpstType;
  static const Vcu_gearpstType VCU_GEARPST_INVALID =
    Scu_vcu_1_312_Vcu_gearpstType_VCU_GEARPST_INVALID;
  static const Vcu_gearpstType VCU_GEARPST_DRIVE =
    Scu_vcu_1_312_Vcu_gearpstType_VCU_GEARPST_DRIVE;
  static const Vcu_gearpstType VCU_GEARPST_NEUTRAL =
    Scu_vcu_1_312_Vcu_gearpstType_VCU_GEARPST_NEUTRAL;
  static const Vcu_gearpstType VCU_GEARPST_REVERSE =
    Scu_vcu_1_312_Vcu_gearpstType_VCU_GEARPST_REVERSE;
  static const Vcu_gearpstType VCU_GEARPST_PARK =
    Scu_vcu_1_312_Vcu_gearpstType_VCU_GEARPST_PARK;
  static inline bool Vcu_gearpstType_IsValid(int value) {
    return Scu_vcu_1_312_Vcu_gearpstType_IsValid(value);
  }
  static const Vcu_gearpstType Vcu_gearpstType_MIN =
    Scu_vcu_1_312_Vcu_gearpstType_Vcu_gearpstType_MIN;
  static const Vcu_gearpstType Vcu_gearpstType_MAX =
    Scu_vcu_1_312_Vcu_gearpstType_Vcu_gearpstType_MAX;
  static const int Vcu_gearpstType_ARRAYSIZE =
    Scu_vcu_1_312_Vcu_gearpstType_Vcu_gearpstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_gearpstType_descriptor() {
    return Scu_vcu_1_312_Vcu_gearpstType_descriptor();
  }
  static inline const ::std::string& Vcu_gearpstType_Name(Vcu_gearpstType value) {
    return Scu_vcu_1_312_Vcu_gearpstType_Name(value);
  }
  static inline bool Vcu_gearpstType_Parse(const ::std::string& name,
      Vcu_gearpstType* value) {
    return Scu_vcu_1_312_Vcu_gearpstType_Parse(name, value);
  }

  typedef Scu_vcu_1_312_Vcu_gearfaultstType Vcu_gearfaultstType;
  static const Vcu_gearfaultstType VCU_GEARFAULTST_NORMAL =
    Scu_vcu_1_312_Vcu_gearfaultstType_VCU_GEARFAULTST_NORMAL;
  static const Vcu_gearfaultstType VCU_GEARFAULTST_FAULT =
    Scu_vcu_1_312_Vcu_gearfaultstType_VCU_GEARFAULTST_FAULT;
  static inline bool Vcu_gearfaultstType_IsValid(int value) {
    return Scu_vcu_1_312_Vcu_gearfaultstType_IsValid(value);
  }
  static const Vcu_gearfaultstType Vcu_gearfaultstType_MIN =
    Scu_vcu_1_312_Vcu_gearfaultstType_Vcu_gearfaultstType_MIN;
  static const Vcu_gearfaultstType Vcu_gearfaultstType_MAX =
    Scu_vcu_1_312_Vcu_gearfaultstType_Vcu_gearfaultstType_MAX;
  static const int Vcu_gearfaultstType_ARRAYSIZE =
    Scu_vcu_1_312_Vcu_gearfaultstType_Vcu_gearfaultstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_gearfaultstType_descriptor() {
    return Scu_vcu_1_312_Vcu_gearfaultstType_descriptor();
  }
  static inline const ::std::string& Vcu_gearfaultstType_Name(Vcu_gearfaultstType value) {
    return Scu_vcu_1_312_Vcu_gearfaultstType_Name(value);
  }
  static inline bool Vcu_gearfaultstType_Parse(const ::std::string& name,
      Vcu_gearfaultstType* value) {
    return Scu_vcu_1_312_Vcu_gearfaultstType_Parse(name, value);
  }

  typedef Scu_vcu_1_312_Vcu_gearactType Vcu_gearactType;
  static const Vcu_gearactType VCU_GEARACT_INVALID =
    Scu_vcu_1_312_Vcu_gearactType_VCU_GEARACT_INVALID;
  static const Vcu_gearactType VCU_GEARACT_DRIVE =
    Scu_vcu_1_312_Vcu_gearactType_VCU_GEARACT_DRIVE;
  static const Vcu_gearactType VCU_GEARACT_NEUTRAL =
    Scu_vcu_1_312_Vcu_gearactType_VCU_GEARACT_NEUTRAL;
  static const Vcu_gearactType VCU_GEARACT_REVERSE =
    Scu_vcu_1_312_Vcu_gearactType_VCU_GEARACT_REVERSE;
  static const Vcu_gearactType VCU_GEARACT_PARK =
    Scu_vcu_1_312_Vcu_gearactType_VCU_GEARACT_PARK;
  static inline bool Vcu_gearactType_IsValid(int value) {
    return Scu_vcu_1_312_Vcu_gearactType_IsValid(value);
  }
  static const Vcu_gearactType Vcu_gearactType_MIN =
    Scu_vcu_1_312_Vcu_gearactType_Vcu_gearactType_MIN;
  static const Vcu_gearactType Vcu_gearactType_MAX =
    Scu_vcu_1_312_Vcu_gearactType_Vcu_gearactType_MAX;
  static const int Vcu_gearactType_ARRAYSIZE =
    Scu_vcu_1_312_Vcu_gearactType_Vcu_gearactType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Vcu_gearactType_descriptor() {
    return Scu_vcu_1_312_Vcu_gearactType_descriptor();
  }
  static inline const ::std::string& Vcu_gearactType_Name(Vcu_gearactType value) {
    return Scu_vcu_1_312_Vcu_gearactType_Name(value);
  }
  static inline bool Vcu_gearactType_Parse(const ::std::string& name,
      Vcu_gearactType* value) {
    return Scu_vcu_1_312_Vcu_gearactType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_elcsysfaultType vcu_elcsysfault = 1;
  bool has_vcu_elcsysfault() const;
  void clear_vcu_elcsysfault();
  static const int kVcuElcsysfaultFieldNumber = 1;
  ::apollo::canbus::Scu_vcu_1_312_Vcu_elcsysfaultType vcu_elcsysfault() const;
  void set_vcu_elcsysfault(::apollo::canbus::Scu_vcu_1_312_Vcu_elcsysfaultType value);

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_brkpedstType vcu_brkpedst = 2;
  bool has_vcu_brkpedst() const;
  void clear_vcu_brkpedst();
  static const int kVcuBrkpedstFieldNumber = 2;
  ::apollo::canbus::Scu_vcu_1_312_Vcu_brkpedstType vcu_brkpedst() const;
  void set_vcu_brkpedst(::apollo::canbus::Scu_vcu_1_312_Vcu_brkpedstType value);

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_intidxType vcu_intidx = 3;
  bool has_vcu_intidx() const;
  void clear_vcu_intidx();
  static const int kVcuIntidxFieldNumber = 3;
  ::apollo::canbus::Scu_vcu_1_312_Vcu_intidxType vcu_intidx() const;
  void set_vcu_intidx(::apollo::canbus::Scu_vcu_1_312_Vcu_intidxType value);

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_gearintidxType vcu_gearintidx = 4;
  bool has_vcu_gearintidx() const;
  void clear_vcu_gearintidx();
  static const int kVcuGearintidxFieldNumber = 4;
  ::apollo::canbus::Scu_vcu_1_312_Vcu_gearintidxType vcu_gearintidx() const;
  void set_vcu_gearintidx(::apollo::canbus::Scu_vcu_1_312_Vcu_gearintidxType value);

  // optional double vcu_accpedact = 6;
  bool has_vcu_accpedact() const;
  void clear_vcu_accpedact();
  static const int kVcuAccpedactFieldNumber = 6;
  double vcu_accpedact() const;
  void set_vcu_accpedact(double value);

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_geardrvmodeType vcu_geardrvmode = 5;
  bool has_vcu_geardrvmode() const;
  void clear_vcu_geardrvmode();
  static const int kVcuGeardrvmodeFieldNumber = 5;
  ::apollo::canbus::Scu_vcu_1_312_Vcu_geardrvmodeType vcu_geardrvmode() const;
  void set_vcu_geardrvmode(::apollo::canbus::Scu_vcu_1_312_Vcu_geardrvmodeType value);

  // optional int32 vcu_vehrng = 8;
  bool has_vcu_vehrng() const;
  void clear_vcu_vehrng();
  static const int kVcuVehrngFieldNumber = 8;
  ::google::protobuf::int32 vcu_vehrng() const;
  void set_vcu_vehrng(::google::protobuf::int32 value);

  // optional double vcu_brkpedpst = 7;
  bool has_vcu_brkpedpst() const;
  void clear_vcu_brkpedpst();
  static const int kVcuBrkpedpstFieldNumber = 7;
  double vcu_brkpedpst() const;
  void set_vcu_brkpedpst(double value);

  // optional double vcu_accpedpst = 9;
  bool has_vcu_accpedpst() const;
  void clear_vcu_accpedpst();
  static const int kVcuAccpedpstFieldNumber = 9;
  double vcu_accpedpst() const;
  void set_vcu_accpedpst(double value);

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_vehrdystType vcu_vehrdyst = 10;
  bool has_vcu_vehrdyst() const;
  void clear_vcu_vehrdyst();
  static const int kVcuVehrdystFieldNumber = 10;
  ::apollo::canbus::Scu_vcu_1_312_Vcu_vehrdystType vcu_vehrdyst() const;
  void set_vcu_vehrdyst(::apollo::canbus::Scu_vcu_1_312_Vcu_vehrdystType value);

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_faultstType vcu_faultst = 11;
  bool has_vcu_faultst() const;
  void clear_vcu_faultst();
  static const int kVcuFaultstFieldNumber = 11;
  ::apollo::canbus::Scu_vcu_1_312_Vcu_faultstType vcu_faultst() const;
  void set_vcu_faultst(::apollo::canbus::Scu_vcu_1_312_Vcu_faultstType value);

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_drvmodeType vcu_drvmode = 12;
  bool has_vcu_drvmode() const;
  void clear_vcu_drvmode();
  static const int kVcuDrvmodeFieldNumber = 12;
  ::apollo::canbus::Scu_vcu_1_312_Vcu_drvmodeType vcu_drvmode() const;
  void set_vcu_drvmode(::apollo::canbus::Scu_vcu_1_312_Vcu_drvmodeType value);

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_gearpstType vcu_gearpst = 13;
  bool has_vcu_gearpst() const;
  void clear_vcu_gearpst();
  static const int kVcuGearpstFieldNumber = 13;
  ::apollo::canbus::Scu_vcu_1_312_Vcu_gearpstType vcu_gearpst() const;
  void set_vcu_gearpst(::apollo::canbus::Scu_vcu_1_312_Vcu_gearpstType value);

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_gearfaultstType vcu_gearfaultst = 14;
  bool has_vcu_gearfaultst() const;
  void clear_vcu_gearfaultst();
  static const int kVcuGearfaultstFieldNumber = 14;
  ::apollo::canbus::Scu_vcu_1_312_Vcu_gearfaultstType vcu_gearfaultst() const;
  void set_vcu_gearfaultst(::apollo::canbus::Scu_vcu_1_312_Vcu_gearfaultstType value);

  // optional .apollo.canbus.Scu_vcu_1_312.Vcu_gearactType vcu_gearact = 15;
  bool has_vcu_gearact() const;
  void clear_vcu_gearact();
  static const int kVcuGearactFieldNumber = 15;
  ::apollo::canbus::Scu_vcu_1_312_Vcu_gearactType vcu_gearact() const;
  void set_vcu_gearact(::apollo::canbus::Scu_vcu_1_312_Vcu_gearactType value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Scu_vcu_1_312)
 private:
  void set_has_vcu_elcsysfault();
  void clear_has_vcu_elcsysfault();
  void set_has_vcu_brkpedst();
  void clear_has_vcu_brkpedst();
  void set_has_vcu_intidx();
  void clear_has_vcu_intidx();
  void set_has_vcu_gearintidx();
  void clear_has_vcu_gearintidx();
  void set_has_vcu_geardrvmode();
  void clear_has_vcu_geardrvmode();
  void set_has_vcu_accpedact();
  void clear_has_vcu_accpedact();
  void set_has_vcu_brkpedpst();
  void clear_has_vcu_brkpedpst();
  void set_has_vcu_vehrng();
  void clear_has_vcu_vehrng();
  void set_has_vcu_accpedpst();
  void clear_has_vcu_accpedpst();
  void set_has_vcu_vehrdyst();
  void clear_has_vcu_vehrdyst();
  void set_has_vcu_faultst();
  void clear_has_vcu_faultst();
  void set_has_vcu_drvmode();
  void clear_has_vcu_drvmode();
  void set_has_vcu_gearpst();
  void clear_has_vcu_gearpst();
  void set_has_vcu_gearfaultst();
  void clear_has_vcu_gearfaultst();
  void set_has_vcu_gearact();
  void clear_has_vcu_gearact();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int vcu_elcsysfault_;
  int vcu_brkpedst_;
  int vcu_intidx_;
  int vcu_gearintidx_;
  double vcu_accpedact_;
  int vcu_geardrvmode_;
  ::google::protobuf::int32 vcu_vehrng_;
  double vcu_brkpedpst_;
  double vcu_accpedpst_;
  int vcu_vehrdyst_;
  int vcu_faultst_;
  int vcu_drvmode_;
  int vcu_gearpst_;
  int vcu_gearfaultst_;
  int vcu_gearact_;
  friend struct ::protobuf_modules_2fcanbus_2fproto_2fge3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Scu_eps_311 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Scu_eps_311) */ {
 public:
  Scu_eps_311();
  virtual ~Scu_eps_311();

  Scu_eps_311(const Scu_eps_311& from);

  inline Scu_eps_311& operator=(const Scu_eps_311& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Scu_eps_311(Scu_eps_311&& from) noexcept
    : Scu_eps_311() {
    *this = ::std::move(from);
  }

  inline Scu_eps_311& operator=(Scu_eps_311&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scu_eps_311& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scu_eps_311* internal_default_instance() {
    return reinterpret_cast<const Scu_eps_311*>(
               &_Scu_eps_311_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(Scu_eps_311* other);
  friend void swap(Scu_eps_311& a, Scu_eps_311& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Scu_eps_311* New() const final {
    return CreateMaybeMessage<Scu_eps_311>(NULL);
  }

  Scu_eps_311* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Scu_eps_311>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Scu_eps_311& from);
  void MergeFrom(const Scu_eps_311& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scu_eps_311* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Scu_eps_311_Eps_intidxType Eps_intidxType;
  static const Eps_intidxType EPS_INTIDX_NOINT =
    Scu_eps_311_Eps_intidxType_EPS_INTIDX_NOINT;
  static const Eps_intidxType EPS_INTIDX_OVERFLOW =
    Scu_eps_311_Eps_intidxType_EPS_INTIDX_OVERFLOW;
  static const Eps_intidxType EPS_INTIDX_TIMEOUT =
    Scu_eps_311_Eps_intidxType_EPS_INTIDX_TIMEOUT;
  static const Eps_intidxType EPS_INTIDX_STEERINT =
    Scu_eps_311_Eps_intidxType_EPS_INTIDX_STEERINT;
  static inline bool Eps_intidxType_IsValid(int value) {
    return Scu_eps_311_Eps_intidxType_IsValid(value);
  }
  static const Eps_intidxType Eps_intidxType_MIN =
    Scu_eps_311_Eps_intidxType_Eps_intidxType_MIN;
  static const Eps_intidxType Eps_intidxType_MAX =
    Scu_eps_311_Eps_intidxType_Eps_intidxType_MAX;
  static const int Eps_intidxType_ARRAYSIZE =
    Scu_eps_311_Eps_intidxType_Eps_intidxType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_intidxType_descriptor() {
    return Scu_eps_311_Eps_intidxType_descriptor();
  }
  static inline const ::std::string& Eps_intidxType_Name(Eps_intidxType value) {
    return Scu_eps_311_Eps_intidxType_Name(value);
  }
  static inline bool Eps_intidxType_Parse(const ::std::string& name,
      Eps_intidxType* value) {
    return Scu_eps_311_Eps_intidxType_Parse(name, value);
  }

  typedef Scu_eps_311_Eps_faultstType Eps_faultstType;
  static const Eps_faultstType EPS_FAULTST_NORMAL =
    Scu_eps_311_Eps_faultstType_EPS_FAULTST_NORMAL;
  static const Eps_faultstType EPS_FAULTST_FAULT =
    Scu_eps_311_Eps_faultstType_EPS_FAULTST_FAULT;
  static inline bool Eps_faultstType_IsValid(int value) {
    return Scu_eps_311_Eps_faultstType_IsValid(value);
  }
  static const Eps_faultstType Eps_faultstType_MIN =
    Scu_eps_311_Eps_faultstType_Eps_faultstType_MIN;
  static const Eps_faultstType Eps_faultstType_MAX =
    Scu_eps_311_Eps_faultstType_Eps_faultstType_MAX;
  static const int Eps_faultstType_ARRAYSIZE =
    Scu_eps_311_Eps_faultstType_Eps_faultstType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_faultstType_descriptor() {
    return Scu_eps_311_Eps_faultstType_descriptor();
  }
  static inline const ::std::string& Eps_faultstType_Name(Eps_faultstType value) {
    return Scu_eps_311_Eps_faultstType_Name(value);
  }
  static inline bool Eps_faultstType_Parse(const ::std::string& name,
      Eps_faultstType* value) {
    return Scu_eps_311_Eps_faultstType_Parse(name, value);
  }

  typedef Scu_eps_311_Eps_drvmodeType Eps_drvmodeType;
  static const Eps_drvmodeType EPS_DRVMODE_INVALID =
    Scu_eps_311_Eps_drvmodeType_EPS_DRVMODE_INVALID;
  static const Eps_drvmodeType EPS_DRVMODE_MANUAL =
    Scu_eps_311_Eps_drvmodeType_EPS_DRVMODE_MANUAL;
  static const Eps_drvmodeType EPS_DRVMODE_INTERRUPT =
    Scu_eps_311_Eps_drvmodeType_EPS_DRVMODE_INTERRUPT;
  static const Eps_drvmodeType EPS_DRVMODE_AUTO =
    Scu_eps_311_Eps_drvmodeType_EPS_DRVMODE_AUTO;
  static inline bool Eps_drvmodeType_IsValid(int value) {
    return Scu_eps_311_Eps_drvmodeType_IsValid(value);
  }
  static const Eps_drvmodeType Eps_drvmodeType_MIN =
    Scu_eps_311_Eps_drvmodeType_Eps_drvmodeType_MIN;
  static const Eps_drvmodeType Eps_drvmodeType_MAX =
    Scu_eps_311_Eps_drvmodeType_Eps_drvmodeType_MAX;
  static const int Eps_drvmodeType_ARRAYSIZE =
    Scu_eps_311_Eps_drvmodeType_Eps_drvmodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Eps_drvmodeType_descriptor() {
    return Scu_eps_311_Eps_drvmodeType_descriptor();
  }
  static inline const ::std::string& Eps_drvmodeType_Name(Eps_drvmodeType value) {
    return Scu_eps_311_Eps_drvmodeType_Name(value);
  }
  static inline bool Eps_drvmodeType_Parse(const ::std::string& name,
      Eps_drvmodeType* value) {
    return Scu_eps_311_Eps_drvmodeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double eps_steeranglespd = 2;
  bool has_eps_steeranglespd() const;
  void clear_eps_steeranglespd();
  static const int kEpsSteeranglespdFieldNumber = 2;
  double eps_steeranglespd() const;
  void set_eps_steeranglespd(double value);

  // optional .apollo.canbus.Scu_eps_311.Eps_intidxType eps_intidx = 1;
  bool has_eps_intidx() const;
  void clear_eps_intidx();
  static const int kEpsIntidxFieldNumber = 1;
  ::apollo::canbus::Scu_eps_311_Eps_intidxType eps_intidx() const;
  void set_eps_intidx(::apollo::canbus::Scu_eps_311_Eps_intidxType value);

  // optional .apollo.canbus.Scu_eps_311.Eps_faultstType eps_faultst = 4;
  bool has_eps_faultst() const;
  void clear_eps_faultst();
  static const int kEpsFaultstFieldNumber = 4;
  ::apollo::canbus::Scu_eps_311_Eps_faultstType eps_faultst() const;
  void set_eps_faultst(::apollo::canbus::Scu_eps_311_Eps_faultstType value);

  // optional double eps_steerangle = 3;
  bool has_eps_steerangle() const;
  void clear_eps_steerangle();
  static const int kEpsSteerangleFieldNumber = 3;
  double eps_steerangle() const;
  void set_eps_steerangle(double value);

  // optional .apollo.canbus.Scu_eps_311.Eps_drvmodeType eps_drvmode = 5;
  bool has_eps_drvmode() const;
  void clear_eps_drvmode();
  static const int kEpsDrvmodeFieldNumber = 5;
  ::apollo::canbus::Scu_eps_311_Eps_drvmodeType eps_drvmode() const;
  void set_eps_drvmode(::apollo::canbus::Scu_eps_311_Eps_drvmodeType value);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Scu_eps_311)
 private:
  void set_has_eps_intidx();
  void clear_has_eps_intidx();
  void set_has_eps_steeranglespd();
  void clear_has_eps_steeranglespd();
  void set_has_eps_steerangle();
  void clear_has_eps_steerangle();
  void set_has_eps_faultst();
  void clear_has_eps_faultst();
  void set_has_eps_drvmode();
  void clear_has_eps_drvmode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double eps_steeranglespd_;
  int eps_intidx_;
  int eps_faultst_;
  double eps_steerangle_;
  int eps_drvmode_;
  friend struct ::protobuf_modules_2fcanbus_2fproto_2fge3_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ge3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.canbus.Ge3) */ {
 public:
  Ge3();
  virtual ~Ge3();

  Ge3(const Ge3& from);

  inline Ge3& operator=(const Ge3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ge3(Ge3&& from) noexcept
    : Ge3() {
    *this = ::std::move(from);
  }

  inline Ge3& operator=(Ge3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ge3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ge3* internal_default_instance() {
    return reinterpret_cast<const Ge3*>(
               &_Ge3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Ge3* other);
  friend void swap(Ge3& a, Ge3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ge3* New() const final {
    return CreateMaybeMessage<Ge3>(NULL);
  }

  Ge3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ge3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ge3& from);
  void MergeFrom(const Ge3& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ge3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.canbus.Pc_bcm_201 pc_bcm_201 = 1;
  bool has_pc_bcm_201() const;
  void clear_pc_bcm_201();
  static const int kPcBcm201FieldNumber = 1;
  private:
  const ::apollo::canbus::Pc_bcm_201& _internal_pc_bcm_201() const;
  public:
  const ::apollo::canbus::Pc_bcm_201& pc_bcm_201() const;
  ::apollo::canbus::Pc_bcm_201* release_pc_bcm_201();
  ::apollo::canbus::Pc_bcm_201* mutable_pc_bcm_201();
  void set_allocated_pc_bcm_201(::apollo::canbus::Pc_bcm_201* pc_bcm_201);

  // optional .apollo.canbus.Scu_bcs_3_308 scu_bcs_3_308 = 2;
  bool has_scu_bcs_3_308() const;
  void clear_scu_bcs_3_308();
  static const int kScuBcs3308FieldNumber = 2;
  private:
  const ::apollo::canbus::Scu_bcs_3_308& _internal_scu_bcs_3_308() const;
  public:
  const ::apollo::canbus::Scu_bcs_3_308& scu_bcs_3_308() const;
  ::apollo::canbus::Scu_bcs_3_308* release_scu_bcs_3_308();
  ::apollo::canbus::Scu_bcs_3_308* mutable_scu_bcs_3_308();
  void set_allocated_scu_bcs_3_308(::apollo::canbus::Scu_bcs_3_308* scu_bcs_3_308);

  // optional .apollo.canbus.Pc_epb_203 pc_epb_203 = 3;
  bool has_pc_epb_203() const;
  void clear_pc_epb_203();
  static const int kPcEpb203FieldNumber = 3;
  private:
  const ::apollo::canbus::Pc_epb_203& _internal_pc_epb_203() const;
  public:
  const ::apollo::canbus::Pc_epb_203& pc_epb_203() const;
  ::apollo::canbus::Pc_epb_203* release_pc_epb_203();
  ::apollo::canbus::Pc_epb_203* mutable_pc_epb_203();
  void set_allocated_pc_epb_203(::apollo::canbus::Pc_epb_203* pc_epb_203);

  // optional .apollo.canbus.Pc_bcs_202 pc_bcs_202 = 4;
  bool has_pc_bcs_202() const;
  void clear_pc_bcs_202();
  static const int kPcBcs202FieldNumber = 4;
  private:
  const ::apollo::canbus::Pc_bcs_202& _internal_pc_bcs_202() const;
  public:
  const ::apollo::canbus::Pc_bcs_202& pc_bcs_202() const;
  ::apollo::canbus::Pc_bcs_202* release_pc_bcs_202();
  ::apollo::canbus::Pc_bcs_202* mutable_pc_bcs_202();
  void set_allocated_pc_bcs_202(::apollo::canbus::Pc_bcs_202* pc_bcs_202);

  // optional .apollo.canbus.Pc_vcu_205 pc_vcu_205 = 5;
  bool has_pc_vcu_205() const;
  void clear_pc_vcu_205();
  static const int kPcVcu205FieldNumber = 5;
  private:
  const ::apollo::canbus::Pc_vcu_205& _internal_pc_vcu_205() const;
  public:
  const ::apollo::canbus::Pc_vcu_205& pc_vcu_205() const;
  ::apollo::canbus::Pc_vcu_205* release_pc_vcu_205();
  ::apollo::canbus::Pc_vcu_205* mutable_pc_vcu_205();
  void set_allocated_pc_vcu_205(::apollo::canbus::Pc_vcu_205* pc_vcu_205);

  // optional .apollo.canbus.Pc_eps_204 pc_eps_204 = 6;
  bool has_pc_eps_204() const;
  void clear_pc_eps_204();
  static const int kPcEps204FieldNumber = 6;
  private:
  const ::apollo::canbus::Pc_eps_204& _internal_pc_eps_204() const;
  public:
  const ::apollo::canbus::Pc_eps_204& pc_eps_204() const;
  ::apollo::canbus::Pc_eps_204* release_pc_eps_204();
  ::apollo::canbus::Pc_eps_204* mutable_pc_eps_204();
  void set_allocated_pc_eps_204(::apollo::canbus::Pc_eps_204* pc_eps_204);

  // optional .apollo.canbus.Scu_vcu_2_313 scu_vcu_2_313 = 7;
  bool has_scu_vcu_2_313() const;
  void clear_scu_vcu_2_313();
  static const int kScuVcu2313FieldNumber = 7;
  private:
  const ::apollo::canbus::Scu_vcu_2_313& _internal_scu_vcu_2_313() const;
  public:
  const ::apollo::canbus::Scu_vcu_2_313& scu_vcu_2_313() const;
  ::apollo::canbus::Scu_vcu_2_313* release_scu_vcu_2_313();
  ::apollo::canbus::Scu_vcu_2_313* mutable_scu_vcu_2_313();
  void set_allocated_scu_vcu_2_313(::apollo::canbus::Scu_vcu_2_313* scu_vcu_2_313);

  // optional .apollo.canbus.Scu_1_301 scu_1_301 = 8;
  bool has_scu_1_301() const;
  void clear_scu_1_301();
  static const int kScu1301FieldNumber = 8;
  private:
  const ::apollo::canbus::Scu_1_301& _internal_scu_1_301() const;
  public:
  const ::apollo::canbus::Scu_1_301& scu_1_301() const;
  ::apollo::canbus::Scu_1_301* release_scu_1_301();
  ::apollo::canbus::Scu_1_301* mutable_scu_1_301();
  void set_allocated_scu_1_301(::apollo::canbus::Scu_1_301* scu_1_301);

  // optional .apollo.canbus.Scu_2_302 scu_2_302 = 9;
  bool has_scu_2_302() const;
  void clear_scu_2_302();
  static const int kScu2302FieldNumber = 9;
  private:
  const ::apollo::canbus::Scu_2_302& _internal_scu_2_302() const;
  public:
  const ::apollo::canbus::Scu_2_302& scu_2_302() const;
  ::apollo::canbus::Scu_2_302* release_scu_2_302();
  ::apollo::canbus::Scu_2_302* mutable_scu_2_302();
  void set_allocated_scu_2_302(::apollo::canbus::Scu_2_302* scu_2_302);

  // optional .apollo.canbus.Scu_3_303 scu_3_303 = 10;
  bool has_scu_3_303() const;
  void clear_scu_3_303();
  static const int kScu3303FieldNumber = 10;
  private:
  const ::apollo::canbus::Scu_3_303& _internal_scu_3_303() const;
  public:
  const ::apollo::canbus::Scu_3_303& scu_3_303() const;
  ::apollo::canbus::Scu_3_303* release_scu_3_303();
  ::apollo::canbus::Scu_3_303* mutable_scu_3_303();
  void set_allocated_scu_3_303(::apollo::canbus::Scu_3_303* scu_3_303);

  // optional .apollo.canbus.Scu_bcm_304 scu_bcm_304 = 11;
  bool has_scu_bcm_304() const;
  void clear_scu_bcm_304();
  static const int kScuBcm304FieldNumber = 11;
  private:
  const ::apollo::canbus::Scu_bcm_304& _internal_scu_bcm_304() const;
  public:
  const ::apollo::canbus::Scu_bcm_304& scu_bcm_304() const;
  ::apollo::canbus::Scu_bcm_304* release_scu_bcm_304();
  ::apollo::canbus::Scu_bcm_304* mutable_scu_bcm_304();
  void set_allocated_scu_bcm_304(::apollo::canbus::Scu_bcm_304* scu_bcm_304);

  // optional .apollo.canbus.Scu_bcs_1_306 scu_bcs_1_306 = 12;
  bool has_scu_bcs_1_306() const;
  void clear_scu_bcs_1_306();
  static const int kScuBcs1306FieldNumber = 12;
  private:
  const ::apollo::canbus::Scu_bcs_1_306& _internal_scu_bcs_1_306() const;
  public:
  const ::apollo::canbus::Scu_bcs_1_306& scu_bcs_1_306() const;
  ::apollo::canbus::Scu_bcs_1_306* release_scu_bcs_1_306();
  ::apollo::canbus::Scu_bcs_1_306* mutable_scu_bcs_1_306();
  void set_allocated_scu_bcs_1_306(::apollo::canbus::Scu_bcs_1_306* scu_bcs_1_306);

  // optional .apollo.canbus.Scu_bcs_2_307 scu_bcs_2_307 = 13;
  bool has_scu_bcs_2_307() const;
  void clear_scu_bcs_2_307();
  static const int kScuBcs2307FieldNumber = 13;
  private:
  const ::apollo::canbus::Scu_bcs_2_307& _internal_scu_bcs_2_307() const;
  public:
  const ::apollo::canbus::Scu_bcs_2_307& scu_bcs_2_307() const;
  ::apollo::canbus::Scu_bcs_2_307* release_scu_bcs_2_307();
  ::apollo::canbus::Scu_bcs_2_307* mutable_scu_bcs_2_307();
  void set_allocated_scu_bcs_2_307(::apollo::canbus::Scu_bcs_2_307* scu_bcs_2_307);

  // optional .apollo.canbus.Scu_epb_310 scu_epb_310 = 14;
  bool has_scu_epb_310() const;
  void clear_scu_epb_310();
  static const int kScuEpb310FieldNumber = 14;
  private:
  const ::apollo::canbus::Scu_epb_310& _internal_scu_epb_310() const;
  public:
  const ::apollo::canbus::Scu_epb_310& scu_epb_310() const;
  ::apollo::canbus::Scu_epb_310* release_scu_epb_310();
  ::apollo::canbus::Scu_epb_310* mutable_scu_epb_310();
  void set_allocated_scu_epb_310(::apollo::canbus::Scu_epb_310* scu_epb_310);

  // optional .apollo.canbus.Scu_vcu_1_312 scu_vcu_1_312 = 15;
  bool has_scu_vcu_1_312() const;
  void clear_scu_vcu_1_312();
  static const int kScuVcu1312FieldNumber = 15;
  private:
  const ::apollo::canbus::Scu_vcu_1_312& _internal_scu_vcu_1_312() const;
  public:
  const ::apollo::canbus::Scu_vcu_1_312& scu_vcu_1_312() const;
  ::apollo::canbus::Scu_vcu_1_312* release_scu_vcu_1_312();
  ::apollo::canbus::Scu_vcu_1_312* mutable_scu_vcu_1_312();
  void set_allocated_scu_vcu_1_312(::apollo::canbus::Scu_vcu_1_312* scu_vcu_1_312);

  // optional .apollo.canbus.Scu_eps_311 scu_eps_311 = 16;
  bool has_scu_eps_311() const;
  void clear_scu_eps_311();
  static const int kScuEps311FieldNumber = 16;
  private:
  const ::apollo::canbus::Scu_eps_311& _internal_scu_eps_311() const;
  public:
  const ::apollo::canbus::Scu_eps_311& scu_eps_311() const;
  ::apollo::canbus::Scu_eps_311* release_scu_eps_311();
  ::apollo::canbus::Scu_eps_311* mutable_scu_eps_311();
  void set_allocated_scu_eps_311(::apollo::canbus::Scu_eps_311* scu_eps_311);

  // @@protoc_insertion_point(class_scope:apollo.canbus.Ge3)
 private:
  void set_has_pc_bcm_201();
  void clear_has_pc_bcm_201();
  void set_has_scu_bcs_3_308();
  void clear_has_scu_bcs_3_308();
  void set_has_pc_epb_203();
  void clear_has_pc_epb_203();
  void set_has_pc_bcs_202();
  void clear_has_pc_bcs_202();
  void set_has_pc_vcu_205();
  void clear_has_pc_vcu_205();
  void set_has_pc_eps_204();
  void clear_has_pc_eps_204();
  void set_has_scu_vcu_2_313();
  void clear_has_scu_vcu_2_313();
  void set_has_scu_1_301();
  void clear_has_scu_1_301();
  void set_has_scu_2_302();
  void clear_has_scu_2_302();
  void set_has_scu_3_303();
  void clear_has_scu_3_303();
  void set_has_scu_bcm_304();
  void clear_has_scu_bcm_304();
  void set_has_scu_bcs_1_306();
  void clear_has_scu_bcs_1_306();
  void set_has_scu_bcs_2_307();
  void clear_has_scu_bcs_2_307();
  void set_has_scu_epb_310();
  void clear_has_scu_epb_310();
  void set_has_scu_vcu_1_312();
  void clear_has_scu_vcu_1_312();
  void set_has_scu_eps_311();
  void clear_has_scu_eps_311();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::canbus::Pc_bcm_201* pc_bcm_201_;
  ::apollo::canbus::Scu_bcs_3_308* scu_bcs_3_308_;
  ::apollo::canbus::Pc_epb_203* pc_epb_203_;
  ::apollo::canbus::Pc_bcs_202* pc_bcs_202_;
  ::apollo::canbus::Pc_vcu_205* pc_vcu_205_;
  ::apollo::canbus::Pc_eps_204* pc_eps_204_;
  ::apollo::canbus::Scu_vcu_2_313* scu_vcu_2_313_;
  ::apollo::canbus::Scu_1_301* scu_1_301_;
  ::apollo::canbus::Scu_2_302* scu_2_302_;
  ::apollo::canbus::Scu_3_303* scu_3_303_;
  ::apollo::canbus::Scu_bcm_304* scu_bcm_304_;
  ::apollo::canbus::Scu_bcs_1_306* scu_bcs_1_306_;
  ::apollo::canbus::Scu_bcs_2_307* scu_bcs_2_307_;
  ::apollo::canbus::Scu_epb_310* scu_epb_310_;
  ::apollo::canbus::Scu_vcu_1_312* scu_vcu_1_312_;
  ::apollo::canbus::Scu_eps_311* scu_eps_311_;
  friend struct ::protobuf_modules_2fcanbus_2fproto_2fge3_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pc_bcm_201

// optional .apollo.canbus.Pc_bcm_201.Pc_reverselampreqType pc_reverselampreq = 1;
inline bool Pc_bcm_201::has_pc_reverselampreq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pc_bcm_201::set_has_pc_reverselampreq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pc_bcm_201::clear_has_pc_reverselampreq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pc_bcm_201::clear_pc_reverselampreq() {
  pc_reverselampreq_ = 0;
  clear_has_pc_reverselampreq();
}
inline ::apollo::canbus::Pc_bcm_201_Pc_reverselampreqType Pc_bcm_201::pc_reverselampreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pc_bcm_201.pc_reverselampreq)
  return static_cast< ::apollo::canbus::Pc_bcm_201_Pc_reverselampreqType >(pc_reverselampreq_);
}
inline void Pc_bcm_201::set_pc_reverselampreq(::apollo::canbus::Pc_bcm_201_Pc_reverselampreqType value) {
  assert(::apollo::canbus::Pc_bcm_201_Pc_reverselampreqType_IsValid(value));
  set_has_pc_reverselampreq();
  pc_reverselampreq_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Pc_bcm_201.pc_reverselampreq)
}

// optional .apollo.canbus.Pc_bcm_201.Pc_lowbeamreqType pc_lowbeamreq = 2;
inline bool Pc_bcm_201::has_pc_lowbeamreq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pc_bcm_201::set_has_pc_lowbeamreq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pc_bcm_201::clear_has_pc_lowbeamreq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pc_bcm_201::clear_pc_lowbeamreq() {
  pc_lowbeamreq_ = 0;
  clear_has_pc_lowbeamreq();
}
inline ::apollo::canbus::Pc_bcm_201_Pc_lowbeamreqType Pc_bcm_201::pc_lowbeamreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pc_bcm_201.pc_lowbeamreq)
  return static_cast< ::apollo::canbus::Pc_bcm_201_Pc_lowbeamreqType >(pc_lowbeamreq_);
}
inline void Pc_bcm_201::set_pc_lowbeamreq(::apollo::canbus::Pc_bcm_201_Pc_lowbeamreqType value) {
  assert(::apollo::canbus::Pc_bcm_201_Pc_lowbeamreqType_IsValid(value));
  set_has_pc_lowbeamreq();
  pc_lowbeamreq_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Pc_bcm_201.pc_lowbeamreq)
}

// optional .apollo.canbus.Pc_bcm_201.Pc_highbeamreqType pc_highbeamreq = 3;
inline bool Pc_bcm_201::has_pc_highbeamreq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pc_bcm_201::set_has_pc_highbeamreq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pc_bcm_201::clear_has_pc_highbeamreq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pc_bcm_201::clear_pc_highbeamreq() {
  pc_highbeamreq_ = 0;
  clear_has_pc_highbeamreq();
}
inline ::apollo::canbus::Pc_bcm_201_Pc_highbeamreqType Pc_bcm_201::pc_highbeamreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pc_bcm_201.pc_highbeamreq)
  return static_cast< ::apollo::canbus::Pc_bcm_201_Pc_highbeamreqType >(pc_highbeamreq_);
}
inline void Pc_bcm_201::set_pc_highbeamreq(::apollo::canbus::Pc_bcm_201_Pc_highbeamreqType value) {
  assert(::apollo::canbus::Pc_bcm_201_Pc_highbeamreqType_IsValid(value));
  set_has_pc_highbeamreq();
  pc_highbeamreq_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Pc_bcm_201.pc_highbeamreq)
}

// optional .apollo.canbus.Pc_bcm_201.Pc_rightturnlampreqType pc_rightturnlampreq = 4;
inline bool Pc_bcm_201::has_pc_rightturnlampreq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pc_bcm_201::set_has_pc_rightturnlampreq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pc_bcm_201::clear_has_pc_rightturnlampreq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pc_bcm_201::clear_pc_rightturnlampreq() {
  pc_rightturnlampreq_ = 0;
  clear_has_pc_rightturnlampreq();
}
inline ::apollo::canbus::Pc_bcm_201_Pc_rightturnlampreqType Pc_bcm_201::pc_rightturnlampreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pc_bcm_201.pc_rightturnlampreq)
  return static_cast< ::apollo::canbus::Pc_bcm_201_Pc_rightturnlampreqType >(pc_rightturnlampreq_);
}
inline void Pc_bcm_201::set_pc_rightturnlampreq(::apollo::canbus::Pc_bcm_201_Pc_rightturnlampreqType value) {
  assert(::apollo::canbus::Pc_bcm_201_Pc_rightturnlampreqType_IsValid(value));
  set_has_pc_rightturnlampreq();
  pc_rightturnlampreq_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Pc_bcm_201.pc_rightturnlampreq)
}

// optional .apollo.canbus.Pc_bcm_201.Pc_leftturnlampreqType pc_leftturnlampreq = 5;
inline bool Pc_bcm_201::has_pc_leftturnlampreq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pc_bcm_201::set_has_pc_leftturnlampreq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Pc_bcm_201::clear_has_pc_leftturnlampreq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Pc_bcm_201::clear_pc_leftturnlampreq() {
  pc_leftturnlampreq_ = 0;
  clear_has_pc_leftturnlampreq();
}
inline ::apollo::canbus::Pc_bcm_201_Pc_leftturnlampreqType Pc_bcm_201::pc_leftturnlampreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pc_bcm_201.pc_leftturnlampreq)
  return static_cast< ::apollo::canbus::Pc_bcm_201_Pc_leftturnlampreqType >(pc_leftturnlampreq_);
}
inline void Pc_bcm_201::set_pc_leftturnlampreq(::apollo::canbus::Pc_bcm_201_Pc_leftturnlampreqType value) {
  assert(::apollo::canbus::Pc_bcm_201_Pc_leftturnlampreqType_IsValid(value));
  set_has_pc_leftturnlampreq();
  pc_leftturnlampreq_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Pc_bcm_201.pc_leftturnlampreq)
}

// optional .apollo.canbus.Pc_bcm_201.Pc_hornreqType pc_hornreq = 6;
inline bool Pc_bcm_201::has_pc_hornreq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Pc_bcm_201::set_has_pc_hornreq() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Pc_bcm_201::clear_has_pc_hornreq() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Pc_bcm_201::clear_pc_hornreq() {
  pc_hornreq_ = 0;
  clear_has_pc_hornreq();
}
inline ::apollo::canbus::Pc_bcm_201_Pc_hornreqType Pc_bcm_201::pc_hornreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pc_bcm_201.pc_hornreq)
  return static_cast< ::apollo::canbus::Pc_bcm_201_Pc_hornreqType >(pc_hornreq_);
}
inline void Pc_bcm_201::set_pc_hornreq(::apollo::canbus::Pc_bcm_201_Pc_hornreqType value) {
  assert(::apollo::canbus::Pc_bcm_201_Pc_hornreqType_IsValid(value));
  set_has_pc_hornreq();
  pc_hornreq_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Pc_bcm_201.pc_hornreq)
}

// optional .apollo.canbus.Pc_bcm_201.Pc_hazardlampreqType pc_hazardlampreq = 7;
inline bool Pc_bcm_201::has_pc_hazardlampreq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Pc_bcm_201::set_has_pc_hazardlampreq() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Pc_bcm_201::clear_has_pc_hazardlampreq() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Pc_bcm_201::clear_pc_hazardlampreq() {
  pc_hazardlampreq_ = 0;
  clear_has_pc_hazardlampreq();
}
inline ::apollo::canbus::Pc_bcm_201_Pc_hazardlampreqType Pc_bcm_201::pc_hazardlampreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pc_bcm_201.pc_hazardlampreq)
  return static_cast< ::apollo::canbus::Pc_bcm_201_Pc_hazardlampreqType >(pc_hazardlampreq_);
}
inline void Pc_bcm_201::set_pc_hazardlampreq(::apollo::canbus::Pc_bcm_201_Pc_hazardlampreqType value) {
  assert(::apollo::canbus::Pc_bcm_201_Pc_hazardlampreqType_IsValid(value));
  set_has_pc_hazardlampreq();
  pc_hazardlampreq_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Pc_bcm_201.pc_hazardlampreq)
}

// -------------------------------------------------------------------

// Scu_bcs_3_308

// optional .apollo.canbus.Scu_bcs_3_308.Bcs_rrwheelspdvdType bcs_rrwheelspdvd = 1;
inline bool Scu_bcs_3_308::has_bcs_rrwheelspdvd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Scu_bcs_3_308::set_has_bcs_rrwheelspdvd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Scu_bcs_3_308::clear_has_bcs_rrwheelspdvd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Scu_bcs_3_308::clear_bcs_rrwheelspdvd() {
  bcs_rrwheelspdvd_ = 0;
  clear_has_bcs_rrwheelspdvd();
}
inline ::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheelspdvdType Scu_bcs_3_308::bcs_rrwheelspdvd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_3_308.bcs_rrwheelspdvd)
  return static_cast< ::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheelspdvdType >(bcs_rrwheelspdvd_);
}
inline void Scu_bcs_3_308::set_bcs_rrwheelspdvd(::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheelspdvdType value) {
  assert(::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheelspdvdType_IsValid(value));
  set_has_bcs_rrwheelspdvd();
  bcs_rrwheelspdvd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_3_308.bcs_rrwheelspdvd)
}

// optional .apollo.canbus.Scu_bcs_3_308.Bcs_rrwheeldirectionvdType bcs_rrwheeldirectionvd = 2;
inline bool Scu_bcs_3_308::has_bcs_rrwheeldirectionvd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Scu_bcs_3_308::set_has_bcs_rrwheeldirectionvd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Scu_bcs_3_308::clear_has_bcs_rrwheeldirectionvd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Scu_bcs_3_308::clear_bcs_rrwheeldirectionvd() {
  bcs_rrwheeldirectionvd_ = 0;
  clear_has_bcs_rrwheeldirectionvd();
}
inline ::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionvdType Scu_bcs_3_308::bcs_rrwheeldirectionvd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_3_308.bcs_rrwheeldirectionvd)
  return static_cast< ::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionvdType >(bcs_rrwheeldirectionvd_);
}
inline void Scu_bcs_3_308::set_bcs_rrwheeldirectionvd(::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionvdType value) {
  assert(::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_IsValid(value));
  set_has_bcs_rrwheeldirectionvd();
  bcs_rrwheeldirectionvd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_3_308.bcs_rrwheeldirectionvd)
}

// optional .apollo.canbus.Scu_bcs_3_308.Bcs_rlwheelspdvdType bcs_rlwheelspdvd = 3;
inline bool Scu_bcs_3_308::has_bcs_rlwheelspdvd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Scu_bcs_3_308::set_has_bcs_rlwheelspdvd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Scu_bcs_3_308::clear_has_bcs_rlwheelspdvd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Scu_bcs_3_308::clear_bcs_rlwheelspdvd() {
  bcs_rlwheelspdvd_ = 0;
  clear_has_bcs_rlwheelspdvd();
}
inline ::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheelspdvdType Scu_bcs_3_308::bcs_rlwheelspdvd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_3_308.bcs_rlwheelspdvd)
  return static_cast< ::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheelspdvdType >(bcs_rlwheelspdvd_);
}
inline void Scu_bcs_3_308::set_bcs_rlwheelspdvd(::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheelspdvdType value) {
  assert(::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheelspdvdType_IsValid(value));
  set_has_bcs_rlwheelspdvd();
  bcs_rlwheelspdvd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_3_308.bcs_rlwheelspdvd)
}

// optional .apollo.canbus.Scu_bcs_3_308.Bcs_rlwheeldirectionvdType bcs_rlwheeldirectionvd = 4;
inline bool Scu_bcs_3_308::has_bcs_rlwheeldirectionvd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Scu_bcs_3_308::set_has_bcs_rlwheeldirectionvd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Scu_bcs_3_308::clear_has_bcs_rlwheeldirectionvd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Scu_bcs_3_308::clear_bcs_rlwheeldirectionvd() {
  bcs_rlwheeldirectionvd_ = 0;
  clear_has_bcs_rlwheeldirectionvd();
}
inline ::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionvdType Scu_bcs_3_308::bcs_rlwheeldirectionvd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_3_308.bcs_rlwheeldirectionvd)
  return static_cast< ::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionvdType >(bcs_rlwheeldirectionvd_);
}
inline void Scu_bcs_3_308::set_bcs_rlwheeldirectionvd(::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionvdType value) {
  assert(::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_IsValid(value));
  set_has_bcs_rlwheeldirectionvd();
  bcs_rlwheeldirectionvd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_3_308.bcs_rlwheeldirectionvd)
}

// optional .apollo.canbus.Scu_bcs_3_308.Bcs_frwheelspdvdType bcs_frwheelspdvd = 5;
inline bool Scu_bcs_3_308::has_bcs_frwheelspdvd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Scu_bcs_3_308::set_has_bcs_frwheelspdvd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Scu_bcs_3_308::clear_has_bcs_frwheelspdvd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Scu_bcs_3_308::clear_bcs_frwheelspdvd() {
  bcs_frwheelspdvd_ = 0;
  clear_has_bcs_frwheelspdvd();
}
inline ::apollo::canbus::Scu_bcs_3_308_Bcs_frwheelspdvdType Scu_bcs_3_308::bcs_frwheelspdvd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_3_308.bcs_frwheelspdvd)
  return static_cast< ::apollo::canbus::Scu_bcs_3_308_Bcs_frwheelspdvdType >(bcs_frwheelspdvd_);
}
inline void Scu_bcs_3_308::set_bcs_frwheelspdvd(::apollo::canbus::Scu_bcs_3_308_Bcs_frwheelspdvdType value) {
  assert(::apollo::canbus::Scu_bcs_3_308_Bcs_frwheelspdvdType_IsValid(value));
  set_has_bcs_frwheelspdvd();
  bcs_frwheelspdvd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_3_308.bcs_frwheelspdvd)
}

// optional .apollo.canbus.Scu_bcs_3_308.Bcs_frwheeldirectionvdType bcs_frwheeldirectionvd = 6;
inline bool Scu_bcs_3_308::has_bcs_frwheeldirectionvd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Scu_bcs_3_308::set_has_bcs_frwheeldirectionvd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Scu_bcs_3_308::clear_has_bcs_frwheeldirectionvd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Scu_bcs_3_308::clear_bcs_frwheeldirectionvd() {
  bcs_frwheeldirectionvd_ = 0;
  clear_has_bcs_frwheeldirectionvd();
}
inline ::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionvdType Scu_bcs_3_308::bcs_frwheeldirectionvd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_3_308.bcs_frwheeldirectionvd)
  return static_cast< ::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionvdType >(bcs_frwheeldirectionvd_);
}
inline void Scu_bcs_3_308::set_bcs_frwheeldirectionvd(::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionvdType value) {
  assert(::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionvdType_IsValid(value));
  set_has_bcs_frwheeldirectionvd();
  bcs_frwheeldirectionvd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_3_308.bcs_frwheeldirectionvd)
}

// optional .apollo.canbus.Scu_bcs_3_308.Bcs_flwheelspdvdType bcs_flwheelspdvd = 7;
inline bool Scu_bcs_3_308::has_bcs_flwheelspdvd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Scu_bcs_3_308::set_has_bcs_flwheelspdvd() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Scu_bcs_3_308::clear_has_bcs_flwheelspdvd() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Scu_bcs_3_308::clear_bcs_flwheelspdvd() {
  bcs_flwheelspdvd_ = 0;
  clear_has_bcs_flwheelspdvd();
}
inline ::apollo::canbus::Scu_bcs_3_308_Bcs_flwheelspdvdType Scu_bcs_3_308::bcs_flwheelspdvd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_3_308.bcs_flwheelspdvd)
  return static_cast< ::apollo::canbus::Scu_bcs_3_308_Bcs_flwheelspdvdType >(bcs_flwheelspdvd_);
}
inline void Scu_bcs_3_308::set_bcs_flwheelspdvd(::apollo::canbus::Scu_bcs_3_308_Bcs_flwheelspdvdType value) {
  assert(::apollo::canbus::Scu_bcs_3_308_Bcs_flwheelspdvdType_IsValid(value));
  set_has_bcs_flwheelspdvd();
  bcs_flwheelspdvd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_3_308.bcs_flwheelspdvd)
}

// optional .apollo.canbus.Scu_bcs_3_308.Bcs_flwheeldirectionvdType bcs_flwheeldirectionvd = 8;
inline bool Scu_bcs_3_308::has_bcs_flwheeldirectionvd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Scu_bcs_3_308::set_has_bcs_flwheeldirectionvd() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Scu_bcs_3_308::clear_has_bcs_flwheeldirectionvd() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Scu_bcs_3_308::clear_bcs_flwheeldirectionvd() {
  bcs_flwheeldirectionvd_ = 0;
  clear_has_bcs_flwheeldirectionvd();
}
inline ::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionvdType Scu_bcs_3_308::bcs_flwheeldirectionvd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_3_308.bcs_flwheeldirectionvd)
  return static_cast< ::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionvdType >(bcs_flwheeldirectionvd_);
}
inline void Scu_bcs_3_308::set_bcs_flwheeldirectionvd(::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionvdType value) {
  assert(::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionvdType_IsValid(value));
  set_has_bcs_flwheeldirectionvd();
  bcs_flwheeldirectionvd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_3_308.bcs_flwheeldirectionvd)
}

// optional double bcs_rrwheelspd = 9;
inline bool Scu_bcs_3_308::has_bcs_rrwheelspd() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Scu_bcs_3_308::set_has_bcs_rrwheelspd() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Scu_bcs_3_308::clear_has_bcs_rrwheelspd() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Scu_bcs_3_308::clear_bcs_rrwheelspd() {
  bcs_rrwheelspd_ = 0;
  clear_has_bcs_rrwheelspd();
}
inline double Scu_bcs_3_308::bcs_rrwheelspd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_3_308.bcs_rrwheelspd)
  return bcs_rrwheelspd_;
}
inline void Scu_bcs_3_308::set_bcs_rrwheelspd(double value) {
  set_has_bcs_rrwheelspd();
  bcs_rrwheelspd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_3_308.bcs_rrwheelspd)
}

// optional .apollo.canbus.Scu_bcs_3_308.Bcs_rrwheeldirectionType bcs_rrwheeldirection = 10;
inline bool Scu_bcs_3_308::has_bcs_rrwheeldirection() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Scu_bcs_3_308::set_has_bcs_rrwheeldirection() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Scu_bcs_3_308::clear_has_bcs_rrwheeldirection() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Scu_bcs_3_308::clear_bcs_rrwheeldirection() {
  bcs_rrwheeldirection_ = 0;
  clear_has_bcs_rrwheeldirection();
}
inline ::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionType Scu_bcs_3_308::bcs_rrwheeldirection() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_3_308.bcs_rrwheeldirection)
  return static_cast< ::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionType >(bcs_rrwheeldirection_);
}
inline void Scu_bcs_3_308::set_bcs_rrwheeldirection(::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionType value) {
  assert(::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionType_IsValid(value));
  set_has_bcs_rrwheeldirection();
  bcs_rrwheeldirection_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_3_308.bcs_rrwheeldirection)
}

// optional double bcs_rlwheelspd = 11;
inline bool Scu_bcs_3_308::has_bcs_rlwheelspd() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Scu_bcs_3_308::set_has_bcs_rlwheelspd() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Scu_bcs_3_308::clear_has_bcs_rlwheelspd() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Scu_bcs_3_308::clear_bcs_rlwheelspd() {
  bcs_rlwheelspd_ = 0;
  clear_has_bcs_rlwheelspd();
}
inline double Scu_bcs_3_308::bcs_rlwheelspd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_3_308.bcs_rlwheelspd)
  return bcs_rlwheelspd_;
}
inline void Scu_bcs_3_308::set_bcs_rlwheelspd(double value) {
  set_has_bcs_rlwheelspd();
  bcs_rlwheelspd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_3_308.bcs_rlwheelspd)
}

// optional .apollo.canbus.Scu_bcs_3_308.Bcs_rlwheeldirectionType bcs_rlwheeldirection = 12;
inline bool Scu_bcs_3_308::has_bcs_rlwheeldirection() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Scu_bcs_3_308::set_has_bcs_rlwheeldirection() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Scu_bcs_3_308::clear_has_bcs_rlwheeldirection() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Scu_bcs_3_308::clear_bcs_rlwheeldirection() {
  bcs_rlwheeldirection_ = 0;
  clear_has_bcs_rlwheeldirection();
}
inline ::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionType Scu_bcs_3_308::bcs_rlwheeldirection() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_3_308.bcs_rlwheeldirection)
  return static_cast< ::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionType >(bcs_rlwheeldirection_);
}
inline void Scu_bcs_3_308::set_bcs_rlwheeldirection(::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionType value) {
  assert(::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionType_IsValid(value));
  set_has_bcs_rlwheeldirection();
  bcs_rlwheeldirection_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_3_308.bcs_rlwheeldirection)
}

// optional double bcs_frwheelspd = 13;
inline bool Scu_bcs_3_308::has_bcs_frwheelspd() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Scu_bcs_3_308::set_has_bcs_frwheelspd() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Scu_bcs_3_308::clear_has_bcs_frwheelspd() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Scu_bcs_3_308::clear_bcs_frwheelspd() {
  bcs_frwheelspd_ = 0;
  clear_has_bcs_frwheelspd();
}
inline double Scu_bcs_3_308::bcs_frwheelspd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_3_308.bcs_frwheelspd)
  return bcs_frwheelspd_;
}
inline void Scu_bcs_3_308::set_bcs_frwheelspd(double value) {
  set_has_bcs_frwheelspd();
  bcs_frwheelspd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_3_308.bcs_frwheelspd)
}

// optional .apollo.canbus.Scu_bcs_3_308.Bcs_frwheeldirectionType bcs_frwheeldirection = 14;
inline bool Scu_bcs_3_308::has_bcs_frwheeldirection() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Scu_bcs_3_308::set_has_bcs_frwheeldirection() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Scu_bcs_3_308::clear_has_bcs_frwheeldirection() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Scu_bcs_3_308::clear_bcs_frwheeldirection() {
  bcs_frwheeldirection_ = 0;
  clear_has_bcs_frwheeldirection();
}
inline ::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionType Scu_bcs_3_308::bcs_frwheeldirection() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_3_308.bcs_frwheeldirection)
  return static_cast< ::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionType >(bcs_frwheeldirection_);
}
inline void Scu_bcs_3_308::set_bcs_frwheeldirection(::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionType value) {
  assert(::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionType_IsValid(value));
  set_has_bcs_frwheeldirection();
  bcs_frwheeldirection_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_3_308.bcs_frwheeldirection)
}

// optional double bcs_flwheelspd = 15;
inline bool Scu_bcs_3_308::has_bcs_flwheelspd() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Scu_bcs_3_308::set_has_bcs_flwheelspd() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Scu_bcs_3_308::clear_has_bcs_flwheelspd() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Scu_bcs_3_308::clear_bcs_flwheelspd() {
  bcs_flwheelspd_ = 0;
  clear_has_bcs_flwheelspd();
}
inline double Scu_bcs_3_308::bcs_flwheelspd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_3_308.bcs_flwheelspd)
  return bcs_flwheelspd_;
}
inline void Scu_bcs_3_308::set_bcs_flwheelspd(double value) {
  set_has_bcs_flwheelspd();
  bcs_flwheelspd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_3_308.bcs_flwheelspd)
}

// optional .apollo.canbus.Scu_bcs_3_308.Bcs_flwheeldirectionType bcs_flwheeldirection = 16;
inline bool Scu_bcs_3_308::has_bcs_flwheeldirection() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Scu_bcs_3_308::set_has_bcs_flwheeldirection() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Scu_bcs_3_308::clear_has_bcs_flwheeldirection() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Scu_bcs_3_308::clear_bcs_flwheeldirection() {
  bcs_flwheeldirection_ = 0;
  clear_has_bcs_flwheeldirection();
}
inline ::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionType Scu_bcs_3_308::bcs_flwheeldirection() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_3_308.bcs_flwheeldirection)
  return static_cast< ::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionType >(bcs_flwheeldirection_);
}
inline void Scu_bcs_3_308::set_bcs_flwheeldirection(::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionType value) {
  assert(::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionType_IsValid(value));
  set_has_bcs_flwheeldirection();
  bcs_flwheeldirection_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_3_308.bcs_flwheeldirection)
}

// -------------------------------------------------------------------

// Pc_epb_203

// optional .apollo.canbus.Pc_epb_203.Pc_epbreqType pc_epbreq = 1;
inline bool Pc_epb_203::has_pc_epbreq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pc_epb_203::set_has_pc_epbreq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pc_epb_203::clear_has_pc_epbreq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pc_epb_203::clear_pc_epbreq() {
  pc_epbreq_ = 0;
  clear_has_pc_epbreq();
}
inline ::apollo::canbus::Pc_epb_203_Pc_epbreqType Pc_epb_203::pc_epbreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pc_epb_203.pc_epbreq)
  return static_cast< ::apollo::canbus::Pc_epb_203_Pc_epbreqType >(pc_epbreq_);
}
inline void Pc_epb_203::set_pc_epbreq(::apollo::canbus::Pc_epb_203_Pc_epbreqType value) {
  assert(::apollo::canbus::Pc_epb_203_Pc_epbreqType_IsValid(value));
  set_has_pc_epbreq();
  pc_epbreq_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Pc_epb_203.pc_epbreq)
}

// optional .apollo.canbus.Pc_epb_203.Pc_epbenableType pc_epbenable = 2;
inline bool Pc_epb_203::has_pc_epbenable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pc_epb_203::set_has_pc_epbenable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pc_epb_203::clear_has_pc_epbenable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pc_epb_203::clear_pc_epbenable() {
  pc_epbenable_ = 0;
  clear_has_pc_epbenable();
}
inline ::apollo::canbus::Pc_epb_203_Pc_epbenableType Pc_epb_203::pc_epbenable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pc_epb_203.pc_epbenable)
  return static_cast< ::apollo::canbus::Pc_epb_203_Pc_epbenableType >(pc_epbenable_);
}
inline void Pc_epb_203::set_pc_epbenable(::apollo::canbus::Pc_epb_203_Pc_epbenableType value) {
  assert(::apollo::canbus::Pc_epb_203_Pc_epbenableType_IsValid(value));
  set_has_pc_epbenable();
  pc_epbenable_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Pc_epb_203.pc_epbenable)
}

// -------------------------------------------------------------------

// Pc_bcs_202

// optional double pc_brkpedreq = 1;
inline bool Pc_bcs_202::has_pc_brkpedreq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pc_bcs_202::set_has_pc_brkpedreq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pc_bcs_202::clear_has_pc_brkpedreq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pc_bcs_202::clear_pc_brkpedreq() {
  pc_brkpedreq_ = 0;
  clear_has_pc_brkpedreq();
}
inline double Pc_bcs_202::pc_brkpedreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pc_bcs_202.pc_brkpedreq)
  return pc_brkpedreq_;
}
inline void Pc_bcs_202::set_pc_brkpedreq(double value) {
  set_has_pc_brkpedreq();
  pc_brkpedreq_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Pc_bcs_202.pc_brkpedreq)
}

// optional .apollo.canbus.Pc_bcs_202.Pc_brkpedenableType pc_brkpedenable = 2;
inline bool Pc_bcs_202::has_pc_brkpedenable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pc_bcs_202::set_has_pc_brkpedenable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pc_bcs_202::clear_has_pc_brkpedenable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pc_bcs_202::clear_pc_brkpedenable() {
  pc_brkpedenable_ = 0;
  clear_has_pc_brkpedenable();
}
inline ::apollo::canbus::Pc_bcs_202_Pc_brkpedenableType Pc_bcs_202::pc_brkpedenable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pc_bcs_202.pc_brkpedenable)
  return static_cast< ::apollo::canbus::Pc_bcs_202_Pc_brkpedenableType >(pc_brkpedenable_);
}
inline void Pc_bcs_202::set_pc_brkpedenable(::apollo::canbus::Pc_bcs_202_Pc_brkpedenableType value) {
  assert(::apollo::canbus::Pc_bcs_202_Pc_brkpedenableType_IsValid(value));
  set_has_pc_brkpedenable();
  pc_brkpedenable_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Pc_bcs_202.pc_brkpedenable)
}

// -------------------------------------------------------------------

// Pc_vcu_205

// optional double pc_accpedreq = 1;
inline bool Pc_vcu_205::has_pc_accpedreq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pc_vcu_205::set_has_pc_accpedreq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pc_vcu_205::clear_has_pc_accpedreq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pc_vcu_205::clear_pc_accpedreq() {
  pc_accpedreq_ = 0;
  clear_has_pc_accpedreq();
}
inline double Pc_vcu_205::pc_accpedreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pc_vcu_205.pc_accpedreq)
  return pc_accpedreq_;
}
inline void Pc_vcu_205::set_pc_accpedreq(double value) {
  set_has_pc_accpedreq();
  pc_accpedreq_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Pc_vcu_205.pc_accpedreq)
}

// optional .apollo.canbus.Pc_vcu_205.Pc_accpedenableType pc_accpedenable = 2;
inline bool Pc_vcu_205::has_pc_accpedenable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pc_vcu_205::set_has_pc_accpedenable() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pc_vcu_205::clear_has_pc_accpedenable() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pc_vcu_205::clear_pc_accpedenable() {
  pc_accpedenable_ = 0;
  clear_has_pc_accpedenable();
}
inline ::apollo::canbus::Pc_vcu_205_Pc_accpedenableType Pc_vcu_205::pc_accpedenable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pc_vcu_205.pc_accpedenable)
  return static_cast< ::apollo::canbus::Pc_vcu_205_Pc_accpedenableType >(pc_accpedenable_);
}
inline void Pc_vcu_205::set_pc_accpedenable(::apollo::canbus::Pc_vcu_205_Pc_accpedenableType value) {
  assert(::apollo::canbus::Pc_vcu_205_Pc_accpedenableType_IsValid(value));
  set_has_pc_accpedenable();
  pc_accpedenable_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Pc_vcu_205.pc_accpedenable)
}

// optional double pc_torqreq = 3;
inline bool Pc_vcu_205::has_pc_torqreq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pc_vcu_205::set_has_pc_torqreq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pc_vcu_205::clear_has_pc_torqreq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pc_vcu_205::clear_pc_torqreq() {
  pc_torqreq_ = 0;
  clear_has_pc_torqreq();
}
inline double Pc_vcu_205::pc_torqreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pc_vcu_205.pc_torqreq)
  return pc_torqreq_;
}
inline void Pc_vcu_205::set_pc_torqreq(double value) {
  set_has_pc_torqreq();
  pc_torqreq_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Pc_vcu_205.pc_torqreq)
}

// optional .apollo.canbus.Pc_vcu_205.Pc_torqenableType pc_torqenable = 4;
inline bool Pc_vcu_205::has_pc_torqenable() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pc_vcu_205::set_has_pc_torqenable() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pc_vcu_205::clear_has_pc_torqenable() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pc_vcu_205::clear_pc_torqenable() {
  pc_torqenable_ = 0;
  clear_has_pc_torqenable();
}
inline ::apollo::canbus::Pc_vcu_205_Pc_torqenableType Pc_vcu_205::pc_torqenable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pc_vcu_205.pc_torqenable)
  return static_cast< ::apollo::canbus::Pc_vcu_205_Pc_torqenableType >(pc_torqenable_);
}
inline void Pc_vcu_205::set_pc_torqenable(::apollo::canbus::Pc_vcu_205_Pc_torqenableType value) {
  assert(::apollo::canbus::Pc_vcu_205_Pc_torqenableType_IsValid(value));
  set_has_pc_torqenable();
  pc_torqenable_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Pc_vcu_205.pc_torqenable)
}

// optional .apollo.canbus.Pc_vcu_205.Pc_gearreqType pc_gearreq = 5;
inline bool Pc_vcu_205::has_pc_gearreq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pc_vcu_205::set_has_pc_gearreq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Pc_vcu_205::clear_has_pc_gearreq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Pc_vcu_205::clear_pc_gearreq() {
  pc_gearreq_ = 0;
  clear_has_pc_gearreq();
}
inline ::apollo::canbus::Pc_vcu_205_Pc_gearreqType Pc_vcu_205::pc_gearreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pc_vcu_205.pc_gearreq)
  return static_cast< ::apollo::canbus::Pc_vcu_205_Pc_gearreqType >(pc_gearreq_);
}
inline void Pc_vcu_205::set_pc_gearreq(::apollo::canbus::Pc_vcu_205_Pc_gearreqType value) {
  assert(::apollo::canbus::Pc_vcu_205_Pc_gearreqType_IsValid(value));
  set_has_pc_gearreq();
  pc_gearreq_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Pc_vcu_205.pc_gearreq)
}

// optional .apollo.canbus.Pc_vcu_205.Pc_gearenableType pc_gearenable = 6;
inline bool Pc_vcu_205::has_pc_gearenable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Pc_vcu_205::set_has_pc_gearenable() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Pc_vcu_205::clear_has_pc_gearenable() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Pc_vcu_205::clear_pc_gearenable() {
  pc_gearenable_ = 0;
  clear_has_pc_gearenable();
}
inline ::apollo::canbus::Pc_vcu_205_Pc_gearenableType Pc_vcu_205::pc_gearenable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pc_vcu_205.pc_gearenable)
  return static_cast< ::apollo::canbus::Pc_vcu_205_Pc_gearenableType >(pc_gearenable_);
}
inline void Pc_vcu_205::set_pc_gearenable(::apollo::canbus::Pc_vcu_205_Pc_gearenableType value) {
  assert(::apollo::canbus::Pc_vcu_205_Pc_gearenableType_IsValid(value));
  set_has_pc_gearenable();
  pc_gearenable_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Pc_vcu_205.pc_gearenable)
}

// -------------------------------------------------------------------

// Pc_eps_204

// optional int32 pc_steerspdreq = 1;
inline bool Pc_eps_204::has_pc_steerspdreq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pc_eps_204::set_has_pc_steerspdreq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pc_eps_204::clear_has_pc_steerspdreq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pc_eps_204::clear_pc_steerspdreq() {
  pc_steerspdreq_ = 0;
  clear_has_pc_steerspdreq();
}
inline ::google::protobuf::int32 Pc_eps_204::pc_steerspdreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pc_eps_204.pc_steerspdreq)
  return pc_steerspdreq_;
}
inline void Pc_eps_204::set_pc_steerspdreq(::google::protobuf::int32 value) {
  set_has_pc_steerspdreq();
  pc_steerspdreq_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Pc_eps_204.pc_steerspdreq)
}

// optional .apollo.canbus.Pc_eps_204.Pc_steerenableType pc_steerenable = 2;
inline bool Pc_eps_204::has_pc_steerenable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pc_eps_204::set_has_pc_steerenable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pc_eps_204::clear_has_pc_steerenable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pc_eps_204::clear_pc_steerenable() {
  pc_steerenable_ = 0;
  clear_has_pc_steerenable();
}
inline ::apollo::canbus::Pc_eps_204_Pc_steerenableType Pc_eps_204::pc_steerenable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pc_eps_204.pc_steerenable)
  return static_cast< ::apollo::canbus::Pc_eps_204_Pc_steerenableType >(pc_steerenable_);
}
inline void Pc_eps_204::set_pc_steerenable(::apollo::canbus::Pc_eps_204_Pc_steerenableType value) {
  assert(::apollo::canbus::Pc_eps_204_Pc_steerenableType_IsValid(value));
  set_has_pc_steerenable();
  pc_steerenable_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Pc_eps_204.pc_steerenable)
}

// optional double pc_steerangreq = 3;
inline bool Pc_eps_204::has_pc_steerangreq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pc_eps_204::set_has_pc_steerangreq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pc_eps_204::clear_has_pc_steerangreq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pc_eps_204::clear_pc_steerangreq() {
  pc_steerangreq_ = 0;
  clear_has_pc_steerangreq();
}
inline double Pc_eps_204::pc_steerangreq() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Pc_eps_204.pc_steerangreq)
  return pc_steerangreq_;
}
inline void Pc_eps_204::set_pc_steerangreq(double value) {
  set_has_pc_steerangreq();
  pc_steerangreq_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Pc_eps_204.pc_steerangreq)
}

// -------------------------------------------------------------------

// Scu_vcu_2_313

// optional double vcu_torqposmax = 1;
inline bool Scu_vcu_2_313::has_vcu_torqposmax() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Scu_vcu_2_313::set_has_vcu_torqposmax() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Scu_vcu_2_313::clear_has_vcu_torqposmax() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Scu_vcu_2_313::clear_vcu_torqposmax() {
  vcu_torqposmax_ = 0;
  clear_has_vcu_torqposmax();
}
inline double Scu_vcu_2_313::vcu_torqposmax() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_vcu_2_313.vcu_torqposmax)
  return vcu_torqposmax_;
}
inline void Scu_vcu_2_313::set_vcu_torqposmax(double value) {
  set_has_vcu_torqposmax();
  vcu_torqposmax_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_vcu_2_313.vcu_torqposmax)
}

// optional double vcu_torqnegmax = 2;
inline bool Scu_vcu_2_313::has_vcu_torqnegmax() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Scu_vcu_2_313::set_has_vcu_torqnegmax() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Scu_vcu_2_313::clear_has_vcu_torqnegmax() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Scu_vcu_2_313::clear_vcu_torqnegmax() {
  vcu_torqnegmax_ = 0;
  clear_has_vcu_torqnegmax();
}
inline double Scu_vcu_2_313::vcu_torqnegmax() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_vcu_2_313.vcu_torqnegmax)
  return vcu_torqnegmax_;
}
inline void Scu_vcu_2_313::set_vcu_torqnegmax(double value) {
  set_has_vcu_torqnegmax();
  vcu_torqnegmax_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_vcu_2_313.vcu_torqnegmax)
}

// optional double vcu_torqact = 3;
inline bool Scu_vcu_2_313::has_vcu_torqact() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Scu_vcu_2_313::set_has_vcu_torqact() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Scu_vcu_2_313::clear_has_vcu_torqact() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Scu_vcu_2_313::clear_vcu_torqact() {
  vcu_torqact_ = 0;
  clear_has_vcu_torqact();
}
inline double Scu_vcu_2_313::vcu_torqact() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_vcu_2_313.vcu_torqact)
  return vcu_torqact_;
}
inline void Scu_vcu_2_313::set_vcu_torqact(double value) {
  set_has_vcu_torqact();
  vcu_torqact_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_vcu_2_313.vcu_torqact)
}

// optional int32 vcu_engspd = 4;
inline bool Scu_vcu_2_313::has_vcu_engspd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Scu_vcu_2_313::set_has_vcu_engspd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Scu_vcu_2_313::clear_has_vcu_engspd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Scu_vcu_2_313::clear_vcu_engspd() {
  vcu_engspd_ = 0;
  clear_has_vcu_engspd();
}
inline ::google::protobuf::int32 Scu_vcu_2_313::vcu_engspd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_vcu_2_313.vcu_engspd)
  return vcu_engspd_;
}
inline void Scu_vcu_2_313::set_vcu_engspd(::google::protobuf::int32 value) {
  set_has_vcu_engspd();
  vcu_engspd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_vcu_2_313.vcu_engspd)
}

// -------------------------------------------------------------------

// Scu_1_301

// optional int32 vin16 = 1;
inline bool Scu_1_301::has_vin16() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Scu_1_301::set_has_vin16() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Scu_1_301::clear_has_vin16() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Scu_1_301::clear_vin16() {
  vin16_ = 0;
  clear_has_vin16();
}
inline ::google::protobuf::int32 Scu_1_301::vin16() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_1_301.vin16)
  return vin16_;
}
inline void Scu_1_301::set_vin16(::google::protobuf::int32 value) {
  set_has_vin16();
  vin16_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_1_301.vin16)
}

// optional .apollo.canbus.Scu_1_301.Scu_stopbutstType scu_stopbutst = 2;
inline bool Scu_1_301::has_scu_stopbutst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Scu_1_301::set_has_scu_stopbutst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Scu_1_301::clear_has_scu_stopbutst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Scu_1_301::clear_scu_stopbutst() {
  scu_stopbutst_ = 0;
  clear_has_scu_stopbutst();
}
inline ::apollo::canbus::Scu_1_301_Scu_stopbutstType Scu_1_301::scu_stopbutst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_1_301.scu_stopbutst)
  return static_cast< ::apollo::canbus::Scu_1_301_Scu_stopbutstType >(scu_stopbutst_);
}
inline void Scu_1_301::set_scu_stopbutst(::apollo::canbus::Scu_1_301_Scu_stopbutstType value) {
  assert(::apollo::canbus::Scu_1_301_Scu_stopbutstType_IsValid(value));
  set_has_scu_stopbutst();
  scu_stopbutst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_1_301.scu_stopbutst)
}

// optional .apollo.canbus.Scu_1_301.Scu_drvmodeType scu_drvmode = 3;
inline bool Scu_1_301::has_scu_drvmode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Scu_1_301::set_has_scu_drvmode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Scu_1_301::clear_has_scu_drvmode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Scu_1_301::clear_scu_drvmode() {
  scu_drvmode_ = 0;
  clear_has_scu_drvmode();
}
inline ::apollo::canbus::Scu_1_301_Scu_drvmodeType Scu_1_301::scu_drvmode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_1_301.scu_drvmode)
  return static_cast< ::apollo::canbus::Scu_1_301_Scu_drvmodeType >(scu_drvmode_);
}
inline void Scu_1_301::set_scu_drvmode(::apollo::canbus::Scu_1_301_Scu_drvmodeType value) {
  assert(::apollo::canbus::Scu_1_301_Scu_drvmodeType_IsValid(value));
  set_has_scu_drvmode();
  scu_drvmode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_1_301.scu_drvmode)
}

// optional .apollo.canbus.Scu_1_301.Scu_faultstType scu_faultst = 4;
inline bool Scu_1_301::has_scu_faultst() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Scu_1_301::set_has_scu_faultst() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Scu_1_301::clear_has_scu_faultst() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Scu_1_301::clear_scu_faultst() {
  scu_faultst_ = 0;
  clear_has_scu_faultst();
}
inline ::apollo::canbus::Scu_1_301_Scu_faultstType Scu_1_301::scu_faultst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_1_301.scu_faultst)
  return static_cast< ::apollo::canbus::Scu_1_301_Scu_faultstType >(scu_faultst_);
}
inline void Scu_1_301::set_scu_faultst(::apollo::canbus::Scu_1_301_Scu_faultstType value) {
  assert(::apollo::canbus::Scu_1_301_Scu_faultstType_IsValid(value));
  set_has_scu_faultst();
  scu_faultst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_1_301.scu_faultst)
}

// -------------------------------------------------------------------

// Scu_2_302

// optional int32 vin07 = 1;
inline bool Scu_2_302::has_vin07() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Scu_2_302::set_has_vin07() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Scu_2_302::clear_has_vin07() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Scu_2_302::clear_vin07() {
  vin07_ = 0;
  clear_has_vin07();
}
inline ::google::protobuf::int32 Scu_2_302::vin07() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_2_302.vin07)
  return vin07_;
}
inline void Scu_2_302::set_vin07(::google::protobuf::int32 value) {
  set_has_vin07();
  vin07_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_2_302.vin07)
}

// optional int32 vin06 = 2;
inline bool Scu_2_302::has_vin06() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Scu_2_302::set_has_vin06() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Scu_2_302::clear_has_vin06() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Scu_2_302::clear_vin06() {
  vin06_ = 0;
  clear_has_vin06();
}
inline ::google::protobuf::int32 Scu_2_302::vin06() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_2_302.vin06)
  return vin06_;
}
inline void Scu_2_302::set_vin06(::google::protobuf::int32 value) {
  set_has_vin06();
  vin06_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_2_302.vin06)
}

// optional int32 vin05 = 3;
inline bool Scu_2_302::has_vin05() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Scu_2_302::set_has_vin05() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Scu_2_302::clear_has_vin05() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Scu_2_302::clear_vin05() {
  vin05_ = 0;
  clear_has_vin05();
}
inline ::google::protobuf::int32 Scu_2_302::vin05() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_2_302.vin05)
  return vin05_;
}
inline void Scu_2_302::set_vin05(::google::protobuf::int32 value) {
  set_has_vin05();
  vin05_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_2_302.vin05)
}

// optional int32 vin04 = 4;
inline bool Scu_2_302::has_vin04() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Scu_2_302::set_has_vin04() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Scu_2_302::clear_has_vin04() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Scu_2_302::clear_vin04() {
  vin04_ = 0;
  clear_has_vin04();
}
inline ::google::protobuf::int32 Scu_2_302::vin04() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_2_302.vin04)
  return vin04_;
}
inline void Scu_2_302::set_vin04(::google::protobuf::int32 value) {
  set_has_vin04();
  vin04_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_2_302.vin04)
}

// optional int32 vin03 = 5;
inline bool Scu_2_302::has_vin03() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Scu_2_302::set_has_vin03() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Scu_2_302::clear_has_vin03() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Scu_2_302::clear_vin03() {
  vin03_ = 0;
  clear_has_vin03();
}
inline ::google::protobuf::int32 Scu_2_302::vin03() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_2_302.vin03)
  return vin03_;
}
inline void Scu_2_302::set_vin03(::google::protobuf::int32 value) {
  set_has_vin03();
  vin03_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_2_302.vin03)
}

// optional int32 vin02 = 6;
inline bool Scu_2_302::has_vin02() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Scu_2_302::set_has_vin02() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Scu_2_302::clear_has_vin02() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Scu_2_302::clear_vin02() {
  vin02_ = 0;
  clear_has_vin02();
}
inline ::google::protobuf::int32 Scu_2_302::vin02() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_2_302.vin02)
  return vin02_;
}
inline void Scu_2_302::set_vin02(::google::protobuf::int32 value) {
  set_has_vin02();
  vin02_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_2_302.vin02)
}

// optional int32 vin01 = 7;
inline bool Scu_2_302::has_vin01() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Scu_2_302::set_has_vin01() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Scu_2_302::clear_has_vin01() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Scu_2_302::clear_vin01() {
  vin01_ = 0;
  clear_has_vin01();
}
inline ::google::protobuf::int32 Scu_2_302::vin01() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_2_302.vin01)
  return vin01_;
}
inline void Scu_2_302::set_vin01(::google::protobuf::int32 value) {
  set_has_vin01();
  vin01_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_2_302.vin01)
}

// optional int32 vin00 = 8;
inline bool Scu_2_302::has_vin00() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Scu_2_302::set_has_vin00() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Scu_2_302::clear_has_vin00() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Scu_2_302::clear_vin00() {
  vin00_ = 0;
  clear_has_vin00();
}
inline ::google::protobuf::int32 Scu_2_302::vin00() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_2_302.vin00)
  return vin00_;
}
inline void Scu_2_302::set_vin00(::google::protobuf::int32 value) {
  set_has_vin00();
  vin00_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_2_302.vin00)
}

// -------------------------------------------------------------------

// Scu_3_303

// optional int32 vin15 = 1;
inline bool Scu_3_303::has_vin15() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Scu_3_303::set_has_vin15() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Scu_3_303::clear_has_vin15() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Scu_3_303::clear_vin15() {
  vin15_ = 0;
  clear_has_vin15();
}
inline ::google::protobuf::int32 Scu_3_303::vin15() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_3_303.vin15)
  return vin15_;
}
inline void Scu_3_303::set_vin15(::google::protobuf::int32 value) {
  set_has_vin15();
  vin15_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_3_303.vin15)
}

// optional int32 vin14 = 2;
inline bool Scu_3_303::has_vin14() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Scu_3_303::set_has_vin14() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Scu_3_303::clear_has_vin14() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Scu_3_303::clear_vin14() {
  vin14_ = 0;
  clear_has_vin14();
}
inline ::google::protobuf::int32 Scu_3_303::vin14() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_3_303.vin14)
  return vin14_;
}
inline void Scu_3_303::set_vin14(::google::protobuf::int32 value) {
  set_has_vin14();
  vin14_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_3_303.vin14)
}

// optional int32 vin13 = 3;
inline bool Scu_3_303::has_vin13() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Scu_3_303::set_has_vin13() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Scu_3_303::clear_has_vin13() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Scu_3_303::clear_vin13() {
  vin13_ = 0;
  clear_has_vin13();
}
inline ::google::protobuf::int32 Scu_3_303::vin13() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_3_303.vin13)
  return vin13_;
}
inline void Scu_3_303::set_vin13(::google::protobuf::int32 value) {
  set_has_vin13();
  vin13_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_3_303.vin13)
}

// optional int32 vin12 = 4;
inline bool Scu_3_303::has_vin12() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Scu_3_303::set_has_vin12() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Scu_3_303::clear_has_vin12() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Scu_3_303::clear_vin12() {
  vin12_ = 0;
  clear_has_vin12();
}
inline ::google::protobuf::int32 Scu_3_303::vin12() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_3_303.vin12)
  return vin12_;
}
inline void Scu_3_303::set_vin12(::google::protobuf::int32 value) {
  set_has_vin12();
  vin12_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_3_303.vin12)
}

// optional int32 vin11 = 5;
inline bool Scu_3_303::has_vin11() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Scu_3_303::set_has_vin11() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Scu_3_303::clear_has_vin11() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Scu_3_303::clear_vin11() {
  vin11_ = 0;
  clear_has_vin11();
}
inline ::google::protobuf::int32 Scu_3_303::vin11() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_3_303.vin11)
  return vin11_;
}
inline void Scu_3_303::set_vin11(::google::protobuf::int32 value) {
  set_has_vin11();
  vin11_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_3_303.vin11)
}

// optional int32 vin10 = 6;
inline bool Scu_3_303::has_vin10() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Scu_3_303::set_has_vin10() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Scu_3_303::clear_has_vin10() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Scu_3_303::clear_vin10() {
  vin10_ = 0;
  clear_has_vin10();
}
inline ::google::protobuf::int32 Scu_3_303::vin10() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_3_303.vin10)
  return vin10_;
}
inline void Scu_3_303::set_vin10(::google::protobuf::int32 value) {
  set_has_vin10();
  vin10_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_3_303.vin10)
}

// optional int32 vin09 = 7;
inline bool Scu_3_303::has_vin09() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Scu_3_303::set_has_vin09() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Scu_3_303::clear_has_vin09() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Scu_3_303::clear_vin09() {
  vin09_ = 0;
  clear_has_vin09();
}
inline ::google::protobuf::int32 Scu_3_303::vin09() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_3_303.vin09)
  return vin09_;
}
inline void Scu_3_303::set_vin09(::google::protobuf::int32 value) {
  set_has_vin09();
  vin09_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_3_303.vin09)
}

// optional int32 vin08 = 8;
inline bool Scu_3_303::has_vin08() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Scu_3_303::set_has_vin08() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Scu_3_303::clear_has_vin08() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Scu_3_303::clear_vin08() {
  vin08_ = 0;
  clear_has_vin08();
}
inline ::google::protobuf::int32 Scu_3_303::vin08() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_3_303.vin08)
  return vin08_;
}
inline void Scu_3_303::set_vin08(::google::protobuf::int32 value) {
  set_has_vin08();
  vin08_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_3_303.vin08)
}

// -------------------------------------------------------------------

// Scu_bcm_304

// optional .apollo.canbus.Scu_bcm_304.Bcm_vehreversestType bcm_vehreversest = 1;
inline bool Scu_bcm_304::has_bcm_vehreversest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Scu_bcm_304::set_has_bcm_vehreversest() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Scu_bcm_304::clear_has_bcm_vehreversest() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Scu_bcm_304::clear_bcm_vehreversest() {
  bcm_vehreversest_ = 0;
  clear_has_bcm_vehreversest();
}
inline ::apollo::canbus::Scu_bcm_304_Bcm_vehreversestType Scu_bcm_304::bcm_vehreversest() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcm_304.bcm_vehreversest)
  return static_cast< ::apollo::canbus::Scu_bcm_304_Bcm_vehreversestType >(bcm_vehreversest_);
}
inline void Scu_bcm_304::set_bcm_vehreversest(::apollo::canbus::Scu_bcm_304_Bcm_vehreversestType value) {
  assert(::apollo::canbus::Scu_bcm_304_Bcm_vehreversestType_IsValid(value));
  set_has_bcm_vehreversest();
  bcm_vehreversest_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcm_304.bcm_vehreversest)
}

// optional .apollo.canbus.Scu_bcm_304.Bcm_rightturnlampstType bcm_rightturnlampst = 2;
inline bool Scu_bcm_304::has_bcm_rightturnlampst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Scu_bcm_304::set_has_bcm_rightturnlampst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Scu_bcm_304::clear_has_bcm_rightturnlampst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Scu_bcm_304::clear_bcm_rightturnlampst() {
  bcm_rightturnlampst_ = 0;
  clear_has_bcm_rightturnlampst();
}
inline ::apollo::canbus::Scu_bcm_304_Bcm_rightturnlampstType Scu_bcm_304::bcm_rightturnlampst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcm_304.bcm_rightturnlampst)
  return static_cast< ::apollo::canbus::Scu_bcm_304_Bcm_rightturnlampstType >(bcm_rightturnlampst_);
}
inline void Scu_bcm_304::set_bcm_rightturnlampst(::apollo::canbus::Scu_bcm_304_Bcm_rightturnlampstType value) {
  assert(::apollo::canbus::Scu_bcm_304_Bcm_rightturnlampstType_IsValid(value));
  set_has_bcm_rightturnlampst();
  bcm_rightturnlampst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcm_304.bcm_rightturnlampst)
}

// optional .apollo.canbus.Scu_bcm_304.Bcm_rearfoglampstType bcm_rearfoglampst = 3;
inline bool Scu_bcm_304::has_bcm_rearfoglampst() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Scu_bcm_304::set_has_bcm_rearfoglampst() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Scu_bcm_304::clear_has_bcm_rearfoglampst() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Scu_bcm_304::clear_bcm_rearfoglampst() {
  bcm_rearfoglampst_ = 0;
  clear_has_bcm_rearfoglampst();
}
inline ::apollo::canbus::Scu_bcm_304_Bcm_rearfoglampstType Scu_bcm_304::bcm_rearfoglampst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcm_304.bcm_rearfoglampst)
  return static_cast< ::apollo::canbus::Scu_bcm_304_Bcm_rearfoglampstType >(bcm_rearfoglampst_);
}
inline void Scu_bcm_304::set_bcm_rearfoglampst(::apollo::canbus::Scu_bcm_304_Bcm_rearfoglampstType value) {
  assert(::apollo::canbus::Scu_bcm_304_Bcm_rearfoglampstType_IsValid(value));
  set_has_bcm_rearfoglampst();
  bcm_rearfoglampst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcm_304.bcm_rearfoglampst)
}

// optional .apollo.canbus.Scu_bcm_304.Bcm_parkinglampstType bcm_parkinglampst = 4;
inline bool Scu_bcm_304::has_bcm_parkinglampst() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Scu_bcm_304::set_has_bcm_parkinglampst() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Scu_bcm_304::clear_has_bcm_parkinglampst() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Scu_bcm_304::clear_bcm_parkinglampst() {
  bcm_parkinglampst_ = 0;
  clear_has_bcm_parkinglampst();
}
inline ::apollo::canbus::Scu_bcm_304_Bcm_parkinglampstType Scu_bcm_304::bcm_parkinglampst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcm_304.bcm_parkinglampst)
  return static_cast< ::apollo::canbus::Scu_bcm_304_Bcm_parkinglampstType >(bcm_parkinglampst_);
}
inline void Scu_bcm_304::set_bcm_parkinglampst(::apollo::canbus::Scu_bcm_304_Bcm_parkinglampstType value) {
  assert(::apollo::canbus::Scu_bcm_304_Bcm_parkinglampstType_IsValid(value));
  set_has_bcm_parkinglampst();
  bcm_parkinglampst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcm_304.bcm_parkinglampst)
}

// optional .apollo.canbus.Scu_bcm_304.Bcm_lowbeamstType bcm_lowbeamst = 5;
inline bool Scu_bcm_304::has_bcm_lowbeamst() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Scu_bcm_304::set_has_bcm_lowbeamst() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Scu_bcm_304::clear_has_bcm_lowbeamst() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Scu_bcm_304::clear_bcm_lowbeamst() {
  bcm_lowbeamst_ = 0;
  clear_has_bcm_lowbeamst();
}
inline ::apollo::canbus::Scu_bcm_304_Bcm_lowbeamstType Scu_bcm_304::bcm_lowbeamst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcm_304.bcm_lowbeamst)
  return static_cast< ::apollo::canbus::Scu_bcm_304_Bcm_lowbeamstType >(bcm_lowbeamst_);
}
inline void Scu_bcm_304::set_bcm_lowbeamst(::apollo::canbus::Scu_bcm_304_Bcm_lowbeamstType value) {
  assert(::apollo::canbus::Scu_bcm_304_Bcm_lowbeamstType_IsValid(value));
  set_has_bcm_lowbeamst();
  bcm_lowbeamst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcm_304.bcm_lowbeamst)
}

// optional .apollo.canbus.Scu_bcm_304.Bcm_leftturnlampstType bcm_leftturnlampst = 6;
inline bool Scu_bcm_304::has_bcm_leftturnlampst() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Scu_bcm_304::set_has_bcm_leftturnlampst() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Scu_bcm_304::clear_has_bcm_leftturnlampst() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Scu_bcm_304::clear_bcm_leftturnlampst() {
  bcm_leftturnlampst_ = 0;
  clear_has_bcm_leftturnlampst();
}
inline ::apollo::canbus::Scu_bcm_304_Bcm_leftturnlampstType Scu_bcm_304::bcm_leftturnlampst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcm_304.bcm_leftturnlampst)
  return static_cast< ::apollo::canbus::Scu_bcm_304_Bcm_leftturnlampstType >(bcm_leftturnlampst_);
}
inline void Scu_bcm_304::set_bcm_leftturnlampst(::apollo::canbus::Scu_bcm_304_Bcm_leftturnlampstType value) {
  assert(::apollo::canbus::Scu_bcm_304_Bcm_leftturnlampstType_IsValid(value));
  set_has_bcm_leftturnlampst();
  bcm_leftturnlampst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcm_304.bcm_leftturnlampst)
}

// optional .apollo.canbus.Scu_bcm_304.Bcm_keystType bcm_keyst = 7;
inline bool Scu_bcm_304::has_bcm_keyst() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Scu_bcm_304::set_has_bcm_keyst() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Scu_bcm_304::clear_has_bcm_keyst() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Scu_bcm_304::clear_bcm_keyst() {
  bcm_keyst_ = 0;
  clear_has_bcm_keyst();
}
inline ::apollo::canbus::Scu_bcm_304_Bcm_keystType Scu_bcm_304::bcm_keyst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcm_304.bcm_keyst)
  return static_cast< ::apollo::canbus::Scu_bcm_304_Bcm_keystType >(bcm_keyst_);
}
inline void Scu_bcm_304::set_bcm_keyst(::apollo::canbus::Scu_bcm_304_Bcm_keystType value) {
  assert(::apollo::canbus::Scu_bcm_304_Bcm_keystType_IsValid(value));
  set_has_bcm_keyst();
  bcm_keyst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcm_304.bcm_keyst)
}

// optional .apollo.canbus.Scu_bcm_304.Bcm_hornstType bcm_hornst = 8;
inline bool Scu_bcm_304::has_bcm_hornst() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Scu_bcm_304::set_has_bcm_hornst() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Scu_bcm_304::clear_has_bcm_hornst() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Scu_bcm_304::clear_bcm_hornst() {
  bcm_hornst_ = 0;
  clear_has_bcm_hornst();
}
inline ::apollo::canbus::Scu_bcm_304_Bcm_hornstType Scu_bcm_304::bcm_hornst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcm_304.bcm_hornst)
  return static_cast< ::apollo::canbus::Scu_bcm_304_Bcm_hornstType >(bcm_hornst_);
}
inline void Scu_bcm_304::set_bcm_hornst(::apollo::canbus::Scu_bcm_304_Bcm_hornstType value) {
  assert(::apollo::canbus::Scu_bcm_304_Bcm_hornstType_IsValid(value));
  set_has_bcm_hornst();
  bcm_hornst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcm_304.bcm_hornst)
}

// optional .apollo.canbus.Scu_bcm_304.Bcm_highbeamstType bcm_highbeamst = 9;
inline bool Scu_bcm_304::has_bcm_highbeamst() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Scu_bcm_304::set_has_bcm_highbeamst() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Scu_bcm_304::clear_has_bcm_highbeamst() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Scu_bcm_304::clear_bcm_highbeamst() {
  bcm_highbeamst_ = 0;
  clear_has_bcm_highbeamst();
}
inline ::apollo::canbus::Scu_bcm_304_Bcm_highbeamstType Scu_bcm_304::bcm_highbeamst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcm_304.bcm_highbeamst)
  return static_cast< ::apollo::canbus::Scu_bcm_304_Bcm_highbeamstType >(bcm_highbeamst_);
}
inline void Scu_bcm_304::set_bcm_highbeamst(::apollo::canbus::Scu_bcm_304_Bcm_highbeamstType value) {
  assert(::apollo::canbus::Scu_bcm_304_Bcm_highbeamstType_IsValid(value));
  set_has_bcm_highbeamst();
  bcm_highbeamst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcm_304.bcm_highbeamst)
}

// optional .apollo.canbus.Scu_bcm_304.Bcm_hazardlampstType bcm_hazardlampst = 10;
inline bool Scu_bcm_304::has_bcm_hazardlampst() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Scu_bcm_304::set_has_bcm_hazardlampst() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Scu_bcm_304::clear_has_bcm_hazardlampst() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Scu_bcm_304::clear_bcm_hazardlampst() {
  bcm_hazardlampst_ = 0;
  clear_has_bcm_hazardlampst();
}
inline ::apollo::canbus::Scu_bcm_304_Bcm_hazardlampstType Scu_bcm_304::bcm_hazardlampst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcm_304.bcm_hazardlampst)
  return static_cast< ::apollo::canbus::Scu_bcm_304_Bcm_hazardlampstType >(bcm_hazardlampst_);
}
inline void Scu_bcm_304::set_bcm_hazardlampst(::apollo::canbus::Scu_bcm_304_Bcm_hazardlampstType value) {
  assert(::apollo::canbus::Scu_bcm_304_Bcm_hazardlampstType_IsValid(value));
  set_has_bcm_hazardlampst();
  bcm_hazardlampst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcm_304.bcm_hazardlampst)
}

// optional .apollo.canbus.Scu_bcm_304.Bcm_frontfoglampstType bcm_frontfoglampst = 11;
inline bool Scu_bcm_304::has_bcm_frontfoglampst() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Scu_bcm_304::set_has_bcm_frontfoglampst() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Scu_bcm_304::clear_has_bcm_frontfoglampst() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Scu_bcm_304::clear_bcm_frontfoglampst() {
  bcm_frontfoglampst_ = 0;
  clear_has_bcm_frontfoglampst();
}
inline ::apollo::canbus::Scu_bcm_304_Bcm_frontfoglampstType Scu_bcm_304::bcm_frontfoglampst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcm_304.bcm_frontfoglampst)
  return static_cast< ::apollo::canbus::Scu_bcm_304_Bcm_frontfoglampstType >(bcm_frontfoglampst_);
}
inline void Scu_bcm_304::set_bcm_frontfoglampst(::apollo::canbus::Scu_bcm_304_Bcm_frontfoglampstType value) {
  assert(::apollo::canbus::Scu_bcm_304_Bcm_frontfoglampstType_IsValid(value));
  set_has_bcm_frontfoglampst();
  bcm_frontfoglampst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcm_304.bcm_frontfoglampst)
}

// optional .apollo.canbus.Scu_bcm_304.Bcm_brakelightswitchstType bcm_brakelightswitchst = 12;
inline bool Scu_bcm_304::has_bcm_brakelightswitchst() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Scu_bcm_304::set_has_bcm_brakelightswitchst() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Scu_bcm_304::clear_has_bcm_brakelightswitchst() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Scu_bcm_304::clear_bcm_brakelightswitchst() {
  bcm_brakelightswitchst_ = 0;
  clear_has_bcm_brakelightswitchst();
}
inline ::apollo::canbus::Scu_bcm_304_Bcm_brakelightswitchstType Scu_bcm_304::bcm_brakelightswitchst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcm_304.bcm_brakelightswitchst)
  return static_cast< ::apollo::canbus::Scu_bcm_304_Bcm_brakelightswitchstType >(bcm_brakelightswitchst_);
}
inline void Scu_bcm_304::set_bcm_brakelightswitchst(::apollo::canbus::Scu_bcm_304_Bcm_brakelightswitchstType value) {
  assert(::apollo::canbus::Scu_bcm_304_Bcm_brakelightswitchstType_IsValid(value));
  set_has_bcm_brakelightswitchst();
  bcm_brakelightswitchst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcm_304.bcm_brakelightswitchst)
}

// -------------------------------------------------------------------

// Scu_bcs_1_306

// optional .apollo.canbus.Scu_bcs_1_306.Bcs_aebavailableType bcs_aebavailable = 1;
inline bool Scu_bcs_1_306::has_bcs_aebavailable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Scu_bcs_1_306::set_has_bcs_aebavailable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Scu_bcs_1_306::clear_has_bcs_aebavailable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Scu_bcs_1_306::clear_bcs_aebavailable() {
  bcs_aebavailable_ = 0;
  clear_has_bcs_aebavailable();
}
inline ::apollo::canbus::Scu_bcs_1_306_Bcs_aebavailableType Scu_bcs_1_306::bcs_aebavailable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_1_306.bcs_aebavailable)
  return static_cast< ::apollo::canbus::Scu_bcs_1_306_Bcs_aebavailableType >(bcs_aebavailable_);
}
inline void Scu_bcs_1_306::set_bcs_aebavailable(::apollo::canbus::Scu_bcs_1_306_Bcs_aebavailableType value) {
  assert(::apollo::canbus::Scu_bcs_1_306_Bcs_aebavailableType_IsValid(value));
  set_has_bcs_aebavailable();
  bcs_aebavailable_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_1_306.bcs_aebavailable)
}

// optional .apollo.canbus.Scu_bcs_1_306.Bcs_cddavailableType bcs_cddavailable = 2;
inline bool Scu_bcs_1_306::has_bcs_cddavailable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Scu_bcs_1_306::set_has_bcs_cddavailable() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Scu_bcs_1_306::clear_has_bcs_cddavailable() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Scu_bcs_1_306::clear_bcs_cddavailable() {
  bcs_cddavailable_ = 0;
  clear_has_bcs_cddavailable();
}
inline ::apollo::canbus::Scu_bcs_1_306_Bcs_cddavailableType Scu_bcs_1_306::bcs_cddavailable() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_1_306.bcs_cddavailable)
  return static_cast< ::apollo::canbus::Scu_bcs_1_306_Bcs_cddavailableType >(bcs_cddavailable_);
}
inline void Scu_bcs_1_306::set_bcs_cddavailable(::apollo::canbus::Scu_bcs_1_306_Bcs_cddavailableType value) {
  assert(::apollo::canbus::Scu_bcs_1_306_Bcs_cddavailableType_IsValid(value));
  set_has_bcs_cddavailable();
  bcs_cddavailable_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_1_306.bcs_cddavailable)
}

// optional double bcs_brkpedact = 3;
inline bool Scu_bcs_1_306::has_bcs_brkpedact() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Scu_bcs_1_306::set_has_bcs_brkpedact() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Scu_bcs_1_306::clear_has_bcs_brkpedact() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Scu_bcs_1_306::clear_bcs_brkpedact() {
  bcs_brkpedact_ = 0;
  clear_has_bcs_brkpedact();
}
inline double Scu_bcs_1_306::bcs_brkpedact() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_1_306.bcs_brkpedact)
  return bcs_brkpedact_;
}
inline void Scu_bcs_1_306::set_bcs_brkpedact(double value) {
  set_has_bcs_brkpedact();
  bcs_brkpedact_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_1_306.bcs_brkpedact)
}

// optional .apollo.canbus.Scu_bcs_1_306.Bcs_intidxType bcs_intidx = 4;
inline bool Scu_bcs_1_306::has_bcs_intidx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Scu_bcs_1_306::set_has_bcs_intidx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Scu_bcs_1_306::clear_has_bcs_intidx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Scu_bcs_1_306::clear_bcs_intidx() {
  bcs_intidx_ = 0;
  clear_has_bcs_intidx();
}
inline ::apollo::canbus::Scu_bcs_1_306_Bcs_intidxType Scu_bcs_1_306::bcs_intidx() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_1_306.bcs_intidx)
  return static_cast< ::apollo::canbus::Scu_bcs_1_306_Bcs_intidxType >(bcs_intidx_);
}
inline void Scu_bcs_1_306::set_bcs_intidx(::apollo::canbus::Scu_bcs_1_306_Bcs_intidxType value) {
  assert(::apollo::canbus::Scu_bcs_1_306_Bcs_intidxType_IsValid(value));
  set_has_bcs_intidx();
  bcs_intidx_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_1_306.bcs_intidx)
}

// optional .apollo.canbus.Scu_bcs_1_306.Bcs_vdcfaultstType bcs_vdcfaultst = 5;
inline bool Scu_bcs_1_306::has_bcs_vdcfaultst() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Scu_bcs_1_306::set_has_bcs_vdcfaultst() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Scu_bcs_1_306::clear_has_bcs_vdcfaultst() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Scu_bcs_1_306::clear_bcs_vdcfaultst() {
  bcs_vdcfaultst_ = 0;
  clear_has_bcs_vdcfaultst();
}
inline ::apollo::canbus::Scu_bcs_1_306_Bcs_vdcfaultstType Scu_bcs_1_306::bcs_vdcfaultst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_1_306.bcs_vdcfaultst)
  return static_cast< ::apollo::canbus::Scu_bcs_1_306_Bcs_vdcfaultstType >(bcs_vdcfaultst_);
}
inline void Scu_bcs_1_306::set_bcs_vdcfaultst(::apollo::canbus::Scu_bcs_1_306_Bcs_vdcfaultstType value) {
  assert(::apollo::canbus::Scu_bcs_1_306_Bcs_vdcfaultstType_IsValid(value));
  set_has_bcs_vdcfaultst();
  bcs_vdcfaultst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_1_306.bcs_vdcfaultst)
}

// optional .apollo.canbus.Scu_bcs_1_306.Bcs_vdcactivestType bcs_vdcactivest = 6;
inline bool Scu_bcs_1_306::has_bcs_vdcactivest() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Scu_bcs_1_306::set_has_bcs_vdcactivest() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Scu_bcs_1_306::clear_has_bcs_vdcactivest() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Scu_bcs_1_306::clear_bcs_vdcactivest() {
  bcs_vdcactivest_ = 0;
  clear_has_bcs_vdcactivest();
}
inline ::apollo::canbus::Scu_bcs_1_306_Bcs_vdcactivestType Scu_bcs_1_306::bcs_vdcactivest() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_1_306.bcs_vdcactivest)
  return static_cast< ::apollo::canbus::Scu_bcs_1_306_Bcs_vdcactivestType >(bcs_vdcactivest_);
}
inline void Scu_bcs_1_306::set_bcs_vdcactivest(::apollo::canbus::Scu_bcs_1_306_Bcs_vdcactivestType value) {
  assert(::apollo::canbus::Scu_bcs_1_306_Bcs_vdcactivestType_IsValid(value));
  set_has_bcs_vdcactivest();
  bcs_vdcactivest_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_1_306.bcs_vdcactivest)
}

// optional .apollo.canbus.Scu_bcs_1_306.Bcs_absfaultstType bcs_absfaultst = 7;
inline bool Scu_bcs_1_306::has_bcs_absfaultst() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Scu_bcs_1_306::set_has_bcs_absfaultst() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Scu_bcs_1_306::clear_has_bcs_absfaultst() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Scu_bcs_1_306::clear_bcs_absfaultst() {
  bcs_absfaultst_ = 0;
  clear_has_bcs_absfaultst();
}
inline ::apollo::canbus::Scu_bcs_1_306_Bcs_absfaultstType Scu_bcs_1_306::bcs_absfaultst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_1_306.bcs_absfaultst)
  return static_cast< ::apollo::canbus::Scu_bcs_1_306_Bcs_absfaultstType >(bcs_absfaultst_);
}
inline void Scu_bcs_1_306::set_bcs_absfaultst(::apollo::canbus::Scu_bcs_1_306_Bcs_absfaultstType value) {
  assert(::apollo::canbus::Scu_bcs_1_306_Bcs_absfaultstType_IsValid(value));
  set_has_bcs_absfaultst();
  bcs_absfaultst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_1_306.bcs_absfaultst)
}

// optional .apollo.canbus.Scu_bcs_1_306.Bcs_absactivestType bcs_absactivest = 8;
inline bool Scu_bcs_1_306::has_bcs_absactivest() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Scu_bcs_1_306::set_has_bcs_absactivest() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Scu_bcs_1_306::clear_has_bcs_absactivest() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Scu_bcs_1_306::clear_bcs_absactivest() {
  bcs_absactivest_ = 0;
  clear_has_bcs_absactivest();
}
inline ::apollo::canbus::Scu_bcs_1_306_Bcs_absactivestType Scu_bcs_1_306::bcs_absactivest() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_1_306.bcs_absactivest)
  return static_cast< ::apollo::canbus::Scu_bcs_1_306_Bcs_absactivestType >(bcs_absactivest_);
}
inline void Scu_bcs_1_306::set_bcs_absactivest(::apollo::canbus::Scu_bcs_1_306_Bcs_absactivestType value) {
  assert(::apollo::canbus::Scu_bcs_1_306_Bcs_absactivestType_IsValid(value));
  set_has_bcs_absactivest();
  bcs_absactivest_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_1_306.bcs_absactivest)
}

// optional .apollo.canbus.Scu_bcs_1_306.Bcs_faultstType bcs_faultst = 9;
inline bool Scu_bcs_1_306::has_bcs_faultst() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Scu_bcs_1_306::set_has_bcs_faultst() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Scu_bcs_1_306::clear_has_bcs_faultst() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Scu_bcs_1_306::clear_bcs_faultst() {
  bcs_faultst_ = 0;
  clear_has_bcs_faultst();
}
inline ::apollo::canbus::Scu_bcs_1_306_Bcs_faultstType Scu_bcs_1_306::bcs_faultst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_1_306.bcs_faultst)
  return static_cast< ::apollo::canbus::Scu_bcs_1_306_Bcs_faultstType >(bcs_faultst_);
}
inline void Scu_bcs_1_306::set_bcs_faultst(::apollo::canbus::Scu_bcs_1_306_Bcs_faultstType value) {
  assert(::apollo::canbus::Scu_bcs_1_306_Bcs_faultstType_IsValid(value));
  set_has_bcs_faultst();
  bcs_faultst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_1_306.bcs_faultst)
}

// optional .apollo.canbus.Scu_bcs_1_306.Bcs_drvmodeType bcs_drvmode = 10;
inline bool Scu_bcs_1_306::has_bcs_drvmode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Scu_bcs_1_306::set_has_bcs_drvmode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Scu_bcs_1_306::clear_has_bcs_drvmode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Scu_bcs_1_306::clear_bcs_drvmode() {
  bcs_drvmode_ = 0;
  clear_has_bcs_drvmode();
}
inline ::apollo::canbus::Scu_bcs_1_306_Bcs_drvmodeType Scu_bcs_1_306::bcs_drvmode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_1_306.bcs_drvmode)
  return static_cast< ::apollo::canbus::Scu_bcs_1_306_Bcs_drvmodeType >(bcs_drvmode_);
}
inline void Scu_bcs_1_306::set_bcs_drvmode(::apollo::canbus::Scu_bcs_1_306_Bcs_drvmodeType value) {
  assert(::apollo::canbus::Scu_bcs_1_306_Bcs_drvmodeType_IsValid(value));
  set_has_bcs_drvmode();
  bcs_drvmode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_1_306.bcs_drvmode)
}

// -------------------------------------------------------------------

// Scu_bcs_2_307

// optional .apollo.canbus.Scu_bcs_2_307.Bcs_vehspdvdType bcs_vehspdvd = 1;
inline bool Scu_bcs_2_307::has_bcs_vehspdvd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Scu_bcs_2_307::set_has_bcs_vehspdvd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Scu_bcs_2_307::clear_has_bcs_vehspdvd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Scu_bcs_2_307::clear_bcs_vehspdvd() {
  bcs_vehspdvd_ = 0;
  clear_has_bcs_vehspdvd();
}
inline ::apollo::canbus::Scu_bcs_2_307_Bcs_vehspdvdType Scu_bcs_2_307::bcs_vehspdvd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_2_307.bcs_vehspdvd)
  return static_cast< ::apollo::canbus::Scu_bcs_2_307_Bcs_vehspdvdType >(bcs_vehspdvd_);
}
inline void Scu_bcs_2_307::set_bcs_vehspdvd(::apollo::canbus::Scu_bcs_2_307_Bcs_vehspdvdType value) {
  assert(::apollo::canbus::Scu_bcs_2_307_Bcs_vehspdvdType_IsValid(value));
  set_has_bcs_vehspdvd();
  bcs_vehspdvd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_2_307.bcs_vehspdvd)
}

// optional double bcs_yawrate = 2;
inline bool Scu_bcs_2_307::has_bcs_yawrate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Scu_bcs_2_307::set_has_bcs_yawrate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Scu_bcs_2_307::clear_has_bcs_yawrate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Scu_bcs_2_307::clear_bcs_yawrate() {
  bcs_yawrate_ = 0;
  clear_has_bcs_yawrate();
}
inline double Scu_bcs_2_307::bcs_yawrate() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_2_307.bcs_yawrate)
  return bcs_yawrate_;
}
inline void Scu_bcs_2_307::set_bcs_yawrate(double value) {
  set_has_bcs_yawrate();
  bcs_yawrate_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_2_307.bcs_yawrate)
}

// optional double bcs_vehspd = 3;
inline bool Scu_bcs_2_307::has_bcs_vehspd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Scu_bcs_2_307::set_has_bcs_vehspd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Scu_bcs_2_307::clear_has_bcs_vehspd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Scu_bcs_2_307::clear_bcs_vehspd() {
  bcs_vehspd_ = 0;
  clear_has_bcs_vehspd();
}
inline double Scu_bcs_2_307::bcs_vehspd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_2_307.bcs_vehspd)
  return bcs_vehspd_;
}
inline void Scu_bcs_2_307::set_bcs_vehspd(double value) {
  set_has_bcs_vehspd();
  bcs_vehspd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_2_307.bcs_vehspd)
}

// optional double bcs_vehlongaccel = 4;
inline bool Scu_bcs_2_307::has_bcs_vehlongaccel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Scu_bcs_2_307::set_has_bcs_vehlongaccel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Scu_bcs_2_307::clear_has_bcs_vehlongaccel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Scu_bcs_2_307::clear_bcs_vehlongaccel() {
  bcs_vehlongaccel_ = 0;
  clear_has_bcs_vehlongaccel();
}
inline double Scu_bcs_2_307::bcs_vehlongaccel() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_2_307.bcs_vehlongaccel)
  return bcs_vehlongaccel_;
}
inline void Scu_bcs_2_307::set_bcs_vehlongaccel(double value) {
  set_has_bcs_vehlongaccel();
  bcs_vehlongaccel_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_2_307.bcs_vehlongaccel)
}

// optional double bcs_vehlataccel = 5;
inline bool Scu_bcs_2_307::has_bcs_vehlataccel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Scu_bcs_2_307::set_has_bcs_vehlataccel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Scu_bcs_2_307::clear_has_bcs_vehlataccel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Scu_bcs_2_307::clear_bcs_vehlataccel() {
  bcs_vehlataccel_ = 0;
  clear_has_bcs_vehlataccel();
}
inline double Scu_bcs_2_307::bcs_vehlataccel() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_bcs_2_307.bcs_vehlataccel)
  return bcs_vehlataccel_;
}
inline void Scu_bcs_2_307::set_bcs_vehlataccel(double value) {
  set_has_bcs_vehlataccel();
  bcs_vehlataccel_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_bcs_2_307.bcs_vehlataccel)
}

// -------------------------------------------------------------------

// Scu_epb_310

// optional .apollo.canbus.Scu_epb_310.Epb_intidxType epb_intidx = 1;
inline bool Scu_epb_310::has_epb_intidx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Scu_epb_310::set_has_epb_intidx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Scu_epb_310::clear_has_epb_intidx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Scu_epb_310::clear_epb_intidx() {
  epb_intidx_ = 0;
  clear_has_epb_intidx();
}
inline ::apollo::canbus::Scu_epb_310_Epb_intidxType Scu_epb_310::epb_intidx() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_epb_310.epb_intidx)
  return static_cast< ::apollo::canbus::Scu_epb_310_Epb_intidxType >(epb_intidx_);
}
inline void Scu_epb_310::set_epb_intidx(::apollo::canbus::Scu_epb_310_Epb_intidxType value) {
  assert(::apollo::canbus::Scu_epb_310_Epb_intidxType_IsValid(value));
  set_has_epb_intidx();
  epb_intidx_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_epb_310.epb_intidx)
}

// optional .apollo.canbus.Scu_epb_310.Epb_drvmodeType epb_drvmode = 2;
inline bool Scu_epb_310::has_epb_drvmode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Scu_epb_310::set_has_epb_drvmode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Scu_epb_310::clear_has_epb_drvmode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Scu_epb_310::clear_epb_drvmode() {
  epb_drvmode_ = 0;
  clear_has_epb_drvmode();
}
inline ::apollo::canbus::Scu_epb_310_Epb_drvmodeType Scu_epb_310::epb_drvmode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_epb_310.epb_drvmode)
  return static_cast< ::apollo::canbus::Scu_epb_310_Epb_drvmodeType >(epb_drvmode_);
}
inline void Scu_epb_310::set_epb_drvmode(::apollo::canbus::Scu_epb_310_Epb_drvmodeType value) {
  assert(::apollo::canbus::Scu_epb_310_Epb_drvmodeType_IsValid(value));
  set_has_epb_drvmode();
  epb_drvmode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_epb_310.epb_drvmode)
}

// optional .apollo.canbus.Scu_epb_310.Epb_sysstType epb_sysst = 3;
inline bool Scu_epb_310::has_epb_sysst() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Scu_epb_310::set_has_epb_sysst() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Scu_epb_310::clear_has_epb_sysst() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Scu_epb_310::clear_epb_sysst() {
  epb_sysst_ = 0;
  clear_has_epb_sysst();
}
inline ::apollo::canbus::Scu_epb_310_Epb_sysstType Scu_epb_310::epb_sysst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_epb_310.epb_sysst)
  return static_cast< ::apollo::canbus::Scu_epb_310_Epb_sysstType >(epb_sysst_);
}
inline void Scu_epb_310::set_epb_sysst(::apollo::canbus::Scu_epb_310_Epb_sysstType value) {
  assert(::apollo::canbus::Scu_epb_310_Epb_sysstType_IsValid(value));
  set_has_epb_sysst();
  epb_sysst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_epb_310.epb_sysst)
}

// optional .apollo.canbus.Scu_epb_310.Epb_faultstType epb_faultst = 4;
inline bool Scu_epb_310::has_epb_faultst() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Scu_epb_310::set_has_epb_faultst() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Scu_epb_310::clear_has_epb_faultst() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Scu_epb_310::clear_epb_faultst() {
  epb_faultst_ = 0;
  clear_has_epb_faultst();
}
inline ::apollo::canbus::Scu_epb_310_Epb_faultstType Scu_epb_310::epb_faultst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_epb_310.epb_faultst)
  return static_cast< ::apollo::canbus::Scu_epb_310_Epb_faultstType >(epb_faultst_);
}
inline void Scu_epb_310::set_epb_faultst(::apollo::canbus::Scu_epb_310_Epb_faultstType value) {
  assert(::apollo::canbus::Scu_epb_310_Epb_faultstType_IsValid(value));
  set_has_epb_faultst();
  epb_faultst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_epb_310.epb_faultst)
}

// -------------------------------------------------------------------

// Scu_vcu_1_312

// optional .apollo.canbus.Scu_vcu_1_312.Vcu_elcsysfaultType vcu_elcsysfault = 1;
inline bool Scu_vcu_1_312::has_vcu_elcsysfault() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Scu_vcu_1_312::set_has_vcu_elcsysfault() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Scu_vcu_1_312::clear_has_vcu_elcsysfault() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Scu_vcu_1_312::clear_vcu_elcsysfault() {
  vcu_elcsysfault_ = 0;
  clear_has_vcu_elcsysfault();
}
inline ::apollo::canbus::Scu_vcu_1_312_Vcu_elcsysfaultType Scu_vcu_1_312::vcu_elcsysfault() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_vcu_1_312.vcu_elcsysfault)
  return static_cast< ::apollo::canbus::Scu_vcu_1_312_Vcu_elcsysfaultType >(vcu_elcsysfault_);
}
inline void Scu_vcu_1_312::set_vcu_elcsysfault(::apollo::canbus::Scu_vcu_1_312_Vcu_elcsysfaultType value) {
  assert(::apollo::canbus::Scu_vcu_1_312_Vcu_elcsysfaultType_IsValid(value));
  set_has_vcu_elcsysfault();
  vcu_elcsysfault_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_vcu_1_312.vcu_elcsysfault)
}

// optional .apollo.canbus.Scu_vcu_1_312.Vcu_brkpedstType vcu_brkpedst = 2;
inline bool Scu_vcu_1_312::has_vcu_brkpedst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Scu_vcu_1_312::set_has_vcu_brkpedst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Scu_vcu_1_312::clear_has_vcu_brkpedst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Scu_vcu_1_312::clear_vcu_brkpedst() {
  vcu_brkpedst_ = 0;
  clear_has_vcu_brkpedst();
}
inline ::apollo::canbus::Scu_vcu_1_312_Vcu_brkpedstType Scu_vcu_1_312::vcu_brkpedst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_vcu_1_312.vcu_brkpedst)
  return static_cast< ::apollo::canbus::Scu_vcu_1_312_Vcu_brkpedstType >(vcu_brkpedst_);
}
inline void Scu_vcu_1_312::set_vcu_brkpedst(::apollo::canbus::Scu_vcu_1_312_Vcu_brkpedstType value) {
  assert(::apollo::canbus::Scu_vcu_1_312_Vcu_brkpedstType_IsValid(value));
  set_has_vcu_brkpedst();
  vcu_brkpedst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_vcu_1_312.vcu_brkpedst)
}

// optional .apollo.canbus.Scu_vcu_1_312.Vcu_intidxType vcu_intidx = 3;
inline bool Scu_vcu_1_312::has_vcu_intidx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Scu_vcu_1_312::set_has_vcu_intidx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Scu_vcu_1_312::clear_has_vcu_intidx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Scu_vcu_1_312::clear_vcu_intidx() {
  vcu_intidx_ = 0;
  clear_has_vcu_intidx();
}
inline ::apollo::canbus::Scu_vcu_1_312_Vcu_intidxType Scu_vcu_1_312::vcu_intidx() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_vcu_1_312.vcu_intidx)
  return static_cast< ::apollo::canbus::Scu_vcu_1_312_Vcu_intidxType >(vcu_intidx_);
}
inline void Scu_vcu_1_312::set_vcu_intidx(::apollo::canbus::Scu_vcu_1_312_Vcu_intidxType value) {
  assert(::apollo::canbus::Scu_vcu_1_312_Vcu_intidxType_IsValid(value));
  set_has_vcu_intidx();
  vcu_intidx_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_vcu_1_312.vcu_intidx)
}

// optional .apollo.canbus.Scu_vcu_1_312.Vcu_gearintidxType vcu_gearintidx = 4;
inline bool Scu_vcu_1_312::has_vcu_gearintidx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Scu_vcu_1_312::set_has_vcu_gearintidx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Scu_vcu_1_312::clear_has_vcu_gearintidx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Scu_vcu_1_312::clear_vcu_gearintidx() {
  vcu_gearintidx_ = 0;
  clear_has_vcu_gearintidx();
}
inline ::apollo::canbus::Scu_vcu_1_312_Vcu_gearintidxType Scu_vcu_1_312::vcu_gearintidx() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_vcu_1_312.vcu_gearintidx)
  return static_cast< ::apollo::canbus::Scu_vcu_1_312_Vcu_gearintidxType >(vcu_gearintidx_);
}
inline void Scu_vcu_1_312::set_vcu_gearintidx(::apollo::canbus::Scu_vcu_1_312_Vcu_gearintidxType value) {
  assert(::apollo::canbus::Scu_vcu_1_312_Vcu_gearintidxType_IsValid(value));
  set_has_vcu_gearintidx();
  vcu_gearintidx_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_vcu_1_312.vcu_gearintidx)
}

// optional .apollo.canbus.Scu_vcu_1_312.Vcu_geardrvmodeType vcu_geardrvmode = 5;
inline bool Scu_vcu_1_312::has_vcu_geardrvmode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Scu_vcu_1_312::set_has_vcu_geardrvmode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Scu_vcu_1_312::clear_has_vcu_geardrvmode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Scu_vcu_1_312::clear_vcu_geardrvmode() {
  vcu_geardrvmode_ = 0;
  clear_has_vcu_geardrvmode();
}
inline ::apollo::canbus::Scu_vcu_1_312_Vcu_geardrvmodeType Scu_vcu_1_312::vcu_geardrvmode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_vcu_1_312.vcu_geardrvmode)
  return static_cast< ::apollo::canbus::Scu_vcu_1_312_Vcu_geardrvmodeType >(vcu_geardrvmode_);
}
inline void Scu_vcu_1_312::set_vcu_geardrvmode(::apollo::canbus::Scu_vcu_1_312_Vcu_geardrvmodeType value) {
  assert(::apollo::canbus::Scu_vcu_1_312_Vcu_geardrvmodeType_IsValid(value));
  set_has_vcu_geardrvmode();
  vcu_geardrvmode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_vcu_1_312.vcu_geardrvmode)
}

// optional double vcu_accpedact = 6;
inline bool Scu_vcu_1_312::has_vcu_accpedact() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Scu_vcu_1_312::set_has_vcu_accpedact() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Scu_vcu_1_312::clear_has_vcu_accpedact() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Scu_vcu_1_312::clear_vcu_accpedact() {
  vcu_accpedact_ = 0;
  clear_has_vcu_accpedact();
}
inline double Scu_vcu_1_312::vcu_accpedact() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_vcu_1_312.vcu_accpedact)
  return vcu_accpedact_;
}
inline void Scu_vcu_1_312::set_vcu_accpedact(double value) {
  set_has_vcu_accpedact();
  vcu_accpedact_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_vcu_1_312.vcu_accpedact)
}

// optional double vcu_brkpedpst = 7;
inline bool Scu_vcu_1_312::has_vcu_brkpedpst() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Scu_vcu_1_312::set_has_vcu_brkpedpst() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Scu_vcu_1_312::clear_has_vcu_brkpedpst() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Scu_vcu_1_312::clear_vcu_brkpedpst() {
  vcu_brkpedpst_ = 0;
  clear_has_vcu_brkpedpst();
}
inline double Scu_vcu_1_312::vcu_brkpedpst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_vcu_1_312.vcu_brkpedpst)
  return vcu_brkpedpst_;
}
inline void Scu_vcu_1_312::set_vcu_brkpedpst(double value) {
  set_has_vcu_brkpedpst();
  vcu_brkpedpst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_vcu_1_312.vcu_brkpedpst)
}

// optional int32 vcu_vehrng = 8;
inline bool Scu_vcu_1_312::has_vcu_vehrng() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Scu_vcu_1_312::set_has_vcu_vehrng() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Scu_vcu_1_312::clear_has_vcu_vehrng() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Scu_vcu_1_312::clear_vcu_vehrng() {
  vcu_vehrng_ = 0;
  clear_has_vcu_vehrng();
}
inline ::google::protobuf::int32 Scu_vcu_1_312::vcu_vehrng() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_vcu_1_312.vcu_vehrng)
  return vcu_vehrng_;
}
inline void Scu_vcu_1_312::set_vcu_vehrng(::google::protobuf::int32 value) {
  set_has_vcu_vehrng();
  vcu_vehrng_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_vcu_1_312.vcu_vehrng)
}

// optional double vcu_accpedpst = 9;
inline bool Scu_vcu_1_312::has_vcu_accpedpst() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Scu_vcu_1_312::set_has_vcu_accpedpst() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Scu_vcu_1_312::clear_has_vcu_accpedpst() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Scu_vcu_1_312::clear_vcu_accpedpst() {
  vcu_accpedpst_ = 0;
  clear_has_vcu_accpedpst();
}
inline double Scu_vcu_1_312::vcu_accpedpst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_vcu_1_312.vcu_accpedpst)
  return vcu_accpedpst_;
}
inline void Scu_vcu_1_312::set_vcu_accpedpst(double value) {
  set_has_vcu_accpedpst();
  vcu_accpedpst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_vcu_1_312.vcu_accpedpst)
}

// optional .apollo.canbus.Scu_vcu_1_312.Vcu_vehrdystType vcu_vehrdyst = 10;
inline bool Scu_vcu_1_312::has_vcu_vehrdyst() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Scu_vcu_1_312::set_has_vcu_vehrdyst() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Scu_vcu_1_312::clear_has_vcu_vehrdyst() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Scu_vcu_1_312::clear_vcu_vehrdyst() {
  vcu_vehrdyst_ = 0;
  clear_has_vcu_vehrdyst();
}
inline ::apollo::canbus::Scu_vcu_1_312_Vcu_vehrdystType Scu_vcu_1_312::vcu_vehrdyst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_vcu_1_312.vcu_vehrdyst)
  return static_cast< ::apollo::canbus::Scu_vcu_1_312_Vcu_vehrdystType >(vcu_vehrdyst_);
}
inline void Scu_vcu_1_312::set_vcu_vehrdyst(::apollo::canbus::Scu_vcu_1_312_Vcu_vehrdystType value) {
  assert(::apollo::canbus::Scu_vcu_1_312_Vcu_vehrdystType_IsValid(value));
  set_has_vcu_vehrdyst();
  vcu_vehrdyst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_vcu_1_312.vcu_vehrdyst)
}

// optional .apollo.canbus.Scu_vcu_1_312.Vcu_faultstType vcu_faultst = 11;
inline bool Scu_vcu_1_312::has_vcu_faultst() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Scu_vcu_1_312::set_has_vcu_faultst() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Scu_vcu_1_312::clear_has_vcu_faultst() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Scu_vcu_1_312::clear_vcu_faultst() {
  vcu_faultst_ = 0;
  clear_has_vcu_faultst();
}
inline ::apollo::canbus::Scu_vcu_1_312_Vcu_faultstType Scu_vcu_1_312::vcu_faultst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_vcu_1_312.vcu_faultst)
  return static_cast< ::apollo::canbus::Scu_vcu_1_312_Vcu_faultstType >(vcu_faultst_);
}
inline void Scu_vcu_1_312::set_vcu_faultst(::apollo::canbus::Scu_vcu_1_312_Vcu_faultstType value) {
  assert(::apollo::canbus::Scu_vcu_1_312_Vcu_faultstType_IsValid(value));
  set_has_vcu_faultst();
  vcu_faultst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_vcu_1_312.vcu_faultst)
}

// optional .apollo.canbus.Scu_vcu_1_312.Vcu_drvmodeType vcu_drvmode = 12;
inline bool Scu_vcu_1_312::has_vcu_drvmode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Scu_vcu_1_312::set_has_vcu_drvmode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Scu_vcu_1_312::clear_has_vcu_drvmode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Scu_vcu_1_312::clear_vcu_drvmode() {
  vcu_drvmode_ = 0;
  clear_has_vcu_drvmode();
}
inline ::apollo::canbus::Scu_vcu_1_312_Vcu_drvmodeType Scu_vcu_1_312::vcu_drvmode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_vcu_1_312.vcu_drvmode)
  return static_cast< ::apollo::canbus::Scu_vcu_1_312_Vcu_drvmodeType >(vcu_drvmode_);
}
inline void Scu_vcu_1_312::set_vcu_drvmode(::apollo::canbus::Scu_vcu_1_312_Vcu_drvmodeType value) {
  assert(::apollo::canbus::Scu_vcu_1_312_Vcu_drvmodeType_IsValid(value));
  set_has_vcu_drvmode();
  vcu_drvmode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_vcu_1_312.vcu_drvmode)
}

// optional .apollo.canbus.Scu_vcu_1_312.Vcu_gearpstType vcu_gearpst = 13;
inline bool Scu_vcu_1_312::has_vcu_gearpst() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Scu_vcu_1_312::set_has_vcu_gearpst() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Scu_vcu_1_312::clear_has_vcu_gearpst() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Scu_vcu_1_312::clear_vcu_gearpst() {
  vcu_gearpst_ = 0;
  clear_has_vcu_gearpst();
}
inline ::apollo::canbus::Scu_vcu_1_312_Vcu_gearpstType Scu_vcu_1_312::vcu_gearpst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_vcu_1_312.vcu_gearpst)
  return static_cast< ::apollo::canbus::Scu_vcu_1_312_Vcu_gearpstType >(vcu_gearpst_);
}
inline void Scu_vcu_1_312::set_vcu_gearpst(::apollo::canbus::Scu_vcu_1_312_Vcu_gearpstType value) {
  assert(::apollo::canbus::Scu_vcu_1_312_Vcu_gearpstType_IsValid(value));
  set_has_vcu_gearpst();
  vcu_gearpst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_vcu_1_312.vcu_gearpst)
}

// optional .apollo.canbus.Scu_vcu_1_312.Vcu_gearfaultstType vcu_gearfaultst = 14;
inline bool Scu_vcu_1_312::has_vcu_gearfaultst() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Scu_vcu_1_312::set_has_vcu_gearfaultst() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Scu_vcu_1_312::clear_has_vcu_gearfaultst() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Scu_vcu_1_312::clear_vcu_gearfaultst() {
  vcu_gearfaultst_ = 0;
  clear_has_vcu_gearfaultst();
}
inline ::apollo::canbus::Scu_vcu_1_312_Vcu_gearfaultstType Scu_vcu_1_312::vcu_gearfaultst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_vcu_1_312.vcu_gearfaultst)
  return static_cast< ::apollo::canbus::Scu_vcu_1_312_Vcu_gearfaultstType >(vcu_gearfaultst_);
}
inline void Scu_vcu_1_312::set_vcu_gearfaultst(::apollo::canbus::Scu_vcu_1_312_Vcu_gearfaultstType value) {
  assert(::apollo::canbus::Scu_vcu_1_312_Vcu_gearfaultstType_IsValid(value));
  set_has_vcu_gearfaultst();
  vcu_gearfaultst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_vcu_1_312.vcu_gearfaultst)
}

// optional .apollo.canbus.Scu_vcu_1_312.Vcu_gearactType vcu_gearact = 15;
inline bool Scu_vcu_1_312::has_vcu_gearact() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Scu_vcu_1_312::set_has_vcu_gearact() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Scu_vcu_1_312::clear_has_vcu_gearact() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Scu_vcu_1_312::clear_vcu_gearact() {
  vcu_gearact_ = 0;
  clear_has_vcu_gearact();
}
inline ::apollo::canbus::Scu_vcu_1_312_Vcu_gearactType Scu_vcu_1_312::vcu_gearact() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_vcu_1_312.vcu_gearact)
  return static_cast< ::apollo::canbus::Scu_vcu_1_312_Vcu_gearactType >(vcu_gearact_);
}
inline void Scu_vcu_1_312::set_vcu_gearact(::apollo::canbus::Scu_vcu_1_312_Vcu_gearactType value) {
  assert(::apollo::canbus::Scu_vcu_1_312_Vcu_gearactType_IsValid(value));
  set_has_vcu_gearact();
  vcu_gearact_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_vcu_1_312.vcu_gearact)
}

// -------------------------------------------------------------------

// Scu_eps_311

// optional .apollo.canbus.Scu_eps_311.Eps_intidxType eps_intidx = 1;
inline bool Scu_eps_311::has_eps_intidx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Scu_eps_311::set_has_eps_intidx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Scu_eps_311::clear_has_eps_intidx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Scu_eps_311::clear_eps_intidx() {
  eps_intidx_ = 0;
  clear_has_eps_intidx();
}
inline ::apollo::canbus::Scu_eps_311_Eps_intidxType Scu_eps_311::eps_intidx() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_eps_311.eps_intidx)
  return static_cast< ::apollo::canbus::Scu_eps_311_Eps_intidxType >(eps_intidx_);
}
inline void Scu_eps_311::set_eps_intidx(::apollo::canbus::Scu_eps_311_Eps_intidxType value) {
  assert(::apollo::canbus::Scu_eps_311_Eps_intidxType_IsValid(value));
  set_has_eps_intidx();
  eps_intidx_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_eps_311.eps_intidx)
}

// optional double eps_steeranglespd = 2;
inline bool Scu_eps_311::has_eps_steeranglespd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Scu_eps_311::set_has_eps_steeranglespd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Scu_eps_311::clear_has_eps_steeranglespd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Scu_eps_311::clear_eps_steeranglespd() {
  eps_steeranglespd_ = 0;
  clear_has_eps_steeranglespd();
}
inline double Scu_eps_311::eps_steeranglespd() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_eps_311.eps_steeranglespd)
  return eps_steeranglespd_;
}
inline void Scu_eps_311::set_eps_steeranglespd(double value) {
  set_has_eps_steeranglespd();
  eps_steeranglespd_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_eps_311.eps_steeranglespd)
}

// optional double eps_steerangle = 3;
inline bool Scu_eps_311::has_eps_steerangle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Scu_eps_311::set_has_eps_steerangle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Scu_eps_311::clear_has_eps_steerangle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Scu_eps_311::clear_eps_steerangle() {
  eps_steerangle_ = 0;
  clear_has_eps_steerangle();
}
inline double Scu_eps_311::eps_steerangle() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_eps_311.eps_steerangle)
  return eps_steerangle_;
}
inline void Scu_eps_311::set_eps_steerangle(double value) {
  set_has_eps_steerangle();
  eps_steerangle_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_eps_311.eps_steerangle)
}

// optional .apollo.canbus.Scu_eps_311.Eps_faultstType eps_faultst = 4;
inline bool Scu_eps_311::has_eps_faultst() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Scu_eps_311::set_has_eps_faultst() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Scu_eps_311::clear_has_eps_faultst() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Scu_eps_311::clear_eps_faultst() {
  eps_faultst_ = 0;
  clear_has_eps_faultst();
}
inline ::apollo::canbus::Scu_eps_311_Eps_faultstType Scu_eps_311::eps_faultst() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_eps_311.eps_faultst)
  return static_cast< ::apollo::canbus::Scu_eps_311_Eps_faultstType >(eps_faultst_);
}
inline void Scu_eps_311::set_eps_faultst(::apollo::canbus::Scu_eps_311_Eps_faultstType value) {
  assert(::apollo::canbus::Scu_eps_311_Eps_faultstType_IsValid(value));
  set_has_eps_faultst();
  eps_faultst_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_eps_311.eps_faultst)
}

// optional .apollo.canbus.Scu_eps_311.Eps_drvmodeType eps_drvmode = 5;
inline bool Scu_eps_311::has_eps_drvmode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Scu_eps_311::set_has_eps_drvmode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Scu_eps_311::clear_has_eps_drvmode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Scu_eps_311::clear_eps_drvmode() {
  eps_drvmode_ = 0;
  clear_has_eps_drvmode();
}
inline ::apollo::canbus::Scu_eps_311_Eps_drvmodeType Scu_eps_311::eps_drvmode() const {
  // @@protoc_insertion_point(field_get:apollo.canbus.Scu_eps_311.eps_drvmode)
  return static_cast< ::apollo::canbus::Scu_eps_311_Eps_drvmodeType >(eps_drvmode_);
}
inline void Scu_eps_311::set_eps_drvmode(::apollo::canbus::Scu_eps_311_Eps_drvmodeType value) {
  assert(::apollo::canbus::Scu_eps_311_Eps_drvmodeType_IsValid(value));
  set_has_eps_drvmode();
  eps_drvmode_ = value;
  // @@protoc_insertion_point(field_set:apollo.canbus.Scu_eps_311.eps_drvmode)
}

// -------------------------------------------------------------------

// Ge3

// optional .apollo.canbus.Pc_bcm_201 pc_bcm_201 = 1;
inline bool Ge3::has_pc_bcm_201() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ge3::set_has_pc_bcm_201() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ge3::clear_has_pc_bcm_201() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ge3::clear_pc_bcm_201() {
  if (pc_bcm_201_ != NULL) pc_bcm_201_->Clear();
  clear_has_pc_bcm_201();
}
inline const ::apollo::canbus::Pc_bcm_201& Ge3::_internal_pc_bcm_201() const {
  return *pc_bcm_201_;
}
inline const ::apollo::canbus::Pc_bcm_201& Ge3::pc_bcm_201() const {
  const ::apollo::canbus::Pc_bcm_201* p = pc_bcm_201_;
  // @@protoc_insertion_point(field_get:apollo.canbus.Ge3.pc_bcm_201)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::canbus::Pc_bcm_201*>(
      &::apollo::canbus::_Pc_bcm_201_default_instance_);
}
inline ::apollo::canbus::Pc_bcm_201* Ge3::release_pc_bcm_201() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ge3.pc_bcm_201)
  clear_has_pc_bcm_201();
  ::apollo::canbus::Pc_bcm_201* temp = pc_bcm_201_;
  pc_bcm_201_ = NULL;
  return temp;
}
inline ::apollo::canbus::Pc_bcm_201* Ge3::mutable_pc_bcm_201() {
  set_has_pc_bcm_201();
  if (pc_bcm_201_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Pc_bcm_201>(GetArenaNoVirtual());
    pc_bcm_201_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ge3.pc_bcm_201)
  return pc_bcm_201_;
}
inline void Ge3::set_allocated_pc_bcm_201(::apollo::canbus::Pc_bcm_201* pc_bcm_201) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pc_bcm_201_;
  }
  if (pc_bcm_201) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pc_bcm_201 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pc_bcm_201, submessage_arena);
    }
    set_has_pc_bcm_201();
  } else {
    clear_has_pc_bcm_201();
  }
  pc_bcm_201_ = pc_bcm_201;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ge3.pc_bcm_201)
}

// optional .apollo.canbus.Scu_bcs_3_308 scu_bcs_3_308 = 2;
inline bool Ge3::has_scu_bcs_3_308() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ge3::set_has_scu_bcs_3_308() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ge3::clear_has_scu_bcs_3_308() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ge3::clear_scu_bcs_3_308() {
  if (scu_bcs_3_308_ != NULL) scu_bcs_3_308_->Clear();
  clear_has_scu_bcs_3_308();
}
inline const ::apollo::canbus::Scu_bcs_3_308& Ge3::_internal_scu_bcs_3_308() const {
  return *scu_bcs_3_308_;
}
inline const ::apollo::canbus::Scu_bcs_3_308& Ge3::scu_bcs_3_308() const {
  const ::apollo::canbus::Scu_bcs_3_308* p = scu_bcs_3_308_;
  // @@protoc_insertion_point(field_get:apollo.canbus.Ge3.scu_bcs_3_308)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::canbus::Scu_bcs_3_308*>(
      &::apollo::canbus::_Scu_bcs_3_308_default_instance_);
}
inline ::apollo::canbus::Scu_bcs_3_308* Ge3::release_scu_bcs_3_308() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ge3.scu_bcs_3_308)
  clear_has_scu_bcs_3_308();
  ::apollo::canbus::Scu_bcs_3_308* temp = scu_bcs_3_308_;
  scu_bcs_3_308_ = NULL;
  return temp;
}
inline ::apollo::canbus::Scu_bcs_3_308* Ge3::mutable_scu_bcs_3_308() {
  set_has_scu_bcs_3_308();
  if (scu_bcs_3_308_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Scu_bcs_3_308>(GetArenaNoVirtual());
    scu_bcs_3_308_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ge3.scu_bcs_3_308)
  return scu_bcs_3_308_;
}
inline void Ge3::set_allocated_scu_bcs_3_308(::apollo::canbus::Scu_bcs_3_308* scu_bcs_3_308) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scu_bcs_3_308_;
  }
  if (scu_bcs_3_308) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scu_bcs_3_308 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scu_bcs_3_308, submessage_arena);
    }
    set_has_scu_bcs_3_308();
  } else {
    clear_has_scu_bcs_3_308();
  }
  scu_bcs_3_308_ = scu_bcs_3_308;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ge3.scu_bcs_3_308)
}

// optional .apollo.canbus.Pc_epb_203 pc_epb_203 = 3;
inline bool Ge3::has_pc_epb_203() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ge3::set_has_pc_epb_203() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ge3::clear_has_pc_epb_203() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ge3::clear_pc_epb_203() {
  if (pc_epb_203_ != NULL) pc_epb_203_->Clear();
  clear_has_pc_epb_203();
}
inline const ::apollo::canbus::Pc_epb_203& Ge3::_internal_pc_epb_203() const {
  return *pc_epb_203_;
}
inline const ::apollo::canbus::Pc_epb_203& Ge3::pc_epb_203() const {
  const ::apollo::canbus::Pc_epb_203* p = pc_epb_203_;
  // @@protoc_insertion_point(field_get:apollo.canbus.Ge3.pc_epb_203)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::canbus::Pc_epb_203*>(
      &::apollo::canbus::_Pc_epb_203_default_instance_);
}
inline ::apollo::canbus::Pc_epb_203* Ge3::release_pc_epb_203() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ge3.pc_epb_203)
  clear_has_pc_epb_203();
  ::apollo::canbus::Pc_epb_203* temp = pc_epb_203_;
  pc_epb_203_ = NULL;
  return temp;
}
inline ::apollo::canbus::Pc_epb_203* Ge3::mutable_pc_epb_203() {
  set_has_pc_epb_203();
  if (pc_epb_203_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Pc_epb_203>(GetArenaNoVirtual());
    pc_epb_203_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ge3.pc_epb_203)
  return pc_epb_203_;
}
inline void Ge3::set_allocated_pc_epb_203(::apollo::canbus::Pc_epb_203* pc_epb_203) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pc_epb_203_;
  }
  if (pc_epb_203) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pc_epb_203 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pc_epb_203, submessage_arena);
    }
    set_has_pc_epb_203();
  } else {
    clear_has_pc_epb_203();
  }
  pc_epb_203_ = pc_epb_203;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ge3.pc_epb_203)
}

// optional .apollo.canbus.Pc_bcs_202 pc_bcs_202 = 4;
inline bool Ge3::has_pc_bcs_202() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ge3::set_has_pc_bcs_202() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ge3::clear_has_pc_bcs_202() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ge3::clear_pc_bcs_202() {
  if (pc_bcs_202_ != NULL) pc_bcs_202_->Clear();
  clear_has_pc_bcs_202();
}
inline const ::apollo::canbus::Pc_bcs_202& Ge3::_internal_pc_bcs_202() const {
  return *pc_bcs_202_;
}
inline const ::apollo::canbus::Pc_bcs_202& Ge3::pc_bcs_202() const {
  const ::apollo::canbus::Pc_bcs_202* p = pc_bcs_202_;
  // @@protoc_insertion_point(field_get:apollo.canbus.Ge3.pc_bcs_202)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::canbus::Pc_bcs_202*>(
      &::apollo::canbus::_Pc_bcs_202_default_instance_);
}
inline ::apollo::canbus::Pc_bcs_202* Ge3::release_pc_bcs_202() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ge3.pc_bcs_202)
  clear_has_pc_bcs_202();
  ::apollo::canbus::Pc_bcs_202* temp = pc_bcs_202_;
  pc_bcs_202_ = NULL;
  return temp;
}
inline ::apollo::canbus::Pc_bcs_202* Ge3::mutable_pc_bcs_202() {
  set_has_pc_bcs_202();
  if (pc_bcs_202_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Pc_bcs_202>(GetArenaNoVirtual());
    pc_bcs_202_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ge3.pc_bcs_202)
  return pc_bcs_202_;
}
inline void Ge3::set_allocated_pc_bcs_202(::apollo::canbus::Pc_bcs_202* pc_bcs_202) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pc_bcs_202_;
  }
  if (pc_bcs_202) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pc_bcs_202 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pc_bcs_202, submessage_arena);
    }
    set_has_pc_bcs_202();
  } else {
    clear_has_pc_bcs_202();
  }
  pc_bcs_202_ = pc_bcs_202;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ge3.pc_bcs_202)
}

// optional .apollo.canbus.Pc_vcu_205 pc_vcu_205 = 5;
inline bool Ge3::has_pc_vcu_205() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ge3::set_has_pc_vcu_205() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ge3::clear_has_pc_vcu_205() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ge3::clear_pc_vcu_205() {
  if (pc_vcu_205_ != NULL) pc_vcu_205_->Clear();
  clear_has_pc_vcu_205();
}
inline const ::apollo::canbus::Pc_vcu_205& Ge3::_internal_pc_vcu_205() const {
  return *pc_vcu_205_;
}
inline const ::apollo::canbus::Pc_vcu_205& Ge3::pc_vcu_205() const {
  const ::apollo::canbus::Pc_vcu_205* p = pc_vcu_205_;
  // @@protoc_insertion_point(field_get:apollo.canbus.Ge3.pc_vcu_205)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::canbus::Pc_vcu_205*>(
      &::apollo::canbus::_Pc_vcu_205_default_instance_);
}
inline ::apollo::canbus::Pc_vcu_205* Ge3::release_pc_vcu_205() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ge3.pc_vcu_205)
  clear_has_pc_vcu_205();
  ::apollo::canbus::Pc_vcu_205* temp = pc_vcu_205_;
  pc_vcu_205_ = NULL;
  return temp;
}
inline ::apollo::canbus::Pc_vcu_205* Ge3::mutable_pc_vcu_205() {
  set_has_pc_vcu_205();
  if (pc_vcu_205_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Pc_vcu_205>(GetArenaNoVirtual());
    pc_vcu_205_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ge3.pc_vcu_205)
  return pc_vcu_205_;
}
inline void Ge3::set_allocated_pc_vcu_205(::apollo::canbus::Pc_vcu_205* pc_vcu_205) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pc_vcu_205_;
  }
  if (pc_vcu_205) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pc_vcu_205 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pc_vcu_205, submessage_arena);
    }
    set_has_pc_vcu_205();
  } else {
    clear_has_pc_vcu_205();
  }
  pc_vcu_205_ = pc_vcu_205;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ge3.pc_vcu_205)
}

// optional .apollo.canbus.Pc_eps_204 pc_eps_204 = 6;
inline bool Ge3::has_pc_eps_204() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ge3::set_has_pc_eps_204() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ge3::clear_has_pc_eps_204() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ge3::clear_pc_eps_204() {
  if (pc_eps_204_ != NULL) pc_eps_204_->Clear();
  clear_has_pc_eps_204();
}
inline const ::apollo::canbus::Pc_eps_204& Ge3::_internal_pc_eps_204() const {
  return *pc_eps_204_;
}
inline const ::apollo::canbus::Pc_eps_204& Ge3::pc_eps_204() const {
  const ::apollo::canbus::Pc_eps_204* p = pc_eps_204_;
  // @@protoc_insertion_point(field_get:apollo.canbus.Ge3.pc_eps_204)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::canbus::Pc_eps_204*>(
      &::apollo::canbus::_Pc_eps_204_default_instance_);
}
inline ::apollo::canbus::Pc_eps_204* Ge3::release_pc_eps_204() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ge3.pc_eps_204)
  clear_has_pc_eps_204();
  ::apollo::canbus::Pc_eps_204* temp = pc_eps_204_;
  pc_eps_204_ = NULL;
  return temp;
}
inline ::apollo::canbus::Pc_eps_204* Ge3::mutable_pc_eps_204() {
  set_has_pc_eps_204();
  if (pc_eps_204_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Pc_eps_204>(GetArenaNoVirtual());
    pc_eps_204_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ge3.pc_eps_204)
  return pc_eps_204_;
}
inline void Ge3::set_allocated_pc_eps_204(::apollo::canbus::Pc_eps_204* pc_eps_204) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pc_eps_204_;
  }
  if (pc_eps_204) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pc_eps_204 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pc_eps_204, submessage_arena);
    }
    set_has_pc_eps_204();
  } else {
    clear_has_pc_eps_204();
  }
  pc_eps_204_ = pc_eps_204;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ge3.pc_eps_204)
}

// optional .apollo.canbus.Scu_vcu_2_313 scu_vcu_2_313 = 7;
inline bool Ge3::has_scu_vcu_2_313() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ge3::set_has_scu_vcu_2_313() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Ge3::clear_has_scu_vcu_2_313() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Ge3::clear_scu_vcu_2_313() {
  if (scu_vcu_2_313_ != NULL) scu_vcu_2_313_->Clear();
  clear_has_scu_vcu_2_313();
}
inline const ::apollo::canbus::Scu_vcu_2_313& Ge3::_internal_scu_vcu_2_313() const {
  return *scu_vcu_2_313_;
}
inline const ::apollo::canbus::Scu_vcu_2_313& Ge3::scu_vcu_2_313() const {
  const ::apollo::canbus::Scu_vcu_2_313* p = scu_vcu_2_313_;
  // @@protoc_insertion_point(field_get:apollo.canbus.Ge3.scu_vcu_2_313)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::canbus::Scu_vcu_2_313*>(
      &::apollo::canbus::_Scu_vcu_2_313_default_instance_);
}
inline ::apollo::canbus::Scu_vcu_2_313* Ge3::release_scu_vcu_2_313() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ge3.scu_vcu_2_313)
  clear_has_scu_vcu_2_313();
  ::apollo::canbus::Scu_vcu_2_313* temp = scu_vcu_2_313_;
  scu_vcu_2_313_ = NULL;
  return temp;
}
inline ::apollo::canbus::Scu_vcu_2_313* Ge3::mutable_scu_vcu_2_313() {
  set_has_scu_vcu_2_313();
  if (scu_vcu_2_313_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Scu_vcu_2_313>(GetArenaNoVirtual());
    scu_vcu_2_313_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ge3.scu_vcu_2_313)
  return scu_vcu_2_313_;
}
inline void Ge3::set_allocated_scu_vcu_2_313(::apollo::canbus::Scu_vcu_2_313* scu_vcu_2_313) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scu_vcu_2_313_;
  }
  if (scu_vcu_2_313) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scu_vcu_2_313 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scu_vcu_2_313, submessage_arena);
    }
    set_has_scu_vcu_2_313();
  } else {
    clear_has_scu_vcu_2_313();
  }
  scu_vcu_2_313_ = scu_vcu_2_313;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ge3.scu_vcu_2_313)
}

// optional .apollo.canbus.Scu_1_301 scu_1_301 = 8;
inline bool Ge3::has_scu_1_301() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ge3::set_has_scu_1_301() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Ge3::clear_has_scu_1_301() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Ge3::clear_scu_1_301() {
  if (scu_1_301_ != NULL) scu_1_301_->Clear();
  clear_has_scu_1_301();
}
inline const ::apollo::canbus::Scu_1_301& Ge3::_internal_scu_1_301() const {
  return *scu_1_301_;
}
inline const ::apollo::canbus::Scu_1_301& Ge3::scu_1_301() const {
  const ::apollo::canbus::Scu_1_301* p = scu_1_301_;
  // @@protoc_insertion_point(field_get:apollo.canbus.Ge3.scu_1_301)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::canbus::Scu_1_301*>(
      &::apollo::canbus::_Scu_1_301_default_instance_);
}
inline ::apollo::canbus::Scu_1_301* Ge3::release_scu_1_301() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ge3.scu_1_301)
  clear_has_scu_1_301();
  ::apollo::canbus::Scu_1_301* temp = scu_1_301_;
  scu_1_301_ = NULL;
  return temp;
}
inline ::apollo::canbus::Scu_1_301* Ge3::mutable_scu_1_301() {
  set_has_scu_1_301();
  if (scu_1_301_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Scu_1_301>(GetArenaNoVirtual());
    scu_1_301_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ge3.scu_1_301)
  return scu_1_301_;
}
inline void Ge3::set_allocated_scu_1_301(::apollo::canbus::Scu_1_301* scu_1_301) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scu_1_301_;
  }
  if (scu_1_301) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scu_1_301 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scu_1_301, submessage_arena);
    }
    set_has_scu_1_301();
  } else {
    clear_has_scu_1_301();
  }
  scu_1_301_ = scu_1_301;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ge3.scu_1_301)
}

// optional .apollo.canbus.Scu_2_302 scu_2_302 = 9;
inline bool Ge3::has_scu_2_302() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ge3::set_has_scu_2_302() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Ge3::clear_has_scu_2_302() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Ge3::clear_scu_2_302() {
  if (scu_2_302_ != NULL) scu_2_302_->Clear();
  clear_has_scu_2_302();
}
inline const ::apollo::canbus::Scu_2_302& Ge3::_internal_scu_2_302() const {
  return *scu_2_302_;
}
inline const ::apollo::canbus::Scu_2_302& Ge3::scu_2_302() const {
  const ::apollo::canbus::Scu_2_302* p = scu_2_302_;
  // @@protoc_insertion_point(field_get:apollo.canbus.Ge3.scu_2_302)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::canbus::Scu_2_302*>(
      &::apollo::canbus::_Scu_2_302_default_instance_);
}
inline ::apollo::canbus::Scu_2_302* Ge3::release_scu_2_302() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ge3.scu_2_302)
  clear_has_scu_2_302();
  ::apollo::canbus::Scu_2_302* temp = scu_2_302_;
  scu_2_302_ = NULL;
  return temp;
}
inline ::apollo::canbus::Scu_2_302* Ge3::mutable_scu_2_302() {
  set_has_scu_2_302();
  if (scu_2_302_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Scu_2_302>(GetArenaNoVirtual());
    scu_2_302_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ge3.scu_2_302)
  return scu_2_302_;
}
inline void Ge3::set_allocated_scu_2_302(::apollo::canbus::Scu_2_302* scu_2_302) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scu_2_302_;
  }
  if (scu_2_302) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scu_2_302 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scu_2_302, submessage_arena);
    }
    set_has_scu_2_302();
  } else {
    clear_has_scu_2_302();
  }
  scu_2_302_ = scu_2_302;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ge3.scu_2_302)
}

// optional .apollo.canbus.Scu_3_303 scu_3_303 = 10;
inline bool Ge3::has_scu_3_303() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Ge3::set_has_scu_3_303() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Ge3::clear_has_scu_3_303() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Ge3::clear_scu_3_303() {
  if (scu_3_303_ != NULL) scu_3_303_->Clear();
  clear_has_scu_3_303();
}
inline const ::apollo::canbus::Scu_3_303& Ge3::_internal_scu_3_303() const {
  return *scu_3_303_;
}
inline const ::apollo::canbus::Scu_3_303& Ge3::scu_3_303() const {
  const ::apollo::canbus::Scu_3_303* p = scu_3_303_;
  // @@protoc_insertion_point(field_get:apollo.canbus.Ge3.scu_3_303)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::canbus::Scu_3_303*>(
      &::apollo::canbus::_Scu_3_303_default_instance_);
}
inline ::apollo::canbus::Scu_3_303* Ge3::release_scu_3_303() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ge3.scu_3_303)
  clear_has_scu_3_303();
  ::apollo::canbus::Scu_3_303* temp = scu_3_303_;
  scu_3_303_ = NULL;
  return temp;
}
inline ::apollo::canbus::Scu_3_303* Ge3::mutable_scu_3_303() {
  set_has_scu_3_303();
  if (scu_3_303_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Scu_3_303>(GetArenaNoVirtual());
    scu_3_303_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ge3.scu_3_303)
  return scu_3_303_;
}
inline void Ge3::set_allocated_scu_3_303(::apollo::canbus::Scu_3_303* scu_3_303) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scu_3_303_;
  }
  if (scu_3_303) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scu_3_303 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scu_3_303, submessage_arena);
    }
    set_has_scu_3_303();
  } else {
    clear_has_scu_3_303();
  }
  scu_3_303_ = scu_3_303;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ge3.scu_3_303)
}

// optional .apollo.canbus.Scu_bcm_304 scu_bcm_304 = 11;
inline bool Ge3::has_scu_bcm_304() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Ge3::set_has_scu_bcm_304() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Ge3::clear_has_scu_bcm_304() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Ge3::clear_scu_bcm_304() {
  if (scu_bcm_304_ != NULL) scu_bcm_304_->Clear();
  clear_has_scu_bcm_304();
}
inline const ::apollo::canbus::Scu_bcm_304& Ge3::_internal_scu_bcm_304() const {
  return *scu_bcm_304_;
}
inline const ::apollo::canbus::Scu_bcm_304& Ge3::scu_bcm_304() const {
  const ::apollo::canbus::Scu_bcm_304* p = scu_bcm_304_;
  // @@protoc_insertion_point(field_get:apollo.canbus.Ge3.scu_bcm_304)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::canbus::Scu_bcm_304*>(
      &::apollo::canbus::_Scu_bcm_304_default_instance_);
}
inline ::apollo::canbus::Scu_bcm_304* Ge3::release_scu_bcm_304() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ge3.scu_bcm_304)
  clear_has_scu_bcm_304();
  ::apollo::canbus::Scu_bcm_304* temp = scu_bcm_304_;
  scu_bcm_304_ = NULL;
  return temp;
}
inline ::apollo::canbus::Scu_bcm_304* Ge3::mutable_scu_bcm_304() {
  set_has_scu_bcm_304();
  if (scu_bcm_304_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Scu_bcm_304>(GetArenaNoVirtual());
    scu_bcm_304_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ge3.scu_bcm_304)
  return scu_bcm_304_;
}
inline void Ge3::set_allocated_scu_bcm_304(::apollo::canbus::Scu_bcm_304* scu_bcm_304) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scu_bcm_304_;
  }
  if (scu_bcm_304) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scu_bcm_304 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scu_bcm_304, submessage_arena);
    }
    set_has_scu_bcm_304();
  } else {
    clear_has_scu_bcm_304();
  }
  scu_bcm_304_ = scu_bcm_304;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ge3.scu_bcm_304)
}

// optional .apollo.canbus.Scu_bcs_1_306 scu_bcs_1_306 = 12;
inline bool Ge3::has_scu_bcs_1_306() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Ge3::set_has_scu_bcs_1_306() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Ge3::clear_has_scu_bcs_1_306() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Ge3::clear_scu_bcs_1_306() {
  if (scu_bcs_1_306_ != NULL) scu_bcs_1_306_->Clear();
  clear_has_scu_bcs_1_306();
}
inline const ::apollo::canbus::Scu_bcs_1_306& Ge3::_internal_scu_bcs_1_306() const {
  return *scu_bcs_1_306_;
}
inline const ::apollo::canbus::Scu_bcs_1_306& Ge3::scu_bcs_1_306() const {
  const ::apollo::canbus::Scu_bcs_1_306* p = scu_bcs_1_306_;
  // @@protoc_insertion_point(field_get:apollo.canbus.Ge3.scu_bcs_1_306)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::canbus::Scu_bcs_1_306*>(
      &::apollo::canbus::_Scu_bcs_1_306_default_instance_);
}
inline ::apollo::canbus::Scu_bcs_1_306* Ge3::release_scu_bcs_1_306() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ge3.scu_bcs_1_306)
  clear_has_scu_bcs_1_306();
  ::apollo::canbus::Scu_bcs_1_306* temp = scu_bcs_1_306_;
  scu_bcs_1_306_ = NULL;
  return temp;
}
inline ::apollo::canbus::Scu_bcs_1_306* Ge3::mutable_scu_bcs_1_306() {
  set_has_scu_bcs_1_306();
  if (scu_bcs_1_306_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Scu_bcs_1_306>(GetArenaNoVirtual());
    scu_bcs_1_306_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ge3.scu_bcs_1_306)
  return scu_bcs_1_306_;
}
inline void Ge3::set_allocated_scu_bcs_1_306(::apollo::canbus::Scu_bcs_1_306* scu_bcs_1_306) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scu_bcs_1_306_;
  }
  if (scu_bcs_1_306) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scu_bcs_1_306 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scu_bcs_1_306, submessage_arena);
    }
    set_has_scu_bcs_1_306();
  } else {
    clear_has_scu_bcs_1_306();
  }
  scu_bcs_1_306_ = scu_bcs_1_306;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ge3.scu_bcs_1_306)
}

// optional .apollo.canbus.Scu_bcs_2_307 scu_bcs_2_307 = 13;
inline bool Ge3::has_scu_bcs_2_307() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Ge3::set_has_scu_bcs_2_307() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Ge3::clear_has_scu_bcs_2_307() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Ge3::clear_scu_bcs_2_307() {
  if (scu_bcs_2_307_ != NULL) scu_bcs_2_307_->Clear();
  clear_has_scu_bcs_2_307();
}
inline const ::apollo::canbus::Scu_bcs_2_307& Ge3::_internal_scu_bcs_2_307() const {
  return *scu_bcs_2_307_;
}
inline const ::apollo::canbus::Scu_bcs_2_307& Ge3::scu_bcs_2_307() const {
  const ::apollo::canbus::Scu_bcs_2_307* p = scu_bcs_2_307_;
  // @@protoc_insertion_point(field_get:apollo.canbus.Ge3.scu_bcs_2_307)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::canbus::Scu_bcs_2_307*>(
      &::apollo::canbus::_Scu_bcs_2_307_default_instance_);
}
inline ::apollo::canbus::Scu_bcs_2_307* Ge3::release_scu_bcs_2_307() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ge3.scu_bcs_2_307)
  clear_has_scu_bcs_2_307();
  ::apollo::canbus::Scu_bcs_2_307* temp = scu_bcs_2_307_;
  scu_bcs_2_307_ = NULL;
  return temp;
}
inline ::apollo::canbus::Scu_bcs_2_307* Ge3::mutable_scu_bcs_2_307() {
  set_has_scu_bcs_2_307();
  if (scu_bcs_2_307_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Scu_bcs_2_307>(GetArenaNoVirtual());
    scu_bcs_2_307_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ge3.scu_bcs_2_307)
  return scu_bcs_2_307_;
}
inline void Ge3::set_allocated_scu_bcs_2_307(::apollo::canbus::Scu_bcs_2_307* scu_bcs_2_307) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scu_bcs_2_307_;
  }
  if (scu_bcs_2_307) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scu_bcs_2_307 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scu_bcs_2_307, submessage_arena);
    }
    set_has_scu_bcs_2_307();
  } else {
    clear_has_scu_bcs_2_307();
  }
  scu_bcs_2_307_ = scu_bcs_2_307;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ge3.scu_bcs_2_307)
}

// optional .apollo.canbus.Scu_epb_310 scu_epb_310 = 14;
inline bool Ge3::has_scu_epb_310() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Ge3::set_has_scu_epb_310() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Ge3::clear_has_scu_epb_310() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Ge3::clear_scu_epb_310() {
  if (scu_epb_310_ != NULL) scu_epb_310_->Clear();
  clear_has_scu_epb_310();
}
inline const ::apollo::canbus::Scu_epb_310& Ge3::_internal_scu_epb_310() const {
  return *scu_epb_310_;
}
inline const ::apollo::canbus::Scu_epb_310& Ge3::scu_epb_310() const {
  const ::apollo::canbus::Scu_epb_310* p = scu_epb_310_;
  // @@protoc_insertion_point(field_get:apollo.canbus.Ge3.scu_epb_310)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::canbus::Scu_epb_310*>(
      &::apollo::canbus::_Scu_epb_310_default_instance_);
}
inline ::apollo::canbus::Scu_epb_310* Ge3::release_scu_epb_310() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ge3.scu_epb_310)
  clear_has_scu_epb_310();
  ::apollo::canbus::Scu_epb_310* temp = scu_epb_310_;
  scu_epb_310_ = NULL;
  return temp;
}
inline ::apollo::canbus::Scu_epb_310* Ge3::mutable_scu_epb_310() {
  set_has_scu_epb_310();
  if (scu_epb_310_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Scu_epb_310>(GetArenaNoVirtual());
    scu_epb_310_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ge3.scu_epb_310)
  return scu_epb_310_;
}
inline void Ge3::set_allocated_scu_epb_310(::apollo::canbus::Scu_epb_310* scu_epb_310) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scu_epb_310_;
  }
  if (scu_epb_310) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scu_epb_310 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scu_epb_310, submessage_arena);
    }
    set_has_scu_epb_310();
  } else {
    clear_has_scu_epb_310();
  }
  scu_epb_310_ = scu_epb_310;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ge3.scu_epb_310)
}

// optional .apollo.canbus.Scu_vcu_1_312 scu_vcu_1_312 = 15;
inline bool Ge3::has_scu_vcu_1_312() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Ge3::set_has_scu_vcu_1_312() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Ge3::clear_has_scu_vcu_1_312() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Ge3::clear_scu_vcu_1_312() {
  if (scu_vcu_1_312_ != NULL) scu_vcu_1_312_->Clear();
  clear_has_scu_vcu_1_312();
}
inline const ::apollo::canbus::Scu_vcu_1_312& Ge3::_internal_scu_vcu_1_312() const {
  return *scu_vcu_1_312_;
}
inline const ::apollo::canbus::Scu_vcu_1_312& Ge3::scu_vcu_1_312() const {
  const ::apollo::canbus::Scu_vcu_1_312* p = scu_vcu_1_312_;
  // @@protoc_insertion_point(field_get:apollo.canbus.Ge3.scu_vcu_1_312)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::canbus::Scu_vcu_1_312*>(
      &::apollo::canbus::_Scu_vcu_1_312_default_instance_);
}
inline ::apollo::canbus::Scu_vcu_1_312* Ge3::release_scu_vcu_1_312() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ge3.scu_vcu_1_312)
  clear_has_scu_vcu_1_312();
  ::apollo::canbus::Scu_vcu_1_312* temp = scu_vcu_1_312_;
  scu_vcu_1_312_ = NULL;
  return temp;
}
inline ::apollo::canbus::Scu_vcu_1_312* Ge3::mutable_scu_vcu_1_312() {
  set_has_scu_vcu_1_312();
  if (scu_vcu_1_312_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Scu_vcu_1_312>(GetArenaNoVirtual());
    scu_vcu_1_312_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ge3.scu_vcu_1_312)
  return scu_vcu_1_312_;
}
inline void Ge3::set_allocated_scu_vcu_1_312(::apollo::canbus::Scu_vcu_1_312* scu_vcu_1_312) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scu_vcu_1_312_;
  }
  if (scu_vcu_1_312) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scu_vcu_1_312 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scu_vcu_1_312, submessage_arena);
    }
    set_has_scu_vcu_1_312();
  } else {
    clear_has_scu_vcu_1_312();
  }
  scu_vcu_1_312_ = scu_vcu_1_312;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ge3.scu_vcu_1_312)
}

// optional .apollo.canbus.Scu_eps_311 scu_eps_311 = 16;
inline bool Ge3::has_scu_eps_311() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Ge3::set_has_scu_eps_311() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Ge3::clear_has_scu_eps_311() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Ge3::clear_scu_eps_311() {
  if (scu_eps_311_ != NULL) scu_eps_311_->Clear();
  clear_has_scu_eps_311();
}
inline const ::apollo::canbus::Scu_eps_311& Ge3::_internal_scu_eps_311() const {
  return *scu_eps_311_;
}
inline const ::apollo::canbus::Scu_eps_311& Ge3::scu_eps_311() const {
  const ::apollo::canbus::Scu_eps_311* p = scu_eps_311_;
  // @@protoc_insertion_point(field_get:apollo.canbus.Ge3.scu_eps_311)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::canbus::Scu_eps_311*>(
      &::apollo::canbus::_Scu_eps_311_default_instance_);
}
inline ::apollo::canbus::Scu_eps_311* Ge3::release_scu_eps_311() {
  // @@protoc_insertion_point(field_release:apollo.canbus.Ge3.scu_eps_311)
  clear_has_scu_eps_311();
  ::apollo::canbus::Scu_eps_311* temp = scu_eps_311_;
  scu_eps_311_ = NULL;
  return temp;
}
inline ::apollo::canbus::Scu_eps_311* Ge3::mutable_scu_eps_311() {
  set_has_scu_eps_311();
  if (scu_eps_311_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::canbus::Scu_eps_311>(GetArenaNoVirtual());
    scu_eps_311_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.canbus.Ge3.scu_eps_311)
  return scu_eps_311_;
}
inline void Ge3::set_allocated_scu_eps_311(::apollo::canbus::Scu_eps_311* scu_eps_311) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scu_eps_311_;
  }
  if (scu_eps_311) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scu_eps_311 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scu_eps_311, submessage_arena);
    }
    set_has_scu_eps_311();
  } else {
    clear_has_scu_eps_311();
  }
  scu_eps_311_ = scu_eps_311;
  // @@protoc_insertion_point(field_set_allocated:apollo.canbus.Ge3.scu_eps_311)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::canbus::Pc_bcm_201_Pc_reverselampreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Pc_bcm_201_Pc_reverselampreqType>() {
  return ::apollo::canbus::Pc_bcm_201_Pc_reverselampreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Pc_bcm_201_Pc_lowbeamreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Pc_bcm_201_Pc_lowbeamreqType>() {
  return ::apollo::canbus::Pc_bcm_201_Pc_lowbeamreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Pc_bcm_201_Pc_highbeamreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Pc_bcm_201_Pc_highbeamreqType>() {
  return ::apollo::canbus::Pc_bcm_201_Pc_highbeamreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Pc_bcm_201_Pc_rightturnlampreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Pc_bcm_201_Pc_rightturnlampreqType>() {
  return ::apollo::canbus::Pc_bcm_201_Pc_rightturnlampreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Pc_bcm_201_Pc_leftturnlampreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Pc_bcm_201_Pc_leftturnlampreqType>() {
  return ::apollo::canbus::Pc_bcm_201_Pc_leftturnlampreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Pc_bcm_201_Pc_hornreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Pc_bcm_201_Pc_hornreqType>() {
  return ::apollo::canbus::Pc_bcm_201_Pc_hornreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Pc_bcm_201_Pc_hazardlampreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Pc_bcm_201_Pc_hazardlampreqType>() {
  return ::apollo::canbus::Pc_bcm_201_Pc_hazardlampreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheelspdvdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheelspdvdType>() {
  return ::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheelspdvdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionvdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionvdType>() {
  return ::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionvdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheelspdvdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheelspdvdType>() {
  return ::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheelspdvdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionvdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionvdType>() {
  return ::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionvdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_3_308_Bcs_frwheelspdvdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_3_308_Bcs_frwheelspdvdType>() {
  return ::apollo::canbus::Scu_bcs_3_308_Bcs_frwheelspdvdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionvdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionvdType>() {
  return ::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionvdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_3_308_Bcs_flwheelspdvdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_3_308_Bcs_flwheelspdvdType>() {
  return ::apollo::canbus::Scu_bcs_3_308_Bcs_flwheelspdvdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionvdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionvdType>() {
  return ::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionvdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionType>() {
  return ::apollo::canbus::Scu_bcs_3_308_Bcs_rrwheeldirectionType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionType>() {
  return ::apollo::canbus::Scu_bcs_3_308_Bcs_rlwheeldirectionType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionType>() {
  return ::apollo::canbus::Scu_bcs_3_308_Bcs_frwheeldirectionType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionType>() {
  return ::apollo::canbus::Scu_bcs_3_308_Bcs_flwheeldirectionType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Pc_epb_203_Pc_epbreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Pc_epb_203_Pc_epbreqType>() {
  return ::apollo::canbus::Pc_epb_203_Pc_epbreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Pc_epb_203_Pc_epbenableType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Pc_epb_203_Pc_epbenableType>() {
  return ::apollo::canbus::Pc_epb_203_Pc_epbenableType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Pc_bcs_202_Pc_brkpedenableType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Pc_bcs_202_Pc_brkpedenableType>() {
  return ::apollo::canbus::Pc_bcs_202_Pc_brkpedenableType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Pc_vcu_205_Pc_accpedenableType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Pc_vcu_205_Pc_accpedenableType>() {
  return ::apollo::canbus::Pc_vcu_205_Pc_accpedenableType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Pc_vcu_205_Pc_torqenableType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Pc_vcu_205_Pc_torqenableType>() {
  return ::apollo::canbus::Pc_vcu_205_Pc_torqenableType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Pc_vcu_205_Pc_gearreqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Pc_vcu_205_Pc_gearreqType>() {
  return ::apollo::canbus::Pc_vcu_205_Pc_gearreqType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Pc_vcu_205_Pc_gearenableType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Pc_vcu_205_Pc_gearenableType>() {
  return ::apollo::canbus::Pc_vcu_205_Pc_gearenableType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Pc_eps_204_Pc_steerenableType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Pc_eps_204_Pc_steerenableType>() {
  return ::apollo::canbus::Pc_eps_204_Pc_steerenableType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_1_301_Scu_stopbutstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_1_301_Scu_stopbutstType>() {
  return ::apollo::canbus::Scu_1_301_Scu_stopbutstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_1_301_Scu_drvmodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_1_301_Scu_drvmodeType>() {
  return ::apollo::canbus::Scu_1_301_Scu_drvmodeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_1_301_Scu_faultstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_1_301_Scu_faultstType>() {
  return ::apollo::canbus::Scu_1_301_Scu_faultstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcm_304_Bcm_vehreversestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcm_304_Bcm_vehreversestType>() {
  return ::apollo::canbus::Scu_bcm_304_Bcm_vehreversestType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcm_304_Bcm_rightturnlampstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcm_304_Bcm_rightturnlampstType>() {
  return ::apollo::canbus::Scu_bcm_304_Bcm_rightturnlampstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcm_304_Bcm_rearfoglampstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcm_304_Bcm_rearfoglampstType>() {
  return ::apollo::canbus::Scu_bcm_304_Bcm_rearfoglampstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcm_304_Bcm_parkinglampstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcm_304_Bcm_parkinglampstType>() {
  return ::apollo::canbus::Scu_bcm_304_Bcm_parkinglampstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcm_304_Bcm_lowbeamstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcm_304_Bcm_lowbeamstType>() {
  return ::apollo::canbus::Scu_bcm_304_Bcm_lowbeamstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcm_304_Bcm_leftturnlampstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcm_304_Bcm_leftturnlampstType>() {
  return ::apollo::canbus::Scu_bcm_304_Bcm_leftturnlampstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcm_304_Bcm_keystType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcm_304_Bcm_keystType>() {
  return ::apollo::canbus::Scu_bcm_304_Bcm_keystType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcm_304_Bcm_hornstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcm_304_Bcm_hornstType>() {
  return ::apollo::canbus::Scu_bcm_304_Bcm_hornstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcm_304_Bcm_highbeamstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcm_304_Bcm_highbeamstType>() {
  return ::apollo::canbus::Scu_bcm_304_Bcm_highbeamstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcm_304_Bcm_hazardlampstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcm_304_Bcm_hazardlampstType>() {
  return ::apollo::canbus::Scu_bcm_304_Bcm_hazardlampstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcm_304_Bcm_frontfoglampstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcm_304_Bcm_frontfoglampstType>() {
  return ::apollo::canbus::Scu_bcm_304_Bcm_frontfoglampstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcm_304_Bcm_brakelightswitchstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcm_304_Bcm_brakelightswitchstType>() {
  return ::apollo::canbus::Scu_bcm_304_Bcm_brakelightswitchstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_1_306_Bcs_aebavailableType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_1_306_Bcs_aebavailableType>() {
  return ::apollo::canbus::Scu_bcs_1_306_Bcs_aebavailableType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_1_306_Bcs_cddavailableType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_1_306_Bcs_cddavailableType>() {
  return ::apollo::canbus::Scu_bcs_1_306_Bcs_cddavailableType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_1_306_Bcs_intidxType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_1_306_Bcs_intidxType>() {
  return ::apollo::canbus::Scu_bcs_1_306_Bcs_intidxType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_1_306_Bcs_vdcfaultstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_1_306_Bcs_vdcfaultstType>() {
  return ::apollo::canbus::Scu_bcs_1_306_Bcs_vdcfaultstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_1_306_Bcs_vdcactivestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_1_306_Bcs_vdcactivestType>() {
  return ::apollo::canbus::Scu_bcs_1_306_Bcs_vdcactivestType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_1_306_Bcs_absfaultstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_1_306_Bcs_absfaultstType>() {
  return ::apollo::canbus::Scu_bcs_1_306_Bcs_absfaultstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_1_306_Bcs_absactivestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_1_306_Bcs_absactivestType>() {
  return ::apollo::canbus::Scu_bcs_1_306_Bcs_absactivestType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_1_306_Bcs_faultstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_1_306_Bcs_faultstType>() {
  return ::apollo::canbus::Scu_bcs_1_306_Bcs_faultstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_1_306_Bcs_drvmodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_1_306_Bcs_drvmodeType>() {
  return ::apollo::canbus::Scu_bcs_1_306_Bcs_drvmodeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_bcs_2_307_Bcs_vehspdvdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_bcs_2_307_Bcs_vehspdvdType>() {
  return ::apollo::canbus::Scu_bcs_2_307_Bcs_vehspdvdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_epb_310_Epb_intidxType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_epb_310_Epb_intidxType>() {
  return ::apollo::canbus::Scu_epb_310_Epb_intidxType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_epb_310_Epb_drvmodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_epb_310_Epb_drvmodeType>() {
  return ::apollo::canbus::Scu_epb_310_Epb_drvmodeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_epb_310_Epb_sysstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_epb_310_Epb_sysstType>() {
  return ::apollo::canbus::Scu_epb_310_Epb_sysstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_epb_310_Epb_faultstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_epb_310_Epb_faultstType>() {
  return ::apollo::canbus::Scu_epb_310_Epb_faultstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_vcu_1_312_Vcu_elcsysfaultType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_vcu_1_312_Vcu_elcsysfaultType>() {
  return ::apollo::canbus::Scu_vcu_1_312_Vcu_elcsysfaultType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_vcu_1_312_Vcu_brkpedstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_vcu_1_312_Vcu_brkpedstType>() {
  return ::apollo::canbus::Scu_vcu_1_312_Vcu_brkpedstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_vcu_1_312_Vcu_intidxType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_vcu_1_312_Vcu_intidxType>() {
  return ::apollo::canbus::Scu_vcu_1_312_Vcu_intidxType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_vcu_1_312_Vcu_gearintidxType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_vcu_1_312_Vcu_gearintidxType>() {
  return ::apollo::canbus::Scu_vcu_1_312_Vcu_gearintidxType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_vcu_1_312_Vcu_geardrvmodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_vcu_1_312_Vcu_geardrvmodeType>() {
  return ::apollo::canbus::Scu_vcu_1_312_Vcu_geardrvmodeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_vcu_1_312_Vcu_vehrdystType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_vcu_1_312_Vcu_vehrdystType>() {
  return ::apollo::canbus::Scu_vcu_1_312_Vcu_vehrdystType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_vcu_1_312_Vcu_faultstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_vcu_1_312_Vcu_faultstType>() {
  return ::apollo::canbus::Scu_vcu_1_312_Vcu_faultstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_vcu_1_312_Vcu_drvmodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_vcu_1_312_Vcu_drvmodeType>() {
  return ::apollo::canbus::Scu_vcu_1_312_Vcu_drvmodeType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_vcu_1_312_Vcu_gearpstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_vcu_1_312_Vcu_gearpstType>() {
  return ::apollo::canbus::Scu_vcu_1_312_Vcu_gearpstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_vcu_1_312_Vcu_gearfaultstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_vcu_1_312_Vcu_gearfaultstType>() {
  return ::apollo::canbus::Scu_vcu_1_312_Vcu_gearfaultstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_vcu_1_312_Vcu_gearactType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_vcu_1_312_Vcu_gearactType>() {
  return ::apollo::canbus::Scu_vcu_1_312_Vcu_gearactType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_eps_311_Eps_intidxType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_eps_311_Eps_intidxType>() {
  return ::apollo::canbus::Scu_eps_311_Eps_intidxType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_eps_311_Eps_faultstType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_eps_311_Eps_faultstType>() {
  return ::apollo::canbus::Scu_eps_311_Eps_faultstType_descriptor();
}
template <> struct is_proto_enum< ::apollo::canbus::Scu_eps_311_Eps_drvmodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::canbus::Scu_eps_311_Eps_drvmodeType>() {
  return ::apollo::canbus::Scu_eps_311_Eps_drvmodeType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fcanbus_2fproto_2fge3_2eproto
