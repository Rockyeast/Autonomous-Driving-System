// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/hmi_mode.proto

#ifndef PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto
#define PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto 

namespace protobuf_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[16];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto
namespace apollo {
namespace dreamview {
class ChannelMonitorConfig;
class ChannelMonitorConfigDefaultTypeInternal;
extern ChannelMonitorConfigDefaultTypeInternal _ChannelMonitorConfig_default_instance_;
class CyberModule;
class CyberModuleDefaultTypeInternal;
extern CyberModuleDefaultTypeInternal _CyberModule_default_instance_;
class HMIMode;
class HMIModeDefaultTypeInternal;
extern HMIModeDefaultTypeInternal _HMIMode_default_instance_;
class HMIMode_CyberModulesEntry_DoNotUse;
class HMIMode_CyberModulesEntry_DoNotUseDefaultTypeInternal;
extern HMIMode_CyberModulesEntry_DoNotUseDefaultTypeInternal _HMIMode_CyberModulesEntry_DoNotUse_default_instance_;
class HMIMode_ModulesEntry_DoNotUse;
class HMIMode_ModulesEntry_DoNotUseDefaultTypeInternal;
extern HMIMode_ModulesEntry_DoNotUseDefaultTypeInternal _HMIMode_ModulesEntry_DoNotUse_default_instance_;
class HMIMode_MonitoredComponentsEntry_DoNotUse;
class HMIMode_MonitoredComponentsEntry_DoNotUseDefaultTypeInternal;
extern HMIMode_MonitoredComponentsEntry_DoNotUseDefaultTypeInternal _HMIMode_MonitoredComponentsEntry_DoNotUse_default_instance_;
class HMIMode_OtherComponentsEntry_DoNotUse;
class HMIMode_OtherComponentsEntry_DoNotUseDefaultTypeInternal;
extern HMIMode_OtherComponentsEntry_DoNotUseDefaultTypeInternal _HMIMode_OtherComponentsEntry_DoNotUse_default_instance_;
class Module;
class ModuleDefaultTypeInternal;
extern ModuleDefaultTypeInternal _Module_default_instance_;
class ModuleMonitorConfig;
class ModuleMonitorConfigDefaultTypeInternal;
extern ModuleMonitorConfigDefaultTypeInternal _ModuleMonitorConfig_default_instance_;
class MonitoredComponent;
class MonitoredComponentDefaultTypeInternal;
extern MonitoredComponentDefaultTypeInternal _MonitoredComponent_default_instance_;
class ProcessMonitorConfig;
class ProcessMonitorConfigDefaultTypeInternal;
extern ProcessMonitorConfigDefaultTypeInternal _ProcessMonitorConfig_default_instance_;
class ResourceMonitorConfig;
class ResourceMonitorConfigDefaultTypeInternal;
extern ResourceMonitorConfigDefaultTypeInternal _ResourceMonitorConfig_default_instance_;
class ResourceMonitorConfig_CPUUsage;
class ResourceMonitorConfig_CPUUsageDefaultTypeInternal;
extern ResourceMonitorConfig_CPUUsageDefaultTypeInternal _ResourceMonitorConfig_CPUUsage_default_instance_;
class ResourceMonitorConfig_DiskLoad;
class ResourceMonitorConfig_DiskLoadDefaultTypeInternal;
extern ResourceMonitorConfig_DiskLoadDefaultTypeInternal _ResourceMonitorConfig_DiskLoad_default_instance_;
class ResourceMonitorConfig_DiskSpace;
class ResourceMonitorConfig_DiskSpaceDefaultTypeInternal;
extern ResourceMonitorConfig_DiskSpaceDefaultTypeInternal _ResourceMonitorConfig_DiskSpace_default_instance_;
class ResourceMonitorConfig_MemoryUsage;
class ResourceMonitorConfig_MemoryUsageDefaultTypeInternal;
extern ResourceMonitorConfig_MemoryUsageDefaultTypeInternal _ResourceMonitorConfig_MemoryUsage_default_instance_;
}  // namespace dreamview
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::dreamview::ChannelMonitorConfig* Arena::CreateMaybeMessage<::apollo::dreamview::ChannelMonitorConfig>(Arena*);
template<> ::apollo::dreamview::CyberModule* Arena::CreateMaybeMessage<::apollo::dreamview::CyberModule>(Arena*);
template<> ::apollo::dreamview::HMIMode* Arena::CreateMaybeMessage<::apollo::dreamview::HMIMode>(Arena*);
template<> ::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIMode_CyberModulesEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIMode_ModulesEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIMode_MonitoredComponentsEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::HMIMode_OtherComponentsEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIMode_OtherComponentsEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::Module* Arena::CreateMaybeMessage<::apollo::dreamview::Module>(Arena*);
template<> ::apollo::dreamview::ModuleMonitorConfig* Arena::CreateMaybeMessage<::apollo::dreamview::ModuleMonitorConfig>(Arena*);
template<> ::apollo::dreamview::MonitoredComponent* Arena::CreateMaybeMessage<::apollo::dreamview::MonitoredComponent>(Arena*);
template<> ::apollo::dreamview::ProcessMonitorConfig* Arena::CreateMaybeMessage<::apollo::dreamview::ProcessMonitorConfig>(Arena*);
template<> ::apollo::dreamview::ResourceMonitorConfig* Arena::CreateMaybeMessage<::apollo::dreamview::ResourceMonitorConfig>(Arena*);
template<> ::apollo::dreamview::ResourceMonitorConfig_CPUUsage* Arena::CreateMaybeMessage<::apollo::dreamview::ResourceMonitorConfig_CPUUsage>(Arena*);
template<> ::apollo::dreamview::ResourceMonitorConfig_DiskLoad* Arena::CreateMaybeMessage<::apollo::dreamview::ResourceMonitorConfig_DiskLoad>(Arena*);
template<> ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* Arena::CreateMaybeMessage<::apollo::dreamview::ResourceMonitorConfig_DiskSpace>(Arena*);
template<> ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage* Arena::CreateMaybeMessage<::apollo::dreamview::ResourceMonitorConfig_MemoryUsage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace dreamview {

// ===================================================================

class ProcessMonitorConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ProcessMonitorConfig) */ {
 public:
  ProcessMonitorConfig();
  virtual ~ProcessMonitorConfig();

  ProcessMonitorConfig(const ProcessMonitorConfig& from);

  inline ProcessMonitorConfig& operator=(const ProcessMonitorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcessMonitorConfig(ProcessMonitorConfig&& from) noexcept
    : ProcessMonitorConfig() {
    *this = ::std::move(from);
  }

  inline ProcessMonitorConfig& operator=(ProcessMonitorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessMonitorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessMonitorConfig* internal_default_instance() {
    return reinterpret_cast<const ProcessMonitorConfig*>(
               &_ProcessMonitorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ProcessMonitorConfig* other);
  friend void swap(ProcessMonitorConfig& a, ProcessMonitorConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcessMonitorConfig* New() const final {
    return CreateMaybeMessage<ProcessMonitorConfig>(NULL);
  }

  ProcessMonitorConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcessMonitorConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcessMonitorConfig& from);
  void MergeFrom(const ProcessMonitorConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessMonitorConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string command_keywords = 1;
  int command_keywords_size() const;
  void clear_command_keywords();
  static const int kCommandKeywordsFieldNumber = 1;
  const ::std::string& command_keywords(int index) const;
  ::std::string* mutable_command_keywords(int index);
  void set_command_keywords(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_command_keywords(int index, ::std::string&& value);
  #endif
  void set_command_keywords(int index, const char* value);
  void set_command_keywords(int index, const char* value, size_t size);
  ::std::string* add_command_keywords();
  void add_command_keywords(const ::std::string& value);
  #if LANG_CXX11
  void add_command_keywords(::std::string&& value);
  #endif
  void add_command_keywords(const char* value);
  void add_command_keywords(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& command_keywords() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_command_keywords();

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ProcessMonitorConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> command_keywords_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModuleMonitorConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ModuleMonitorConfig) */ {
 public:
  ModuleMonitorConfig();
  virtual ~ModuleMonitorConfig();

  ModuleMonitorConfig(const ModuleMonitorConfig& from);

  inline ModuleMonitorConfig& operator=(const ModuleMonitorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModuleMonitorConfig(ModuleMonitorConfig&& from) noexcept
    : ModuleMonitorConfig() {
    *this = ::std::move(from);
  }

  inline ModuleMonitorConfig& operator=(ModuleMonitorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModuleMonitorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModuleMonitorConfig* internal_default_instance() {
    return reinterpret_cast<const ModuleMonitorConfig*>(
               &_ModuleMonitorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ModuleMonitorConfig* other);
  friend void swap(ModuleMonitorConfig& a, ModuleMonitorConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModuleMonitorConfig* New() const final {
    return CreateMaybeMessage<ModuleMonitorConfig>(NULL);
  }

  ModuleMonitorConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ModuleMonitorConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ModuleMonitorConfig& from);
  void MergeFrom(const ModuleMonitorConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleMonitorConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string node_name = 1;
  int node_name_size() const;
  void clear_node_name();
  static const int kNodeNameFieldNumber = 1;
  const ::std::string& node_name(int index) const;
  ::std::string* mutable_node_name(int index);
  void set_node_name(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_node_name(int index, ::std::string&& value);
  #endif
  void set_node_name(int index, const char* value);
  void set_node_name(int index, const char* value, size_t size);
  ::std::string* add_node_name();
  void add_node_name(const ::std::string& value);
  #if LANG_CXX11
  void add_node_name(::std::string&& value);
  #endif
  void add_node_name(const char* value);
  void add_node_name(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& node_name() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_node_name();

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ModuleMonitorConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> node_name_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChannelMonitorConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ChannelMonitorConfig) */ {
 public:
  ChannelMonitorConfig();
  virtual ~ChannelMonitorConfig();

  ChannelMonitorConfig(const ChannelMonitorConfig& from);

  inline ChannelMonitorConfig& operator=(const ChannelMonitorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelMonitorConfig(ChannelMonitorConfig&& from) noexcept
    : ChannelMonitorConfig() {
    *this = ::std::move(from);
  }

  inline ChannelMonitorConfig& operator=(ChannelMonitorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelMonitorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelMonitorConfig* internal_default_instance() {
    return reinterpret_cast<const ChannelMonitorConfig*>(
               &_ChannelMonitorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ChannelMonitorConfig* other);
  friend void swap(ChannelMonitorConfig& a, ChannelMonitorConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelMonitorConfig* New() const final {
    return CreateMaybeMessage<ChannelMonitorConfig>(NULL);
  }

  ChannelMonitorConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChannelMonitorConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChannelMonitorConfig& from);
  void MergeFrom(const ChannelMonitorConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelMonitorConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string mandatory_fields = 3;
  int mandatory_fields_size() const;
  void clear_mandatory_fields();
  static const int kMandatoryFieldsFieldNumber = 3;
  const ::std::string& mandatory_fields(int index) const;
  ::std::string* mutable_mandatory_fields(int index);
  void set_mandatory_fields(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_mandatory_fields(int index, ::std::string&& value);
  #endif
  void set_mandatory_fields(int index, const char* value);
  void set_mandatory_fields(int index, const char* value, size_t size);
  ::std::string* add_mandatory_fields();
  void add_mandatory_fields(const ::std::string& value);
  #if LANG_CXX11
  void add_mandatory_fields(::std::string&& value);
  #endif
  void add_mandatory_fields(const char* value);
  void add_mandatory_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& mandatory_fields() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mandatory_fields();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional double min_frequency_allowed = 4 [default = 0];
  bool has_min_frequency_allowed() const;
  void clear_min_frequency_allowed();
  static const int kMinFrequencyAllowedFieldNumber = 4;
  double min_frequency_allowed() const;
  void set_min_frequency_allowed(double value);

  // optional double delay_fatal = 2 [default = 3];
  bool has_delay_fatal() const;
  void clear_delay_fatal();
  static const int kDelayFatalFieldNumber = 2;
  double delay_fatal() const;
  void set_delay_fatal(double value);

  // optional double max_frequency_allowed = 5 [default = 1000];
  bool has_max_frequency_allowed() const;
  void clear_max_frequency_allowed();
  static const int kMaxFrequencyAllowedFieldNumber = 5;
  double max_frequency_allowed() const;
  void set_max_frequency_allowed(double value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ChannelMonitorConfig)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_delay_fatal();
  void clear_has_delay_fatal();
  void set_has_min_frequency_allowed();
  void clear_has_min_frequency_allowed();
  void set_has_max_frequency_allowed();
  void clear_has_max_frequency_allowed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mandatory_fields_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double min_frequency_allowed_;
  double delay_fatal_;
  double max_frequency_allowed_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResourceMonitorConfig_DiskSpace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ResourceMonitorConfig.DiskSpace) */ {
 public:
  ResourceMonitorConfig_DiskSpace();
  virtual ~ResourceMonitorConfig_DiskSpace();

  ResourceMonitorConfig_DiskSpace(const ResourceMonitorConfig_DiskSpace& from);

  inline ResourceMonitorConfig_DiskSpace& operator=(const ResourceMonitorConfig_DiskSpace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResourceMonitorConfig_DiskSpace(ResourceMonitorConfig_DiskSpace&& from) noexcept
    : ResourceMonitorConfig_DiskSpace() {
    *this = ::std::move(from);
  }

  inline ResourceMonitorConfig_DiskSpace& operator=(ResourceMonitorConfig_DiskSpace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourceMonitorConfig_DiskSpace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceMonitorConfig_DiskSpace* internal_default_instance() {
    return reinterpret_cast<const ResourceMonitorConfig_DiskSpace*>(
               &_ResourceMonitorConfig_DiskSpace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ResourceMonitorConfig_DiskSpace* other);
  friend void swap(ResourceMonitorConfig_DiskSpace& a, ResourceMonitorConfig_DiskSpace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResourceMonitorConfig_DiskSpace* New() const final {
    return CreateMaybeMessage<ResourceMonitorConfig_DiskSpace>(NULL);
  }

  ResourceMonitorConfig_DiskSpace* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResourceMonitorConfig_DiskSpace>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResourceMonitorConfig_DiskSpace& from);
  void MergeFrom(const ResourceMonitorConfig_DiskSpace& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceMonitorConfig_DiskSpace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional int32 insufficient_space_warning = 2;
  bool has_insufficient_space_warning() const;
  void clear_insufficient_space_warning();
  static const int kInsufficientSpaceWarningFieldNumber = 2;
  ::google::protobuf::int32 insufficient_space_warning() const;
  void set_insufficient_space_warning(::google::protobuf::int32 value);

  // optional int32 insufficient_space_error = 3;
  bool has_insufficient_space_error() const;
  void clear_insufficient_space_error();
  static const int kInsufficientSpaceErrorFieldNumber = 3;
  ::google::protobuf::int32 insufficient_space_error() const;
  void set_insufficient_space_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ResourceMonitorConfig.DiskSpace)
 private:
  void set_has_path();
  void clear_has_path();
  void set_has_insufficient_space_warning();
  void clear_has_insufficient_space_warning();
  void set_has_insufficient_space_error();
  void clear_has_insufficient_space_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::int32 insufficient_space_warning_;
  ::google::protobuf::int32 insufficient_space_error_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResourceMonitorConfig_CPUUsage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ResourceMonitorConfig.CPUUsage) */ {
 public:
  ResourceMonitorConfig_CPUUsage();
  virtual ~ResourceMonitorConfig_CPUUsage();

  ResourceMonitorConfig_CPUUsage(const ResourceMonitorConfig_CPUUsage& from);

  inline ResourceMonitorConfig_CPUUsage& operator=(const ResourceMonitorConfig_CPUUsage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResourceMonitorConfig_CPUUsage(ResourceMonitorConfig_CPUUsage&& from) noexcept
    : ResourceMonitorConfig_CPUUsage() {
    *this = ::std::move(from);
  }

  inline ResourceMonitorConfig_CPUUsage& operator=(ResourceMonitorConfig_CPUUsage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourceMonitorConfig_CPUUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceMonitorConfig_CPUUsage* internal_default_instance() {
    return reinterpret_cast<const ResourceMonitorConfig_CPUUsage*>(
               &_ResourceMonitorConfig_CPUUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ResourceMonitorConfig_CPUUsage* other);
  friend void swap(ResourceMonitorConfig_CPUUsage& a, ResourceMonitorConfig_CPUUsage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResourceMonitorConfig_CPUUsage* New() const final {
    return CreateMaybeMessage<ResourceMonitorConfig_CPUUsage>(NULL);
  }

  ResourceMonitorConfig_CPUUsage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResourceMonitorConfig_CPUUsage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResourceMonitorConfig_CPUUsage& from);
  void MergeFrom(const ResourceMonitorConfig_CPUUsage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceMonitorConfig_CPUUsage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string process_dag_path = 3;
  bool has_process_dag_path() const;
  void clear_process_dag_path();
  static const int kProcessDagPathFieldNumber = 3;
  const ::std::string& process_dag_path() const;
  void set_process_dag_path(const ::std::string& value);
  #if LANG_CXX11
  void set_process_dag_path(::std::string&& value);
  #endif
  void set_process_dag_path(const char* value);
  void set_process_dag_path(const char* value, size_t size);
  ::std::string* mutable_process_dag_path();
  ::std::string* release_process_dag_path();
  void set_allocated_process_dag_path(::std::string* process_dag_path);

  // optional float high_cpu_usage_warning = 1;
  bool has_high_cpu_usage_warning() const;
  void clear_high_cpu_usage_warning();
  static const int kHighCpuUsageWarningFieldNumber = 1;
  float high_cpu_usage_warning() const;
  void set_high_cpu_usage_warning(float value);

  // optional float high_cpu_usage_error = 2;
  bool has_high_cpu_usage_error() const;
  void clear_high_cpu_usage_error();
  static const int kHighCpuUsageErrorFieldNumber = 2;
  float high_cpu_usage_error() const;
  void set_high_cpu_usage_error(float value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ResourceMonitorConfig.CPUUsage)
 private:
  void set_has_high_cpu_usage_warning();
  void clear_has_high_cpu_usage_warning();
  void set_has_high_cpu_usage_error();
  void clear_has_high_cpu_usage_error();
  void set_has_process_dag_path();
  void clear_has_process_dag_path();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr process_dag_path_;
  float high_cpu_usage_warning_;
  float high_cpu_usage_error_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResourceMonitorConfig_MemoryUsage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ResourceMonitorConfig.MemoryUsage) */ {
 public:
  ResourceMonitorConfig_MemoryUsage();
  virtual ~ResourceMonitorConfig_MemoryUsage();

  ResourceMonitorConfig_MemoryUsage(const ResourceMonitorConfig_MemoryUsage& from);

  inline ResourceMonitorConfig_MemoryUsage& operator=(const ResourceMonitorConfig_MemoryUsage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResourceMonitorConfig_MemoryUsage(ResourceMonitorConfig_MemoryUsage&& from) noexcept
    : ResourceMonitorConfig_MemoryUsage() {
    *this = ::std::move(from);
  }

  inline ResourceMonitorConfig_MemoryUsage& operator=(ResourceMonitorConfig_MemoryUsage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourceMonitorConfig_MemoryUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceMonitorConfig_MemoryUsage* internal_default_instance() {
    return reinterpret_cast<const ResourceMonitorConfig_MemoryUsage*>(
               &_ResourceMonitorConfig_MemoryUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ResourceMonitorConfig_MemoryUsage* other);
  friend void swap(ResourceMonitorConfig_MemoryUsage& a, ResourceMonitorConfig_MemoryUsage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResourceMonitorConfig_MemoryUsage* New() const final {
    return CreateMaybeMessage<ResourceMonitorConfig_MemoryUsage>(NULL);
  }

  ResourceMonitorConfig_MemoryUsage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResourceMonitorConfig_MemoryUsage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResourceMonitorConfig_MemoryUsage& from);
  void MergeFrom(const ResourceMonitorConfig_MemoryUsage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceMonitorConfig_MemoryUsage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string process_dag_path = 3;
  bool has_process_dag_path() const;
  void clear_process_dag_path();
  static const int kProcessDagPathFieldNumber = 3;
  const ::std::string& process_dag_path() const;
  void set_process_dag_path(const ::std::string& value);
  #if LANG_CXX11
  void set_process_dag_path(::std::string&& value);
  #endif
  void set_process_dag_path(const char* value);
  void set_process_dag_path(const char* value, size_t size);
  ::std::string* mutable_process_dag_path();
  ::std::string* release_process_dag_path();
  void set_allocated_process_dag_path(::std::string* process_dag_path);

  // optional int32 high_memory_usage_warning = 1;
  bool has_high_memory_usage_warning() const;
  void clear_high_memory_usage_warning();
  static const int kHighMemoryUsageWarningFieldNumber = 1;
  ::google::protobuf::int32 high_memory_usage_warning() const;
  void set_high_memory_usage_warning(::google::protobuf::int32 value);

  // optional int32 high_memory_usage_error = 2;
  bool has_high_memory_usage_error() const;
  void clear_high_memory_usage_error();
  static const int kHighMemoryUsageErrorFieldNumber = 2;
  ::google::protobuf::int32 high_memory_usage_error() const;
  void set_high_memory_usage_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ResourceMonitorConfig.MemoryUsage)
 private:
  void set_has_high_memory_usage_warning();
  void clear_has_high_memory_usage_warning();
  void set_has_high_memory_usage_error();
  void clear_has_high_memory_usage_error();
  void set_has_process_dag_path();
  void clear_has_process_dag_path();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr process_dag_path_;
  ::google::protobuf::int32 high_memory_usage_warning_;
  ::google::protobuf::int32 high_memory_usage_error_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResourceMonitorConfig_DiskLoad : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ResourceMonitorConfig.DiskLoad) */ {
 public:
  ResourceMonitorConfig_DiskLoad();
  virtual ~ResourceMonitorConfig_DiskLoad();

  ResourceMonitorConfig_DiskLoad(const ResourceMonitorConfig_DiskLoad& from);

  inline ResourceMonitorConfig_DiskLoad& operator=(const ResourceMonitorConfig_DiskLoad& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResourceMonitorConfig_DiskLoad(ResourceMonitorConfig_DiskLoad&& from) noexcept
    : ResourceMonitorConfig_DiskLoad() {
    *this = ::std::move(from);
  }

  inline ResourceMonitorConfig_DiskLoad& operator=(ResourceMonitorConfig_DiskLoad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourceMonitorConfig_DiskLoad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceMonitorConfig_DiskLoad* internal_default_instance() {
    return reinterpret_cast<const ResourceMonitorConfig_DiskLoad*>(
               &_ResourceMonitorConfig_DiskLoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ResourceMonitorConfig_DiskLoad* other);
  friend void swap(ResourceMonitorConfig_DiskLoad& a, ResourceMonitorConfig_DiskLoad& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResourceMonitorConfig_DiskLoad* New() const final {
    return CreateMaybeMessage<ResourceMonitorConfig_DiskLoad>(NULL);
  }

  ResourceMonitorConfig_DiskLoad* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResourceMonitorConfig_DiskLoad>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResourceMonitorConfig_DiskLoad& from);
  void MergeFrom(const ResourceMonitorConfig_DiskLoad& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceMonitorConfig_DiskLoad* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string device_name = 3;
  bool has_device_name() const;
  void clear_device_name();
  static const int kDeviceNameFieldNumber = 3;
  const ::std::string& device_name() const;
  void set_device_name(const ::std::string& value);
  #if LANG_CXX11
  void set_device_name(::std::string&& value);
  #endif
  void set_device_name(const char* value);
  void set_device_name(const char* value, size_t size);
  ::std::string* mutable_device_name();
  ::std::string* release_device_name();
  void set_allocated_device_name(::std::string* device_name);

  // optional int32 high_disk_load_warning = 1;
  bool has_high_disk_load_warning() const;
  void clear_high_disk_load_warning();
  static const int kHighDiskLoadWarningFieldNumber = 1;
  ::google::protobuf::int32 high_disk_load_warning() const;
  void set_high_disk_load_warning(::google::protobuf::int32 value);

  // optional int32 high_disk_load_error = 2;
  bool has_high_disk_load_error() const;
  void clear_high_disk_load_error();
  static const int kHighDiskLoadErrorFieldNumber = 2;
  ::google::protobuf::int32 high_disk_load_error() const;
  void set_high_disk_load_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ResourceMonitorConfig.DiskLoad)
 private:
  void set_has_high_disk_load_warning();
  void clear_has_high_disk_load_warning();
  void set_has_high_disk_load_error();
  void clear_has_high_disk_load_error();
  void set_has_device_name();
  void clear_has_device_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr device_name_;
  ::google::protobuf::int32 high_disk_load_warning_;
  ::google::protobuf::int32 high_disk_load_error_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResourceMonitorConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.ResourceMonitorConfig) */ {
 public:
  ResourceMonitorConfig();
  virtual ~ResourceMonitorConfig();

  ResourceMonitorConfig(const ResourceMonitorConfig& from);

  inline ResourceMonitorConfig& operator=(const ResourceMonitorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResourceMonitorConfig(ResourceMonitorConfig&& from) noexcept
    : ResourceMonitorConfig() {
    *this = ::std::move(from);
  }

  inline ResourceMonitorConfig& operator=(ResourceMonitorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourceMonitorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceMonitorConfig* internal_default_instance() {
    return reinterpret_cast<const ResourceMonitorConfig*>(
               &_ResourceMonitorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ResourceMonitorConfig* other);
  friend void swap(ResourceMonitorConfig& a, ResourceMonitorConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResourceMonitorConfig* New() const final {
    return CreateMaybeMessage<ResourceMonitorConfig>(NULL);
  }

  ResourceMonitorConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResourceMonitorConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResourceMonitorConfig& from);
  void MergeFrom(const ResourceMonitorConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceMonitorConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ResourceMonitorConfig_DiskSpace DiskSpace;
  typedef ResourceMonitorConfig_CPUUsage CPUUsage;
  typedef ResourceMonitorConfig_MemoryUsage MemoryUsage;
  typedef ResourceMonitorConfig_DiskLoad DiskLoad;

  // accessors -------------------------------------------------------

  // repeated .apollo.dreamview.ResourceMonitorConfig.DiskSpace disk_spaces = 1;
  int disk_spaces_size() const;
  void clear_disk_spaces();
  static const int kDiskSpacesFieldNumber = 1;
  ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* mutable_disk_spaces(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskSpace >*
      mutable_disk_spaces();
  const ::apollo::dreamview::ResourceMonitorConfig_DiskSpace& disk_spaces(int index) const;
  ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* add_disk_spaces();
  const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskSpace >&
      disk_spaces() const;

  // repeated .apollo.dreamview.ResourceMonitorConfig.CPUUsage cpu_usages = 2;
  int cpu_usages_size() const;
  void clear_cpu_usages();
  static const int kCpuUsagesFieldNumber = 2;
  ::apollo::dreamview::ResourceMonitorConfig_CPUUsage* mutable_cpu_usages(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_CPUUsage >*
      mutable_cpu_usages();
  const ::apollo::dreamview::ResourceMonitorConfig_CPUUsage& cpu_usages(int index) const;
  ::apollo::dreamview::ResourceMonitorConfig_CPUUsage* add_cpu_usages();
  const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_CPUUsage >&
      cpu_usages() const;

  // repeated .apollo.dreamview.ResourceMonitorConfig.MemoryUsage memory_usages = 3;
  int memory_usages_size() const;
  void clear_memory_usages();
  static const int kMemoryUsagesFieldNumber = 3;
  ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage* mutable_memory_usages(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage >*
      mutable_memory_usages();
  const ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage& memory_usages(int index) const;
  ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage* add_memory_usages();
  const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage >&
      memory_usages() const;

  // repeated .apollo.dreamview.ResourceMonitorConfig.DiskLoad disk_load_usages = 4;
  int disk_load_usages_size() const;
  void clear_disk_load_usages();
  static const int kDiskLoadUsagesFieldNumber = 4;
  ::apollo::dreamview::ResourceMonitorConfig_DiskLoad* mutable_disk_load_usages(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskLoad >*
      mutable_disk_load_usages();
  const ::apollo::dreamview::ResourceMonitorConfig_DiskLoad& disk_load_usages(int index) const;
  ::apollo::dreamview::ResourceMonitorConfig_DiskLoad* add_disk_load_usages();
  const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskLoad >&
      disk_load_usages() const;

  // @@protoc_insertion_point(class_scope:apollo.dreamview.ResourceMonitorConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskSpace > disk_spaces_;
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_CPUUsage > cpu_usages_;
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage > memory_usages_;
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskLoad > disk_load_usages_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MonitoredComponent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.MonitoredComponent) */ {
 public:
  MonitoredComponent();
  virtual ~MonitoredComponent();

  MonitoredComponent(const MonitoredComponent& from);

  inline MonitoredComponent& operator=(const MonitoredComponent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MonitoredComponent(MonitoredComponent&& from) noexcept
    : MonitoredComponent() {
    *this = ::std::move(from);
  }

  inline MonitoredComponent& operator=(MonitoredComponent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonitoredComponent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonitoredComponent* internal_default_instance() {
    return reinterpret_cast<const MonitoredComponent*>(
               &_MonitoredComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(MonitoredComponent* other);
  friend void swap(MonitoredComponent& a, MonitoredComponent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MonitoredComponent* New() const final {
    return CreateMaybeMessage<MonitoredComponent>(NULL);
  }

  MonitoredComponent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MonitoredComponent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MonitoredComponent& from);
  void MergeFrom(const MonitoredComponent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonitoredComponent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.dreamview.ProcessMonitorConfig process = 1;
  bool has_process() const;
  void clear_process();
  static const int kProcessFieldNumber = 1;
  private:
  const ::apollo::dreamview::ProcessMonitorConfig& _internal_process() const;
  public:
  const ::apollo::dreamview::ProcessMonitorConfig& process() const;
  ::apollo::dreamview::ProcessMonitorConfig* release_process();
  ::apollo::dreamview::ProcessMonitorConfig* mutable_process();
  void set_allocated_process(::apollo::dreamview::ProcessMonitorConfig* process);

  // optional .apollo.dreamview.ChannelMonitorConfig channel = 2;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  private:
  const ::apollo::dreamview::ChannelMonitorConfig& _internal_channel() const;
  public:
  const ::apollo::dreamview::ChannelMonitorConfig& channel() const;
  ::apollo::dreamview::ChannelMonitorConfig* release_channel();
  ::apollo::dreamview::ChannelMonitorConfig* mutable_channel();
  void set_allocated_channel(::apollo::dreamview::ChannelMonitorConfig* channel);

  // optional .apollo.dreamview.ResourceMonitorConfig resource = 3;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 3;
  private:
  const ::apollo::dreamview::ResourceMonitorConfig& _internal_resource() const;
  public:
  const ::apollo::dreamview::ResourceMonitorConfig& resource() const;
  ::apollo::dreamview::ResourceMonitorConfig* release_resource();
  ::apollo::dreamview::ResourceMonitorConfig* mutable_resource();
  void set_allocated_resource(::apollo::dreamview::ResourceMonitorConfig* resource);

  // optional .apollo.dreamview.ModuleMonitorConfig module = 5;
  bool has_module() const;
  void clear_module();
  static const int kModuleFieldNumber = 5;
  private:
  const ::apollo::dreamview::ModuleMonitorConfig& _internal_module() const;
  public:
  const ::apollo::dreamview::ModuleMonitorConfig& module() const;
  ::apollo::dreamview::ModuleMonitorConfig* release_module();
  ::apollo::dreamview::ModuleMonitorConfig* mutable_module();
  void set_allocated_module(::apollo::dreamview::ModuleMonitorConfig* module);

  // optional bool required_for_safety = 4 [default = true];
  bool has_required_for_safety() const;
  void clear_required_for_safety();
  static const int kRequiredForSafetyFieldNumber = 4;
  bool required_for_safety() const;
  void set_required_for_safety(bool value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.MonitoredComponent)
 private:
  void set_has_process();
  void clear_has_process();
  void set_has_channel();
  void clear_has_channel();
  void set_has_resource();
  void clear_has_resource();
  void set_has_required_for_safety();
  void clear_has_required_for_safety();
  void set_has_module();
  void clear_has_module();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::dreamview::ProcessMonitorConfig* process_;
  ::apollo::dreamview::ChannelMonitorConfig* channel_;
  ::apollo::dreamview::ResourceMonitorConfig* resource_;
  ::apollo::dreamview::ModuleMonitorConfig* module_;
  bool required_for_safety_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Module : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Module) */ {
 public:
  Module();
  virtual ~Module();

  Module(const Module& from);

  inline Module& operator=(const Module& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Module(Module&& from) noexcept
    : Module() {
    *this = ::std::move(from);
  }

  inline Module& operator=(Module&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Module& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Module* internal_default_instance() {
    return reinterpret_cast<const Module*>(
               &_Module_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Module* other);
  friend void swap(Module& a, Module& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Module* New() const final {
    return CreateMaybeMessage<Module>(NULL);
  }

  Module* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Module>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Module& from);
  void MergeFrom(const Module& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Module* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string start_command = 1;
  bool has_start_command() const;
  void clear_start_command();
  static const int kStartCommandFieldNumber = 1;
  const ::std::string& start_command() const;
  void set_start_command(const ::std::string& value);
  #if LANG_CXX11
  void set_start_command(::std::string&& value);
  #endif
  void set_start_command(const char* value);
  void set_start_command(const char* value, size_t size);
  ::std::string* mutable_start_command();
  ::std::string* release_start_command();
  void set_allocated_start_command(::std::string* start_command);

  // optional string stop_command = 2;
  bool has_stop_command() const;
  void clear_stop_command();
  static const int kStopCommandFieldNumber = 2;
  const ::std::string& stop_command() const;
  void set_stop_command(const ::std::string& value);
  #if LANG_CXX11
  void set_stop_command(::std::string&& value);
  #endif
  void set_stop_command(const char* value);
  void set_stop_command(const char* value, size_t size);
  ::std::string* mutable_stop_command();
  ::std::string* release_stop_command();
  void set_allocated_stop_command(::std::string* stop_command);

  // optional .apollo.dreamview.ProcessMonitorConfig process_monitor_config = 3;
  bool has_process_monitor_config() const;
  void clear_process_monitor_config();
  static const int kProcessMonitorConfigFieldNumber = 3;
  private:
  const ::apollo::dreamview::ProcessMonitorConfig& _internal_process_monitor_config() const;
  public:
  const ::apollo::dreamview::ProcessMonitorConfig& process_monitor_config() const;
  ::apollo::dreamview::ProcessMonitorConfig* release_process_monitor_config();
  ::apollo::dreamview::ProcessMonitorConfig* mutable_process_monitor_config();
  void set_allocated_process_monitor_config(::apollo::dreamview::ProcessMonitorConfig* process_monitor_config);

  // optional bool required_for_safety = 4 [default = true];
  bool has_required_for_safety() const;
  void clear_required_for_safety();
  static const int kRequiredForSafetyFieldNumber = 4;
  bool required_for_safety() const;
  void set_required_for_safety(bool value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Module)
 private:
  void set_has_start_command();
  void clear_has_start_command();
  void set_has_stop_command();
  void clear_has_stop_command();
  void set_has_process_monitor_config();
  void clear_has_process_monitor_config();
  void set_has_required_for_safety();
  void clear_has_required_for_safety();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr start_command_;
  ::google::protobuf::internal::ArenaStringPtr stop_command_;
  ::apollo::dreamview::ProcessMonitorConfig* process_monitor_config_;
  bool required_for_safety_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CyberModule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.CyberModule) */ {
 public:
  CyberModule();
  virtual ~CyberModule();

  CyberModule(const CyberModule& from);

  inline CyberModule& operator=(const CyberModule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CyberModule(CyberModule&& from) noexcept
    : CyberModule() {
    *this = ::std::move(from);
  }

  inline CyberModule& operator=(CyberModule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CyberModule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CyberModule* internal_default_instance() {
    return reinterpret_cast<const CyberModule*>(
               &_CyberModule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CyberModule* other);
  friend void swap(CyberModule& a, CyberModule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CyberModule* New() const final {
    return CreateMaybeMessage<CyberModule>(NULL);
  }

  CyberModule* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CyberModule>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CyberModule& from);
  void MergeFrom(const CyberModule& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CyberModule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string dag_files = 1;
  int dag_files_size() const;
  void clear_dag_files();
  static const int kDagFilesFieldNumber = 1;
  const ::std::string& dag_files(int index) const;
  ::std::string* mutable_dag_files(int index);
  void set_dag_files(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_dag_files(int index, ::std::string&& value);
  #endif
  void set_dag_files(int index, const char* value);
  void set_dag_files(int index, const char* value, size_t size);
  ::std::string* add_dag_files();
  void add_dag_files(const ::std::string& value);
  #if LANG_CXX11
  void add_dag_files(::std::string&& value);
  #endif
  void add_dag_files(const char* value);
  void add_dag_files(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& dag_files() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dag_files();

  // optional string process_group = 3;
  bool has_process_group() const;
  void clear_process_group();
  static const int kProcessGroupFieldNumber = 3;
  const ::std::string& process_group() const;
  void set_process_group(const ::std::string& value);
  #if LANG_CXX11
  void set_process_group(::std::string&& value);
  #endif
  void set_process_group(const char* value);
  void set_process_group(const char* value, size_t size);
  ::std::string* mutable_process_group();
  ::std::string* release_process_group();
  void set_allocated_process_group(::std::string* process_group);

  // optional bool required_for_safety = 2 [default = true];
  bool has_required_for_safety() const;
  void clear_required_for_safety();
  static const int kRequiredForSafetyFieldNumber = 2;
  bool required_for_safety() const;
  void set_required_for_safety(bool value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.CyberModule)
 private:
  void set_has_required_for_safety();
  void clear_has_required_for_safety();
  void set_has_process_group();
  void clear_has_process_group();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dag_files_;
  ::google::protobuf::internal::ArenaStringPtr process_group_;
  bool required_for_safety_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HMIMode_CyberModulesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HMIMode_CyberModulesEntry_DoNotUse, 
    ::std::string, ::apollo::dreamview::CyberModule,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HMIMode_CyberModulesEntry_DoNotUse, 
    ::std::string, ::apollo::dreamview::CyberModule,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  HMIMode_CyberModulesEntry_DoNotUse();
  HMIMode_CyberModulesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HMIMode_CyberModulesEntry_DoNotUse& other);
  static const HMIMode_CyberModulesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIMode_CyberModulesEntry_DoNotUse*>(&_HMIMode_CyberModulesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HMIMode_ModulesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HMIMode_ModulesEntry_DoNotUse, 
    ::std::string, ::apollo::dreamview::Module,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HMIMode_ModulesEntry_DoNotUse, 
    ::std::string, ::apollo::dreamview::Module,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  HMIMode_ModulesEntry_DoNotUse();
  HMIMode_ModulesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HMIMode_ModulesEntry_DoNotUse& other);
  static const HMIMode_ModulesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIMode_ModulesEntry_DoNotUse*>(&_HMIMode_ModulesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HMIMode_MonitoredComponentsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HMIMode_MonitoredComponentsEntry_DoNotUse, 
    ::std::string, ::apollo::dreamview::MonitoredComponent,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HMIMode_MonitoredComponentsEntry_DoNotUse, 
    ::std::string, ::apollo::dreamview::MonitoredComponent,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  HMIMode_MonitoredComponentsEntry_DoNotUse();
  HMIMode_MonitoredComponentsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HMIMode_MonitoredComponentsEntry_DoNotUse& other);
  static const HMIMode_MonitoredComponentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIMode_MonitoredComponentsEntry_DoNotUse*>(&_HMIMode_MonitoredComponentsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HMIMode_OtherComponentsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HMIMode_OtherComponentsEntry_DoNotUse, 
    ::std::string, ::apollo::dreamview::ProcessMonitorConfig,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HMIMode_OtherComponentsEntry_DoNotUse, 
    ::std::string, ::apollo::dreamview::ProcessMonitorConfig,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  HMIMode_OtherComponentsEntry_DoNotUse();
  HMIMode_OtherComponentsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HMIMode_OtherComponentsEntry_DoNotUse& other);
  static const HMIMode_OtherComponentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIMode_OtherComponentsEntry_DoNotUse*>(&_HMIMode_OtherComponentsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HMIMode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.HMIMode) */ {
 public:
  HMIMode();
  virtual ~HMIMode();

  HMIMode(const HMIMode& from);

  inline HMIMode& operator=(const HMIMode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HMIMode(HMIMode&& from) noexcept
    : HMIMode() {
    *this = ::std::move(from);
  }

  inline HMIMode& operator=(HMIMode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HMIMode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HMIMode* internal_default_instance() {
    return reinterpret_cast<const HMIMode*>(
               &_HMIMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(HMIMode* other);
  friend void swap(HMIMode& a, HMIMode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HMIMode* New() const final {
    return CreateMaybeMessage<HMIMode>(NULL);
  }

  HMIMode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HMIMode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HMIMode& from);
  void MergeFrom(const HMIMode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HMIMode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .apollo.dreamview.CyberModule> cyber_modules = 1;
  int cyber_modules_size() const;
  void clear_cyber_modules();
  static const int kCyberModulesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::CyberModule >&
      cyber_modules() const;
  ::google::protobuf::Map< ::std::string, ::apollo::dreamview::CyberModule >*
      mutable_cyber_modules();

  // map<string, .apollo.dreamview.Module> modules = 2;
  int modules_size() const;
  void clear_modules();
  static const int kModulesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Module >&
      modules() const;
  ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Module >*
      mutable_modules();

  // map<string, .apollo.dreamview.MonitoredComponent> monitored_components = 3;
  int monitored_components_size() const;
  void clear_monitored_components();
  static const int kMonitoredComponentsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::MonitoredComponent >&
      monitored_components() const;
  ::google::protobuf::Map< ::std::string, ::apollo::dreamview::MonitoredComponent >*
      mutable_monitored_components();

  // map<string, .apollo.dreamview.ProcessMonitorConfig> other_components = 4;
  int other_components_size() const;
  void clear_other_components();
  static const int kOtherComponentsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::ProcessMonitorConfig >&
      other_components() const;
  ::google::protobuf::Map< ::std::string, ::apollo::dreamview::ProcessMonitorConfig >*
      mutable_other_components();

  // @@protoc_insertion_point(class_scope:apollo.dreamview.HMIMode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::MapField<
      HMIMode_CyberModulesEntry_DoNotUse,
      ::std::string, ::apollo::dreamview::CyberModule,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > cyber_modules_;
  ::google::protobuf::internal::MapField<
      HMIMode_ModulesEntry_DoNotUse,
      ::std::string, ::apollo::dreamview::Module,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > modules_;
  ::google::protobuf::internal::MapField<
      HMIMode_MonitoredComponentsEntry_DoNotUse,
      ::std::string, ::apollo::dreamview::MonitoredComponent,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > monitored_components_;
  ::google::protobuf::internal::MapField<
      HMIMode_OtherComponentsEntry_DoNotUse,
      ::std::string, ::apollo::dreamview::ProcessMonitorConfig,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > other_components_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessMonitorConfig

// repeated string command_keywords = 1;
inline int ProcessMonitorConfig::command_keywords_size() const {
  return command_keywords_.size();
}
inline void ProcessMonitorConfig::clear_command_keywords() {
  command_keywords_.Clear();
}
inline const ::std::string& ProcessMonitorConfig::command_keywords(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ProcessMonitorConfig.command_keywords)
  return command_keywords_.Get(index);
}
inline ::std::string* ProcessMonitorConfig::mutable_command_keywords(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ProcessMonitorConfig.command_keywords)
  return command_keywords_.Mutable(index);
}
inline void ProcessMonitorConfig::set_command_keywords(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.ProcessMonitorConfig.command_keywords)
  command_keywords_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ProcessMonitorConfig::set_command_keywords(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.ProcessMonitorConfig.command_keywords)
  command_keywords_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ProcessMonitorConfig::set_command_keywords(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  command_keywords_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.ProcessMonitorConfig.command_keywords)
}
inline void ProcessMonitorConfig::set_command_keywords(int index, const char* value, size_t size) {
  command_keywords_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.ProcessMonitorConfig.command_keywords)
}
inline ::std::string* ProcessMonitorConfig::add_command_keywords() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.ProcessMonitorConfig.command_keywords)
  return command_keywords_.Add();
}
inline void ProcessMonitorConfig::add_command_keywords(const ::std::string& value) {
  command_keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.ProcessMonitorConfig.command_keywords)
}
#if LANG_CXX11
inline void ProcessMonitorConfig::add_command_keywords(::std::string&& value) {
  command_keywords_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.ProcessMonitorConfig.command_keywords)
}
#endif
inline void ProcessMonitorConfig::add_command_keywords(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  command_keywords_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.ProcessMonitorConfig.command_keywords)
}
inline void ProcessMonitorConfig::add_command_keywords(const char* value, size_t size) {
  command_keywords_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.ProcessMonitorConfig.command_keywords)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessMonitorConfig::command_keywords() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.ProcessMonitorConfig.command_keywords)
  return command_keywords_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessMonitorConfig::mutable_command_keywords() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.ProcessMonitorConfig.command_keywords)
  return &command_keywords_;
}

// -------------------------------------------------------------------

// ModuleMonitorConfig

// repeated string node_name = 1;
inline int ModuleMonitorConfig::node_name_size() const {
  return node_name_.size();
}
inline void ModuleMonitorConfig::clear_node_name() {
  node_name_.Clear();
}
inline const ::std::string& ModuleMonitorConfig::node_name(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ModuleMonitorConfig.node_name)
  return node_name_.Get(index);
}
inline ::std::string* ModuleMonitorConfig::mutable_node_name(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ModuleMonitorConfig.node_name)
  return node_name_.Mutable(index);
}
inline void ModuleMonitorConfig::set_node_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.ModuleMonitorConfig.node_name)
  node_name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ModuleMonitorConfig::set_node_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.ModuleMonitorConfig.node_name)
  node_name_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ModuleMonitorConfig::set_node_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  node_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.ModuleMonitorConfig.node_name)
}
inline void ModuleMonitorConfig::set_node_name(int index, const char* value, size_t size) {
  node_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.ModuleMonitorConfig.node_name)
}
inline ::std::string* ModuleMonitorConfig::add_node_name() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.ModuleMonitorConfig.node_name)
  return node_name_.Add();
}
inline void ModuleMonitorConfig::add_node_name(const ::std::string& value) {
  node_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.ModuleMonitorConfig.node_name)
}
#if LANG_CXX11
inline void ModuleMonitorConfig::add_node_name(::std::string&& value) {
  node_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.ModuleMonitorConfig.node_name)
}
#endif
inline void ModuleMonitorConfig::add_node_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  node_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.ModuleMonitorConfig.node_name)
}
inline void ModuleMonitorConfig::add_node_name(const char* value, size_t size) {
  node_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.ModuleMonitorConfig.node_name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ModuleMonitorConfig::node_name() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.ModuleMonitorConfig.node_name)
  return node_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ModuleMonitorConfig::mutable_node_name() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.ModuleMonitorConfig.node_name)
  return &node_name_;
}

// -------------------------------------------------------------------

// ChannelMonitorConfig

// optional string name = 1;
inline bool ChannelMonitorConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChannelMonitorConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChannelMonitorConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChannelMonitorConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ChannelMonitorConfig::name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ChannelMonitorConfig.name)
  return name_.GetNoArena();
}
inline void ChannelMonitorConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelMonitorConfig.name)
}
#if LANG_CXX11
inline void ChannelMonitorConfig::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.ChannelMonitorConfig.name)
}
#endif
inline void ChannelMonitorConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.ChannelMonitorConfig.name)
}
inline void ChannelMonitorConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.ChannelMonitorConfig.name)
}
inline ::std::string* ChannelMonitorConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ChannelMonitorConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelMonitorConfig::release_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.ChannelMonitorConfig.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelMonitorConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.ChannelMonitorConfig.name)
}

// optional double delay_fatal = 2 [default = 3];
inline bool ChannelMonitorConfig::has_delay_fatal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChannelMonitorConfig::set_has_delay_fatal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChannelMonitorConfig::clear_has_delay_fatal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChannelMonitorConfig::clear_delay_fatal() {
  delay_fatal_ = 3;
  clear_has_delay_fatal();
}
inline double ChannelMonitorConfig::delay_fatal() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ChannelMonitorConfig.delay_fatal)
  return delay_fatal_;
}
inline void ChannelMonitorConfig::set_delay_fatal(double value) {
  set_has_delay_fatal();
  delay_fatal_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelMonitorConfig.delay_fatal)
}

// repeated string mandatory_fields = 3;
inline int ChannelMonitorConfig::mandatory_fields_size() const {
  return mandatory_fields_.size();
}
inline void ChannelMonitorConfig::clear_mandatory_fields() {
  mandatory_fields_.Clear();
}
inline const ::std::string& ChannelMonitorConfig::mandatory_fields(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
  return mandatory_fields_.Get(index);
}
inline ::std::string* ChannelMonitorConfig::mutable_mandatory_fields(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
  return mandatory_fields_.Mutable(index);
}
inline void ChannelMonitorConfig::set_mandatory_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
  mandatory_fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ChannelMonitorConfig::set_mandatory_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
  mandatory_fields_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ChannelMonitorConfig::set_mandatory_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mandatory_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
}
inline void ChannelMonitorConfig::set_mandatory_fields(int index, const char* value, size_t size) {
  mandatory_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
}
inline ::std::string* ChannelMonitorConfig::add_mandatory_fields() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
  return mandatory_fields_.Add();
}
inline void ChannelMonitorConfig::add_mandatory_fields(const ::std::string& value) {
  mandatory_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
}
#if LANG_CXX11
inline void ChannelMonitorConfig::add_mandatory_fields(::std::string&& value) {
  mandatory_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
}
#endif
inline void ChannelMonitorConfig::add_mandatory_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mandatory_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
}
inline void ChannelMonitorConfig::add_mandatory_fields(const char* value, size_t size) {
  mandatory_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChannelMonitorConfig::mandatory_fields() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
  return mandatory_fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChannelMonitorConfig::mutable_mandatory_fields() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.ChannelMonitorConfig.mandatory_fields)
  return &mandatory_fields_;
}

// optional double min_frequency_allowed = 4 [default = 0];
inline bool ChannelMonitorConfig::has_min_frequency_allowed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChannelMonitorConfig::set_has_min_frequency_allowed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChannelMonitorConfig::clear_has_min_frequency_allowed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChannelMonitorConfig::clear_min_frequency_allowed() {
  min_frequency_allowed_ = 0;
  clear_has_min_frequency_allowed();
}
inline double ChannelMonitorConfig::min_frequency_allowed() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ChannelMonitorConfig.min_frequency_allowed)
  return min_frequency_allowed_;
}
inline void ChannelMonitorConfig::set_min_frequency_allowed(double value) {
  set_has_min_frequency_allowed();
  min_frequency_allowed_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelMonitorConfig.min_frequency_allowed)
}

// optional double max_frequency_allowed = 5 [default = 1000];
inline bool ChannelMonitorConfig::has_max_frequency_allowed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChannelMonitorConfig::set_has_max_frequency_allowed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChannelMonitorConfig::clear_has_max_frequency_allowed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChannelMonitorConfig::clear_max_frequency_allowed() {
  max_frequency_allowed_ = 1000;
  clear_has_max_frequency_allowed();
}
inline double ChannelMonitorConfig::max_frequency_allowed() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ChannelMonitorConfig.max_frequency_allowed)
  return max_frequency_allowed_;
}
inline void ChannelMonitorConfig::set_max_frequency_allowed(double value) {
  set_has_max_frequency_allowed();
  max_frequency_allowed_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.ChannelMonitorConfig.max_frequency_allowed)
}

// -------------------------------------------------------------------

// ResourceMonitorConfig_DiskSpace

// optional string path = 1;
inline bool ResourceMonitorConfig_DiskSpace::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResourceMonitorConfig_DiskSpace::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResourceMonitorConfig_DiskSpace::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResourceMonitorConfig_DiskSpace::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
inline const ::std::string& ResourceMonitorConfig_DiskSpace::path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
  return path_.GetNoArena();
}
inline void ResourceMonitorConfig_DiskSpace::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
}
#if LANG_CXX11
inline void ResourceMonitorConfig_DiskSpace::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
}
#endif
inline void ResourceMonitorConfig_DiskSpace::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
}
inline void ResourceMonitorConfig_DiskSpace::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
}
inline ::std::string* ResourceMonitorConfig_DiskSpace::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceMonitorConfig_DiskSpace::release_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
  if (!has_path()) {
    return NULL;
  }
  clear_has_path();
  return path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceMonitorConfig_DiskSpace::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.ResourceMonitorConfig.DiskSpace.path)
}

// optional int32 insufficient_space_warning = 2;
inline bool ResourceMonitorConfig_DiskSpace::has_insufficient_space_warning() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResourceMonitorConfig_DiskSpace::set_has_insufficient_space_warning() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResourceMonitorConfig_DiskSpace::clear_has_insufficient_space_warning() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResourceMonitorConfig_DiskSpace::clear_insufficient_space_warning() {
  insufficient_space_warning_ = 0;
  clear_has_insufficient_space_warning();
}
inline ::google::protobuf::int32 ResourceMonitorConfig_DiskSpace::insufficient_space_warning() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.DiskSpace.insufficient_space_warning)
  return insufficient_space_warning_;
}
inline void ResourceMonitorConfig_DiskSpace::set_insufficient_space_warning(::google::protobuf::int32 value) {
  set_has_insufficient_space_warning();
  insufficient_space_warning_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.DiskSpace.insufficient_space_warning)
}

// optional int32 insufficient_space_error = 3;
inline bool ResourceMonitorConfig_DiskSpace::has_insufficient_space_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResourceMonitorConfig_DiskSpace::set_has_insufficient_space_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResourceMonitorConfig_DiskSpace::clear_has_insufficient_space_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResourceMonitorConfig_DiskSpace::clear_insufficient_space_error() {
  insufficient_space_error_ = 0;
  clear_has_insufficient_space_error();
}
inline ::google::protobuf::int32 ResourceMonitorConfig_DiskSpace::insufficient_space_error() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.DiskSpace.insufficient_space_error)
  return insufficient_space_error_;
}
inline void ResourceMonitorConfig_DiskSpace::set_insufficient_space_error(::google::protobuf::int32 value) {
  set_has_insufficient_space_error();
  insufficient_space_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.DiskSpace.insufficient_space_error)
}

// -------------------------------------------------------------------

// ResourceMonitorConfig_CPUUsage

// optional float high_cpu_usage_warning = 1;
inline bool ResourceMonitorConfig_CPUUsage::has_high_cpu_usage_warning() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResourceMonitorConfig_CPUUsage::set_has_high_cpu_usage_warning() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResourceMonitorConfig_CPUUsage::clear_has_high_cpu_usage_warning() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResourceMonitorConfig_CPUUsage::clear_high_cpu_usage_warning() {
  high_cpu_usage_warning_ = 0;
  clear_has_high_cpu_usage_warning();
}
inline float ResourceMonitorConfig_CPUUsage::high_cpu_usage_warning() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.CPUUsage.high_cpu_usage_warning)
  return high_cpu_usage_warning_;
}
inline void ResourceMonitorConfig_CPUUsage::set_high_cpu_usage_warning(float value) {
  set_has_high_cpu_usage_warning();
  high_cpu_usage_warning_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.CPUUsage.high_cpu_usage_warning)
}

// optional float high_cpu_usage_error = 2;
inline bool ResourceMonitorConfig_CPUUsage::has_high_cpu_usage_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResourceMonitorConfig_CPUUsage::set_has_high_cpu_usage_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResourceMonitorConfig_CPUUsage::clear_has_high_cpu_usage_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResourceMonitorConfig_CPUUsage::clear_high_cpu_usage_error() {
  high_cpu_usage_error_ = 0;
  clear_has_high_cpu_usage_error();
}
inline float ResourceMonitorConfig_CPUUsage::high_cpu_usage_error() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.CPUUsage.high_cpu_usage_error)
  return high_cpu_usage_error_;
}
inline void ResourceMonitorConfig_CPUUsage::set_high_cpu_usage_error(float value) {
  set_has_high_cpu_usage_error();
  high_cpu_usage_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.CPUUsage.high_cpu_usage_error)
}

// optional string process_dag_path = 3;
inline bool ResourceMonitorConfig_CPUUsage::has_process_dag_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResourceMonitorConfig_CPUUsage::set_has_process_dag_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResourceMonitorConfig_CPUUsage::clear_has_process_dag_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResourceMonitorConfig_CPUUsage::clear_process_dag_path() {
  process_dag_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_process_dag_path();
}
inline const ::std::string& ResourceMonitorConfig_CPUUsage::process_dag_path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.CPUUsage.process_dag_path)
  return process_dag_path_.GetNoArena();
}
inline void ResourceMonitorConfig_CPUUsage::set_process_dag_path(const ::std::string& value) {
  set_has_process_dag_path();
  process_dag_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.CPUUsage.process_dag_path)
}
#if LANG_CXX11
inline void ResourceMonitorConfig_CPUUsage::set_process_dag_path(::std::string&& value) {
  set_has_process_dag_path();
  process_dag_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.ResourceMonitorConfig.CPUUsage.process_dag_path)
}
#endif
inline void ResourceMonitorConfig_CPUUsage::set_process_dag_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_process_dag_path();
  process_dag_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.ResourceMonitorConfig.CPUUsage.process_dag_path)
}
inline void ResourceMonitorConfig_CPUUsage::set_process_dag_path(const char* value, size_t size) {
  set_has_process_dag_path();
  process_dag_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.ResourceMonitorConfig.CPUUsage.process_dag_path)
}
inline ::std::string* ResourceMonitorConfig_CPUUsage::mutable_process_dag_path() {
  set_has_process_dag_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ResourceMonitorConfig.CPUUsage.process_dag_path)
  return process_dag_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceMonitorConfig_CPUUsage::release_process_dag_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.ResourceMonitorConfig.CPUUsage.process_dag_path)
  if (!has_process_dag_path()) {
    return NULL;
  }
  clear_has_process_dag_path();
  return process_dag_path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceMonitorConfig_CPUUsage::set_allocated_process_dag_path(::std::string* process_dag_path) {
  if (process_dag_path != NULL) {
    set_has_process_dag_path();
  } else {
    clear_has_process_dag_path();
  }
  process_dag_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_dag_path);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.ResourceMonitorConfig.CPUUsage.process_dag_path)
}

// -------------------------------------------------------------------

// ResourceMonitorConfig_MemoryUsage

// optional int32 high_memory_usage_warning = 1;
inline bool ResourceMonitorConfig_MemoryUsage::has_high_memory_usage_warning() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResourceMonitorConfig_MemoryUsage::set_has_high_memory_usage_warning() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResourceMonitorConfig_MemoryUsage::clear_has_high_memory_usage_warning() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResourceMonitorConfig_MemoryUsage::clear_high_memory_usage_warning() {
  high_memory_usage_warning_ = 0;
  clear_has_high_memory_usage_warning();
}
inline ::google::protobuf::int32 ResourceMonitorConfig_MemoryUsage::high_memory_usage_warning() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.high_memory_usage_warning)
  return high_memory_usage_warning_;
}
inline void ResourceMonitorConfig_MemoryUsage::set_high_memory_usage_warning(::google::protobuf::int32 value) {
  set_has_high_memory_usage_warning();
  high_memory_usage_warning_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.high_memory_usage_warning)
}

// optional int32 high_memory_usage_error = 2;
inline bool ResourceMonitorConfig_MemoryUsage::has_high_memory_usage_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResourceMonitorConfig_MemoryUsage::set_has_high_memory_usage_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResourceMonitorConfig_MemoryUsage::clear_has_high_memory_usage_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResourceMonitorConfig_MemoryUsage::clear_high_memory_usage_error() {
  high_memory_usage_error_ = 0;
  clear_has_high_memory_usage_error();
}
inline ::google::protobuf::int32 ResourceMonitorConfig_MemoryUsage::high_memory_usage_error() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.high_memory_usage_error)
  return high_memory_usage_error_;
}
inline void ResourceMonitorConfig_MemoryUsage::set_high_memory_usage_error(::google::protobuf::int32 value) {
  set_has_high_memory_usage_error();
  high_memory_usage_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.high_memory_usage_error)
}

// optional string process_dag_path = 3;
inline bool ResourceMonitorConfig_MemoryUsage::has_process_dag_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResourceMonitorConfig_MemoryUsage::set_has_process_dag_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResourceMonitorConfig_MemoryUsage::clear_has_process_dag_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResourceMonitorConfig_MemoryUsage::clear_process_dag_path() {
  process_dag_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_process_dag_path();
}
inline const ::std::string& ResourceMonitorConfig_MemoryUsage::process_dag_path() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.process_dag_path)
  return process_dag_path_.GetNoArena();
}
inline void ResourceMonitorConfig_MemoryUsage::set_process_dag_path(const ::std::string& value) {
  set_has_process_dag_path();
  process_dag_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.process_dag_path)
}
#if LANG_CXX11
inline void ResourceMonitorConfig_MemoryUsage::set_process_dag_path(::std::string&& value) {
  set_has_process_dag_path();
  process_dag_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.process_dag_path)
}
#endif
inline void ResourceMonitorConfig_MemoryUsage::set_process_dag_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_process_dag_path();
  process_dag_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.process_dag_path)
}
inline void ResourceMonitorConfig_MemoryUsage::set_process_dag_path(const char* value, size_t size) {
  set_has_process_dag_path();
  process_dag_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.process_dag_path)
}
inline ::std::string* ResourceMonitorConfig_MemoryUsage::mutable_process_dag_path() {
  set_has_process_dag_path();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.process_dag_path)
  return process_dag_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceMonitorConfig_MemoryUsage::release_process_dag_path() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.process_dag_path)
  if (!has_process_dag_path()) {
    return NULL;
  }
  clear_has_process_dag_path();
  return process_dag_path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceMonitorConfig_MemoryUsage::set_allocated_process_dag_path(::std::string* process_dag_path) {
  if (process_dag_path != NULL) {
    set_has_process_dag_path();
  } else {
    clear_has_process_dag_path();
  }
  process_dag_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_dag_path);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.ResourceMonitorConfig.MemoryUsage.process_dag_path)
}

// -------------------------------------------------------------------

// ResourceMonitorConfig_DiskLoad

// optional int32 high_disk_load_warning = 1;
inline bool ResourceMonitorConfig_DiskLoad::has_high_disk_load_warning() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResourceMonitorConfig_DiskLoad::set_has_high_disk_load_warning() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResourceMonitorConfig_DiskLoad::clear_has_high_disk_load_warning() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResourceMonitorConfig_DiskLoad::clear_high_disk_load_warning() {
  high_disk_load_warning_ = 0;
  clear_has_high_disk_load_warning();
}
inline ::google::protobuf::int32 ResourceMonitorConfig_DiskLoad::high_disk_load_warning() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.DiskLoad.high_disk_load_warning)
  return high_disk_load_warning_;
}
inline void ResourceMonitorConfig_DiskLoad::set_high_disk_load_warning(::google::protobuf::int32 value) {
  set_has_high_disk_load_warning();
  high_disk_load_warning_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.DiskLoad.high_disk_load_warning)
}

// optional int32 high_disk_load_error = 2;
inline bool ResourceMonitorConfig_DiskLoad::has_high_disk_load_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResourceMonitorConfig_DiskLoad::set_has_high_disk_load_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResourceMonitorConfig_DiskLoad::clear_has_high_disk_load_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResourceMonitorConfig_DiskLoad::clear_high_disk_load_error() {
  high_disk_load_error_ = 0;
  clear_has_high_disk_load_error();
}
inline ::google::protobuf::int32 ResourceMonitorConfig_DiskLoad::high_disk_load_error() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.DiskLoad.high_disk_load_error)
  return high_disk_load_error_;
}
inline void ResourceMonitorConfig_DiskLoad::set_high_disk_load_error(::google::protobuf::int32 value) {
  set_has_high_disk_load_error();
  high_disk_load_error_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.DiskLoad.high_disk_load_error)
}

// optional string device_name = 3;
inline bool ResourceMonitorConfig_DiskLoad::has_device_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResourceMonitorConfig_DiskLoad::set_has_device_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResourceMonitorConfig_DiskLoad::clear_has_device_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResourceMonitorConfig_DiskLoad::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_name();
}
inline const ::std::string& ResourceMonitorConfig_DiskLoad::device_name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.DiskLoad.device_name)
  return device_name_.GetNoArena();
}
inline void ResourceMonitorConfig_DiskLoad::set_device_name(const ::std::string& value) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.ResourceMonitorConfig.DiskLoad.device_name)
}
#if LANG_CXX11
inline void ResourceMonitorConfig_DiskLoad::set_device_name(::std::string&& value) {
  set_has_device_name();
  device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.ResourceMonitorConfig.DiskLoad.device_name)
}
#endif
inline void ResourceMonitorConfig_DiskLoad::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.ResourceMonitorConfig.DiskLoad.device_name)
}
inline void ResourceMonitorConfig_DiskLoad::set_device_name(const char* value, size_t size) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.ResourceMonitorConfig.DiskLoad.device_name)
}
inline ::std::string* ResourceMonitorConfig_DiskLoad::mutable_device_name() {
  set_has_device_name();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ResourceMonitorConfig.DiskLoad.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceMonitorConfig_DiskLoad::release_device_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.ResourceMonitorConfig.DiskLoad.device_name)
  if (!has_device_name()) {
    return NULL;
  }
  clear_has_device_name();
  return device_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceMonitorConfig_DiskLoad::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    set_has_device_name();
  } else {
    clear_has_device_name();
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.ResourceMonitorConfig.DiskLoad.device_name)
}

// -------------------------------------------------------------------

// ResourceMonitorConfig

// repeated .apollo.dreamview.ResourceMonitorConfig.DiskSpace disk_spaces = 1;
inline int ResourceMonitorConfig::disk_spaces_size() const {
  return disk_spaces_.size();
}
inline void ResourceMonitorConfig::clear_disk_spaces() {
  disk_spaces_.Clear();
}
inline ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* ResourceMonitorConfig::mutable_disk_spaces(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ResourceMonitorConfig.disk_spaces)
  return disk_spaces_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskSpace >*
ResourceMonitorConfig::mutable_disk_spaces() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.ResourceMonitorConfig.disk_spaces)
  return &disk_spaces_;
}
inline const ::apollo::dreamview::ResourceMonitorConfig_DiskSpace& ResourceMonitorConfig::disk_spaces(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.disk_spaces)
  return disk_spaces_.Get(index);
}
inline ::apollo::dreamview::ResourceMonitorConfig_DiskSpace* ResourceMonitorConfig::add_disk_spaces() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.ResourceMonitorConfig.disk_spaces)
  return disk_spaces_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskSpace >&
ResourceMonitorConfig::disk_spaces() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.ResourceMonitorConfig.disk_spaces)
  return disk_spaces_;
}

// repeated .apollo.dreamview.ResourceMonitorConfig.CPUUsage cpu_usages = 2;
inline int ResourceMonitorConfig::cpu_usages_size() const {
  return cpu_usages_.size();
}
inline void ResourceMonitorConfig::clear_cpu_usages() {
  cpu_usages_.Clear();
}
inline ::apollo::dreamview::ResourceMonitorConfig_CPUUsage* ResourceMonitorConfig::mutable_cpu_usages(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ResourceMonitorConfig.cpu_usages)
  return cpu_usages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_CPUUsage >*
ResourceMonitorConfig::mutable_cpu_usages() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.ResourceMonitorConfig.cpu_usages)
  return &cpu_usages_;
}
inline const ::apollo::dreamview::ResourceMonitorConfig_CPUUsage& ResourceMonitorConfig::cpu_usages(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.cpu_usages)
  return cpu_usages_.Get(index);
}
inline ::apollo::dreamview::ResourceMonitorConfig_CPUUsage* ResourceMonitorConfig::add_cpu_usages() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.ResourceMonitorConfig.cpu_usages)
  return cpu_usages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_CPUUsage >&
ResourceMonitorConfig::cpu_usages() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.ResourceMonitorConfig.cpu_usages)
  return cpu_usages_;
}

// repeated .apollo.dreamview.ResourceMonitorConfig.MemoryUsage memory_usages = 3;
inline int ResourceMonitorConfig::memory_usages_size() const {
  return memory_usages_.size();
}
inline void ResourceMonitorConfig::clear_memory_usages() {
  memory_usages_.Clear();
}
inline ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage* ResourceMonitorConfig::mutable_memory_usages(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ResourceMonitorConfig.memory_usages)
  return memory_usages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage >*
ResourceMonitorConfig::mutable_memory_usages() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.ResourceMonitorConfig.memory_usages)
  return &memory_usages_;
}
inline const ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage& ResourceMonitorConfig::memory_usages(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.memory_usages)
  return memory_usages_.Get(index);
}
inline ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage* ResourceMonitorConfig::add_memory_usages() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.ResourceMonitorConfig.memory_usages)
  return memory_usages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_MemoryUsage >&
ResourceMonitorConfig::memory_usages() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.ResourceMonitorConfig.memory_usages)
  return memory_usages_;
}

// repeated .apollo.dreamview.ResourceMonitorConfig.DiskLoad disk_load_usages = 4;
inline int ResourceMonitorConfig::disk_load_usages_size() const {
  return disk_load_usages_.size();
}
inline void ResourceMonitorConfig::clear_disk_load_usages() {
  disk_load_usages_.Clear();
}
inline ::apollo::dreamview::ResourceMonitorConfig_DiskLoad* ResourceMonitorConfig::mutable_disk_load_usages(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.ResourceMonitorConfig.disk_load_usages)
  return disk_load_usages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskLoad >*
ResourceMonitorConfig::mutable_disk_load_usages() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.ResourceMonitorConfig.disk_load_usages)
  return &disk_load_usages_;
}
inline const ::apollo::dreamview::ResourceMonitorConfig_DiskLoad& ResourceMonitorConfig::disk_load_usages(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.ResourceMonitorConfig.disk_load_usages)
  return disk_load_usages_.Get(index);
}
inline ::apollo::dreamview::ResourceMonitorConfig_DiskLoad* ResourceMonitorConfig::add_disk_load_usages() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.ResourceMonitorConfig.disk_load_usages)
  return disk_load_usages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::ResourceMonitorConfig_DiskLoad >&
ResourceMonitorConfig::disk_load_usages() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.ResourceMonitorConfig.disk_load_usages)
  return disk_load_usages_;
}

// -------------------------------------------------------------------

// MonitoredComponent

// optional .apollo.dreamview.ProcessMonitorConfig process = 1;
inline bool MonitoredComponent::has_process() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonitoredComponent::set_has_process() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonitoredComponent::clear_has_process() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonitoredComponent::clear_process() {
  if (process_ != NULL) process_->Clear();
  clear_has_process();
}
inline const ::apollo::dreamview::ProcessMonitorConfig& MonitoredComponent::_internal_process() const {
  return *process_;
}
inline const ::apollo::dreamview::ProcessMonitorConfig& MonitoredComponent::process() const {
  const ::apollo::dreamview::ProcessMonitorConfig* p = process_;
  // @@protoc_insertion_point(field_get:apollo.dreamview.MonitoredComponent.process)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::dreamview::ProcessMonitorConfig*>(
      &::apollo::dreamview::_ProcessMonitorConfig_default_instance_);
}
inline ::apollo::dreamview::ProcessMonitorConfig* MonitoredComponent::release_process() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.MonitoredComponent.process)
  clear_has_process();
  ::apollo::dreamview::ProcessMonitorConfig* temp = process_;
  process_ = NULL;
  return temp;
}
inline ::apollo::dreamview::ProcessMonitorConfig* MonitoredComponent::mutable_process() {
  set_has_process();
  if (process_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::ProcessMonitorConfig>(GetArenaNoVirtual());
    process_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MonitoredComponent.process)
  return process_;
}
inline void MonitoredComponent::set_allocated_process(::apollo::dreamview::ProcessMonitorConfig* process) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete process_;
  }
  if (process) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      process = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, process, submessage_arena);
    }
    set_has_process();
  } else {
    clear_has_process();
  }
  process_ = process;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.MonitoredComponent.process)
}

// optional .apollo.dreamview.ChannelMonitorConfig channel = 2;
inline bool MonitoredComponent::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonitoredComponent::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonitoredComponent::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonitoredComponent::clear_channel() {
  if (channel_ != NULL) channel_->Clear();
  clear_has_channel();
}
inline const ::apollo::dreamview::ChannelMonitorConfig& MonitoredComponent::_internal_channel() const {
  return *channel_;
}
inline const ::apollo::dreamview::ChannelMonitorConfig& MonitoredComponent::channel() const {
  const ::apollo::dreamview::ChannelMonitorConfig* p = channel_;
  // @@protoc_insertion_point(field_get:apollo.dreamview.MonitoredComponent.channel)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::dreamview::ChannelMonitorConfig*>(
      &::apollo::dreamview::_ChannelMonitorConfig_default_instance_);
}
inline ::apollo::dreamview::ChannelMonitorConfig* MonitoredComponent::release_channel() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.MonitoredComponent.channel)
  clear_has_channel();
  ::apollo::dreamview::ChannelMonitorConfig* temp = channel_;
  channel_ = NULL;
  return temp;
}
inline ::apollo::dreamview::ChannelMonitorConfig* MonitoredComponent::mutable_channel() {
  set_has_channel();
  if (channel_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::ChannelMonitorConfig>(GetArenaNoVirtual());
    channel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MonitoredComponent.channel)
  return channel_;
}
inline void MonitoredComponent::set_allocated_channel(::apollo::dreamview::ChannelMonitorConfig* channel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete channel_;
  }
  if (channel) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      channel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    set_has_channel();
  } else {
    clear_has_channel();
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.MonitoredComponent.channel)
}

// optional .apollo.dreamview.ResourceMonitorConfig resource = 3;
inline bool MonitoredComponent::has_resource() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonitoredComponent::set_has_resource() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonitoredComponent::clear_has_resource() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonitoredComponent::clear_resource() {
  if (resource_ != NULL) resource_->Clear();
  clear_has_resource();
}
inline const ::apollo::dreamview::ResourceMonitorConfig& MonitoredComponent::_internal_resource() const {
  return *resource_;
}
inline const ::apollo::dreamview::ResourceMonitorConfig& MonitoredComponent::resource() const {
  const ::apollo::dreamview::ResourceMonitorConfig* p = resource_;
  // @@protoc_insertion_point(field_get:apollo.dreamview.MonitoredComponent.resource)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::dreamview::ResourceMonitorConfig*>(
      &::apollo::dreamview::_ResourceMonitorConfig_default_instance_);
}
inline ::apollo::dreamview::ResourceMonitorConfig* MonitoredComponent::release_resource() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.MonitoredComponent.resource)
  clear_has_resource();
  ::apollo::dreamview::ResourceMonitorConfig* temp = resource_;
  resource_ = NULL;
  return temp;
}
inline ::apollo::dreamview::ResourceMonitorConfig* MonitoredComponent::mutable_resource() {
  set_has_resource();
  if (resource_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::ResourceMonitorConfig>(GetArenaNoVirtual());
    resource_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MonitoredComponent.resource)
  return resource_;
}
inline void MonitoredComponent::set_allocated_resource(::apollo::dreamview::ResourceMonitorConfig* resource) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete resource_;
  }
  if (resource) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      resource = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    set_has_resource();
  } else {
    clear_has_resource();
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.MonitoredComponent.resource)
}

// optional bool required_for_safety = 4 [default = true];
inline bool MonitoredComponent::has_required_for_safety() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MonitoredComponent::set_has_required_for_safety() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MonitoredComponent::clear_has_required_for_safety() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MonitoredComponent::clear_required_for_safety() {
  required_for_safety_ = true;
  clear_has_required_for_safety();
}
inline bool MonitoredComponent::required_for_safety() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.MonitoredComponent.required_for_safety)
  return required_for_safety_;
}
inline void MonitoredComponent::set_required_for_safety(bool value) {
  set_has_required_for_safety();
  required_for_safety_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.MonitoredComponent.required_for_safety)
}

// optional .apollo.dreamview.ModuleMonitorConfig module = 5;
inline bool MonitoredComponent::has_module() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MonitoredComponent::set_has_module() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MonitoredComponent::clear_has_module() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MonitoredComponent::clear_module() {
  if (module_ != NULL) module_->Clear();
  clear_has_module();
}
inline const ::apollo::dreamview::ModuleMonitorConfig& MonitoredComponent::_internal_module() const {
  return *module_;
}
inline const ::apollo::dreamview::ModuleMonitorConfig& MonitoredComponent::module() const {
  const ::apollo::dreamview::ModuleMonitorConfig* p = module_;
  // @@protoc_insertion_point(field_get:apollo.dreamview.MonitoredComponent.module)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::dreamview::ModuleMonitorConfig*>(
      &::apollo::dreamview::_ModuleMonitorConfig_default_instance_);
}
inline ::apollo::dreamview::ModuleMonitorConfig* MonitoredComponent::release_module() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.MonitoredComponent.module)
  clear_has_module();
  ::apollo::dreamview::ModuleMonitorConfig* temp = module_;
  module_ = NULL;
  return temp;
}
inline ::apollo::dreamview::ModuleMonitorConfig* MonitoredComponent::mutable_module() {
  set_has_module();
  if (module_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::ModuleMonitorConfig>(GetArenaNoVirtual());
    module_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.MonitoredComponent.module)
  return module_;
}
inline void MonitoredComponent::set_allocated_module(::apollo::dreamview::ModuleMonitorConfig* module) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete module_;
  }
  if (module) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      module = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, module, submessage_arena);
    }
    set_has_module();
  } else {
    clear_has_module();
  }
  module_ = module;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.MonitoredComponent.module)
}

// -------------------------------------------------------------------

// Module

// optional string start_command = 1;
inline bool Module::has_start_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Module::set_has_start_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Module::clear_has_start_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Module::clear_start_command() {
  start_command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_start_command();
}
inline const ::std::string& Module::start_command() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Module.start_command)
  return start_command_.GetNoArena();
}
inline void Module::set_start_command(const ::std::string& value) {
  set_has_start_command();
  start_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Module.start_command)
}
#if LANG_CXX11
inline void Module::set_start_command(::std::string&& value) {
  set_has_start_command();
  start_command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.Module.start_command)
}
#endif
inline void Module::set_start_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_start_command();
  start_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Module.start_command)
}
inline void Module::set_start_command(const char* value, size_t size) {
  set_has_start_command();
  start_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Module.start_command)
}
inline ::std::string* Module::mutable_start_command() {
  set_has_start_command();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Module.start_command)
  return start_command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Module::release_start_command() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Module.start_command)
  if (!has_start_command()) {
    return NULL;
  }
  clear_has_start_command();
  return start_command_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Module::set_allocated_start_command(::std::string* start_command) {
  if (start_command != NULL) {
    set_has_start_command();
  } else {
    clear_has_start_command();
  }
  start_command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_command);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Module.start_command)
}

// optional string stop_command = 2;
inline bool Module::has_stop_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Module::set_has_stop_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Module::clear_has_stop_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Module::clear_stop_command() {
  stop_command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stop_command();
}
inline const ::std::string& Module::stop_command() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Module.stop_command)
  return stop_command_.GetNoArena();
}
inline void Module::set_stop_command(const ::std::string& value) {
  set_has_stop_command();
  stop_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Module.stop_command)
}
#if LANG_CXX11
inline void Module::set_stop_command(::std::string&& value) {
  set_has_stop_command();
  stop_command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.Module.stop_command)
}
#endif
inline void Module::set_stop_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stop_command();
  stop_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Module.stop_command)
}
inline void Module::set_stop_command(const char* value, size_t size) {
  set_has_stop_command();
  stop_command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Module.stop_command)
}
inline ::std::string* Module::mutable_stop_command() {
  set_has_stop_command();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Module.stop_command)
  return stop_command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Module::release_stop_command() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Module.stop_command)
  if (!has_stop_command()) {
    return NULL;
  }
  clear_has_stop_command();
  return stop_command_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Module::set_allocated_stop_command(::std::string* stop_command) {
  if (stop_command != NULL) {
    set_has_stop_command();
  } else {
    clear_has_stop_command();
  }
  stop_command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stop_command);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Module.stop_command)
}

// optional .apollo.dreamview.ProcessMonitorConfig process_monitor_config = 3;
inline bool Module::has_process_monitor_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Module::set_has_process_monitor_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Module::clear_has_process_monitor_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Module::clear_process_monitor_config() {
  if (process_monitor_config_ != NULL) process_monitor_config_->Clear();
  clear_has_process_monitor_config();
}
inline const ::apollo::dreamview::ProcessMonitorConfig& Module::_internal_process_monitor_config() const {
  return *process_monitor_config_;
}
inline const ::apollo::dreamview::ProcessMonitorConfig& Module::process_monitor_config() const {
  const ::apollo::dreamview::ProcessMonitorConfig* p = process_monitor_config_;
  // @@protoc_insertion_point(field_get:apollo.dreamview.Module.process_monitor_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::dreamview::ProcessMonitorConfig*>(
      &::apollo::dreamview::_ProcessMonitorConfig_default_instance_);
}
inline ::apollo::dreamview::ProcessMonitorConfig* Module::release_process_monitor_config() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Module.process_monitor_config)
  clear_has_process_monitor_config();
  ::apollo::dreamview::ProcessMonitorConfig* temp = process_monitor_config_;
  process_monitor_config_ = NULL;
  return temp;
}
inline ::apollo::dreamview::ProcessMonitorConfig* Module::mutable_process_monitor_config() {
  set_has_process_monitor_config();
  if (process_monitor_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::ProcessMonitorConfig>(GetArenaNoVirtual());
    process_monitor_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Module.process_monitor_config)
  return process_monitor_config_;
}
inline void Module::set_allocated_process_monitor_config(::apollo::dreamview::ProcessMonitorConfig* process_monitor_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete process_monitor_config_;
  }
  if (process_monitor_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      process_monitor_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, process_monitor_config, submessage_arena);
    }
    set_has_process_monitor_config();
  } else {
    clear_has_process_monitor_config();
  }
  process_monitor_config_ = process_monitor_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Module.process_monitor_config)
}

// optional bool required_for_safety = 4 [default = true];
inline bool Module::has_required_for_safety() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Module::set_has_required_for_safety() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Module::clear_has_required_for_safety() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Module::clear_required_for_safety() {
  required_for_safety_ = true;
  clear_has_required_for_safety();
}
inline bool Module::required_for_safety() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Module.required_for_safety)
  return required_for_safety_;
}
inline void Module::set_required_for_safety(bool value) {
  set_has_required_for_safety();
  required_for_safety_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Module.required_for_safety)
}

// -------------------------------------------------------------------

// CyberModule

// repeated string dag_files = 1;
inline int CyberModule::dag_files_size() const {
  return dag_files_.size();
}
inline void CyberModule::clear_dag_files() {
  dag_files_.Clear();
}
inline const ::std::string& CyberModule::dag_files(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CyberModule.dag_files)
  return dag_files_.Get(index);
}
inline ::std::string* CyberModule::mutable_dag_files(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.CyberModule.dag_files)
  return dag_files_.Mutable(index);
}
inline void CyberModule::set_dag_files(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.CyberModule.dag_files)
  dag_files_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CyberModule::set_dag_files(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.CyberModule.dag_files)
  dag_files_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CyberModule::set_dag_files(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dag_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.CyberModule.dag_files)
}
inline void CyberModule::set_dag_files(int index, const char* value, size_t size) {
  dag_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.CyberModule.dag_files)
}
inline ::std::string* CyberModule::add_dag_files() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.CyberModule.dag_files)
  return dag_files_.Add();
}
inline void CyberModule::add_dag_files(const ::std::string& value) {
  dag_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.CyberModule.dag_files)
}
#if LANG_CXX11
inline void CyberModule::add_dag_files(::std::string&& value) {
  dag_files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.CyberModule.dag_files)
}
#endif
inline void CyberModule::add_dag_files(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dag_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.CyberModule.dag_files)
}
inline void CyberModule::add_dag_files(const char* value, size_t size) {
  dag_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.CyberModule.dag_files)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CyberModule::dag_files() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.CyberModule.dag_files)
  return dag_files_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CyberModule::mutable_dag_files() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.CyberModule.dag_files)
  return &dag_files_;
}

// optional bool required_for_safety = 2 [default = true];
inline bool CyberModule::has_required_for_safety() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CyberModule::set_has_required_for_safety() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CyberModule::clear_has_required_for_safety() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CyberModule::clear_required_for_safety() {
  required_for_safety_ = true;
  clear_has_required_for_safety();
}
inline bool CyberModule::required_for_safety() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CyberModule.required_for_safety)
  return required_for_safety_;
}
inline void CyberModule::set_required_for_safety(bool value) {
  set_has_required_for_safety();
  required_for_safety_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.CyberModule.required_for_safety)
}

// optional string process_group = 3;
inline bool CyberModule::has_process_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CyberModule::set_has_process_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CyberModule::clear_has_process_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CyberModule::clear_process_group() {
  process_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_process_group();
}
inline const ::std::string& CyberModule::process_group() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CyberModule.process_group)
  return process_group_.GetNoArena();
}
inline void CyberModule::set_process_group(const ::std::string& value) {
  set_has_process_group();
  process_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.CyberModule.process_group)
}
#if LANG_CXX11
inline void CyberModule::set_process_group(::std::string&& value) {
  set_has_process_group();
  process_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.CyberModule.process_group)
}
#endif
inline void CyberModule::set_process_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_process_group();
  process_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.CyberModule.process_group)
}
inline void CyberModule::set_process_group(const char* value, size_t size) {
  set_has_process_group();
  process_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.CyberModule.process_group)
}
inline ::std::string* CyberModule::mutable_process_group() {
  set_has_process_group();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.CyberModule.process_group)
  return process_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CyberModule::release_process_group() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.CyberModule.process_group)
  if (!has_process_group()) {
    return NULL;
  }
  clear_has_process_group();
  return process_group_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CyberModule::set_allocated_process_group(::std::string* process_group) {
  if (process_group != NULL) {
    set_has_process_group();
  } else {
    clear_has_process_group();
  }
  process_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), process_group);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.CyberModule.process_group)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HMIMode

// map<string, .apollo.dreamview.CyberModule> cyber_modules = 1;
inline int HMIMode::cyber_modules_size() const {
  return cyber_modules_.size();
}
inline void HMIMode::clear_cyber_modules() {
  cyber_modules_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::CyberModule >&
HMIMode::cyber_modules() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIMode.cyber_modules)
  return cyber_modules_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::apollo::dreamview::CyberModule >*
HMIMode::mutable_cyber_modules() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIMode.cyber_modules)
  return cyber_modules_.MutableMap();
}

// map<string, .apollo.dreamview.Module> modules = 2;
inline int HMIMode::modules_size() const {
  return modules_.size();
}
inline void HMIMode::clear_modules() {
  modules_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Module >&
HMIMode::modules() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIMode.modules)
  return modules_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Module >*
HMIMode::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIMode.modules)
  return modules_.MutableMap();
}

// map<string, .apollo.dreamview.MonitoredComponent> monitored_components = 3;
inline int HMIMode::monitored_components_size() const {
  return monitored_components_.size();
}
inline void HMIMode::clear_monitored_components() {
  monitored_components_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::MonitoredComponent >&
HMIMode::monitored_components() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIMode.monitored_components)
  return monitored_components_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::apollo::dreamview::MonitoredComponent >*
HMIMode::mutable_monitored_components() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIMode.monitored_components)
  return monitored_components_.MutableMap();
}

// map<string, .apollo.dreamview.ProcessMonitorConfig> other_components = 4;
inline int HMIMode::other_components_size() const {
  return other_components_.size();
}
inline void HMIMode::clear_other_components() {
  other_components_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::ProcessMonitorConfig >&
HMIMode::other_components() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIMode.other_components)
  return other_components_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::apollo::dreamview::ProcessMonitorConfig >*
HMIMode::mutable_other_components() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIMode.other_components)
  return other_components_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fmode_2eproto
