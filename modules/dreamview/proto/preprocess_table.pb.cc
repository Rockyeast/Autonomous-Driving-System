// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/preprocess_table.proto

#include "modules/dreamview/proto/preprocess_table.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Progress;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Translation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CameraConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LidarConfig;
}  // namespace protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto
namespace apollo {
namespace dreamview {
class TranslationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Translation>
      _instance;
} _Translation_default_instance_;
class LidarConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LidarConfig>
      _instance;
} _LidarConfig_default_instance_;
class CameraConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CameraConfig>
      _instance;
} _CameraConfig_default_instance_;
class ProgressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Progress>
      _instance;
} _Progress_default_instance_;
class PreprocessTableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PreprocessTable>
      _instance;
} _PreprocessTable_default_instance_;
}  // namespace dreamview
}  // namespace apollo
namespace protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto {
static void InitDefaultsTranslation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Translation_default_instance_;
    new (ptr) ::apollo::dreamview::Translation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Translation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Translation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTranslation}, {}};

static void InitDefaultsLidarConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_LidarConfig_default_instance_;
    new (ptr) ::apollo::dreamview::LidarConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::LidarConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LidarConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLidarConfig}, {
      &protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::scc_info_Translation.base,}};

static void InitDefaultsCameraConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_CameraConfig_default_instance_;
    new (ptr) ::apollo::dreamview::CameraConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::CameraConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CameraConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCameraConfig}, {
      &protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::scc_info_Translation.base,}};

static void InitDefaultsProgress() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Progress_default_instance_;
    new (ptr) ::apollo::dreamview::Progress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Progress::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Progress =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProgress}, {}};

static void InitDefaultsPreprocessTable() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_PreprocessTable_default_instance_;
    new (ptr) ::apollo::dreamview::PreprocessTable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::PreprocessTable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_PreprocessTable =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPreprocessTable}, {
      &protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::scc_info_LidarConfig.base,
      &protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::scc_info_CameraConfig.base,
      &protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::scc_info_Progress.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Translation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LidarConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CameraConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Progress.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PreprocessTable.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Translation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Translation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Translation, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Translation, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Translation, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::LidarConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::LidarConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::LidarConfig, sensor_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::LidarConfig, translation_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::CameraConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::CameraConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::CameraConfig, translation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::CameraConfig, d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::CameraConfig, k_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Progress, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Progress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Progress, percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Progress, log_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Progress, status_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::PreprocessTable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::PreprocessTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::PreprocessTable, lidar_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::PreprocessTable, camera_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::PreprocessTable, main_sensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::PreprocessTable, progress_),
  ~0u,
  1,
  0,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::apollo::dreamview::Translation)},
  { 11, 18, sizeof(::apollo::dreamview::LidarConfig)},
  { 20, 28, sizeof(::apollo::dreamview::CameraConfig)},
  { 31, 39, sizeof(::apollo::dreamview::Progress)},
  { 42, 51, sizeof(::apollo::dreamview::PreprocessTable)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_Translation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_LidarConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_CameraConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_Progress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_PreprocessTable_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/dreamview/proto/preprocess_table.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n.modules/dreamview/proto/preprocess_tab"
      "le.proto\022\020apollo.dreamview\".\n\013Translatio"
      "n\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"V\n\013Li"
      "darConfig\022\023\n\013sensor_name\030\001 \001(\t\0222\n\013transl"
      "ation\030\002 \001(\0132\035.apollo.dreamview.Translati"
      "on\"X\n\014CameraConfig\0222\n\013translation\030\001 \001(\0132"
      "\035.apollo.dreamview.Translation\022\t\n\001D\030\002 \003("
      "\002\022\t\n\001K\030\003 \003(\002\"\\\n\010Progress\022\022\n\npercentage\030\001"
      " \001(\002\022\022\n\nlog_string\030\002 \001(\t\022(\n\006status\030\003 \001(\016"
      "2\030.apollo.dreamview.Status\"\300\001\n\017Preproces"
      "sTable\0223\n\014lidar_config\030\001 \003(\0132\035.apollo.dr"
      "eamview.LidarConfig\0225\n\rcamera_config\030\002 \001"
      "(\0132\036.apollo.dreamview.CameraConfig\022\023\n\013ma"
      "in_sensor\030\003 \001(\t\022,\n\010progress\030\004 \001(\0132\032.apol"
      "lo.dreamview.Progress*,\n\006Status\022\013\n\007SUCCE"
      "SS\020\000\022\010\n\004FAIL\020\001\022\013\n\007UNKNOWN\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 627);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/dreamview/proto/preprocess_table.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto
namespace apollo {
namespace dreamview {
const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::file_level_enum_descriptors[0];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Translation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Translation::kXFieldNumber;
const int Translation::kYFieldNumber;
const int Translation::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Translation::Translation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::scc_info_Translation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Translation)
}
Translation::Translation(const Translation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Translation)
}

void Translation::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Translation::~Translation() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Translation)
  SharedDtor();
}

void Translation::SharedDtor() {
}

void Translation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Translation::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Translation& Translation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::scc_info_Translation.base);
  return *internal_default_instance();
}


void Translation::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Translation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Translation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Translation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Translation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Translation)
  return false;
#undef DO_
}

void Translation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Translation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Translation)
}

::google::protobuf::uint8* Translation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Translation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Translation)
  return target;
}

size_t Translation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Translation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Translation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Translation)
  GOOGLE_DCHECK_NE(&from, this);
  const Translation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Translation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Translation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Translation)
    MergeFrom(*source);
  }
}

void Translation::MergeFrom(const Translation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Translation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Translation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Translation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Translation::CopyFrom(const Translation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Translation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Translation::IsInitialized() const {
  return true;
}

void Translation::Swap(Translation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Translation::InternalSwap(Translation* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Translation::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LidarConfig::InitAsDefaultInstance() {
  ::apollo::dreamview::_LidarConfig_default_instance_._instance.get_mutable()->translation_ = const_cast< ::apollo::dreamview::Translation*>(
      ::apollo::dreamview::Translation::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LidarConfig::kSensorNameFieldNumber;
const int LidarConfig::kTranslationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LidarConfig::LidarConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::scc_info_LidarConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.LidarConfig)
}
LidarConfig::LidarConfig(const LidarConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sensor_name()) {
    sensor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_name_);
  }
  if (from.has_translation()) {
    translation_ = new ::apollo::dreamview::Translation(*from.translation_);
  } else {
    translation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.LidarConfig)
}

void LidarConfig::SharedCtor() {
  sensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  translation_ = NULL;
}

LidarConfig::~LidarConfig() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.LidarConfig)
  SharedDtor();
}

void LidarConfig::SharedDtor() {
  sensor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete translation_;
}

void LidarConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LidarConfig::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LidarConfig& LidarConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::scc_info_LidarConfig.base);
  return *internal_default_instance();
}


void LidarConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.LidarConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      sensor_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(translation_ != NULL);
      translation_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LidarConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.LidarConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sensor_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sensor_name().data(), static_cast<int>(this->sensor_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.LidarConfig.sensor_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.dreamview.Translation translation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.LidarConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.LidarConfig)
  return false;
#undef DO_
}

void LidarConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.LidarConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sensor_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor_name().data(), static_cast<int>(this->sensor_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.LidarConfig.sensor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sensor_name(), output);
  }

  // optional .apollo.dreamview.Translation translation = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_translation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.LidarConfig)
}

::google::protobuf::uint8* LidarConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.LidarConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sensor_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor_name().data(), static_cast<int>(this->sensor_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.LidarConfig.sensor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sensor_name(), target);
  }

  // optional .apollo.dreamview.Translation translation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_translation(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.LidarConfig)
  return target;
}

size_t LidarConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.LidarConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string sensor_name = 1;
    if (has_sensor_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensor_name());
    }

    // optional .apollo.dreamview.Translation translation = 2;
    if (has_translation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *translation_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LidarConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.LidarConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LidarConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.LidarConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.LidarConfig)
    MergeFrom(*source);
  }
}

void LidarConfig::MergeFrom(const LidarConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.LidarConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sensor_name();
      sensor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_translation()->::apollo::dreamview::Translation::MergeFrom(from.translation());
    }
  }
}

void LidarConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.LidarConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarConfig::CopyFrom(const LidarConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.LidarConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarConfig::IsInitialized() const {
  return true;
}

void LidarConfig::Swap(LidarConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LidarConfig::InternalSwap(LidarConfig* other) {
  using std::swap;
  sensor_name_.Swap(&other->sensor_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(translation_, other->translation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LidarConfig::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CameraConfig::InitAsDefaultInstance() {
  ::apollo::dreamview::_CameraConfig_default_instance_._instance.get_mutable()->translation_ = const_cast< ::apollo::dreamview::Translation*>(
      ::apollo::dreamview::Translation::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraConfig::kTranslationFieldNumber;
const int CameraConfig::kDFieldNumber;
const int CameraConfig::kKFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraConfig::CameraConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::scc_info_CameraConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.CameraConfig)
}
CameraConfig::CameraConfig(const CameraConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      d_(from.d_),
      k_(from.k_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_translation()) {
    translation_ = new ::apollo::dreamview::Translation(*from.translation_);
  } else {
    translation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.CameraConfig)
}

void CameraConfig::SharedCtor() {
  translation_ = NULL;
}

CameraConfig::~CameraConfig() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.CameraConfig)
  SharedDtor();
}

void CameraConfig::SharedDtor() {
  if (this != internal_default_instance()) delete translation_;
}

void CameraConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CameraConfig::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CameraConfig& CameraConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::scc_info_CameraConfig.base);
  return *internal_default_instance();
}


void CameraConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.CameraConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  d_.Clear();
  k_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(translation_ != NULL);
    translation_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CameraConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.CameraConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.dreamview.Translation translation = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float D = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_d())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_d())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float K = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_k())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_k())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.CameraConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.CameraConfig)
  return false;
#undef DO_
}

void CameraConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.CameraConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.dreamview.Translation translation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_translation(), output);
  }

  // repeated float D = 2;
  for (int i = 0, n = this->d_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->d(i), output);
  }

  // repeated float K = 3;
  for (int i = 0, n = this->k_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->k(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.CameraConfig)
}

::google::protobuf::uint8* CameraConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.CameraConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.dreamview.Translation translation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_translation(), deterministic, target);
  }

  // repeated float D = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(2, this->d_, target);

  // repeated float K = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(3, this->k_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.CameraConfig)
  return target;
}

size_t CameraConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.CameraConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float D = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->d_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->d_size());
    total_size += data_size;
  }

  // repeated float K = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->k_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->k_size());
    total_size += data_size;
  }

  // optional .apollo.dreamview.Translation translation = 1;
  if (has_translation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *translation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.CameraConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.CameraConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.CameraConfig)
    MergeFrom(*source);
  }
}

void CameraConfig::MergeFrom(const CameraConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.CameraConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  d_.MergeFrom(from.d_);
  k_.MergeFrom(from.k_);
  if (from.has_translation()) {
    mutable_translation()->::apollo::dreamview::Translation::MergeFrom(from.translation());
  }
}

void CameraConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.CameraConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraConfig::CopyFrom(const CameraConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.CameraConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraConfig::IsInitialized() const {
  return true;
}

void CameraConfig::Swap(CameraConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraConfig::InternalSwap(CameraConfig* other) {
  using std::swap;
  d_.InternalSwap(&other->d_);
  k_.InternalSwap(&other->k_);
  swap(translation_, other->translation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CameraConfig::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Progress::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Progress::kPercentageFieldNumber;
const int Progress::kLogStringFieldNumber;
const int Progress::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Progress::Progress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::scc_info_Progress.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Progress)
}
Progress::Progress(const Progress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  log_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_log_string()) {
    log_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_string_);
  }
  ::memcpy(&percentage_, &from.percentage_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&percentage_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Progress)
}

void Progress::SharedCtor() {
  log_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&percentage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&percentage_)) + sizeof(status_));
}

Progress::~Progress() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Progress)
  SharedDtor();
}

void Progress::SharedDtor() {
  log_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Progress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Progress::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Progress& Progress::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::scc_info_Progress.base);
  return *internal_default_instance();
}


void Progress::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Progress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    log_string_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&percentage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&percentage_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Progress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Progress)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float percentage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string log_string = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log_string().data(), static_cast<int>(this->log_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Progress.log_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.dreamview.Status status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::dreamview::Status_IsValid(value)) {
            set_status(static_cast< ::apollo::dreamview::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Progress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Progress)
  return false;
#undef DO_
}

void Progress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Progress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float percentage = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->percentage(), output);
  }

  // optional string log_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_string().data(), static_cast<int>(this->log_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Progress.log_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->log_string(), output);
  }

  // optional .apollo.dreamview.Status status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Progress)
}

::google::protobuf::uint8* Progress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Progress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float percentage = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->percentage(), target);
  }

  // optional string log_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_string().data(), static_cast<int>(this->log_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Progress.log_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->log_string(), target);
  }

  // optional .apollo.dreamview.Status status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Progress)
  return target;
}

size_t Progress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Progress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string log_string = 2;
    if (has_log_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_string());
    }

    // optional float percentage = 1;
    if (has_percentage()) {
      total_size += 1 + 4;
    }

    // optional .apollo.dreamview.Status status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Progress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Progress)
  GOOGLE_DCHECK_NE(&from, this);
  const Progress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Progress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Progress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Progress)
    MergeFrom(*source);
  }
}

void Progress::MergeFrom(const Progress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Progress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_log_string();
      log_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      percentage_ = from.percentage_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Progress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Progress::CopyFrom(const Progress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Progress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Progress::IsInitialized() const {
  return true;
}

void Progress::Swap(Progress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Progress::InternalSwap(Progress* other) {
  using std::swap;
  log_string_.Swap(&other->log_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(percentage_, other->percentage_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Progress::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PreprocessTable::InitAsDefaultInstance() {
  ::apollo::dreamview::_PreprocessTable_default_instance_._instance.get_mutable()->camera_config_ = const_cast< ::apollo::dreamview::CameraConfig*>(
      ::apollo::dreamview::CameraConfig::internal_default_instance());
  ::apollo::dreamview::_PreprocessTable_default_instance_._instance.get_mutable()->progress_ = const_cast< ::apollo::dreamview::Progress*>(
      ::apollo::dreamview::Progress::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreprocessTable::kLidarConfigFieldNumber;
const int PreprocessTable::kCameraConfigFieldNumber;
const int PreprocessTable::kMainSensorFieldNumber;
const int PreprocessTable::kProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreprocessTable::PreprocessTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::scc_info_PreprocessTable.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.PreprocessTable)
}
PreprocessTable::PreprocessTable(const PreprocessTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      lidar_config_(from.lidar_config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  main_sensor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_main_sensor()) {
    main_sensor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.main_sensor_);
  }
  if (from.has_camera_config()) {
    camera_config_ = new ::apollo::dreamview::CameraConfig(*from.camera_config_);
  } else {
    camera_config_ = NULL;
  }
  if (from.has_progress()) {
    progress_ = new ::apollo::dreamview::Progress(*from.progress_);
  } else {
    progress_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.PreprocessTable)
}

void PreprocessTable::SharedCtor() {
  main_sensor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&camera_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_) -
      reinterpret_cast<char*>(&camera_config_)) + sizeof(progress_));
}

PreprocessTable::~PreprocessTable() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.PreprocessTable)
  SharedDtor();
}

void PreprocessTable::SharedDtor() {
  main_sensor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete camera_config_;
  if (this != internal_default_instance()) delete progress_;
}

void PreprocessTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PreprocessTable::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PreprocessTable& PreprocessTable::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::scc_info_PreprocessTable.base);
  return *internal_default_instance();
}


void PreprocessTable::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.PreprocessTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lidar_config_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      main_sensor_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(camera_config_ != NULL);
      camera_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(progress_ != NULL);
      progress_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PreprocessTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.PreprocessTable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.dreamview.LidarConfig lidar_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lidar_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.dreamview.CameraConfig camera_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string main_sensor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_main_sensor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->main_sensor().data(), static_cast<int>(this->main_sensor().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.PreprocessTable.main_sensor");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.dreamview.Progress progress = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_progress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.PreprocessTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.PreprocessTable)
  return false;
#undef DO_
}

void PreprocessTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.PreprocessTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dreamview.LidarConfig lidar_config = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lidar_config_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->lidar_config(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.dreamview.CameraConfig camera_config = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_camera_config(), output);
  }

  // optional string main_sensor = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->main_sensor().data(), static_cast<int>(this->main_sensor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.PreprocessTable.main_sensor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->main_sensor(), output);
  }

  // optional .apollo.dreamview.Progress progress = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_progress(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.PreprocessTable)
}

::google::protobuf::uint8* PreprocessTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.PreprocessTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dreamview.LidarConfig lidar_config = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lidar_config_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lidar_config(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.dreamview.CameraConfig camera_config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_camera_config(), deterministic, target);
  }

  // optional string main_sensor = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->main_sensor().data(), static_cast<int>(this->main_sensor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.PreprocessTable.main_sensor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->main_sensor(), target);
  }

  // optional .apollo.dreamview.Progress progress = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_progress(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.PreprocessTable)
  return target;
}

size_t PreprocessTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.PreprocessTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.dreamview.LidarConfig lidar_config = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lidar_config_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lidar_config(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string main_sensor = 3;
    if (has_main_sensor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->main_sensor());
    }

    // optional .apollo.dreamview.CameraConfig camera_config = 2;
    if (has_camera_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *camera_config_);
    }

    // optional .apollo.dreamview.Progress progress = 4;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *progress_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreprocessTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.PreprocessTable)
  GOOGLE_DCHECK_NE(&from, this);
  const PreprocessTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PreprocessTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.PreprocessTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.PreprocessTable)
    MergeFrom(*source);
  }
}

void PreprocessTable::MergeFrom(const PreprocessTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.PreprocessTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lidar_config_.MergeFrom(from.lidar_config_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_main_sensor();
      main_sensor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.main_sensor_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_camera_config()->::apollo::dreamview::CameraConfig::MergeFrom(from.camera_config());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_progress()->::apollo::dreamview::Progress::MergeFrom(from.progress());
    }
  }
}

void PreprocessTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.PreprocessTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreprocessTable::CopyFrom(const PreprocessTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.PreprocessTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreprocessTable::IsInitialized() const {
  return true;
}

void PreprocessTable::Swap(PreprocessTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreprocessTable::InternalSwap(PreprocessTable* other) {
  using std::swap;
  CastToBase(&lidar_config_)->InternalSwap(CastToBase(&other->lidar_config_));
  main_sensor_.Swap(&other->main_sensor_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(camera_config_, other->camera_config_);
  swap(progress_, other->progress_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PreprocessTable::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dreamview
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::Translation* Arena::CreateMaybeMessage< ::apollo::dreamview::Translation >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Translation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::LidarConfig* Arena::CreateMaybeMessage< ::apollo::dreamview::LidarConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::LidarConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::CameraConfig* Arena::CreateMaybeMessage< ::apollo::dreamview::CameraConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::CameraConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::Progress* Arena::CreateMaybeMessage< ::apollo::dreamview::Progress >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Progress >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::PreprocessTable* Arena::CreateMaybeMessage< ::apollo::dreamview::PreprocessTable >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::PreprocessTable >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
