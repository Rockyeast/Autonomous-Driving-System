// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/preprocess_table.proto

#ifndef PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto
#define PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto 

namespace protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto
namespace apollo {
namespace dreamview {
class CameraConfig;
class CameraConfigDefaultTypeInternal;
extern CameraConfigDefaultTypeInternal _CameraConfig_default_instance_;
class LidarConfig;
class LidarConfigDefaultTypeInternal;
extern LidarConfigDefaultTypeInternal _LidarConfig_default_instance_;
class PreprocessTable;
class PreprocessTableDefaultTypeInternal;
extern PreprocessTableDefaultTypeInternal _PreprocessTable_default_instance_;
class Progress;
class ProgressDefaultTypeInternal;
extern ProgressDefaultTypeInternal _Progress_default_instance_;
class Translation;
class TranslationDefaultTypeInternal;
extern TranslationDefaultTypeInternal _Translation_default_instance_;
}  // namespace dreamview
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::dreamview::CameraConfig* Arena::CreateMaybeMessage<::apollo::dreamview::CameraConfig>(Arena*);
template<> ::apollo::dreamview::LidarConfig* Arena::CreateMaybeMessage<::apollo::dreamview::LidarConfig>(Arena*);
template<> ::apollo::dreamview::PreprocessTable* Arena::CreateMaybeMessage<::apollo::dreamview::PreprocessTable>(Arena*);
template<> ::apollo::dreamview::Progress* Arena::CreateMaybeMessage<::apollo::dreamview::Progress>(Arena*);
template<> ::apollo::dreamview::Translation* Arena::CreateMaybeMessage<::apollo::dreamview::Translation>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace dreamview {

enum Status {
  SUCCESS = 0,
  FAIL = 1,
  UNKNOWN = 2
};
bool Status_IsValid(int value);
const Status Status_MIN = SUCCESS;
const Status Status_MAX = UNKNOWN;
const int Status_ARRAYSIZE = Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_descriptor();
inline const ::std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_descriptor(), value);
}
inline bool Status_Parse(
    const ::std::string& name, Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class Translation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Translation) */ {
 public:
  Translation();
  virtual ~Translation();

  Translation(const Translation& from);

  inline Translation& operator=(const Translation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Translation(Translation&& from) noexcept
    : Translation() {
    *this = ::std::move(from);
  }

  inline Translation& operator=(Translation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Translation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Translation* internal_default_instance() {
    return reinterpret_cast<const Translation*>(
               &_Translation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Translation* other);
  friend void swap(Translation& a, Translation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Translation* New() const final {
    return CreateMaybeMessage<Translation>(NULL);
  }

  Translation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Translation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Translation& from);
  void MergeFrom(const Translation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Translation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Translation)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LidarConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.LidarConfig) */ {
 public:
  LidarConfig();
  virtual ~LidarConfig();

  LidarConfig(const LidarConfig& from);

  inline LidarConfig& operator=(const LidarConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LidarConfig(LidarConfig&& from) noexcept
    : LidarConfig() {
    *this = ::std::move(from);
  }

  inline LidarConfig& operator=(LidarConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LidarConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LidarConfig* internal_default_instance() {
    return reinterpret_cast<const LidarConfig*>(
               &_LidarConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LidarConfig* other);
  friend void swap(LidarConfig& a, LidarConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LidarConfig* New() const final {
    return CreateMaybeMessage<LidarConfig>(NULL);
  }

  LidarConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LidarConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LidarConfig& from);
  void MergeFrom(const LidarConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sensor_name = 1;
  bool has_sensor_name() const;
  void clear_sensor_name();
  static const int kSensorNameFieldNumber = 1;
  const ::std::string& sensor_name() const;
  void set_sensor_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sensor_name(::std::string&& value);
  #endif
  void set_sensor_name(const char* value);
  void set_sensor_name(const char* value, size_t size);
  ::std::string* mutable_sensor_name();
  ::std::string* release_sensor_name();
  void set_allocated_sensor_name(::std::string* sensor_name);

  // optional .apollo.dreamview.Translation translation = 2;
  bool has_translation() const;
  void clear_translation();
  static const int kTranslationFieldNumber = 2;
  private:
  const ::apollo::dreamview::Translation& _internal_translation() const;
  public:
  const ::apollo::dreamview::Translation& translation() const;
  ::apollo::dreamview::Translation* release_translation();
  ::apollo::dreamview::Translation* mutable_translation();
  void set_allocated_translation(::apollo::dreamview::Translation* translation);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.LidarConfig)
 private:
  void set_has_sensor_name();
  void clear_has_sensor_name();
  void set_has_translation();
  void clear_has_translation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr sensor_name_;
  ::apollo::dreamview::Translation* translation_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CameraConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.CameraConfig) */ {
 public:
  CameraConfig();
  virtual ~CameraConfig();

  CameraConfig(const CameraConfig& from);

  inline CameraConfig& operator=(const CameraConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraConfig(CameraConfig&& from) noexcept
    : CameraConfig() {
    *this = ::std::move(from);
  }

  inline CameraConfig& operator=(CameraConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraConfig* internal_default_instance() {
    return reinterpret_cast<const CameraConfig*>(
               &_CameraConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CameraConfig* other);
  friend void swap(CameraConfig& a, CameraConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraConfig* New() const final {
    return CreateMaybeMessage<CameraConfig>(NULL);
  }

  CameraConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraConfig& from);
  void MergeFrom(const CameraConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float D = 2;
  int d_size() const;
  void clear_d();
  static const int kDFieldNumber = 2;
  float d(int index) const;
  void set_d(int index, float value);
  void add_d(float value);
  const ::google::protobuf::RepeatedField< float >&
      d() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_d();

  // repeated float K = 3;
  int k_size() const;
  void clear_k();
  static const int kKFieldNumber = 3;
  float k(int index) const;
  void set_k(int index, float value);
  void add_k(float value);
  const ::google::protobuf::RepeatedField< float >&
      k() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_k();

  // optional .apollo.dreamview.Translation translation = 1;
  bool has_translation() const;
  void clear_translation();
  static const int kTranslationFieldNumber = 1;
  private:
  const ::apollo::dreamview::Translation& _internal_translation() const;
  public:
  const ::apollo::dreamview::Translation& translation() const;
  ::apollo::dreamview::Translation* release_translation();
  ::apollo::dreamview::Translation* mutable_translation();
  void set_allocated_translation(::apollo::dreamview::Translation* translation);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.CameraConfig)
 private:
  void set_has_translation();
  void clear_has_translation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< float > d_;
  ::google::protobuf::RepeatedField< float > k_;
  ::apollo::dreamview::Translation* translation_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Progress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Progress) */ {
 public:
  Progress();
  virtual ~Progress();

  Progress(const Progress& from);

  inline Progress& operator=(const Progress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Progress(Progress&& from) noexcept
    : Progress() {
    *this = ::std::move(from);
  }

  inline Progress& operator=(Progress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Progress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Progress* internal_default_instance() {
    return reinterpret_cast<const Progress*>(
               &_Progress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Progress* other);
  friend void swap(Progress& a, Progress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Progress* New() const final {
    return CreateMaybeMessage<Progress>(NULL);
  }

  Progress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Progress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Progress& from);
  void MergeFrom(const Progress& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Progress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string log_string = 2;
  bool has_log_string() const;
  void clear_log_string();
  static const int kLogStringFieldNumber = 2;
  const ::std::string& log_string() const;
  void set_log_string(const ::std::string& value);
  #if LANG_CXX11
  void set_log_string(::std::string&& value);
  #endif
  void set_log_string(const char* value);
  void set_log_string(const char* value, size_t size);
  ::std::string* mutable_log_string();
  ::std::string* release_log_string();
  void set_allocated_log_string(::std::string* log_string);

  // optional float percentage = 1;
  bool has_percentage() const;
  void clear_percentage();
  static const int kPercentageFieldNumber = 1;
  float percentage() const;
  void set_percentage(float value);

  // optional .apollo.dreamview.Status status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::apollo::dreamview::Status status() const;
  void set_status(::apollo::dreamview::Status value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Progress)
 private:
  void set_has_percentage();
  void clear_has_percentage();
  void set_has_log_string();
  void clear_has_log_string();
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr log_string_;
  float percentage_;
  int status_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PreprocessTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.PreprocessTable) */ {
 public:
  PreprocessTable();
  virtual ~PreprocessTable();

  PreprocessTable(const PreprocessTable& from);

  inline PreprocessTable& operator=(const PreprocessTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PreprocessTable(PreprocessTable&& from) noexcept
    : PreprocessTable() {
    *this = ::std::move(from);
  }

  inline PreprocessTable& operator=(PreprocessTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PreprocessTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreprocessTable* internal_default_instance() {
    return reinterpret_cast<const PreprocessTable*>(
               &_PreprocessTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PreprocessTable* other);
  friend void swap(PreprocessTable& a, PreprocessTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PreprocessTable* New() const final {
    return CreateMaybeMessage<PreprocessTable>(NULL);
  }

  PreprocessTable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PreprocessTable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PreprocessTable& from);
  void MergeFrom(const PreprocessTable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreprocessTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.dreamview.LidarConfig lidar_config = 1;
  int lidar_config_size() const;
  void clear_lidar_config();
  static const int kLidarConfigFieldNumber = 1;
  ::apollo::dreamview::LidarConfig* mutable_lidar_config(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::LidarConfig >*
      mutable_lidar_config();
  const ::apollo::dreamview::LidarConfig& lidar_config(int index) const;
  ::apollo::dreamview::LidarConfig* add_lidar_config();
  const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::LidarConfig >&
      lidar_config() const;

  // optional string main_sensor = 3;
  bool has_main_sensor() const;
  void clear_main_sensor();
  static const int kMainSensorFieldNumber = 3;
  const ::std::string& main_sensor() const;
  void set_main_sensor(const ::std::string& value);
  #if LANG_CXX11
  void set_main_sensor(::std::string&& value);
  #endif
  void set_main_sensor(const char* value);
  void set_main_sensor(const char* value, size_t size);
  ::std::string* mutable_main_sensor();
  ::std::string* release_main_sensor();
  void set_allocated_main_sensor(::std::string* main_sensor);

  // optional .apollo.dreamview.CameraConfig camera_config = 2;
  bool has_camera_config() const;
  void clear_camera_config();
  static const int kCameraConfigFieldNumber = 2;
  private:
  const ::apollo::dreamview::CameraConfig& _internal_camera_config() const;
  public:
  const ::apollo::dreamview::CameraConfig& camera_config() const;
  ::apollo::dreamview::CameraConfig* release_camera_config();
  ::apollo::dreamview::CameraConfig* mutable_camera_config();
  void set_allocated_camera_config(::apollo::dreamview::CameraConfig* camera_config);

  // optional .apollo.dreamview.Progress progress = 4;
  bool has_progress() const;
  void clear_progress();
  static const int kProgressFieldNumber = 4;
  private:
  const ::apollo::dreamview::Progress& _internal_progress() const;
  public:
  const ::apollo::dreamview::Progress& progress() const;
  ::apollo::dreamview::Progress* release_progress();
  ::apollo::dreamview::Progress* mutable_progress();
  void set_allocated_progress(::apollo::dreamview::Progress* progress);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.PreprocessTable)
 private:
  void set_has_camera_config();
  void clear_has_camera_config();
  void set_has_main_sensor();
  void clear_has_main_sensor();
  void set_has_progress();
  void clear_has_progress();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::LidarConfig > lidar_config_;
  ::google::protobuf::internal::ArenaStringPtr main_sensor_;
  ::apollo::dreamview::CameraConfig* camera_config_;
  ::apollo::dreamview::Progress* progress_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Translation

// optional float x = 1;
inline bool Translation::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Translation::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Translation::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Translation::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Translation::x() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Translation.x)
  return x_;
}
inline void Translation::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Translation.x)
}

// optional float y = 2;
inline bool Translation::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Translation::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Translation::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Translation::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Translation::y() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Translation.y)
  return y_;
}
inline void Translation::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Translation.y)
}

// optional float z = 3;
inline bool Translation::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Translation::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Translation::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Translation::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Translation::z() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Translation.z)
  return z_;
}
inline void Translation::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Translation.z)
}

// -------------------------------------------------------------------

// LidarConfig

// optional string sensor_name = 1;
inline bool LidarConfig::has_sensor_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LidarConfig::set_has_sensor_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LidarConfig::clear_has_sensor_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LidarConfig::clear_sensor_name() {
  sensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sensor_name();
}
inline const ::std::string& LidarConfig::sensor_name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.LidarConfig.sensor_name)
  return sensor_name_.GetNoArena();
}
inline void LidarConfig::set_sensor_name(const ::std::string& value) {
  set_has_sensor_name();
  sensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.LidarConfig.sensor_name)
}
#if LANG_CXX11
inline void LidarConfig::set_sensor_name(::std::string&& value) {
  set_has_sensor_name();
  sensor_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.LidarConfig.sensor_name)
}
#endif
inline void LidarConfig::set_sensor_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sensor_name();
  sensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.LidarConfig.sensor_name)
}
inline void LidarConfig::set_sensor_name(const char* value, size_t size) {
  set_has_sensor_name();
  sensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.LidarConfig.sensor_name)
}
inline ::std::string* LidarConfig::mutable_sensor_name() {
  set_has_sensor_name();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.LidarConfig.sensor_name)
  return sensor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LidarConfig::release_sensor_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.LidarConfig.sensor_name)
  if (!has_sensor_name()) {
    return NULL;
  }
  clear_has_sensor_name();
  return sensor_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LidarConfig::set_allocated_sensor_name(::std::string* sensor_name) {
  if (sensor_name != NULL) {
    set_has_sensor_name();
  } else {
    clear_has_sensor_name();
  }
  sensor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.LidarConfig.sensor_name)
}

// optional .apollo.dreamview.Translation translation = 2;
inline bool LidarConfig::has_translation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LidarConfig::set_has_translation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LidarConfig::clear_has_translation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LidarConfig::clear_translation() {
  if (translation_ != NULL) translation_->Clear();
  clear_has_translation();
}
inline const ::apollo::dreamview::Translation& LidarConfig::_internal_translation() const {
  return *translation_;
}
inline const ::apollo::dreamview::Translation& LidarConfig::translation() const {
  const ::apollo::dreamview::Translation* p = translation_;
  // @@protoc_insertion_point(field_get:apollo.dreamview.LidarConfig.translation)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::dreamview::Translation*>(
      &::apollo::dreamview::_Translation_default_instance_);
}
inline ::apollo::dreamview::Translation* LidarConfig::release_translation() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.LidarConfig.translation)
  clear_has_translation();
  ::apollo::dreamview::Translation* temp = translation_;
  translation_ = NULL;
  return temp;
}
inline ::apollo::dreamview::Translation* LidarConfig::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::Translation>(GetArenaNoVirtual());
    translation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.LidarConfig.translation)
  return translation_;
}
inline void LidarConfig::set_allocated_translation(::apollo::dreamview::Translation* translation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete translation_;
  }
  if (translation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      translation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    set_has_translation();
  } else {
    clear_has_translation();
  }
  translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.LidarConfig.translation)
}

// -------------------------------------------------------------------

// CameraConfig

// optional .apollo.dreamview.Translation translation = 1;
inline bool CameraConfig::has_translation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraConfig::set_has_translation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraConfig::clear_has_translation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraConfig::clear_translation() {
  if (translation_ != NULL) translation_->Clear();
  clear_has_translation();
}
inline const ::apollo::dreamview::Translation& CameraConfig::_internal_translation() const {
  return *translation_;
}
inline const ::apollo::dreamview::Translation& CameraConfig::translation() const {
  const ::apollo::dreamview::Translation* p = translation_;
  // @@protoc_insertion_point(field_get:apollo.dreamview.CameraConfig.translation)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::dreamview::Translation*>(
      &::apollo::dreamview::_Translation_default_instance_);
}
inline ::apollo::dreamview::Translation* CameraConfig::release_translation() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.CameraConfig.translation)
  clear_has_translation();
  ::apollo::dreamview::Translation* temp = translation_;
  translation_ = NULL;
  return temp;
}
inline ::apollo::dreamview::Translation* CameraConfig::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::Translation>(GetArenaNoVirtual());
    translation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.CameraConfig.translation)
  return translation_;
}
inline void CameraConfig::set_allocated_translation(::apollo::dreamview::Translation* translation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete translation_;
  }
  if (translation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      translation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    set_has_translation();
  } else {
    clear_has_translation();
  }
  translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.CameraConfig.translation)
}

// repeated float D = 2;
inline int CameraConfig::d_size() const {
  return d_.size();
}
inline void CameraConfig::clear_d() {
  d_.Clear();
}
inline float CameraConfig::d(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CameraConfig.D)
  return d_.Get(index);
}
inline void CameraConfig::set_d(int index, float value) {
  d_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.CameraConfig.D)
}
inline void CameraConfig::add_d(float value) {
  d_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.CameraConfig.D)
}
inline const ::google::protobuf::RepeatedField< float >&
CameraConfig::d() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.CameraConfig.D)
  return d_;
}
inline ::google::protobuf::RepeatedField< float >*
CameraConfig::mutable_d() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.CameraConfig.D)
  return &d_;
}

// repeated float K = 3;
inline int CameraConfig::k_size() const {
  return k_.size();
}
inline void CameraConfig::clear_k() {
  k_.Clear();
}
inline float CameraConfig::k(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.CameraConfig.K)
  return k_.Get(index);
}
inline void CameraConfig::set_k(int index, float value) {
  k_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.CameraConfig.K)
}
inline void CameraConfig::add_k(float value) {
  k_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.CameraConfig.K)
}
inline const ::google::protobuf::RepeatedField< float >&
CameraConfig::k() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.CameraConfig.K)
  return k_;
}
inline ::google::protobuf::RepeatedField< float >*
CameraConfig::mutable_k() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.CameraConfig.K)
  return &k_;
}

// -------------------------------------------------------------------

// Progress

// optional float percentage = 1;
inline bool Progress::has_percentage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Progress::set_has_percentage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Progress::clear_has_percentage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Progress::clear_percentage() {
  percentage_ = 0;
  clear_has_percentage();
}
inline float Progress::percentage() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Progress.percentage)
  return percentage_;
}
inline void Progress::set_percentage(float value) {
  set_has_percentage();
  percentage_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Progress.percentage)
}

// optional string log_string = 2;
inline bool Progress::has_log_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Progress::set_has_log_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Progress::clear_has_log_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Progress::clear_log_string() {
  log_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log_string();
}
inline const ::std::string& Progress::log_string() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Progress.log_string)
  return log_string_.GetNoArena();
}
inline void Progress::set_log_string(const ::std::string& value) {
  set_has_log_string();
  log_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Progress.log_string)
}
#if LANG_CXX11
inline void Progress::set_log_string(::std::string&& value) {
  set_has_log_string();
  log_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.Progress.log_string)
}
#endif
inline void Progress::set_log_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_log_string();
  log_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Progress.log_string)
}
inline void Progress::set_log_string(const char* value, size_t size) {
  set_has_log_string();
  log_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Progress.log_string)
}
inline ::std::string* Progress::mutable_log_string() {
  set_has_log_string();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Progress.log_string)
  return log_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Progress::release_log_string() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Progress.log_string)
  if (!has_log_string()) {
    return NULL;
  }
  clear_has_log_string();
  return log_string_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Progress::set_allocated_log_string(::std::string* log_string) {
  if (log_string != NULL) {
    set_has_log_string();
  } else {
    clear_has_log_string();
  }
  log_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_string);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Progress.log_string)
}

// optional .apollo.dreamview.Status status = 3;
inline bool Progress::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Progress::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Progress::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Progress::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::apollo::dreamview::Status Progress::status() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Progress.status)
  return static_cast< ::apollo::dreamview::Status >(status_);
}
inline void Progress::set_status(::apollo::dreamview::Status value) {
  assert(::apollo::dreamview::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Progress.status)
}

// -------------------------------------------------------------------

// PreprocessTable

// repeated .apollo.dreamview.LidarConfig lidar_config = 1;
inline int PreprocessTable::lidar_config_size() const {
  return lidar_config_.size();
}
inline void PreprocessTable::clear_lidar_config() {
  lidar_config_.Clear();
}
inline ::apollo::dreamview::LidarConfig* PreprocessTable::mutable_lidar_config(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.PreprocessTable.lidar_config)
  return lidar_config_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::LidarConfig >*
PreprocessTable::mutable_lidar_config() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.PreprocessTable.lidar_config)
  return &lidar_config_;
}
inline const ::apollo::dreamview::LidarConfig& PreprocessTable::lidar_config(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PreprocessTable.lidar_config)
  return lidar_config_.Get(index);
}
inline ::apollo::dreamview::LidarConfig* PreprocessTable::add_lidar_config() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.PreprocessTable.lidar_config)
  return lidar_config_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::LidarConfig >&
PreprocessTable::lidar_config() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.PreprocessTable.lidar_config)
  return lidar_config_;
}

// optional .apollo.dreamview.CameraConfig camera_config = 2;
inline bool PreprocessTable::has_camera_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PreprocessTable::set_has_camera_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PreprocessTable::clear_has_camera_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PreprocessTable::clear_camera_config() {
  if (camera_config_ != NULL) camera_config_->Clear();
  clear_has_camera_config();
}
inline const ::apollo::dreamview::CameraConfig& PreprocessTable::_internal_camera_config() const {
  return *camera_config_;
}
inline const ::apollo::dreamview::CameraConfig& PreprocessTable::camera_config() const {
  const ::apollo::dreamview::CameraConfig* p = camera_config_;
  // @@protoc_insertion_point(field_get:apollo.dreamview.PreprocessTable.camera_config)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::dreamview::CameraConfig*>(
      &::apollo::dreamview::_CameraConfig_default_instance_);
}
inline ::apollo::dreamview::CameraConfig* PreprocessTable::release_camera_config() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.PreprocessTable.camera_config)
  clear_has_camera_config();
  ::apollo::dreamview::CameraConfig* temp = camera_config_;
  camera_config_ = NULL;
  return temp;
}
inline ::apollo::dreamview::CameraConfig* PreprocessTable::mutable_camera_config() {
  set_has_camera_config();
  if (camera_config_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::CameraConfig>(GetArenaNoVirtual());
    camera_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.PreprocessTable.camera_config)
  return camera_config_;
}
inline void PreprocessTable::set_allocated_camera_config(::apollo::dreamview::CameraConfig* camera_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete camera_config_;
  }
  if (camera_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      camera_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, camera_config, submessage_arena);
    }
    set_has_camera_config();
  } else {
    clear_has_camera_config();
  }
  camera_config_ = camera_config;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.PreprocessTable.camera_config)
}

// optional string main_sensor = 3;
inline bool PreprocessTable::has_main_sensor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PreprocessTable::set_has_main_sensor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PreprocessTable::clear_has_main_sensor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PreprocessTable::clear_main_sensor() {
  main_sensor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_main_sensor();
}
inline const ::std::string& PreprocessTable::main_sensor() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.PreprocessTable.main_sensor)
  return main_sensor_.GetNoArena();
}
inline void PreprocessTable::set_main_sensor(const ::std::string& value) {
  set_has_main_sensor();
  main_sensor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.PreprocessTable.main_sensor)
}
#if LANG_CXX11
inline void PreprocessTable::set_main_sensor(::std::string&& value) {
  set_has_main_sensor();
  main_sensor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.PreprocessTable.main_sensor)
}
#endif
inline void PreprocessTable::set_main_sensor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_main_sensor();
  main_sensor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.PreprocessTable.main_sensor)
}
inline void PreprocessTable::set_main_sensor(const char* value, size_t size) {
  set_has_main_sensor();
  main_sensor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.PreprocessTable.main_sensor)
}
inline ::std::string* PreprocessTable::mutable_main_sensor() {
  set_has_main_sensor();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.PreprocessTable.main_sensor)
  return main_sensor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PreprocessTable::release_main_sensor() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.PreprocessTable.main_sensor)
  if (!has_main_sensor()) {
    return NULL;
  }
  clear_has_main_sensor();
  return main_sensor_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PreprocessTable::set_allocated_main_sensor(::std::string* main_sensor) {
  if (main_sensor != NULL) {
    set_has_main_sensor();
  } else {
    clear_has_main_sensor();
  }
  main_sensor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), main_sensor);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.PreprocessTable.main_sensor)
}

// optional .apollo.dreamview.Progress progress = 4;
inline bool PreprocessTable::has_progress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PreprocessTable::set_has_progress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PreprocessTable::clear_has_progress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PreprocessTable::clear_progress() {
  if (progress_ != NULL) progress_->Clear();
  clear_has_progress();
}
inline const ::apollo::dreamview::Progress& PreprocessTable::_internal_progress() const {
  return *progress_;
}
inline const ::apollo::dreamview::Progress& PreprocessTable::progress() const {
  const ::apollo::dreamview::Progress* p = progress_;
  // @@protoc_insertion_point(field_get:apollo.dreamview.PreprocessTable.progress)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::dreamview::Progress*>(
      &::apollo::dreamview::_Progress_default_instance_);
}
inline ::apollo::dreamview::Progress* PreprocessTable::release_progress() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.PreprocessTable.progress)
  clear_has_progress();
  ::apollo::dreamview::Progress* temp = progress_;
  progress_ = NULL;
  return temp;
}
inline ::apollo::dreamview::Progress* PreprocessTable::mutable_progress() {
  set_has_progress();
  if (progress_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::dreamview::Progress>(GetArenaNoVirtual());
    progress_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.PreprocessTable.progress)
  return progress_;
}
inline void PreprocessTable::set_allocated_progress(::apollo::dreamview::Progress* progress) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete progress_;
  }
  if (progress) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      progress = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, progress, submessage_arena);
    }
    set_has_progress();
  } else {
    clear_has_progress();
  }
  progress_ = progress;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.PreprocessTable.progress)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::dreamview::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::dreamview::Status>() {
  return ::apollo::dreamview::Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fpreprocess_5ftable_2eproto
