// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/simulation_world.proto

#include "modules/dreamview/proto/simulation_world.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MonitorMessageItem;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MonitorMessage;
}  // namespace protobuf_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto
namespace protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GaussianInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Path;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TrajectoryPoint;
}  // namespace protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto
namespace protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DelaysInMs;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Latency;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MapElementIds;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SimulationWorld_StoriesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ControlData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Decision;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Notification;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PolygonPoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Prediction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RoutePath;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SensorMeasurements;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SimulationWorld_LatencyEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SimulationWorld_SensorMeasurementsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_Object;
}  // namespace protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto
namespace protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_V2XInformation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LaneMarkers;
}  // namespace protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto
namespace protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto ::google::protobuf::internal::SCCInfo<22> scc_info_PlanningData;
}  // namespace protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto
namespace protobuf_modules_2fprediction_2fproto_2ffeature_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2ffeature_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ObstacleInteractiveTag;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2ffeature_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ObstaclePriority;
}  // namespace protobuf_modules_2fprediction_2fproto_2ffeature_2eproto
namespace apollo {
namespace dreamview {
class PolygonPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PolygonPoint>
      _instance;
} _PolygonPoint_default_instance_;
class PredictionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Prediction>
      _instance;
} _Prediction_default_instance_;
class DecisionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Decision>
      _instance;
} _Decision_default_instance_;
class ObjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Object>
      _instance;
} _Object_default_instance_;
class DelaysInMsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DelaysInMs>
      _instance;
} _DelaysInMs_default_instance_;
class RoutePathDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoutePath>
      _instance;
} _RoutePath_default_instance_;
class LatencyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Latency>
      _instance;
} _Latency_default_instance_;
class MapElementIdsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapElementIds>
      _instance;
} _MapElementIds_default_instance_;
class ControlDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ControlData>
      _instance;
} _ControlData_default_instance_;
class NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Notification>
      _instance;
} _Notification_default_instance_;
class SensorMeasurementsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorMeasurements>
      _instance;
} _SensorMeasurements_default_instance_;
class SimulationWorld_LatencyEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimulationWorld_LatencyEntry_DoNotUse>
      _instance;
} _SimulationWorld_LatencyEntry_DoNotUse_default_instance_;
class SimulationWorld_StoriesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimulationWorld_StoriesEntry_DoNotUse>
      _instance;
} _SimulationWorld_StoriesEntry_DoNotUse_default_instance_;
class SimulationWorld_SensorMeasurementsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimulationWorld_SensorMeasurementsEntry_DoNotUse>
      _instance;
} _SimulationWorld_SensorMeasurementsEntry_DoNotUse_default_instance_;
class SimulationWorldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimulationWorld>
      _instance;
} _SimulationWorld_default_instance_;
}  // namespace dreamview
}  // namespace apollo
namespace protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto {
static void InitDefaultsPolygonPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_PolygonPoint_default_instance_;
    new (ptr) ::apollo::dreamview::PolygonPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::PolygonPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PolygonPoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPolygonPoint}, {
      &protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::scc_info_GaussianInfo.base,}};

static void InitDefaultsPrediction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Prediction_default_instance_;
    new (ptr) ::apollo::dreamview::Prediction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Prediction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Prediction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPrediction}, {
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_PolygonPoint.base,}};

static void InitDefaultsDecision() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Decision_default_instance_;
    new (ptr) ::apollo::dreamview::Decision();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Decision::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Decision =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDecision}, {
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_PolygonPoint.base,}};

static void InitDefaultsObject() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Object_default_instance_;
    new (ptr) ::apollo::dreamview::Object();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Object::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_Object =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsObject}, {
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_PolygonPoint.base,
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_Decision.base,
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_Prediction.base,
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_ObstaclePriority.base,
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_ObstacleInteractiveTag.base,
      &protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::scc_info_V2XInformation.base,}};

static void InitDefaultsDelaysInMs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_DelaysInMs_default_instance_;
    new (ptr) ::apollo::dreamview::DelaysInMs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::DelaysInMs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DelaysInMs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDelaysInMs}, {}};

static void InitDefaultsRoutePath() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_RoutePath_default_instance_;
    new (ptr) ::apollo::dreamview::RoutePath();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::RoutePath::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RoutePath =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRoutePath}, {
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_PolygonPoint.base,}};

static void InitDefaultsLatency() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Latency_default_instance_;
    new (ptr) ::apollo::dreamview::Latency();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Latency::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Latency =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLatency}, {}};

static void InitDefaultsMapElementIds() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_MapElementIds_default_instance_;
    new (ptr) ::apollo::dreamview::MapElementIds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::MapElementIds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MapElementIds =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMapElementIds}, {}};

static void InitDefaultsControlData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_ControlData_default_instance_;
    new (ptr) ::apollo::dreamview::ControlData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::ControlData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ControlData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsControlData}, {
      &protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::scc_info_TrajectoryPoint.base,}};

static void InitDefaultsNotification() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Notification_default_instance_;
    new (ptr) ::apollo::dreamview::Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Notification =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNotification}, {
      &protobuf_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto::scc_info_MonitorMessageItem.base,}};

static void InitDefaultsSensorMeasurements() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_SensorMeasurements_default_instance_;
    new (ptr) ::apollo::dreamview::SensorMeasurements();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::SensorMeasurements::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SensorMeasurements =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSensorMeasurements}, {
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_Object.base,}};

static void InitDefaultsSimulationWorld_LatencyEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_SimulationWorld_LatencyEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse();
  }
  ::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SimulationWorld_LatencyEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSimulationWorld_LatencyEntry_DoNotUse}, {
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_Latency.base,}};

static void InitDefaultsSimulationWorld_StoriesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_SimulationWorld_StoriesEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::SimulationWorld_StoriesEntry_DoNotUse();
  }
  ::apollo::dreamview::SimulationWorld_StoriesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SimulationWorld_StoriesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSimulationWorld_StoriesEntry_DoNotUse}, {}};

static void InitDefaultsSimulationWorld_SensorMeasurementsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_SimulationWorld_SensorMeasurementsEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::SimulationWorld_SensorMeasurementsEntry_DoNotUse();
  }
  ::apollo::dreamview::SimulationWorld_SensorMeasurementsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SimulationWorld_SensorMeasurementsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSimulationWorld_SensorMeasurementsEntry_DoNotUse}, {
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_SensorMeasurements.base,}};

static void InitDefaultsSimulationWorld() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_SimulationWorld_default_instance_;
    new (ptr) ::apollo::dreamview::SimulationWorld();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::SimulationWorld::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<13> scc_info_SimulationWorld =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 13, InitDefaultsSimulationWorld}, {
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_Object.base,
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_RoutePath.base,
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_DelaysInMs.base,
      &protobuf_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto::scc_info_MonitorMessage.base,
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_Notification.base,
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_SimulationWorld_LatencyEntry_DoNotUse.base,
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_MapElementIds.base,
      &protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::scc_info_PlanningData.base,
      &protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::scc_info_LaneMarkers.base,
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_ControlData.base,
      &protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::scc_info_Path.base,
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_SimulationWorld_StoriesEntry_DoNotUse.base,
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_SimulationWorld_SensorMeasurementsEntry_DoNotUse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PolygonPoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Prediction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Decision.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Object.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DelaysInMs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoutePath.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Latency.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapElementIds.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ControlData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Notification.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorMeasurements.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SimulationWorld_LatencyEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SimulationWorld_StoriesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SimulationWorld_SensorMeasurementsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SimulationWorld.base);
}

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::PolygonPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::PolygonPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::PolygonPoint, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::PolygonPoint, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::PolygonPoint, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::PolygonPoint, gaussian_info_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Prediction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Prediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Prediction, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Prediction, predicted_trajectory_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Decision, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Decision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Decision, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Decision, polygon_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Decision, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Decision, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Decision, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Decision, position_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Decision, position_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Decision, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Decision, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Decision, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Decision, stopreason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Decision, change_lane_type_),
  4,
  ~0u,
  0,
  1,
  2,
  3,
  6,
  8,
  9,
  10,
  7,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, polygon_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, position_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, position_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, speed_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, speed_jerk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, spin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, spin_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, spin_jerk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, speed_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, kappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, dkappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, signal_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, current_signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, decision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, yielded_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, throttle_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, brake_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, steering_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, steering_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, steering_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, battery_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, gear_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, disengage_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, sub_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, prediction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, obstacle_priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, interactive_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Object, v2x_info_),
  0,
  ~0u,
  5,
  6,
  7,
  8,
  9,
  32,
  33,
  34,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  28,
  ~0u,
  1,
  18,
  ~0u,
  26,
  19,
  20,
  21,
  22,
  23,
  30,
  31,
  24,
  25,
  27,
  ~0u,
  35,
  2,
  4,
  29,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, chassis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, localization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, perception_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, planning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, prediction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, traffic_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::DelaysInMs, control_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::RoutePath, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::RoutePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::RoutePath, point_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Latency, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Latency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Latency, timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Latency, total_time_ms_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::MapElementIds, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::MapElementIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::MapElementIds, lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::MapElementIds, crosswalk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::MapElementIds, junction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::MapElementIds, signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::MapElementIds, stop_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::MapElementIds, yield_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::MapElementIds, overlap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::MapElementIds, road_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::MapElementIds, clear_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::MapElementIds, parking_space_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::MapElementIds, speed_bump_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::MapElementIds, pnc_junction_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::ControlData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::ControlData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::ControlData, timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::ControlData, station_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::ControlData, lateral_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::ControlData, heading_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::ControlData, current_target_point_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Notification, timestamp_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Notification, item_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SensorMeasurements, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SensorMeasurements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SensorMeasurements, sensor_measurement_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_StoriesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_StoriesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_StoriesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_StoriesEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_SensorMeasurementsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_SensorMeasurementsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_SensorMeasurementsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld_SensorMeasurementsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, sequence_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, object_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, auto_driving_car_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, traffic_signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, route_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, routing_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, planning_trajectory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, main_stop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, main_decision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, monitor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, notification_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, engage_advice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, latency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, map_element_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, map_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, map_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, planning_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, gps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, lane_marker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, control_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, navigation_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, is_rss_safe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, shadow_localization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, perceived_signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, stories_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, sensor_measurements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::SimulationWorld, is_siren_on_),
  13,
  16,
  ~0u,
  1,
  2,
  ~0u,
  14,
  ~0u,
  3,
  4,
  15,
  5,
  6,
  ~0u,
  0,
  ~0u,
  7,
  18,
  19,
  8,
  9,
  10,
  11,
  ~0u,
  20,
  12,
  ~0u,
  ~0u,
  ~0u,
  17,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::apollo::dreamview::PolygonPoint)},
  { 13, 20, sizeof(::apollo::dreamview::Prediction)},
  { 22, 39, sizeof(::apollo::dreamview::Decision)},
  { 51, 96, sizeof(::apollo::dreamview::Object)},
  { 136, 148, sizeof(::apollo::dreamview::DelaysInMs)},
  { 155, 161, sizeof(::apollo::dreamview::RoutePath)},
  { 162, 169, sizeof(::apollo::dreamview::Latency)},
  { 171, 188, sizeof(::apollo::dreamview::MapElementIds)},
  { 200, 210, sizeof(::apollo::dreamview::ControlData)},
  { 215, 222, sizeof(::apollo::dreamview::Notification)},
  { 224, 230, sizeof(::apollo::dreamview::SensorMeasurements)},
  { 231, 238, sizeof(::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse)},
  { 240, 247, sizeof(::apollo::dreamview::SimulationWorld_StoriesEntry_DoNotUse)},
  { 249, 256, sizeof(::apollo::dreamview::SimulationWorld_SensorMeasurementsEntry_DoNotUse)},
  { 258, 293, sizeof(::apollo::dreamview::SimulationWorld)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_PolygonPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_Prediction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_Decision_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_Object_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_DelaysInMs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_RoutePath_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_Latency_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_MapElementIds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_ControlData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_SensorMeasurements_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_SimulationWorld_LatencyEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_SimulationWorld_StoriesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_SimulationWorld_SensorMeasurementsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_SimulationWorld_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/dreamview/proto/simulation_world.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n.modules/dreamview/proto/simulation_wor"
      "ld.proto\022\020apollo.dreamview\032\"modules/canb"
      "us/proto/chassis.proto\0322modules/common/m"
      "onitor_log/proto/monitor_log.proto\032$modu"
      "les/common/proto/pnc_point.proto\0322module"
      "s/perception/proto/perception_obstacle.p"
      "roto\032.modules/planning/proto/planning_in"
      "ternal.proto\032&modules/prediction/proto/f"
      "eature.proto\032#modules/routing/proto/rout"
      "ing.proto\"f\n\014PolygonPoint\022\t\n\001x\030\001 \001(\001\022\t\n\001"
      "y\030\002 \001(\001\022\014\n\001z\030\003 \001(\001:\0010\0222\n\rgaussian_info\030\004"
      " \001(\0132\033.apollo.common.GaussianInfo\"_\n\nPre"
      "diction\022\023\n\013probability\030\001 \001(\001\022<\n\024predicte"
      "d_trajectory\030\002 \003(\0132\036.apollo.dreamview.Po"
      "lygonPoint\"\304\006\n\010Decision\0225\n\004type\030\001 \001(\0162\037."
      "apollo.dreamview.Decision.Type:\006IGNORE\0225"
      "\n\rpolygon_point\030\002 \003(\0132\036.apollo.dreamview"
      ".PolygonPoint\022\017\n\007heading\030\003 \001(\001\022\020\n\010latitu"
      "de\030\004 \001(\001\022\021\n\tlongitude\030\005 \001(\001\022\022\n\nposition_"
      "x\030\006 \001(\001\022\022\n\nposition_y\030\007 \001(\001\022\023\n\006length\030\010 "
      "\001(\001:\0032.8\022\022\n\005width\030\t \001(\001:\0031.4\022\023\n\006height\030\n"
      " \001(\001:\0031.8\022=\n\nstopReason\030\013 \001(\0162).apollo.d"
      "reamview.Decision.StopReasonCode\0228\n\020chan"
      "ge_lane_type\030\014 \001(\0162\036.apollo.routing.Chan"
      "geLaneType\"Z\n\004Type\022\n\n\006IGNORE\020\000\022\010\n\004STOP\020\001"
      "\022\t\n\005NUDGE\020\002\022\t\n\005YIELD\020\003\022\014\n\010OVERTAKE\020\004\022\n\n\006"
      "FOLLOW\020\005\022\014\n\010SIDEPASS\020\006\"\330\002\n\016StopReasonCod"
      "e\022\034\n\030STOP_REASON_HEAD_VEHICLE\020\001\022\033\n\027STOP_"
      "REASON_DESTINATION\020\002\022\032\n\026STOP_REASON_PEDE"
      "STRIAN\020\003\022\030\n\024STOP_REASON_OBSTACLE\020\004\022\026\n\022ST"
      "OP_REASON_SIGNAL\020d\022\031\n\025STOP_REASON_STOP_S"
      "IGN\020e\022\032\n\026STOP_REASON_YIELD_SIGN\020f\022\032\n\026STO"
      "P_REASON_CLEAR_ZONE\020g\022\031\n\025STOP_REASON_CRO"
      "SSWALK\020h\022\031\n\025STOP_REASON_EMERGENCY\020i\022\031\n\025S"
      "TOP_REASON_NOT_READY\020j\022\031\n\025STOP_REASON_PU"
      "LL_OVER\020k\"\314\014\n\006Object\022\n\n\002id\030\001 \001(\t\0225\n\rpoly"
      "gon_point\030\002 \003(\0132\036.apollo.dreamview.Polyg"
      "onPoint\022\017\n\007heading\030\003 \001(\001\022\020\n\010latitude\030\004 \001"
      "(\001\022\021\n\tlongitude\030\005 \001(\001\022\022\n\nposition_x\030\006 \001("
      "\001\022\022\n\nposition_y\030\007 \001(\001\022\023\n\006length\030\010 \001(\001:\0032"
      ".8\022\022\n\005width\030\t \001(\001:\0031.4\022\023\n\006height\030\n \001(\001:\003"
      "1.8\022\r\n\005speed\030\013 \001(\001\022\032\n\022speed_acceleration"
      "\030\014 \001(\001\022\022\n\nspeed_jerk\030\r \001(\001\022\014\n\004spin\030\016 \001(\001"
      "\022\031\n\021spin_acceleration\030\017 \001(\001\022\021\n\tspin_jerk"
      "\030\020 \001(\001\022\025\n\rspeed_heading\030\021 \001(\001\022\r\n\005kappa\030\022"
      " \001(\001\022\016\n\006dkappa\030# \001(\001\022\022\n\nsignal_set\030\023 \003(\t"
      "\022\026\n\016current_signal\030\024 \001(\t\022\025\n\rtimestamp_se"
      "c\030\025 \001(\001\022,\n\010decision\030\026 \003(\0132\032.apollo.dream"
      "view.Decision\022\037\n\020yielded_obstacle\030  \001(\010:"
      "\005false\022\033\n\023throttle_percentage\030\027 \001(\001\022\030\n\020b"
      "rake_percentage\030\030 \001(\001\022\033\n\023steering_percen"
      "tage\030\031 \001(\001\022\026\n\016steering_angle\030\032 \001(\001\022\026\n\016st"
      "eering_ratio\030\033 \001(\001\022\032\n\022battery_percentage"
      "\030& \001(\005\022:\n\rgear_location\030\' \001(\0162#.apollo.c"
      "anbus.Chassis.GearPosition\022>\n\016disengage_"
      "type\030\034 \001(\0162&.apollo.dreamview.Object.Dis"
      "engageType\022+\n\004type\030\035 \001(\0162\035.apollo.dreamv"
      "iew.Object.Type\022\?\n\010sub_type\030\" \001(\0162-.apol"
      "lo.perception.PerceptionObstacle.SubType"
      "\0220\n\nprediction\030\036 \003(\0132\034.apollo.dreamview."
      "Prediction\022\025\n\nconfidence\030\037 \001(\001:\0011\022>\n\021obs"
      "tacle_priority\030! \001(\0132#.apollo.prediction"
      ".ObstaclePriority\022B\n\017interactive_tag\030( \001"
      "(\0132).apollo.prediction.ObstacleInteracti"
      "veTag\022J\n\006source\030$ \001(\0162,.apollo.perceptio"
      "n.PerceptionObstacle.Source:\014HOST_VEHICL"
      "E\0223\n\010v2x_info\030% \001(\0132!.apollo.perception."
      "V2XInformation\"\304\001\n\rDisengageType\022\022\n\016DISE"
      "NGAGE_NONE\020\000\022\025\n\021DISENGAGE_UNKNOWN\020\001\022\024\n\020D"
      "ISENGAGE_MANUAL\020\002\022\027\n\023DISENGAGE_EMERGENCY"
      "\020\003\022\035\n\031DISENGAGE_AUTO_STEER_ONLY\020\004\022\035\n\031DIS"
      "ENGAGE_AUTO_SPEED_ONLY\020\005\022\033\n\027DISENGAGE_CH"
      "ASSIS_ERROR\020\006\"\200\001\n\004Type\022\013\n\007UNKNOWN\020\000\022\023\n\017U"
      "NKNOWN_MOVABLE\020\001\022\025\n\021UNKNOWN_UNMOVABLE\020\002\022"
      "\016\n\nPEDESTRIAN\020\003\022\013\n\007BICYCLE\020\004\022\013\n\007VEHICLE\020"
      "\005\022\013\n\007VIRTUAL\020\006\022\010\n\004CIPV\020\007\"\236\001\n\nDelaysInMs\022"
      "\017\n\007chassis\030\001 \001(\001\022\024\n\014localization\030\003 \001(\001\022\033"
      "\n\023perception_obstacle\030\004 \001(\001\022\020\n\010planning\030"
      "\005 \001(\001\022\022\n\nprediction\030\007 \001(\001\022\025\n\rtraffic_lig"
      "ht\030\010 \001(\001\022\017\n\007control\030\t \001(\001\":\n\tRoutePath\022-"
      "\n\005point\030\001 \003(\0132\036.apollo.dreamview.Polygon"
      "Point\"7\n\007Latency\022\025\n\rtimestamp_sec\030\001 \001(\001\022"
      "\025\n\rtotal_time_ms\030\002 \001(\001\"\350\001\n\rMapElementIds"
      "\022\014\n\004lane\030\001 \003(\t\022\021\n\tcrosswalk\030\002 \003(\t\022\020\n\010jun"
      "ction\030\003 \003(\t\022\016\n\006signal\030\004 \003(\t\022\021\n\tstop_sign"
      "\030\005 \003(\t\022\r\n\005yield\030\006 \003(\t\022\017\n\007overlap\030\007 \003(\t\022\014"
      "\n\004road\030\010 \003(\t\022\022\n\nclear_area\030\t \003(\t\022\025\n\rpark"
      "ing_space\030\n \003(\t\022\022\n\nspeed_bump\030\013 \003(\t\022\024\n\014p"
      "nc_junction\030\014 \003(\t\"\247\001\n\013ControlData\022\025\n\rtim"
      "estamp_sec\030\001 \001(\001\022\025\n\rstation_error\030\002 \001(\001\022"
      "\025\n\rlateral_error\030\003 \001(\001\022\025\n\rheading_error\030"
      "\004 \001(\001\022<\n\024current_target_point\030\005 \001(\0132\036.ap"
      "ollo.common.TrajectoryPoint\"^\n\014Notificat"
      "ion\022\025\n\rtimestamp_sec\030\001 \001(\001\0227\n\004item\030\002 \001(\013"
      "2).apollo.common.monitor.MonitorMessageI"
      "tem\"J\n\022SensorMeasurements\0224\n\022sensor_meas"
      "urement\030\001 \003(\0132\030.apollo.dreamview.Object\""
      "\253\014\n\017SimulationWorld\022\021\n\ttimestamp\030\001 \001(\001\022\024"
      "\n\014sequence_num\030\002 \001(\r\022(\n\006object\030\003 \003(\0132\030.a"
      "pollo.dreamview.Object\0222\n\020auto_driving_c"
      "ar\030\004 \001(\0132\030.apollo.dreamview.Object\0220\n\016tr"
      "affic_signal\030\005 \001(\0132\030.apollo.dreamview.Ob"
      "ject\022/\n\nroute_path\030\006 \003(\0132\033.apollo.dreamv"
      "iew.RoutePath\022\024\n\014routing_time\030\007 \001(\001\0225\n\023p"
      "lanning_trajectory\030\010 \003(\0132\030.apollo.dreamv"
      "iew.Object\022/\n\tmain_stop\030\t \001(\0132\030.apollo.d"
      "reamview.ObjectB\002\030\001\022/\n\rmain_decision\030\n \001"
      "(\0132\030.apollo.dreamview.Object\022\023\n\013speed_li"
      "mit\030\013 \001(\001\022+\n\005delay\030\014 \001(\0132\034.apollo.dreamv"
      "iew.DelaysInMs\022:\n\007monitor\030\r \001(\0132%.apollo"
      ".common.monitor.MonitorMessageB\002\030\001\0224\n\014no"
      "tification\030\016 \003(\0132\036.apollo.dreamview.Noti"
      "fication\022\025\n\rengage_advice\030\017 \001(\t\022\?\n\007laten"
      "cy\030\020 \003(\0132..apollo.dreamview.SimulationWo"
      "rld.LatencyEntry\0228\n\017map_element_ids\030\021 \001("
      "\0132\037.apollo.dreamview.MapElementIds\022\020\n\010ma"
      "p_hash\030\022 \001(\004\022\022\n\nmap_radius\030\023 \001(\001\022=\n\rplan"
      "ning_data\030\024 \001(\0132&.apollo.planning_intern"
      "al.PlanningData\022%\n\003gps\030\025 \001(\0132\030.apollo.dr"
      "eamview.Object\0223\n\013lane_marker\030\026 \001(\0132\036.ap"
      "ollo.perception.LaneMarkers\0223\n\014control_d"
      "ata\030\027 \001(\0132\035.apollo.dreamview.ControlData"
      "\022,\n\017navigation_path\030\030 \003(\0132\023.apollo.commo"
      "n.Path\022\031\n\013is_rss_safe\030\031 \001(\010:\004true\0225\n\023sha"
      "dow_localization\030\032 \001(\0132\030.apollo.dreamvie"
      "w.Object\0222\n\020perceived_signal\030\033 \003(\0132\030.apo"
      "llo.dreamview.Object\022\?\n\007stories\030\034 \003(\0132.."
      "apollo.dreamview.SimulationWorld.Stories"
      "Entry\022V\n\023sensor_measurements\030\035 \003(\01329.apo"
      "llo.dreamview.SimulationWorld.SensorMeas"
      "urementsEntry\022\032\n\013is_siren_on\030\036 \001(\010:\005fals"
      "e\032I\n\014LatencyEntry\022\013\n\003key\030\001 \001(\t\022(\n\005value\030"
      "\002 \001(\0132\031.apollo.dreamview.Latency:\0028\001\032.\n\014"
      "StoriesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\010"
      ":\0028\001\032_\n\027SensorMeasurementsEntry\022\013\n\003key\030\001"
      " \001(\t\0223\n\005value\030\002 \001(\0132$.apollo.dreamview.S"
      "ensorMeasurements:\0028\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5461);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/dreamview/proto/simulation_world.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::AddDescriptors();
  ::protobuf_modules_2fcommon_2fmonitor_5flog_2fproto_2fmonitor_5flog_2eproto::AddDescriptors();
  ::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::AddDescriptors();
  ::protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::AddDescriptors();
  ::protobuf_modules_2fplanning_2fproto_2fplanning_5finternal_2eproto::AddDescriptors();
  ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::AddDescriptors();
  ::protobuf_modules_2frouting_2fproto_2frouting_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto
namespace apollo {
namespace dreamview {
const ::google::protobuf::EnumDescriptor* Decision_Type_descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_enum_descriptors[0];
}
bool Decision_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Decision_Type Decision::IGNORE;
const Decision_Type Decision::STOP;
const Decision_Type Decision::NUDGE;
const Decision_Type Decision::YIELD;
const Decision_Type Decision::OVERTAKE;
const Decision_Type Decision::FOLLOW;
const Decision_Type Decision::SIDEPASS;
const Decision_Type Decision::Type_MIN;
const Decision_Type Decision::Type_MAX;
const int Decision::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Decision_StopReasonCode_descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_enum_descriptors[1];
}
bool Decision_StopReasonCode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Decision_StopReasonCode Decision::STOP_REASON_HEAD_VEHICLE;
const Decision_StopReasonCode Decision::STOP_REASON_DESTINATION;
const Decision_StopReasonCode Decision::STOP_REASON_PEDESTRIAN;
const Decision_StopReasonCode Decision::STOP_REASON_OBSTACLE;
const Decision_StopReasonCode Decision::STOP_REASON_SIGNAL;
const Decision_StopReasonCode Decision::STOP_REASON_STOP_SIGN;
const Decision_StopReasonCode Decision::STOP_REASON_YIELD_SIGN;
const Decision_StopReasonCode Decision::STOP_REASON_CLEAR_ZONE;
const Decision_StopReasonCode Decision::STOP_REASON_CROSSWALK;
const Decision_StopReasonCode Decision::STOP_REASON_EMERGENCY;
const Decision_StopReasonCode Decision::STOP_REASON_NOT_READY;
const Decision_StopReasonCode Decision::STOP_REASON_PULL_OVER;
const Decision_StopReasonCode Decision::StopReasonCode_MIN;
const Decision_StopReasonCode Decision::StopReasonCode_MAX;
const int Decision::StopReasonCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Object_DisengageType_descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_enum_descriptors[2];
}
bool Object_DisengageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Object_DisengageType Object::DISENGAGE_NONE;
const Object_DisengageType Object::DISENGAGE_UNKNOWN;
const Object_DisengageType Object::DISENGAGE_MANUAL;
const Object_DisengageType Object::DISENGAGE_EMERGENCY;
const Object_DisengageType Object::DISENGAGE_AUTO_STEER_ONLY;
const Object_DisengageType Object::DISENGAGE_AUTO_SPEED_ONLY;
const Object_DisengageType Object::DISENGAGE_CHASSIS_ERROR;
const Object_DisengageType Object::DisengageType_MIN;
const Object_DisengageType Object::DisengageType_MAX;
const int Object::DisengageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Object_Type_descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_enum_descriptors[3];
}
bool Object_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Object_Type Object::UNKNOWN;
const Object_Type Object::UNKNOWN_MOVABLE;
const Object_Type Object::UNKNOWN_UNMOVABLE;
const Object_Type Object::PEDESTRIAN;
const Object_Type Object::BICYCLE;
const Object_Type Object::VEHICLE;
const Object_Type Object::VIRTUAL;
const Object_Type Object::CIPV;
const Object_Type Object::Type_MIN;
const Object_Type Object::Type_MAX;
const int Object::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void PolygonPoint::InitAsDefaultInstance() {
  ::apollo::dreamview::_PolygonPoint_default_instance_._instance.get_mutable()->gaussian_info_ = const_cast< ::apollo::common::GaussianInfo*>(
      ::apollo::common::GaussianInfo::internal_default_instance());
}
void PolygonPoint::clear_gaussian_info() {
  if (gaussian_info_ != NULL) gaussian_info_->Clear();
  clear_has_gaussian_info();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolygonPoint::kXFieldNumber;
const int PolygonPoint::kYFieldNumber;
const int PolygonPoint::kZFieldNumber;
const int PolygonPoint::kGaussianInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolygonPoint::PolygonPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_PolygonPoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.PolygonPoint)
}
PolygonPoint::PolygonPoint(const PolygonPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gaussian_info()) {
    gaussian_info_ = new ::apollo::common::GaussianInfo(*from.gaussian_info_);
  } else {
    gaussian_info_ = NULL;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.PolygonPoint)
}

void PolygonPoint::SharedCtor() {
  ::memset(&gaussian_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&gaussian_info_)) + sizeof(z_));
}

PolygonPoint::~PolygonPoint() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.PolygonPoint)
  SharedDtor();
}

void PolygonPoint::SharedDtor() {
  if (this != internal_default_instance()) delete gaussian_info_;
}

void PolygonPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PolygonPoint::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PolygonPoint& PolygonPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_PolygonPoint.base);
  return *internal_default_instance();
}


void PolygonPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.PolygonPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(gaussian_info_ != NULL);
    gaussian_info_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PolygonPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.PolygonPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.GaussianInfo gaussian_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gaussian_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.PolygonPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.PolygonPoint)
  return false;
#undef DO_
}

void PolygonPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.PolygonPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional .apollo.common.GaussianInfo gaussian_info = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_gaussian_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.PolygonPoint)
}

::google::protobuf::uint8* PolygonPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.PolygonPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional .apollo.common.GaussianInfo gaussian_info = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_gaussian_info(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.PolygonPoint)
  return target;
}

size_t PolygonPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.PolygonPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.common.GaussianInfo gaussian_info = 4;
    if (has_gaussian_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gaussian_info_);
    }

    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolygonPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.PolygonPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PolygonPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PolygonPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.PolygonPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.PolygonPoint)
    MergeFrom(*source);
  }
}

void PolygonPoint::MergeFrom(const PolygonPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.PolygonPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_gaussian_info()->::apollo::common::GaussianInfo::MergeFrom(from.gaussian_info());
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PolygonPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.PolygonPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolygonPoint::CopyFrom(const PolygonPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.PolygonPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolygonPoint::IsInitialized() const {
  return true;
}

void PolygonPoint::Swap(PolygonPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolygonPoint::InternalSwap(PolygonPoint* other) {
  using std::swap;
  swap(gaussian_info_, other->gaussian_info_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PolygonPoint::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Prediction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Prediction::kProbabilityFieldNumber;
const int Prediction::kPredictedTrajectoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Prediction::Prediction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_Prediction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Prediction)
}
Prediction::Prediction(const Prediction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      predicted_trajectory_(from.predicted_trajectory_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Prediction)
}

void Prediction::SharedCtor() {
  probability_ = 0;
}

Prediction::~Prediction() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Prediction)
  SharedDtor();
}

void Prediction::SharedDtor() {
}

void Prediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Prediction::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Prediction& Prediction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_Prediction.base);
  return *internal_default_instance();
}


void Prediction::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Prediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predicted_trajectory_.Clear();
  probability_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Prediction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Prediction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double probability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.dreamview.PolygonPoint predicted_trajectory = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_predicted_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Prediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Prediction)
  return false;
#undef DO_
}

void Prediction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Prediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // repeated .apollo.dreamview.PolygonPoint predicted_trajectory = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predicted_trajectory_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->predicted_trajectory(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Prediction)
}

::google::protobuf::uint8* Prediction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Prediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // repeated .apollo.dreamview.PolygonPoint predicted_trajectory = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predicted_trajectory_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->predicted_trajectory(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Prediction)
  return target;
}

size_t Prediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Prediction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.dreamview.PolygonPoint predicted_trajectory = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->predicted_trajectory_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->predicted_trajectory(static_cast<int>(i)));
    }
  }

  // optional double probability = 1;
  if (has_probability()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Prediction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  const Prediction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Prediction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Prediction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Prediction)
    MergeFrom(*source);
  }
}

void Prediction::MergeFrom(const Prediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predicted_trajectory_.MergeFrom(from.predicted_trajectory_);
  if (from.has_probability()) {
    set_probability(from.probability());
  }
}

void Prediction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prediction::CopyFrom(const Prediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prediction::IsInitialized() const {
  return true;
}

void Prediction::Swap(Prediction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Prediction::InternalSwap(Prediction* other) {
  using std::swap;
  CastToBase(&predicted_trajectory_)->InternalSwap(CastToBase(&other->predicted_trajectory_));
  swap(probability_, other->probability_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Prediction::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Decision::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Decision::kTypeFieldNumber;
const int Decision::kPolygonPointFieldNumber;
const int Decision::kHeadingFieldNumber;
const int Decision::kLatitudeFieldNumber;
const int Decision::kLongitudeFieldNumber;
const int Decision::kPositionXFieldNumber;
const int Decision::kPositionYFieldNumber;
const int Decision::kLengthFieldNumber;
const int Decision::kWidthFieldNumber;
const int Decision::kHeightFieldNumber;
const int Decision::kStopReasonFieldNumber;
const int Decision::kChangeLaneTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Decision::Decision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_Decision.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Decision)
}
Decision::Decision(const Decision& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      polygon_point_(from.polygon_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&heading_, &from.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&heading_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Decision)
}

void Decision::SharedCtor() {
  ::memset(&heading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_y_) -
      reinterpret_cast<char*>(&heading_)) + sizeof(position_y_));
  stopreason_ = 1;
  length_ = 2.8;
  width_ = 1.4;
  height_ = 1.8;
}

Decision::~Decision() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Decision)
  SharedDtor();
}

void Decision::SharedDtor() {
}

void Decision::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Decision::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Decision& Decision::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_Decision.base);
  return *internal_default_instance();
}


void Decision::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Decision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_y_) -
        reinterpret_cast<char*>(&heading_)) + sizeof(position_y_));
    stopreason_ = 1;
  }
  if (cached_has_bits & 1792u) {
    length_ = 2.8;
    width_ = 1.4;
    height_ = 1.8;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Decision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Decision)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.dreamview.Decision.Type type = 1 [default = IGNORE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::dreamview::Decision_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::dreamview::Decision_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_polygon_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_position_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_position_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 8 [default = 2.8];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 9 [default = 1.4];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 10 [default = 1.8];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.dreamview.Decision.StopReasonCode stopReason = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::dreamview::Decision_StopReasonCode_IsValid(value)) {
            set_stopreason(static_cast< ::apollo::dreamview::Decision_StopReasonCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                11, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.routing.ChangeLaneType change_lane_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::routing::ChangeLaneType_IsValid(value)) {
            set_change_lane_type(static_cast< ::apollo::routing::ChangeLaneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Decision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Decision)
  return false;
#undef DO_
}

void Decision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Decision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.dreamview.Decision.Type type = 1 [default = IGNORE];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->polygon_point(static_cast<int>(i)),
      output);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->heading(), output);
  }

  // optional double latitude = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->latitude(), output);
  }

  // optional double longitude = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->longitude(), output);
  }

  // optional double position_x = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->position_x(), output);
  }

  // optional double position_y = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->position_y(), output);
  }

  // optional double length = 8 [default = 2.8];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->length(), output);
  }

  // optional double width = 9 [default = 1.4];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->width(), output);
  }

  // optional double height = 10 [default = 1.8];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->height(), output);
  }

  // optional .apollo.dreamview.Decision.StopReasonCode stopReason = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->stopreason(), output);
  }

  // optional .apollo.routing.ChangeLaneType change_lane_type = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->change_lane_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Decision)
}

::google::protobuf::uint8* Decision::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Decision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.dreamview.Decision.Type type = 1 [default = IGNORE];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->polygon_point(static_cast<int>(i)), deterministic, target);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->heading(), target);
  }

  // optional double latitude = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->latitude(), target);
  }

  // optional double longitude = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->longitude(), target);
  }

  // optional double position_x = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->position_x(), target);
  }

  // optional double position_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->position_y(), target);
  }

  // optional double length = 8 [default = 2.8];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->length(), target);
  }

  // optional double width = 9 [default = 1.4];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->width(), target);
  }

  // optional double height = 10 [default = 1.8];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->height(), target);
  }

  // optional .apollo.dreamview.Decision.StopReasonCode stopReason = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->stopreason(), target);
  }

  // optional .apollo.routing.ChangeLaneType change_lane_type = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->change_lane_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Decision)
  return target;
}

size_t Decision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Decision)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->polygon_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->polygon_point(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional double heading = 3;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional double latitude = 4;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 5;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double position_x = 6;
    if (has_position_x()) {
      total_size += 1 + 8;
    }

    // optional .apollo.dreamview.Decision.Type type = 1 [default = IGNORE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .apollo.routing.ChangeLaneType change_lane_type = 12;
    if (has_change_lane_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_lane_type());
    }

    // optional double position_y = 7;
    if (has_position_y()) {
      total_size += 1 + 8;
    }

    // optional .apollo.dreamview.Decision.StopReasonCode stopReason = 11;
    if (has_stopreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stopreason());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional double length = 8 [default = 2.8];
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double width = 9 [default = 1.4];
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double height = 10 [default = 1.8];
    if (has_height()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Decision::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Decision)
  GOOGLE_DCHECK_NE(&from, this);
  const Decision* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Decision>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Decision)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Decision)
    MergeFrom(*source);
  }
}

void Decision::MergeFrom(const Decision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Decision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_point_.MergeFrom(from.polygon_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000002u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      position_x_ = from.position_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      change_lane_type_ = from.change_lane_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      position_y_ = from.position_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      stopreason_ = from.stopreason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000200u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000400u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Decision::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Decision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decision::CopyFrom(const Decision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Decision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decision::IsInitialized() const {
  return true;
}

void Decision::Swap(Decision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Decision::InternalSwap(Decision* other) {
  using std::swap;
  CastToBase(&polygon_point_)->InternalSwap(CastToBase(&other->polygon_point_));
  swap(heading_, other->heading_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(position_x_, other->position_x_);
  swap(type_, other->type_);
  swap(change_lane_type_, other->change_lane_type_);
  swap(position_y_, other->position_y_);
  swap(stopreason_, other->stopreason_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Decision::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Object::InitAsDefaultInstance() {
  ::apollo::dreamview::_Object_default_instance_._instance.get_mutable()->obstacle_priority_ = const_cast< ::apollo::prediction::ObstaclePriority*>(
      ::apollo::prediction::ObstaclePriority::internal_default_instance());
  ::apollo::dreamview::_Object_default_instance_._instance.get_mutable()->interactive_tag_ = const_cast< ::apollo::prediction::ObstacleInteractiveTag*>(
      ::apollo::prediction::ObstacleInteractiveTag::internal_default_instance());
  ::apollo::dreamview::_Object_default_instance_._instance.get_mutable()->v2x_info_ = const_cast< ::apollo::perception::V2XInformation*>(
      ::apollo::perception::V2XInformation::internal_default_instance());
}
void Object::clear_obstacle_priority() {
  if (obstacle_priority_ != NULL) obstacle_priority_->Clear();
  clear_has_obstacle_priority();
}
void Object::clear_interactive_tag() {
  if (interactive_tag_ != NULL) interactive_tag_->Clear();
  clear_has_interactive_tag();
}
void Object::clear_v2x_info() {
  if (v2x_info_ != NULL) v2x_info_->Clear();
  clear_has_v2x_info();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object::kIdFieldNumber;
const int Object::kPolygonPointFieldNumber;
const int Object::kHeadingFieldNumber;
const int Object::kLatitudeFieldNumber;
const int Object::kLongitudeFieldNumber;
const int Object::kPositionXFieldNumber;
const int Object::kPositionYFieldNumber;
const int Object::kLengthFieldNumber;
const int Object::kWidthFieldNumber;
const int Object::kHeightFieldNumber;
const int Object::kSpeedFieldNumber;
const int Object::kSpeedAccelerationFieldNumber;
const int Object::kSpeedJerkFieldNumber;
const int Object::kSpinFieldNumber;
const int Object::kSpinAccelerationFieldNumber;
const int Object::kSpinJerkFieldNumber;
const int Object::kSpeedHeadingFieldNumber;
const int Object::kKappaFieldNumber;
const int Object::kDkappaFieldNumber;
const int Object::kSignalSetFieldNumber;
const int Object::kCurrentSignalFieldNumber;
const int Object::kTimestampSecFieldNumber;
const int Object::kDecisionFieldNumber;
const int Object::kYieldedObstacleFieldNumber;
const int Object::kThrottlePercentageFieldNumber;
const int Object::kBrakePercentageFieldNumber;
const int Object::kSteeringPercentageFieldNumber;
const int Object::kSteeringAngleFieldNumber;
const int Object::kSteeringRatioFieldNumber;
const int Object::kBatteryPercentageFieldNumber;
const int Object::kGearLocationFieldNumber;
const int Object::kDisengageTypeFieldNumber;
const int Object::kTypeFieldNumber;
const int Object::kSubTypeFieldNumber;
const int Object::kPredictionFieldNumber;
const int Object::kConfidenceFieldNumber;
const int Object::kObstaclePriorityFieldNumber;
const int Object::kInteractiveTagFieldNumber;
const int Object::kSourceFieldNumber;
const int Object::kV2XInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object::Object()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_Object.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Object)
}
Object::Object(const Object& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      polygon_point_(from.polygon_point_),
      signal_set_(from.signal_set_),
      decision_(from.decision_),
      prediction_(from.prediction_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  current_signal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_current_signal()) {
    current_signal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_signal_);
  }
  if (from.has_obstacle_priority()) {
    obstacle_priority_ = new ::apollo::prediction::ObstaclePriority(*from.obstacle_priority_);
  } else {
    obstacle_priority_ = NULL;
  }
  if (from.has_v2x_info()) {
    v2x_info_ = new ::apollo::perception::V2XInformation(*from.v2x_info_);
  } else {
    v2x_info_ = NULL;
  }
  if (from.has_interactive_tag()) {
    interactive_tag_ = new ::apollo::prediction::ObstacleInteractiveTag(*from.interactive_tag_);
  } else {
    interactive_tag_ = NULL;
  }
  ::memcpy(&heading_, &from.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&heading_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Object)
}

void Object::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_signal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&obstacle_priority_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_location_) -
      reinterpret_cast<char*>(&obstacle_priority_)) + sizeof(gear_location_));
  length_ = 2.8;
  width_ = 1.4;
  height_ = 1.8;
  confidence_ = 1;
}

Object::~Object() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Object)
  SharedDtor();
}

void Object::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  current_signal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete obstacle_priority_;
  if (this != internal_default_instance()) delete v2x_info_;
  if (this != internal_default_instance()) delete interactive_tag_;
}

void Object::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Object& Object::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_Object.base);
  return *internal_default_instance();
}


void Object::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_point_.Clear();
  signal_set_.Clear();
  decision_.Clear();
  prediction_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      current_signal_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(obstacle_priority_ != NULL);
      obstacle_priority_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(v2x_info_ != NULL);
      v2x_info_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(interactive_tag_ != NULL);
      interactive_tag_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longitude_) -
        reinterpret_cast<char*>(&heading_)) + sizeof(longitude_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&position_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spin_jerk_) -
        reinterpret_cast<char*>(&position_x_)) + sizeof(spin_jerk_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&speed_heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steering_ratio_) -
        reinterpret_cast<char*>(&speed_heading_)) + sizeof(steering_ratio_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&disengage_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gear_location_) -
        reinterpret_cast<char*>(&disengage_type_)) + sizeof(gear_location_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 15u) {
    length_ = 2.8;
    width_ = 1.4;
    height_ = 1.8;
    confidence_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Object)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Object.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_polygon_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_position_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_position_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 8 [default = 2.8];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 9 [default = 1.4];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 10 [default = 1.8];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_acceleration = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_speed_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_jerk = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_speed_jerk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_jerk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double spin = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u /* 113 & 0xFF */)) {
          set_has_spin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double spin_acceleration = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          set_has_spin_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spin_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double spin_jerk = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_spin_jerk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spin_jerk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_heading = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_speed_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kappa = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_kappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string signal_set = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_signal_set()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signal_set(this->signal_set_size() - 1).data(),
            static_cast<int>(this->signal_set(this->signal_set_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Object.signal_set");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string current_signal = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_signal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->current_signal().data(), static_cast<int>(this->current_signal().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Object.current_signal");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timestamp_sec = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.dreamview.Decision decision = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_decision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double throttle_percentage = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {
          set_has_throttle_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double brake_percentage = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {
          set_has_brake_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steering_percentage = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {
          set_has_steering_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steering_angle = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {
          set_has_steering_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steering_ratio = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {
          set_has_steering_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.dreamview.Object.DisengageType disengage_type = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::dreamview::Object_DisengageType_IsValid(value)) {
            set_disengage_type(static_cast< ::apollo::dreamview::Object_DisengageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                28, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.dreamview.Object.Type type = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::dreamview::Object_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::dreamview::Object_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                29, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.dreamview.Prediction prediction = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_prediction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double confidence = 31 [default = 1];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u /* 249 & 0xFF */)) {
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool yielded_obstacle = 32 [default = false];
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_yielded_obstacle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yielded_obstacle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.prediction.ObstaclePriority obstacle_priority = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obstacle_priority()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::PerceptionObstacle_SubType_IsValid(value)) {
            set_sub_type(static_cast< ::apollo::perception::PerceptionObstacle_SubType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                34, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dkappa = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 281 & 0xFF */)) {
          set_has_dkappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dkappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.PerceptionObstacle.Source source = 36 [default = HOST_VEHICLE];
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::PerceptionObstacle_Source_IsValid(value)) {
            set_source(static_cast< ::apollo::perception::PerceptionObstacle_Source >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                36, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.V2XInformation v2x_info = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_v2x_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 battery_percentage = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {
          set_has_battery_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battery_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.canbus.Chassis.GearPosition gear_location = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear_location(static_cast< ::apollo::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                39, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interactive_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Object)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Object)
  return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Object.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->polygon_point(static_cast<int>(i)),
      output);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->heading(), output);
  }

  // optional double latitude = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->latitude(), output);
  }

  // optional double longitude = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->longitude(), output);
  }

  // optional double position_x = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->position_x(), output);
  }

  // optional double position_y = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->position_y(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional double length = 8 [default = 2.8];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->length(), output);
  }

  // optional double width = 9 [default = 1.4];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->width(), output);
  }

  // optional double height = 10 [default = 1.8];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->height(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional double speed = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->speed(), output);
  }

  // optional double speed_acceleration = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->speed_acceleration(), output);
  }

  // optional double speed_jerk = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->speed_jerk(), output);
  }

  // optional double spin = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->spin(), output);
  }

  // optional double spin_acceleration = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->spin_acceleration(), output);
  }

  // optional double spin_jerk = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->spin_jerk(), output);
  }

  // optional double speed_heading = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->speed_heading(), output);
  }

  // optional double kappa = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->kappa(), output);
  }

  // repeated string signal_set = 19;
  for (int i = 0, n = this->signal_set_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signal_set(i).data(), static_cast<int>(this->signal_set(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Object.signal_set");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->signal_set(i), output);
  }

  // optional string current_signal = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->current_signal().data(), static_cast<int>(this->current_signal().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Object.current_signal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->current_signal(), output);
  }

  // optional double timestamp_sec = 21;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->timestamp_sec(), output);
  }

  // repeated .apollo.dreamview.Decision decision = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->decision_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22,
      this->decision(static_cast<int>(i)),
      output);
  }

  // optional double throttle_percentage = 23;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->throttle_percentage(), output);
  }

  // optional double brake_percentage = 24;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->brake_percentage(), output);
  }

  // optional double steering_percentage = 25;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->steering_percentage(), output);
  }

  // optional double steering_angle = 26;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->steering_angle(), output);
  }

  // optional double steering_ratio = 27;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->steering_ratio(), output);
  }

  // optional .apollo.dreamview.Object.DisengageType disengage_type = 28;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->disengage_type(), output);
  }

  // optional .apollo.dreamview.Object.Type type = 29;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      29, this->type(), output);
  }

  // repeated .apollo.dreamview.Prediction prediction = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prediction_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30,
      this->prediction(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[1];
  // optional double confidence = 31 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->confidence(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool yielded_obstacle = 32 [default = false];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->yielded_obstacle(), output);
  }

  // optional .apollo.prediction.ObstaclePriority obstacle_priority = 33;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->_internal_obstacle_priority(), output);
  }

  // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 34;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      34, this->sub_type(), output);
  }

  // optional double dkappa = 35;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->dkappa(), output);
  }

  // optional .apollo.perception.PerceptionObstacle.Source source = 36 [default = HOST_VEHICLE];
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      36, this->source(), output);
  }

  // optional .apollo.perception.V2XInformation v2x_info = 37;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->_internal_v2x_info(), output);
  }

  // optional int32 battery_percentage = 38;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->battery_percentage(), output);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 39;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      39, this->gear_location(), output);
  }

  // optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 40;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->_internal_interactive_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Object)
}

::google::protobuf::uint8* Object::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Object)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Object.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->polygon_point(static_cast<int>(i)), deterministic, target);
  }

  // optional double heading = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->heading(), target);
  }

  // optional double latitude = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->latitude(), target);
  }

  // optional double longitude = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->longitude(), target);
  }

  // optional double position_x = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->position_x(), target);
  }

  // optional double position_y = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->position_y(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double length = 8 [default = 2.8];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->length(), target);
  }

  // optional double width = 9 [default = 1.4];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->width(), target);
  }

  // optional double height = 10 [default = 1.8];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->height(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional double speed = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->speed(), target);
  }

  // optional double speed_acceleration = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->speed_acceleration(), target);
  }

  // optional double speed_jerk = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->speed_jerk(), target);
  }

  // optional double spin = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->spin(), target);
  }

  // optional double spin_acceleration = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->spin_acceleration(), target);
  }

  // optional double spin_jerk = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->spin_jerk(), target);
  }

  // optional double speed_heading = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->speed_heading(), target);
  }

  // optional double kappa = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->kappa(), target);
  }

  // repeated string signal_set = 19;
  for (int i = 0, n = this->signal_set_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signal_set(i).data(), static_cast<int>(this->signal_set(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Object.signal_set");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(19, this->signal_set(i), target);
  }

  // optional string current_signal = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->current_signal().data(), static_cast<int>(this->current_signal().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Object.current_signal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->current_signal(), target);
  }

  // optional double timestamp_sec = 21;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->timestamp_sec(), target);
  }

  // repeated .apollo.dreamview.Decision decision = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->decision_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->decision(static_cast<int>(i)), deterministic, target);
  }

  // optional double throttle_percentage = 23;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->throttle_percentage(), target);
  }

  // optional double brake_percentage = 24;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->brake_percentage(), target);
  }

  // optional double steering_percentage = 25;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->steering_percentage(), target);
  }

  // optional double steering_angle = 26;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->steering_angle(), target);
  }

  // optional double steering_ratio = 27;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->steering_ratio(), target);
  }

  // optional .apollo.dreamview.Object.DisengageType disengage_type = 28;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      28, this->disengage_type(), target);
  }

  // optional .apollo.dreamview.Object.Type type = 29;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      29, this->type(), target);
  }

  // repeated .apollo.dreamview.Prediction prediction = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prediction_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->prediction(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional double confidence = 31 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->confidence(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool yielded_obstacle = 32 [default = false];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->yielded_obstacle(), target);
  }

  // optional .apollo.prediction.ObstaclePriority obstacle_priority = 33;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        33, this->_internal_obstacle_priority(), deterministic, target);
  }

  // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 34;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      34, this->sub_type(), target);
  }

  // optional double dkappa = 35;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->dkappa(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.Source source = 36 [default = HOST_VEHICLE];
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      36, this->source(), target);
  }

  // optional .apollo.perception.V2XInformation v2x_info = 37;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        37, this->_internal_v2x_info(), deterministic, target);
  }

  // optional int32 battery_percentage = 38;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->battery_percentage(), target);
  }

  // optional .apollo.canbus.Chassis.GearPosition gear_location = 39;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      39, this->gear_location(), target);
  }

  // optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 40;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        40, this->_internal_interactive_tag(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Object)
  return target;
}

size_t Object::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Object)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.dreamview.PolygonPoint polygon_point = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->polygon_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->polygon_point(static_cast<int>(i)));
    }
  }

  // repeated string signal_set = 19;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->signal_set_size());
  for (int i = 0, n = this->signal_set_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->signal_set(i));
  }

  // repeated .apollo.dreamview.Decision decision = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->decision_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->decision(static_cast<int>(i)));
    }
  }

  // repeated .apollo.dreamview.Prediction prediction = 30;
  {
    unsigned int count = static_cast<unsigned int>(this->prediction_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->prediction(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string current_signal = 20;
    if (has_current_signal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->current_signal());
    }

    // optional .apollo.prediction.ObstaclePriority obstacle_priority = 33;
    if (has_obstacle_priority()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *obstacle_priority_);
    }

    // optional .apollo.perception.V2XInformation v2x_info = 37;
    if (has_v2x_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *v2x_info_);
    }

    // optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 40;
    if (has_interactive_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *interactive_tag_);
    }

    // optional double heading = 3;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional double latitude = 4;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 5;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double position_x = 6;
    if (has_position_x()) {
      total_size += 1 + 8;
    }

    // optional double position_y = 7;
    if (has_position_y()) {
      total_size += 1 + 8;
    }

    // optional double speed = 11;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // optional double speed_acceleration = 12;
    if (has_speed_acceleration()) {
      total_size += 1 + 8;
    }

    // optional double speed_jerk = 13;
    if (has_speed_jerk()) {
      total_size += 1 + 8;
    }

    // optional double spin = 14;
    if (has_spin()) {
      total_size += 1 + 8;
    }

    // optional double spin_acceleration = 15;
    if (has_spin_acceleration()) {
      total_size += 1 + 8;
    }

    // optional double spin_jerk = 16;
    if (has_spin_jerk()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double speed_heading = 17;
    if (has_speed_heading()) {
      total_size += 2 + 8;
    }

    // optional double kappa = 18;
    if (has_kappa()) {
      total_size += 2 + 8;
    }

    // optional double timestamp_sec = 21;
    if (has_timestamp_sec()) {
      total_size += 2 + 8;
    }

    // optional double throttle_percentage = 23;
    if (has_throttle_percentage()) {
      total_size += 2 + 8;
    }

    // optional double brake_percentage = 24;
    if (has_brake_percentage()) {
      total_size += 2 + 8;
    }

    // optional double steering_percentage = 25;
    if (has_steering_percentage()) {
      total_size += 2 + 8;
    }

    // optional double steering_angle = 26;
    if (has_steering_angle()) {
      total_size += 2 + 8;
    }

    // optional double steering_ratio = 27;
    if (has_steering_ratio()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .apollo.dreamview.Object.DisengageType disengage_type = 28;
    if (has_disengage_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->disengage_type());
    }

    // optional .apollo.dreamview.Object.Type type = 29;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool yielded_obstacle = 32 [default = false];
    if (has_yielded_obstacle()) {
      total_size += 2 + 1;
    }

    // optional .apollo.perception.PerceptionObstacle.SubType sub_type = 34;
    if (has_sub_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_type());
    }

    // optional double dkappa = 35;
    if (has_dkappa()) {
      total_size += 2 + 8;
    }

    // optional .apollo.perception.PerceptionObstacle.Source source = 36 [default = HOST_VEHICLE];
    if (has_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

    // optional int32 battery_percentage = 38;
    if (has_battery_percentage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battery_percentage());
    }

    // optional .apollo.canbus.Chassis.GearPosition gear_location = 39;
    if (has_gear_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_location());
    }

  }
  if (_has_bits_[32 / 32] & 15u) {
    // optional double length = 8 [default = 2.8];
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double width = 9 [default = 1.4];
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double height = 10 [default = 1.8];
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional double confidence = 31 [default = 1];
    if (has_confidence()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Object)
  GOOGLE_DCHECK_NE(&from, this);
  const Object* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Object>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Object)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Object)
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Object)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_point_.MergeFrom(from.polygon_point_);
  signal_set_.MergeFrom(from.signal_set_);
  decision_.MergeFrom(from.decision_);
  prediction_.MergeFrom(from.prediction_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_current_signal();
      current_signal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.current_signal_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_obstacle_priority()->::apollo::prediction::ObstaclePriority::MergeFrom(from.obstacle_priority());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_v2x_info()->::apollo::perception::V2XInformation::MergeFrom(from.v2x_info());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_interactive_tag()->::apollo::prediction::ObstacleInteractiveTag::MergeFrom(from.interactive_tag());
    }
    if (cached_has_bits & 0x00000020u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000040u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000080u) {
      longitude_ = from.longitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      position_x_ = from.position_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      position_y_ = from.position_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000800u) {
      speed_acceleration_ = from.speed_acceleration_;
    }
    if (cached_has_bits & 0x00001000u) {
      speed_jerk_ = from.speed_jerk_;
    }
    if (cached_has_bits & 0x00002000u) {
      spin_ = from.spin_;
    }
    if (cached_has_bits & 0x00004000u) {
      spin_acceleration_ = from.spin_acceleration_;
    }
    if (cached_has_bits & 0x00008000u) {
      spin_jerk_ = from.spin_jerk_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      speed_heading_ = from.speed_heading_;
    }
    if (cached_has_bits & 0x00020000u) {
      kappa_ = from.kappa_;
    }
    if (cached_has_bits & 0x00040000u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    if (cached_has_bits & 0x00080000u) {
      throttle_percentage_ = from.throttle_percentage_;
    }
    if (cached_has_bits & 0x00100000u) {
      brake_percentage_ = from.brake_percentage_;
    }
    if (cached_has_bits & 0x00200000u) {
      steering_percentage_ = from.steering_percentage_;
    }
    if (cached_has_bits & 0x00400000u) {
      steering_angle_ = from.steering_angle_;
    }
    if (cached_has_bits & 0x00800000u) {
      steering_ratio_ = from.steering_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      disengage_type_ = from.disengage_type_;
    }
    if (cached_has_bits & 0x02000000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x04000000u) {
      yielded_obstacle_ = from.yielded_obstacle_;
    }
    if (cached_has_bits & 0x08000000u) {
      sub_type_ = from.sub_type_;
    }
    if (cached_has_bits & 0x10000000u) {
      dkappa_ = from.dkappa_;
    }
    if (cached_has_bits & 0x20000000u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x40000000u) {
      battery_percentage_ = from.battery_percentage_;
    }
    if (cached_has_bits & 0x80000000u) {
      gear_location_ = from.gear_location_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Object)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  return true;
}

void Object::Swap(Object* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Object::InternalSwap(Object* other) {
  using std::swap;
  CastToBase(&polygon_point_)->InternalSwap(CastToBase(&other->polygon_point_));
  signal_set_.InternalSwap(CastToBase(&other->signal_set_));
  CastToBase(&decision_)->InternalSwap(CastToBase(&other->decision_));
  CastToBase(&prediction_)->InternalSwap(CastToBase(&other->prediction_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  current_signal_.Swap(&other->current_signal_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(obstacle_priority_, other->obstacle_priority_);
  swap(v2x_info_, other->v2x_info_);
  swap(interactive_tag_, other->interactive_tag_);
  swap(heading_, other->heading_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(position_x_, other->position_x_);
  swap(position_y_, other->position_y_);
  swap(speed_, other->speed_);
  swap(speed_acceleration_, other->speed_acceleration_);
  swap(speed_jerk_, other->speed_jerk_);
  swap(spin_, other->spin_);
  swap(spin_acceleration_, other->spin_acceleration_);
  swap(spin_jerk_, other->spin_jerk_);
  swap(speed_heading_, other->speed_heading_);
  swap(kappa_, other->kappa_);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(throttle_percentage_, other->throttle_percentage_);
  swap(brake_percentage_, other->brake_percentage_);
  swap(steering_percentage_, other->steering_percentage_);
  swap(steering_angle_, other->steering_angle_);
  swap(steering_ratio_, other->steering_ratio_);
  swap(disengage_type_, other->disengage_type_);
  swap(type_, other->type_);
  swap(yielded_obstacle_, other->yielded_obstacle_);
  swap(sub_type_, other->sub_type_);
  swap(dkappa_, other->dkappa_);
  swap(source_, other->source_);
  swap(battery_percentage_, other->battery_percentage_);
  swap(gear_location_, other->gear_location_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(confidence_, other->confidence_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DelaysInMs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelaysInMs::kChassisFieldNumber;
const int DelaysInMs::kLocalizationFieldNumber;
const int DelaysInMs::kPerceptionObstacleFieldNumber;
const int DelaysInMs::kPlanningFieldNumber;
const int DelaysInMs::kPredictionFieldNumber;
const int DelaysInMs::kTrafficLightFieldNumber;
const int DelaysInMs::kControlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelaysInMs::DelaysInMs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_DelaysInMs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.DelaysInMs)
}
DelaysInMs::DelaysInMs(const DelaysInMs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chassis_, &from.chassis_,
    static_cast<size_t>(reinterpret_cast<char*>(&control_) -
    reinterpret_cast<char*>(&chassis_)) + sizeof(control_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.DelaysInMs)
}

void DelaysInMs::SharedCtor() {
  ::memset(&chassis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&control_) -
      reinterpret_cast<char*>(&chassis_)) + sizeof(control_));
}

DelaysInMs::~DelaysInMs() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.DelaysInMs)
  SharedDtor();
}

void DelaysInMs::SharedDtor() {
}

void DelaysInMs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DelaysInMs::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DelaysInMs& DelaysInMs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_DelaysInMs.base);
  return *internal_default_instance();
}


void DelaysInMs::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.DelaysInMs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&chassis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&control_) -
        reinterpret_cast<char*>(&chassis_)) + sizeof(control_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelaysInMs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.DelaysInMs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double chassis = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_chassis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chassis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double localization = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_localization();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &localization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double perception_obstacle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_perception_obstacle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &perception_obstacle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double planning = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_planning();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &planning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double prediction = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_prediction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prediction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double traffic_light = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_traffic_light();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &traffic_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double control = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_control();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &control_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.DelaysInMs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.DelaysInMs)
  return false;
#undef DO_
}

void DelaysInMs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.DelaysInMs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double chassis = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->chassis(), output);
  }

  // optional double localization = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->localization(), output);
  }

  // optional double perception_obstacle = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->perception_obstacle(), output);
  }

  // optional double planning = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->planning(), output);
  }

  // optional double prediction = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->prediction(), output);
  }

  // optional double traffic_light = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->traffic_light(), output);
  }

  // optional double control = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->control(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.DelaysInMs)
}

::google::protobuf::uint8* DelaysInMs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.DelaysInMs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double chassis = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->chassis(), target);
  }

  // optional double localization = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->localization(), target);
  }

  // optional double perception_obstacle = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->perception_obstacle(), target);
  }

  // optional double planning = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->planning(), target);
  }

  // optional double prediction = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->prediction(), target);
  }

  // optional double traffic_light = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->traffic_light(), target);
  }

  // optional double control = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->control(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.DelaysInMs)
  return target;
}

size_t DelaysInMs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.DelaysInMs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional double chassis = 1;
    if (has_chassis()) {
      total_size += 1 + 8;
    }

    // optional double localization = 3;
    if (has_localization()) {
      total_size += 1 + 8;
    }

    // optional double perception_obstacle = 4;
    if (has_perception_obstacle()) {
      total_size += 1 + 8;
    }

    // optional double planning = 5;
    if (has_planning()) {
      total_size += 1 + 8;
    }

    // optional double prediction = 7;
    if (has_prediction()) {
      total_size += 1 + 8;
    }

    // optional double traffic_light = 8;
    if (has_traffic_light()) {
      total_size += 1 + 8;
    }

    // optional double control = 9;
    if (has_control()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelaysInMs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.DelaysInMs)
  GOOGLE_DCHECK_NE(&from, this);
  const DelaysInMs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DelaysInMs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.DelaysInMs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.DelaysInMs)
    MergeFrom(*source);
  }
}

void DelaysInMs::MergeFrom(const DelaysInMs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.DelaysInMs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      chassis_ = from.chassis_;
    }
    if (cached_has_bits & 0x00000002u) {
      localization_ = from.localization_;
    }
    if (cached_has_bits & 0x00000004u) {
      perception_obstacle_ = from.perception_obstacle_;
    }
    if (cached_has_bits & 0x00000008u) {
      planning_ = from.planning_;
    }
    if (cached_has_bits & 0x00000010u) {
      prediction_ = from.prediction_;
    }
    if (cached_has_bits & 0x00000020u) {
      traffic_light_ = from.traffic_light_;
    }
    if (cached_has_bits & 0x00000040u) {
      control_ = from.control_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DelaysInMs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.DelaysInMs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelaysInMs::CopyFrom(const DelaysInMs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.DelaysInMs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelaysInMs::IsInitialized() const {
  return true;
}

void DelaysInMs::Swap(DelaysInMs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelaysInMs::InternalSwap(DelaysInMs* other) {
  using std::swap;
  swap(chassis_, other->chassis_);
  swap(localization_, other->localization_);
  swap(perception_obstacle_, other->perception_obstacle_);
  swap(planning_, other->planning_);
  swap(prediction_, other->prediction_);
  swap(traffic_light_, other->traffic_light_);
  swap(control_, other->control_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DelaysInMs::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoutePath::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoutePath::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoutePath::RoutePath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_RoutePath.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.RoutePath)
}
RoutePath::RoutePath(const RoutePath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.RoutePath)
}

void RoutePath::SharedCtor() {
}

RoutePath::~RoutePath() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.RoutePath)
  SharedDtor();
}

void RoutePath::SharedDtor() {
}

void RoutePath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoutePath::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoutePath& RoutePath::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_RoutePath.base);
  return *internal_default_instance();
}


void RoutePath::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.RoutePath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoutePath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.RoutePath)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.dreamview.PolygonPoint point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.RoutePath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.RoutePath)
  return false;
#undef DO_
}

void RoutePath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.RoutePath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dreamview.PolygonPoint point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->point(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.RoutePath)
}

::google::protobuf::uint8* RoutePath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.RoutePath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dreamview.PolygonPoint point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->point(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.RoutePath)
  return target;
}

size_t RoutePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.RoutePath)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.dreamview.PolygonPoint point = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->point(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutePath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.RoutePath)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutePath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoutePath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.RoutePath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.RoutePath)
    MergeFrom(*source);
  }
}

void RoutePath::MergeFrom(const RoutePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.RoutePath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
}

void RoutePath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.RoutePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutePath::CopyFrom(const RoutePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.RoutePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutePath::IsInitialized() const {
  return true;
}

void RoutePath::Swap(RoutePath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoutePath::InternalSwap(RoutePath* other) {
  using std::swap;
  CastToBase(&point_)->InternalSwap(CastToBase(&other->point_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoutePath::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Latency::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Latency::kTimestampSecFieldNumber;
const int Latency::kTotalTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Latency::Latency()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_Latency.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Latency)
}
Latency::Latency(const Latency& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_sec_, &from.timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_time_ms_) -
    reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(total_time_ms_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Latency)
}

void Latency::SharedCtor() {
  ::memset(&timestamp_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_time_ms_) -
      reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(total_time_ms_));
}

Latency::~Latency() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Latency)
  SharedDtor();
}

void Latency::SharedDtor() {
}

void Latency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Latency::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Latency& Latency::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_Latency.base);
  return *internal_default_instance();
}


void Latency::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Latency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_time_ms_) -
        reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(total_time_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Latency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Latency)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double total_time_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_total_time_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Latency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Latency)
  return false;
#undef DO_
}

void Latency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Latency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp_sec(), output);
  }

  // optional double total_time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->total_time_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Latency)
}

::google::protobuf::uint8* Latency::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Latency)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp_sec(), target);
  }

  // optional double total_time_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->total_time_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Latency)
  return target;
}

size_t Latency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Latency)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double timestamp_sec = 1;
    if (has_timestamp_sec()) {
      total_size += 1 + 8;
    }

    // optional double total_time_ms = 2;
    if (has_total_time_ms()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Latency::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Latency)
  GOOGLE_DCHECK_NE(&from, this);
  const Latency* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Latency>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Latency)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Latency)
    MergeFrom(*source);
  }
}

void Latency::MergeFrom(const Latency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Latency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_time_ms_ = from.total_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Latency::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Latency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Latency::CopyFrom(const Latency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Latency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Latency::IsInitialized() const {
  return true;
}

void Latency::Swap(Latency* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Latency::InternalSwap(Latency* other) {
  using std::swap;
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(total_time_ms_, other->total_time_ms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Latency::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapElementIds::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapElementIds::kLaneFieldNumber;
const int MapElementIds::kCrosswalkFieldNumber;
const int MapElementIds::kJunctionFieldNumber;
const int MapElementIds::kSignalFieldNumber;
const int MapElementIds::kStopSignFieldNumber;
const int MapElementIds::kYieldFieldNumber;
const int MapElementIds::kOverlapFieldNumber;
const int MapElementIds::kRoadFieldNumber;
const int MapElementIds::kClearAreaFieldNumber;
const int MapElementIds::kParkingSpaceFieldNumber;
const int MapElementIds::kSpeedBumpFieldNumber;
const int MapElementIds::kPncJunctionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapElementIds::MapElementIds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_MapElementIds.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.MapElementIds)
}
MapElementIds::MapElementIds(const MapElementIds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      lane_(from.lane_),
      crosswalk_(from.crosswalk_),
      junction_(from.junction_),
      signal_(from.signal_),
      stop_sign_(from.stop_sign_),
      yield_(from.yield_),
      overlap_(from.overlap_),
      road_(from.road_),
      clear_area_(from.clear_area_),
      parking_space_(from.parking_space_),
      speed_bump_(from.speed_bump_),
      pnc_junction_(from.pnc_junction_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.MapElementIds)
}

void MapElementIds::SharedCtor() {
}

MapElementIds::~MapElementIds() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.MapElementIds)
  SharedDtor();
}

void MapElementIds::SharedDtor() {
}

void MapElementIds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapElementIds::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapElementIds& MapElementIds::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_MapElementIds.base);
  return *internal_default_instance();
}


void MapElementIds::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.MapElementIds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_.Clear();
  crosswalk_.Clear();
  junction_.Clear();
  signal_.Clear();
  stop_sign_.Clear();
  yield_.Clear();
  overlap_.Clear();
  road_.Clear();
  clear_area_.Clear();
  parking_space_.Clear();
  speed_bump_.Clear();
  pnc_junction_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapElementIds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.MapElementIds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string lane = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lane()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lane(this->lane_size() - 1).data(),
            static_cast<int>(this->lane(this->lane_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.lane");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string crosswalk = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_crosswalk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->crosswalk(this->crosswalk_size() - 1).data(),
            static_cast<int>(this->crosswalk(this->crosswalk_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.crosswalk");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string junction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_junction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->junction(this->junction_size() - 1).data(),
            static_cast<int>(this->junction(this->junction_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.junction");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string signal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_signal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signal(this->signal_size() - 1).data(),
            static_cast<int>(this->signal(this->signal_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.signal");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string stop_sign = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stop_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stop_sign(this->stop_sign_size() - 1).data(),
            static_cast<int>(this->stop_sign(this->stop_sign_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.stop_sign");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string yield = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_yield()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->yield(this->yield_size() - 1).data(),
            static_cast<int>(this->yield(this->yield_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.yield");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string overlap = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_overlap()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->overlap(this->overlap_size() - 1).data(),
            static_cast<int>(this->overlap(this->overlap_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.overlap");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string road = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_road()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->road(this->road_size() - 1).data(),
            static_cast<int>(this->road(this->road_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.road");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string clear_area = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_clear_area()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clear_area(this->clear_area_size() - 1).data(),
            static_cast<int>(this->clear_area(this->clear_area_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.clear_area");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string parking_space = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_parking_space()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parking_space(this->parking_space_size() - 1).data(),
            static_cast<int>(this->parking_space(this->parking_space_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.parking_space");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string speed_bump = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_speed_bump()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->speed_bump(this->speed_bump_size() - 1).data(),
            static_cast<int>(this->speed_bump(this->speed_bump_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.speed_bump");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string pnc_junction = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pnc_junction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pnc_junction(this->pnc_junction_size() - 1).data(),
            static_cast<int>(this->pnc_junction(this->pnc_junction_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.MapElementIds.pnc_junction");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.MapElementIds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.MapElementIds)
  return false;
#undef DO_
}

void MapElementIds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.MapElementIds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string lane = 1;
  for (int i = 0, n = this->lane_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane(i).data(), static_cast<int>(this->lane(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.lane");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lane(i), output);
  }

  // repeated string crosswalk = 2;
  for (int i = 0, n = this->crosswalk_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crosswalk(i).data(), static_cast<int>(this->crosswalk(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.crosswalk");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->crosswalk(i), output);
  }

  // repeated string junction = 3;
  for (int i = 0, n = this->junction_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->junction(i).data(), static_cast<int>(this->junction(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.junction");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->junction(i), output);
  }

  // repeated string signal = 4;
  for (int i = 0, n = this->signal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signal(i).data(), static_cast<int>(this->signal(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.signal");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->signal(i), output);
  }

  // repeated string stop_sign = 5;
  for (int i = 0, n = this->stop_sign_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stop_sign(i).data(), static_cast<int>(this->stop_sign(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.stop_sign");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->stop_sign(i), output);
  }

  // repeated string yield = 6;
  for (int i = 0, n = this->yield_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->yield(i).data(), static_cast<int>(this->yield(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.yield");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->yield(i), output);
  }

  // repeated string overlap = 7;
  for (int i = 0, n = this->overlap_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->overlap(i).data(), static_cast<int>(this->overlap(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.overlap");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->overlap(i), output);
  }

  // repeated string road = 8;
  for (int i = 0, n = this->road_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->road(i).data(), static_cast<int>(this->road(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.road");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->road(i), output);
  }

  // repeated string clear_area = 9;
  for (int i = 0, n = this->clear_area_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clear_area(i).data(), static_cast<int>(this->clear_area(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.clear_area");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->clear_area(i), output);
  }

  // repeated string parking_space = 10;
  for (int i = 0, n = this->parking_space_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parking_space(i).data(), static_cast<int>(this->parking_space(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.parking_space");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->parking_space(i), output);
  }

  // repeated string speed_bump = 11;
  for (int i = 0, n = this->speed_bump_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->speed_bump(i).data(), static_cast<int>(this->speed_bump(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.speed_bump");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->speed_bump(i), output);
  }

  // repeated string pnc_junction = 12;
  for (int i = 0, n = this->pnc_junction_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pnc_junction(i).data(), static_cast<int>(this->pnc_junction(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.pnc_junction");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->pnc_junction(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.MapElementIds)
}

::google::protobuf::uint8* MapElementIds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.MapElementIds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string lane = 1;
  for (int i = 0, n = this->lane_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane(i).data(), static_cast<int>(this->lane(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.lane");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->lane(i), target);
  }

  // repeated string crosswalk = 2;
  for (int i = 0, n = this->crosswalk_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->crosswalk(i).data(), static_cast<int>(this->crosswalk(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.crosswalk");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->crosswalk(i), target);
  }

  // repeated string junction = 3;
  for (int i = 0, n = this->junction_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->junction(i).data(), static_cast<int>(this->junction(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.junction");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->junction(i), target);
  }

  // repeated string signal = 4;
  for (int i = 0, n = this->signal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signal(i).data(), static_cast<int>(this->signal(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.signal");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->signal(i), target);
  }

  // repeated string stop_sign = 5;
  for (int i = 0, n = this->stop_sign_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stop_sign(i).data(), static_cast<int>(this->stop_sign(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.stop_sign");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->stop_sign(i), target);
  }

  // repeated string yield = 6;
  for (int i = 0, n = this->yield_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->yield(i).data(), static_cast<int>(this->yield(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.yield");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->yield(i), target);
  }

  // repeated string overlap = 7;
  for (int i = 0, n = this->overlap_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->overlap(i).data(), static_cast<int>(this->overlap(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.overlap");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->overlap(i), target);
  }

  // repeated string road = 8;
  for (int i = 0, n = this->road_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->road(i).data(), static_cast<int>(this->road(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.road");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->road(i), target);
  }

  // repeated string clear_area = 9;
  for (int i = 0, n = this->clear_area_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clear_area(i).data(), static_cast<int>(this->clear_area(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.clear_area");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->clear_area(i), target);
  }

  // repeated string parking_space = 10;
  for (int i = 0, n = this->parking_space_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parking_space(i).data(), static_cast<int>(this->parking_space(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.parking_space");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->parking_space(i), target);
  }

  // repeated string speed_bump = 11;
  for (int i = 0, n = this->speed_bump_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->speed_bump(i).data(), static_cast<int>(this->speed_bump(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.speed_bump");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->speed_bump(i), target);
  }

  // repeated string pnc_junction = 12;
  for (int i = 0, n = this->pnc_junction_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pnc_junction(i).data(), static_cast<int>(this->pnc_junction(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.MapElementIds.pnc_junction");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->pnc_junction(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.MapElementIds)
  return target;
}

size_t MapElementIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.MapElementIds)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string lane = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->lane_size());
  for (int i = 0, n = this->lane_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lane(i));
  }

  // repeated string crosswalk = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->crosswalk_size());
  for (int i = 0, n = this->crosswalk_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->crosswalk(i));
  }

  // repeated string junction = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->junction_size());
  for (int i = 0, n = this->junction_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->junction(i));
  }

  // repeated string signal = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->signal_size());
  for (int i = 0, n = this->signal_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->signal(i));
  }

  // repeated string stop_sign = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->stop_sign_size());
  for (int i = 0, n = this->stop_sign_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stop_sign(i));
  }

  // repeated string yield = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->yield_size());
  for (int i = 0, n = this->yield_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->yield(i));
  }

  // repeated string overlap = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->overlap_size());
  for (int i = 0, n = this->overlap_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->overlap(i));
  }

  // repeated string road = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->road_size());
  for (int i = 0, n = this->road_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->road(i));
  }

  // repeated string clear_area = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->clear_area_size());
  for (int i = 0, n = this->clear_area_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->clear_area(i));
  }

  // repeated string parking_space = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->parking_space_size());
  for (int i = 0, n = this->parking_space_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->parking_space(i));
  }

  // repeated string speed_bump = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->speed_bump_size());
  for (int i = 0, n = this->speed_bump_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->speed_bump(i));
  }

  // repeated string pnc_junction = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->pnc_junction_size());
  for (int i = 0, n = this->pnc_junction_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pnc_junction(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapElementIds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.MapElementIds)
  GOOGLE_DCHECK_NE(&from, this);
  const MapElementIds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapElementIds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.MapElementIds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.MapElementIds)
    MergeFrom(*source);
  }
}

void MapElementIds::MergeFrom(const MapElementIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.MapElementIds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_.MergeFrom(from.lane_);
  crosswalk_.MergeFrom(from.crosswalk_);
  junction_.MergeFrom(from.junction_);
  signal_.MergeFrom(from.signal_);
  stop_sign_.MergeFrom(from.stop_sign_);
  yield_.MergeFrom(from.yield_);
  overlap_.MergeFrom(from.overlap_);
  road_.MergeFrom(from.road_);
  clear_area_.MergeFrom(from.clear_area_);
  parking_space_.MergeFrom(from.parking_space_);
  speed_bump_.MergeFrom(from.speed_bump_);
  pnc_junction_.MergeFrom(from.pnc_junction_);
}

void MapElementIds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.MapElementIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapElementIds::CopyFrom(const MapElementIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.MapElementIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapElementIds::IsInitialized() const {
  return true;
}

void MapElementIds::Swap(MapElementIds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapElementIds::InternalSwap(MapElementIds* other) {
  using std::swap;
  lane_.InternalSwap(CastToBase(&other->lane_));
  crosswalk_.InternalSwap(CastToBase(&other->crosswalk_));
  junction_.InternalSwap(CastToBase(&other->junction_));
  signal_.InternalSwap(CastToBase(&other->signal_));
  stop_sign_.InternalSwap(CastToBase(&other->stop_sign_));
  yield_.InternalSwap(CastToBase(&other->yield_));
  overlap_.InternalSwap(CastToBase(&other->overlap_));
  road_.InternalSwap(CastToBase(&other->road_));
  clear_area_.InternalSwap(CastToBase(&other->clear_area_));
  parking_space_.InternalSwap(CastToBase(&other->parking_space_));
  speed_bump_.InternalSwap(CastToBase(&other->speed_bump_));
  pnc_junction_.InternalSwap(CastToBase(&other->pnc_junction_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapElementIds::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ControlData::InitAsDefaultInstance() {
  ::apollo::dreamview::_ControlData_default_instance_._instance.get_mutable()->current_target_point_ = const_cast< ::apollo::common::TrajectoryPoint*>(
      ::apollo::common::TrajectoryPoint::internal_default_instance());
}
void ControlData::clear_current_target_point() {
  if (current_target_point_ != NULL) current_target_point_->Clear();
  clear_has_current_target_point();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlData::kTimestampSecFieldNumber;
const int ControlData::kStationErrorFieldNumber;
const int ControlData::kLateralErrorFieldNumber;
const int ControlData::kHeadingErrorFieldNumber;
const int ControlData::kCurrentTargetPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlData::ControlData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_ControlData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.ControlData)
}
ControlData::ControlData(const ControlData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_current_target_point()) {
    current_target_point_ = new ::apollo::common::TrajectoryPoint(*from.current_target_point_);
  } else {
    current_target_point_ = NULL;
  }
  ::memcpy(&timestamp_sec_, &from.timestamp_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_error_) -
    reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(heading_error_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.ControlData)
}

void ControlData::SharedCtor() {
  ::memset(&current_target_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_error_) -
      reinterpret_cast<char*>(&current_target_point_)) + sizeof(heading_error_));
}

ControlData::~ControlData() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.ControlData)
  SharedDtor();
}

void ControlData::SharedDtor() {
  if (this != internal_default_instance()) delete current_target_point_;
}

void ControlData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ControlData::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ControlData& ControlData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_ControlData.base);
  return *internal_default_instance();
}


void ControlData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.ControlData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(current_target_point_ != NULL);
    current_target_point_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&timestamp_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_error_) -
        reinterpret_cast<char*>(&timestamp_sec_)) + sizeof(heading_error_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ControlData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.ControlData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double station_error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_station_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &station_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lateral_error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_lateral_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lateral_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading_error = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_heading_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.TrajectoryPoint current_target_point = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_current_target_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.ControlData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.ControlData)
  return false;
#undef DO_
}

void ControlData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.ControlData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp_sec(), output);
  }

  // optional double station_error = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->station_error(), output);
  }

  // optional double lateral_error = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lateral_error(), output);
  }

  // optional double heading_error = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->heading_error(), output);
  }

  // optional .apollo.common.TrajectoryPoint current_target_point = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_current_target_point(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.ControlData)
}

::google::protobuf::uint8* ControlData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.ControlData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp_sec(), target);
  }

  // optional double station_error = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->station_error(), target);
  }

  // optional double lateral_error = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lateral_error(), target);
  }

  // optional double heading_error = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->heading_error(), target);
  }

  // optional .apollo.common.TrajectoryPoint current_target_point = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_current_target_point(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.ControlData)
  return target;
}

size_t ControlData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.ControlData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .apollo.common.TrajectoryPoint current_target_point = 5;
    if (has_current_target_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *current_target_point_);
    }

    // optional double timestamp_sec = 1;
    if (has_timestamp_sec()) {
      total_size += 1 + 8;
    }

    // optional double station_error = 2;
    if (has_station_error()) {
      total_size += 1 + 8;
    }

    // optional double lateral_error = 3;
    if (has_lateral_error()) {
      total_size += 1 + 8;
    }

    // optional double heading_error = 4;
    if (has_heading_error()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.ControlData)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.ControlData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.ControlData)
    MergeFrom(*source);
  }
}

void ControlData::MergeFrom(const ControlData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.ControlData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_current_target_point()->::apollo::common::TrajectoryPoint::MergeFrom(from.current_target_point());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    if (cached_has_bits & 0x00000004u) {
      station_error_ = from.station_error_;
    }
    if (cached_has_bits & 0x00000008u) {
      lateral_error_ = from.lateral_error_;
    }
    if (cached_has_bits & 0x00000010u) {
      heading_error_ = from.heading_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControlData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.ControlData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlData::CopyFrom(const ControlData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.ControlData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlData::IsInitialized() const {
  return true;
}

void ControlData::Swap(ControlData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlData::InternalSwap(ControlData* other) {
  using std::swap;
  swap(current_target_point_, other->current_target_point_);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(station_error_, other->station_error_);
  swap(lateral_error_, other->lateral_error_);
  swap(heading_error_, other->heading_error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ControlData::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Notification::InitAsDefaultInstance() {
  ::apollo::dreamview::_Notification_default_instance_._instance.get_mutable()->item_ = const_cast< ::apollo::common::monitor::MonitorMessageItem*>(
      ::apollo::common::monitor::MonitorMessageItem::internal_default_instance());
}
void Notification::clear_item() {
  if (item_ != NULL) item_->Clear();
  clear_has_item();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Notification::kTimestampSecFieldNumber;
const int Notification::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Notification::Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_Notification.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Notification)
}
Notification::Notification(const Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_item()) {
    item_ = new ::apollo::common::monitor::MonitorMessageItem(*from.item_);
  } else {
    item_ = NULL;
  }
  timestamp_sec_ = from.timestamp_sec_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Notification)
}

void Notification::SharedCtor() {
  ::memset(&item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_sec_) -
      reinterpret_cast<char*>(&item_)) + sizeof(timestamp_sec_));
}

Notification::~Notification() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Notification)
  SharedDtor();
}

void Notification::SharedDtor() {
  if (this != internal_default_instance()) delete item_;
}

void Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Notification::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Notification& Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_Notification.base);
  return *internal_default_instance();
}


void Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(item_ != NULL);
    item_->Clear();
  }
  timestamp_sec_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp_sec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_timestamp_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.monitor.MonitorMessageItem item = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Notification)
  return false;
#undef DO_
}

void Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp_sec(), output);
  }

  // optional .apollo.common.monitor.MonitorMessageItem item = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_item(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Notification)
}

::google::protobuf::uint8* Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp_sec = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp_sec(), target);
  }

  // optional .apollo.common.monitor.MonitorMessageItem item = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_item(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Notification)
  return target;
}

size_t Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.common.monitor.MonitorMessageItem item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *item_);
    }

    // optional double timestamp_sec = 1;
    if (has_timestamp_sec()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Notification)
    MergeFrom(*source);
  }
}

void Notification::MergeFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_item()->::apollo::common::monitor::MonitorMessageItem::MergeFrom(from.item());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_sec_ = from.timestamp_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notification::CopyFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {
  return true;
}

void Notification::Swap(Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Notification::InternalSwap(Notification* other) {
  using std::swap;
  swap(item_, other->item_);
  swap(timestamp_sec_, other->timestamp_sec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Notification::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SensorMeasurements::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorMeasurements::kSensorMeasurementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorMeasurements::SensorMeasurements()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_SensorMeasurements.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.SensorMeasurements)
}
SensorMeasurements::SensorMeasurements(const SensorMeasurements& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      sensor_measurement_(from.sensor_measurement_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.SensorMeasurements)
}

void SensorMeasurements::SharedCtor() {
}

SensorMeasurements::~SensorMeasurements() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.SensorMeasurements)
  SharedDtor();
}

void SensorMeasurements::SharedDtor() {
}

void SensorMeasurements::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SensorMeasurements::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorMeasurements& SensorMeasurements::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_SensorMeasurements.base);
  return *internal_default_instance();
}


void SensorMeasurements::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.SensorMeasurements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_measurement_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SensorMeasurements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.SensorMeasurements)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.dreamview.Object sensor_measurement = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sensor_measurement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.SensorMeasurements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.SensorMeasurements)
  return false;
#undef DO_
}

void SensorMeasurements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.SensorMeasurements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dreamview.Object sensor_measurement = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_measurement_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->sensor_measurement(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.SensorMeasurements)
}

::google::protobuf::uint8* SensorMeasurements::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.SensorMeasurements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dreamview.Object sensor_measurement = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_measurement_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sensor_measurement(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.SensorMeasurements)
  return target;
}

size_t SensorMeasurements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.SensorMeasurements)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.dreamview.Object sensor_measurement = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_measurement_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sensor_measurement(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorMeasurements::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.SensorMeasurements)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorMeasurements* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorMeasurements>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.SensorMeasurements)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.SensorMeasurements)
    MergeFrom(*source);
  }
}

void SensorMeasurements::MergeFrom(const SensorMeasurements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.SensorMeasurements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_measurement_.MergeFrom(from.sensor_measurement_);
}

void SensorMeasurements::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.SensorMeasurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorMeasurements::CopyFrom(const SensorMeasurements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.SensorMeasurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMeasurements::IsInitialized() const {
  return true;
}

void SensorMeasurements::Swap(SensorMeasurements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorMeasurements::InternalSwap(SensorMeasurements* other) {
  using std::swap;
  CastToBase(&sensor_measurement_)->InternalSwap(CastToBase(&other->sensor_measurement_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SensorMeasurements::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

SimulationWorld_LatencyEntry_DoNotUse::SimulationWorld_LatencyEntry_DoNotUse() {}
SimulationWorld_LatencyEntry_DoNotUse::SimulationWorld_LatencyEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SimulationWorld_LatencyEntry_DoNotUse::MergeFrom(const SimulationWorld_LatencyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SimulationWorld_LatencyEntry_DoNotUse::GetMetadata() const {
  ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[11];
}
void SimulationWorld_LatencyEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

SimulationWorld_StoriesEntry_DoNotUse::SimulationWorld_StoriesEntry_DoNotUse() {}
SimulationWorld_StoriesEntry_DoNotUse::SimulationWorld_StoriesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SimulationWorld_StoriesEntry_DoNotUse::MergeFrom(const SimulationWorld_StoriesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SimulationWorld_StoriesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[12];
}
void SimulationWorld_StoriesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

SimulationWorld_SensorMeasurementsEntry_DoNotUse::SimulationWorld_SensorMeasurementsEntry_DoNotUse() {}
SimulationWorld_SensorMeasurementsEntry_DoNotUse::SimulationWorld_SensorMeasurementsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void SimulationWorld_SensorMeasurementsEntry_DoNotUse::MergeFrom(const SimulationWorld_SensorMeasurementsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata SimulationWorld_SensorMeasurementsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[13];
}
void SimulationWorld_SensorMeasurementsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void SimulationWorld::InitAsDefaultInstance() {
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->auto_driving_car_ = const_cast< ::apollo::dreamview::Object*>(
      ::apollo::dreamview::Object::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->traffic_signal_ = const_cast< ::apollo::dreamview::Object*>(
      ::apollo::dreamview::Object::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->main_stop_ = const_cast< ::apollo::dreamview::Object*>(
      ::apollo::dreamview::Object::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->main_decision_ = const_cast< ::apollo::dreamview::Object*>(
      ::apollo::dreamview::Object::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->delay_ = const_cast< ::apollo::dreamview::DelaysInMs*>(
      ::apollo::dreamview::DelaysInMs::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->monitor_ = const_cast< ::apollo::common::monitor::MonitorMessage*>(
      ::apollo::common::monitor::MonitorMessage::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->map_element_ids_ = const_cast< ::apollo::dreamview::MapElementIds*>(
      ::apollo::dreamview::MapElementIds::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->planning_data_ = const_cast< ::apollo::planning_internal::PlanningData*>(
      ::apollo::planning_internal::PlanningData::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->gps_ = const_cast< ::apollo::dreamview::Object*>(
      ::apollo::dreamview::Object::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->lane_marker_ = const_cast< ::apollo::perception::LaneMarkers*>(
      ::apollo::perception::LaneMarkers::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->control_data_ = const_cast< ::apollo::dreamview::ControlData*>(
      ::apollo::dreamview::ControlData::internal_default_instance());
  ::apollo::dreamview::_SimulationWorld_default_instance_._instance.get_mutable()->shadow_localization_ = const_cast< ::apollo::dreamview::Object*>(
      ::apollo::dreamview::Object::internal_default_instance());
}
void SimulationWorld::clear_monitor() {
  if (monitor_ != NULL) monitor_->Clear();
  clear_has_monitor();
}
void SimulationWorld::clear_planning_data() {
  if (planning_data_ != NULL) planning_data_->Clear();
  clear_has_planning_data();
}
void SimulationWorld::clear_lane_marker() {
  if (lane_marker_ != NULL) lane_marker_->Clear();
  clear_has_lane_marker();
}
void SimulationWorld::clear_navigation_path() {
  navigation_path_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimulationWorld::kTimestampFieldNumber;
const int SimulationWorld::kSequenceNumFieldNumber;
const int SimulationWorld::kObjectFieldNumber;
const int SimulationWorld::kAutoDrivingCarFieldNumber;
const int SimulationWorld::kTrafficSignalFieldNumber;
const int SimulationWorld::kRoutePathFieldNumber;
const int SimulationWorld::kRoutingTimeFieldNumber;
const int SimulationWorld::kPlanningTrajectoryFieldNumber;
const int SimulationWorld::kMainStopFieldNumber;
const int SimulationWorld::kMainDecisionFieldNumber;
const int SimulationWorld::kSpeedLimitFieldNumber;
const int SimulationWorld::kDelayFieldNumber;
const int SimulationWorld::kMonitorFieldNumber;
const int SimulationWorld::kNotificationFieldNumber;
const int SimulationWorld::kEngageAdviceFieldNumber;
const int SimulationWorld::kLatencyFieldNumber;
const int SimulationWorld::kMapElementIdsFieldNumber;
const int SimulationWorld::kMapHashFieldNumber;
const int SimulationWorld::kMapRadiusFieldNumber;
const int SimulationWorld::kPlanningDataFieldNumber;
const int SimulationWorld::kGpsFieldNumber;
const int SimulationWorld::kLaneMarkerFieldNumber;
const int SimulationWorld::kControlDataFieldNumber;
const int SimulationWorld::kNavigationPathFieldNumber;
const int SimulationWorld::kIsRssSafeFieldNumber;
const int SimulationWorld::kShadowLocalizationFieldNumber;
const int SimulationWorld::kPerceivedSignalFieldNumber;
const int SimulationWorld::kStoriesFieldNumber;
const int SimulationWorld::kSensorMeasurementsFieldNumber;
const int SimulationWorld::kIsSirenOnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimulationWorld::SimulationWorld()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_SimulationWorld.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.SimulationWorld)
}
SimulationWorld::SimulationWorld(const SimulationWorld& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      object_(from.object_),
      route_path_(from.route_path_),
      planning_trajectory_(from.planning_trajectory_),
      notification_(from.notification_),
      navigation_path_(from.navigation_path_),
      perceived_signal_(from.perceived_signal_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  latency_.MergeFrom(from.latency_);
  stories_.MergeFrom(from.stories_);
  sensor_measurements_.MergeFrom(from.sensor_measurements_);
  engage_advice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_engage_advice()) {
    engage_advice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.engage_advice_);
  }
  if (from.has_auto_driving_car()) {
    auto_driving_car_ = new ::apollo::dreamview::Object(*from.auto_driving_car_);
  } else {
    auto_driving_car_ = NULL;
  }
  if (from.has_traffic_signal()) {
    traffic_signal_ = new ::apollo::dreamview::Object(*from.traffic_signal_);
  } else {
    traffic_signal_ = NULL;
  }
  if (from.has_main_stop()) {
    main_stop_ = new ::apollo::dreamview::Object(*from.main_stop_);
  } else {
    main_stop_ = NULL;
  }
  if (from.has_main_decision()) {
    main_decision_ = new ::apollo::dreamview::Object(*from.main_decision_);
  } else {
    main_decision_ = NULL;
  }
  if (from.has_delay()) {
    delay_ = new ::apollo::dreamview::DelaysInMs(*from.delay_);
  } else {
    delay_ = NULL;
  }
  if (from.has_monitor()) {
    monitor_ = new ::apollo::common::monitor::MonitorMessage(*from.monitor_);
  } else {
    monitor_ = NULL;
  }
  if (from.has_map_element_ids()) {
    map_element_ids_ = new ::apollo::dreamview::MapElementIds(*from.map_element_ids_);
  } else {
    map_element_ids_ = NULL;
  }
  if (from.has_planning_data()) {
    planning_data_ = new ::apollo::planning_internal::PlanningData(*from.planning_data_);
  } else {
    planning_data_ = NULL;
  }
  if (from.has_gps()) {
    gps_ = new ::apollo::dreamview::Object(*from.gps_);
  } else {
    gps_ = NULL;
  }
  if (from.has_lane_marker()) {
    lane_marker_ = new ::apollo::perception::LaneMarkers(*from.lane_marker_);
  } else {
    lane_marker_ = NULL;
  }
  if (from.has_control_data()) {
    control_data_ = new ::apollo::dreamview::ControlData(*from.control_data_);
  } else {
    control_data_ = NULL;
  }
  if (from.has_shadow_localization()) {
    shadow_localization_ = new ::apollo::dreamview::Object(*from.shadow_localization_);
  } else {
    shadow_localization_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_rss_safe_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(is_rss_safe_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.SimulationWorld)
}

void SimulationWorld::SharedCtor() {
  engage_advice_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&auto_driving_car_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_radius_) -
      reinterpret_cast<char*>(&auto_driving_car_)) + sizeof(map_radius_));
  is_rss_safe_ = true;
}

SimulationWorld::~SimulationWorld() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.SimulationWorld)
  SharedDtor();
}

void SimulationWorld::SharedDtor() {
  engage_advice_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete auto_driving_car_;
  if (this != internal_default_instance()) delete traffic_signal_;
  if (this != internal_default_instance()) delete main_stop_;
  if (this != internal_default_instance()) delete main_decision_;
  if (this != internal_default_instance()) delete delay_;
  if (this != internal_default_instance()) delete monitor_;
  if (this != internal_default_instance()) delete map_element_ids_;
  if (this != internal_default_instance()) delete planning_data_;
  if (this != internal_default_instance()) delete gps_;
  if (this != internal_default_instance()) delete lane_marker_;
  if (this != internal_default_instance()) delete control_data_;
  if (this != internal_default_instance()) delete shadow_localization_;
}

void SimulationWorld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SimulationWorld::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimulationWorld& SimulationWorld::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::scc_info_SimulationWorld.base);
  return *internal_default_instance();
}


void SimulationWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.SimulationWorld)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_.Clear();
  route_path_.Clear();
  planning_trajectory_.Clear();
  notification_.Clear();
  latency_.Clear();
  navigation_path_.Clear();
  perceived_signal_.Clear();
  stories_.Clear();
  sensor_measurements_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      engage_advice_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(auto_driving_car_ != NULL);
      auto_driving_car_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(traffic_signal_ != NULL);
      traffic_signal_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(main_stop_ != NULL);
      main_stop_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(main_decision_ != NULL);
      main_decision_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(delay_ != NULL);
      delay_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(monitor_ != NULL);
      monitor_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(map_element_ids_ != NULL);
      map_element_ids_->Clear();
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(planning_data_ != NULL);
      planning_data_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(gps_ != NULL);
      gps_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(lane_marker_ != NULL);
      lane_marker_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(control_data_ != NULL);
      control_data_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(shadow_localization_ != NULL);
      shadow_localization_->Clear();
    }
  }
  if (cached_has_bits & 57344u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_limit_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(speed_limit_));
  }
  if (cached_has_bits & 2031616u) {
    ::memset(&sequence_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&map_radius_) -
        reinterpret_cast<char*>(&sequence_num_)) + sizeof(map_radius_));
    is_rss_safe_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SimulationWorld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.SimulationWorld)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sequence_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.dreamview.Object object = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.dreamview.Object auto_driving_car = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_auto_driving_car()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.dreamview.Object traffic_signal = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_traffic_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.dreamview.RoutePath route_path = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_route_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double routing_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_routing_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &routing_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.dreamview.Object planning_trajectory = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_planning_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.dreamview.Object main_stop = 9 [deprecated = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_main_stop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.dreamview.Object main_decision = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_main_decision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_limit = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.dreamview.DelaysInMs delay = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_delay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.monitor.MonitorMessage monitor = 13 [deprecated = true];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_monitor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.dreamview.Notification notification = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string engage_advice = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_engage_advice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->engage_advice().data(), static_cast<int>(this->engage_advice().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.SimulationWorld.engage_advice");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .apollo.dreamview.Latency> latency = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          SimulationWorld_LatencyEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SimulationWorld_LatencyEntry_DoNotUse,
              ::std::string, ::apollo::dreamview::Latency,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency > > parser(&latency_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.SimulationWorld.LatencyEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.dreamview.MapElementIds map_element_ids = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_element_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 map_hash = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_map_hash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &map_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double map_radius = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {
          set_has_map_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &map_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.planning_internal.PlanningData planning_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_planning_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.dreamview.Object gps = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.LaneMarkers lane_marker = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u /* 178 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.dreamview.ControlData control_data = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 186 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_control_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.Path navigation_path = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_navigation_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_rss_safe = 25 [default = true];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_is_rss_safe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rss_safe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.dreamview.Object shadow_localization = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shadow_localization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.dreamview.Object perceived_signal = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_perceived_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bool> stories = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          SimulationWorld_StoriesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SimulationWorld_StoriesEntry_DoNotUse,
              ::std::string, bool,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
              0 >,
            ::google::protobuf::Map< ::std::string, bool > > parser(&stories_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.SimulationWorld.StoriesEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .apollo.dreamview.SensorMeasurements> sensor_measurements = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          SimulationWorld_SensorMeasurementsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              SimulationWorld_SensorMeasurementsEntry_DoNotUse,
              ::std::string, ::apollo::dreamview::SensorMeasurements,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::apollo::dreamview::SensorMeasurements > > parser(&sensor_measurements_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.SimulationWorld.SensorMeasurementsEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_siren_on = 30 [default = false];
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_is_siren_on();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_siren_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.SimulationWorld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.SimulationWorld)
  return false;
#undef DO_
}

void SimulationWorld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.SimulationWorld)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp = 1;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // optional uint32 sequence_num = 2;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence_num(), output);
  }

  // repeated .apollo.dreamview.Object object = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->object(static_cast<int>(i)),
      output);
  }

  // optional .apollo.dreamview.Object auto_driving_car = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_auto_driving_car(), output);
  }

  // optional .apollo.dreamview.Object traffic_signal = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_traffic_signal(), output);
  }

  // repeated .apollo.dreamview.RoutePath route_path = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->route_path_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->route_path(static_cast<int>(i)),
      output);
  }

  // optional double routing_time = 7;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->routing_time(), output);
  }

  // repeated .apollo.dreamview.Object planning_trajectory = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->planning_trajectory_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->planning_trajectory(static_cast<int>(i)),
      output);
  }

  // optional .apollo.dreamview.Object main_stop = 9 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_main_stop(), output);
  }

  // optional .apollo.dreamview.Object main_decision = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_main_decision(), output);
  }

  // optional double speed_limit = 11;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->speed_limit(), output);
  }

  // optional .apollo.dreamview.DelaysInMs delay = 12;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_delay(), output);
  }

  // optional .apollo.common.monitor.MonitorMessage monitor = 13 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_monitor(), output);
  }

  // repeated .apollo.dreamview.Notification notification = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notification_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->notification(static_cast<int>(i)),
      output);
  }

  // optional string engage_advice = 15;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->engage_advice().data(), static_cast<int>(this->engage_advice().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.SimulationWorld.engage_advice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->engage_advice(), output);
  }

  // map<string, .apollo.dreamview.Latency> latency = 16;
  if (!this->latency().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.SimulationWorld.LatencyEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->latency().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->latency().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency >::const_iterator
          it = this->latency().begin();
          it != this->latency().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SimulationWorld_LatencyEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(latency_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            16, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SimulationWorld_LatencyEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency >::const_iterator
          it = this->latency().begin();
          it != this->latency().end(); ++it) {
        entry.reset(latency_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            16, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .apollo.dreamview.MapElementIds map_element_ids = 17;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_map_element_ids(), output);
  }

  // optional uint64 map_hash = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->map_hash(), output);
  }

  // optional double map_radius = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->map_radius(), output);
  }

  // optional .apollo.planning_internal.PlanningData planning_data = 20;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_planning_data(), output);
  }

  // optional .apollo.dreamview.Object gps = 21;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->_internal_gps(), output);
  }

  // optional .apollo.perception.LaneMarkers lane_marker = 22;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->_internal_lane_marker(), output);
  }

  // optional .apollo.dreamview.ControlData control_data = 23;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->_internal_control_data(), output);
  }

  // repeated .apollo.common.Path navigation_path = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->navigation_path_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24,
      this->navigation_path(static_cast<int>(i)),
      output);
  }

  // optional bool is_rss_safe = 25 [default = true];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->is_rss_safe(), output);
  }

  // optional .apollo.dreamview.Object shadow_localization = 26;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->_internal_shadow_localization(), output);
  }

  // repeated .apollo.dreamview.Object perceived_signal = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perceived_signal_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27,
      this->perceived_signal(static_cast<int>(i)),
      output);
  }

  // map<string, bool> stories = 28;
  if (!this->stories().empty()) {
    typedef ::google::protobuf::Map< ::std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.SimulationWorld.StoriesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->stories().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->stories().size()]);
      typedef ::google::protobuf::Map< ::std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->stories().begin();
          it != this->stories().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SimulationWorld_StoriesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(stories_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            28, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SimulationWorld_StoriesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->stories().begin();
          it != this->stories().end(); ++it) {
        entry.reset(stories_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            28, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .apollo.dreamview.SensorMeasurements> sensor_measurements = 29;
  if (!this->sensor_measurements().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::SensorMeasurements >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.SimulationWorld.SensorMeasurementsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->sensor_measurements().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->sensor_measurements().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::SensorMeasurements >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::SensorMeasurements >::const_iterator
          it = this->sensor_measurements().begin();
          it != this->sensor_measurements().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SimulationWorld_SensorMeasurementsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(sensor_measurements_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            29, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SimulationWorld_SensorMeasurementsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::SensorMeasurements >::const_iterator
          it = this->sensor_measurements().begin();
          it != this->sensor_measurements().end(); ++it) {
        entry.reset(sensor_measurements_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            29, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional bool is_siren_on = 30 [default = false];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->is_siren_on(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.SimulationWorld)
}

::google::protobuf::uint8* SimulationWorld::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.SimulationWorld)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp = 1;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // optional uint32 sequence_num = 2;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence_num(), target);
  }

  // repeated .apollo.dreamview.Object object = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->object_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->object(static_cast<int>(i)), deterministic, target);
  }

  // optional .apollo.dreamview.Object auto_driving_car = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_auto_driving_car(), deterministic, target);
  }

  // optional .apollo.dreamview.Object traffic_signal = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_traffic_signal(), deterministic, target);
  }

  // repeated .apollo.dreamview.RoutePath route_path = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->route_path_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->route_path(static_cast<int>(i)), deterministic, target);
  }

  // optional double routing_time = 7;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->routing_time(), target);
  }

  // repeated .apollo.dreamview.Object planning_trajectory = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->planning_trajectory_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->planning_trajectory(static_cast<int>(i)), deterministic, target);
  }

  // optional .apollo.dreamview.Object main_stop = 9 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_main_stop(), deterministic, target);
  }

  // optional .apollo.dreamview.Object main_decision = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_main_decision(), deterministic, target);
  }

  // optional double speed_limit = 11;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->speed_limit(), target);
  }

  // optional .apollo.dreamview.DelaysInMs delay = 12;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_delay(), deterministic, target);
  }

  // optional .apollo.common.monitor.MonitorMessage monitor = 13 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_monitor(), deterministic, target);
  }

  // repeated .apollo.dreamview.Notification notification = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notification_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->notification(static_cast<int>(i)), deterministic, target);
  }

  // optional string engage_advice = 15;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->engage_advice().data(), static_cast<int>(this->engage_advice().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.SimulationWorld.engage_advice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->engage_advice(), target);
  }

  // map<string, .apollo.dreamview.Latency> latency = 16;
  if (!this->latency().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.SimulationWorld.LatencyEntry.key");
      }
    };

    if (deterministic &&
        this->latency().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->latency().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency >::const_iterator
          it = this->latency().begin();
          it != this->latency().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SimulationWorld_LatencyEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(latency_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       16, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SimulationWorld_LatencyEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency >::const_iterator
          it = this->latency().begin();
          it != this->latency().end(); ++it) {
        entry.reset(latency_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       16, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .apollo.dreamview.MapElementIds map_element_ids = 17;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_map_element_ids(), deterministic, target);
  }

  // optional uint64 map_hash = 18;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->map_hash(), target);
  }

  // optional double map_radius = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->map_radius(), target);
  }

  // optional .apollo.planning_internal.PlanningData planning_data = 20;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_planning_data(), deterministic, target);
  }

  // optional .apollo.dreamview.Object gps = 21;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->_internal_gps(), deterministic, target);
  }

  // optional .apollo.perception.LaneMarkers lane_marker = 22;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->_internal_lane_marker(), deterministic, target);
  }

  // optional .apollo.dreamview.ControlData control_data = 23;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->_internal_control_data(), deterministic, target);
  }

  // repeated .apollo.common.Path navigation_path = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->navigation_path_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->navigation_path(static_cast<int>(i)), deterministic, target);
  }

  // optional bool is_rss_safe = 25 [default = true];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->is_rss_safe(), target);
  }

  // optional .apollo.dreamview.Object shadow_localization = 26;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, this->_internal_shadow_localization(), deterministic, target);
  }

  // repeated .apollo.dreamview.Object perceived_signal = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perceived_signal_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, this->perceived_signal(static_cast<int>(i)), deterministic, target);
  }

  // map<string, bool> stories = 28;
  if (!this->stories().empty()) {
    typedef ::google::protobuf::Map< ::std::string, bool >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.SimulationWorld.StoriesEntry.key");
      }
    };

    if (deterministic &&
        this->stories().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->stories().size()]);
      typedef ::google::protobuf::Map< ::std::string, bool >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->stories().begin();
          it != this->stories().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SimulationWorld_StoriesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(stories_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       28, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SimulationWorld_StoriesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, bool >::const_iterator
          it = this->stories().begin();
          it != this->stories().end(); ++it) {
        entry.reset(stories_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       28, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .apollo.dreamview.SensorMeasurements> sensor_measurements = 29;
  if (!this->sensor_measurements().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::SensorMeasurements >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.SimulationWorld.SensorMeasurementsEntry.key");
      }
    };

    if (deterministic &&
        this->sensor_measurements().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->sensor_measurements().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::apollo::dreamview::SensorMeasurements >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::SensorMeasurements >::const_iterator
          it = this->sensor_measurements().begin();
          it != this->sensor_measurements().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<SimulationWorld_SensorMeasurementsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(sensor_measurements_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       29, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<SimulationWorld_SensorMeasurementsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::SensorMeasurements >::const_iterator
          it = this->sensor_measurements().begin();
          it != this->sensor_measurements().end(); ++it) {
        entry.reset(sensor_measurements_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       29, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional bool is_siren_on = 30 [default = false];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->is_siren_on(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.SimulationWorld)
  return target;
}

size_t SimulationWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.SimulationWorld)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.dreamview.Object object = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->object(static_cast<int>(i)));
    }
  }

  // repeated .apollo.dreamview.RoutePath route_path = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->route_path_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->route_path(static_cast<int>(i)));
    }
  }

  // repeated .apollo.dreamview.Object planning_trajectory = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->planning_trajectory_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->planning_trajectory(static_cast<int>(i)));
    }
  }

  // repeated .apollo.dreamview.Notification notification = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->notification_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notification(static_cast<int>(i)));
    }
  }

  // map<string, .apollo.dreamview.Latency> latency = 16;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->latency_size());
  {
    ::std::unique_ptr<SimulationWorld_LatencyEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::Latency >::const_iterator
        it = this->latency().begin();
        it != this->latency().end(); ++it) {
      entry.reset(latency_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .apollo.common.Path navigation_path = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->navigation_path_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->navigation_path(static_cast<int>(i)));
    }
  }

  // repeated .apollo.dreamview.Object perceived_signal = 27;
  {
    unsigned int count = static_cast<unsigned int>(this->perceived_signal_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->perceived_signal(static_cast<int>(i)));
    }
  }

  // map<string, bool> stories = 28;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->stories_size());
  {
    ::std::unique_ptr<SimulationWorld_StoriesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, bool >::const_iterator
        it = this->stories().begin();
        it != this->stories().end(); ++it) {
      entry.reset(stories_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .apollo.dreamview.SensorMeasurements> sensor_measurements = 29;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->sensor_measurements_size());
  {
    ::std::unique_ptr<SimulationWorld_SensorMeasurementsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::apollo::dreamview::SensorMeasurements >::const_iterator
        it = this->sensor_measurements().begin();
        it != this->sensor_measurements().end(); ++it) {
      entry.reset(sensor_measurements_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string engage_advice = 15;
    if (has_engage_advice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->engage_advice());
    }

    // optional .apollo.dreamview.Object auto_driving_car = 4;
    if (has_auto_driving_car()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *auto_driving_car_);
    }

    // optional .apollo.dreamview.Object traffic_signal = 5;
    if (has_traffic_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *traffic_signal_);
    }

    // optional .apollo.dreamview.Object main_stop = 9 [deprecated = true];
    if (has_main_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *main_stop_);
    }

    // optional .apollo.dreamview.Object main_decision = 10;
    if (has_main_decision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *main_decision_);
    }

    // optional .apollo.dreamview.DelaysInMs delay = 12;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *delay_);
    }

    // optional .apollo.common.monitor.MonitorMessage monitor = 13 [deprecated = true];
    if (has_monitor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *monitor_);
    }

    // optional .apollo.dreamview.MapElementIds map_element_ids = 17;
    if (has_map_element_ids()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *map_element_ids_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .apollo.planning_internal.PlanningData planning_data = 20;
    if (has_planning_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *planning_data_);
    }

    // optional .apollo.dreamview.Object gps = 21;
    if (has_gps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *gps_);
    }

    // optional .apollo.perception.LaneMarkers lane_marker = 22;
    if (has_lane_marker()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lane_marker_);
    }

    // optional .apollo.dreamview.ControlData control_data = 23;
    if (has_control_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *control_data_);
    }

    // optional .apollo.dreamview.Object shadow_localization = 26;
    if (has_shadow_localization()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *shadow_localization_);
    }

    // optional double timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional double routing_time = 7;
    if (has_routing_time()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 11;
    if (has_speed_limit()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional uint32 sequence_num = 2;
    if (has_sequence_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_num());
    }

    // optional bool is_siren_on = 30 [default = false];
    if (has_is_siren_on()) {
      total_size += 2 + 1;
    }

    // optional uint64 map_hash = 18;
    if (has_map_hash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->map_hash());
    }

    // optional double map_radius = 19;
    if (has_map_radius()) {
      total_size += 2 + 8;
    }

    // optional bool is_rss_safe = 25 [default = true];
    if (has_is_rss_safe()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulationWorld::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.SimulationWorld)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulationWorld* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimulationWorld>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.SimulationWorld)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.SimulationWorld)
    MergeFrom(*source);
  }
}

void SimulationWorld::MergeFrom(const SimulationWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.SimulationWorld)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_.MergeFrom(from.object_);
  route_path_.MergeFrom(from.route_path_);
  planning_trajectory_.MergeFrom(from.planning_trajectory_);
  notification_.MergeFrom(from.notification_);
  latency_.MergeFrom(from.latency_);
  navigation_path_.MergeFrom(from.navigation_path_);
  perceived_signal_.MergeFrom(from.perceived_signal_);
  stories_.MergeFrom(from.stories_);
  sensor_measurements_.MergeFrom(from.sensor_measurements_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_engage_advice();
      engage_advice_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.engage_advice_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_auto_driving_car()->::apollo::dreamview::Object::MergeFrom(from.auto_driving_car());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_traffic_signal()->::apollo::dreamview::Object::MergeFrom(from.traffic_signal());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_main_stop()->::apollo::dreamview::Object::MergeFrom(from.main_stop());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_main_decision()->::apollo::dreamview::Object::MergeFrom(from.main_decision());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_delay()->::apollo::dreamview::DelaysInMs::MergeFrom(from.delay());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_monitor()->::apollo::common::monitor::MonitorMessage::MergeFrom(from.monitor());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_map_element_ids()->::apollo::dreamview::MapElementIds::MergeFrom(from.map_element_ids());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_planning_data()->::apollo::planning_internal::PlanningData::MergeFrom(from.planning_data());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_gps()->::apollo::dreamview::Object::MergeFrom(from.gps());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_lane_marker()->::apollo::perception::LaneMarkers::MergeFrom(from.lane_marker());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_control_data()->::apollo::dreamview::ControlData::MergeFrom(from.control_data());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_shadow_localization()->::apollo::dreamview::Object::MergeFrom(from.shadow_localization());
    }
    if (cached_has_bits & 0x00002000u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00004000u) {
      routing_time_ = from.routing_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      speed_limit_ = from.speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      sequence_num_ = from.sequence_num_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_siren_on_ = from.is_siren_on_;
    }
    if (cached_has_bits & 0x00040000u) {
      map_hash_ = from.map_hash_;
    }
    if (cached_has_bits & 0x00080000u) {
      map_radius_ = from.map_radius_;
    }
    if (cached_has_bits & 0x00100000u) {
      is_rss_safe_ = from.is_rss_safe_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimulationWorld::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.SimulationWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationWorld::CopyFrom(const SimulationWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.SimulationWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationWorld::IsInitialized() const {
  return true;
}

void SimulationWorld::Swap(SimulationWorld* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimulationWorld::InternalSwap(SimulationWorld* other) {
  using std::swap;
  CastToBase(&object_)->InternalSwap(CastToBase(&other->object_));
  CastToBase(&route_path_)->InternalSwap(CastToBase(&other->route_path_));
  CastToBase(&planning_trajectory_)->InternalSwap(CastToBase(&other->planning_trajectory_));
  CastToBase(&notification_)->InternalSwap(CastToBase(&other->notification_));
  latency_.Swap(&other->latency_);
  CastToBase(&navigation_path_)->InternalSwap(CastToBase(&other->navigation_path_));
  CastToBase(&perceived_signal_)->InternalSwap(CastToBase(&other->perceived_signal_));
  stories_.Swap(&other->stories_);
  sensor_measurements_.Swap(&other->sensor_measurements_);
  engage_advice_.Swap(&other->engage_advice_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(auto_driving_car_, other->auto_driving_car_);
  swap(traffic_signal_, other->traffic_signal_);
  swap(main_stop_, other->main_stop_);
  swap(main_decision_, other->main_decision_);
  swap(delay_, other->delay_);
  swap(monitor_, other->monitor_);
  swap(map_element_ids_, other->map_element_ids_);
  swap(planning_data_, other->planning_data_);
  swap(gps_, other->gps_);
  swap(lane_marker_, other->lane_marker_);
  swap(control_data_, other->control_data_);
  swap(shadow_localization_, other->shadow_localization_);
  swap(timestamp_, other->timestamp_);
  swap(routing_time_, other->routing_time_);
  swap(speed_limit_, other->speed_limit_);
  swap(sequence_num_, other->sequence_num_);
  swap(is_siren_on_, other->is_siren_on_);
  swap(map_hash_, other->map_hash_);
  swap(map_radius_, other->map_radius_);
  swap(is_rss_safe_, other->is_rss_safe_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SimulationWorld::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fsimulation_5fworld_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dreamview
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::PolygonPoint* Arena::CreateMaybeMessage< ::apollo::dreamview::PolygonPoint >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::PolygonPoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::Prediction* Arena::CreateMaybeMessage< ::apollo::dreamview::Prediction >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Prediction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::Decision* Arena::CreateMaybeMessage< ::apollo::dreamview::Decision >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Decision >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::Object* Arena::CreateMaybeMessage< ::apollo::dreamview::Object >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Object >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::DelaysInMs* Arena::CreateMaybeMessage< ::apollo::dreamview::DelaysInMs >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::DelaysInMs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::RoutePath* Arena::CreateMaybeMessage< ::apollo::dreamview::RoutePath >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::RoutePath >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::Latency* Arena::CreateMaybeMessage< ::apollo::dreamview::Latency >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Latency >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::MapElementIds* Arena::CreateMaybeMessage< ::apollo::dreamview::MapElementIds >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::MapElementIds >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::ControlData* Arena::CreateMaybeMessage< ::apollo::dreamview::ControlData >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::ControlData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::Notification* Arena::CreateMaybeMessage< ::apollo::dreamview::Notification >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Notification >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::SensorMeasurements* Arena::CreateMaybeMessage< ::apollo::dreamview::SensorMeasurements >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::SensorMeasurements >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::SimulationWorld_LatencyEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::SimulationWorld_StoriesEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::SimulationWorld_StoriesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::SimulationWorld_StoriesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::SimulationWorld_SensorMeasurementsEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::SimulationWorld_SensorMeasurementsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::SimulationWorld_SensorMeasurementsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::SimulationWorld* Arena::CreateMaybeMessage< ::apollo::dreamview::SimulationWorld >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::SimulationWorld >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
