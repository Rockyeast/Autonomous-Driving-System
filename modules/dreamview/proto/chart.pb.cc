// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/chart.proto

#include "modules/dreamview/proto/chart.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point2D;
}  // namespace protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto
namespace protobuf_modules_2fdreamview_2fproto_2fchart_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fchart_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Car;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fchart_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Line_PropertiesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fchart_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Options_Axis;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fchart_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Polygon_PropertiesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Options;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fchart_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Line;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fchart_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Polygon;
}  // namespace protobuf_modules_2fdreamview_2fproto_2fchart_2eproto
namespace apollo {
namespace dreamview {
class Options_AxisDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Options_Axis>
      _instance;
} _Options_Axis_default_instance_;
class OptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Options>
      _instance;
} _Options_default_instance_;
class Line_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Line_PropertiesEntry_DoNotUse>
      _instance;
} _Line_PropertiesEntry_DoNotUse_default_instance_;
class LineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Line>
      _instance;
} _Line_default_instance_;
class Polygon_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Polygon_PropertiesEntry_DoNotUse>
      _instance;
} _Polygon_PropertiesEntry_DoNotUse_default_instance_;
class PolygonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Polygon>
      _instance;
} _Polygon_default_instance_;
class CarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Car>
      _instance;
} _Car_default_instance_;
class ChartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Chart>
      _instance;
} _Chart_default_instance_;
}  // namespace dreamview
}  // namespace apollo
namespace protobuf_modules_2fdreamview_2fproto_2fchart_2eproto {
static void InitDefaultsOptions_Axis() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Options_Axis_default_instance_;
    new (ptr) ::apollo::dreamview::Options_Axis();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Options_Axis::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Options_Axis =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOptions_Axis}, {}};

static void InitDefaultsOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Options_default_instance_;
    new (ptr) ::apollo::dreamview::Options();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Options::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Options =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOptions}, {
      &protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::scc_info_Options_Axis.base,}};

static void InitDefaultsLine_PropertiesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Line_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::Line_PropertiesEntry_DoNotUse();
  }
  ::apollo::dreamview::Line_PropertiesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Line_PropertiesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLine_PropertiesEntry_DoNotUse}, {}};

static void InitDefaultsLine() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Line_default_instance_;
    new (ptr) ::apollo::dreamview::Line();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Line::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Line =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLine}, {
      &protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::scc_info_Point2D.base,
      &protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::scc_info_Line_PropertiesEntry_DoNotUse.base,}};

static void InitDefaultsPolygon_PropertiesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Polygon_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::Polygon_PropertiesEntry_DoNotUse();
  }
  ::apollo::dreamview::Polygon_PropertiesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Polygon_PropertiesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPolygon_PropertiesEntry_DoNotUse}, {}};

static void InitDefaultsPolygon() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Polygon_default_instance_;
    new (ptr) ::apollo::dreamview::Polygon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Polygon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Polygon =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPolygon}, {
      &protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::scc_info_Point2D.base,
      &protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::scc_info_Polygon_PropertiesEntry_DoNotUse.base,}};

static void InitDefaultsCar() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Car_default_instance_;
    new (ptr) ::apollo::dreamview::Car();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Car::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Car =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCar}, {}};

static void InitDefaultsChart() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_Chart_default_instance_;
    new (ptr) ::apollo::dreamview::Chart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::Chart::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Chart =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsChart}, {
      &protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::scc_info_Options.base,
      &protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::scc_info_Line.base,
      &protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::scc_info_Polygon.base,
      &protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::scc_info_Car.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Options_Axis.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Options.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Line_PropertiesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Line.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Polygon_PropertiesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Polygon.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Car.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Chart.base);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Options_Axis, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Options_Axis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Options_Axis, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Options_Axis, max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Options_Axis, label_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Options_Axis, window_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Options_Axis, step_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Options_Axis, mid_value_),
  1,
  2,
  0,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Options, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Options, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Options, legend_display_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Options, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Options, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Options, aspect_ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Options, sync_xy_window_size_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Line_PropertiesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Line_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Line_PropertiesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Line_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Line, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Line, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Line, hide_label_in_legend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Line, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Line, properties_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Polygon_PropertiesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Polygon_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Polygon_PropertiesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Polygon_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Polygon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Polygon, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Polygon, hide_label_in_legend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Polygon, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Polygon, properties_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Car, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Car, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Car, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Car, hide_label_in_legend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Car, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Car, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Car, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Car, color_),
  0,
  5,
  2,
  3,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Chart, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Chart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Chart, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Chart, options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Chart, line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Chart, polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::Chart, car_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::apollo::dreamview::Options_Axis)},
  { 17, 27, sizeof(::apollo::dreamview::Options)},
  { 32, 39, sizeof(::apollo::dreamview::Line_PropertiesEntry_DoNotUse)},
  { 41, 50, sizeof(::apollo::dreamview::Line)},
  { 54, 61, sizeof(::apollo::dreamview::Polygon_PropertiesEntry_DoNotUse)},
  { 63, 72, sizeof(::apollo::dreamview::Polygon)},
  { 76, 87, sizeof(::apollo::dreamview::Car)},
  { 93, 103, sizeof(::apollo::dreamview::Chart)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_Options_Axis_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_Options_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_Line_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_Line_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_Polygon_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_Polygon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_Car_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_Chart_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/dreamview/proto/chart.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n#modules/dreamview/proto/chart.proto\022\020a"
      "pollo.dreamview\032#modules/common/proto/ge"
      "ometry.proto\"\252\002\n\007Options\022\034\n\016legend_displ"
      "ay\030\001 \001(\010:\004true\022)\n\001x\030\002 \001(\0132\036.apollo.dream"
      "view.Options.Axis\022)\n\001y\030\003 \001(\0132\036.apollo.dr"
      "eamview.Options.Axis\022\024\n\014aspect_ratio\030\004 \001"
      "(\001\022\"\n\023sync_xy_window_size\030\005 \001(\010:\005false\032q"
      "\n\004Axis\022\013\n\003min\030\001 \001(\001\022\013\n\003max\030\002 \001(\001\022\024\n\014labe"
      "l_string\030\003 \001(\t\022\023\n\013window_size\030\004 \001(\001\022\021\n\ts"
      "tep_size\030\005 \001(\001\022\021\n\tmid_value\030\006 \001(\001\"\320\001\n\004Li"
      "ne\022\r\n\005label\030\001 \001(\t\022#\n\024hide_label_in_legen"
      "d\030\002 \001(\010:\005false\022%\n\005point\030\003 \003(\0132\026.apollo.c"
      "ommon.Point2D\022:\n\nproperties\030\004 \003(\0132&.apol"
      "lo.dreamview.Line.PropertiesEntry\0321\n\017Pro"
      "pertiesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t"
      ":\0028\001\"\326\001\n\007Polygon\022\r\n\005label\030\001 \001(\t\022#\n\024hide_"
      "label_in_legend\030\002 \001(\010:\005false\022%\n\005point\030\003 "
      "\003(\0132\026.apollo.common.Point2D\022=\n\npropertie"
      "s\030\004 \003(\0132).apollo.dreamview.Polygon.Prope"
      "rtiesEntry\0321\n\017PropertiesEntry\022\013\n\003key\030\001 \001"
      "(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"o\n\003Car\022\r\n\005label\030\001 "
      "\001(\t\022#\n\024hide_label_in_legend\030\002 \001(\010:\005false"
      "\022\t\n\001x\030\003 \001(\001\022\t\n\001y\030\004 \001(\001\022\017\n\007heading\030\005 \001(\001\022"
      "\r\n\005color\030\006 \001(\t\"\270\001\n\005Chart\022\r\n\005title\030\001 \001(\t\022"
      "*\n\007options\030\002 \001(\0132\031.apollo.dreamview.Opti"
      "ons\022$\n\004line\030\003 \003(\0132\026.apollo.dreamview.Lin"
      "e\022*\n\007polygon\030\004 \003(\0132\031.apollo.dreamview.Po"
      "lygon\022\"\n\003car\030\005 \003(\0132\025.apollo.dreamview.Ca"
      "r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1121);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/dreamview/proto/chart.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fdreamview_2fproto_2fchart_2eproto
namespace apollo {
namespace dreamview {

// ===================================================================

void Options_Axis::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Options_Axis::kMinFieldNumber;
const int Options_Axis::kMaxFieldNumber;
const int Options_Axis::kLabelStringFieldNumber;
const int Options_Axis::kWindowSizeFieldNumber;
const int Options_Axis::kStepSizeFieldNumber;
const int Options_Axis::kMidValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Options_Axis::Options_Axis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::scc_info_Options_Axis.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Options.Axis)
}
Options_Axis::Options_Axis(const Options_Axis& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label_string()) {
    label_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_string_);
  }
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&mid_value_) -
    reinterpret_cast<char*>(&min_)) + sizeof(mid_value_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Options.Axis)
}

void Options_Axis::SharedCtor() {
  label_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mid_value_) -
      reinterpret_cast<char*>(&min_)) + sizeof(mid_value_));
}

Options_Axis::~Options_Axis() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Options.Axis)
  SharedDtor();
}

void Options_Axis::SharedDtor() {
  label_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Options_Axis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Options_Axis::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Options_Axis& Options_Axis::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::scc_info_Options_Axis.base);
  return *internal_default_instance();
}


void Options_Axis::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Options.Axis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_string_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mid_value_) -
        reinterpret_cast<char*>(&min_)) + sizeof(mid_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Options_Axis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Options.Axis)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string label_string = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label_string().data(), static_cast<int>(this->label_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Options.Axis.label_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double window_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_window_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &window_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double step_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_step_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &step_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double mid_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_mid_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mid_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Options.Axis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Options.Axis)
  return false;
#undef DO_
}

void Options_Axis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Options.Axis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min(), output);
  }

  // optional double max = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->max(), output);
  }

  // optional string label_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label_string().data(), static_cast<int>(this->label_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Options.Axis.label_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->label_string(), output);
  }

  // optional double window_size = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->window_size(), output);
  }

  // optional double step_size = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->step_size(), output);
  }

  // optional double mid_value = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->mid_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Options.Axis)
}

::google::protobuf::uint8* Options_Axis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Options.Axis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min(), target);
  }

  // optional double max = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->max(), target);
  }

  // optional string label_string = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label_string().data(), static_cast<int>(this->label_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Options.Axis.label_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->label_string(), target);
  }

  // optional double window_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->window_size(), target);
  }

  // optional double step_size = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->step_size(), target);
  }

  // optional double mid_value = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->mid_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Options.Axis)
  return target;
}

size_t Options_Axis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Options.Axis)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string label_string = 3;
    if (has_label_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label_string());
    }

    // optional double min = 1;
    if (has_min()) {
      total_size += 1 + 8;
    }

    // optional double max = 2;
    if (has_max()) {
      total_size += 1 + 8;
    }

    // optional double window_size = 4;
    if (has_window_size()) {
      total_size += 1 + 8;
    }

    // optional double step_size = 5;
    if (has_step_size()) {
      total_size += 1 + 8;
    }

    // optional double mid_value = 6;
    if (has_mid_value()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Options_Axis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Options.Axis)
  GOOGLE_DCHECK_NE(&from, this);
  const Options_Axis* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Options_Axis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Options.Axis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Options.Axis)
    MergeFrom(*source);
  }
}

void Options_Axis::MergeFrom(const Options_Axis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Options.Axis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_label_string();
      label_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_ = from.max_;
    }
    if (cached_has_bits & 0x00000008u) {
      window_size_ = from.window_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      step_size_ = from.step_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      mid_value_ = from.mid_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Options_Axis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Options.Axis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Options_Axis::CopyFrom(const Options_Axis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Options.Axis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Options_Axis::IsInitialized() const {
  return true;
}

void Options_Axis::Swap(Options_Axis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Options_Axis::InternalSwap(Options_Axis* other) {
  using std::swap;
  label_string_.Swap(&other->label_string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(window_size_, other->window_size_);
  swap(step_size_, other->step_size_);
  swap(mid_value_, other->mid_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Options_Axis::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Options::InitAsDefaultInstance() {
  ::apollo::dreamview::_Options_default_instance_._instance.get_mutable()->x_ = const_cast< ::apollo::dreamview::Options_Axis*>(
      ::apollo::dreamview::Options_Axis::internal_default_instance());
  ::apollo::dreamview::_Options_default_instance_._instance.get_mutable()->y_ = const_cast< ::apollo::dreamview::Options_Axis*>(
      ::apollo::dreamview::Options_Axis::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Options::kLegendDisplayFieldNumber;
const int Options::kXFieldNumber;
const int Options::kYFieldNumber;
const int Options::kAspectRatioFieldNumber;
const int Options::kSyncXyWindowSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Options::Options()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::scc_info_Options.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Options)
}
Options::Options(const Options& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_x()) {
    x_ = new ::apollo::dreamview::Options_Axis(*from.x_);
  } else {
    x_ = NULL;
  }
  if (from.has_y()) {
    y_ = new ::apollo::dreamview::Options_Axis(*from.y_);
  } else {
    y_ = NULL;
  }
  ::memcpy(&aspect_ratio_, &from.aspect_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&legend_display_) -
    reinterpret_cast<char*>(&aspect_ratio_)) + sizeof(legend_display_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Options)
}

void Options::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_xy_window_size_) -
      reinterpret_cast<char*>(&x_)) + sizeof(sync_xy_window_size_));
  legend_display_ = true;
}

Options::~Options() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Options)
  SharedDtor();
}

void Options::SharedDtor() {
  if (this != internal_default_instance()) delete x_;
  if (this != internal_default_instance()) delete y_;
}

void Options::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Options::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Options& Options::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::scc_info_Options.base);
  return *internal_default_instance();
}


void Options::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Options)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(x_ != NULL);
      x_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(y_ != NULL);
      y_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&aspect_ratio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sync_xy_window_size_) -
        reinterpret_cast<char*>(&aspect_ratio_)) + sizeof(sync_xy_window_size_));
    legend_display_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Options::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Options)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool legend_display = 1 [default = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_legend_display();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &legend_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.dreamview.Options.Axis x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.dreamview.Options.Axis y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double aspect_ratio = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_aspect_ratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aspect_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sync_xy_window_size = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_sync_xy_window_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_xy_window_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Options)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Options)
  return false;
#undef DO_
}

void Options::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Options)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool legend_display = 1 [default = true];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->legend_display(), output);
  }

  // optional .apollo.dreamview.Options.Axis x = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_x(), output);
  }

  // optional .apollo.dreamview.Options.Axis y = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_y(), output);
  }

  // optional double aspect_ratio = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->aspect_ratio(), output);
  }

  // optional bool sync_xy_window_size = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->sync_xy_window_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Options)
}

::google::protobuf::uint8* Options::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Options)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool legend_display = 1 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->legend_display(), target);
  }

  // optional .apollo.dreamview.Options.Axis x = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_x(), deterministic, target);
  }

  // optional .apollo.dreamview.Options.Axis y = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_y(), deterministic, target);
  }

  // optional double aspect_ratio = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->aspect_ratio(), target);
  }

  // optional bool sync_xy_window_size = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->sync_xy_window_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Options)
  return target;
}

size_t Options::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Options)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .apollo.dreamview.Options.Axis x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *x_);
    }

    // optional .apollo.dreamview.Options.Axis y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *y_);
    }

    // optional double aspect_ratio = 4;
    if (has_aspect_ratio()) {
      total_size += 1 + 8;
    }

    // optional bool sync_xy_window_size = 5 [default = false];
    if (has_sync_xy_window_size()) {
      total_size += 1 + 1;
    }

    // optional bool legend_display = 1 [default = true];
    if (has_legend_display()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Options::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Options)
  GOOGLE_DCHECK_NE(&from, this);
  const Options* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Options>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Options)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Options)
    MergeFrom(*source);
  }
}

void Options::MergeFrom(const Options& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Options)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_x()->::apollo::dreamview::Options_Axis::MergeFrom(from.x());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_y()->::apollo::dreamview::Options_Axis::MergeFrom(from.y());
    }
    if (cached_has_bits & 0x00000004u) {
      aspect_ratio_ = from.aspect_ratio_;
    }
    if (cached_has_bits & 0x00000008u) {
      sync_xy_window_size_ = from.sync_xy_window_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      legend_display_ = from.legend_display_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Options::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Options::CopyFrom(const Options& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Options)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Options::IsInitialized() const {
  return true;
}

void Options::Swap(Options* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Options::InternalSwap(Options* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(aspect_ratio_, other->aspect_ratio_);
  swap(sync_xy_window_size_, other->sync_xy_window_size_);
  swap(legend_display_, other->legend_display_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Options::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Line_PropertiesEntry_DoNotUse::Line_PropertiesEntry_DoNotUse() {}
Line_PropertiesEntry_DoNotUse::Line_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Line_PropertiesEntry_DoNotUse::MergeFrom(const Line_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Line_PropertiesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[2];
}
void Line_PropertiesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Line::InitAsDefaultInstance() {
}
void Line::clear_point() {
  point_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Line::kLabelFieldNumber;
const int Line::kHideLabelInLegendFieldNumber;
const int Line::kPointFieldNumber;
const int Line::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Line::Line()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::scc_info_Line.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Line)
}
Line::Line(const Line& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  hide_label_in_legend_ = from.hide_label_in_legend_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Line)
}

void Line::SharedCtor() {
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hide_label_in_legend_ = false;
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Line)
  SharedDtor();
}

void Line::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Line::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Line::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Line& Line::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::scc_info_Line.base);
  return *internal_default_instance();
}


void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  properties_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_.ClearNonDefaultToEmptyNoArena();
  }
  hide_label_in_legend_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Line)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), static_cast<int>(this->label().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Line.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hide_label_in_legend = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_hide_label_in_legend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_label_in_legend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.Point2D point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> properties = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          Line_PropertiesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Line_PropertiesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&properties_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Line.PropertiesEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Line.PropertiesEntry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Line)
  return false;
#undef DO_
}

void Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Line.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  // optional bool hide_label_in_legend = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hide_label_in_legend(), output);
  }

  // repeated .apollo.common.Point2D point = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->point(static_cast<int>(i)),
      output);
  }

  // map<string, string> properties = 4;
  if (!this->properties().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.Line.PropertiesEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.Line.PropertiesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Line_PropertiesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(properties_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Line_PropertiesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        entry.reset(properties_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Line)
}

::google::protobuf::uint8* Line::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Line.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // optional bool hide_label_in_legend = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hide_label_in_legend(), target);
  }

  // repeated .apollo.common.Point2D point = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->point(static_cast<int>(i)), deterministic, target);
  }

  // map<string, string> properties = 4;
  if (!this->properties().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.Line.PropertiesEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.Line.PropertiesEntry.value");
      }
    };

    if (deterministic &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Line_PropertiesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(properties_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Line_PropertiesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        entry.reset(properties_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Line)
  return target;
}

size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Line)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.common.Point2D point = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->point(static_cast<int>(i)));
    }
  }

  // map<string, string> properties = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->properties_size());
  {
    ::std::unique_ptr<Line_PropertiesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->properties().begin();
        it != this->properties().end(); ++it) {
      entry.reset(properties_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string label = 1;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional bool hide_label_in_legend = 2 [default = false];
    if (has_hide_label_in_legend()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Line::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Line)
  GOOGLE_DCHECK_NE(&from, this);
  const Line* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Line>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Line)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Line)
    MergeFrom(*source);
  }
}

void Line::MergeFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Line)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
  properties_.MergeFrom(from.properties_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000002u) {
      hide_label_in_legend_ = from.hide_label_in_legend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Line::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {
  return true;
}

void Line::Swap(Line* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Line::InternalSwap(Line* other) {
  using std::swap;
  CastToBase(&point_)->InternalSwap(CastToBase(&other->point_));
  properties_.Swap(&other->properties_);
  label_.Swap(&other->label_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hide_label_in_legend_, other->hide_label_in_legend_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Line::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Polygon_PropertiesEntry_DoNotUse::Polygon_PropertiesEntry_DoNotUse() {}
Polygon_PropertiesEntry_DoNotUse::Polygon_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Polygon_PropertiesEntry_DoNotUse::MergeFrom(const Polygon_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Polygon_PropertiesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[4];
}
void Polygon_PropertiesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Polygon::InitAsDefaultInstance() {
}
void Polygon::clear_point() {
  point_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polygon::kLabelFieldNumber;
const int Polygon::kHideLabelInLegendFieldNumber;
const int Polygon::kPointFieldNumber;
const int Polygon::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polygon::Polygon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::scc_info_Polygon.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  hide_label_in_legend_ = from.hide_label_in_legend_;
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Polygon)
}

void Polygon::SharedCtor() {
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hide_label_in_legend_ = false;
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Polygon)
  SharedDtor();
}

void Polygon::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Polygon::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Polygon& Polygon::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::scc_info_Polygon.base);
  return *internal_default_instance();
}


void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  properties_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    label_.ClearNonDefaultToEmptyNoArena();
  }
  hide_label_in_legend_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Polygon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), static_cast<int>(this->label().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Polygon.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hide_label_in_legend = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_hide_label_in_legend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_label_in_legend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.Point2D point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> properties = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          Polygon_PropertiesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Polygon_PropertiesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&properties_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Polygon.PropertiesEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Polygon.PropertiesEntry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Polygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Polygon)
  return false;
#undef DO_
}

void Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Polygon.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  // optional bool hide_label_in_legend = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hide_label_in_legend(), output);
  }

  // repeated .apollo.common.Point2D point = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->point(static_cast<int>(i)),
      output);
  }

  // map<string, string> properties = 4;
  if (!this->properties().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.Polygon.PropertiesEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.Polygon.PropertiesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Polygon_PropertiesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(properties_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Polygon_PropertiesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        entry.reset(properties_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Polygon)
}

::google::protobuf::uint8* Polygon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Polygon.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // optional bool hide_label_in_legend = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hide_label_in_legend(), target);
  }

  // repeated .apollo.common.Point2D point = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->point(static_cast<int>(i)), deterministic, target);
  }

  // map<string, string> properties = 4;
  if (!this->properties().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.Polygon.PropertiesEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.Polygon.PropertiesEntry.value");
      }
    };

    if (deterministic &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Polygon_PropertiesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(properties_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Polygon_PropertiesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        entry.reset(properties_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Polygon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.common.Point2D point = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->point(static_cast<int>(i)));
    }
  }

  // map<string, string> properties = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->properties_size());
  {
    ::std::unique_ptr<Polygon_PropertiesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->properties().begin();
        it != this->properties().end(); ++it) {
      entry.reset(properties_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string label = 1;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional bool hide_label_in_legend = 2 [default = false];
    if (has_hide_label_in_legend()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Polygon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Polygon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
  properties_.MergeFrom(from.properties_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000002u) {
      hide_label_in_legend_ = from.hide_label_in_legend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Polygon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::Swap(Polygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  CastToBase(&point_)->InternalSwap(CastToBase(&other->point_));
  properties_.Swap(&other->properties_);
  label_.Swap(&other->label_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hide_label_in_legend_, other->hide_label_in_legend_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Polygon::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Car::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Car::kLabelFieldNumber;
const int Car::kHideLabelInLegendFieldNumber;
const int Car::kXFieldNumber;
const int Car::kYFieldNumber;
const int Car::kHeadingFieldNumber;
const int Car::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Car::Car()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::scc_info_Car.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Car)
}
Car::Car(const Car& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_color()) {
    color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&hide_label_in_legend_) -
    reinterpret_cast<char*>(&x_)) + sizeof(hide_label_in_legend_));
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Car)
}

void Car::SharedCtor() {
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hide_label_in_legend_) -
      reinterpret_cast<char*>(&x_)) + sizeof(hide_label_in_legend_));
}

Car::~Car() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Car)
  SharedDtor();
}

void Car::SharedDtor() {
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Car::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Car::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Car& Car::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::scc_info_Car.base);
  return *internal_default_instance();
}


void Car::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Car)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      label_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      color_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hide_label_in_legend_) -
        reinterpret_cast<char*>(&x_)) + sizeof(hide_label_in_legend_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Car::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Car)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), static_cast<int>(this->label().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Car.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hide_label_in_legend = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_hide_label_in_legend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hide_label_in_legend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string color = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->color().data(), static_cast<int>(this->color().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Car.color");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Car)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Car)
  return false;
#undef DO_
}

void Car::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Car)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Car.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->label(), output);
  }

  // optional bool hide_label_in_legend = 2 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hide_label_in_legend(), output);
  }

  // optional double x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // optional double y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // optional double heading = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading(), output);
  }

  // optional string color = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), static_cast<int>(this->color().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Car.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Car)
}

::google::protobuf::uint8* Car::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Car)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string label = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), static_cast<int>(this->label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Car.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // optional bool hide_label_in_legend = 2 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hide_label_in_legend(), target);
  }

  // optional double x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // optional double y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // optional double heading = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading(), target);
  }

  // optional string color = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), static_cast<int>(this->color().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Car.color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Car)
  return target;
}

size_t Car::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Car)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string label = 1;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string color = 6;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }

    // optional double x = 3;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 4;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double heading = 5;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional bool hide_label_in_legend = 2 [default = false];
    if (has_hide_label_in_legend()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Car::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Car)
  GOOGLE_DCHECK_NE(&from, this);
  const Car* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Car>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Car)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Car)
    MergeFrom(*source);
  }
}

void Car::MergeFrom(const Car& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Car)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_color();
      color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000020u) {
      hide_label_in_legend_ = from.hide_label_in_legend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Car::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Car)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Car::CopyFrom(const Car& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Car)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Car::IsInitialized() const {
  return true;
}

void Car::Swap(Car* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Car::InternalSwap(Car* other) {
  using std::swap;
  label_.Swap(&other->label_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  color_.Swap(&other->color_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(heading_, other->heading_);
  swap(hide_label_in_legend_, other->hide_label_in_legend_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Car::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Chart::InitAsDefaultInstance() {
  ::apollo::dreamview::_Chart_default_instance_._instance.get_mutable()->options_ = const_cast< ::apollo::dreamview::Options*>(
      ::apollo::dreamview::Options::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chart::kTitleFieldNumber;
const int Chart::kOptionsFieldNumber;
const int Chart::kLineFieldNumber;
const int Chart::kPolygonFieldNumber;
const int Chart::kCarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chart::Chart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::scc_info_Chart.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.Chart)
}
Chart::Chart(const Chart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      line_(from.line_),
      polygon_(from.polygon_),
      car_(from.car_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.has_options()) {
    options_ = new ::apollo::dreamview::Options(*from.options_);
  } else {
    options_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.Chart)
}

void Chart::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  options_ = NULL;
}

Chart::~Chart() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.Chart)
  SharedDtor();
}

void Chart::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void Chart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Chart::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Chart& Chart::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::scc_info_Chart.base);
  return *internal_default_instance();
}


void Chart::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.Chart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  line_.Clear();
  polygon_.Clear();
  car_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != NULL);
      options_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Chart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.Chart)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.Chart.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.dreamview.Options options = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.dreamview.Line line = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.dreamview.Polygon polygon = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.dreamview.Car car = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_car()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.Chart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.Chart)
  return false;
#undef DO_
}

void Chart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.Chart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Chart.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional .apollo.dreamview.Options options = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_options(), output);
  }

  // repeated .apollo.dreamview.Line line = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->line_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->line(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.dreamview.Polygon polygon = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->polygon(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.dreamview.Car car = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->car_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->car(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.Chart)
}

::google::protobuf::uint8* Chart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.Chart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.Chart.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional .apollo.dreamview.Options options = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_options(), deterministic, target);
  }

  // repeated .apollo.dreamview.Line line = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->line_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->line(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.dreamview.Polygon polygon = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->polygon(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.dreamview.Car car = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->car_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->car(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.Chart)
  return target;
}

size_t Chart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.Chart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.dreamview.Line line = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->line_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->line(static_cast<int>(i)));
    }
  }

  // repeated .apollo.dreamview.Polygon polygon = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->polygon_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->polygon(static_cast<int>(i)));
    }
  }

  // repeated .apollo.dreamview.Car car = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->car_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->car(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional .apollo.dreamview.Options options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *options_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.Chart)
  GOOGLE_DCHECK_NE(&from, this);
  const Chart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Chart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.Chart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.Chart)
    MergeFrom(*source);
  }
}

void Chart::MergeFrom(const Chart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.Chart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  line_.MergeFrom(from.line_);
  polygon_.MergeFrom(from.polygon_);
  car_.MergeFrom(from.car_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_options()->::apollo::dreamview::Options::MergeFrom(from.options());
    }
  }
}

void Chart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.Chart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chart::CopyFrom(const Chart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.Chart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart::IsInitialized() const {
  return true;
}

void Chart::Swap(Chart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chart::InternalSwap(Chart* other) {
  using std::swap;
  CastToBase(&line_)->InternalSwap(CastToBase(&other->line_));
  CastToBase(&polygon_)->InternalSwap(CastToBase(&other->polygon_));
  CastToBase(&car_)->InternalSwap(CastToBase(&other->car_));
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(options_, other->options_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Chart::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dreamview
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::Options_Axis* Arena::CreateMaybeMessage< ::apollo::dreamview::Options_Axis >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Options_Axis >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::Options* Arena::CreateMaybeMessage< ::apollo::dreamview::Options >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Options >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::Line_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::Line_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Line_PropertiesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::Line* Arena::CreateMaybeMessage< ::apollo::dreamview::Line >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Line >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::Polygon_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::Polygon_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Polygon_PropertiesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::Polygon* Arena::CreateMaybeMessage< ::apollo::dreamview::Polygon >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Polygon >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::Car* Arena::CreateMaybeMessage< ::apollo::dreamview::Car >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Car >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::Chart* Arena::CreateMaybeMessage< ::apollo::dreamview::Chart >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::Chart >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
