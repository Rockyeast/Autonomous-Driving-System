// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/hmi_status.proto

#ifndef PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto
#define PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/monitor/proto/system_status.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto 

namespace protobuf_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto
namespace apollo {
namespace dreamview {
class HMIStatus;
class HMIStatusDefaultTypeInternal;
extern HMIStatusDefaultTypeInternal _HMIStatus_default_instance_;
class HMIStatus_ModulesEntry_DoNotUse;
class HMIStatus_ModulesEntry_DoNotUseDefaultTypeInternal;
extern HMIStatus_ModulesEntry_DoNotUseDefaultTypeInternal _HMIStatus_ModulesEntry_DoNotUse_default_instance_;
class HMIStatus_MonitoredComponentsEntry_DoNotUse;
class HMIStatus_MonitoredComponentsEntry_DoNotUseDefaultTypeInternal;
extern HMIStatus_MonitoredComponentsEntry_DoNotUseDefaultTypeInternal _HMIStatus_MonitoredComponentsEntry_DoNotUse_default_instance_;
class HMIStatus_OtherComponentsEntry_DoNotUse;
class HMIStatus_OtherComponentsEntry_DoNotUseDefaultTypeInternal;
extern HMIStatus_OtherComponentsEntry_DoNotUseDefaultTypeInternal _HMIStatus_OtherComponentsEntry_DoNotUse_default_instance_;
}  // namespace dreamview
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::dreamview::HMIStatus* Arena::CreateMaybeMessage<::apollo::dreamview::HMIStatus>(Arena*);
template<> ::apollo::dreamview::HMIStatus_ModulesEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIStatus_ModulesEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::HMIStatus_MonitoredComponentsEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIStatus_MonitoredComponentsEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::HMIStatus_OtherComponentsEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::HMIStatus_OtherComponentsEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace dreamview {

// ===================================================================

class HMIStatus_ModulesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HMIStatus_ModulesEntry_DoNotUse, 
    ::std::string, bool,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HMIStatus_ModulesEntry_DoNotUse, 
    ::std::string, bool,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
    0 > SuperType;
  HMIStatus_ModulesEntry_DoNotUse();
  HMIStatus_ModulesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HMIStatus_ModulesEntry_DoNotUse& other);
  static const HMIStatus_ModulesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIStatus_ModulesEntry_DoNotUse*>(&_HMIStatus_ModulesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HMIStatus_MonitoredComponentsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HMIStatus_MonitoredComponentsEntry_DoNotUse, 
    ::std::string, ::apollo::monitor::ComponentStatus,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HMIStatus_MonitoredComponentsEntry_DoNotUse, 
    ::std::string, ::apollo::monitor::ComponentStatus,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  HMIStatus_MonitoredComponentsEntry_DoNotUse();
  HMIStatus_MonitoredComponentsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HMIStatus_MonitoredComponentsEntry_DoNotUse& other);
  static const HMIStatus_MonitoredComponentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIStatus_MonitoredComponentsEntry_DoNotUse*>(&_HMIStatus_MonitoredComponentsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HMIStatus_OtherComponentsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<HMIStatus_OtherComponentsEntry_DoNotUse, 
    ::std::string, ::apollo::monitor::ComponentStatus,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<HMIStatus_OtherComponentsEntry_DoNotUse, 
    ::std::string, ::apollo::monitor::ComponentStatus,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  HMIStatus_OtherComponentsEntry_DoNotUse();
  HMIStatus_OtherComponentsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const HMIStatus_OtherComponentsEntry_DoNotUse& other);
  static const HMIStatus_OtherComponentsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HMIStatus_OtherComponentsEntry_DoNotUse*>(&_HMIStatus_OtherComponentsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class HMIStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.HMIStatus) */ {
 public:
  HMIStatus();
  virtual ~HMIStatus();

  HMIStatus(const HMIStatus& from);

  inline HMIStatus& operator=(const HMIStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HMIStatus(HMIStatus&& from) noexcept
    : HMIStatus() {
    *this = ::std::move(from);
  }

  inline HMIStatus& operator=(HMIStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HMIStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HMIStatus* internal_default_instance() {
    return reinterpret_cast<const HMIStatus*>(
               &_HMIStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(HMIStatus* other);
  friend void swap(HMIStatus& a, HMIStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HMIStatus* New() const final {
    return CreateMaybeMessage<HMIStatus>(NULL);
  }

  HMIStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HMIStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HMIStatus& from);
  void MergeFrom(const HMIStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HMIStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string modes = 2;
  int modes_size() const;
  void clear_modes();
  static const int kModesFieldNumber = 2;
  const ::std::string& modes(int index) const;
  ::std::string* mutable_modes(int index);
  void set_modes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_modes(int index, ::std::string&& value);
  #endif
  void set_modes(int index, const char* value);
  void set_modes(int index, const char* value, size_t size);
  ::std::string* add_modes();
  void add_modes(const ::std::string& value);
  #if LANG_CXX11
  void add_modes(::std::string&& value);
  #endif
  void add_modes(const char* value);
  void add_modes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& modes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_modes();

  // repeated string maps = 4;
  int maps_size() const;
  void clear_maps();
  static const int kMapsFieldNumber = 4;
  const ::std::string& maps(int index) const;
  ::std::string* mutable_maps(int index);
  void set_maps(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_maps(int index, ::std::string&& value);
  #endif
  void set_maps(int index, const char* value);
  void set_maps(int index, const char* value, size_t size);
  ::std::string* add_maps();
  void add_maps(const ::std::string& value);
  #if LANG_CXX11
  void add_maps(::std::string&& value);
  #endif
  void add_maps(const char* value);
  void add_maps(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& maps() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_maps();

  // repeated string vehicles = 6;
  int vehicles_size() const;
  void clear_vehicles();
  static const int kVehiclesFieldNumber = 6;
  const ::std::string& vehicles(int index) const;
  ::std::string* mutable_vehicles(int index);
  void set_vehicles(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_vehicles(int index, ::std::string&& value);
  #endif
  void set_vehicles(int index, const char* value);
  void set_vehicles(int index, const char* value, size_t size);
  ::std::string* add_vehicles();
  void add_vehicles(const ::std::string& value);
  #if LANG_CXX11
  void add_vehicles(::std::string&& value);
  #endif
  void add_vehicles(const char* value);
  void add_vehicles(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& vehicles() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_vehicles();

  // map<string, bool> modules = 8;
  int modules_size() const;
  void clear_modules();
  static const int kModulesFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, bool >&
      modules() const;
  ::google::protobuf::Map< ::std::string, bool >*
      mutable_modules();

  // map<string, .apollo.monitor.ComponentStatus> monitored_components = 9;
  int monitored_components_size() const;
  void clear_monitored_components();
  static const int kMonitoredComponentsFieldNumber = 9;
  const ::google::protobuf::Map< ::std::string, ::apollo::monitor::ComponentStatus >&
      monitored_components() const;
  ::google::protobuf::Map< ::std::string, ::apollo::monitor::ComponentStatus >*
      mutable_monitored_components();

  // map<string, .apollo.monitor.ComponentStatus> other_components = 13;
  int other_components_size() const;
  void clear_other_components();
  static const int kOtherComponentsFieldNumber = 13;
  const ::google::protobuf::Map< ::std::string, ::apollo::monitor::ComponentStatus >&
      other_components() const;
  ::google::protobuf::Map< ::std::string, ::apollo::monitor::ComponentStatus >*
      mutable_other_components();

  // optional string current_mode = 3;
  bool has_current_mode() const;
  void clear_current_mode();
  static const int kCurrentModeFieldNumber = 3;
  const ::std::string& current_mode() const;
  void set_current_mode(const ::std::string& value);
  #if LANG_CXX11
  void set_current_mode(::std::string&& value);
  #endif
  void set_current_mode(const char* value);
  void set_current_mode(const char* value, size_t size);
  ::std::string* mutable_current_mode();
  ::std::string* release_current_mode();
  void set_allocated_current_mode(::std::string* current_mode);

  // optional string current_map = 5;
  bool has_current_map() const;
  void clear_current_map();
  static const int kCurrentMapFieldNumber = 5;
  const ::std::string& current_map() const;
  void set_current_map(const ::std::string& value);
  #if LANG_CXX11
  void set_current_map(::std::string&& value);
  #endif
  void set_current_map(const char* value);
  void set_current_map(const char* value, size_t size);
  ::std::string* mutable_current_map();
  ::std::string* release_current_map();
  void set_allocated_current_map(::std::string* current_map);

  // optional string current_vehicle = 7;
  bool has_current_vehicle() const;
  void clear_current_vehicle();
  static const int kCurrentVehicleFieldNumber = 7;
  const ::std::string& current_vehicle() const;
  void set_current_vehicle(const ::std::string& value);
  #if LANG_CXX11
  void set_current_vehicle(::std::string&& value);
  #endif
  void set_current_vehicle(const char* value);
  void set_current_vehicle(const char* value, size_t size);
  ::std::string* mutable_current_vehicle();
  ::std::string* release_current_vehicle();
  void set_allocated_current_vehicle(::std::string* current_vehicle);

  // optional string docker_image = 10;
  bool has_docker_image() const;
  void clear_docker_image();
  static const int kDockerImageFieldNumber = 10;
  const ::std::string& docker_image() const;
  void set_docker_image(const ::std::string& value);
  #if LANG_CXX11
  void set_docker_image(::std::string&& value);
  #endif
  void set_docker_image(const char* value);
  void set_docker_image(const char* value, size_t size);
  ::std::string* mutable_docker_image();
  ::std::string* release_docker_image();
  void set_allocated_docker_image(::std::string* docker_image);

  // optional string passenger_msg = 12;
  bool has_passenger_msg() const;
  void clear_passenger_msg();
  static const int kPassengerMsgFieldNumber = 12;
  const ::std::string& passenger_msg() const;
  void set_passenger_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_passenger_msg(::std::string&& value);
  #endif
  void set_passenger_msg(const char* value);
  void set_passenger_msg(const char* value, size_t size);
  ::std::string* mutable_passenger_msg();
  ::std::string* release_passenger_msg();
  void set_allocated_passenger_msg(::std::string* passenger_msg);

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::apollo::common::Header& _internal_header() const;
  public:
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional int32 utm_zone_id = 11;
  bool has_utm_zone_id() const;
  void clear_utm_zone_id();
  static const int kUtmZoneIdFieldNumber = 11;
  ::google::protobuf::int32 utm_zone_id() const;
  void set_utm_zone_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.HMIStatus)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_current_mode();
  void clear_has_current_mode();
  void set_has_current_map();
  void clear_has_current_map();
  void set_has_current_vehicle();
  void clear_has_current_vehicle();
  void set_has_docker_image();
  void clear_has_docker_image();
  void set_has_utm_zone_id();
  void clear_has_utm_zone_id();
  void set_has_passenger_msg();
  void clear_has_passenger_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> modes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> maps_;
  ::google::protobuf::RepeatedPtrField< ::std::string> vehicles_;
  ::google::protobuf::internal::MapField<
      HMIStatus_ModulesEntry_DoNotUse,
      ::std::string, bool,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL,
      0 > modules_;
  ::google::protobuf::internal::MapField<
      HMIStatus_MonitoredComponentsEntry_DoNotUse,
      ::std::string, ::apollo::monitor::ComponentStatus,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > monitored_components_;
  ::google::protobuf::internal::MapField<
      HMIStatus_OtherComponentsEntry_DoNotUse,
      ::std::string, ::apollo::monitor::ComponentStatus,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > other_components_;
  ::google::protobuf::internal::ArenaStringPtr current_mode_;
  ::google::protobuf::internal::ArenaStringPtr current_map_;
  ::google::protobuf::internal::ArenaStringPtr current_vehicle_;
  ::google::protobuf::internal::ArenaStringPtr docker_image_;
  ::google::protobuf::internal::ArenaStringPtr passenger_msg_;
  ::apollo::common::Header* header_;
  ::google::protobuf::int32 utm_zone_id_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HMIStatus

// optional .apollo.common.Header header = 1;
inline bool HMIStatus::has_header() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HMIStatus::set_has_header() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HMIStatus::clear_has_header() {
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::apollo::common::Header& HMIStatus::_internal_header() const {
  return *header_;
}
inline const ::apollo::common::Header& HMIStatus::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* HMIStatus::release_header() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIStatus.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::common::Header* HMIStatus::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.header)
  return header_;
}
inline void HMIStatus::set_allocated_header(::apollo::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIStatus.header)
}

// repeated string modes = 2;
inline int HMIStatus::modes_size() const {
  return modes_.size();
}
inline void HMIStatus::clear_modes() {
  modes_.Clear();
}
inline const ::std::string& HMIStatus::modes(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.modes)
  return modes_.Get(index);
}
inline ::std::string* HMIStatus::mutable_modes(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.modes)
  return modes_.Mutable(index);
}
inline void HMIStatus::set_modes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.modes)
  modes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HMIStatus::set_modes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.modes)
  modes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HMIStatus::set_modes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  modes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIStatus.modes)
}
inline void HMIStatus::set_modes(int index, const char* value, size_t size) {
  modes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIStatus.modes)
}
inline ::std::string* HMIStatus::add_modes() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.HMIStatus.modes)
  return modes_.Add();
}
inline void HMIStatus::add_modes(const ::std::string& value) {
  modes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.HMIStatus.modes)
}
#if LANG_CXX11
inline void HMIStatus::add_modes(::std::string&& value) {
  modes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.HMIStatus.modes)
}
#endif
inline void HMIStatus::add_modes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  modes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.HMIStatus.modes)
}
inline void HMIStatus::add_modes(const char* value, size_t size) {
  modes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.HMIStatus.modes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HMIStatus::modes() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.HMIStatus.modes)
  return modes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HMIStatus::mutable_modes() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.HMIStatus.modes)
  return &modes_;
}

// optional string current_mode = 3;
inline bool HMIStatus::has_current_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HMIStatus::set_has_current_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HMIStatus::clear_has_current_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HMIStatus::clear_current_mode() {
  current_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_current_mode();
}
inline const ::std::string& HMIStatus::current_mode() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.current_mode)
  return current_mode_.GetNoArena();
}
inline void HMIStatus::set_current_mode(const ::std::string& value) {
  set_has_current_mode();
  current_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.current_mode)
}
#if LANG_CXX11
inline void HMIStatus::set_current_mode(::std::string&& value) {
  set_has_current_mode();
  current_mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.HMIStatus.current_mode)
}
#endif
inline void HMIStatus::set_current_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_current_mode();
  current_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIStatus.current_mode)
}
inline void HMIStatus::set_current_mode(const char* value, size_t size) {
  set_has_current_mode();
  current_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIStatus.current_mode)
}
inline ::std::string* HMIStatus::mutable_current_mode() {
  set_has_current_mode();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.current_mode)
  return current_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HMIStatus::release_current_mode() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIStatus.current_mode)
  if (!has_current_mode()) {
    return NULL;
  }
  clear_has_current_mode();
  return current_mode_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HMIStatus::set_allocated_current_mode(::std::string* current_mode) {
  if (current_mode != NULL) {
    set_has_current_mode();
  } else {
    clear_has_current_mode();
  }
  current_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_mode);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIStatus.current_mode)
}

// repeated string maps = 4;
inline int HMIStatus::maps_size() const {
  return maps_.size();
}
inline void HMIStatus::clear_maps() {
  maps_.Clear();
}
inline const ::std::string& HMIStatus::maps(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.maps)
  return maps_.Get(index);
}
inline ::std::string* HMIStatus::mutable_maps(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.maps)
  return maps_.Mutable(index);
}
inline void HMIStatus::set_maps(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.maps)
  maps_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HMIStatus::set_maps(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.maps)
  maps_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HMIStatus::set_maps(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  maps_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIStatus.maps)
}
inline void HMIStatus::set_maps(int index, const char* value, size_t size) {
  maps_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIStatus.maps)
}
inline ::std::string* HMIStatus::add_maps() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.HMIStatus.maps)
  return maps_.Add();
}
inline void HMIStatus::add_maps(const ::std::string& value) {
  maps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.HMIStatus.maps)
}
#if LANG_CXX11
inline void HMIStatus::add_maps(::std::string&& value) {
  maps_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.HMIStatus.maps)
}
#endif
inline void HMIStatus::add_maps(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  maps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.HMIStatus.maps)
}
inline void HMIStatus::add_maps(const char* value, size_t size) {
  maps_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.HMIStatus.maps)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HMIStatus::maps() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.HMIStatus.maps)
  return maps_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HMIStatus::mutable_maps() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.HMIStatus.maps)
  return &maps_;
}

// optional string current_map = 5;
inline bool HMIStatus::has_current_map() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HMIStatus::set_has_current_map() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HMIStatus::clear_has_current_map() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HMIStatus::clear_current_map() {
  current_map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_current_map();
}
inline const ::std::string& HMIStatus::current_map() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.current_map)
  return current_map_.GetNoArena();
}
inline void HMIStatus::set_current_map(const ::std::string& value) {
  set_has_current_map();
  current_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.current_map)
}
#if LANG_CXX11
inline void HMIStatus::set_current_map(::std::string&& value) {
  set_has_current_map();
  current_map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.HMIStatus.current_map)
}
#endif
inline void HMIStatus::set_current_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_current_map();
  current_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIStatus.current_map)
}
inline void HMIStatus::set_current_map(const char* value, size_t size) {
  set_has_current_map();
  current_map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIStatus.current_map)
}
inline ::std::string* HMIStatus::mutable_current_map() {
  set_has_current_map();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.current_map)
  return current_map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HMIStatus::release_current_map() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIStatus.current_map)
  if (!has_current_map()) {
    return NULL;
  }
  clear_has_current_map();
  return current_map_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HMIStatus::set_allocated_current_map(::std::string* current_map) {
  if (current_map != NULL) {
    set_has_current_map();
  } else {
    clear_has_current_map();
  }
  current_map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_map);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIStatus.current_map)
}

// repeated string vehicles = 6;
inline int HMIStatus::vehicles_size() const {
  return vehicles_.size();
}
inline void HMIStatus::clear_vehicles() {
  vehicles_.Clear();
}
inline const ::std::string& HMIStatus::vehicles(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.vehicles)
  return vehicles_.Get(index);
}
inline ::std::string* HMIStatus::mutable_vehicles(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.vehicles)
  return vehicles_.Mutable(index);
}
inline void HMIStatus::set_vehicles(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.vehicles)
  vehicles_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HMIStatus::set_vehicles(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.vehicles)
  vehicles_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HMIStatus::set_vehicles(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vehicles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIStatus.vehicles)
}
inline void HMIStatus::set_vehicles(int index, const char* value, size_t size) {
  vehicles_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIStatus.vehicles)
}
inline ::std::string* HMIStatus::add_vehicles() {
  // @@protoc_insertion_point(field_add_mutable:apollo.dreamview.HMIStatus.vehicles)
  return vehicles_.Add();
}
inline void HMIStatus::add_vehicles(const ::std::string& value) {
  vehicles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.dreamview.HMIStatus.vehicles)
}
#if LANG_CXX11
inline void HMIStatus::add_vehicles(::std::string&& value) {
  vehicles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.dreamview.HMIStatus.vehicles)
}
#endif
inline void HMIStatus::add_vehicles(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  vehicles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.dreamview.HMIStatus.vehicles)
}
inline void HMIStatus::add_vehicles(const char* value, size_t size) {
  vehicles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.dreamview.HMIStatus.vehicles)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HMIStatus::vehicles() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.HMIStatus.vehicles)
  return vehicles_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HMIStatus::mutable_vehicles() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.HMIStatus.vehicles)
  return &vehicles_;
}

// optional string current_vehicle = 7;
inline bool HMIStatus::has_current_vehicle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HMIStatus::set_has_current_vehicle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HMIStatus::clear_has_current_vehicle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HMIStatus::clear_current_vehicle() {
  current_vehicle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_current_vehicle();
}
inline const ::std::string& HMIStatus::current_vehicle() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.current_vehicle)
  return current_vehicle_.GetNoArena();
}
inline void HMIStatus::set_current_vehicle(const ::std::string& value) {
  set_has_current_vehicle();
  current_vehicle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.current_vehicle)
}
#if LANG_CXX11
inline void HMIStatus::set_current_vehicle(::std::string&& value) {
  set_has_current_vehicle();
  current_vehicle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.HMIStatus.current_vehicle)
}
#endif
inline void HMIStatus::set_current_vehicle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_current_vehicle();
  current_vehicle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIStatus.current_vehicle)
}
inline void HMIStatus::set_current_vehicle(const char* value, size_t size) {
  set_has_current_vehicle();
  current_vehicle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIStatus.current_vehicle)
}
inline ::std::string* HMIStatus::mutable_current_vehicle() {
  set_has_current_vehicle();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.current_vehicle)
  return current_vehicle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HMIStatus::release_current_vehicle() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIStatus.current_vehicle)
  if (!has_current_vehicle()) {
    return NULL;
  }
  clear_has_current_vehicle();
  return current_vehicle_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HMIStatus::set_allocated_current_vehicle(::std::string* current_vehicle) {
  if (current_vehicle != NULL) {
    set_has_current_vehicle();
  } else {
    clear_has_current_vehicle();
  }
  current_vehicle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_vehicle);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIStatus.current_vehicle)
}

// map<string, bool> modules = 8;
inline int HMIStatus::modules_size() const {
  return modules_.size();
}
inline void HMIStatus::clear_modules() {
  modules_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, bool >&
HMIStatus::modules() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIStatus.modules)
  return modules_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, bool >*
HMIStatus::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIStatus.modules)
  return modules_.MutableMap();
}

// map<string, .apollo.monitor.ComponentStatus> monitored_components = 9;
inline int HMIStatus::monitored_components_size() const {
  return monitored_components_.size();
}
inline const ::google::protobuf::Map< ::std::string, ::apollo::monitor::ComponentStatus >&
HMIStatus::monitored_components() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIStatus.monitored_components)
  return monitored_components_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::apollo::monitor::ComponentStatus >*
HMIStatus::mutable_monitored_components() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIStatus.monitored_components)
  return monitored_components_.MutableMap();
}

// optional string docker_image = 10;
inline bool HMIStatus::has_docker_image() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HMIStatus::set_has_docker_image() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HMIStatus::clear_has_docker_image() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HMIStatus::clear_docker_image() {
  docker_image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_docker_image();
}
inline const ::std::string& HMIStatus::docker_image() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.docker_image)
  return docker_image_.GetNoArena();
}
inline void HMIStatus::set_docker_image(const ::std::string& value) {
  set_has_docker_image();
  docker_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.docker_image)
}
#if LANG_CXX11
inline void HMIStatus::set_docker_image(::std::string&& value) {
  set_has_docker_image();
  docker_image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.HMIStatus.docker_image)
}
#endif
inline void HMIStatus::set_docker_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_docker_image();
  docker_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIStatus.docker_image)
}
inline void HMIStatus::set_docker_image(const char* value, size_t size) {
  set_has_docker_image();
  docker_image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIStatus.docker_image)
}
inline ::std::string* HMIStatus::mutable_docker_image() {
  set_has_docker_image();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.docker_image)
  return docker_image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HMIStatus::release_docker_image() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIStatus.docker_image)
  if (!has_docker_image()) {
    return NULL;
  }
  clear_has_docker_image();
  return docker_image_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HMIStatus::set_allocated_docker_image(::std::string* docker_image) {
  if (docker_image != NULL) {
    set_has_docker_image();
  } else {
    clear_has_docker_image();
  }
  docker_image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), docker_image);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIStatus.docker_image)
}

// optional int32 utm_zone_id = 11;
inline bool HMIStatus::has_utm_zone_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HMIStatus::set_has_utm_zone_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HMIStatus::clear_has_utm_zone_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HMIStatus::clear_utm_zone_id() {
  utm_zone_id_ = 0;
  clear_has_utm_zone_id();
}
inline ::google::protobuf::int32 HMIStatus::utm_zone_id() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.utm_zone_id)
  return utm_zone_id_;
}
inline void HMIStatus::set_utm_zone_id(::google::protobuf::int32 value) {
  set_has_utm_zone_id();
  utm_zone_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.utm_zone_id)
}

// optional string passenger_msg = 12;
inline bool HMIStatus::has_passenger_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HMIStatus::set_has_passenger_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HMIStatus::clear_has_passenger_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HMIStatus::clear_passenger_msg() {
  passenger_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_passenger_msg();
}
inline const ::std::string& HMIStatus::passenger_msg() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.HMIStatus.passenger_msg)
  return passenger_msg_.GetNoArena();
}
inline void HMIStatus::set_passenger_msg(const ::std::string& value) {
  set_has_passenger_msg();
  passenger_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.HMIStatus.passenger_msg)
}
#if LANG_CXX11
inline void HMIStatus::set_passenger_msg(::std::string&& value) {
  set_has_passenger_msg();
  passenger_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.HMIStatus.passenger_msg)
}
#endif
inline void HMIStatus::set_passenger_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_passenger_msg();
  passenger_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.HMIStatus.passenger_msg)
}
inline void HMIStatus::set_passenger_msg(const char* value, size_t size) {
  set_has_passenger_msg();
  passenger_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.HMIStatus.passenger_msg)
}
inline ::std::string* HMIStatus::mutable_passenger_msg() {
  set_has_passenger_msg();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.HMIStatus.passenger_msg)
  return passenger_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HMIStatus::release_passenger_msg() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.HMIStatus.passenger_msg)
  if (!has_passenger_msg()) {
    return NULL;
  }
  clear_has_passenger_msg();
  return passenger_msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HMIStatus::set_allocated_passenger_msg(::std::string* passenger_msg) {
  if (passenger_msg != NULL) {
    set_has_passenger_msg();
  } else {
    clear_has_passenger_msg();
  }
  passenger_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passenger_msg);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.HMIStatus.passenger_msg)
}

// map<string, .apollo.monitor.ComponentStatus> other_components = 13;
inline int HMIStatus::other_components_size() const {
  return other_components_.size();
}
inline const ::google::protobuf::Map< ::std::string, ::apollo::monitor::ComponentStatus >&
HMIStatus::other_components() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.HMIStatus.other_components)
  return other_components_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::apollo::monitor::ComponentStatus >*
HMIStatus::mutable_other_components() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.HMIStatus.other_components)
  return other_components_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fhmi_5fstatus_2eproto
