// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/data_collection_table.proto

#ifndef PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto
#define PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto 

namespace protobuf_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto
namespace apollo {
namespace dreamview {
class Criterion;
class CriterionDefaultTypeInternal;
extern CriterionDefaultTypeInternal _Criterion_default_instance_;
class DataCollectionTable;
class DataCollectionTableDefaultTypeInternal;
extern DataCollectionTableDefaultTypeInternal _DataCollectionTable_default_instance_;
class DataCollectionTable_ScenarioEntry_DoNotUse;
class DataCollectionTable_ScenarioEntry_DoNotUseDefaultTypeInternal;
extern DataCollectionTable_ScenarioEntry_DoNotUseDefaultTypeInternal _DataCollectionTable_ScenarioEntry_DoNotUse_default_instance_;
class Feature;
class FeatureDefaultTypeInternal;
extern FeatureDefaultTypeInternal _Feature_default_instance_;
class Range;
class RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
class Scenario;
class ScenarioDefaultTypeInternal;
extern ScenarioDefaultTypeInternal _Scenario_default_instance_;
}  // namespace dreamview
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::dreamview::Criterion* Arena::CreateMaybeMessage<::apollo::dreamview::Criterion>(Arena*);
template<> ::apollo::dreamview::DataCollectionTable* Arena::CreateMaybeMessage<::apollo::dreamview::DataCollectionTable>(Arena*);
template<> ::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse* Arena::CreateMaybeMessage<::apollo::dreamview::DataCollectionTable_ScenarioEntry_DoNotUse>(Arena*);
template<> ::apollo::dreamview::Feature* Arena::CreateMaybeMessage<::apollo::dreamview::Feature>(Arena*);
template<> ::apollo::dreamview::Range* Arena::CreateMaybeMessage<::apollo::dreamview::Range>(Arena*);
template<> ::apollo::dreamview::Scenario* Arena::CreateMaybeMessage<::apollo::dreamview::Scenario>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace dreamview {

enum ComparisonOperator {
  EQUAL = 0,
  NOT_EQUAL = 1,
  GREATER_THAN = 2,
  GREATER_THAN_OR_EQUAL = 3,
  LESS_THAN = 4,
  LESS_THAN_OR_EQUAL = 5
};
bool ComparisonOperator_IsValid(int value);
const ComparisonOperator ComparisonOperator_MIN = EQUAL;
const ComparisonOperator ComparisonOperator_MAX = LESS_THAN_OR_EQUAL;
const int ComparisonOperator_ARRAYSIZE = ComparisonOperator_MAX + 1;

const ::google::protobuf::EnumDescriptor* ComparisonOperator_descriptor();
inline const ::std::string& ComparisonOperator_Name(ComparisonOperator value) {
  return ::google::protobuf::internal::NameOfEnum(
    ComparisonOperator_descriptor(), value);
}
inline bool ComparisonOperator_Parse(
    const ::std::string& name, ComparisonOperator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ComparisonOperator>(
    ComparisonOperator_descriptor(), name, value);
}
// ===================================================================

class Criterion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Criterion) */ {
 public:
  Criterion();
  virtual ~Criterion();

  Criterion(const Criterion& from);

  inline Criterion& operator=(const Criterion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Criterion(Criterion&& from) noexcept
    : Criterion() {
    *this = ::std::move(from);
  }

  inline Criterion& operator=(Criterion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Criterion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Criterion* internal_default_instance() {
    return reinterpret_cast<const Criterion*>(
               &_Criterion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Criterion* other);
  friend void swap(Criterion& a, Criterion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Criterion* New() const final {
    return CreateMaybeMessage<Criterion>(NULL);
  }

  Criterion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Criterion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Criterion& from);
  void MergeFrom(const Criterion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Criterion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::std::string& field() const;
  void set_field(const ::std::string& value);
  #if LANG_CXX11
  void set_field(::std::string&& value);
  #endif
  void set_field(const char* value);
  void set_field(const char* value, size_t size);
  ::std::string* mutable_field();
  ::std::string* release_field();
  void set_allocated_field(::std::string* field);

  // optional string vehicle_config = 4;
  bool has_vehicle_config() const;
  void clear_vehicle_config();
  static const int kVehicleConfigFieldNumber = 4;
  const ::std::string& vehicle_config() const;
  void set_vehicle_config(const ::std::string& value);
  #if LANG_CXX11
  void set_vehicle_config(::std::string&& value);
  #endif
  void set_vehicle_config(const char* value);
  void set_vehicle_config(const char* value, size_t size);
  ::std::string* mutable_vehicle_config();
  ::std::string* release_vehicle_config();
  void set_allocated_vehicle_config(::std::string* vehicle_config);

  // optional .apollo.dreamview.ComparisonOperator comparison_operator = 2;
  bool has_comparison_operator() const;
  void clear_comparison_operator();
  static const int kComparisonOperatorFieldNumber = 2;
  ::apollo::dreamview::ComparisonOperator comparison_operator() const;
  void set_comparison_operator(::apollo::dreamview::ComparisonOperator value);

  // optional float value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Criterion)
 private:
  void set_has_field();
  void clear_has_field();
  void set_has_comparison_operator();
  void clear_has_comparison_operator();
  void set_has_value();
  void clear_has_value();
  void set_has_vehicle_config();
  void clear_has_vehicle_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr field_;
  ::google::protobuf::internal::ArenaStringPtr vehicle_config_;
  int comparison_operator_;
  float value_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Range : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Range) */ {
 public:
  Range();
  virtual ~Range();

  Range(const Range& from);

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(Range&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Range& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Range* other);
  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Range* New() const final {
    return CreateMaybeMessage<Range>(NULL);
  }

  Range* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Range>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Range* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.dreamview.Criterion criterion = 2;
  int criterion_size() const;
  void clear_criterion();
  static const int kCriterionFieldNumber = 2;
  ::apollo::dreamview::Criterion* mutable_criterion(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Criterion >*
      mutable_criterion();
  const ::apollo::dreamview::Criterion& criterion(int index) const;
  ::apollo::dreamview::Criterion* add_criterion();
  const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Criterion >&
      criterion() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Range)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Criterion > criterion_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Feature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Feature) */ {
 public:
  Feature();
  virtual ~Feature();

  Feature(const Feature& from);

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Feature(Feature&& from) noexcept
    : Feature() {
    *this = ::std::move(from);
  }

  inline Feature& operator=(Feature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Feature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Feature* internal_default_instance() {
    return reinterpret_cast<const Feature*>(
               &_Feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Feature* other);
  friend void swap(Feature& a, Feature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Feature* New() const final {
    return CreateMaybeMessage<Feature>(NULL);
  }

  Feature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Feature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Feature& from);
  void MergeFrom(const Feature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.dreamview.Range range = 2;
  int range_size() const;
  void clear_range();
  static const int kRangeFieldNumber = 2;
  ::apollo::dreamview::Range* mutable_range(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Range >*
      mutable_range();
  const ::apollo::dreamview::Range& range(int index) const;
  ::apollo::dreamview::Range* add_range();
  const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Range >&
      range() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Feature)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Range > range_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Scenario : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.Scenario) */ {
 public:
  Scenario();
  virtual ~Scenario();

  Scenario(const Scenario& from);

  inline Scenario& operator=(const Scenario& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Scenario(Scenario&& from) noexcept
    : Scenario() {
    *this = ::std::move(from);
  }

  inline Scenario& operator=(Scenario&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Scenario& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scenario* internal_default_instance() {
    return reinterpret_cast<const Scenario*>(
               &_Scenario_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Scenario* other);
  friend void swap(Scenario& a, Scenario& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Scenario* New() const final {
    return CreateMaybeMessage<Scenario>(NULL);
  }

  Scenario* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Scenario>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Scenario& from);
  void MergeFrom(const Scenario& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scenario* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.dreamview.Feature feature = 1;
  int feature_size() const;
  void clear_feature();
  static const int kFeatureFieldNumber = 1;
  ::apollo::dreamview::Feature* mutable_feature(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Feature >*
      mutable_feature();
  const ::apollo::dreamview::Feature& feature(int index) const;
  ::apollo::dreamview::Feature* add_feature();
  const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Feature >&
      feature() const;

  // @@protoc_insertion_point(class_scope:apollo.dreamview.Scenario)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Feature > feature_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataCollectionTable_ScenarioEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<DataCollectionTable_ScenarioEntry_DoNotUse, 
    ::std::string, ::apollo::dreamview::Scenario,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<DataCollectionTable_ScenarioEntry_DoNotUse, 
    ::std::string, ::apollo::dreamview::Scenario,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  DataCollectionTable_ScenarioEntry_DoNotUse();
  DataCollectionTable_ScenarioEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const DataCollectionTable_ScenarioEntry_DoNotUse& other);
  static const DataCollectionTable_ScenarioEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DataCollectionTable_ScenarioEntry_DoNotUse*>(&_DataCollectionTable_ScenarioEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class DataCollectionTable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.dreamview.DataCollectionTable) */ {
 public:
  DataCollectionTable();
  virtual ~DataCollectionTable();

  DataCollectionTable(const DataCollectionTable& from);

  inline DataCollectionTable& operator=(const DataCollectionTable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataCollectionTable(DataCollectionTable&& from) noexcept
    : DataCollectionTable() {
    *this = ::std::move(from);
  }

  inline DataCollectionTable& operator=(DataCollectionTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataCollectionTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataCollectionTable* internal_default_instance() {
    return reinterpret_cast<const DataCollectionTable*>(
               &_DataCollectionTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DataCollectionTable* other);
  friend void swap(DataCollectionTable& a, DataCollectionTable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataCollectionTable* New() const final {
    return CreateMaybeMessage<DataCollectionTable>(NULL);
  }

  DataCollectionTable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataCollectionTable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataCollectionTable& from);
  void MergeFrom(const DataCollectionTable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataCollectionTable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .apollo.dreamview.Scenario> scenario = 1;
  int scenario_size() const;
  void clear_scenario();
  static const int kScenarioFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Scenario >&
      scenario() const;
  ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Scenario >*
      mutable_scenario();

  // required uint32 frame_threshold = 2;
  bool has_frame_threshold() const;
  void clear_frame_threshold();
  static const int kFrameThresholdFieldNumber = 2;
  ::google::protobuf::uint32 frame_threshold() const;
  void set_frame_threshold(::google::protobuf::uint32 value);

  // required uint32 total_frames = 3;
  bool has_total_frames() const;
  void clear_total_frames();
  static const int kTotalFramesFieldNumber = 3;
  ::google::protobuf::uint32 total_frames() const;
  void set_total_frames(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:apollo.dreamview.DataCollectionTable)
 private:
  void set_has_frame_threshold();
  void clear_has_frame_threshold();
  void set_has_total_frames();
  void clear_has_total_frames();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::MapField<
      DataCollectionTable_ScenarioEntry_DoNotUse,
      ::std::string, ::apollo::dreamview::Scenario,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > scenario_;
  ::google::protobuf::uint32 frame_threshold_;
  ::google::protobuf::uint32 total_frames_;
  friend struct ::protobuf_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Criterion

// optional string field = 1;
inline bool Criterion::has_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Criterion::set_has_field() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Criterion::clear_has_field() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Criterion::clear_field() {
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_field();
}
inline const ::std::string& Criterion::field() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Criterion.field)
  return field_.GetNoArena();
}
inline void Criterion::set_field(const ::std::string& value) {
  set_has_field();
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Criterion.field)
}
#if LANG_CXX11
inline void Criterion::set_field(::std::string&& value) {
  set_has_field();
  field_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.Criterion.field)
}
#endif
inline void Criterion::set_field(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_field();
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Criterion.field)
}
inline void Criterion::set_field(const char* value, size_t size) {
  set_has_field();
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Criterion.field)
}
inline ::std::string* Criterion::mutable_field() {
  set_has_field();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Criterion.field)
  return field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Criterion::release_field() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Criterion.field)
  if (!has_field()) {
    return NULL;
  }
  clear_has_field();
  return field_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Criterion::set_allocated_field(::std::string* field) {
  if (field != NULL) {
    set_has_field();
  } else {
    clear_has_field();
  }
  field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Criterion.field)
}

// optional .apollo.dreamview.ComparisonOperator comparison_operator = 2;
inline bool Criterion::has_comparison_operator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Criterion::set_has_comparison_operator() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Criterion::clear_has_comparison_operator() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Criterion::clear_comparison_operator() {
  comparison_operator_ = 0;
  clear_has_comparison_operator();
}
inline ::apollo::dreamview::ComparisonOperator Criterion::comparison_operator() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Criterion.comparison_operator)
  return static_cast< ::apollo::dreamview::ComparisonOperator >(comparison_operator_);
}
inline void Criterion::set_comparison_operator(::apollo::dreamview::ComparisonOperator value) {
  assert(::apollo::dreamview::ComparisonOperator_IsValid(value));
  set_has_comparison_operator();
  comparison_operator_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Criterion.comparison_operator)
}

// optional float value = 3;
inline bool Criterion::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Criterion::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Criterion::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Criterion::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float Criterion::value() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Criterion.value)
  return value_;
}
inline void Criterion::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.Criterion.value)
}

// optional string vehicle_config = 4;
inline bool Criterion::has_vehicle_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Criterion::set_has_vehicle_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Criterion::clear_has_vehicle_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Criterion::clear_vehicle_config() {
  vehicle_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vehicle_config();
}
inline const ::std::string& Criterion::vehicle_config() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Criterion.vehicle_config)
  return vehicle_config_.GetNoArena();
}
inline void Criterion::set_vehicle_config(const ::std::string& value) {
  set_has_vehicle_config();
  vehicle_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Criterion.vehicle_config)
}
#if LANG_CXX11
inline void Criterion::set_vehicle_config(::std::string&& value) {
  set_has_vehicle_config();
  vehicle_config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.Criterion.vehicle_config)
}
#endif
inline void Criterion::set_vehicle_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vehicle_config();
  vehicle_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Criterion.vehicle_config)
}
inline void Criterion::set_vehicle_config(const char* value, size_t size) {
  set_has_vehicle_config();
  vehicle_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Criterion.vehicle_config)
}
inline ::std::string* Criterion::mutable_vehicle_config() {
  set_has_vehicle_config();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Criterion.vehicle_config)
  return vehicle_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Criterion::release_vehicle_config() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Criterion.vehicle_config)
  if (!has_vehicle_config()) {
    return NULL;
  }
  clear_has_vehicle_config();
  return vehicle_config_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Criterion::set_allocated_vehicle_config(::std::string* vehicle_config) {
  if (vehicle_config != NULL) {
    set_has_vehicle_config();
  } else {
    clear_has_vehicle_config();
  }
  vehicle_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicle_config);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Criterion.vehicle_config)
}

// -------------------------------------------------------------------

// Range

// optional string name = 1;
inline bool Range::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Range::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Range::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Range::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Range::name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Range.name)
  return name_.GetNoArena();
}
inline void Range::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Range.name)
}
#if LANG_CXX11
inline void Range::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.Range.name)
}
#endif
inline void Range::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Range.name)
}
inline void Range::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Range.name)
}
inline ::std::string* Range::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Range.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Range::release_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Range.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Range::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Range.name)
}

// repeated .apollo.dreamview.Criterion criterion = 2;
inline int Range::criterion_size() const {
  return criterion_.size();
}
inline void Range::clear_criterion() {
  criterion_.Clear();
}
inline ::apollo::dreamview::Criterion* Range::mutable_criterion(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Range.criterion)
  return criterion_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Criterion >*
Range::mutable_criterion() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Range.criterion)
  return &criterion_;
}
inline const ::apollo::dreamview::Criterion& Range::criterion(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Range.criterion)
  return criterion_.Get(index);
}
inline ::apollo::dreamview::Criterion* Range::add_criterion() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.Range.criterion)
  return criterion_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Criterion >&
Range::criterion() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Range.criterion)
  return criterion_;
}

// -------------------------------------------------------------------

// Feature

// optional string name = 1;
inline bool Feature::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Feature::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Feature::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Feature::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Feature::name() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Feature.name)
  return name_.GetNoArena();
}
inline void Feature::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.dreamview.Feature.name)
}
#if LANG_CXX11
inline void Feature::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.dreamview.Feature.name)
}
#endif
inline void Feature::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.dreamview.Feature.name)
}
inline void Feature::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.dreamview.Feature.name)
}
inline ::std::string* Feature::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Feature.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Feature::release_name() {
  // @@protoc_insertion_point(field_release:apollo.dreamview.Feature.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:apollo.dreamview.Feature.name)
}

// repeated .apollo.dreamview.Range range = 2;
inline int Feature::range_size() const {
  return range_.size();
}
inline void Feature::clear_range() {
  range_.Clear();
}
inline ::apollo::dreamview::Range* Feature::mutable_range(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Feature.range)
  return range_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Range >*
Feature::mutable_range() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Feature.range)
  return &range_;
}
inline const ::apollo::dreamview::Range& Feature::range(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Feature.range)
  return range_.Get(index);
}
inline ::apollo::dreamview::Range* Feature::add_range() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.Feature.range)
  return range_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Range >&
Feature::range() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Feature.range)
  return range_;
}

// -------------------------------------------------------------------

// Scenario

// repeated .apollo.dreamview.Feature feature = 1;
inline int Scenario::feature_size() const {
  return feature_.size();
}
inline void Scenario::clear_feature() {
  feature_.Clear();
}
inline ::apollo::dreamview::Feature* Scenario::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.dreamview.Scenario.feature)
  return feature_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Feature >*
Scenario::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.dreamview.Scenario.feature)
  return &feature_;
}
inline const ::apollo::dreamview::Feature& Scenario::feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.Scenario.feature)
  return feature_.Get(index);
}
inline ::apollo::dreamview::Feature* Scenario::add_feature() {
  // @@protoc_insertion_point(field_add:apollo.dreamview.Scenario.feature)
  return feature_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::dreamview::Feature >&
Scenario::feature() const {
  // @@protoc_insertion_point(field_list:apollo.dreamview.Scenario.feature)
  return feature_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DataCollectionTable

// map<string, .apollo.dreamview.Scenario> scenario = 1;
inline int DataCollectionTable::scenario_size() const {
  return scenario_.size();
}
inline void DataCollectionTable::clear_scenario() {
  scenario_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Scenario >&
DataCollectionTable::scenario() const {
  // @@protoc_insertion_point(field_map:apollo.dreamview.DataCollectionTable.scenario)
  return scenario_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::apollo::dreamview::Scenario >*
DataCollectionTable::mutable_scenario() {
  // @@protoc_insertion_point(field_mutable_map:apollo.dreamview.DataCollectionTable.scenario)
  return scenario_.MutableMap();
}

// required uint32 frame_threshold = 2;
inline bool DataCollectionTable::has_frame_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataCollectionTable::set_has_frame_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataCollectionTable::clear_has_frame_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataCollectionTable::clear_frame_threshold() {
  frame_threshold_ = 0u;
  clear_has_frame_threshold();
}
inline ::google::protobuf::uint32 DataCollectionTable::frame_threshold() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DataCollectionTable.frame_threshold)
  return frame_threshold_;
}
inline void DataCollectionTable::set_frame_threshold(::google::protobuf::uint32 value) {
  set_has_frame_threshold();
  frame_threshold_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.DataCollectionTable.frame_threshold)
}

// required uint32 total_frames = 3;
inline bool DataCollectionTable::has_total_frames() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataCollectionTable::set_has_total_frames() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataCollectionTable::clear_has_total_frames() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataCollectionTable::clear_total_frames() {
  total_frames_ = 0u;
  clear_has_total_frames();
}
inline ::google::protobuf::uint32 DataCollectionTable::total_frames() const {
  // @@protoc_insertion_point(field_get:apollo.dreamview.DataCollectionTable.total_frames)
  return total_frames_;
}
inline void DataCollectionTable::set_total_frames(::google::protobuf::uint32 value) {
  set_has_total_frames();
  total_frames_ = value;
  // @@protoc_insertion_point(field_set:apollo.dreamview.DataCollectionTable.total_frames)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dreamview
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::dreamview::ComparisonOperator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::dreamview::ComparisonOperator>() {
  return ::apollo::dreamview::ComparisonOperator_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fdreamview_2fproto_2fdata_5fcollection_5ftable_2eproto
