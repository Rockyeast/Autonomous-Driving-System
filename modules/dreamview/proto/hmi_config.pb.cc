// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/dreamview/proto/hmi_config.proto

#include "modules/dreamview/proto/hmi_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HMIConfig_MapsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HMIConfig_ModesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HMIConfig_VehiclesEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VehicleData_DataFile;
}  // namespace protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto
namespace apollo {
namespace dreamview {
class HMIConfig_ModesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HMIConfig_ModesEntry_DoNotUse>
      _instance;
} _HMIConfig_ModesEntry_DoNotUse_default_instance_;
class HMIConfig_MapsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HMIConfig_MapsEntry_DoNotUse>
      _instance;
} _HMIConfig_MapsEntry_DoNotUse_default_instance_;
class HMIConfig_VehiclesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HMIConfig_VehiclesEntry_DoNotUse>
      _instance;
} _HMIConfig_VehiclesEntry_DoNotUse_default_instance_;
class HMIConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HMIConfig>
      _instance;
} _HMIConfig_default_instance_;
class VehicleData_DataFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleData_DataFile>
      _instance;
} _VehicleData_DataFile_default_instance_;
class VehicleDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VehicleData>
      _instance;
} _VehicleData_default_instance_;
}  // namespace dreamview
}  // namespace apollo
namespace protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto {
static void InitDefaultsHMIConfig_ModesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_HMIConfig_ModesEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse();
  }
  ::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HMIConfig_ModesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHMIConfig_ModesEntry_DoNotUse}, {}};

static void InitDefaultsHMIConfig_MapsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_HMIConfig_MapsEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse();
  }
  ::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HMIConfig_MapsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHMIConfig_MapsEntry_DoNotUse}, {}};

static void InitDefaultsHMIConfig_VehiclesEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_HMIConfig_VehiclesEntry_DoNotUse_default_instance_;
    new (ptr) ::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse();
  }
  ::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HMIConfig_VehiclesEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHMIConfig_VehiclesEntry_DoNotUse}, {}};

static void InitDefaultsHMIConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_HMIConfig_default_instance_;
    new (ptr) ::apollo::dreamview::HMIConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::HMIConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_HMIConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsHMIConfig}, {
      &protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::scc_info_HMIConfig_ModesEntry_DoNotUse.base,
      &protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::scc_info_HMIConfig_MapsEntry_DoNotUse.base,
      &protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::scc_info_HMIConfig_VehiclesEntry_DoNotUse.base,}};

static void InitDefaultsVehicleData_DataFile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_VehicleData_DataFile_default_instance_;
    new (ptr) ::apollo::dreamview::VehicleData_DataFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::VehicleData_DataFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VehicleData_DataFile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVehicleData_DataFile}, {}};

static void InitDefaultsVehicleData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::dreamview::_VehicleData_default_instance_;
    new (ptr) ::apollo::dreamview::VehicleData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::dreamview::VehicleData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_VehicleData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVehicleData}, {
      &protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::scc_info_VehicleData_DataFile.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_HMIConfig_ModesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HMIConfig_MapsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HMIConfig_VehiclesEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HMIConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleData_DataFile.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VehicleData.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::HMIConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::HMIConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::HMIConfig, modes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::HMIConfig, maps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::HMIConfig, vehicles_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::VehicleData_DataFile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::VehicleData_DataFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::VehicleData_DataFile, source_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::VehicleData_DataFile, dest_path_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::VehicleData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::VehicleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::dreamview::VehicleData, data_files_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse)},
  { 9, 16, sizeof(::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse)},
  { 18, 25, sizeof(::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse)},
  { 27, 35, sizeof(::apollo::dreamview::HMIConfig)},
  { 38, 45, sizeof(::apollo::dreamview::VehicleData_DataFile)},
  { 47, 53, sizeof(::apollo::dreamview::VehicleData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_HMIConfig_ModesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_HMIConfig_MapsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_HMIConfig_VehiclesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_HMIConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_VehicleData_DataFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::dreamview::_VehicleData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/dreamview/proto/hmi_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n(modules/dreamview/proto/hmi_config.pro"
      "to\022\020apollo.dreamview\"\300\002\n\tHMIConfig\0225\n\005mo"
      "des\030\001 \003(\0132&.apollo.dreamview.HMIConfig.M"
      "odesEntry\0223\n\004maps\030\002 \003(\0132%.apollo.dreamvi"
      "ew.HMIConfig.MapsEntry\022;\n\010vehicles\030\003 \003(\013"
      "2).apollo.dreamview.HMIConfig.VehiclesEn"
      "try\032,\n\nModesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
      "\002 \001(\t:\0028\001\032+\n\tMapsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
      "alue\030\002 \001(\t:\0028\001\032/\n\rVehiclesEntry\022\013\n\003key\030\001"
      " \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"}\n\013VehicleData\022:"
      "\n\ndata_files\030\001 \003(\0132&.apollo.dreamview.Ve"
      "hicleData.DataFile\0322\n\010DataFile\022\023\n\013source"
      "_path\030\001 \001(\t\022\021\n\tdest_path\030\002 \001(\t*\261\001\n\tHMIAc"
      "tion\022\010\n\004NONE\020\000\022\016\n\nSETUP_MODE\020\001\022\016\n\nRESET_"
      "MODE\020\002\022\023\n\017ENTER_AUTO_MODE\020\003\022\r\n\tDISENGAGE"
      "\020\004\022\017\n\013CHANGE_MODE\020\005\022\016\n\nCHANGE_MAP\020\006\022\022\n\016C"
      "HANGE_VEHICLE\020\007\022\020\n\014START_MODULE\020\010\022\017\n\013STO"
      "P_MODULE\020\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 690);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/dreamview/proto/hmi_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto
namespace apollo {
namespace dreamview {
const ::google::protobuf::EnumDescriptor* HMIAction_descriptor() {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool HMIAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

HMIConfig_ModesEntry_DoNotUse::HMIConfig_ModesEntry_DoNotUse() {}
HMIConfig_ModesEntry_DoNotUse::HMIConfig_ModesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void HMIConfig_ModesEntry_DoNotUse::MergeFrom(const HMIConfig_ModesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata HMIConfig_ModesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[0];
}
void HMIConfig_ModesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

HMIConfig_MapsEntry_DoNotUse::HMIConfig_MapsEntry_DoNotUse() {}
HMIConfig_MapsEntry_DoNotUse::HMIConfig_MapsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void HMIConfig_MapsEntry_DoNotUse::MergeFrom(const HMIConfig_MapsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata HMIConfig_MapsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[1];
}
void HMIConfig_MapsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

HMIConfig_VehiclesEntry_DoNotUse::HMIConfig_VehiclesEntry_DoNotUse() {}
HMIConfig_VehiclesEntry_DoNotUse::HMIConfig_VehiclesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void HMIConfig_VehiclesEntry_DoNotUse::MergeFrom(const HMIConfig_VehiclesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata HMIConfig_VehiclesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[2];
}
void HMIConfig_VehiclesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void HMIConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HMIConfig::kModesFieldNumber;
const int HMIConfig::kMapsFieldNumber;
const int HMIConfig::kVehiclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HMIConfig::HMIConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::scc_info_HMIConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.HMIConfig)
}
HMIConfig::HMIConfig(const HMIConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  modes_.MergeFrom(from.modes_);
  maps_.MergeFrom(from.maps_);
  vehicles_.MergeFrom(from.vehicles_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.HMIConfig)
}

void HMIConfig::SharedCtor() {
}

HMIConfig::~HMIConfig() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.HMIConfig)
  SharedDtor();
}

void HMIConfig::SharedDtor() {
}

void HMIConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HMIConfig::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HMIConfig& HMIConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::scc_info_HMIConfig.base);
  return *internal_default_instance();
}


void HMIConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.HMIConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modes_.Clear();
  maps_.Clear();
  vehicles_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HMIConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.HMIConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> modes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          HMIConfig_ModesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              HMIConfig_ModesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&modes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.HMIConfig.ModesEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.HMIConfig.ModesEntry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> maps = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          HMIConfig_MapsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              HMIConfig_MapsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&maps_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.HMIConfig.MapsEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.HMIConfig.MapsEntry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> vehicles = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          HMIConfig_VehiclesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              HMIConfig_VehiclesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&vehicles_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.HMIConfig.VehiclesEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.HMIConfig.VehiclesEntry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.HMIConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.HMIConfig)
  return false;
#undef DO_
}

void HMIConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.HMIConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> modes = 1;
  if (!this->modes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.ModesEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.ModesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->modes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->modes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->modes().begin();
          it != this->modes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<HMIConfig_ModesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(modes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<HMIConfig_ModesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->modes().begin();
          it != this->modes().end(); ++it) {
        entry.reset(modes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> maps = 2;
  if (!this->maps().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.MapsEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.MapsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->maps().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->maps().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->maps().begin();
          it != this->maps().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<HMIConfig_MapsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(maps_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<HMIConfig_MapsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->maps().begin();
          it != this->maps().end(); ++it) {
        entry.reset(maps_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> vehicles = 3;
  if (!this->vehicles().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.VehiclesEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.VehiclesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->vehicles().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->vehicles().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->vehicles().begin();
          it != this->vehicles().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<HMIConfig_VehiclesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(vehicles_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<HMIConfig_VehiclesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->vehicles().begin();
          it != this->vehicles().end(); ++it) {
        entry.reset(vehicles_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.HMIConfig)
}

::google::protobuf::uint8* HMIConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.HMIConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> modes = 1;
  if (!this->modes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.ModesEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.ModesEntry.value");
      }
    };

    if (deterministic &&
        this->modes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->modes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->modes().begin();
          it != this->modes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<HMIConfig_ModesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(modes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<HMIConfig_ModesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->modes().begin();
          it != this->modes().end(); ++it) {
        entry.reset(modes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> maps = 2;
  if (!this->maps().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.MapsEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.MapsEntry.value");
      }
    };

    if (deterministic &&
        this->maps().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->maps().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->maps().begin();
          it != this->maps().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<HMIConfig_MapsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(maps_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<HMIConfig_MapsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->maps().begin();
          it != this->maps().end(); ++it) {
        entry.reset(maps_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> vehicles = 3;
  if (!this->vehicles().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.VehiclesEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "apollo.dreamview.HMIConfig.VehiclesEntry.value");
      }
    };

    if (deterministic &&
        this->vehicles().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->vehicles().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->vehicles().begin();
          it != this->vehicles().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<HMIConfig_VehiclesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(vehicles_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<HMIConfig_VehiclesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->vehicles().begin();
          it != this->vehicles().end(); ++it) {
        entry.reset(vehicles_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.HMIConfig)
  return target;
}

size_t HMIConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.HMIConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // map<string, string> modes = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->modes_size());
  {
    ::std::unique_ptr<HMIConfig_ModesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->modes().begin();
        it != this->modes().end(); ++it) {
      entry.reset(modes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> maps = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->maps_size());
  {
    ::std::unique_ptr<HMIConfig_MapsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->maps().begin();
        it != this->maps().end(); ++it) {
      entry.reset(maps_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> vehicles = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->vehicles_size());
  {
    ::std::unique_ptr<HMIConfig_VehiclesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->vehicles().begin();
        it != this->vehicles().end(); ++it) {
      entry.reset(vehicles_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HMIConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.HMIConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const HMIConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HMIConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.HMIConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.HMIConfig)
    MergeFrom(*source);
  }
}

void HMIConfig::MergeFrom(const HMIConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.HMIConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modes_.MergeFrom(from.modes_);
  maps_.MergeFrom(from.maps_);
  vehicles_.MergeFrom(from.vehicles_);
}

void HMIConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.HMIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HMIConfig::CopyFrom(const HMIConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.HMIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HMIConfig::IsInitialized() const {
  return true;
}

void HMIConfig::Swap(HMIConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HMIConfig::InternalSwap(HMIConfig* other) {
  using std::swap;
  modes_.Swap(&other->modes_);
  maps_.Swap(&other->maps_);
  vehicles_.Swap(&other->vehicles_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HMIConfig::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleData_DataFile::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleData_DataFile::kSourcePathFieldNumber;
const int VehicleData_DataFile::kDestPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleData_DataFile::VehicleData_DataFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::scc_info_VehicleData_DataFile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.VehicleData.DataFile)
}
VehicleData_DataFile::VehicleData_DataFile(const VehicleData_DataFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_path()) {
    source_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_path_);
  }
  dest_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dest_path()) {
    dest_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_path_);
  }
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.VehicleData.DataFile)
}

void VehicleData_DataFile::SharedCtor() {
  source_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VehicleData_DataFile::~VehicleData_DataFile() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.VehicleData.DataFile)
  SharedDtor();
}

void VehicleData_DataFile::SharedDtor() {
  source_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VehicleData_DataFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleData_DataFile::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleData_DataFile& VehicleData_DataFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::scc_info_VehicleData_DataFile.base);
  return *internal_default_instance();
}


void VehicleData_DataFile::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.VehicleData.DataFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      source_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      dest_path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleData_DataFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.VehicleData.DataFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_path().data(), static_cast<int>(this->source_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.VehicleData.DataFile.source_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dest_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest_path().data(), static_cast<int>(this->dest_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.dreamview.VehicleData.DataFile.dest_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.VehicleData.DataFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.VehicleData.DataFile)
  return false;
#undef DO_
}

void VehicleData_DataFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.VehicleData.DataFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_path().data(), static_cast<int>(this->source_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.VehicleData.DataFile.source_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source_path(), output);
  }

  // optional string dest_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest_path().data(), static_cast<int>(this->dest_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.VehicleData.DataFile.dest_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dest_path(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.VehicleData.DataFile)
}

::google::protobuf::uint8* VehicleData_DataFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.VehicleData.DataFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string source_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_path().data(), static_cast<int>(this->source_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.VehicleData.DataFile.source_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source_path(), target);
  }

  // optional string dest_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest_path().data(), static_cast<int>(this->dest_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.dreamview.VehicleData.DataFile.dest_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest_path(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.VehicleData.DataFile)
  return target;
}

size_t VehicleData_DataFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.VehicleData.DataFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string source_path = 1;
    if (has_source_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_path());
    }

    // optional string dest_path = 2;
    if (has_dest_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest_path());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleData_DataFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.VehicleData.DataFile)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleData_DataFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleData_DataFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.VehicleData.DataFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.VehicleData.DataFile)
    MergeFrom(*source);
  }
}

void VehicleData_DataFile::MergeFrom(const VehicleData_DataFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.VehicleData.DataFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source_path();
      source_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_path_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_dest_path();
      dest_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_path_);
    }
  }
}

void VehicleData_DataFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.VehicleData.DataFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleData_DataFile::CopyFrom(const VehicleData_DataFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.VehicleData.DataFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleData_DataFile::IsInitialized() const {
  return true;
}

void VehicleData_DataFile::Swap(VehicleData_DataFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleData_DataFile::InternalSwap(VehicleData_DataFile* other) {
  using std::swap;
  source_path_.Swap(&other->source_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dest_path_.Swap(&other->dest_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleData_DataFile::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VehicleData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleData::kDataFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleData::VehicleData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::scc_info_VehicleData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.dreamview.VehicleData)
}
VehicleData::VehicleData(const VehicleData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      data_files_(from.data_files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.dreamview.VehicleData)
}

void VehicleData::SharedCtor() {
}

VehicleData::~VehicleData() {
  // @@protoc_insertion_point(destructor:apollo.dreamview.VehicleData)
  SharedDtor();
}

void VehicleData::SharedDtor() {
}

void VehicleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VehicleData::descriptor() {
  ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VehicleData& VehicleData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::scc_info_VehicleData.base);
  return *internal_default_instance();
}


void VehicleData::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.dreamview.VehicleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_files_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.dreamview.VehicleData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.dreamview.VehicleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.dreamview.VehicleData)
  return false;
#undef DO_
}

void VehicleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.dreamview.VehicleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_files_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->data_files(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.dreamview.VehicleData)
}

::google::protobuf::uint8* VehicleData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.dreamview.VehicleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_files_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->data_files(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.dreamview.VehicleData)
  return target;
}

size_t VehicleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.dreamview.VehicleData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.dreamview.VehicleData.DataFile data_files = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_files_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data_files(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.dreamview.VehicleData)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VehicleData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.dreamview.VehicleData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.dreamview.VehicleData)
    MergeFrom(*source);
  }
}

void VehicleData::MergeFrom(const VehicleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.dreamview.VehicleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_files_.MergeFrom(from.data_files_);
}

void VehicleData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.dreamview.VehicleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleData::CopyFrom(const VehicleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.dreamview.VehicleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleData::IsInitialized() const {
  return true;
}

void VehicleData::Swap(VehicleData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleData::InternalSwap(VehicleData* other) {
  using std::swap;
  CastToBase(&data_files_)->InternalSwap(CastToBase(&other->data_files_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VehicleData::GetMetadata() const {
  protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fdreamview_2fproto_2fhmi_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dreamview
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::HMIConfig_ModesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::HMIConfig_MapsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse* Arena::CreateMaybeMessage< ::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::HMIConfig_VehiclesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::HMIConfig* Arena::CreateMaybeMessage< ::apollo::dreamview::HMIConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::HMIConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::VehicleData_DataFile* Arena::CreateMaybeMessage< ::apollo::dreamview::VehicleData_DataFile >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::VehicleData_DataFile >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::dreamview::VehicleData* Arena::CreateMaybeMessage< ::apollo::dreamview::VehicleData >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::dreamview::VehicleData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
