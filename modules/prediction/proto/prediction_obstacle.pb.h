// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/prediction_obstacle.proto

#ifndef PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto
#define PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/error_code.pb.h"
#include "modules/common/proto/header.pb.h"
#include "modules/prediction/proto/scenario.pb.h"
#include "modules/perception/proto/perception_obstacle.pb.h"
#include "modules/prediction/proto/feature.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto 

namespace protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto
namespace apollo {
namespace prediction {
class Intent;
class IntentDefaultTypeInternal;
extern IntentDefaultTypeInternal _Intent_default_instance_;
class ObstacleIntent;
class ObstacleIntentDefaultTypeInternal;
extern ObstacleIntentDefaultTypeInternal _ObstacleIntent_default_instance_;
class PredictionObstacle;
class PredictionObstacleDefaultTypeInternal;
extern PredictionObstacleDefaultTypeInternal _PredictionObstacle_default_instance_;
class PredictionObstacles;
class PredictionObstaclesDefaultTypeInternal;
extern PredictionObstaclesDefaultTypeInternal _PredictionObstacles_default_instance_;
}  // namespace prediction
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::prediction::Intent* Arena::CreateMaybeMessage<::apollo::prediction::Intent>(Arena*);
template<> ::apollo::prediction::ObstacleIntent* Arena::CreateMaybeMessage<::apollo::prediction::ObstacleIntent>(Arena*);
template<> ::apollo::prediction::PredictionObstacle* Arena::CreateMaybeMessage<::apollo::prediction::PredictionObstacle>(Arena*);
template<> ::apollo::prediction::PredictionObstacles* Arena::CreateMaybeMessage<::apollo::prediction::PredictionObstacles>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace prediction {

enum ObstacleIntent_Type {
  ObstacleIntent_Type_UNKNOWN = 0,
  ObstacleIntent_Type_STOP = 1,
  ObstacleIntent_Type_STATIONARY = 2,
  ObstacleIntent_Type_MOVING = 3,
  ObstacleIntent_Type_CHANGE_LANE = 4,
  ObstacleIntent_Type_LOW_ACCELERATION = 5,
  ObstacleIntent_Type_HIGH_ACCELERATION = 6,
  ObstacleIntent_Type_LOW_DECELERATION = 7,
  ObstacleIntent_Type_HIGH_DECELERATION = 8
};
bool ObstacleIntent_Type_IsValid(int value);
const ObstacleIntent_Type ObstacleIntent_Type_Type_MIN = ObstacleIntent_Type_UNKNOWN;
const ObstacleIntent_Type ObstacleIntent_Type_Type_MAX = ObstacleIntent_Type_HIGH_DECELERATION;
const int ObstacleIntent_Type_Type_ARRAYSIZE = ObstacleIntent_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObstacleIntent_Type_descriptor();
inline const ::std::string& ObstacleIntent_Type_Name(ObstacleIntent_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObstacleIntent_Type_descriptor(), value);
}
inline bool ObstacleIntent_Type_Parse(
    const ::std::string& name, ObstacleIntent_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObstacleIntent_Type>(
    ObstacleIntent_Type_descriptor(), name, value);
}
enum Intent_Type {
  Intent_Type_UNKNOWN = 0,
  Intent_Type_STOP = 1,
  Intent_Type_CRUISE = 2,
  Intent_Type_CHANGE_LANE = 3
};
bool Intent_Type_IsValid(int value);
const Intent_Type Intent_Type_Type_MIN = Intent_Type_UNKNOWN;
const Intent_Type Intent_Type_Type_MAX = Intent_Type_CHANGE_LANE;
const int Intent_Type_Type_ARRAYSIZE = Intent_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Intent_Type_descriptor();
inline const ::std::string& Intent_Type_Name(Intent_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Intent_Type_descriptor(), value);
}
inline bool Intent_Type_Parse(
    const ::std::string& name, Intent_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Intent_Type>(
    Intent_Type_descriptor(), name, value);
}
// ===================================================================

class ObstacleIntent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.ObstacleIntent) */ {
 public:
  ObstacleIntent();
  virtual ~ObstacleIntent();

  ObstacleIntent(const ObstacleIntent& from);

  inline ObstacleIntent& operator=(const ObstacleIntent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObstacleIntent(ObstacleIntent&& from) noexcept
    : ObstacleIntent() {
    *this = ::std::move(from);
  }

  inline ObstacleIntent& operator=(ObstacleIntent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObstacleIntent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleIntent* internal_default_instance() {
    return reinterpret_cast<const ObstacleIntent*>(
               &_ObstacleIntent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ObstacleIntent* other);
  friend void swap(ObstacleIntent& a, ObstacleIntent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObstacleIntent* New() const final {
    return CreateMaybeMessage<ObstacleIntent>(NULL);
  }

  ObstacleIntent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleIntent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObstacleIntent& from);
  void MergeFrom(const ObstacleIntent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleIntent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ObstacleIntent_Type Type;
  static const Type UNKNOWN =
    ObstacleIntent_Type_UNKNOWN;
  static const Type STOP =
    ObstacleIntent_Type_STOP;
  static const Type STATIONARY =
    ObstacleIntent_Type_STATIONARY;
  static const Type MOVING =
    ObstacleIntent_Type_MOVING;
  static const Type CHANGE_LANE =
    ObstacleIntent_Type_CHANGE_LANE;
  static const Type LOW_ACCELERATION =
    ObstacleIntent_Type_LOW_ACCELERATION;
  static const Type HIGH_ACCELERATION =
    ObstacleIntent_Type_HIGH_ACCELERATION;
  static const Type LOW_DECELERATION =
    ObstacleIntent_Type_LOW_DECELERATION;
  static const Type HIGH_DECELERATION =
    ObstacleIntent_Type_HIGH_DECELERATION;
  static inline bool Type_IsValid(int value) {
    return ObstacleIntent_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ObstacleIntent_Type_Type_MIN;
  static const Type Type_MAX =
    ObstacleIntent_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ObstacleIntent_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ObstacleIntent_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ObstacleIntent_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ObstacleIntent_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::apollo::prediction::ObstacleIntent_Type type() const;
  void set_type(::apollo::prediction::ObstacleIntent_Type value);

  // @@protoc_insertion_point(class_scope:apollo.prediction.ObstacleIntent)
 private:
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int type_;
  friend struct ::protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Intent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.Intent) */ {
 public:
  Intent();
  virtual ~Intent();

  Intent(const Intent& from);

  inline Intent& operator=(const Intent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Intent(Intent&& from) noexcept
    : Intent() {
    *this = ::std::move(from);
  }

  inline Intent& operator=(Intent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Intent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Intent* internal_default_instance() {
    return reinterpret_cast<const Intent*>(
               &_Intent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Intent* other);
  friend void swap(Intent& a, Intent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Intent* New() const final {
    return CreateMaybeMessage<Intent>(NULL);
  }

  Intent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Intent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Intent& from);
  void MergeFrom(const Intent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Intent_Type Type;
  static const Type UNKNOWN =
    Intent_Type_UNKNOWN;
  static const Type STOP =
    Intent_Type_STOP;
  static const Type CRUISE =
    Intent_Type_CRUISE;
  static const Type CHANGE_LANE =
    Intent_Type_CHANGE_LANE;
  static inline bool Type_IsValid(int value) {
    return Intent_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Intent_Type_Type_MIN;
  static const Type Type_MAX =
    Intent_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Intent_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Intent_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Intent_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Intent_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.prediction.Intent.Type type = 1 [default = UNKNOWN];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::apollo::prediction::Intent_Type type() const;
  void set_type(::apollo::prediction::Intent_Type value);

  // @@protoc_insertion_point(class_scope:apollo.prediction.Intent)
 private:
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int type_;
  friend struct ::protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PredictionObstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.PredictionObstacle) */ {
 public:
  PredictionObstacle();
  virtual ~PredictionObstacle();

  PredictionObstacle(const PredictionObstacle& from);

  inline PredictionObstacle& operator=(const PredictionObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PredictionObstacle(PredictionObstacle&& from) noexcept
    : PredictionObstacle() {
    *this = ::std::move(from);
  }

  inline PredictionObstacle& operator=(PredictionObstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PredictionObstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictionObstacle* internal_default_instance() {
    return reinterpret_cast<const PredictionObstacle*>(
               &_PredictionObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PredictionObstacle* other);
  friend void swap(PredictionObstacle& a, PredictionObstacle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PredictionObstacle* New() const final {
    return CreateMaybeMessage<PredictionObstacle>(NULL);
  }

  PredictionObstacle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PredictionObstacle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PredictionObstacle& from);
  void MergeFrom(const PredictionObstacle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.prediction.Trajectory trajectory = 4;
  int trajectory_size() const;
  void clear_trajectory();
  static const int kTrajectoryFieldNumber = 4;
  ::apollo::prediction::Trajectory* mutable_trajectory(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::Trajectory >*
      mutable_trajectory();
  const ::apollo::prediction::Trajectory& trajectory(int index) const;
  ::apollo::prediction::Trajectory* add_trajectory();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::Trajectory >&
      trajectory() const;

  // repeated .apollo.prediction.Feature feature = 8;
  int feature_size() const;
  void clear_feature();
  static const int kFeatureFieldNumber = 8;
  ::apollo::prediction::Feature* mutable_feature(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::Feature >*
      mutable_feature();
  const ::apollo::prediction::Feature& feature(int index) const;
  ::apollo::prediction::Feature* add_feature();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::Feature >&
      feature() const;

  // optional .apollo.perception.PerceptionObstacle perception_obstacle = 1;
  bool has_perception_obstacle() const;
  void clear_perception_obstacle();
  static const int kPerceptionObstacleFieldNumber = 1;
  private:
  const ::apollo::perception::PerceptionObstacle& _internal_perception_obstacle() const;
  public:
  const ::apollo::perception::PerceptionObstacle& perception_obstacle() const;
  ::apollo::perception::PerceptionObstacle* release_perception_obstacle();
  ::apollo::perception::PerceptionObstacle* mutable_perception_obstacle();
  void set_allocated_perception_obstacle(::apollo::perception::PerceptionObstacle* perception_obstacle);

  // optional .apollo.prediction.ObstacleIntent intent = 5;
  bool has_intent() const;
  void clear_intent();
  static const int kIntentFieldNumber = 5;
  private:
  const ::apollo::prediction::ObstacleIntent& _internal_intent() const;
  public:
  const ::apollo::prediction::ObstacleIntent& intent() const;
  ::apollo::prediction::ObstacleIntent* release_intent();
  ::apollo::prediction::ObstacleIntent* mutable_intent();
  void set_allocated_intent(::apollo::prediction::ObstacleIntent* intent);

  // optional .apollo.prediction.ObstaclePriority priority = 6;
  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 6;
  private:
  const ::apollo::prediction::ObstaclePriority& _internal_priority() const;
  public:
  const ::apollo::prediction::ObstaclePriority& priority() const;
  ::apollo::prediction::ObstaclePriority* release_priority();
  ::apollo::prediction::ObstaclePriority* mutable_priority();
  void set_allocated_priority(::apollo::prediction::ObstaclePriority* priority);

  // optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 9;
  bool has_interactive_tag() const;
  void clear_interactive_tag();
  static const int kInteractiveTagFieldNumber = 9;
  private:
  const ::apollo::prediction::ObstacleInteractiveTag& _internal_interactive_tag() const;
  public:
  const ::apollo::prediction::ObstacleInteractiveTag& interactive_tag() const;
  ::apollo::prediction::ObstacleInteractiveTag* release_interactive_tag();
  ::apollo::prediction::ObstacleInteractiveTag* mutable_interactive_tag();
  void set_allocated_interactive_tag(::apollo::prediction::ObstacleInteractiveTag* interactive_tag);

  // optional double timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  double timestamp() const;
  void set_timestamp(double value);

  // optional double predicted_period = 3;
  bool has_predicted_period() const;
  void clear_predicted_period();
  static const int kPredictedPeriodFieldNumber = 3;
  double predicted_period() const;
  void set_predicted_period(double value);

  // optional bool is_static = 7 [default = false];
  bool has_is_static() const;
  void clear_is_static();
  static const int kIsStaticFieldNumber = 7;
  bool is_static() const;
  void set_is_static(bool value);

  // @@protoc_insertion_point(class_scope:apollo.prediction.PredictionObstacle)
 private:
  void set_has_perception_obstacle();
  void clear_has_perception_obstacle();
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_predicted_period();
  void clear_has_predicted_period();
  void set_has_intent();
  void clear_has_intent();
  void set_has_priority();
  void clear_has_priority();
  void set_has_interactive_tag();
  void clear_has_interactive_tag();
  void set_has_is_static();
  void clear_has_is_static();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::Trajectory > trajectory_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::Feature > feature_;
  ::apollo::perception::PerceptionObstacle* perception_obstacle_;
  ::apollo::prediction::ObstacleIntent* intent_;
  ::apollo::prediction::ObstaclePriority* priority_;
  ::apollo::prediction::ObstacleInteractiveTag* interactive_tag_;
  double timestamp_;
  double predicted_period_;
  bool is_static_;
  friend struct ::protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PredictionObstacles : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.PredictionObstacles) */ {
 public:
  PredictionObstacles();
  virtual ~PredictionObstacles();

  PredictionObstacles(const PredictionObstacles& from);

  inline PredictionObstacles& operator=(const PredictionObstacles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PredictionObstacles(PredictionObstacles&& from) noexcept
    : PredictionObstacles() {
    *this = ::std::move(from);
  }

  inline PredictionObstacles& operator=(PredictionObstacles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PredictionObstacles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictionObstacles* internal_default_instance() {
    return reinterpret_cast<const PredictionObstacles*>(
               &_PredictionObstacles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PredictionObstacles* other);
  friend void swap(PredictionObstacles& a, PredictionObstacles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PredictionObstacles* New() const final {
    return CreateMaybeMessage<PredictionObstacles>(NULL);
  }

  PredictionObstacles* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PredictionObstacles>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PredictionObstacles& from);
  void MergeFrom(const PredictionObstacles& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionObstacles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.prediction.PredictionObstacle prediction_obstacle = 2;
  int prediction_obstacle_size() const;
  void clear_prediction_obstacle();
  static const int kPredictionObstacleFieldNumber = 2;
  ::apollo::prediction::PredictionObstacle* mutable_prediction_obstacle(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::PredictionObstacle >*
      mutable_prediction_obstacle();
  const ::apollo::prediction::PredictionObstacle& prediction_obstacle(int index) const;
  ::apollo::prediction::PredictionObstacle* add_prediction_obstacle();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::PredictionObstacle >&
      prediction_obstacle() const;

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::apollo::common::Header& _internal_header() const;
  public:
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.prediction.Intent intent = 6;
  bool has_intent() const;
  void clear_intent();
  static const int kIntentFieldNumber = 6;
  private:
  const ::apollo::prediction::Intent& _internal_intent() const;
  public:
  const ::apollo::prediction::Intent& intent() const;
  ::apollo::prediction::Intent* release_intent();
  ::apollo::prediction::Intent* mutable_intent();
  void set_allocated_intent(::apollo::prediction::Intent* intent);

  // optional .apollo.prediction.Scenario scenario = 7;
  bool has_scenario() const;
  void clear_scenario();
  static const int kScenarioFieldNumber = 7;
  private:
  const ::apollo::prediction::Scenario& _internal_scenario() const;
  public:
  const ::apollo::prediction::Scenario& scenario() const;
  ::apollo::prediction::Scenario* release_scenario();
  ::apollo::prediction::Scenario* mutable_scenario();
  void set_allocated_scenario(::apollo::prediction::Scenario* scenario);

  // optional double start_timestamp = 4;
  bool has_start_timestamp() const;
  void clear_start_timestamp();
  static const int kStartTimestampFieldNumber = 4;
  double start_timestamp() const;
  void set_start_timestamp(double value);

  // optional double end_timestamp = 5;
  bool has_end_timestamp() const;
  void clear_end_timestamp();
  static const int kEndTimestampFieldNumber = 5;
  double end_timestamp() const;
  void set_end_timestamp(double value);

  // optional .apollo.common.ErrorCode perception_error_code = 3;
  bool has_perception_error_code() const;
  void clear_perception_error_code();
  static const int kPerceptionErrorCodeFieldNumber = 3;
  ::apollo::common::ErrorCode perception_error_code() const;
  void set_perception_error_code(::apollo::common::ErrorCode value);

  // @@protoc_insertion_point(class_scope:apollo.prediction.PredictionObstacles)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_perception_error_code();
  void clear_has_perception_error_code();
  void set_has_start_timestamp();
  void clear_has_start_timestamp();
  void set_has_end_timestamp();
  void clear_has_end_timestamp();
  void set_has_intent();
  void clear_has_intent();
  void set_has_scenario();
  void clear_has_scenario();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::PredictionObstacle > prediction_obstacle_;
  ::apollo::common::Header* header_;
  ::apollo::prediction::Intent* intent_;
  ::apollo::prediction::Scenario* scenario_;
  double start_timestamp_;
  double end_timestamp_;
  int perception_error_code_;
  friend struct ::protobuf_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObstacleIntent

// optional .apollo.prediction.ObstacleIntent.Type type = 1 [default = UNKNOWN];
inline bool ObstacleIntent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstacleIntent::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObstacleIntent::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObstacleIntent::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::apollo::prediction::ObstacleIntent_Type ObstacleIntent::type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleIntent.type)
  return static_cast< ::apollo::prediction::ObstacleIntent_Type >(type_);
}
inline void ObstacleIntent::set_type(::apollo::prediction::ObstacleIntent_Type value) {
  assert(::apollo::prediction::ObstacleIntent_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleIntent.type)
}

// -------------------------------------------------------------------

// Intent

// optional .apollo.prediction.Intent.Type type = 1 [default = UNKNOWN];
inline bool Intent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Intent::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Intent::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Intent::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::apollo::prediction::Intent_Type Intent::type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.Intent.type)
  return static_cast< ::apollo::prediction::Intent_Type >(type_);
}
inline void Intent::set_type(::apollo::prediction::Intent_Type value) {
  assert(::apollo::prediction::Intent_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.Intent.type)
}

// -------------------------------------------------------------------

// PredictionObstacle

// optional .apollo.perception.PerceptionObstacle perception_obstacle = 1;
inline bool PredictionObstacle::has_perception_obstacle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PredictionObstacle::set_has_perception_obstacle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PredictionObstacle::clear_has_perception_obstacle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::PerceptionObstacle& PredictionObstacle::_internal_perception_obstacle() const {
  return *perception_obstacle_;
}
inline const ::apollo::perception::PerceptionObstacle& PredictionObstacle::perception_obstacle() const {
  const ::apollo::perception::PerceptionObstacle* p = perception_obstacle_;
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.perception_obstacle)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::perception::PerceptionObstacle*>(
      &::apollo::perception::_PerceptionObstacle_default_instance_);
}
inline ::apollo::perception::PerceptionObstacle* PredictionObstacle::release_perception_obstacle() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionObstacle.perception_obstacle)
  clear_has_perception_obstacle();
  ::apollo::perception::PerceptionObstacle* temp = perception_obstacle_;
  perception_obstacle_ = NULL;
  return temp;
}
inline ::apollo::perception::PerceptionObstacle* PredictionObstacle::mutable_perception_obstacle() {
  set_has_perception_obstacle();
  if (perception_obstacle_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::perception::PerceptionObstacle>(GetArenaNoVirtual());
    perception_obstacle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacle.perception_obstacle)
  return perception_obstacle_;
}
inline void PredictionObstacle::set_allocated_perception_obstacle(::apollo::perception::PerceptionObstacle* perception_obstacle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(perception_obstacle_);
  }
  if (perception_obstacle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      perception_obstacle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, perception_obstacle, submessage_arena);
    }
    set_has_perception_obstacle();
  } else {
    clear_has_perception_obstacle();
  }
  perception_obstacle_ = perception_obstacle;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionObstacle.perception_obstacle)
}

// optional double timestamp = 2;
inline bool PredictionObstacle::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PredictionObstacle::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PredictionObstacle::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PredictionObstacle::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double PredictionObstacle::timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.timestamp)
  return timestamp_;
}
inline void PredictionObstacle::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.PredictionObstacle.timestamp)
}

// optional double predicted_period = 3;
inline bool PredictionObstacle::has_predicted_period() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PredictionObstacle::set_has_predicted_period() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PredictionObstacle::clear_has_predicted_period() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PredictionObstacle::clear_predicted_period() {
  predicted_period_ = 0;
  clear_has_predicted_period();
}
inline double PredictionObstacle::predicted_period() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.predicted_period)
  return predicted_period_;
}
inline void PredictionObstacle::set_predicted_period(double value) {
  set_has_predicted_period();
  predicted_period_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.PredictionObstacle.predicted_period)
}

// repeated .apollo.prediction.Trajectory trajectory = 4;
inline int PredictionObstacle::trajectory_size() const {
  return trajectory_.size();
}
inline ::apollo::prediction::Trajectory* PredictionObstacle::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacle.trajectory)
  return trajectory_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::Trajectory >*
PredictionObstacle::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.PredictionObstacle.trajectory)
  return &trajectory_;
}
inline const ::apollo::prediction::Trajectory& PredictionObstacle::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.trajectory)
  return trajectory_.Get(index);
}
inline ::apollo::prediction::Trajectory* PredictionObstacle::add_trajectory() {
  // @@protoc_insertion_point(field_add:apollo.prediction.PredictionObstacle.trajectory)
  return trajectory_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::Trajectory >&
PredictionObstacle::trajectory() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.PredictionObstacle.trajectory)
  return trajectory_;
}

// optional .apollo.prediction.ObstacleIntent intent = 5;
inline bool PredictionObstacle::has_intent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PredictionObstacle::set_has_intent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PredictionObstacle::clear_has_intent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PredictionObstacle::clear_intent() {
  if (intent_ != NULL) intent_->Clear();
  clear_has_intent();
}
inline const ::apollo::prediction::ObstacleIntent& PredictionObstacle::_internal_intent() const {
  return *intent_;
}
inline const ::apollo::prediction::ObstacleIntent& PredictionObstacle::intent() const {
  const ::apollo::prediction::ObstacleIntent* p = intent_;
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.intent)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::prediction::ObstacleIntent*>(
      &::apollo::prediction::_ObstacleIntent_default_instance_);
}
inline ::apollo::prediction::ObstacleIntent* PredictionObstacle::release_intent() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionObstacle.intent)
  clear_has_intent();
  ::apollo::prediction::ObstacleIntent* temp = intent_;
  intent_ = NULL;
  return temp;
}
inline ::apollo::prediction::ObstacleIntent* PredictionObstacle::mutable_intent() {
  set_has_intent();
  if (intent_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::prediction::ObstacleIntent>(GetArenaNoVirtual());
    intent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacle.intent)
  return intent_;
}
inline void PredictionObstacle::set_allocated_intent(::apollo::prediction::ObstacleIntent* intent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete intent_;
  }
  if (intent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      intent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, intent, submessage_arena);
    }
    set_has_intent();
  } else {
    clear_has_intent();
  }
  intent_ = intent;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionObstacle.intent)
}

// optional .apollo.prediction.ObstaclePriority priority = 6;
inline bool PredictionObstacle::has_priority() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PredictionObstacle::set_has_priority() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PredictionObstacle::clear_has_priority() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::prediction::ObstaclePriority& PredictionObstacle::_internal_priority() const {
  return *priority_;
}
inline const ::apollo::prediction::ObstaclePriority& PredictionObstacle::priority() const {
  const ::apollo::prediction::ObstaclePriority* p = priority_;
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.priority)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::prediction::ObstaclePriority*>(
      &::apollo::prediction::_ObstaclePriority_default_instance_);
}
inline ::apollo::prediction::ObstaclePriority* PredictionObstacle::release_priority() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionObstacle.priority)
  clear_has_priority();
  ::apollo::prediction::ObstaclePriority* temp = priority_;
  priority_ = NULL;
  return temp;
}
inline ::apollo::prediction::ObstaclePriority* PredictionObstacle::mutable_priority() {
  set_has_priority();
  if (priority_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::prediction::ObstaclePriority>(GetArenaNoVirtual());
    priority_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacle.priority)
  return priority_;
}
inline void PredictionObstacle::set_allocated_priority(::apollo::prediction::ObstaclePriority* priority) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(priority_);
  }
  if (priority) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      priority = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, priority, submessage_arena);
    }
    set_has_priority();
  } else {
    clear_has_priority();
  }
  priority_ = priority;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionObstacle.priority)
}

// optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 9;
inline bool PredictionObstacle::has_interactive_tag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PredictionObstacle::set_has_interactive_tag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PredictionObstacle::clear_has_interactive_tag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::apollo::prediction::ObstacleInteractiveTag& PredictionObstacle::_internal_interactive_tag() const {
  return *interactive_tag_;
}
inline const ::apollo::prediction::ObstacleInteractiveTag& PredictionObstacle::interactive_tag() const {
  const ::apollo::prediction::ObstacleInteractiveTag* p = interactive_tag_;
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.interactive_tag)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::prediction::ObstacleInteractiveTag*>(
      &::apollo::prediction::_ObstacleInteractiveTag_default_instance_);
}
inline ::apollo::prediction::ObstacleInteractiveTag* PredictionObstacle::release_interactive_tag() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionObstacle.interactive_tag)
  clear_has_interactive_tag();
  ::apollo::prediction::ObstacleInteractiveTag* temp = interactive_tag_;
  interactive_tag_ = NULL;
  return temp;
}
inline ::apollo::prediction::ObstacleInteractiveTag* PredictionObstacle::mutable_interactive_tag() {
  set_has_interactive_tag();
  if (interactive_tag_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::prediction::ObstacleInteractiveTag>(GetArenaNoVirtual());
    interactive_tag_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacle.interactive_tag)
  return interactive_tag_;
}
inline void PredictionObstacle::set_allocated_interactive_tag(::apollo::prediction::ObstacleInteractiveTag* interactive_tag) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(interactive_tag_);
  }
  if (interactive_tag) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interactive_tag = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interactive_tag, submessage_arena);
    }
    set_has_interactive_tag();
  } else {
    clear_has_interactive_tag();
  }
  interactive_tag_ = interactive_tag;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionObstacle.interactive_tag)
}

// optional bool is_static = 7 [default = false];
inline bool PredictionObstacle::has_is_static() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PredictionObstacle::set_has_is_static() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PredictionObstacle::clear_has_is_static() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PredictionObstacle::clear_is_static() {
  is_static_ = false;
  clear_has_is_static();
}
inline bool PredictionObstacle::is_static() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.is_static)
  return is_static_;
}
inline void PredictionObstacle::set_is_static(bool value) {
  set_has_is_static();
  is_static_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.PredictionObstacle.is_static)
}

// repeated .apollo.prediction.Feature feature = 8;
inline int PredictionObstacle::feature_size() const {
  return feature_.size();
}
inline ::apollo::prediction::Feature* PredictionObstacle::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacle.feature)
  return feature_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::Feature >*
PredictionObstacle::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.PredictionObstacle.feature)
  return &feature_;
}
inline const ::apollo::prediction::Feature& PredictionObstacle::feature(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacle.feature)
  return feature_.Get(index);
}
inline ::apollo::prediction::Feature* PredictionObstacle::add_feature() {
  // @@protoc_insertion_point(field_add:apollo.prediction.PredictionObstacle.feature)
  return feature_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::Feature >&
PredictionObstacle::feature() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.PredictionObstacle.feature)
  return feature_;
}

// -------------------------------------------------------------------

// PredictionObstacles

// optional .apollo.common.Header header = 1;
inline bool PredictionObstacles::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PredictionObstacles::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PredictionObstacles::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::common::Header& PredictionObstacles::_internal_header() const {
  return *header_;
}
inline const ::apollo::common::Header& PredictionObstacles::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* PredictionObstacles::release_header() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionObstacles.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::common::Header* PredictionObstacles::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacles.header)
  return header_;
}
inline void PredictionObstacles::set_allocated_header(::apollo::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionObstacles.header)
}

// repeated .apollo.prediction.PredictionObstacle prediction_obstacle = 2;
inline int PredictionObstacles::prediction_obstacle_size() const {
  return prediction_obstacle_.size();
}
inline void PredictionObstacles::clear_prediction_obstacle() {
  prediction_obstacle_.Clear();
}
inline ::apollo::prediction::PredictionObstacle* PredictionObstacles::mutable_prediction_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacles.prediction_obstacle)
  return prediction_obstacle_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::PredictionObstacle >*
PredictionObstacles::mutable_prediction_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.PredictionObstacles.prediction_obstacle)
  return &prediction_obstacle_;
}
inline const ::apollo::prediction::PredictionObstacle& PredictionObstacles::prediction_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.prediction_obstacle)
  return prediction_obstacle_.Get(index);
}
inline ::apollo::prediction::PredictionObstacle* PredictionObstacles::add_prediction_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.prediction.PredictionObstacles.prediction_obstacle)
  return prediction_obstacle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::PredictionObstacle >&
PredictionObstacles::prediction_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.PredictionObstacles.prediction_obstacle)
  return prediction_obstacle_;
}

// optional .apollo.common.ErrorCode perception_error_code = 3;
inline bool PredictionObstacles::has_perception_error_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PredictionObstacles::set_has_perception_error_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PredictionObstacles::clear_has_perception_error_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PredictionObstacles::clear_perception_error_code() {
  perception_error_code_ = 0;
  clear_has_perception_error_code();
}
inline ::apollo::common::ErrorCode PredictionObstacles::perception_error_code() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.perception_error_code)
  return static_cast< ::apollo::common::ErrorCode >(perception_error_code_);
}
inline void PredictionObstacles::set_perception_error_code(::apollo::common::ErrorCode value) {
  assert(::apollo::common::ErrorCode_IsValid(value));
  set_has_perception_error_code();
  perception_error_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.PredictionObstacles.perception_error_code)
}

// optional double start_timestamp = 4;
inline bool PredictionObstacles::has_start_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PredictionObstacles::set_has_start_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PredictionObstacles::clear_has_start_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PredictionObstacles::clear_start_timestamp() {
  start_timestamp_ = 0;
  clear_has_start_timestamp();
}
inline double PredictionObstacles::start_timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.start_timestamp)
  return start_timestamp_;
}
inline void PredictionObstacles::set_start_timestamp(double value) {
  set_has_start_timestamp();
  start_timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.PredictionObstacles.start_timestamp)
}

// optional double end_timestamp = 5;
inline bool PredictionObstacles::has_end_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PredictionObstacles::set_has_end_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PredictionObstacles::clear_has_end_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PredictionObstacles::clear_end_timestamp() {
  end_timestamp_ = 0;
  clear_has_end_timestamp();
}
inline double PredictionObstacles::end_timestamp() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.end_timestamp)
  return end_timestamp_;
}
inline void PredictionObstacles::set_end_timestamp(double value) {
  set_has_end_timestamp();
  end_timestamp_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.PredictionObstacles.end_timestamp)
}

// optional .apollo.prediction.Intent intent = 6;
inline bool PredictionObstacles::has_intent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PredictionObstacles::set_has_intent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PredictionObstacles::clear_has_intent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PredictionObstacles::clear_intent() {
  if (intent_ != NULL) intent_->Clear();
  clear_has_intent();
}
inline const ::apollo::prediction::Intent& PredictionObstacles::_internal_intent() const {
  return *intent_;
}
inline const ::apollo::prediction::Intent& PredictionObstacles::intent() const {
  const ::apollo::prediction::Intent* p = intent_;
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.intent)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::prediction::Intent*>(
      &::apollo::prediction::_Intent_default_instance_);
}
inline ::apollo::prediction::Intent* PredictionObstacles::release_intent() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionObstacles.intent)
  clear_has_intent();
  ::apollo::prediction::Intent* temp = intent_;
  intent_ = NULL;
  return temp;
}
inline ::apollo::prediction::Intent* PredictionObstacles::mutable_intent() {
  set_has_intent();
  if (intent_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::prediction::Intent>(GetArenaNoVirtual());
    intent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacles.intent)
  return intent_;
}
inline void PredictionObstacles::set_allocated_intent(::apollo::prediction::Intent* intent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete intent_;
  }
  if (intent) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      intent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, intent, submessage_arena);
    }
    set_has_intent();
  } else {
    clear_has_intent();
  }
  intent_ = intent;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionObstacles.intent)
}

// optional .apollo.prediction.Scenario scenario = 7;
inline bool PredictionObstacles::has_scenario() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PredictionObstacles::set_has_scenario() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PredictionObstacles::clear_has_scenario() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::prediction::Scenario& PredictionObstacles::_internal_scenario() const {
  return *scenario_;
}
inline const ::apollo::prediction::Scenario& PredictionObstacles::scenario() const {
  const ::apollo::prediction::Scenario* p = scenario_;
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionObstacles.scenario)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::prediction::Scenario*>(
      &::apollo::prediction::_Scenario_default_instance_);
}
inline ::apollo::prediction::Scenario* PredictionObstacles::release_scenario() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionObstacles.scenario)
  clear_has_scenario();
  ::apollo::prediction::Scenario* temp = scenario_;
  scenario_ = NULL;
  return temp;
}
inline ::apollo::prediction::Scenario* PredictionObstacles::mutable_scenario() {
  set_has_scenario();
  if (scenario_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::prediction::Scenario>(GetArenaNoVirtual());
    scenario_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionObstacles.scenario)
  return scenario_;
}
inline void PredictionObstacles::set_allocated_scenario(::apollo::prediction::Scenario* scenario) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scenario_);
  }
  if (scenario) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scenario = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scenario, submessage_arena);
    }
    set_has_scenario();
  } else {
    clear_has_scenario();
  }
  scenario_ = scenario;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionObstacles.scenario)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::prediction::ObstacleIntent_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::prediction::ObstacleIntent_Type>() {
  return ::apollo::prediction::ObstacleIntent_Type_descriptor();
}
template <> struct is_proto_enum< ::apollo::prediction::Intent_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::prediction::Intent_Type>() {
  return ::apollo::prediction::Intent_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fprediction_5fobstacle_2eproto
