// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/feature.proto

#include "modules/prediction/proto/feature.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point3D;
}  // namespace protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto
namespace protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TrajectoryPoint;
}  // namespace protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto
namespace protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_PerceptionObstacle;
}  // namespace protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto
namespace protobuf_modules_2fprediction_2fproto_2ffeature_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2ffeature_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LaneFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2ffeature_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ObstacleInteractiveTag;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2ffeature_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ObstaclePriority;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2ffeature_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_JunctionExit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2ffeature_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ObstacleHistory;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2ffeature_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Trajectory;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2ffeature_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_JunctionFeature;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2ffeature_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Lane;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2ffeature_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_Feature;
}  // namespace protobuf_modules_2fprediction_2fproto_2ffeature_2eproto
namespace protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LaneGraph;
}  // namespace protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto
namespace protobuf_modules_2fprediction_2fproto_2fprediction_5fpoint_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2fprediction_5fpoint_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PredictionTrajectoryPoint;
}  // namespace protobuf_modules_2fprediction_2fproto_2fprediction_5fpoint_2eproto
namespace apollo {
namespace prediction {
class LaneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Lane>
      _instance;
} _Lane_default_instance_;
class LaneFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneFeature>
      _instance;
} _LaneFeature_default_instance_;
class JunctionExitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JunctionExit>
      _instance;
} _JunctionExit_default_instance_;
class JunctionFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JunctionFeature>
      _instance;
} _JunctionFeature_default_instance_;
class ObstaclePriorityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObstaclePriority>
      _instance;
} _ObstaclePriority_default_instance_;
class ObstacleInteractiveTagDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObstacleInteractiveTag>
      _instance;
} _ObstacleInteractiveTag_default_instance_;
class TrajectoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Trajectory>
      _instance;
} _Trajectory_default_instance_;
class FeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Feature>
      _instance;
} _Feature_default_instance_;
class ObstacleHistoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObstacleHistory>
      _instance;
} _ObstacleHistory_default_instance_;
class FrameEnvDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrameEnv>
      _instance;
} _FrameEnv_default_instance_;
}  // namespace prediction
}  // namespace apollo
namespace protobuf_modules_2fprediction_2fproto_2ffeature_2eproto {
static void InitDefaultsLane() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_Lane_default_instance_;
    new (ptr) ::apollo::prediction::Lane();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::Lane::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Lane =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLane}, {
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_LaneFeature.base,
      &protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_LaneGraph.base,}};

static void InitDefaultsLaneFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_LaneFeature_default_instance_;
    new (ptr) ::apollo::prediction::LaneFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::LaneFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LaneFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLaneFeature}, {}};

static void InitDefaultsJunctionExit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_JunctionExit_default_instance_;
    new (ptr) ::apollo::prediction::JunctionExit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::JunctionExit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_JunctionExit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsJunctionExit}, {
      &protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::scc_info_Point3D.base,}};

static void InitDefaultsJunctionFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_JunctionFeature_default_instance_;
    new (ptr) ::apollo::prediction::JunctionFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::JunctionFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_JunctionFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsJunctionFeature}, {
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_LaneFeature.base,
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_JunctionExit.base,}};

static void InitDefaultsObstaclePriority() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_ObstaclePriority_default_instance_;
    new (ptr) ::apollo::prediction::ObstaclePriority();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::ObstaclePriority::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ObstaclePriority =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObstaclePriority}, {}};

static void InitDefaultsObstacleInteractiveTag() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_ObstacleInteractiveTag_default_instance_;
    new (ptr) ::apollo::prediction::ObstacleInteractiveTag();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::ObstacleInteractiveTag::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ObstacleInteractiveTag =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObstacleInteractiveTag}, {}};

static void InitDefaultsTrajectory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_Trajectory_default_instance_;
    new (ptr) ::apollo::prediction::Trajectory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::Trajectory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Trajectory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrajectory}, {
      &protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::scc_info_TrajectoryPoint.base,}};

static void InitDefaultsFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_Feature_default_instance_;
    new (ptr) ::apollo::prediction::Feature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::Feature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<9> scc_info_Feature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsFeature}, {
      &protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::scc_info_Point3D.base,
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_Lane.base,
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_JunctionFeature.base,
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_ObstaclePriority.base,
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_ObstacleInteractiveTag.base,
      &protobuf_modules_2fprediction_2fproto_2fprediction_5fpoint_2eproto::scc_info_PredictionTrajectoryPoint.base,
      &protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::scc_info_TrajectoryPoint.base,
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_Trajectory.base,
      &protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::scc_info_PerceptionObstacle.base,}};

static void InitDefaultsObstacleHistory() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_ObstacleHistory_default_instance_;
    new (ptr) ::apollo::prediction::ObstacleHistory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::ObstacleHistory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ObstacleHistory =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsObstacleHistory}, {
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_Feature.base,}};

static void InitDefaultsFrameEnv() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_FrameEnv_default_instance_;
    new (ptr) ::apollo::prediction::FrameEnv();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::FrameEnv::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FrameEnv =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFrameEnv}, {
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_ObstacleHistory.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Lane.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JunctionExit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JunctionFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObstaclePriority.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObstacleInteractiveTag.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Trajectory.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Feature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObstacleHistory.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FrameEnv.base);
}

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Lane, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Lane, current_lane_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Lane, lane_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Lane, nearby_lane_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Lane, lane_graph_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Lane, lane_graph_ordered_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Lane, label_update_time_delta_),
  ~0u,
  0,
  ~0u,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneFeature, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneFeature, lane_turn_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneFeature, lane_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneFeature, lane_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneFeature, angle_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneFeature, dist_to_left_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneFeature, dist_to_right_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneFeature, lane_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneFeature, lane_type_),
  0,
  7,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::JunctionExit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::JunctionExit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::JunctionExit, exit_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::JunctionExit, exit_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::JunctionExit, exit_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::JunctionExit, exit_width_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::JunctionFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::JunctionFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::JunctionFeature, junction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::JunctionFeature, junction_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::JunctionFeature, enter_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::JunctionFeature, junction_exit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::JunctionFeature, junction_mlp_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::JunctionFeature, junction_mlp_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::JunctionFeature, junction_mlp_probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::JunctionFeature, start_lane_id_),
  0,
  2,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::ObstaclePriority, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::ObstaclePriority, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::ObstaclePriority, priority_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::ObstacleInteractiveTag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::ObstacleInteractiveTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::ObstacleInteractiveTag, interactive_tag_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Trajectory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Trajectory, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Trajectory, trajectory_point_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, polygon_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, front_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, raw_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, velocity_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, tracking_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, junction_feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, t_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, t_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, t_velocity_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, t_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, t_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, t_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, is_still_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, label_update_time_delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, interactive_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, is_near_junction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, future_trajectory_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, short_term_predicted_trajectory_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, predicted_trajectory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, adc_trajectory_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, adc_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, adc_localization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, surrounding_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Feature, within_lane_id_),
  21,
  ~0u,
  0,
  9,
  1,
  10,
  2,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  23,
  3,
  8,
  4,
  5,
  24,
  25,
  6,
  26,
  29,
  22,
  27,
  7,
  11,
  30,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  28,
  12,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::ObstacleHistory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::ObstacleHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::ObstacleHistory, feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::ObstacleHistory, is_trainable_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::FrameEnv, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::FrameEnv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::FrameEnv, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::FrameEnv, ego_history_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::FrameEnv, obstacles_history_),
  1,
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::apollo::prediction::Lane)},
  { 17, 31, sizeof(::apollo::prediction::LaneFeature)},
  { 40, 49, sizeof(::apollo::prediction::JunctionExit)},
  { 53, 66, sizeof(::apollo::prediction::JunctionFeature)},
  { 74, 80, sizeof(::apollo::prediction::ObstaclePriority)},
  { 81, 87, sizeof(::apollo::prediction::ObstacleInteractiveTag)},
  { 88, 95, sizeof(::apollo::prediction::Trajectory)},
  { 97, 140, sizeof(::apollo::prediction::Feature)},
  { 178, 185, sizeof(::apollo::prediction::ObstacleHistory)},
  { 187, 195, sizeof(::apollo::prediction::FrameEnv)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_Lane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_LaneFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_JunctionExit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_JunctionFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_ObstaclePriority_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_ObstacleInteractiveTag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_Trajectory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_Feature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_ObstacleHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_FrameEnv_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/prediction/proto/feature.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n&modules/prediction/proto/feature.proto"
      "\022\021apollo.prediction\032#modules/common/prot"
      "o/geometry.proto\032$modules/common/proto/p"
      "nc_point.proto\032 modules/map/proto/map_la"
      "ne.proto\0322modules/perception/proto/perce"
      "ption_obstacle.proto\032)modules/prediction"
      "/proto/lane_graph.proto\032/modules/predict"
      "ion/proto/prediction_point.proto\"\304\002\n\004Lan"
      "e\022<\n\024current_lane_feature\030\001 \003(\0132\036.apollo"
      ".prediction.LaneFeature\0224\n\014lane_feature\030"
      "\002 \001(\0132\036.apollo.prediction.LaneFeature\022;\n"
      "\023nearby_lane_feature\030\003 \003(\0132\036.apollo.pred"
      "iction.LaneFeature\0220\n\nlane_graph\030\004 \001(\0132\034"
      ".apollo.prediction.LaneGraph\0228\n\022lane_gra"
      "ph_ordered\030\005 \001(\0132\034.apollo.prediction.Lan"
      "eGraph\022\037\n\027label_update_time_delta\030\032 \001(\001\""
      "\357\001\n\013LaneFeature\022\017\n\007lane_id\030\001 \001(\t\022\026\n\016lane"
      "_turn_type\030\002 \001(\r\022\016\n\006lane_s\030\003 \001(\001\022\016\n\006lane"
      "_l\030\004 \001(\001\022\022\n\nangle_diff\030\005 \001(\001\022\035\n\025dist_to_"
      "left_boundary\030\006 \001(\001\022\036\n\026dist_to_right_bou"
      "ndary\030\007 \001(\001\022\024\n\014lane_heading\030\010 \001(\001\022.\n\tlan"
      "e_type\030\t \001(\0162\033.apollo.hdmap.Lane.LaneTyp"
      "e\"}\n\014JunctionExit\022\024\n\014exit_lane_id\030\001 \001(\t\022"
      "-\n\rexit_position\030\002 \001(\0132\026.apollo.common.P"
      "oint3D\022\024\n\014exit_heading\030\003 \001(\001\022\022\n\nexit_wid"
      "th\030\004 \001(\001\"\235\002\n\017JunctionFeature\022\023\n\013junction"
      "_id\030\001 \001(\t\022\026\n\016junction_range\030\002 \001(\001\0222\n\nent"
      "er_lane\030\003 \001(\0132\036.apollo.prediction.LaneFe"
      "ature\0226\n\rjunction_exit\030\004 \003(\0132\037.apollo.pr"
      "ediction.JunctionExit\022\034\n\024junction_mlp_fe"
      "ature\030\005 \003(\001\022\032\n\022junction_mlp_label\030\006 \003(\005\022"
      " \n\030junction_mlp_probability\030\007 \003(\001\022\025\n\rsta"
      "rt_lane_id\030\010 \003(\t\"\213\001\n\020ObstaclePriority\022F\n"
      "\010priority\030\031 \001(\0162,.apollo.prediction.Obst"
      "aclePriority.Priority:\006NORMAL\"/\n\010Priorit"
      "y\022\013\n\007CAUTION\020\001\022\n\n\006NORMAL\020\002\022\n\n\006IGNORE\020\003\"\262"
      "\001\n\026ObstacleInteractiveTag\022a\n\017interactive"
      "_tag\030% \001(\01628.apollo.prediction.ObstacleI"
      "nteractiveTag.InteractiveTag:\016NONINTERAC"
      "TION\"5\n\016InteractiveTag\022\017\n\013INTERACTION\020\001\022"
      "\022\n\016NONINTERACTION\020\002\"[\n\nTrajectory\022\023\n\013pro"
      "bability\030\001 \001(\001\0228\n\020trajectory_point\030\002 \003(\013"
      "2\036.apollo.common.TrajectoryPoint\"\267\013\n\007Fea"
      "ture\022\n\n\002id\030\001 \001(\005\022-\n\rpolygon_point\030\036 \003(\0132"
      "\026.apollo.common.Point3D\022(\n\010position\030\002 \001("
      "\0132\026.apollo.common.Point3D\022.\n\016front_posit"
      "ion\030\033 \001(\0132\026.apollo.common.Point3D\022(\n\010vel"
      "ocity\030\003 \001(\0132\026.apollo.common.Point3D\022,\n\014r"
      "aw_velocity\030\034 \001(\0132\026.apollo.common.Point3"
      "D\022,\n\014acceleration\030\004 \001(\0132\026.apollo.common."
      "Point3D\022\030\n\020velocity_heading\030\005 \001(\001\022\r\n\005spe"
      "ed\030\006 \001(\001\022\013\n\003acc\030\007 \001(\001\022\r\n\005theta\030\010 \001(\001\022\016\n\006"
      "length\030\t \001(\001\022\r\n\005width\030\n \001(\001\022\016\n\006height\030\013 "
      "\001(\001\022\025\n\rtracking_time\030\014 \001(\001\022\021\n\ttimestamp\030"
      "\r \001(\001\022%\n\004lane\030\016 \001(\0132\027.apollo.prediction."
      "Lane\022<\n\020junction_feature\030\032 \001(\0132\".apollo."
      "prediction.JunctionFeature\022*\n\nt_position"
      "\030\020 \001(\0132\026.apollo.common.Point3D\022.\n\nt_velo"
      "city\030\021 \001(\0132\026.apollo.common.Point3DB\002\030\001\022\036"
      "\n\022t_velocity_heading\030\022 \001(\001B\002\030\001\022\023\n\007t_spee"
      "d\030\023 \001(\001B\002\030\001\0222\n\016t_acceleration\030\024 \001(\0132\026.ap"
      "ollo.common.Point3DB\002\030\001\022\021\n\005t_acc\030\025 \001(\001B\002"
      "\030\001\022\027\n\010is_still\030\026 \001(\010:\005false\0228\n\004type\030\027 \001("
      "\0162*.apollo.perception.PerceptionObstacle"
      ".Type\022\037\n\027label_update_time_delta\030\030 \001(\001\0225"
      "\n\010priority\030\031 \001(\0132#.apollo.prediction.Obs"
      "taclePriority\022B\n\017interactive_tag\030% \001(\0132)"
      ".apollo.prediction.ObstacleInteractiveTa"
      "g\022\037\n\020is_near_junction\030\035 \001(\010:\005false\022N\n\030fu"
      "ture_trajectory_points\030\037 \003(\0132,.apollo.pr"
      "ediction.PredictionTrajectoryPoint\022N\n&sh"
      "ort_term_predicted_trajectory_points\030  \003"
      "(\0132\036.apollo.common.TrajectoryPoint\022;\n\024pr"
      "edicted_trajectory\030! \003(\0132\035.apollo.predic"
      "tion.Trajectory\022<\n\024adc_trajectory_point\030"
      "\" \003(\0132\036.apollo.common.TrajectoryPoint\022\025\n"
      "\radc_timestamp\030& \001(\001\022\?\n\020adc_localization"
      "\030\' \001(\0132%.apollo.perception.PerceptionObs"
      "tacle\022\033\n\023surrounding_lane_id\030# \003(\t\022\026\n\016wi"
      "thin_lane_id\030$ \003(\t\"[\n\017ObstacleHistory\022+\n"
      "\007feature\030\001 \003(\0132\032.apollo.prediction.Featu"
      "re\022\033\n\014is_trainable\030\002 \001(\010:\005false\"\225\001\n\010Fram"
      "eEnv\022\021\n\ttimestamp\030\001 \001(\001\0227\n\013ego_history\030\002"
      " \001(\0132\".apollo.prediction.ObstacleHistory"
      "\022=\n\021obstacles_history\030\003 \003(\0132\".apollo.pre"
      "diction.ObstacleHistory"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3423);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/prediction/proto/feature.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::AddDescriptors();
  ::protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::AddDescriptors();
  ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::AddDescriptors();
  ::protobuf_modules_2fprediction_2fproto_2fprediction_5fpoint_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fprediction_2fproto_2ffeature_2eproto
namespace apollo {
namespace prediction {
const ::google::protobuf::EnumDescriptor* ObstaclePriority_Priority_descriptor() {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_enum_descriptors[0];
}
bool ObstaclePriority_Priority_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObstaclePriority_Priority ObstaclePriority::CAUTION;
const ObstaclePriority_Priority ObstaclePriority::NORMAL;
const ObstaclePriority_Priority ObstaclePriority::IGNORE;
const ObstaclePriority_Priority ObstaclePriority::Priority_MIN;
const ObstaclePriority_Priority ObstaclePriority::Priority_MAX;
const int ObstaclePriority::Priority_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ObstacleInteractiveTag_InteractiveTag_descriptor() {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_enum_descriptors[1];
}
bool ObstacleInteractiveTag_InteractiveTag_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag::INTERACTION;
const ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag::NONINTERACTION;
const ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag::InteractiveTag_MIN;
const ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag::InteractiveTag_MAX;
const int ObstacleInteractiveTag::InteractiveTag_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Lane::InitAsDefaultInstance() {
  ::apollo::prediction::_Lane_default_instance_._instance.get_mutable()->lane_feature_ = const_cast< ::apollo::prediction::LaneFeature*>(
      ::apollo::prediction::LaneFeature::internal_default_instance());
  ::apollo::prediction::_Lane_default_instance_._instance.get_mutable()->lane_graph_ = const_cast< ::apollo::prediction::LaneGraph*>(
      ::apollo::prediction::LaneGraph::internal_default_instance());
  ::apollo::prediction::_Lane_default_instance_._instance.get_mutable()->lane_graph_ordered_ = const_cast< ::apollo::prediction::LaneGraph*>(
      ::apollo::prediction::LaneGraph::internal_default_instance());
}
void Lane::clear_lane_graph() {
  if (lane_graph_ != NULL) lane_graph_->Clear();
  clear_has_lane_graph();
}
void Lane::clear_lane_graph_ordered() {
  if (lane_graph_ordered_ != NULL) lane_graph_ordered_->Clear();
  clear_has_lane_graph_ordered();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane::kCurrentLaneFeatureFieldNumber;
const int Lane::kLaneFeatureFieldNumber;
const int Lane::kNearbyLaneFeatureFieldNumber;
const int Lane::kLaneGraphFieldNumber;
const int Lane::kLaneGraphOrderedFieldNumber;
const int Lane::kLabelUpdateTimeDeltaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane::Lane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_Lane.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.Lane)
}
Lane::Lane(const Lane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      current_lane_feature_(from.current_lane_feature_),
      nearby_lane_feature_(from.nearby_lane_feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lane_feature()) {
    lane_feature_ = new ::apollo::prediction::LaneFeature(*from.lane_feature_);
  } else {
    lane_feature_ = NULL;
  }
  if (from.has_lane_graph()) {
    lane_graph_ = new ::apollo::prediction::LaneGraph(*from.lane_graph_);
  } else {
    lane_graph_ = NULL;
  }
  if (from.has_lane_graph_ordered()) {
    lane_graph_ordered_ = new ::apollo::prediction::LaneGraph(*from.lane_graph_ordered_);
  } else {
    lane_graph_ordered_ = NULL;
  }
  label_update_time_delta_ = from.label_update_time_delta_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Lane)
}

void Lane::SharedCtor() {
  ::memset(&lane_feature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&label_update_time_delta_) -
      reinterpret_cast<char*>(&lane_feature_)) + sizeof(label_update_time_delta_));
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Lane)
  SharedDtor();
}

void Lane::SharedDtor() {
  if (this != internal_default_instance()) delete lane_feature_;
  if (this != internal_default_instance()) delete lane_graph_;
  if (this != internal_default_instance()) delete lane_graph_ordered_;
}

void Lane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Lane::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lane& Lane::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_Lane.base);
  return *internal_default_instance();
}


void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_lane_feature_.Clear();
  nearby_lane_feature_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lane_feature_ != NULL);
      lane_feature_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lane_graph_ != NULL);
      lane_graph_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lane_graph_ordered_ != NULL);
      lane_graph_ordered_->Clear();
    }
  }
  label_update_time_delta_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Lane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.Lane)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.prediction.LaneFeature current_lane_feature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_current_lane_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.prediction.LaneFeature lane_feature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.prediction.LaneFeature nearby_lane_feature = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nearby_lane_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.prediction.LaneGraph lane_graph = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_graph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.prediction.LaneGraph lane_graph_ordered = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_graph_ordered()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double label_update_time_delta = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {
          set_has_label_update_time_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &label_update_time_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.Lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.Lane)
  return false;
#undef DO_
}

void Lane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.LaneFeature current_lane_feature = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->current_lane_feature_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->current_lane_feature(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.prediction.LaneFeature lane_feature = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_lane_feature(), output);
  }

  // repeated .apollo.prediction.LaneFeature nearby_lane_feature = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nearby_lane_feature_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->nearby_lane_feature(static_cast<int>(i)),
      output);
  }

  // optional .apollo.prediction.LaneGraph lane_graph = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_lane_graph(), output);
  }

  // optional .apollo.prediction.LaneGraph lane_graph_ordered = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_lane_graph_ordered(), output);
  }

  // optional double label_update_time_delta = 26;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->label_update_time_delta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.Lane)
}

::google::protobuf::uint8* Lane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.LaneFeature current_lane_feature = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->current_lane_feature_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->current_lane_feature(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.prediction.LaneFeature lane_feature = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_lane_feature(), deterministic, target);
  }

  // repeated .apollo.prediction.LaneFeature nearby_lane_feature = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nearby_lane_feature_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->nearby_lane_feature(static_cast<int>(i)), deterministic, target);
  }

  // optional .apollo.prediction.LaneGraph lane_graph = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_lane_graph(), deterministic, target);
  }

  // optional .apollo.prediction.LaneGraph lane_graph_ordered = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_lane_graph_ordered(), deterministic, target);
  }

  // optional double label_update_time_delta = 26;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->label_update_time_delta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Lane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.prediction.LaneFeature current_lane_feature = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->current_lane_feature_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->current_lane_feature(static_cast<int>(i)));
    }
  }

  // repeated .apollo.prediction.LaneFeature nearby_lane_feature = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->nearby_lane_feature_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nearby_lane_feature(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.prediction.LaneFeature lane_feature = 2;
    if (has_lane_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lane_feature_);
    }

    // optional .apollo.prediction.LaneGraph lane_graph = 4;
    if (has_lane_graph()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lane_graph_);
    }

    // optional .apollo.prediction.LaneGraph lane_graph_ordered = 5;
    if (has_lane_graph_ordered()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lane_graph_ordered_);
    }

    // optional double label_update_time_delta = 26;
    if (has_label_update_time_delta()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.Lane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.Lane)
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  current_lane_feature_.MergeFrom(from.current_lane_feature_);
  nearby_lane_feature_.MergeFrom(from.nearby_lane_feature_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_lane_feature()->::apollo::prediction::LaneFeature::MergeFrom(from.lane_feature());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lane_graph()->::apollo::prediction::LaneGraph::MergeFrom(from.lane_graph());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_lane_graph_ordered()->::apollo::prediction::LaneGraph::MergeFrom(from.lane_graph_ordered());
    }
    if (cached_has_bits & 0x00000008u) {
      label_update_time_delta_ = from.label_update_time_delta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Lane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::Swap(Lane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lane::InternalSwap(Lane* other) {
  using std::swap;
  CastToBase(&current_lane_feature_)->InternalSwap(CastToBase(&other->current_lane_feature_));
  CastToBase(&nearby_lane_feature_)->InternalSwap(CastToBase(&other->nearby_lane_feature_));
  swap(lane_feature_, other->lane_feature_);
  swap(lane_graph_, other->lane_graph_);
  swap(lane_graph_ordered_, other->lane_graph_ordered_);
  swap(label_update_time_delta_, other->label_update_time_delta_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Lane::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneFeature::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneFeature::kLaneIdFieldNumber;
const int LaneFeature::kLaneTurnTypeFieldNumber;
const int LaneFeature::kLaneSFieldNumber;
const int LaneFeature::kLaneLFieldNumber;
const int LaneFeature::kAngleDiffFieldNumber;
const int LaneFeature::kDistToLeftBoundaryFieldNumber;
const int LaneFeature::kDistToRightBoundaryFieldNumber;
const int LaneFeature::kLaneHeadingFieldNumber;
const int LaneFeature::kLaneTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneFeature::LaneFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_LaneFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.LaneFeature)
}
LaneFeature::LaneFeature(const LaneFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lane_id()) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&lane_s_, &from.lane_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_type_) -
    reinterpret_cast<char*>(&lane_s_)) + sizeof(lane_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneFeature)
}

void LaneFeature::SharedCtor() {
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lane_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_turn_type_) -
      reinterpret_cast<char*>(&lane_s_)) + sizeof(lane_turn_type_));
  lane_type_ = 1;
}

LaneFeature::~LaneFeature() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneFeature)
  SharedDtor();
}

void LaneFeature::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LaneFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneFeature::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneFeature& LaneFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_LaneFeature.base);
  return *internal_default_instance();
}


void LaneFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lane_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&lane_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lane_turn_type_) -
        reinterpret_cast<char*>(&lane_s_)) + sizeof(lane_turn_type_));
  }
  lane_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.LaneFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.prediction.LaneFeature.lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lane_turn_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_lane_turn_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_turn_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lane_s = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_lane_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lane_l = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_lane_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double angle_diff = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_angle_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dist_to_left_boundary = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_dist_to_left_boundary();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_to_left_boundary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dist_to_right_boundary = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_dist_to_right_boundary();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_to_right_boundary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lane_heading = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_lane_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.Lane.LaneType lane_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::hdmap::Lane_LaneType_IsValid(value)) {
            set_lane_type(static_cast< ::apollo::hdmap::Lane_LaneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.LaneFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.LaneFeature)
  return false;
#undef DO_
}

void LaneFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.LaneFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LaneFeature.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lane_id(), output);
  }

  // optional uint32 lane_turn_type = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lane_turn_type(), output);
  }

  // optional double lane_s = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lane_s(), output);
  }

  // optional double lane_l = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lane_l(), output);
  }

  // optional double angle_diff = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->angle_diff(), output);
  }

  // optional double dist_to_left_boundary = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->dist_to_left_boundary(), output);
  }

  // optional double dist_to_right_boundary = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->dist_to_right_boundary(), output);
  }

  // optional double lane_heading = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->lane_heading(), output);
  }

  // optional .apollo.hdmap.Lane.LaneType lane_type = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->lane_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.LaneFeature)
}

::google::protobuf::uint8* LaneFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LaneFeature.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lane_id(), target);
  }

  // optional uint32 lane_turn_type = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lane_turn_type(), target);
  }

  // optional double lane_s = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lane_s(), target);
  }

  // optional double lane_l = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lane_l(), target);
  }

  // optional double angle_diff = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->angle_diff(), target);
  }

  // optional double dist_to_left_boundary = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->dist_to_left_boundary(), target);
  }

  // optional double dist_to_right_boundary = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->dist_to_right_boundary(), target);
  }

  // optional double lane_heading = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->lane_heading(), target);
  }

  // optional .apollo.hdmap.Lane.LaneType lane_type = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->lane_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneFeature)
  return target;
}

size_t LaneFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string lane_id = 1;
    if (has_lane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lane_id());
    }

    // optional double lane_s = 3;
    if (has_lane_s()) {
      total_size += 1 + 8;
    }

    // optional double lane_l = 4;
    if (has_lane_l()) {
      total_size += 1 + 8;
    }

    // optional double angle_diff = 5;
    if (has_angle_diff()) {
      total_size += 1 + 8;
    }

    // optional double dist_to_left_boundary = 6;
    if (has_dist_to_left_boundary()) {
      total_size += 1 + 8;
    }

    // optional double dist_to_right_boundary = 7;
    if (has_dist_to_right_boundary()) {
      total_size += 1 + 8;
    }

    // optional double lane_heading = 8;
    if (has_lane_heading()) {
      total_size += 1 + 8;
    }

    // optional uint32 lane_turn_type = 2;
    if (has_lane_turn_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lane_turn_type());
    }

  }
  // optional .apollo.hdmap.Lane.LaneType lane_type = 9;
  if (has_lane_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->lane_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.LaneFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.LaneFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.LaneFeature)
    MergeFrom(*source);
  }
}

void LaneFeature::MergeFrom(const LaneFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_lane_id();
      lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      lane_s_ = from.lane_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      lane_l_ = from.lane_l_;
    }
    if (cached_has_bits & 0x00000008u) {
      angle_diff_ = from.angle_diff_;
    }
    if (cached_has_bits & 0x00000010u) {
      dist_to_left_boundary_ = from.dist_to_left_boundary_;
    }
    if (cached_has_bits & 0x00000020u) {
      dist_to_right_boundary_ = from.dist_to_right_boundary_;
    }
    if (cached_has_bits & 0x00000040u) {
      lane_heading_ = from.lane_heading_;
    }
    if (cached_has_bits & 0x00000080u) {
      lane_turn_type_ = from.lane_turn_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_lane_type(from.lane_type());
  }
}

void LaneFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.LaneFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneFeature::CopyFrom(const LaneFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneFeature::IsInitialized() const {
  return true;
}

void LaneFeature::Swap(LaneFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneFeature::InternalSwap(LaneFeature* other) {
  using std::swap;
  lane_id_.Swap(&other->lane_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lane_s_, other->lane_s_);
  swap(lane_l_, other->lane_l_);
  swap(angle_diff_, other->angle_diff_);
  swap(dist_to_left_boundary_, other->dist_to_left_boundary_);
  swap(dist_to_right_boundary_, other->dist_to_right_boundary_);
  swap(lane_heading_, other->lane_heading_);
  swap(lane_turn_type_, other->lane_turn_type_);
  swap(lane_type_, other->lane_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneFeature::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JunctionExit::InitAsDefaultInstance() {
  ::apollo::prediction::_JunctionExit_default_instance_._instance.get_mutable()->exit_position_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
}
void JunctionExit::clear_exit_position() {
  if (exit_position_ != NULL) exit_position_->Clear();
  clear_has_exit_position();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JunctionExit::kExitLaneIdFieldNumber;
const int JunctionExit::kExitPositionFieldNumber;
const int JunctionExit::kExitHeadingFieldNumber;
const int JunctionExit::kExitWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JunctionExit::JunctionExit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_JunctionExit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.JunctionExit)
}
JunctionExit::JunctionExit(const JunctionExit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exit_lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exit_lane_id()) {
    exit_lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exit_lane_id_);
  }
  if (from.has_exit_position()) {
    exit_position_ = new ::apollo::common::Point3D(*from.exit_position_);
  } else {
    exit_position_ = NULL;
  }
  ::memcpy(&exit_heading_, &from.exit_heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&exit_width_) -
    reinterpret_cast<char*>(&exit_heading_)) + sizeof(exit_width_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.JunctionExit)
}

void JunctionExit::SharedCtor() {
  exit_lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&exit_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exit_width_) -
      reinterpret_cast<char*>(&exit_position_)) + sizeof(exit_width_));
}

JunctionExit::~JunctionExit() {
  // @@protoc_insertion_point(destructor:apollo.prediction.JunctionExit)
  SharedDtor();
}

void JunctionExit::SharedDtor() {
  exit_lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete exit_position_;
}

void JunctionExit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JunctionExit::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JunctionExit& JunctionExit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_JunctionExit.base);
  return *internal_default_instance();
}


void JunctionExit::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.JunctionExit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      exit_lane_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(exit_position_ != NULL);
      exit_position_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&exit_heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exit_width_) -
        reinterpret_cast<char*>(&exit_heading_)) + sizeof(exit_width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool JunctionExit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.JunctionExit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string exit_lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exit_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exit_lane_id().data(), static_cast<int>(this->exit_lane_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.prediction.JunctionExit.exit_lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D exit_position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exit_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double exit_heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_exit_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exit_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double exit_width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_exit_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exit_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.JunctionExit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.JunctionExit)
  return false;
#undef DO_
}

void JunctionExit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.JunctionExit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string exit_lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exit_lane_id().data(), static_cast<int>(this->exit_lane_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.JunctionExit.exit_lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->exit_lane_id(), output);
  }

  // optional .apollo.common.Point3D exit_position = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_exit_position(), output);
  }

  // optional double exit_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->exit_heading(), output);
  }

  // optional double exit_width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->exit_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.JunctionExit)
}

::google::protobuf::uint8* JunctionExit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.JunctionExit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string exit_lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exit_lane_id().data(), static_cast<int>(this->exit_lane_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.JunctionExit.exit_lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->exit_lane_id(), target);
  }

  // optional .apollo.common.Point3D exit_position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_exit_position(), deterministic, target);
  }

  // optional double exit_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->exit_heading(), target);
  }

  // optional double exit_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->exit_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.JunctionExit)
  return target;
}

size_t JunctionExit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.JunctionExit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string exit_lane_id = 1;
    if (has_exit_lane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exit_lane_id());
    }

    // optional .apollo.common.Point3D exit_position = 2;
    if (has_exit_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *exit_position_);
    }

    // optional double exit_heading = 3;
    if (has_exit_heading()) {
      total_size += 1 + 8;
    }

    // optional double exit_width = 4;
    if (has_exit_width()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JunctionExit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.JunctionExit)
  GOOGLE_DCHECK_NE(&from, this);
  const JunctionExit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JunctionExit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.JunctionExit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.JunctionExit)
    MergeFrom(*source);
  }
}

void JunctionExit::MergeFrom(const JunctionExit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.JunctionExit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_exit_lane_id();
      exit_lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exit_lane_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_exit_position()->::apollo::common::Point3D::MergeFrom(from.exit_position());
    }
    if (cached_has_bits & 0x00000004u) {
      exit_heading_ = from.exit_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      exit_width_ = from.exit_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JunctionExit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.JunctionExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JunctionExit::CopyFrom(const JunctionExit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.JunctionExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunctionExit::IsInitialized() const {
  return true;
}

void JunctionExit::Swap(JunctionExit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JunctionExit::InternalSwap(JunctionExit* other) {
  using std::swap;
  exit_lane_id_.Swap(&other->exit_lane_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exit_position_, other->exit_position_);
  swap(exit_heading_, other->exit_heading_);
  swap(exit_width_, other->exit_width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JunctionExit::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JunctionFeature::InitAsDefaultInstance() {
  ::apollo::prediction::_JunctionFeature_default_instance_._instance.get_mutable()->enter_lane_ = const_cast< ::apollo::prediction::LaneFeature*>(
      ::apollo::prediction::LaneFeature::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JunctionFeature::kJunctionIdFieldNumber;
const int JunctionFeature::kJunctionRangeFieldNumber;
const int JunctionFeature::kEnterLaneFieldNumber;
const int JunctionFeature::kJunctionExitFieldNumber;
const int JunctionFeature::kJunctionMlpFeatureFieldNumber;
const int JunctionFeature::kJunctionMlpLabelFieldNumber;
const int JunctionFeature::kJunctionMlpProbabilityFieldNumber;
const int JunctionFeature::kStartLaneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JunctionFeature::JunctionFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_JunctionFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.JunctionFeature)
}
JunctionFeature::JunctionFeature(const JunctionFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      junction_exit_(from.junction_exit_),
      junction_mlp_feature_(from.junction_mlp_feature_),
      junction_mlp_label_(from.junction_mlp_label_),
      junction_mlp_probability_(from.junction_mlp_probability_),
      start_lane_id_(from.start_lane_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  junction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_junction_id()) {
    junction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.junction_id_);
  }
  if (from.has_enter_lane()) {
    enter_lane_ = new ::apollo::prediction::LaneFeature(*from.enter_lane_);
  } else {
    enter_lane_ = NULL;
  }
  junction_range_ = from.junction_range_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.JunctionFeature)
}

void JunctionFeature::SharedCtor() {
  junction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&enter_lane_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&junction_range_) -
      reinterpret_cast<char*>(&enter_lane_)) + sizeof(junction_range_));
}

JunctionFeature::~JunctionFeature() {
  // @@protoc_insertion_point(destructor:apollo.prediction.JunctionFeature)
  SharedDtor();
}

void JunctionFeature::SharedDtor() {
  junction_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete enter_lane_;
}

void JunctionFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JunctionFeature::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JunctionFeature& JunctionFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_JunctionFeature.base);
  return *internal_default_instance();
}


void JunctionFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.JunctionFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  junction_exit_.Clear();
  junction_mlp_feature_.Clear();
  junction_mlp_label_.Clear();
  junction_mlp_probability_.Clear();
  start_lane_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      junction_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(enter_lane_ != NULL);
      enter_lane_->Clear();
    }
  }
  junction_range_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool JunctionFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.JunctionFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string junction_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_junction_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->junction_id().data(), static_cast<int>(this->junction_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.prediction.JunctionFeature.junction_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double junction_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_junction_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &junction_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.prediction.LaneFeature enter_lane = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_enter_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.prediction.JunctionExit junction_exit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_junction_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double junction_mlp_feature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41u, input, this->mutable_junction_mlp_feature())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_junction_mlp_feature())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 junction_mlp_label = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_junction_mlp_label())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_junction_mlp_label())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double junction_mlp_probability = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57u, input, this->mutable_junction_mlp_probability())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_junction_mlp_probability())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string start_lane_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_start_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->start_lane_id(this->start_lane_id_size() - 1).data(),
            static_cast<int>(this->start_lane_id(this->start_lane_id_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.prediction.JunctionFeature.start_lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.JunctionFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.JunctionFeature)
  return false;
#undef DO_
}

void JunctionFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.JunctionFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string junction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->junction_id().data(), static_cast<int>(this->junction_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.JunctionFeature.junction_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->junction_id(), output);
  }

  // optional double junction_range = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->junction_range(), output);
  }

  // optional .apollo.prediction.LaneFeature enter_lane = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_enter_lane(), output);
  }

  // repeated .apollo.prediction.JunctionExit junction_exit = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->junction_exit_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->junction_exit(static_cast<int>(i)),
      output);
  }

  // repeated double junction_mlp_feature = 5;
  for (int i = 0, n = this->junction_mlp_feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->junction_mlp_feature(i), output);
  }

  // repeated int32 junction_mlp_label = 6;
  for (int i = 0, n = this->junction_mlp_label_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->junction_mlp_label(i), output);
  }

  // repeated double junction_mlp_probability = 7;
  for (int i = 0, n = this->junction_mlp_probability_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->junction_mlp_probability(i), output);
  }

  // repeated string start_lane_id = 8;
  for (int i = 0, n = this->start_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_lane_id(i).data(), static_cast<int>(this->start_lane_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.JunctionFeature.start_lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->start_lane_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.JunctionFeature)
}

::google::protobuf::uint8* JunctionFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.JunctionFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string junction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->junction_id().data(), static_cast<int>(this->junction_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.JunctionFeature.junction_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->junction_id(), target);
  }

  // optional double junction_range = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->junction_range(), target);
  }

  // optional .apollo.prediction.LaneFeature enter_lane = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_enter_lane(), deterministic, target);
  }

  // repeated .apollo.prediction.JunctionExit junction_exit = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->junction_exit_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->junction_exit(static_cast<int>(i)), deterministic, target);
  }

  // repeated double junction_mlp_feature = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(5, this->junction_mlp_feature_, target);

  // repeated int32 junction_mlp_label = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(6, this->junction_mlp_label_, target);

  // repeated double junction_mlp_probability = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(7, this->junction_mlp_probability_, target);

  // repeated string start_lane_id = 8;
  for (int i = 0, n = this->start_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->start_lane_id(i).data(), static_cast<int>(this->start_lane_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.JunctionFeature.start_lane_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->start_lane_id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.JunctionFeature)
  return target;
}

size_t JunctionFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.JunctionFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.prediction.JunctionExit junction_exit = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->junction_exit_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->junction_exit(static_cast<int>(i)));
    }
  }

  // repeated double junction_mlp_feature = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->junction_mlp_feature_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->junction_mlp_feature_size());
    total_size += data_size;
  }

  // repeated int32 junction_mlp_label = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->junction_mlp_label_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->junction_mlp_label_size());
    total_size += data_size;
  }

  // repeated double junction_mlp_probability = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->junction_mlp_probability_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->junction_mlp_probability_size());
    total_size += data_size;
  }

  // repeated string start_lane_id = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->start_lane_id_size());
  for (int i = 0, n = this->start_lane_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->start_lane_id(i));
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string junction_id = 1;
    if (has_junction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->junction_id());
    }

    // optional .apollo.prediction.LaneFeature enter_lane = 3;
    if (has_enter_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *enter_lane_);
    }

    // optional double junction_range = 2;
    if (has_junction_range()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JunctionFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.JunctionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const JunctionFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JunctionFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.JunctionFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.JunctionFeature)
    MergeFrom(*source);
  }
}

void JunctionFeature::MergeFrom(const JunctionFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.JunctionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  junction_exit_.MergeFrom(from.junction_exit_);
  junction_mlp_feature_.MergeFrom(from.junction_mlp_feature_);
  junction_mlp_label_.MergeFrom(from.junction_mlp_label_);
  junction_mlp_probability_.MergeFrom(from.junction_mlp_probability_);
  start_lane_id_.MergeFrom(from.start_lane_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_junction_id();
      junction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.junction_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_enter_lane()->::apollo::prediction::LaneFeature::MergeFrom(from.enter_lane());
    }
    if (cached_has_bits & 0x00000004u) {
      junction_range_ = from.junction_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void JunctionFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.JunctionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JunctionFeature::CopyFrom(const JunctionFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.JunctionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunctionFeature::IsInitialized() const {
  return true;
}

void JunctionFeature::Swap(JunctionFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JunctionFeature::InternalSwap(JunctionFeature* other) {
  using std::swap;
  CastToBase(&junction_exit_)->InternalSwap(CastToBase(&other->junction_exit_));
  junction_mlp_feature_.InternalSwap(&other->junction_mlp_feature_);
  junction_mlp_label_.InternalSwap(&other->junction_mlp_label_);
  junction_mlp_probability_.InternalSwap(&other->junction_mlp_probability_);
  start_lane_id_.InternalSwap(CastToBase(&other->start_lane_id_));
  junction_id_.Swap(&other->junction_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(enter_lane_, other->enter_lane_);
  swap(junction_range_, other->junction_range_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JunctionFeature::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObstaclePriority::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstaclePriority::kPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstaclePriority::ObstaclePriority()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_ObstaclePriority.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.ObstaclePriority)
}
ObstaclePriority::ObstaclePriority(const ObstaclePriority& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ObstaclePriority)
}

void ObstaclePriority::SharedCtor() {
  priority_ = 2;
}

ObstaclePriority::~ObstaclePriority() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ObstaclePriority)
  SharedDtor();
}

void ObstaclePriority::SharedDtor() {
}

void ObstaclePriority::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ObstaclePriority::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstaclePriority& ObstaclePriority::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_ObstaclePriority.base);
  return *internal_default_instance();
}


void ObstaclePriority::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ObstaclePriority)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  priority_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObstaclePriority::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.ObstaclePriority)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::prediction::ObstaclePriority_Priority_IsValid(value)) {
            set_priority(static_cast< ::apollo::prediction::ObstaclePriority_Priority >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                25, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.ObstaclePriority)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.ObstaclePriority)
  return false;
#undef DO_
}

void ObstaclePriority::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.ObstaclePriority)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.ObstaclePriority)
}

::google::protobuf::uint8* ObstaclePriority::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ObstaclePriority)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ObstaclePriority)
  return target;
}

size_t ObstaclePriority::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ObstaclePriority)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .apollo.prediction.ObstaclePriority.Priority priority = 25 [default = NORMAL];
  if (has_priority()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstaclePriority::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.ObstaclePriority)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstaclePriority* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstaclePriority>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.ObstaclePriority)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.ObstaclePriority)
    MergeFrom(*source);
  }
}

void ObstaclePriority::MergeFrom(const ObstaclePriority& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ObstaclePriority)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_priority()) {
    set_priority(from.priority());
  }
}

void ObstaclePriority::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.ObstaclePriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstaclePriority::CopyFrom(const ObstaclePriority& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ObstaclePriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstaclePriority::IsInitialized() const {
  return true;
}

void ObstaclePriority::Swap(ObstaclePriority* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstaclePriority::InternalSwap(ObstaclePriority* other) {
  using std::swap;
  swap(priority_, other->priority_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ObstaclePriority::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObstacleInteractiveTag::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleInteractiveTag::kInteractiveTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleInteractiveTag::ObstacleInteractiveTag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_ObstacleInteractiveTag.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.ObstacleInteractiveTag)
}
ObstacleInteractiveTag::ObstacleInteractiveTag(const ObstacleInteractiveTag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  interactive_tag_ = from.interactive_tag_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ObstacleInteractiveTag)
}

void ObstacleInteractiveTag::SharedCtor() {
  interactive_tag_ = 2;
}

ObstacleInteractiveTag::~ObstacleInteractiveTag() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ObstacleInteractiveTag)
  SharedDtor();
}

void ObstacleInteractiveTag::SharedDtor() {
}

void ObstacleInteractiveTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ObstacleInteractiveTag::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleInteractiveTag& ObstacleInteractiveTag::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_ObstacleInteractiveTag.base);
  return *internal_default_instance();
}


void ObstacleInteractiveTag::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ObstacleInteractiveTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interactive_tag_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObstacleInteractiveTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.ObstacleInteractiveTag)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 37 [default = NONINTERACTION];
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::prediction::ObstacleInteractiveTag_InteractiveTag_IsValid(value)) {
            set_interactive_tag(static_cast< ::apollo::prediction::ObstacleInteractiveTag_InteractiveTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                37, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.ObstacleInteractiveTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.ObstacleInteractiveTag)
  return false;
#undef DO_
}

void ObstacleInteractiveTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.ObstacleInteractiveTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 37 [default = NONINTERACTION];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->interactive_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.ObstacleInteractiveTag)
}

::google::protobuf::uint8* ObstacleInteractiveTag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ObstacleInteractiveTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 37 [default = NONINTERACTION];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->interactive_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ObstacleInteractiveTag)
  return target;
}

size_t ObstacleInteractiveTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ObstacleInteractiveTag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .apollo.prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 37 [default = NONINTERACTION];
  if (has_interactive_tag()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->interactive_tag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleInteractiveTag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.ObstacleInteractiveTag)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleInteractiveTag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleInteractiveTag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.ObstacleInteractiveTag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.ObstacleInteractiveTag)
    MergeFrom(*source);
  }
}

void ObstacleInteractiveTag::MergeFrom(const ObstacleInteractiveTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ObstacleInteractiveTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_interactive_tag()) {
    set_interactive_tag(from.interactive_tag());
  }
}

void ObstacleInteractiveTag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.ObstacleInteractiveTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleInteractiveTag::CopyFrom(const ObstacleInteractiveTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ObstacleInteractiveTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleInteractiveTag::IsInitialized() const {
  return true;
}

void ObstacleInteractiveTag::Swap(ObstacleInteractiveTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleInteractiveTag::InternalSwap(ObstacleInteractiveTag* other) {
  using std::swap;
  swap(interactive_tag_, other->interactive_tag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ObstacleInteractiveTag::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Trajectory::InitAsDefaultInstance() {
}
void Trajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory::kProbabilityFieldNumber;
const int Trajectory::kTrajectoryPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory::Trajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_Trajectory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      trajectory_point_(from.trajectory_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Trajectory)
}

void Trajectory::SharedCtor() {
  probability_ = 0;
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
}

void Trajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Trajectory::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Trajectory& Trajectory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_Trajectory.base);
  return *internal_default_instance();
}


void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_point_.Clear();
  probability_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.Trajectory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double probability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.Trajectory)
  return false;
#undef DO_
}

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->trajectory_point(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.Trajectory)
}

::google::protobuf::uint8* Trajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double probability = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->trajectory_point(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Trajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.common.TrajectoryPoint trajectory_point = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectory_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trajectory_point(static_cast<int>(i)));
    }
  }

  // optional double probability = 1;
  if (has_probability()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.Trajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  if (from.has_probability()) {
    set_probability(from.probability());
  }
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  CastToBase(&trajectory_point_)->InternalSwap(CastToBase(&other->trajectory_point_));
  swap(probability_, other->probability_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Feature::InitAsDefaultInstance() {
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->position_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->front_position_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->raw_velocity_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->lane_ = const_cast< ::apollo::prediction::Lane*>(
      ::apollo::prediction::Lane::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->junction_feature_ = const_cast< ::apollo::prediction::JunctionFeature*>(
      ::apollo::prediction::JunctionFeature::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->t_position_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->t_velocity_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->t_acceleration_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->priority_ = const_cast< ::apollo::prediction::ObstaclePriority*>(
      ::apollo::prediction::ObstaclePriority::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->interactive_tag_ = const_cast< ::apollo::prediction::ObstacleInteractiveTag*>(
      ::apollo::prediction::ObstacleInteractiveTag::internal_default_instance());
  ::apollo::prediction::_Feature_default_instance_._instance.get_mutable()->adc_localization_ = const_cast< ::apollo::perception::PerceptionObstacle*>(
      ::apollo::perception::PerceptionObstacle::internal_default_instance());
}
void Feature::clear_polygon_point() {
  polygon_point_.Clear();
}
void Feature::clear_position() {
  if (position_ != NULL) position_->Clear();
  clear_has_position();
}
void Feature::clear_front_position() {
  if (front_position_ != NULL) front_position_->Clear();
  clear_has_front_position();
}
void Feature::clear_velocity() {
  if (velocity_ != NULL) velocity_->Clear();
  clear_has_velocity();
}
void Feature::clear_raw_velocity() {
  if (raw_velocity_ != NULL) raw_velocity_->Clear();
  clear_has_raw_velocity();
}
void Feature::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->Clear();
  clear_has_acceleration();
}
void Feature::clear_t_position() {
  if (t_position_ != NULL) t_position_->Clear();
  clear_has_t_position();
}
void Feature::clear_t_velocity() {
  if (t_velocity_ != NULL) t_velocity_->Clear();
  clear_has_t_velocity();
}
void Feature::clear_t_acceleration() {
  if (t_acceleration_ != NULL) t_acceleration_->Clear();
  clear_has_t_acceleration();
}
void Feature::clear_future_trajectory_points() {
  future_trajectory_points_.Clear();
}
void Feature::clear_short_term_predicted_trajectory_points() {
  short_term_predicted_trajectory_points_.Clear();
}
void Feature::clear_adc_trajectory_point() {
  adc_trajectory_point_.Clear();
}
void Feature::clear_adc_localization() {
  if (adc_localization_ != NULL) adc_localization_->Clear();
  clear_has_adc_localization();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Feature::kIdFieldNumber;
const int Feature::kPolygonPointFieldNumber;
const int Feature::kPositionFieldNumber;
const int Feature::kFrontPositionFieldNumber;
const int Feature::kVelocityFieldNumber;
const int Feature::kRawVelocityFieldNumber;
const int Feature::kAccelerationFieldNumber;
const int Feature::kVelocityHeadingFieldNumber;
const int Feature::kSpeedFieldNumber;
const int Feature::kAccFieldNumber;
const int Feature::kThetaFieldNumber;
const int Feature::kLengthFieldNumber;
const int Feature::kWidthFieldNumber;
const int Feature::kHeightFieldNumber;
const int Feature::kTrackingTimeFieldNumber;
const int Feature::kTimestampFieldNumber;
const int Feature::kLaneFieldNumber;
const int Feature::kJunctionFeatureFieldNumber;
const int Feature::kTPositionFieldNumber;
const int Feature::kTVelocityFieldNumber;
const int Feature::kTVelocityHeadingFieldNumber;
const int Feature::kTSpeedFieldNumber;
const int Feature::kTAccelerationFieldNumber;
const int Feature::kTAccFieldNumber;
const int Feature::kIsStillFieldNumber;
const int Feature::kTypeFieldNumber;
const int Feature::kLabelUpdateTimeDeltaFieldNumber;
const int Feature::kPriorityFieldNumber;
const int Feature::kInteractiveTagFieldNumber;
const int Feature::kIsNearJunctionFieldNumber;
const int Feature::kFutureTrajectoryPointsFieldNumber;
const int Feature::kShortTermPredictedTrajectoryPointsFieldNumber;
const int Feature::kPredictedTrajectoryFieldNumber;
const int Feature::kAdcTrajectoryPointFieldNumber;
const int Feature::kAdcTimestampFieldNumber;
const int Feature::kAdcLocalizationFieldNumber;
const int Feature::kSurroundingLaneIdFieldNumber;
const int Feature::kWithinLaneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Feature::Feature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_Feature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.Feature)
}
Feature::Feature(const Feature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      polygon_point_(from.polygon_point_),
      future_trajectory_points_(from.future_trajectory_points_),
      short_term_predicted_trajectory_points_(from.short_term_predicted_trajectory_points_),
      predicted_trajectory_(from.predicted_trajectory_),
      adc_trajectory_point_(from.adc_trajectory_point_),
      surrounding_lane_id_(from.surrounding_lane_id_),
      within_lane_id_(from.within_lane_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::apollo::common::Point3D(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::apollo::common::Point3D(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::apollo::common::Point3D(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  if (from.has_lane()) {
    lane_ = new ::apollo::prediction::Lane(*from.lane_);
  } else {
    lane_ = NULL;
  }
  if (from.has_t_position()) {
    t_position_ = new ::apollo::common::Point3D(*from.t_position_);
  } else {
    t_position_ = NULL;
  }
  if (from.has_t_velocity()) {
    t_velocity_ = new ::apollo::common::Point3D(*from.t_velocity_);
  } else {
    t_velocity_ = NULL;
  }
  if (from.has_t_acceleration()) {
    t_acceleration_ = new ::apollo::common::Point3D(*from.t_acceleration_);
  } else {
    t_acceleration_ = NULL;
  }
  if (from.has_priority()) {
    priority_ = new ::apollo::prediction::ObstaclePriority(*from.priority_);
  } else {
    priority_ = NULL;
  }
  if (from.has_junction_feature()) {
    junction_feature_ = new ::apollo::prediction::JunctionFeature(*from.junction_feature_);
  } else {
    junction_feature_ = NULL;
  }
  if (from.has_front_position()) {
    front_position_ = new ::apollo::common::Point3D(*from.front_position_);
  } else {
    front_position_ = NULL;
  }
  if (from.has_raw_velocity()) {
    raw_velocity_ = new ::apollo::common::Point3D(*from.raw_velocity_);
  } else {
    raw_velocity_ = NULL;
  }
  if (from.has_interactive_tag()) {
    interactive_tag_ = new ::apollo::prediction::ObstacleInteractiveTag(*from.interactive_tag_);
  } else {
    interactive_tag_ = NULL;
  }
  if (from.has_adc_localization()) {
    adc_localization_ = new ::apollo::perception::PerceptionObstacle(*from.adc_localization_);
  } else {
    adc_localization_ = NULL;
  }
  ::memcpy(&velocity_heading_, &from.velocity_heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_near_junction_) -
    reinterpret_cast<char*>(&velocity_heading_)) + sizeof(is_near_junction_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Feature)
}

void Feature::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_near_junction_) -
      reinterpret_cast<char*>(&position_)) + sizeof(is_near_junction_));
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Feature)
  SharedDtor();
}

void Feature::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete lane_;
  if (this != internal_default_instance()) delete t_position_;
  if (this != internal_default_instance()) delete t_velocity_;
  if (this != internal_default_instance()) delete t_acceleration_;
  if (this != internal_default_instance()) delete priority_;
  if (this != internal_default_instance()) delete junction_feature_;
  if (this != internal_default_instance()) delete front_position_;
  if (this != internal_default_instance()) delete raw_velocity_;
  if (this != internal_default_instance()) delete interactive_tag_;
  if (this != internal_default_instance()) delete adc_localization_;
}

void Feature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Feature::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Feature& Feature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_Feature.base);
  return *internal_default_instance();
}


void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_point_.Clear();
  future_trajectory_points_.Clear();
  short_term_predicted_trajectory_points_.Clear();
  predicted_trajectory_.Clear();
  adc_trajectory_point_.Clear();
  surrounding_lane_id_.Clear();
  within_lane_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(acceleration_ != NULL);
      acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(lane_ != NULL);
      lane_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(t_position_ != NULL);
      t_position_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(t_velocity_ != NULL);
      t_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(t_acceleration_ != NULL);
      t_acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(priority_ != NULL);
      priority_->Clear();
    }
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(junction_feature_ != NULL);
      junction_feature_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(front_position_ != NULL);
      front_position_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(raw_velocity_ != NULL);
      raw_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(interactive_tag_ != NULL);
      interactive_tag_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(adc_localization_ != NULL);
      adc_localization_->Clear();
    }
  }
  if (cached_has_bits & 57344u) {
    ::memset(&velocity_heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acc_) -
        reinterpret_cast<char*>(&velocity_heading_)) + sizeof(acc_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&theta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&theta_)) + sizeof(timestamp_));
  }
  if (cached_has_bits & 2130706432u) {
    ::memset(&t_velocity_heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_near_junction_) -
        reinterpret_cast<char*>(&t_velocity_heading_)) + sizeof(is_near_junction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Feature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.Feature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D acceleration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double velocity_heading = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_velocity_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_acc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tracking_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {
          set_has_tracking_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timestamp = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.prediction.Lane lane = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D t_position = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_t_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D t_velocity = 17 [deprecated = true];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_t_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double t_velocity_heading = 18 [deprecated = true];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_t_velocity_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_velocity_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double t_speed = 19 [deprecated = true];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {
          set_has_t_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D t_acceleration = 20 [deprecated = true];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_t_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double t_acc = 21 [deprecated = true];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {
          set_has_t_acc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_still = 22 [default = false];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_is_still();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_still_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.PerceptionObstacle.Type type = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::PerceptionObstacle_Type_IsValid(value)) {
            set_type(static_cast< ::apollo::perception::PerceptionObstacle_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                23, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double label_update_time_delta = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {
          set_has_label_update_time_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &label_update_time_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.prediction.ObstaclePriority priority = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_priority()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.prediction.JunctionFeature junction_feature = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 210 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_junction_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D front_position = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 218 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_front_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Point3D raw_velocity = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 226 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_raw_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_near_junction = 29 [default = false];
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_is_near_junction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_near_junction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.Point3D polygon_point = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 242 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_polygon_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.prediction.PredictionTrajectoryPoint future_trajectory_points = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 250 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_future_trajectory_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.TrajectoryPoint short_term_predicted_trajectory_points = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_short_term_predicted_trajectory_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.prediction.Trajectory predicted_trajectory = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 266 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_predicted_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.TrajectoryPoint adc_trajectory_point = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_adc_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string surrounding_lane_id = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_surrounding_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->surrounding_lane_id(this->surrounding_lane_id_size() - 1).data(),
            static_cast<int>(this->surrounding_lane_id(this->surrounding_lane_id_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.prediction.Feature.surrounding_lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string within_lane_id = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_within_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->within_lane_id(this->within_lane_id_size() - 1).data(),
            static_cast<int>(this->within_lane_id(this->within_lane_id_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.prediction.Feature.within_lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 298 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interactive_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double adc_timestamp = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 305 & 0xFF */)) {
          set_has_adc_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adc_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.PerceptionObstacle adc_localization = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 314 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_adc_localization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.Feature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.Feature)
  return false;
#undef DO_
}

void Feature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .apollo.common.Point3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_position(), output);
  }

  // optional .apollo.common.Point3D velocity = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_velocity(), output);
  }

  // optional .apollo.common.Point3D acceleration = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_acceleration(), output);
  }

  // optional double velocity_heading = 5;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->velocity_heading(), output);
  }

  // optional double speed = 6;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->speed(), output);
  }

  // optional double acc = 7;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->acc(), output);
  }

  // optional double theta = 8;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->theta(), output);
  }

  // optional double length = 9;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->length(), output);
  }

  // optional double width = 10;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->width(), output);
  }

  // optional double height = 11;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->height(), output);
  }

  // optional double tracking_time = 12;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->tracking_time(), output);
  }

  // optional double timestamp = 13;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->timestamp(), output);
  }

  // optional .apollo.prediction.Lane lane = 14;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_lane(), output);
  }

  // optional .apollo.common.Point3D t_position = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_t_position(), output);
  }

  // optional .apollo.common.Point3D t_velocity = 17 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_t_velocity(), output);
  }

  // optional double t_velocity_heading = 18 [deprecated = true];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->t_velocity_heading(), output);
  }

  // optional double t_speed = 19 [deprecated = true];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->t_speed(), output);
  }

  // optional .apollo.common.Point3D t_acceleration = 20 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_t_acceleration(), output);
  }

  // optional double t_acc = 21 [deprecated = true];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->t_acc(), output);
  }

  // optional bool is_still = 22 [default = false];
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->is_still(), output);
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->type(), output);
  }

  // optional double label_update_time_delta = 24;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->label_update_time_delta(), output);
  }

  // optional .apollo.prediction.ObstaclePriority priority = 25;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->_internal_priority(), output);
  }

  // optional .apollo.prediction.JunctionFeature junction_feature = 26;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->_internal_junction_feature(), output);
  }

  // optional .apollo.common.Point3D front_position = 27;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->_internal_front_position(), output);
  }

  // optional .apollo.common.Point3D raw_velocity = 28;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->_internal_raw_velocity(), output);
  }

  // optional bool is_near_junction = 29 [default = false];
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->is_near_junction(), output);
  }

  // repeated .apollo.common.Point3D polygon_point = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30,
      this->polygon_point(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.prediction.PredictionTrajectoryPoint future_trajectory_points = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->future_trajectory_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31,
      this->future_trajectory_points(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.common.TrajectoryPoint short_term_predicted_trajectory_points = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->short_term_predicted_trajectory_points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32,
      this->short_term_predicted_trajectory_points(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.prediction.Trajectory predicted_trajectory = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predicted_trajectory_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33,
      this->predicted_trajectory(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.common.TrajectoryPoint adc_trajectory_point = 34;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->adc_trajectory_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34,
      this->adc_trajectory_point(static_cast<int>(i)),
      output);
  }

  // repeated string surrounding_lane_id = 35;
  for (int i = 0, n = this->surrounding_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->surrounding_lane_id(i).data(), static_cast<int>(this->surrounding_lane_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.Feature.surrounding_lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->surrounding_lane_id(i), output);
  }

  // repeated string within_lane_id = 36;
  for (int i = 0, n = this->within_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->within_lane_id(i).data(), static_cast<int>(this->within_lane_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.Feature.within_lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->within_lane_id(i), output);
  }

  // optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 37;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->_internal_interactive_tag(), output);
  }

  // optional double adc_timestamp = 38;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->adc_timestamp(), output);
  }

  // optional .apollo.perception.PerceptionObstacle adc_localization = 39;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->_internal_adc_localization(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.Feature)
}

::google::protobuf::uint8* Feature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Feature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .apollo.common.Point3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_position(), deterministic, target);
  }

  // optional .apollo.common.Point3D velocity = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_velocity(), deterministic, target);
  }

  // optional .apollo.common.Point3D acceleration = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_acceleration(), deterministic, target);
  }

  // optional double velocity_heading = 5;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->velocity_heading(), target);
  }

  // optional double speed = 6;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->speed(), target);
  }

  // optional double acc = 7;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->acc(), target);
  }

  // optional double theta = 8;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->theta(), target);
  }

  // optional double length = 9;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->length(), target);
  }

  // optional double width = 10;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->width(), target);
  }

  // optional double height = 11;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->height(), target);
  }

  // optional double tracking_time = 12;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->tracking_time(), target);
  }

  // optional double timestamp = 13;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->timestamp(), target);
  }

  // optional .apollo.prediction.Lane lane = 14;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_lane(), deterministic, target);
  }

  // optional .apollo.common.Point3D t_position = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_t_position(), deterministic, target);
  }

  // optional .apollo.common.Point3D t_velocity = 17 [deprecated = true];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_t_velocity(), deterministic, target);
  }

  // optional double t_velocity_heading = 18 [deprecated = true];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->t_velocity_heading(), target);
  }

  // optional double t_speed = 19 [deprecated = true];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->t_speed(), target);
  }

  // optional .apollo.common.Point3D t_acceleration = 20 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_t_acceleration(), deterministic, target);
  }

  // optional double t_acc = 21 [deprecated = true];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->t_acc(), target);
  }

  // optional bool is_still = 22 [default = false];
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->is_still(), target);
  }

  // optional .apollo.perception.PerceptionObstacle.Type type = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->type(), target);
  }

  // optional double label_update_time_delta = 24;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->label_update_time_delta(), target);
  }

  // optional .apollo.prediction.ObstaclePriority priority = 25;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->_internal_priority(), deterministic, target);
  }

  // optional .apollo.prediction.JunctionFeature junction_feature = 26;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, this->_internal_junction_feature(), deterministic, target);
  }

  // optional .apollo.common.Point3D front_position = 27;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, this->_internal_front_position(), deterministic, target);
  }

  // optional .apollo.common.Point3D raw_velocity = 28;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, this->_internal_raw_velocity(), deterministic, target);
  }

  // optional bool is_near_junction = 29 [default = false];
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->is_near_junction(), target);
  }

  // repeated .apollo.common.Point3D polygon_point = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, this->polygon_point(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.prediction.PredictionTrajectoryPoint future_trajectory_points = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->future_trajectory_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, this->future_trajectory_points(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.common.TrajectoryPoint short_term_predicted_trajectory_points = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->short_term_predicted_trajectory_points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, this->short_term_predicted_trajectory_points(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.prediction.Trajectory predicted_trajectory = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predicted_trajectory_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        33, this->predicted_trajectory(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.common.TrajectoryPoint adc_trajectory_point = 34;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->adc_trajectory_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        34, this->adc_trajectory_point(static_cast<int>(i)), deterministic, target);
  }

  // repeated string surrounding_lane_id = 35;
  for (int i = 0, n = this->surrounding_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->surrounding_lane_id(i).data(), static_cast<int>(this->surrounding_lane_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.Feature.surrounding_lane_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(35, this->surrounding_lane_id(i), target);
  }

  // repeated string within_lane_id = 36;
  for (int i = 0, n = this->within_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->within_lane_id(i).data(), static_cast<int>(this->within_lane_id(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.Feature.within_lane_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(36, this->within_lane_id(i), target);
  }

  // optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 37;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        37, this->_internal_interactive_tag(), deterministic, target);
  }

  // optional double adc_timestamp = 38;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->adc_timestamp(), target);
  }

  // optional .apollo.perception.PerceptionObstacle adc_localization = 39;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        39, this->_internal_adc_localization(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Feature)
  return target;
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Feature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.common.Point3D polygon_point = 30;
  {
    unsigned int count = static_cast<unsigned int>(this->polygon_point_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->polygon_point(static_cast<int>(i)));
    }
  }

  // repeated .apollo.prediction.PredictionTrajectoryPoint future_trajectory_points = 31;
  {
    unsigned int count = static_cast<unsigned int>(this->future_trajectory_points_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->future_trajectory_points(static_cast<int>(i)));
    }
  }

  // repeated .apollo.common.TrajectoryPoint short_term_predicted_trajectory_points = 32;
  {
    unsigned int count = static_cast<unsigned int>(this->short_term_predicted_trajectory_points_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->short_term_predicted_trajectory_points(static_cast<int>(i)));
    }
  }

  // repeated .apollo.prediction.Trajectory predicted_trajectory = 33;
  {
    unsigned int count = static_cast<unsigned int>(this->predicted_trajectory_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->predicted_trajectory(static_cast<int>(i)));
    }
  }

  // repeated .apollo.common.TrajectoryPoint adc_trajectory_point = 34;
  {
    unsigned int count = static_cast<unsigned int>(this->adc_trajectory_point_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->adc_trajectory_point(static_cast<int>(i)));
    }
  }

  // repeated string surrounding_lane_id = 35;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->surrounding_lane_id_size());
  for (int i = 0, n = this->surrounding_lane_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->surrounding_lane_id(i));
  }

  // repeated string within_lane_id = 36;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->within_lane_id_size());
  for (int i = 0, n = this->within_lane_id_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->within_lane_id(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.Point3D position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .apollo.common.Point3D velocity = 3;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional .apollo.common.Point3D acceleration = 4;
    if (has_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *acceleration_);
    }

    // optional .apollo.prediction.Lane lane = 14;
    if (has_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *lane_);
    }

    // optional .apollo.common.Point3D t_position = 16;
    if (has_t_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *t_position_);
    }

    // optional .apollo.common.Point3D t_velocity = 17 [deprecated = true];
    if (has_t_velocity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *t_velocity_);
    }

    // optional .apollo.common.Point3D t_acceleration = 20 [deprecated = true];
    if (has_t_acceleration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *t_acceleration_);
    }

    // optional .apollo.prediction.ObstaclePriority priority = 25;
    if (has_priority()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *priority_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .apollo.prediction.JunctionFeature junction_feature = 26;
    if (has_junction_feature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *junction_feature_);
    }

    // optional .apollo.common.Point3D front_position = 27;
    if (has_front_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *front_position_);
    }

    // optional .apollo.common.Point3D raw_velocity = 28;
    if (has_raw_velocity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *raw_velocity_);
    }

    // optional .apollo.prediction.ObstacleInteractiveTag interactive_tag = 37;
    if (has_interactive_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *interactive_tag_);
    }

    // optional .apollo.perception.PerceptionObstacle adc_localization = 39;
    if (has_adc_localization()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *adc_localization_);
    }

    // optional double velocity_heading = 5;
    if (has_velocity_heading()) {
      total_size += 1 + 8;
    }

    // optional double speed = 6;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // optional double acc = 7;
    if (has_acc()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double theta = 8;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional double length = 9;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double width = 10;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double height = 11;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional double tracking_time = 12;
    if (has_tracking_time()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .apollo.perception.PerceptionObstacle.Type type = 23;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double timestamp = 13;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    // optional double t_velocity_heading = 18 [deprecated = true];
    if (has_t_velocity_heading()) {
      total_size += 2 + 8;
    }

    // optional double t_speed = 19 [deprecated = true];
    if (has_t_speed()) {
      total_size += 2 + 8;
    }

    // optional double t_acc = 21 [deprecated = true];
    if (has_t_acc()) {
      total_size += 2 + 8;
    }

    // optional double label_update_time_delta = 24;
    if (has_label_update_time_delta()) {
      total_size += 2 + 8;
    }

    // optional double adc_timestamp = 38;
    if (has_adc_timestamp()) {
      total_size += 2 + 8;
    }

    // optional bool is_still = 22 [default = false];
    if (has_is_still()) {
      total_size += 2 + 1;
    }

    // optional bool is_near_junction = 29 [default = false];
    if (has_is_near_junction()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Feature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  const Feature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Feature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.Feature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.Feature)
    MergeFrom(*source);
  }
}

void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_point_.MergeFrom(from.polygon_point_);
  future_trajectory_points_.MergeFrom(from.future_trajectory_points_);
  short_term_predicted_trajectory_points_.MergeFrom(from.short_term_predicted_trajectory_points_);
  predicted_trajectory_.MergeFrom(from.predicted_trajectory_);
  adc_trajectory_point_.MergeFrom(from.adc_trajectory_point_);
  surrounding_lane_id_.MergeFrom(from.surrounding_lane_id_);
  within_lane_id_.MergeFrom(from.within_lane_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::apollo::common::Point3D::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_velocity()->::apollo::common::Point3D::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_acceleration()->::apollo::common::Point3D::MergeFrom(from.acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_lane()->::apollo::prediction::Lane::MergeFrom(from.lane());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_t_position()->::apollo::common::Point3D::MergeFrom(from.t_position());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_t_velocity()->::apollo::common::Point3D::MergeFrom(from.t_velocity());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_t_acceleration()->::apollo::common::Point3D::MergeFrom(from.t_acceleration());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_priority()->::apollo::prediction::ObstaclePriority::MergeFrom(from.priority());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_junction_feature()->::apollo::prediction::JunctionFeature::MergeFrom(from.junction_feature());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_front_position()->::apollo::common::Point3D::MergeFrom(from.front_position());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_raw_velocity()->::apollo::common::Point3D::MergeFrom(from.raw_velocity());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_interactive_tag()->::apollo::prediction::ObstacleInteractiveTag::MergeFrom(from.interactive_tag());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_adc_localization()->::apollo::perception::PerceptionObstacle::MergeFrom(from.adc_localization());
    }
    if (cached_has_bits & 0x00002000u) {
      velocity_heading_ = from.velocity_heading_;
    }
    if (cached_has_bits & 0x00004000u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00008000u) {
      acc_ = from.acc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00020000u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00040000u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00080000u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00100000u) {
      tracking_time_ = from.tracking_time_;
    }
    if (cached_has_bits & 0x00200000u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00400000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00800000u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2130706432u) {
    if (cached_has_bits & 0x01000000u) {
      t_velocity_heading_ = from.t_velocity_heading_;
    }
    if (cached_has_bits & 0x02000000u) {
      t_speed_ = from.t_speed_;
    }
    if (cached_has_bits & 0x04000000u) {
      t_acc_ = from.t_acc_;
    }
    if (cached_has_bits & 0x08000000u) {
      label_update_time_delta_ = from.label_update_time_delta_;
    }
    if (cached_has_bits & 0x10000000u) {
      adc_timestamp_ = from.adc_timestamp_;
    }
    if (cached_has_bits & 0x20000000u) {
      is_still_ = from.is_still_;
    }
    if (cached_has_bits & 0x40000000u) {
      is_near_junction_ = from.is_near_junction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Feature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->future_trajectory_points())) return false;
  return true;
}

void Feature::Swap(Feature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feature::InternalSwap(Feature* other) {
  using std::swap;
  CastToBase(&polygon_point_)->InternalSwap(CastToBase(&other->polygon_point_));
  CastToBase(&future_trajectory_points_)->InternalSwap(CastToBase(&other->future_trajectory_points_));
  CastToBase(&short_term_predicted_trajectory_points_)->InternalSwap(CastToBase(&other->short_term_predicted_trajectory_points_));
  CastToBase(&predicted_trajectory_)->InternalSwap(CastToBase(&other->predicted_trajectory_));
  CastToBase(&adc_trajectory_point_)->InternalSwap(CastToBase(&other->adc_trajectory_point_));
  surrounding_lane_id_.InternalSwap(CastToBase(&other->surrounding_lane_id_));
  within_lane_id_.InternalSwap(CastToBase(&other->within_lane_id_));
  swap(position_, other->position_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
  swap(lane_, other->lane_);
  swap(t_position_, other->t_position_);
  swap(t_velocity_, other->t_velocity_);
  swap(t_acceleration_, other->t_acceleration_);
  swap(priority_, other->priority_);
  swap(junction_feature_, other->junction_feature_);
  swap(front_position_, other->front_position_);
  swap(raw_velocity_, other->raw_velocity_);
  swap(interactive_tag_, other->interactive_tag_);
  swap(adc_localization_, other->adc_localization_);
  swap(velocity_heading_, other->velocity_heading_);
  swap(speed_, other->speed_);
  swap(acc_, other->acc_);
  swap(theta_, other->theta_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(tracking_time_, other->tracking_time_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(timestamp_, other->timestamp_);
  swap(t_velocity_heading_, other->t_velocity_heading_);
  swap(t_speed_, other->t_speed_);
  swap(t_acc_, other->t_acc_);
  swap(label_update_time_delta_, other->label_update_time_delta_);
  swap(adc_timestamp_, other->adc_timestamp_);
  swap(is_still_, other->is_still_);
  swap(is_near_junction_, other->is_near_junction_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Feature::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObstacleHistory::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObstacleHistory::kFeatureFieldNumber;
const int ObstacleHistory::kIsTrainableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObstacleHistory::ObstacleHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_ObstacleHistory.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.ObstacleHistory)
}
ObstacleHistory::ObstacleHistory(const ObstacleHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_trainable_ = from.is_trainable_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.ObstacleHistory)
}

void ObstacleHistory::SharedCtor() {
  is_trainable_ = false;
}

ObstacleHistory::~ObstacleHistory() {
  // @@protoc_insertion_point(destructor:apollo.prediction.ObstacleHistory)
  SharedDtor();
}

void ObstacleHistory::SharedDtor() {
}

void ObstacleHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ObstacleHistory::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObstacleHistory& ObstacleHistory::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_ObstacleHistory.base);
  return *internal_default_instance();
}


void ObstacleHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.ObstacleHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_.Clear();
  is_trainable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObstacleHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.ObstacleHistory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.prediction.Feature feature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_trainable = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_trainable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trainable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.ObstacleHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.ObstacleHistory)
  return false;
#undef DO_
}

void ObstacleHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.ObstacleHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.Feature feature = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->feature_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->feature(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool is_trainable = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_trainable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.ObstacleHistory)
}

::google::protobuf::uint8* ObstacleHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.ObstacleHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.Feature feature = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->feature_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->feature(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool is_trainable = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_trainable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.ObstacleHistory)
  return target;
}

size_t ObstacleHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.ObstacleHistory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.prediction.Feature feature = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->feature_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->feature(static_cast<int>(i)));
    }
  }

  // optional bool is_trainable = 2 [default = false];
  if (has_is_trainable()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.ObstacleHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleHistory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObstacleHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.ObstacleHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.ObstacleHistory)
    MergeFrom(*source);
  }
}

void ObstacleHistory::MergeFrom(const ObstacleHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.ObstacleHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_.MergeFrom(from.feature_);
  if (from.has_is_trainable()) {
    set_is_trainable(from.is_trainable());
  }
}

void ObstacleHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.ObstacleHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleHistory::CopyFrom(const ObstacleHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.ObstacleHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleHistory::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->feature())) return false;
  return true;
}

void ObstacleHistory::Swap(ObstacleHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObstacleHistory::InternalSwap(ObstacleHistory* other) {
  using std::swap;
  CastToBase(&feature_)->InternalSwap(CastToBase(&other->feature_));
  swap(is_trainable_, other->is_trainable_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ObstacleHistory::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FrameEnv::InitAsDefaultInstance() {
  ::apollo::prediction::_FrameEnv_default_instance_._instance.get_mutable()->ego_history_ = const_cast< ::apollo::prediction::ObstacleHistory*>(
      ::apollo::prediction::ObstacleHistory::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameEnv::kTimestampFieldNumber;
const int FrameEnv::kEgoHistoryFieldNumber;
const int FrameEnv::kObstaclesHistoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameEnv::FrameEnv()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_FrameEnv.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.FrameEnv)
}
FrameEnv::FrameEnv(const FrameEnv& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      obstacles_history_(from.obstacles_history_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ego_history()) {
    ego_history_ = new ::apollo::prediction::ObstacleHistory(*from.ego_history_);
  } else {
    ego_history_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.FrameEnv)
}

void FrameEnv::SharedCtor() {
  ::memset(&ego_history_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&ego_history_)) + sizeof(timestamp_));
}

FrameEnv::~FrameEnv() {
  // @@protoc_insertion_point(destructor:apollo.prediction.FrameEnv)
  SharedDtor();
}

void FrameEnv::SharedDtor() {
  if (this != internal_default_instance()) delete ego_history_;
}

void FrameEnv::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FrameEnv::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrameEnv& FrameEnv::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::scc_info_FrameEnv.base);
  return *internal_default_instance();
}


void FrameEnv::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.FrameEnv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacles_history_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ego_history_ != NULL);
    ego_history_->Clear();
  }
  timestamp_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameEnv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.FrameEnv)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.prediction.ObstacleHistory ego_history = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ego_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.prediction.ObstacleHistory obstacles_history = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_obstacles_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.FrameEnv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.FrameEnv)
  return false;
#undef DO_
}

void FrameEnv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.FrameEnv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // optional .apollo.prediction.ObstacleHistory ego_history = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_ego_history(), output);
  }

  // repeated .apollo.prediction.ObstacleHistory obstacles_history = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_history_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->obstacles_history(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.FrameEnv)
}

::google::protobuf::uint8* FrameEnv::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.FrameEnv)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // optional .apollo.prediction.ObstacleHistory ego_history = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_ego_history(), deterministic, target);
  }

  // repeated .apollo.prediction.ObstacleHistory obstacles_history = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_history_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->obstacles_history(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.FrameEnv)
  return target;
}

size_t FrameEnv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.FrameEnv)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.prediction.ObstacleHistory obstacles_history = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacles_history_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->obstacles_history(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .apollo.prediction.ObstacleHistory ego_history = 2;
    if (has_ego_history()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ego_history_);
    }

    // optional double timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameEnv::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.FrameEnv)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameEnv* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameEnv>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.FrameEnv)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.FrameEnv)
    MergeFrom(*source);
  }
}

void FrameEnv::MergeFrom(const FrameEnv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.FrameEnv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_history_.MergeFrom(from.obstacles_history_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ego_history()->::apollo::prediction::ObstacleHistory::MergeFrom(from.ego_history());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameEnv::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.FrameEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameEnv::CopyFrom(const FrameEnv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.FrameEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameEnv::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->obstacles_history())) return false;
  if (has_ego_history()) {
    if (!this->ego_history_->IsInitialized()) return false;
  }
  return true;
}

void FrameEnv::Swap(FrameEnv* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameEnv::InternalSwap(FrameEnv* other) {
  using std::swap;
  CastToBase(&obstacles_history_)->InternalSwap(CastToBase(&other->obstacles_history_));
  swap(ego_history_, other->ego_history_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FrameEnv::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2ffeature_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::Lane* Arena::CreateMaybeMessage< ::apollo::prediction::Lane >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::Lane >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::LaneFeature* Arena::CreateMaybeMessage< ::apollo::prediction::LaneFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::LaneFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::JunctionExit* Arena::CreateMaybeMessage< ::apollo::prediction::JunctionExit >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::JunctionExit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::JunctionFeature* Arena::CreateMaybeMessage< ::apollo::prediction::JunctionFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::JunctionFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::ObstaclePriority* Arena::CreateMaybeMessage< ::apollo::prediction::ObstaclePriority >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::ObstaclePriority >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::ObstacleInteractiveTag* Arena::CreateMaybeMessage< ::apollo::prediction::ObstacleInteractiveTag >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::ObstacleInteractiveTag >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::Trajectory* Arena::CreateMaybeMessage< ::apollo::prediction::Trajectory >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::Trajectory >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::Feature* Arena::CreateMaybeMessage< ::apollo::prediction::Feature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::Feature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::ObstacleHistory* Arena::CreateMaybeMessage< ::apollo::prediction::ObstacleHistory >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::ObstacleHistory >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::FrameEnv* Arena::CreateMaybeMessage< ::apollo::prediction::FrameEnv >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::FrameEnv >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
