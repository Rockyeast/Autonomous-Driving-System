// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/prediction_conf.proto

#ifndef PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto
#define PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/perception/proto/perception_obstacle.pb.h"
#include "modules/prediction/proto/feature.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto 

namespace protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto
namespace apollo {
namespace prediction {
class ObstacleConf;
class ObstacleConfDefaultTypeInternal;
extern ObstacleConfDefaultTypeInternal _ObstacleConf_default_instance_;
class PredictionConf;
class PredictionConfDefaultTypeInternal;
extern PredictionConfDefaultTypeInternal _PredictionConf_default_instance_;
class TopicConf;
class TopicConfDefaultTypeInternal;
extern TopicConfDefaultTypeInternal _TopicConf_default_instance_;
}  // namespace prediction
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::prediction::ObstacleConf* Arena::CreateMaybeMessage<::apollo::prediction::ObstacleConf>(Arena*);
template<> ::apollo::prediction::PredictionConf* Arena::CreateMaybeMessage<::apollo::prediction::PredictionConf>(Arena*);
template<> ::apollo::prediction::TopicConf* Arena::CreateMaybeMessage<::apollo::prediction::TopicConf>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace prediction {

enum ObstacleConf_ObstacleStatus {
  ObstacleConf_ObstacleStatus_ON_LANE = 0,
  ObstacleConf_ObstacleStatus_OFF_LANE = 1,
  ObstacleConf_ObstacleStatus_STATIONARY = 3,
  ObstacleConf_ObstacleStatus_MOVING = 4,
  ObstacleConf_ObstacleStatus_IN_JUNCTION = 5
};
bool ObstacleConf_ObstacleStatus_IsValid(int value);
const ObstacleConf_ObstacleStatus ObstacleConf_ObstacleStatus_ObstacleStatus_MIN = ObstacleConf_ObstacleStatus_ON_LANE;
const ObstacleConf_ObstacleStatus ObstacleConf_ObstacleStatus_ObstacleStatus_MAX = ObstacleConf_ObstacleStatus_IN_JUNCTION;
const int ObstacleConf_ObstacleStatus_ObstacleStatus_ARRAYSIZE = ObstacleConf_ObstacleStatus_ObstacleStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObstacleConf_ObstacleStatus_descriptor();
inline const ::std::string& ObstacleConf_ObstacleStatus_Name(ObstacleConf_ObstacleStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObstacleConf_ObstacleStatus_descriptor(), value);
}
inline bool ObstacleConf_ObstacleStatus_Parse(
    const ::std::string& name, ObstacleConf_ObstacleStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObstacleConf_ObstacleStatus>(
    ObstacleConf_ObstacleStatus_descriptor(), name, value);
}
enum ObstacleConf_EvaluatorType {
  ObstacleConf_EvaluatorType_MLP_EVALUATOR = 0,
  ObstacleConf_EvaluatorType_RNN_EVALUATOR PROTOBUF_DEPRECATED = 1,
  ObstacleConf_EvaluatorType_COST_EVALUATOR = 2,
  ObstacleConf_EvaluatorType_CRUISE_MLP_EVALUATOR = 3,
  ObstacleConf_EvaluatorType_JUNCTION_MLP_EVALUATOR = 4,
  ObstacleConf_EvaluatorType_CYCLIST_KEEP_LANE_EVALUATOR = 5,
  ObstacleConf_EvaluatorType_LANE_SCANNING_EVALUATOR = 6,
  ObstacleConf_EvaluatorType_PEDESTRIAN_INTERACTION_EVALUATOR = 7,
  ObstacleConf_EvaluatorType_JUNCTION_MAP_EVALUATOR = 8,
  ObstacleConf_EvaluatorType_LANE_AGGREGATING_EVALUATOR = 9,
  ObstacleConf_EvaluatorType_SEMANTIC_LSTM_EVALUATOR = 10,
  ObstacleConf_EvaluatorType_JOINTLY_PREDICTION_PLANNING_EVALUATOR = 11,
  ObstacleConf_EvaluatorType_VECTORNET_EVALUATOR = 12
};
bool ObstacleConf_EvaluatorType_IsValid(int value);
const ObstacleConf_EvaluatorType ObstacleConf_EvaluatorType_EvaluatorType_MIN = ObstacleConf_EvaluatorType_MLP_EVALUATOR;
const ObstacleConf_EvaluatorType ObstacleConf_EvaluatorType_EvaluatorType_MAX = ObstacleConf_EvaluatorType_VECTORNET_EVALUATOR;
const int ObstacleConf_EvaluatorType_EvaluatorType_ARRAYSIZE = ObstacleConf_EvaluatorType_EvaluatorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObstacleConf_EvaluatorType_descriptor();
inline const ::std::string& ObstacleConf_EvaluatorType_Name(ObstacleConf_EvaluatorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObstacleConf_EvaluatorType_descriptor(), value);
}
inline bool ObstacleConf_EvaluatorType_Parse(
    const ::std::string& name, ObstacleConf_EvaluatorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObstacleConf_EvaluatorType>(
    ObstacleConf_EvaluatorType_descriptor(), name, value);
}
enum ObstacleConf_PredictorType {
  ObstacleConf_PredictorType_LANE_SEQUENCE_PREDICTOR = 0,
  ObstacleConf_PredictorType_FREE_MOVE_PREDICTOR = 1,
  ObstacleConf_PredictorType_REGIONAL_PREDICTOR PROTOBUF_DEPRECATED = 2,
  ObstacleConf_PredictorType_MOVE_SEQUENCE_PREDICTOR = 3,
  ObstacleConf_PredictorType_EMPTY_PREDICTOR = 4,
  ObstacleConf_PredictorType_SINGLE_LANE_PREDICTOR = 5,
  ObstacleConf_PredictorType_JUNCTION_PREDICTOR = 6,
  ObstacleConf_PredictorType_EXTRAPOLATION_PREDICTOR = 7,
  ObstacleConf_PredictorType_INTERACTION_PREDICTOR = 8
};
bool ObstacleConf_PredictorType_IsValid(int value);
const ObstacleConf_PredictorType ObstacleConf_PredictorType_PredictorType_MIN = ObstacleConf_PredictorType_LANE_SEQUENCE_PREDICTOR;
const ObstacleConf_PredictorType ObstacleConf_PredictorType_PredictorType_MAX = ObstacleConf_PredictorType_INTERACTION_PREDICTOR;
const int ObstacleConf_PredictorType_PredictorType_ARRAYSIZE = ObstacleConf_PredictorType_PredictorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObstacleConf_PredictorType_descriptor();
inline const ::std::string& ObstacleConf_PredictorType_Name(ObstacleConf_PredictorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObstacleConf_PredictorType_descriptor(), value);
}
inline bool ObstacleConf_PredictorType_Parse(
    const ::std::string& name, ObstacleConf_PredictorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObstacleConf_PredictorType>(
    ObstacleConf_PredictorType_descriptor(), name, value);
}
// ===================================================================

class ObstacleConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.ObstacleConf) */ {
 public:
  ObstacleConf();
  virtual ~ObstacleConf();

  ObstacleConf(const ObstacleConf& from);

  inline ObstacleConf& operator=(const ObstacleConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObstacleConf(ObstacleConf&& from) noexcept
    : ObstacleConf() {
    *this = ::std::move(from);
  }

  inline ObstacleConf& operator=(ObstacleConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObstacleConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObstacleConf* internal_default_instance() {
    return reinterpret_cast<const ObstacleConf*>(
               &_ObstacleConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ObstacleConf* other);
  friend void swap(ObstacleConf& a, ObstacleConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObstacleConf* New() const final {
    return CreateMaybeMessage<ObstacleConf>(NULL);
  }

  ObstacleConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObstacleConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObstacleConf& from);
  void MergeFrom(const ObstacleConf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObstacleConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ObstacleConf_ObstacleStatus ObstacleStatus;
  static const ObstacleStatus ON_LANE =
    ObstacleConf_ObstacleStatus_ON_LANE;
  static const ObstacleStatus OFF_LANE =
    ObstacleConf_ObstacleStatus_OFF_LANE;
  static const ObstacleStatus STATIONARY =
    ObstacleConf_ObstacleStatus_STATIONARY;
  static const ObstacleStatus MOVING =
    ObstacleConf_ObstacleStatus_MOVING;
  static const ObstacleStatus IN_JUNCTION =
    ObstacleConf_ObstacleStatus_IN_JUNCTION;
  static inline bool ObstacleStatus_IsValid(int value) {
    return ObstacleConf_ObstacleStatus_IsValid(value);
  }
  static const ObstacleStatus ObstacleStatus_MIN =
    ObstacleConf_ObstacleStatus_ObstacleStatus_MIN;
  static const ObstacleStatus ObstacleStatus_MAX =
    ObstacleConf_ObstacleStatus_ObstacleStatus_MAX;
  static const int ObstacleStatus_ARRAYSIZE =
    ObstacleConf_ObstacleStatus_ObstacleStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ObstacleStatus_descriptor() {
    return ObstacleConf_ObstacleStatus_descriptor();
  }
  static inline const ::std::string& ObstacleStatus_Name(ObstacleStatus value) {
    return ObstacleConf_ObstacleStatus_Name(value);
  }
  static inline bool ObstacleStatus_Parse(const ::std::string& name,
      ObstacleStatus* value) {
    return ObstacleConf_ObstacleStatus_Parse(name, value);
  }

  typedef ObstacleConf_EvaluatorType EvaluatorType;
  static const EvaluatorType MLP_EVALUATOR =
    ObstacleConf_EvaluatorType_MLP_EVALUATOR;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const EvaluatorType RNN_EVALUATOR =
    ObstacleConf_EvaluatorType_RNN_EVALUATOR;
  static const EvaluatorType COST_EVALUATOR =
    ObstacleConf_EvaluatorType_COST_EVALUATOR;
  static const EvaluatorType CRUISE_MLP_EVALUATOR =
    ObstacleConf_EvaluatorType_CRUISE_MLP_EVALUATOR;
  static const EvaluatorType JUNCTION_MLP_EVALUATOR =
    ObstacleConf_EvaluatorType_JUNCTION_MLP_EVALUATOR;
  static const EvaluatorType CYCLIST_KEEP_LANE_EVALUATOR =
    ObstacleConf_EvaluatorType_CYCLIST_KEEP_LANE_EVALUATOR;
  static const EvaluatorType LANE_SCANNING_EVALUATOR =
    ObstacleConf_EvaluatorType_LANE_SCANNING_EVALUATOR;
  static const EvaluatorType PEDESTRIAN_INTERACTION_EVALUATOR =
    ObstacleConf_EvaluatorType_PEDESTRIAN_INTERACTION_EVALUATOR;
  static const EvaluatorType JUNCTION_MAP_EVALUATOR =
    ObstacleConf_EvaluatorType_JUNCTION_MAP_EVALUATOR;
  static const EvaluatorType LANE_AGGREGATING_EVALUATOR =
    ObstacleConf_EvaluatorType_LANE_AGGREGATING_EVALUATOR;
  static const EvaluatorType SEMANTIC_LSTM_EVALUATOR =
    ObstacleConf_EvaluatorType_SEMANTIC_LSTM_EVALUATOR;
  static const EvaluatorType JOINTLY_PREDICTION_PLANNING_EVALUATOR =
    ObstacleConf_EvaluatorType_JOINTLY_PREDICTION_PLANNING_EVALUATOR;
  static const EvaluatorType VECTORNET_EVALUATOR =
    ObstacleConf_EvaluatorType_VECTORNET_EVALUATOR;
  static inline bool EvaluatorType_IsValid(int value) {
    return ObstacleConf_EvaluatorType_IsValid(value);
  }
  static const EvaluatorType EvaluatorType_MIN =
    ObstacleConf_EvaluatorType_EvaluatorType_MIN;
  static const EvaluatorType EvaluatorType_MAX =
    ObstacleConf_EvaluatorType_EvaluatorType_MAX;
  static const int EvaluatorType_ARRAYSIZE =
    ObstacleConf_EvaluatorType_EvaluatorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EvaluatorType_descriptor() {
    return ObstacleConf_EvaluatorType_descriptor();
  }
  static inline const ::std::string& EvaluatorType_Name(EvaluatorType value) {
    return ObstacleConf_EvaluatorType_Name(value);
  }
  static inline bool EvaluatorType_Parse(const ::std::string& name,
      EvaluatorType* value) {
    return ObstacleConf_EvaluatorType_Parse(name, value);
  }

  typedef ObstacleConf_PredictorType PredictorType;
  static const PredictorType LANE_SEQUENCE_PREDICTOR =
    ObstacleConf_PredictorType_LANE_SEQUENCE_PREDICTOR;
  static const PredictorType FREE_MOVE_PREDICTOR =
    ObstacleConf_PredictorType_FREE_MOVE_PREDICTOR;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const PredictorType REGIONAL_PREDICTOR =
    ObstacleConf_PredictorType_REGIONAL_PREDICTOR;
  static const PredictorType MOVE_SEQUENCE_PREDICTOR =
    ObstacleConf_PredictorType_MOVE_SEQUENCE_PREDICTOR;
  static const PredictorType EMPTY_PREDICTOR =
    ObstacleConf_PredictorType_EMPTY_PREDICTOR;
  static const PredictorType SINGLE_LANE_PREDICTOR =
    ObstacleConf_PredictorType_SINGLE_LANE_PREDICTOR;
  static const PredictorType JUNCTION_PREDICTOR =
    ObstacleConf_PredictorType_JUNCTION_PREDICTOR;
  static const PredictorType EXTRAPOLATION_PREDICTOR =
    ObstacleConf_PredictorType_EXTRAPOLATION_PREDICTOR;
  static const PredictorType INTERACTION_PREDICTOR =
    ObstacleConf_PredictorType_INTERACTION_PREDICTOR;
  static inline bool PredictorType_IsValid(int value) {
    return ObstacleConf_PredictorType_IsValid(value);
  }
  static const PredictorType PredictorType_MIN =
    ObstacleConf_PredictorType_PredictorType_MIN;
  static const PredictorType PredictorType_MAX =
    ObstacleConf_PredictorType_PredictorType_MAX;
  static const int PredictorType_ARRAYSIZE =
    ObstacleConf_PredictorType_PredictorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PredictorType_descriptor() {
    return ObstacleConf_PredictorType_descriptor();
  }
  static inline const ::std::string& PredictorType_Name(PredictorType value) {
    return ObstacleConf_PredictorType_Name(value);
  }
  static inline bool PredictorType_Parse(const ::std::string& name,
      PredictorType* value) {
    return ObstacleConf_PredictorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.perception.PerceptionObstacle.Type obstacle_type = 1;
  bool has_obstacle_type() const;
  void clear_obstacle_type();
  static const int kObstacleTypeFieldNumber = 1;
  ::apollo::perception::PerceptionObstacle_Type obstacle_type() const;
  void set_obstacle_type(::apollo::perception::PerceptionObstacle_Type value);

  // optional .apollo.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
  bool has_evaluator_type() const;
  void clear_evaluator_type();
  static const int kEvaluatorTypeFieldNumber = 3;
  ::apollo::prediction::ObstacleConf_EvaluatorType evaluator_type() const;
  void set_evaluator_type(::apollo::prediction::ObstacleConf_EvaluatorType value);

  // optional .apollo.prediction.ObstacleConf.PredictorType predictor_type = 4;
  bool has_predictor_type() const;
  void clear_predictor_type();
  static const int kPredictorTypeFieldNumber = 4;
  ::apollo::prediction::ObstacleConf_PredictorType predictor_type() const;
  void set_predictor_type(::apollo::prediction::ObstacleConf_PredictorType value);

  // optional .apollo.prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 6;
  bool has_interactive_tag() const;
  void clear_interactive_tag();
  static const int kInteractiveTagFieldNumber = 6;
  ::apollo::prediction::ObstacleInteractiveTag_InteractiveTag interactive_tag() const;
  void set_interactive_tag(::apollo::prediction::ObstacleInteractiveTag_InteractiveTag value);

  // optional .apollo.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2 [default = STATIONARY];
  bool has_obstacle_status() const;
  void clear_obstacle_status();
  static const int kObstacleStatusFieldNumber = 2;
  ::apollo::prediction::ObstacleConf_ObstacleStatus obstacle_status() const;
  void set_obstacle_status(::apollo::prediction::ObstacleConf_ObstacleStatus value);

  // optional .apollo.prediction.ObstaclePriority.Priority priority_type = 5;
  bool has_priority_type() const;
  void clear_priority_type();
  static const int kPriorityTypeFieldNumber = 5;
  ::apollo::prediction::ObstaclePriority_Priority priority_type() const;
  void set_priority_type(::apollo::prediction::ObstaclePriority_Priority value);

  // @@protoc_insertion_point(class_scope:apollo.prediction.ObstacleConf)
 private:
  void set_has_obstacle_type();
  void clear_has_obstacle_type();
  void set_has_obstacle_status();
  void clear_has_obstacle_status();
  void set_has_priority_type();
  void clear_has_priority_type();
  void set_has_interactive_tag();
  void clear_has_interactive_tag();
  void set_has_evaluator_type();
  void clear_has_evaluator_type();
  void set_has_predictor_type();
  void clear_has_predictor_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int obstacle_type_;
  int evaluator_type_;
  int predictor_type_;
  int interactive_tag_;
  int obstacle_status_;
  int priority_type_;
  friend struct ::protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TopicConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.TopicConf) */ {
 public:
  TopicConf();
  virtual ~TopicConf();

  TopicConf(const TopicConf& from);

  inline TopicConf& operator=(const TopicConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TopicConf(TopicConf&& from) noexcept
    : TopicConf() {
    *this = ::std::move(from);
  }

  inline TopicConf& operator=(TopicConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicConf* internal_default_instance() {
    return reinterpret_cast<const TopicConf*>(
               &_TopicConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TopicConf* other);
  friend void swap(TopicConf& a, TopicConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TopicConf* New() const final {
    return CreateMaybeMessage<TopicConf>(NULL);
  }

  TopicConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TopicConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TopicConf& from);
  void MergeFrom(const TopicConf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string adccontainer_topic_name = 1;
  bool has_adccontainer_topic_name() const;
  void clear_adccontainer_topic_name();
  static const int kAdccontainerTopicNameFieldNumber = 1;
  const ::std::string& adccontainer_topic_name() const;
  void set_adccontainer_topic_name(const ::std::string& value);
  #if LANG_CXX11
  void set_adccontainer_topic_name(::std::string&& value);
  #endif
  void set_adccontainer_topic_name(const char* value);
  void set_adccontainer_topic_name(const char* value, size_t size);
  ::std::string* mutable_adccontainer_topic_name();
  ::std::string* release_adccontainer_topic_name();
  void set_allocated_adccontainer_topic_name(::std::string* adccontainer_topic_name);

  // optional string container_topic_name = 2;
  bool has_container_topic_name() const;
  void clear_container_topic_name();
  static const int kContainerTopicNameFieldNumber = 2;
  const ::std::string& container_topic_name() const;
  void set_container_topic_name(const ::std::string& value);
  #if LANG_CXX11
  void set_container_topic_name(::std::string&& value);
  #endif
  void set_container_topic_name(const char* value);
  void set_container_topic_name(const char* value, size_t size);
  ::std::string* mutable_container_topic_name();
  ::std::string* release_container_topic_name();
  void set_allocated_container_topic_name(::std::string* container_topic_name);

  // optional string evaluator_topic_name = 3;
  bool has_evaluator_topic_name() const;
  void clear_evaluator_topic_name();
  static const int kEvaluatorTopicNameFieldNumber = 3;
  const ::std::string& evaluator_topic_name() const;
  void set_evaluator_topic_name(const ::std::string& value);
  #if LANG_CXX11
  void set_evaluator_topic_name(::std::string&& value);
  #endif
  void set_evaluator_topic_name(const char* value);
  void set_evaluator_topic_name(const char* value, size_t size);
  ::std::string* mutable_evaluator_topic_name();
  ::std::string* release_evaluator_topic_name();
  void set_allocated_evaluator_topic_name(::std::string* evaluator_topic_name);

  // optional string localization_topic = 4;
  bool has_localization_topic() const;
  void clear_localization_topic();
  static const int kLocalizationTopicFieldNumber = 4;
  const ::std::string& localization_topic() const;
  void set_localization_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_localization_topic(::std::string&& value);
  #endif
  void set_localization_topic(const char* value);
  void set_localization_topic(const char* value, size_t size);
  ::std::string* mutable_localization_topic();
  ::std::string* release_localization_topic();
  void set_allocated_localization_topic(::std::string* localization_topic);

  // optional string perception_obstacle_topic = 5;
  bool has_perception_obstacle_topic() const;
  void clear_perception_obstacle_topic();
  static const int kPerceptionObstacleTopicFieldNumber = 5;
  const ::std::string& perception_obstacle_topic() const;
  void set_perception_obstacle_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_perception_obstacle_topic(::std::string&& value);
  #endif
  void set_perception_obstacle_topic(const char* value);
  void set_perception_obstacle_topic(const char* value, size_t size);
  ::std::string* mutable_perception_obstacle_topic();
  ::std::string* release_perception_obstacle_topic();
  void set_allocated_perception_obstacle_topic(::std::string* perception_obstacle_topic);

  // optional string perception_obstacles_topic_name = 6;
  bool has_perception_obstacles_topic_name() const;
  void clear_perception_obstacles_topic_name();
  static const int kPerceptionObstaclesTopicNameFieldNumber = 6;
  const ::std::string& perception_obstacles_topic_name() const;
  void set_perception_obstacles_topic_name(const ::std::string& value);
  #if LANG_CXX11
  void set_perception_obstacles_topic_name(::std::string&& value);
  #endif
  void set_perception_obstacles_topic_name(const char* value);
  void set_perception_obstacles_topic_name(const char* value, size_t size);
  ::std::string* mutable_perception_obstacles_topic_name();
  ::std::string* release_perception_obstacles_topic_name();
  void set_allocated_perception_obstacles_topic_name(::std::string* perception_obstacles_topic_name);

  // optional string planning_trajectory_topic = 7;
  bool has_planning_trajectory_topic() const;
  void clear_planning_trajectory_topic();
  static const int kPlanningTrajectoryTopicFieldNumber = 7;
  const ::std::string& planning_trajectory_topic() const;
  void set_planning_trajectory_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_planning_trajectory_topic(::std::string&& value);
  #endif
  void set_planning_trajectory_topic(const char* value);
  void set_planning_trajectory_topic(const char* value, size_t size);
  ::std::string* mutable_planning_trajectory_topic();
  ::std::string* release_planning_trajectory_topic();
  void set_allocated_planning_trajectory_topic(::std::string* planning_trajectory_topic);

  // optional string prediction_topic = 8;
  bool has_prediction_topic() const;
  void clear_prediction_topic();
  static const int kPredictionTopicFieldNumber = 8;
  const ::std::string& prediction_topic() const;
  void set_prediction_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_prediction_topic(::std::string&& value);
  #endif
  void set_prediction_topic(const char* value);
  void set_prediction_topic(const char* value, size_t size);
  ::std::string* mutable_prediction_topic();
  ::std::string* release_prediction_topic();
  void set_allocated_prediction_topic(::std::string* prediction_topic);

  // optional string storytelling_topic = 9;
  bool has_storytelling_topic() const;
  void clear_storytelling_topic();
  static const int kStorytellingTopicFieldNumber = 9;
  const ::std::string& storytelling_topic() const;
  void set_storytelling_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_storytelling_topic(::std::string&& value);
  #endif
  void set_storytelling_topic(const char* value);
  void set_storytelling_topic(const char* value, size_t size);
  ::std::string* mutable_storytelling_topic();
  ::std::string* release_storytelling_topic();
  void set_allocated_storytelling_topic(::std::string* storytelling_topic);

  // @@protoc_insertion_point(class_scope:apollo.prediction.TopicConf)
 private:
  void set_has_adccontainer_topic_name();
  void clear_has_adccontainer_topic_name();
  void set_has_container_topic_name();
  void clear_has_container_topic_name();
  void set_has_evaluator_topic_name();
  void clear_has_evaluator_topic_name();
  void set_has_localization_topic();
  void clear_has_localization_topic();
  void set_has_perception_obstacle_topic();
  void clear_has_perception_obstacle_topic();
  void set_has_perception_obstacles_topic_name();
  void clear_has_perception_obstacles_topic_name();
  void set_has_planning_trajectory_topic();
  void clear_has_planning_trajectory_topic();
  void set_has_prediction_topic();
  void clear_has_prediction_topic();
  void set_has_storytelling_topic();
  void clear_has_storytelling_topic();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr adccontainer_topic_name_;
  ::google::protobuf::internal::ArenaStringPtr container_topic_name_;
  ::google::protobuf::internal::ArenaStringPtr evaluator_topic_name_;
  ::google::protobuf::internal::ArenaStringPtr localization_topic_;
  ::google::protobuf::internal::ArenaStringPtr perception_obstacle_topic_;
  ::google::protobuf::internal::ArenaStringPtr perception_obstacles_topic_name_;
  ::google::protobuf::internal::ArenaStringPtr planning_trajectory_topic_;
  ::google::protobuf::internal::ArenaStringPtr prediction_topic_;
  ::google::protobuf::internal::ArenaStringPtr storytelling_topic_;
  friend struct ::protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PredictionConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.PredictionConf) */ {
 public:
  PredictionConf();
  virtual ~PredictionConf();

  PredictionConf(const PredictionConf& from);

  inline PredictionConf& operator=(const PredictionConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PredictionConf(PredictionConf&& from) noexcept
    : PredictionConf() {
    *this = ::std::move(from);
  }

  inline PredictionConf& operator=(PredictionConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PredictionConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictionConf* internal_default_instance() {
    return reinterpret_cast<const PredictionConf*>(
               &_PredictionConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PredictionConf* other);
  friend void swap(PredictionConf& a, PredictionConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PredictionConf* New() const final {
    return CreateMaybeMessage<PredictionConf>(NULL);
  }

  PredictionConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PredictionConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PredictionConf& from);
  void MergeFrom(const PredictionConf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictionConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.prediction.ObstacleConf obstacle_conf = 2;
  int obstacle_conf_size() const;
  void clear_obstacle_conf();
  static const int kObstacleConfFieldNumber = 2;
  ::apollo::prediction::ObstacleConf* mutable_obstacle_conf(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::ObstacleConf >*
      mutable_obstacle_conf();
  const ::apollo::prediction::ObstacleConf& obstacle_conf(int index) const;
  ::apollo::prediction::ObstacleConf* add_obstacle_conf();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::ObstacleConf >&
      obstacle_conf() const;

  // optional .apollo.prediction.TopicConf topic_conf = 1;
  bool has_topic_conf() const;
  void clear_topic_conf();
  static const int kTopicConfFieldNumber = 1;
  private:
  const ::apollo::prediction::TopicConf& _internal_topic_conf() const;
  public:
  const ::apollo::prediction::TopicConf& topic_conf() const;
  ::apollo::prediction::TopicConf* release_topic_conf();
  ::apollo::prediction::TopicConf* mutable_topic_conf();
  void set_allocated_topic_conf(::apollo::prediction::TopicConf* topic_conf);

  // @@protoc_insertion_point(class_scope:apollo.prediction.PredictionConf)
 private:
  void set_has_topic_conf();
  void clear_has_topic_conf();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::ObstacleConf > obstacle_conf_;
  ::apollo::prediction::TopicConf* topic_conf_;
  friend struct ::protobuf_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObstacleConf

// optional .apollo.perception.PerceptionObstacle.Type obstacle_type = 1;
inline bool ObstacleConf::has_obstacle_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstacleConf::set_has_obstacle_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObstacleConf::clear_has_obstacle_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObstacleConf::clear_obstacle_type() {
  obstacle_type_ = 0;
  clear_has_obstacle_type();
}
inline ::apollo::perception::PerceptionObstacle_Type ObstacleConf::obstacle_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.obstacle_type)
  return static_cast< ::apollo::perception::PerceptionObstacle_Type >(obstacle_type_);
}
inline void ObstacleConf::set_obstacle_type(::apollo::perception::PerceptionObstacle_Type value) {
  assert(::apollo::perception::PerceptionObstacle_Type_IsValid(value));
  set_has_obstacle_type();
  obstacle_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.obstacle_type)
}

// optional .apollo.prediction.ObstacleConf.ObstacleStatus obstacle_status = 2 [default = STATIONARY];
inline bool ObstacleConf::has_obstacle_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ObstacleConf::set_has_obstacle_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ObstacleConf::clear_has_obstacle_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ObstacleConf::clear_obstacle_status() {
  obstacle_status_ = 3;
  clear_has_obstacle_status();
}
inline ::apollo::prediction::ObstacleConf_ObstacleStatus ObstacleConf::obstacle_status() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.obstacle_status)
  return static_cast< ::apollo::prediction::ObstacleConf_ObstacleStatus >(obstacle_status_);
}
inline void ObstacleConf::set_obstacle_status(::apollo::prediction::ObstacleConf_ObstacleStatus value) {
  assert(::apollo::prediction::ObstacleConf_ObstacleStatus_IsValid(value));
  set_has_obstacle_status();
  obstacle_status_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.obstacle_status)
}

// optional .apollo.prediction.ObstaclePriority.Priority priority_type = 5;
inline bool ObstacleConf::has_priority_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ObstacleConf::set_has_priority_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ObstacleConf::clear_has_priority_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ObstacleConf::clear_priority_type() {
  priority_type_ = 1;
  clear_has_priority_type();
}
inline ::apollo::prediction::ObstaclePriority_Priority ObstacleConf::priority_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.priority_type)
  return static_cast< ::apollo::prediction::ObstaclePriority_Priority >(priority_type_);
}
inline void ObstacleConf::set_priority_type(::apollo::prediction::ObstaclePriority_Priority value) {
  assert(::apollo::prediction::ObstaclePriority_Priority_IsValid(value));
  set_has_priority_type();
  priority_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.priority_type)
}

// optional .apollo.prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 6;
inline bool ObstacleConf::has_interactive_tag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObstacleConf::set_has_interactive_tag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObstacleConf::clear_has_interactive_tag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObstacleConf::clear_interactive_tag() {
  interactive_tag_ = 1;
  clear_has_interactive_tag();
}
inline ::apollo::prediction::ObstacleInteractiveTag_InteractiveTag ObstacleConf::interactive_tag() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.interactive_tag)
  return static_cast< ::apollo::prediction::ObstacleInteractiveTag_InteractiveTag >(interactive_tag_);
}
inline void ObstacleConf::set_interactive_tag(::apollo::prediction::ObstacleInteractiveTag_InteractiveTag value) {
  assert(::apollo::prediction::ObstacleInteractiveTag_InteractiveTag_IsValid(value));
  set_has_interactive_tag();
  interactive_tag_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.interactive_tag)
}

// optional .apollo.prediction.ObstacleConf.EvaluatorType evaluator_type = 3;
inline bool ObstacleConf::has_evaluator_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObstacleConf::set_has_evaluator_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObstacleConf::clear_has_evaluator_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObstacleConf::clear_evaluator_type() {
  evaluator_type_ = 0;
  clear_has_evaluator_type();
}
inline ::apollo::prediction::ObstacleConf_EvaluatorType ObstacleConf::evaluator_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.evaluator_type)
  return static_cast< ::apollo::prediction::ObstacleConf_EvaluatorType >(evaluator_type_);
}
inline void ObstacleConf::set_evaluator_type(::apollo::prediction::ObstacleConf_EvaluatorType value) {
  assert(::apollo::prediction::ObstacleConf_EvaluatorType_IsValid(value));
  set_has_evaluator_type();
  evaluator_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.evaluator_type)
}

// optional .apollo.prediction.ObstacleConf.PredictorType predictor_type = 4;
inline bool ObstacleConf::has_predictor_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObstacleConf::set_has_predictor_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObstacleConf::clear_has_predictor_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObstacleConf::clear_predictor_type() {
  predictor_type_ = 0;
  clear_has_predictor_type();
}
inline ::apollo::prediction::ObstacleConf_PredictorType ObstacleConf::predictor_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.ObstacleConf.predictor_type)
  return static_cast< ::apollo::prediction::ObstacleConf_PredictorType >(predictor_type_);
}
inline void ObstacleConf::set_predictor_type(::apollo::prediction::ObstacleConf_PredictorType value) {
  assert(::apollo::prediction::ObstacleConf_PredictorType_IsValid(value));
  set_has_predictor_type();
  predictor_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.ObstacleConf.predictor_type)
}

// -------------------------------------------------------------------

// TopicConf

// optional string adccontainer_topic_name = 1;
inline bool TopicConf::has_adccontainer_topic_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopicConf::set_has_adccontainer_topic_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopicConf::clear_has_adccontainer_topic_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopicConf::clear_adccontainer_topic_name() {
  adccontainer_topic_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_adccontainer_topic_name();
}
inline const ::std::string& TopicConf::adccontainer_topic_name() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.TopicConf.adccontainer_topic_name)
  return adccontainer_topic_name_.GetNoArena();
}
inline void TopicConf::set_adccontainer_topic_name(const ::std::string& value) {
  set_has_adccontainer_topic_name();
  adccontainer_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.TopicConf.adccontainer_topic_name)
}
#if LANG_CXX11
inline void TopicConf::set_adccontainer_topic_name(::std::string&& value) {
  set_has_adccontainer_topic_name();
  adccontainer_topic_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.TopicConf.adccontainer_topic_name)
}
#endif
inline void TopicConf::set_adccontainer_topic_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_adccontainer_topic_name();
  adccontainer_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.TopicConf.adccontainer_topic_name)
}
inline void TopicConf::set_adccontainer_topic_name(const char* value, size_t size) {
  set_has_adccontainer_topic_name();
  adccontainer_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.TopicConf.adccontainer_topic_name)
}
inline ::std::string* TopicConf::mutable_adccontainer_topic_name() {
  set_has_adccontainer_topic_name();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.TopicConf.adccontainer_topic_name)
  return adccontainer_topic_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicConf::release_adccontainer_topic_name() {
  // @@protoc_insertion_point(field_release:apollo.prediction.TopicConf.adccontainer_topic_name)
  if (!has_adccontainer_topic_name()) {
    return NULL;
  }
  clear_has_adccontainer_topic_name();
  return adccontainer_topic_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicConf::set_allocated_adccontainer_topic_name(::std::string* adccontainer_topic_name) {
  if (adccontainer_topic_name != NULL) {
    set_has_adccontainer_topic_name();
  } else {
    clear_has_adccontainer_topic_name();
  }
  adccontainer_topic_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adccontainer_topic_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.TopicConf.adccontainer_topic_name)
}

// optional string container_topic_name = 2;
inline bool TopicConf::has_container_topic_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopicConf::set_has_container_topic_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopicConf::clear_has_container_topic_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopicConf::clear_container_topic_name() {
  container_topic_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_container_topic_name();
}
inline const ::std::string& TopicConf::container_topic_name() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.TopicConf.container_topic_name)
  return container_topic_name_.GetNoArena();
}
inline void TopicConf::set_container_topic_name(const ::std::string& value) {
  set_has_container_topic_name();
  container_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.TopicConf.container_topic_name)
}
#if LANG_CXX11
inline void TopicConf::set_container_topic_name(::std::string&& value) {
  set_has_container_topic_name();
  container_topic_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.TopicConf.container_topic_name)
}
#endif
inline void TopicConf::set_container_topic_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_container_topic_name();
  container_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.TopicConf.container_topic_name)
}
inline void TopicConf::set_container_topic_name(const char* value, size_t size) {
  set_has_container_topic_name();
  container_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.TopicConf.container_topic_name)
}
inline ::std::string* TopicConf::mutable_container_topic_name() {
  set_has_container_topic_name();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.TopicConf.container_topic_name)
  return container_topic_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicConf::release_container_topic_name() {
  // @@protoc_insertion_point(field_release:apollo.prediction.TopicConf.container_topic_name)
  if (!has_container_topic_name()) {
    return NULL;
  }
  clear_has_container_topic_name();
  return container_topic_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicConf::set_allocated_container_topic_name(::std::string* container_topic_name) {
  if (container_topic_name != NULL) {
    set_has_container_topic_name();
  } else {
    clear_has_container_topic_name();
  }
  container_topic_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), container_topic_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.TopicConf.container_topic_name)
}

// optional string evaluator_topic_name = 3;
inline bool TopicConf::has_evaluator_topic_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TopicConf::set_has_evaluator_topic_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TopicConf::clear_has_evaluator_topic_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TopicConf::clear_evaluator_topic_name() {
  evaluator_topic_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_evaluator_topic_name();
}
inline const ::std::string& TopicConf::evaluator_topic_name() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.TopicConf.evaluator_topic_name)
  return evaluator_topic_name_.GetNoArena();
}
inline void TopicConf::set_evaluator_topic_name(const ::std::string& value) {
  set_has_evaluator_topic_name();
  evaluator_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.TopicConf.evaluator_topic_name)
}
#if LANG_CXX11
inline void TopicConf::set_evaluator_topic_name(::std::string&& value) {
  set_has_evaluator_topic_name();
  evaluator_topic_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.TopicConf.evaluator_topic_name)
}
#endif
inline void TopicConf::set_evaluator_topic_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_evaluator_topic_name();
  evaluator_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.TopicConf.evaluator_topic_name)
}
inline void TopicConf::set_evaluator_topic_name(const char* value, size_t size) {
  set_has_evaluator_topic_name();
  evaluator_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.TopicConf.evaluator_topic_name)
}
inline ::std::string* TopicConf::mutable_evaluator_topic_name() {
  set_has_evaluator_topic_name();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.TopicConf.evaluator_topic_name)
  return evaluator_topic_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicConf::release_evaluator_topic_name() {
  // @@protoc_insertion_point(field_release:apollo.prediction.TopicConf.evaluator_topic_name)
  if (!has_evaluator_topic_name()) {
    return NULL;
  }
  clear_has_evaluator_topic_name();
  return evaluator_topic_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicConf::set_allocated_evaluator_topic_name(::std::string* evaluator_topic_name) {
  if (evaluator_topic_name != NULL) {
    set_has_evaluator_topic_name();
  } else {
    clear_has_evaluator_topic_name();
  }
  evaluator_topic_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), evaluator_topic_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.TopicConf.evaluator_topic_name)
}

// optional string localization_topic = 4;
inline bool TopicConf::has_localization_topic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TopicConf::set_has_localization_topic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TopicConf::clear_has_localization_topic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TopicConf::clear_localization_topic() {
  localization_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_localization_topic();
}
inline const ::std::string& TopicConf::localization_topic() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.TopicConf.localization_topic)
  return localization_topic_.GetNoArena();
}
inline void TopicConf::set_localization_topic(const ::std::string& value) {
  set_has_localization_topic();
  localization_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.TopicConf.localization_topic)
}
#if LANG_CXX11
inline void TopicConf::set_localization_topic(::std::string&& value) {
  set_has_localization_topic();
  localization_topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.TopicConf.localization_topic)
}
#endif
inline void TopicConf::set_localization_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_localization_topic();
  localization_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.TopicConf.localization_topic)
}
inline void TopicConf::set_localization_topic(const char* value, size_t size) {
  set_has_localization_topic();
  localization_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.TopicConf.localization_topic)
}
inline ::std::string* TopicConf::mutable_localization_topic() {
  set_has_localization_topic();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.TopicConf.localization_topic)
  return localization_topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicConf::release_localization_topic() {
  // @@protoc_insertion_point(field_release:apollo.prediction.TopicConf.localization_topic)
  if (!has_localization_topic()) {
    return NULL;
  }
  clear_has_localization_topic();
  return localization_topic_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicConf::set_allocated_localization_topic(::std::string* localization_topic) {
  if (localization_topic != NULL) {
    set_has_localization_topic();
  } else {
    clear_has_localization_topic();
  }
  localization_topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), localization_topic);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.TopicConf.localization_topic)
}

// optional string perception_obstacle_topic = 5;
inline bool TopicConf::has_perception_obstacle_topic() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TopicConf::set_has_perception_obstacle_topic() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TopicConf::clear_has_perception_obstacle_topic() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TopicConf::clear_perception_obstacle_topic() {
  perception_obstacle_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_perception_obstacle_topic();
}
inline const ::std::string& TopicConf::perception_obstacle_topic() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.TopicConf.perception_obstacle_topic)
  return perception_obstacle_topic_.GetNoArena();
}
inline void TopicConf::set_perception_obstacle_topic(const ::std::string& value) {
  set_has_perception_obstacle_topic();
  perception_obstacle_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.TopicConf.perception_obstacle_topic)
}
#if LANG_CXX11
inline void TopicConf::set_perception_obstacle_topic(::std::string&& value) {
  set_has_perception_obstacle_topic();
  perception_obstacle_topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.TopicConf.perception_obstacle_topic)
}
#endif
inline void TopicConf::set_perception_obstacle_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_perception_obstacle_topic();
  perception_obstacle_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.TopicConf.perception_obstacle_topic)
}
inline void TopicConf::set_perception_obstacle_topic(const char* value, size_t size) {
  set_has_perception_obstacle_topic();
  perception_obstacle_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.TopicConf.perception_obstacle_topic)
}
inline ::std::string* TopicConf::mutable_perception_obstacle_topic() {
  set_has_perception_obstacle_topic();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.TopicConf.perception_obstacle_topic)
  return perception_obstacle_topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicConf::release_perception_obstacle_topic() {
  // @@protoc_insertion_point(field_release:apollo.prediction.TopicConf.perception_obstacle_topic)
  if (!has_perception_obstacle_topic()) {
    return NULL;
  }
  clear_has_perception_obstacle_topic();
  return perception_obstacle_topic_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicConf::set_allocated_perception_obstacle_topic(::std::string* perception_obstacle_topic) {
  if (perception_obstacle_topic != NULL) {
    set_has_perception_obstacle_topic();
  } else {
    clear_has_perception_obstacle_topic();
  }
  perception_obstacle_topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), perception_obstacle_topic);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.TopicConf.perception_obstacle_topic)
}

// optional string perception_obstacles_topic_name = 6;
inline bool TopicConf::has_perception_obstacles_topic_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TopicConf::set_has_perception_obstacles_topic_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TopicConf::clear_has_perception_obstacles_topic_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TopicConf::clear_perception_obstacles_topic_name() {
  perception_obstacles_topic_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_perception_obstacles_topic_name();
}
inline const ::std::string& TopicConf::perception_obstacles_topic_name() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.TopicConf.perception_obstacles_topic_name)
  return perception_obstacles_topic_name_.GetNoArena();
}
inline void TopicConf::set_perception_obstacles_topic_name(const ::std::string& value) {
  set_has_perception_obstacles_topic_name();
  perception_obstacles_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.TopicConf.perception_obstacles_topic_name)
}
#if LANG_CXX11
inline void TopicConf::set_perception_obstacles_topic_name(::std::string&& value) {
  set_has_perception_obstacles_topic_name();
  perception_obstacles_topic_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.TopicConf.perception_obstacles_topic_name)
}
#endif
inline void TopicConf::set_perception_obstacles_topic_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_perception_obstacles_topic_name();
  perception_obstacles_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.TopicConf.perception_obstacles_topic_name)
}
inline void TopicConf::set_perception_obstacles_topic_name(const char* value, size_t size) {
  set_has_perception_obstacles_topic_name();
  perception_obstacles_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.TopicConf.perception_obstacles_topic_name)
}
inline ::std::string* TopicConf::mutable_perception_obstacles_topic_name() {
  set_has_perception_obstacles_topic_name();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.TopicConf.perception_obstacles_topic_name)
  return perception_obstacles_topic_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicConf::release_perception_obstacles_topic_name() {
  // @@protoc_insertion_point(field_release:apollo.prediction.TopicConf.perception_obstacles_topic_name)
  if (!has_perception_obstacles_topic_name()) {
    return NULL;
  }
  clear_has_perception_obstacles_topic_name();
  return perception_obstacles_topic_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicConf::set_allocated_perception_obstacles_topic_name(::std::string* perception_obstacles_topic_name) {
  if (perception_obstacles_topic_name != NULL) {
    set_has_perception_obstacles_topic_name();
  } else {
    clear_has_perception_obstacles_topic_name();
  }
  perception_obstacles_topic_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), perception_obstacles_topic_name);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.TopicConf.perception_obstacles_topic_name)
}

// optional string planning_trajectory_topic = 7;
inline bool TopicConf::has_planning_trajectory_topic() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TopicConf::set_has_planning_trajectory_topic() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TopicConf::clear_has_planning_trajectory_topic() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TopicConf::clear_planning_trajectory_topic() {
  planning_trajectory_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_planning_trajectory_topic();
}
inline const ::std::string& TopicConf::planning_trajectory_topic() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.TopicConf.planning_trajectory_topic)
  return planning_trajectory_topic_.GetNoArena();
}
inline void TopicConf::set_planning_trajectory_topic(const ::std::string& value) {
  set_has_planning_trajectory_topic();
  planning_trajectory_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.TopicConf.planning_trajectory_topic)
}
#if LANG_CXX11
inline void TopicConf::set_planning_trajectory_topic(::std::string&& value) {
  set_has_planning_trajectory_topic();
  planning_trajectory_topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.TopicConf.planning_trajectory_topic)
}
#endif
inline void TopicConf::set_planning_trajectory_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_planning_trajectory_topic();
  planning_trajectory_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.TopicConf.planning_trajectory_topic)
}
inline void TopicConf::set_planning_trajectory_topic(const char* value, size_t size) {
  set_has_planning_trajectory_topic();
  planning_trajectory_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.TopicConf.planning_trajectory_topic)
}
inline ::std::string* TopicConf::mutable_planning_trajectory_topic() {
  set_has_planning_trajectory_topic();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.TopicConf.planning_trajectory_topic)
  return planning_trajectory_topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicConf::release_planning_trajectory_topic() {
  // @@protoc_insertion_point(field_release:apollo.prediction.TopicConf.planning_trajectory_topic)
  if (!has_planning_trajectory_topic()) {
    return NULL;
  }
  clear_has_planning_trajectory_topic();
  return planning_trajectory_topic_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicConf::set_allocated_planning_trajectory_topic(::std::string* planning_trajectory_topic) {
  if (planning_trajectory_topic != NULL) {
    set_has_planning_trajectory_topic();
  } else {
    clear_has_planning_trajectory_topic();
  }
  planning_trajectory_topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), planning_trajectory_topic);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.TopicConf.planning_trajectory_topic)
}

// optional string prediction_topic = 8;
inline bool TopicConf::has_prediction_topic() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TopicConf::set_has_prediction_topic() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TopicConf::clear_has_prediction_topic() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TopicConf::clear_prediction_topic() {
  prediction_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_prediction_topic();
}
inline const ::std::string& TopicConf::prediction_topic() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.TopicConf.prediction_topic)
  return prediction_topic_.GetNoArena();
}
inline void TopicConf::set_prediction_topic(const ::std::string& value) {
  set_has_prediction_topic();
  prediction_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.TopicConf.prediction_topic)
}
#if LANG_CXX11
inline void TopicConf::set_prediction_topic(::std::string&& value) {
  set_has_prediction_topic();
  prediction_topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.TopicConf.prediction_topic)
}
#endif
inline void TopicConf::set_prediction_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_prediction_topic();
  prediction_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.TopicConf.prediction_topic)
}
inline void TopicConf::set_prediction_topic(const char* value, size_t size) {
  set_has_prediction_topic();
  prediction_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.TopicConf.prediction_topic)
}
inline ::std::string* TopicConf::mutable_prediction_topic() {
  set_has_prediction_topic();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.TopicConf.prediction_topic)
  return prediction_topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicConf::release_prediction_topic() {
  // @@protoc_insertion_point(field_release:apollo.prediction.TopicConf.prediction_topic)
  if (!has_prediction_topic()) {
    return NULL;
  }
  clear_has_prediction_topic();
  return prediction_topic_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicConf::set_allocated_prediction_topic(::std::string* prediction_topic) {
  if (prediction_topic != NULL) {
    set_has_prediction_topic();
  } else {
    clear_has_prediction_topic();
  }
  prediction_topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prediction_topic);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.TopicConf.prediction_topic)
}

// optional string storytelling_topic = 9;
inline bool TopicConf::has_storytelling_topic() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TopicConf::set_has_storytelling_topic() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TopicConf::clear_has_storytelling_topic() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TopicConf::clear_storytelling_topic() {
  storytelling_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_storytelling_topic();
}
inline const ::std::string& TopicConf::storytelling_topic() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.TopicConf.storytelling_topic)
  return storytelling_topic_.GetNoArena();
}
inline void TopicConf::set_storytelling_topic(const ::std::string& value) {
  set_has_storytelling_topic();
  storytelling_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.TopicConf.storytelling_topic)
}
#if LANG_CXX11
inline void TopicConf::set_storytelling_topic(::std::string&& value) {
  set_has_storytelling_topic();
  storytelling_topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.TopicConf.storytelling_topic)
}
#endif
inline void TopicConf::set_storytelling_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_storytelling_topic();
  storytelling_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.TopicConf.storytelling_topic)
}
inline void TopicConf::set_storytelling_topic(const char* value, size_t size) {
  set_has_storytelling_topic();
  storytelling_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.TopicConf.storytelling_topic)
}
inline ::std::string* TopicConf::mutable_storytelling_topic() {
  set_has_storytelling_topic();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.TopicConf.storytelling_topic)
  return storytelling_topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicConf::release_storytelling_topic() {
  // @@protoc_insertion_point(field_release:apollo.prediction.TopicConf.storytelling_topic)
  if (!has_storytelling_topic()) {
    return NULL;
  }
  clear_has_storytelling_topic();
  return storytelling_topic_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicConf::set_allocated_storytelling_topic(::std::string* storytelling_topic) {
  if (storytelling_topic != NULL) {
    set_has_storytelling_topic();
  } else {
    clear_has_storytelling_topic();
  }
  storytelling_topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storytelling_topic);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.TopicConf.storytelling_topic)
}

// -------------------------------------------------------------------

// PredictionConf

// optional .apollo.prediction.TopicConf topic_conf = 1;
inline bool PredictionConf::has_topic_conf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PredictionConf::set_has_topic_conf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PredictionConf::clear_has_topic_conf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PredictionConf::clear_topic_conf() {
  if (topic_conf_ != NULL) topic_conf_->Clear();
  clear_has_topic_conf();
}
inline const ::apollo::prediction::TopicConf& PredictionConf::_internal_topic_conf() const {
  return *topic_conf_;
}
inline const ::apollo::prediction::TopicConf& PredictionConf::topic_conf() const {
  const ::apollo::prediction::TopicConf* p = topic_conf_;
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionConf.topic_conf)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::prediction::TopicConf*>(
      &::apollo::prediction::_TopicConf_default_instance_);
}
inline ::apollo::prediction::TopicConf* PredictionConf::release_topic_conf() {
  // @@protoc_insertion_point(field_release:apollo.prediction.PredictionConf.topic_conf)
  clear_has_topic_conf();
  ::apollo::prediction::TopicConf* temp = topic_conf_;
  topic_conf_ = NULL;
  return temp;
}
inline ::apollo::prediction::TopicConf* PredictionConf::mutable_topic_conf() {
  set_has_topic_conf();
  if (topic_conf_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::prediction::TopicConf>(GetArenaNoVirtual());
    topic_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionConf.topic_conf)
  return topic_conf_;
}
inline void PredictionConf::set_allocated_topic_conf(::apollo::prediction::TopicConf* topic_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete topic_conf_;
  }
  if (topic_conf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      topic_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, topic_conf, submessage_arena);
    }
    set_has_topic_conf();
  } else {
    clear_has_topic_conf();
  }
  topic_conf_ = topic_conf;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.PredictionConf.topic_conf)
}

// repeated .apollo.prediction.ObstacleConf obstacle_conf = 2;
inline int PredictionConf::obstacle_conf_size() const {
  return obstacle_conf_.size();
}
inline void PredictionConf::clear_obstacle_conf() {
  obstacle_conf_.Clear();
}
inline ::apollo::prediction::ObstacleConf* PredictionConf::mutable_obstacle_conf(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.PredictionConf.obstacle_conf)
  return obstacle_conf_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::ObstacleConf >*
PredictionConf::mutable_obstacle_conf() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.PredictionConf.obstacle_conf)
  return &obstacle_conf_;
}
inline const ::apollo::prediction::ObstacleConf& PredictionConf::obstacle_conf(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.PredictionConf.obstacle_conf)
  return obstacle_conf_.Get(index);
}
inline ::apollo::prediction::ObstacleConf* PredictionConf::add_obstacle_conf() {
  // @@protoc_insertion_point(field_add:apollo.prediction.PredictionConf.obstacle_conf)
  return obstacle_conf_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::ObstacleConf >&
PredictionConf::obstacle_conf() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.PredictionConf.obstacle_conf)
  return obstacle_conf_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::prediction::ObstacleConf_ObstacleStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::prediction::ObstacleConf_ObstacleStatus>() {
  return ::apollo::prediction::ObstacleConf_ObstacleStatus_descriptor();
}
template <> struct is_proto_enum< ::apollo::prediction::ObstacleConf_EvaluatorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::prediction::ObstacleConf_EvaluatorType>() {
  return ::apollo::prediction::ObstacleConf_EvaluatorType_descriptor();
}
template <> struct is_proto_enum< ::apollo::prediction::ObstacleConf_PredictorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::prediction::ObstacleConf_PredictorType>() {
  return ::apollo::prediction::ObstacleConf_PredictorType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2fprediction_5fconf_2eproto
