// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/lane_graph.proto

#ifndef PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2flane_5fgraph_2eproto
#define PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2flane_5fgraph_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/geometry.pb.h"
#include "modules/common/proto/pnc_point.pb.h"
#include "modules/map/proto/map_lane.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto 

namespace protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto
namespace apollo {
namespace prediction {
class LaneGraph;
class LaneGraphDefaultTypeInternal;
extern LaneGraphDefaultTypeInternal _LaneGraph_default_instance_;
class LaneObstacle;
class LaneObstacleDefaultTypeInternal;
extern LaneObstacleDefaultTypeInternal _LaneObstacle_default_instance_;
class LanePoint;
class LanePointDefaultTypeInternal;
extern LanePointDefaultTypeInternal _LanePoint_default_instance_;
class LaneSegment;
class LaneSegmentDefaultTypeInternal;
extern LaneSegmentDefaultTypeInternal _LaneSegment_default_instance_;
class LaneSequence;
class LaneSequenceDefaultTypeInternal;
extern LaneSequenceDefaultTypeInternal _LaneSequence_default_instance_;
class LaneSequence_Features;
class LaneSequence_FeaturesDefaultTypeInternal;
extern LaneSequence_FeaturesDefaultTypeInternal _LaneSequence_Features_default_instance_;
class NearbyObstacle;
class NearbyObstacleDefaultTypeInternal;
extern NearbyObstacleDefaultTypeInternal _NearbyObstacle_default_instance_;
class StopSign;
class StopSignDefaultTypeInternal;
extern StopSignDefaultTypeInternal _StopSign_default_instance_;
}  // namespace prediction
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::prediction::LaneGraph* Arena::CreateMaybeMessage<::apollo::prediction::LaneGraph>(Arena*);
template<> ::apollo::prediction::LaneObstacle* Arena::CreateMaybeMessage<::apollo::prediction::LaneObstacle>(Arena*);
template<> ::apollo::prediction::LanePoint* Arena::CreateMaybeMessage<::apollo::prediction::LanePoint>(Arena*);
template<> ::apollo::prediction::LaneSegment* Arena::CreateMaybeMessage<::apollo::prediction::LaneSegment>(Arena*);
template<> ::apollo::prediction::LaneSequence* Arena::CreateMaybeMessage<::apollo::prediction::LaneSequence>(Arena*);
template<> ::apollo::prediction::LaneSequence_Features* Arena::CreateMaybeMessage<::apollo::prediction::LaneSequence_Features>(Arena*);
template<> ::apollo::prediction::NearbyObstacle* Arena::CreateMaybeMessage<::apollo::prediction::NearbyObstacle>(Arena*);
template<> ::apollo::prediction::StopSign* Arena::CreateMaybeMessage<::apollo::prediction::StopSign>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace prediction {

enum LanePoint_ScenarioType {
  LanePoint_ScenarioType_URBAN_ROAD = 0,
  LanePoint_ScenarioType_JUNCTION = 1,
  LanePoint_ScenarioType_HIGHWAY = 2
};
bool LanePoint_ScenarioType_IsValid(int value);
const LanePoint_ScenarioType LanePoint_ScenarioType_ScenarioType_MIN = LanePoint_ScenarioType_URBAN_ROAD;
const LanePoint_ScenarioType LanePoint_ScenarioType_ScenarioType_MAX = LanePoint_ScenarioType_HIGHWAY;
const int LanePoint_ScenarioType_ScenarioType_ARRAYSIZE = LanePoint_ScenarioType_ScenarioType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LanePoint_ScenarioType_descriptor();
inline const ::std::string& LanePoint_ScenarioType_Name(LanePoint_ScenarioType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LanePoint_ScenarioType_descriptor(), value);
}
inline bool LanePoint_ScenarioType_Parse(
    const ::std::string& name, LanePoint_ScenarioType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LanePoint_ScenarioType>(
    LanePoint_ScenarioType_descriptor(), name, value);
}
enum LaneSequence_BehaviorType {
  LaneSequence_BehaviorType_NOT_GOTO_LANE = 1,
  LaneSequence_BehaviorType_CONSTANT_SPEED = 2,
  LaneSequence_BehaviorType_SMALL_ACCELERATION = 3,
  LaneSequence_BehaviorType_LARGE_ACCELERATION = 4,
  LaneSequence_BehaviorType_SMALL_DECELERATION = 5,
  LaneSequence_BehaviorType_LARGE_DECELERATION = 6
};
bool LaneSequence_BehaviorType_IsValid(int value);
const LaneSequence_BehaviorType LaneSequence_BehaviorType_BehaviorType_MIN = LaneSequence_BehaviorType_NOT_GOTO_LANE;
const LaneSequence_BehaviorType LaneSequence_BehaviorType_BehaviorType_MAX = LaneSequence_BehaviorType_LARGE_DECELERATION;
const int LaneSequence_BehaviorType_BehaviorType_ARRAYSIZE = LaneSequence_BehaviorType_BehaviorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneSequence_BehaviorType_descriptor();
inline const ::std::string& LaneSequence_BehaviorType_Name(LaneSequence_BehaviorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneSequence_BehaviorType_descriptor(), value);
}
inline bool LaneSequence_BehaviorType_Parse(
    const ::std::string& name, LaneSequence_BehaviorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneSequence_BehaviorType>(
    LaneSequence_BehaviorType_descriptor(), name, value);
}
// ===================================================================

class LanePoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.LanePoint) */ {
 public:
  LanePoint();
  virtual ~LanePoint();

  LanePoint(const LanePoint& from);

  inline LanePoint& operator=(const LanePoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LanePoint(LanePoint&& from) noexcept
    : LanePoint() {
    *this = ::std::move(from);
  }

  inline LanePoint& operator=(LanePoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LanePoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LanePoint* internal_default_instance() {
    return reinterpret_cast<const LanePoint*>(
               &_LanePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LanePoint* other);
  friend void swap(LanePoint& a, LanePoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LanePoint* New() const final {
    return CreateMaybeMessage<LanePoint>(NULL);
  }

  LanePoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LanePoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LanePoint& from);
  void MergeFrom(const LanePoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LanePoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LanePoint_ScenarioType ScenarioType;
  static const ScenarioType URBAN_ROAD =
    LanePoint_ScenarioType_URBAN_ROAD;
  static const ScenarioType JUNCTION =
    LanePoint_ScenarioType_JUNCTION;
  static const ScenarioType HIGHWAY =
    LanePoint_ScenarioType_HIGHWAY;
  static inline bool ScenarioType_IsValid(int value) {
    return LanePoint_ScenarioType_IsValid(value);
  }
  static const ScenarioType ScenarioType_MIN =
    LanePoint_ScenarioType_ScenarioType_MIN;
  static const ScenarioType ScenarioType_MAX =
    LanePoint_ScenarioType_ScenarioType_MAX;
  static const int ScenarioType_ARRAYSIZE =
    LanePoint_ScenarioType_ScenarioType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ScenarioType_descriptor() {
    return LanePoint_ScenarioType_descriptor();
  }
  static inline const ::std::string& ScenarioType_Name(ScenarioType value) {
    return LanePoint_ScenarioType_Name(value);
  }
  static inline bool ScenarioType_Parse(const ::std::string& name,
      ScenarioType* value) {
    return LanePoint_ScenarioType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .apollo.common.Point3D position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  private:
  const ::apollo::common::Point3D& _internal_position() const;
  public:
  const ::apollo::common::Point3D& position() const;
  ::apollo::common::Point3D* release_position();
  ::apollo::common::Point3D* mutable_position();
  void set_allocated_position(::apollo::common::Point3D* position);

  // optional double heading = 2 [default = 0];
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 2;
  double heading() const;
  void set_heading(double value);

  // optional double width = 3 [default = 0];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  double width() const;
  void set_width(double value);

  // optional double relative_s = 4 [default = 0];
  bool has_relative_s() const;
  void clear_relative_s();
  static const int kRelativeSFieldNumber = 4;
  double relative_s() const;
  void set_relative_s(double value);

  // optional double relative_l = 5 [default = 0];
  bool has_relative_l() const;
  void clear_relative_l();
  static const int kRelativeLFieldNumber = 5;
  double relative_l() const;
  void set_relative_l(double value);

  // optional double angle_diff = 6 [default = 0];
  bool has_angle_diff() const;
  void clear_angle_diff();
  static const int kAngleDiffFieldNumber = 6;
  double angle_diff() const;
  void set_angle_diff(double value);

  // optional double kappa = 7 [default = 0];
  bool has_kappa() const;
  void clear_kappa();
  static const int kKappaFieldNumber = 7;
  double kappa() const;
  void set_kappa(double value);

  // optional double speed_limit = 9;
  bool has_speed_limit() const;
  void clear_speed_limit();
  static const int kSpeedLimitFieldNumber = 9;
  double speed_limit() const;
  void set_speed_limit(double value);

  // optional .apollo.prediction.LanePoint.ScenarioType scenario_type = 8;
  bool has_scenario_type() const;
  void clear_scenario_type();
  static const int kScenarioTypeFieldNumber = 8;
  ::apollo::prediction::LanePoint_ScenarioType scenario_type() const;
  void set_scenario_type(::apollo::prediction::LanePoint_ScenarioType value);

  // @@protoc_insertion_point(class_scope:apollo.prediction.LanePoint)
 private:
  void set_has_position();
  void clear_has_position();
  void set_has_heading();
  void clear_has_heading();
  void set_has_width();
  void clear_has_width();
  void set_has_relative_s();
  void clear_has_relative_s();
  void set_has_relative_l();
  void clear_has_relative_l();
  void set_has_angle_diff();
  void clear_has_angle_diff();
  void set_has_kappa();
  void clear_has_kappa();
  void set_has_scenario_type();
  void clear_has_scenario_type();
  void set_has_speed_limit();
  void clear_has_speed_limit();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::common::Point3D* position_;
  double heading_;
  double width_;
  double relative_s_;
  double relative_l_;
  double angle_diff_;
  double kappa_;
  double speed_limit_;
  int scenario_type_;
  friend struct ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneSegment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.LaneSegment) */ {
 public:
  LaneSegment();
  virtual ~LaneSegment();

  LaneSegment(const LaneSegment& from);

  inline LaneSegment& operator=(const LaneSegment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneSegment(LaneSegment&& from) noexcept
    : LaneSegment() {
    *this = ::std::move(from);
  }

  inline LaneSegment& operator=(LaneSegment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneSegment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneSegment* internal_default_instance() {
    return reinterpret_cast<const LaneSegment*>(
               &_LaneSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LaneSegment* other);
  friend void swap(LaneSegment& a, LaneSegment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneSegment* New() const final {
    return CreateMaybeMessage<LaneSegment>(NULL);
  }

  LaneSegment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaneSegment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaneSegment& from);
  void MergeFrom(const LaneSegment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneSegment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.prediction.LanePoint lane_point = 5;
  int lane_point_size() const;
  void clear_lane_point();
  static const int kLanePointFieldNumber = 5;
  ::apollo::prediction::LanePoint* mutable_lane_point(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >*
      mutable_lane_point();
  const ::apollo::prediction::LanePoint& lane_point(int index) const;
  ::apollo::prediction::LanePoint* add_lane_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >&
      lane_point() const;

  // optional string lane_id = 1;
  bool has_lane_id() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 1;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lane_id(::std::string&& value);
  #endif
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // optional double start_s = 2 [default = 0];
  bool has_start_s() const;
  void clear_start_s();
  static const int kStartSFieldNumber = 2;
  double start_s() const;
  void set_start_s(double value);

  // optional double end_s = 3 [default = 0];
  bool has_end_s() const;
  void clear_end_s();
  static const int kEndSFieldNumber = 3;
  double end_s() const;
  void set_end_s(double value);

  // optional double total_length = 6 [default = 0];
  bool has_total_length() const;
  void clear_total_length();
  static const int kTotalLengthFieldNumber = 6;
  double total_length() const;
  void set_total_length(double value);

  // optional uint32 lane_turn_type = 4 [default = 0];
  bool has_lane_turn_type() const;
  void clear_lane_turn_type();
  static const int kLaneTurnTypeFieldNumber = 4;
  ::google::protobuf::uint32 lane_turn_type() const;
  void set_lane_turn_type(::google::protobuf::uint32 value);

  // optional int32 adc_lane_point_idx = 8 [default = 0];
  bool has_adc_lane_point_idx() const;
  void clear_adc_lane_point_idx();
  static const int kAdcLanePointIdxFieldNumber = 8;
  ::google::protobuf::int32 adc_lane_point_idx() const;
  void set_adc_lane_point_idx(::google::protobuf::int32 value);

  // optional double adc_s = 7 [default = 0];
  bool has_adc_s() const;
  void clear_adc_s();
  static const int kAdcSFieldNumber = 7;
  double adc_s() const;
  void set_adc_s(double value);

  // @@protoc_insertion_point(class_scope:apollo.prediction.LaneSegment)
 private:
  void set_has_lane_id();
  void clear_has_lane_id();
  void set_has_start_s();
  void clear_has_start_s();
  void set_has_end_s();
  void clear_has_end_s();
  void set_has_lane_turn_type();
  void clear_has_lane_turn_type();
  void set_has_adc_s();
  void clear_has_adc_s();
  void set_has_adc_lane_point_idx();
  void clear_has_adc_lane_point_idx();
  void set_has_total_length();
  void clear_has_total_length();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint > lane_point_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  double start_s_;
  double end_s_;
  double total_length_;
  ::google::protobuf::uint32 lane_turn_type_;
  ::google::protobuf::int32 adc_lane_point_idx_;
  double adc_s_;
  friend struct ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NearbyObstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.NearbyObstacle) */ {
 public:
  NearbyObstacle();
  virtual ~NearbyObstacle();

  NearbyObstacle(const NearbyObstacle& from);

  inline NearbyObstacle& operator=(const NearbyObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NearbyObstacle(NearbyObstacle&& from) noexcept
    : NearbyObstacle() {
    *this = ::std::move(from);
  }

  inline NearbyObstacle& operator=(NearbyObstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NearbyObstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NearbyObstacle* internal_default_instance() {
    return reinterpret_cast<const NearbyObstacle*>(
               &_NearbyObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NearbyObstacle* other);
  friend void swap(NearbyObstacle& a, NearbyObstacle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NearbyObstacle* New() const final {
    return CreateMaybeMessage<NearbyObstacle>(NULL);
  }

  NearbyObstacle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NearbyObstacle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NearbyObstacle& from);
  void MergeFrom(const NearbyObstacle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NearbyObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double s = 2;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 2;
  double s() const;
  void set_s(double value);

  // optional double l = 3;
  bool has_l() const;
  void clear_l();
  static const int kLFieldNumber = 3;
  double l() const;
  void set_l(double value);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.prediction.NearbyObstacle)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_s();
  void clear_has_s();
  void set_has_l();
  void clear_has_l();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double s_;
  double l_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StopSign : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.StopSign) */ {
 public:
  StopSign();
  virtual ~StopSign();

  StopSign(const StopSign& from);

  inline StopSign& operator=(const StopSign& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopSign(StopSign&& from) noexcept
    : StopSign() {
    *this = ::std::move(from);
  }

  inline StopSign& operator=(StopSign&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopSign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopSign* internal_default_instance() {
    return reinterpret_cast<const StopSign*>(
               &_StopSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(StopSign* other);
  friend void swap(StopSign& a, StopSign& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopSign* New() const final {
    return CreateMaybeMessage<StopSign>(NULL);
  }

  StopSign* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StopSign>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StopSign& from);
  void MergeFrom(const StopSign& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopSign* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string stop_sign_id = 1;
  bool has_stop_sign_id() const;
  void clear_stop_sign_id();
  static const int kStopSignIdFieldNumber = 1;
  const ::std::string& stop_sign_id() const;
  void set_stop_sign_id(const ::std::string& value);
  #if LANG_CXX11
  void set_stop_sign_id(::std::string&& value);
  #endif
  void set_stop_sign_id(const char* value);
  void set_stop_sign_id(const char* value, size_t size);
  ::std::string* mutable_stop_sign_id();
  ::std::string* release_stop_sign_id();
  void set_allocated_stop_sign_id(::std::string* stop_sign_id);

  // optional string lane_id = 2;
  bool has_lane_id() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 2;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lane_id(::std::string&& value);
  #endif
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // optional double lane_s = 3;
  bool has_lane_s() const;
  void clear_lane_s();
  static const int kLaneSFieldNumber = 3;
  double lane_s() const;
  void set_lane_s(double value);

  // optional double lane_sequence_s = 4;
  bool has_lane_sequence_s() const;
  void clear_lane_sequence_s();
  static const int kLaneSequenceSFieldNumber = 4;
  double lane_sequence_s() const;
  void set_lane_sequence_s(double value);

  // @@protoc_insertion_point(class_scope:apollo.prediction.StopSign)
 private:
  void set_has_stop_sign_id();
  void clear_has_stop_sign_id();
  void set_has_lane_id();
  void clear_has_lane_id();
  void set_has_lane_s();
  void clear_has_lane_s();
  void set_has_lane_sequence_s();
  void clear_has_lane_sequence_s();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr stop_sign_id_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  double lane_s_;
  double lane_sequence_s_;
  friend struct ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneSequence_Features : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.LaneSequence.Features) */ {
 public:
  LaneSequence_Features();
  virtual ~LaneSequence_Features();

  LaneSequence_Features(const LaneSequence_Features& from);

  inline LaneSequence_Features& operator=(const LaneSequence_Features& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneSequence_Features(LaneSequence_Features&& from) noexcept
    : LaneSequence_Features() {
    *this = ::std::move(from);
  }

  inline LaneSequence_Features& operator=(LaneSequence_Features&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneSequence_Features& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneSequence_Features* internal_default_instance() {
    return reinterpret_cast<const LaneSequence_Features*>(
               &_LaneSequence_Features_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(LaneSequence_Features* other);
  friend void swap(LaneSequence_Features& a, LaneSequence_Features& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneSequence_Features* New() const final {
    return CreateMaybeMessage<LaneSequence_Features>(NULL);
  }

  LaneSequence_Features* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaneSequence_Features>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaneSequence_Features& from);
  void MergeFrom(const LaneSequence_Features& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneSequence_Features* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double mlp_features = 1;
  int mlp_features_size() const;
  void clear_mlp_features();
  static const int kMlpFeaturesFieldNumber = 1;
  double mlp_features(int index) const;
  void set_mlp_features(int index, double value);
  void add_mlp_features(double value);
  const ::google::protobuf::RepeatedField< double >&
      mlp_features() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_mlp_features();

  // @@protoc_insertion_point(class_scope:apollo.prediction.LaneSequence.Features)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< double > mlp_features_;
  friend struct ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneSequence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.LaneSequence) */ {
 public:
  LaneSequence();
  virtual ~LaneSequence();

  LaneSequence(const LaneSequence& from);

  inline LaneSequence& operator=(const LaneSequence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneSequence(LaneSequence&& from) noexcept
    : LaneSequence() {
    *this = ::std::move(from);
  }

  inline LaneSequence& operator=(LaneSequence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneSequence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneSequence* internal_default_instance() {
    return reinterpret_cast<const LaneSequence*>(
               &_LaneSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LaneSequence* other);
  friend void swap(LaneSequence& a, LaneSequence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneSequence* New() const final {
    return CreateMaybeMessage<LaneSequence>(NULL);
  }

  LaneSequence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaneSequence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaneSequence& from);
  void MergeFrom(const LaneSequence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneSequence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LaneSequence_Features Features;

  typedef LaneSequence_BehaviorType BehaviorType;
  static const BehaviorType NOT_GOTO_LANE =
    LaneSequence_BehaviorType_NOT_GOTO_LANE;
  static const BehaviorType CONSTANT_SPEED =
    LaneSequence_BehaviorType_CONSTANT_SPEED;
  static const BehaviorType SMALL_ACCELERATION =
    LaneSequence_BehaviorType_SMALL_ACCELERATION;
  static const BehaviorType LARGE_ACCELERATION =
    LaneSequence_BehaviorType_LARGE_ACCELERATION;
  static const BehaviorType SMALL_DECELERATION =
    LaneSequence_BehaviorType_SMALL_DECELERATION;
  static const BehaviorType LARGE_DECELERATION =
    LaneSequence_BehaviorType_LARGE_DECELERATION;
  static inline bool BehaviorType_IsValid(int value) {
    return LaneSequence_BehaviorType_IsValid(value);
  }
  static const BehaviorType BehaviorType_MIN =
    LaneSequence_BehaviorType_BehaviorType_MIN;
  static const BehaviorType BehaviorType_MAX =
    LaneSequence_BehaviorType_BehaviorType_MAX;
  static const int BehaviorType_ARRAYSIZE =
    LaneSequence_BehaviorType_BehaviorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BehaviorType_descriptor() {
    return LaneSequence_BehaviorType_descriptor();
  }
  static inline const ::std::string& BehaviorType_Name(BehaviorType value) {
    return LaneSequence_BehaviorType_Name(value);
  }
  static inline bool BehaviorType_Parse(const ::std::string& name,
      BehaviorType* value) {
    return LaneSequence_BehaviorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .apollo.prediction.LaneSegment lane_segment = 2;
  int lane_segment_size() const;
  void clear_lane_segment();
  static const int kLaneSegmentFieldNumber = 2;
  ::apollo::prediction::LaneSegment* mutable_lane_segment(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSegment >*
      mutable_lane_segment();
  const ::apollo::prediction::LaneSegment& lane_segment(int index) const;
  ::apollo::prediction::LaneSegment* add_lane_segment();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSegment >&
      lane_segment() const;

  // repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
  int nearby_obstacle_size() const;
  void clear_nearby_obstacle();
  static const int kNearbyObstacleFieldNumber = 3;
  ::apollo::prediction::NearbyObstacle* mutable_nearby_obstacle(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >*
      mutable_nearby_obstacle();
  const ::apollo::prediction::NearbyObstacle& nearby_obstacle(int index) const;
  ::apollo::prediction::NearbyObstacle* add_nearby_obstacle();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >&
      nearby_obstacle() const;

  // repeated .apollo.common.PathPoint path_point = 8;
  int path_point_size() const;
  void clear_path_point();
  static const int kPathPointFieldNumber = 8;
  ::apollo::common::PathPoint* mutable_path_point(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >*
      mutable_path_point();
  const ::apollo::common::PathPoint& path_point(int index) const;
  ::apollo::common::PathPoint* add_path_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >&
      path_point() const;

  // repeated .apollo.prediction.LanePoint curr_lane_point = 11;
  int curr_lane_point_size() const;
  void clear_curr_lane_point();
  static const int kCurrLanePointFieldNumber = 11;
  ::apollo::prediction::LanePoint* mutable_curr_lane_point(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >*
      mutable_curr_lane_point();
  const ::apollo::prediction::LanePoint& curr_lane_point(int index) const;
  ::apollo::prediction::LanePoint* add_curr_lane_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >&
      curr_lane_point() const;

  // repeated .apollo.prediction.LanePoint left_neighbor_point = 12;
  int left_neighbor_point_size() const;
  void clear_left_neighbor_point();
  static const int kLeftNeighborPointFieldNumber = 12;
  ::apollo::prediction::LanePoint* mutable_left_neighbor_point(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >*
      mutable_left_neighbor_point();
  const ::apollo::prediction::LanePoint& left_neighbor_point(int index) const;
  ::apollo::prediction::LanePoint* add_left_neighbor_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >&
      left_neighbor_point() const;

  // repeated .apollo.prediction.LanePoint right_neighbor_point = 13;
  int right_neighbor_point_size() const;
  void clear_right_neighbor_point();
  static const int kRightNeighborPointFieldNumber = 13;
  ::apollo::prediction::LanePoint* mutable_right_neighbor_point(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >*
      mutable_right_neighbor_point();
  const ::apollo::prediction::LanePoint& right_neighbor_point(int index) const;
  ::apollo::prediction::LanePoint* add_right_neighbor_point();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >&
      right_neighbor_point() const;

  // repeated .apollo.prediction.NearbyObstacle left_nearby_obstacle = 14;
  int left_nearby_obstacle_size() const;
  void clear_left_nearby_obstacle();
  static const int kLeftNearbyObstacleFieldNumber = 14;
  ::apollo::prediction::NearbyObstacle* mutable_left_nearby_obstacle(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >*
      mutable_left_nearby_obstacle();
  const ::apollo::prediction::NearbyObstacle& left_nearby_obstacle(int index) const;
  ::apollo::prediction::NearbyObstacle* add_left_nearby_obstacle();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >&
      left_nearby_obstacle() const;

  // repeated .apollo.prediction.NearbyObstacle right_nearby_obstacle = 15;
  int right_nearby_obstacle_size() const;
  void clear_right_nearby_obstacle();
  static const int kRightNearbyObstacleFieldNumber = 15;
  ::apollo::prediction::NearbyObstacle* mutable_right_nearby_obstacle(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >*
      mutable_right_nearby_obstacle();
  const ::apollo::prediction::NearbyObstacle& right_nearby_obstacle(int index) const;
  ::apollo::prediction::NearbyObstacle* add_right_nearby_obstacle();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >&
      right_nearby_obstacle() const;

  // optional .apollo.prediction.LaneSequence.Features features = 4;
  bool has_features() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 4;
  private:
  const ::apollo::prediction::LaneSequence_Features& _internal_features() const;
  public:
  const ::apollo::prediction::LaneSequence_Features& features() const;
  ::apollo::prediction::LaneSequence_Features* release_features();
  ::apollo::prediction::LaneSequence_Features* mutable_features();
  void set_allocated_features(::apollo::prediction::LaneSequence_Features* features);

  // optional .apollo.prediction.StopSign stop_sign = 20;
  bool has_stop_sign() const;
  void clear_stop_sign();
  static const int kStopSignFieldNumber = 20;
  private:
  const ::apollo::prediction::StopSign& _internal_stop_sign() const;
  public:
  const ::apollo::prediction::StopSign& stop_sign() const;
  ::apollo::prediction::StopSign* release_stop_sign();
  ::apollo::prediction::StopSign* mutable_stop_sign();
  void set_allocated_stop_sign(::apollo::prediction::StopSign* stop_sign);

  // optional int32 lane_sequence_id = 1;
  bool has_lane_sequence_id() const;
  void clear_lane_sequence_id();
  static const int kLaneSequenceIdFieldNumber = 1;
  ::google::protobuf::int32 lane_sequence_id() const;
  void set_lane_sequence_id(::google::protobuf::int32 value);

  // optional int32 label = 5 [default = 0];
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 5;
  ::google::protobuf::int32 label() const;
  void set_label(::google::protobuf::int32 value);

  // optional double probability = 6 [default = 0];
  bool has_probability() const;
  void clear_probability();
  static const int kProbabilityFieldNumber = 6;
  double probability() const;
  void set_probability(double value);

  // optional double acceleration = 7 [default = 0];
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 7;
  double acceleration() const;
  void set_acceleration(double value);

  // optional bool vehicle_on_lane = 10;
  bool has_vehicle_on_lane() const;
  void clear_vehicle_on_lane();
  static const int kVehicleOnLaneFieldNumber = 10;
  bool vehicle_on_lane() const;
  void set_vehicle_on_lane(bool value);

  // optional int32 right_of_way = 21;
  bool has_right_of_way() const;
  void clear_right_of_way();
  static const int kRightOfWayFieldNumber = 21;
  ::google::protobuf::int32 right_of_way() const;
  void set_right_of_way(::google::protobuf::int32 value);

  // optional double time_to_lane_center = 16;
  bool has_time_to_lane_center() const;
  void clear_time_to_lane_center();
  static const int kTimeToLaneCenterFieldNumber = 16;
  double time_to_lane_center() const;
  void set_time_to_lane_center(double value);

  // optional double lane_s = 17;
  bool has_lane_s() const;
  void clear_lane_s();
  static const int kLaneSFieldNumber = 17;
  double lane_s() const;
  void set_lane_s(double value);

  // optional double lane_l = 18;
  bool has_lane_l() const;
  void clear_lane_l();
  static const int kLaneLFieldNumber = 18;
  double lane_l() const;
  void set_lane_l(double value);

  // optional double time_to_lane_edge = 19;
  bool has_time_to_lane_edge() const;
  void clear_time_to_lane_edge();
  static const int kTimeToLaneEdgeFieldNumber = 19;
  double time_to_lane_edge() const;
  void set_time_to_lane_edge(double value);

  // optional int32 adc_lane_segment_idx = 23 [default = 0];
  bool has_adc_lane_segment_idx() const;
  void clear_adc_lane_segment_idx();
  static const int kAdcLaneSegmentIdxFieldNumber = 23;
  ::google::protobuf::int32 adc_lane_segment_idx() const;
  void set_adc_lane_segment_idx(::google::protobuf::int32 value);

  // optional .apollo.prediction.LaneSequence.BehaviorType behavior_type = 9;
  bool has_behavior_type() const;
  void clear_behavior_type();
  static const int kBehaviorTypeFieldNumber = 9;
  ::apollo::prediction::LaneSequence_BehaviorType behavior_type() const;
  void set_behavior_type(::apollo::prediction::LaneSequence_BehaviorType value);

  // optional .apollo.hdmap.Lane.LaneType lane_type = 22;
  bool has_lane_type() const;
  void clear_lane_type();
  static const int kLaneTypeFieldNumber = 22;
  ::apollo::hdmap::Lane_LaneType lane_type() const;
  void set_lane_type(::apollo::hdmap::Lane_LaneType value);

  // @@protoc_insertion_point(class_scope:apollo.prediction.LaneSequence)
 private:
  void set_has_lane_sequence_id();
  void clear_has_lane_sequence_id();
  void set_has_adc_lane_segment_idx();
  void clear_has_adc_lane_segment_idx();
  void set_has_lane_type();
  void clear_has_lane_type();
  void set_has_lane_s();
  void clear_has_lane_s();
  void set_has_lane_l();
  void clear_has_lane_l();
  void set_has_vehicle_on_lane();
  void clear_has_vehicle_on_lane();
  void set_has_stop_sign();
  void clear_has_stop_sign();
  void set_has_right_of_way();
  void clear_has_right_of_way();
  void set_has_features();
  void clear_has_features();
  void set_has_label();
  void clear_has_label();
  void set_has_probability();
  void clear_has_probability();
  void set_has_acceleration();
  void clear_has_acceleration();
  void set_has_time_to_lane_center();
  void clear_has_time_to_lane_center();
  void set_has_time_to_lane_edge();
  void clear_has_time_to_lane_edge();
  void set_has_behavior_type();
  void clear_has_behavior_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSegment > lane_segment_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle > nearby_obstacle_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint > path_point_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint > curr_lane_point_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint > left_neighbor_point_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint > right_neighbor_point_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle > left_nearby_obstacle_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle > right_nearby_obstacle_;
  ::apollo::prediction::LaneSequence_Features* features_;
  ::apollo::prediction::StopSign* stop_sign_;
  ::google::protobuf::int32 lane_sequence_id_;
  ::google::protobuf::int32 label_;
  double probability_;
  double acceleration_;
  bool vehicle_on_lane_;
  ::google::protobuf::int32 right_of_way_;
  double time_to_lane_center_;
  double lane_s_;
  double lane_l_;
  double time_to_lane_edge_;
  ::google::protobuf::int32 adc_lane_segment_idx_;
  int behavior_type_;
  int lane_type_;
  friend struct ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneGraph : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.LaneGraph) */ {
 public:
  LaneGraph();
  virtual ~LaneGraph();

  LaneGraph(const LaneGraph& from);

  inline LaneGraph& operator=(const LaneGraph& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneGraph(LaneGraph&& from) noexcept
    : LaneGraph() {
    *this = ::std::move(from);
  }

  inline LaneGraph& operator=(LaneGraph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneGraph* internal_default_instance() {
    return reinterpret_cast<const LaneGraph*>(
               &_LaneGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LaneGraph* other);
  friend void swap(LaneGraph& a, LaneGraph& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneGraph* New() const final {
    return CreateMaybeMessage<LaneGraph>(NULL);
  }

  LaneGraph* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaneGraph>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaneGraph& from);
  void MergeFrom(const LaneGraph& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneGraph* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.prediction.LaneSequence lane_sequence = 1;
  int lane_sequence_size() const;
  void clear_lane_sequence();
  static const int kLaneSequenceFieldNumber = 1;
  ::apollo::prediction::LaneSequence* mutable_lane_sequence(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSequence >*
      mutable_lane_sequence();
  const ::apollo::prediction::LaneSequence& lane_sequence(int index) const;
  ::apollo::prediction::LaneSequence* add_lane_sequence();
  const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSequence >&
      lane_sequence() const;

  // @@protoc_insertion_point(class_scope:apollo.prediction.LaneGraph)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSequence > lane_sequence_;
  friend struct ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneObstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.prediction.LaneObstacle) */ {
 public:
  LaneObstacle();
  virtual ~LaneObstacle();

  LaneObstacle(const LaneObstacle& from);

  inline LaneObstacle& operator=(const LaneObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneObstacle(LaneObstacle&& from) noexcept
    : LaneObstacle() {
    *this = ::std::move(from);
  }

  inline LaneObstacle& operator=(LaneObstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneObstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneObstacle* internal_default_instance() {
    return reinterpret_cast<const LaneObstacle*>(
               &_LaneObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(LaneObstacle* other);
  friend void swap(LaneObstacle& a, LaneObstacle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneObstacle* New() const final {
    return CreateMaybeMessage<LaneObstacle>(NULL);
  }

  LaneObstacle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaneObstacle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaneObstacle& from);
  void MergeFrom(const LaneObstacle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string lane_id = 2;
  bool has_lane_id() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 2;
  const ::std::string& lane_id() const;
  void set_lane_id(const ::std::string& value);
  #if LANG_CXX11
  void set_lane_id(::std::string&& value);
  #endif
  void set_lane_id(const char* value);
  void set_lane_id(const char* value, size_t size);
  ::std::string* mutable_lane_id();
  ::std::string* release_lane_id();
  void set_allocated_lane_id(::std::string* lane_id);

  // optional double lane_s = 3;
  bool has_lane_s() const;
  void clear_lane_s();
  static const int kLaneSFieldNumber = 3;
  double lane_s() const;
  void set_lane_s(double value);

  // optional double lane_l = 4;
  bool has_lane_l() const;
  void clear_lane_l();
  static const int kLaneLFieldNumber = 4;
  double lane_l() const;
  void set_lane_l(double value);

  // optional int32 obstacle_id = 1;
  bool has_obstacle_id() const;
  void clear_obstacle_id();
  static const int kObstacleIdFieldNumber = 1;
  ::google::protobuf::int32 obstacle_id() const;
  void set_obstacle_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:apollo.prediction.LaneObstacle)
 private:
  void set_has_obstacle_id();
  void clear_has_obstacle_id();
  void set_has_lane_id();
  void clear_has_lane_id();
  void set_has_lane_s();
  void clear_has_lane_s();
  void set_has_lane_l();
  void clear_has_lane_l();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr lane_id_;
  double lane_s_;
  double lane_l_;
  ::google::protobuf::int32 obstacle_id_;
  friend struct ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LanePoint

// optional .apollo.common.Point3D position = 1;
inline bool LanePoint::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LanePoint::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LanePoint::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::common::Point3D& LanePoint::_internal_position() const {
  return *position_;
}
inline const ::apollo::common::Point3D& LanePoint::position() const {
  const ::apollo::common::Point3D* p = position_;
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.position)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point3D*>(
      &::apollo::common::_Point3D_default_instance_);
}
inline ::apollo::common::Point3D* LanePoint::release_position() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LanePoint.position)
  clear_has_position();
  ::apollo::common::Point3D* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::apollo::common::Point3D* LanePoint::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Point3D>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LanePoint.position)
  return position_;
}
inline void LanePoint::set_allocated_position(::apollo::common::Point3D* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
  } else {
    clear_has_position();
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LanePoint.position)
}

// optional double heading = 2 [default = 0];
inline bool LanePoint::has_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LanePoint::set_has_heading() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LanePoint::clear_has_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LanePoint::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double LanePoint::heading() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.heading)
  return heading_;
}
inline void LanePoint::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.heading)
}

// optional double width = 3 [default = 0];
inline bool LanePoint::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LanePoint::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LanePoint::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LanePoint::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double LanePoint::width() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.width)
  return width_;
}
inline void LanePoint::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.width)
}

// optional double relative_s = 4 [default = 0];
inline bool LanePoint::has_relative_s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LanePoint::set_has_relative_s() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LanePoint::clear_has_relative_s() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LanePoint::clear_relative_s() {
  relative_s_ = 0;
  clear_has_relative_s();
}
inline double LanePoint::relative_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.relative_s)
  return relative_s_;
}
inline void LanePoint::set_relative_s(double value) {
  set_has_relative_s();
  relative_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.relative_s)
}

// optional double relative_l = 5 [default = 0];
inline bool LanePoint::has_relative_l() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LanePoint::set_has_relative_l() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LanePoint::clear_has_relative_l() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LanePoint::clear_relative_l() {
  relative_l_ = 0;
  clear_has_relative_l();
}
inline double LanePoint::relative_l() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.relative_l)
  return relative_l_;
}
inline void LanePoint::set_relative_l(double value) {
  set_has_relative_l();
  relative_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.relative_l)
}

// optional double angle_diff = 6 [default = 0];
inline bool LanePoint::has_angle_diff() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LanePoint::set_has_angle_diff() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LanePoint::clear_has_angle_diff() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LanePoint::clear_angle_diff() {
  angle_diff_ = 0;
  clear_has_angle_diff();
}
inline double LanePoint::angle_diff() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.angle_diff)
  return angle_diff_;
}
inline void LanePoint::set_angle_diff(double value) {
  set_has_angle_diff();
  angle_diff_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.angle_diff)
}

// optional double kappa = 7 [default = 0];
inline bool LanePoint::has_kappa() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LanePoint::set_has_kappa() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LanePoint::clear_has_kappa() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LanePoint::clear_kappa() {
  kappa_ = 0;
  clear_has_kappa();
}
inline double LanePoint::kappa() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.kappa)
  return kappa_;
}
inline void LanePoint::set_kappa(double value) {
  set_has_kappa();
  kappa_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.kappa)
}

// optional .apollo.prediction.LanePoint.ScenarioType scenario_type = 8;
inline bool LanePoint::has_scenario_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LanePoint::set_has_scenario_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LanePoint::clear_has_scenario_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LanePoint::clear_scenario_type() {
  scenario_type_ = 0;
  clear_has_scenario_type();
}
inline ::apollo::prediction::LanePoint_ScenarioType LanePoint::scenario_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.scenario_type)
  return static_cast< ::apollo::prediction::LanePoint_ScenarioType >(scenario_type_);
}
inline void LanePoint::set_scenario_type(::apollo::prediction::LanePoint_ScenarioType value) {
  assert(::apollo::prediction::LanePoint_ScenarioType_IsValid(value));
  set_has_scenario_type();
  scenario_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.scenario_type)
}

// optional double speed_limit = 9;
inline bool LanePoint::has_speed_limit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LanePoint::set_has_speed_limit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LanePoint::clear_has_speed_limit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LanePoint::clear_speed_limit() {
  speed_limit_ = 0;
  clear_has_speed_limit();
}
inline double LanePoint::speed_limit() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LanePoint.speed_limit)
  return speed_limit_;
}
inline void LanePoint::set_speed_limit(double value) {
  set_has_speed_limit();
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LanePoint.speed_limit)
}

// -------------------------------------------------------------------

// LaneSegment

// optional string lane_id = 1;
inline bool LaneSegment::has_lane_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneSegment::set_has_lane_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneSegment::clear_has_lane_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneSegment::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lane_id();
}
inline const ::std::string& LaneSegment::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.lane_id)
  return lane_id_.GetNoArena();
}
inline void LaneSegment::set_lane_id(const ::std::string& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.lane_id)
}
#if LANG_CXX11
inline void LaneSegment::set_lane_id(::std::string&& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.LaneSegment.lane_id)
}
#endif
inline void LaneSegment::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.LaneSegment.lane_id)
}
inline void LaneSegment::set_lane_id(const char* value, size_t size) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.LaneSegment.lane_id)
}
inline ::std::string* LaneSegment::mutable_lane_id() {
  set_has_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSegment.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaneSegment::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LaneSegment.lane_id)
  if (!has_lane_id()) {
    return NULL;
  }
  clear_has_lane_id();
  return lane_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaneSegment::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    set_has_lane_id();
  } else {
    clear_has_lane_id();
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LaneSegment.lane_id)
}

// optional double start_s = 2 [default = 0];
inline bool LaneSegment::has_start_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneSegment::set_has_start_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneSegment::clear_has_start_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneSegment::clear_start_s() {
  start_s_ = 0;
  clear_has_start_s();
}
inline double LaneSegment::start_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.start_s)
  return start_s_;
}
inline void LaneSegment::set_start_s(double value) {
  set_has_start_s();
  start_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.start_s)
}

// optional double end_s = 3 [default = 0];
inline bool LaneSegment::has_end_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneSegment::set_has_end_s() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneSegment::clear_has_end_s() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneSegment::clear_end_s() {
  end_s_ = 0;
  clear_has_end_s();
}
inline double LaneSegment::end_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.end_s)
  return end_s_;
}
inline void LaneSegment::set_end_s(double value) {
  set_has_end_s();
  end_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.end_s)
}

// optional uint32 lane_turn_type = 4 [default = 0];
inline bool LaneSegment::has_lane_turn_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LaneSegment::set_has_lane_turn_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LaneSegment::clear_has_lane_turn_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LaneSegment::clear_lane_turn_type() {
  lane_turn_type_ = 0u;
  clear_has_lane_turn_type();
}
inline ::google::protobuf::uint32 LaneSegment::lane_turn_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.lane_turn_type)
  return lane_turn_type_;
}
inline void LaneSegment::set_lane_turn_type(::google::protobuf::uint32 value) {
  set_has_lane_turn_type();
  lane_turn_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.lane_turn_type)
}

// repeated .apollo.prediction.LanePoint lane_point = 5;
inline int LaneSegment::lane_point_size() const {
  return lane_point_.size();
}
inline void LaneSegment::clear_lane_point() {
  lane_point_.Clear();
}
inline ::apollo::prediction::LanePoint* LaneSegment::mutable_lane_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSegment.lane_point)
  return lane_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >*
LaneSegment::mutable_lane_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSegment.lane_point)
  return &lane_point_;
}
inline const ::apollo::prediction::LanePoint& LaneSegment::lane_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.lane_point)
  return lane_point_.Get(index);
}
inline ::apollo::prediction::LanePoint* LaneSegment::add_lane_point() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSegment.lane_point)
  return lane_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >&
LaneSegment::lane_point() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSegment.lane_point)
  return lane_point_;
}

// optional double adc_s = 7 [default = 0];
inline bool LaneSegment::has_adc_s() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LaneSegment::set_has_adc_s() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LaneSegment::clear_has_adc_s() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LaneSegment::clear_adc_s() {
  adc_s_ = 0;
  clear_has_adc_s();
}
inline double LaneSegment::adc_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.adc_s)
  return adc_s_;
}
inline void LaneSegment::set_adc_s(double value) {
  set_has_adc_s();
  adc_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.adc_s)
}

// optional int32 adc_lane_point_idx = 8 [default = 0];
inline bool LaneSegment::has_adc_lane_point_idx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LaneSegment::set_has_adc_lane_point_idx() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LaneSegment::clear_has_adc_lane_point_idx() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LaneSegment::clear_adc_lane_point_idx() {
  adc_lane_point_idx_ = 0;
  clear_has_adc_lane_point_idx();
}
inline ::google::protobuf::int32 LaneSegment::adc_lane_point_idx() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.adc_lane_point_idx)
  return adc_lane_point_idx_;
}
inline void LaneSegment::set_adc_lane_point_idx(::google::protobuf::int32 value) {
  set_has_adc_lane_point_idx();
  adc_lane_point_idx_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.adc_lane_point_idx)
}

// optional double total_length = 6 [default = 0];
inline bool LaneSegment::has_total_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneSegment::set_has_total_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneSegment::clear_has_total_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneSegment::clear_total_length() {
  total_length_ = 0;
  clear_has_total_length();
}
inline double LaneSegment::total_length() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSegment.total_length)
  return total_length_;
}
inline void LaneSegment::set_total_length(double value) {
  set_has_total_length();
  total_length_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSegment.total_length)
}

// -------------------------------------------------------------------

// NearbyObstacle

// optional int32 id = 1;
inline bool NearbyObstacle::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NearbyObstacle::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NearbyObstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NearbyObstacle::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NearbyObstacle::id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.NearbyObstacle.id)
  return id_;
}
inline void NearbyObstacle::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.NearbyObstacle.id)
}

// optional double s = 2;
inline bool NearbyObstacle::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NearbyObstacle::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NearbyObstacle::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NearbyObstacle::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double NearbyObstacle::s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.NearbyObstacle.s)
  return s_;
}
inline void NearbyObstacle::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.NearbyObstacle.s)
}

// optional double l = 3;
inline bool NearbyObstacle::has_l() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NearbyObstacle::set_has_l() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NearbyObstacle::clear_has_l() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NearbyObstacle::clear_l() {
  l_ = 0;
  clear_has_l();
}
inline double NearbyObstacle::l() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.NearbyObstacle.l)
  return l_;
}
inline void NearbyObstacle::set_l(double value) {
  set_has_l();
  l_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.NearbyObstacle.l)
}

// -------------------------------------------------------------------

// StopSign

// optional string stop_sign_id = 1;
inline bool StopSign::has_stop_sign_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopSign::set_has_stop_sign_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopSign::clear_has_stop_sign_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopSign::clear_stop_sign_id() {
  stop_sign_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stop_sign_id();
}
inline const ::std::string& StopSign::stop_sign_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.StopSign.stop_sign_id)
  return stop_sign_id_.GetNoArena();
}
inline void StopSign::set_stop_sign_id(const ::std::string& value) {
  set_has_stop_sign_id();
  stop_sign_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.StopSign.stop_sign_id)
}
#if LANG_CXX11
inline void StopSign::set_stop_sign_id(::std::string&& value) {
  set_has_stop_sign_id();
  stop_sign_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.StopSign.stop_sign_id)
}
#endif
inline void StopSign::set_stop_sign_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stop_sign_id();
  stop_sign_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.StopSign.stop_sign_id)
}
inline void StopSign::set_stop_sign_id(const char* value, size_t size) {
  set_has_stop_sign_id();
  stop_sign_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.StopSign.stop_sign_id)
}
inline ::std::string* StopSign::mutable_stop_sign_id() {
  set_has_stop_sign_id();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.StopSign.stop_sign_id)
  return stop_sign_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopSign::release_stop_sign_id() {
  // @@protoc_insertion_point(field_release:apollo.prediction.StopSign.stop_sign_id)
  if (!has_stop_sign_id()) {
    return NULL;
  }
  clear_has_stop_sign_id();
  return stop_sign_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopSign::set_allocated_stop_sign_id(::std::string* stop_sign_id) {
  if (stop_sign_id != NULL) {
    set_has_stop_sign_id();
  } else {
    clear_has_stop_sign_id();
  }
  stop_sign_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stop_sign_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.StopSign.stop_sign_id)
}

// optional string lane_id = 2;
inline bool StopSign::has_lane_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StopSign::set_has_lane_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StopSign::clear_has_lane_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StopSign::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lane_id();
}
inline const ::std::string& StopSign::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.StopSign.lane_id)
  return lane_id_.GetNoArena();
}
inline void StopSign::set_lane_id(const ::std::string& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.StopSign.lane_id)
}
#if LANG_CXX11
inline void StopSign::set_lane_id(::std::string&& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.StopSign.lane_id)
}
#endif
inline void StopSign::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.StopSign.lane_id)
}
inline void StopSign::set_lane_id(const char* value, size_t size) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.StopSign.lane_id)
}
inline ::std::string* StopSign::mutable_lane_id() {
  set_has_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.StopSign.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopSign::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.prediction.StopSign.lane_id)
  if (!has_lane_id()) {
    return NULL;
  }
  clear_has_lane_id();
  return lane_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopSign::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    set_has_lane_id();
  } else {
    clear_has_lane_id();
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.StopSign.lane_id)
}

// optional double lane_s = 3;
inline bool StopSign::has_lane_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StopSign::set_has_lane_s() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StopSign::clear_has_lane_s() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StopSign::clear_lane_s() {
  lane_s_ = 0;
  clear_has_lane_s();
}
inline double StopSign::lane_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.StopSign.lane_s)
  return lane_s_;
}
inline void StopSign::set_lane_s(double value) {
  set_has_lane_s();
  lane_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.StopSign.lane_s)
}

// optional double lane_sequence_s = 4;
inline bool StopSign::has_lane_sequence_s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StopSign::set_has_lane_sequence_s() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StopSign::clear_has_lane_sequence_s() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StopSign::clear_lane_sequence_s() {
  lane_sequence_s_ = 0;
  clear_has_lane_sequence_s();
}
inline double StopSign::lane_sequence_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.StopSign.lane_sequence_s)
  return lane_sequence_s_;
}
inline void StopSign::set_lane_sequence_s(double value) {
  set_has_lane_sequence_s();
  lane_sequence_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.StopSign.lane_sequence_s)
}

// -------------------------------------------------------------------

// LaneSequence_Features

// repeated double mlp_features = 1;
inline int LaneSequence_Features::mlp_features_size() const {
  return mlp_features_.size();
}
inline void LaneSequence_Features::clear_mlp_features() {
  mlp_features_.Clear();
}
inline double LaneSequence_Features::mlp_features(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.Features.mlp_features)
  return mlp_features_.Get(index);
}
inline void LaneSequence_Features::set_mlp_features(int index, double value) {
  mlp_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.Features.mlp_features)
}
inline void LaneSequence_Features::add_mlp_features(double value) {
  mlp_features_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.Features.mlp_features)
}
inline const ::google::protobuf::RepeatedField< double >&
LaneSequence_Features::mlp_features() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.Features.mlp_features)
  return mlp_features_;
}
inline ::google::protobuf::RepeatedField< double >*
LaneSequence_Features::mutable_mlp_features() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.Features.mlp_features)
  return &mlp_features_;
}

// -------------------------------------------------------------------

// LaneSequence

// optional int32 lane_sequence_id = 1;
inline bool LaneSequence::has_lane_sequence_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneSequence::set_has_lane_sequence_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneSequence::clear_has_lane_sequence_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneSequence::clear_lane_sequence_id() {
  lane_sequence_id_ = 0;
  clear_has_lane_sequence_id();
}
inline ::google::protobuf::int32 LaneSequence::lane_sequence_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.lane_sequence_id)
  return lane_sequence_id_;
}
inline void LaneSequence::set_lane_sequence_id(::google::protobuf::int32 value) {
  set_has_lane_sequence_id();
  lane_sequence_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.lane_sequence_id)
}

// repeated .apollo.prediction.LaneSegment lane_segment = 2;
inline int LaneSequence::lane_segment_size() const {
  return lane_segment_.size();
}
inline void LaneSequence::clear_lane_segment() {
  lane_segment_.Clear();
}
inline ::apollo::prediction::LaneSegment* LaneSequence::mutable_lane_segment(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.lane_segment)
  return lane_segment_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSegment >*
LaneSequence::mutable_lane_segment() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.lane_segment)
  return &lane_segment_;
}
inline const ::apollo::prediction::LaneSegment& LaneSequence::lane_segment(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.lane_segment)
  return lane_segment_.Get(index);
}
inline ::apollo::prediction::LaneSegment* LaneSequence::add_lane_segment() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.lane_segment)
  return lane_segment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSegment >&
LaneSequence::lane_segment() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.lane_segment)
  return lane_segment_;
}

// optional int32 adc_lane_segment_idx = 23 [default = 0];
inline bool LaneSequence::has_adc_lane_segment_idx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LaneSequence::set_has_adc_lane_segment_idx() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LaneSequence::clear_has_adc_lane_segment_idx() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LaneSequence::clear_adc_lane_segment_idx() {
  adc_lane_segment_idx_ = 0;
  clear_has_adc_lane_segment_idx();
}
inline ::google::protobuf::int32 LaneSequence::adc_lane_segment_idx() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.adc_lane_segment_idx)
  return adc_lane_segment_idx_;
}
inline void LaneSequence::set_adc_lane_segment_idx(::google::protobuf::int32 value) {
  set_has_adc_lane_segment_idx();
  adc_lane_segment_idx_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.adc_lane_segment_idx)
}

// repeated .apollo.common.PathPoint path_point = 8;
inline int LaneSequence::path_point_size() const {
  return path_point_.size();
}
inline ::apollo::common::PathPoint* LaneSequence::mutable_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.path_point)
  return path_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >*
LaneSequence::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.path_point)
  return &path_point_;
}
inline const ::apollo::common::PathPoint& LaneSequence::path_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.path_point)
  return path_point_.Get(index);
}
inline ::apollo::common::PathPoint* LaneSequence::add_path_point() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.path_point)
  return path_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::PathPoint >&
LaneSequence::path_point() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.path_point)
  return path_point_;
}

// optional .apollo.hdmap.Lane.LaneType lane_type = 22;
inline bool LaneSequence::has_lane_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LaneSequence::set_has_lane_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LaneSequence::clear_has_lane_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LaneSequence::clear_lane_type() {
  lane_type_ = 1;
  clear_has_lane_type();
}
inline ::apollo::hdmap::Lane_LaneType LaneSequence::lane_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.lane_type)
  return static_cast< ::apollo::hdmap::Lane_LaneType >(lane_type_);
}
inline void LaneSequence::set_lane_type(::apollo::hdmap::Lane_LaneType value) {
  assert(::apollo::hdmap::Lane_LaneType_IsValid(value));
  set_has_lane_type();
  lane_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.lane_type)
}

// optional double lane_s = 17;
inline bool LaneSequence::has_lane_s() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LaneSequence::set_has_lane_s() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LaneSequence::clear_has_lane_s() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LaneSequence::clear_lane_s() {
  lane_s_ = 0;
  clear_has_lane_s();
}
inline double LaneSequence::lane_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.lane_s)
  return lane_s_;
}
inline void LaneSequence::set_lane_s(double value) {
  set_has_lane_s();
  lane_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.lane_s)
}

// optional double lane_l = 18;
inline bool LaneSequence::has_lane_l() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LaneSequence::set_has_lane_l() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LaneSequence::clear_has_lane_l() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LaneSequence::clear_lane_l() {
  lane_l_ = 0;
  clear_has_lane_l();
}
inline double LaneSequence::lane_l() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.lane_l)
  return lane_l_;
}
inline void LaneSequence::set_lane_l(double value) {
  set_has_lane_l();
  lane_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.lane_l)
}

// optional bool vehicle_on_lane = 10;
inline bool LaneSequence::has_vehicle_on_lane() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LaneSequence::set_has_vehicle_on_lane() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LaneSequence::clear_has_vehicle_on_lane() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LaneSequence::clear_vehicle_on_lane() {
  vehicle_on_lane_ = false;
  clear_has_vehicle_on_lane();
}
inline bool LaneSequence::vehicle_on_lane() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.vehicle_on_lane)
  return vehicle_on_lane_;
}
inline void LaneSequence::set_vehicle_on_lane(bool value) {
  set_has_vehicle_on_lane();
  vehicle_on_lane_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.vehicle_on_lane)
}

// repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
inline int LaneSequence::nearby_obstacle_size() const {
  return nearby_obstacle_.size();
}
inline void LaneSequence::clear_nearby_obstacle() {
  nearby_obstacle_.Clear();
}
inline ::apollo::prediction::NearbyObstacle* LaneSequence::mutable_nearby_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.nearby_obstacle)
  return nearby_obstacle_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >*
LaneSequence::mutable_nearby_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.nearby_obstacle)
  return &nearby_obstacle_;
}
inline const ::apollo::prediction::NearbyObstacle& LaneSequence::nearby_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.nearby_obstacle)
  return nearby_obstacle_.Get(index);
}
inline ::apollo::prediction::NearbyObstacle* LaneSequence::add_nearby_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.nearby_obstacle)
  return nearby_obstacle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >&
LaneSequence::nearby_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.nearby_obstacle)
  return nearby_obstacle_;
}

// optional .apollo.prediction.StopSign stop_sign = 20;
inline bool LaneSequence::has_stop_sign() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneSequence::set_has_stop_sign() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneSequence::clear_has_stop_sign() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneSequence::clear_stop_sign() {
  if (stop_sign_ != NULL) stop_sign_->Clear();
  clear_has_stop_sign();
}
inline const ::apollo::prediction::StopSign& LaneSequence::_internal_stop_sign() const {
  return *stop_sign_;
}
inline const ::apollo::prediction::StopSign& LaneSequence::stop_sign() const {
  const ::apollo::prediction::StopSign* p = stop_sign_;
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.stop_sign)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::prediction::StopSign*>(
      &::apollo::prediction::_StopSign_default_instance_);
}
inline ::apollo::prediction::StopSign* LaneSequence::release_stop_sign() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LaneSequence.stop_sign)
  clear_has_stop_sign();
  ::apollo::prediction::StopSign* temp = stop_sign_;
  stop_sign_ = NULL;
  return temp;
}
inline ::apollo::prediction::StopSign* LaneSequence::mutable_stop_sign() {
  set_has_stop_sign();
  if (stop_sign_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::prediction::StopSign>(GetArenaNoVirtual());
    stop_sign_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.stop_sign)
  return stop_sign_;
}
inline void LaneSequence::set_allocated_stop_sign(::apollo::prediction::StopSign* stop_sign) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stop_sign_;
  }
  if (stop_sign) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stop_sign = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stop_sign, submessage_arena);
    }
    set_has_stop_sign();
  } else {
    clear_has_stop_sign();
  }
  stop_sign_ = stop_sign;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LaneSequence.stop_sign)
}

// optional int32 right_of_way = 21;
inline bool LaneSequence::has_right_of_way() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LaneSequence::set_has_right_of_way() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LaneSequence::clear_has_right_of_way() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LaneSequence::clear_right_of_way() {
  right_of_way_ = 0;
  clear_has_right_of_way();
}
inline ::google::protobuf::int32 LaneSequence::right_of_way() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.right_of_way)
  return right_of_way_;
}
inline void LaneSequence::set_right_of_way(::google::protobuf::int32 value) {
  set_has_right_of_way();
  right_of_way_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.right_of_way)
}

// optional .apollo.prediction.LaneSequence.Features features = 4;
inline bool LaneSequence::has_features() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneSequence::set_has_features() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneSequence::clear_has_features() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneSequence::clear_features() {
  if (features_ != NULL) features_->Clear();
  clear_has_features();
}
inline const ::apollo::prediction::LaneSequence_Features& LaneSequence::_internal_features() const {
  return *features_;
}
inline const ::apollo::prediction::LaneSequence_Features& LaneSequence::features() const {
  const ::apollo::prediction::LaneSequence_Features* p = features_;
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.features)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::prediction::LaneSequence_Features*>(
      &::apollo::prediction::_LaneSequence_Features_default_instance_);
}
inline ::apollo::prediction::LaneSequence_Features* LaneSequence::release_features() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LaneSequence.features)
  clear_has_features();
  ::apollo::prediction::LaneSequence_Features* temp = features_;
  features_ = NULL;
  return temp;
}
inline ::apollo::prediction::LaneSequence_Features* LaneSequence::mutable_features() {
  set_has_features();
  if (features_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::prediction::LaneSequence_Features>(GetArenaNoVirtual());
    features_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.features)
  return features_;
}
inline void LaneSequence::set_allocated_features(::apollo::prediction::LaneSequence_Features* features) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete features_;
  }
  if (features) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      features = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, features, submessage_arena);
    }
    set_has_features();
  } else {
    clear_has_features();
  }
  features_ = features;
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LaneSequence.features)
}

// optional int32 label = 5 [default = 0];
inline bool LaneSequence::has_label() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneSequence::set_has_label() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneSequence::clear_has_label() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneSequence::clear_label() {
  label_ = 0;
  clear_has_label();
}
inline ::google::protobuf::int32 LaneSequence::label() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.label)
  return label_;
}
inline void LaneSequence::set_label(::google::protobuf::int32 value) {
  set_has_label();
  label_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.label)
}

// optional double probability = 6 [default = 0];
inline bool LaneSequence::has_probability() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LaneSequence::set_has_probability() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LaneSequence::clear_has_probability() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LaneSequence::clear_probability() {
  probability_ = 0;
  clear_has_probability();
}
inline double LaneSequence::probability() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.probability)
  return probability_;
}
inline void LaneSequence::set_probability(double value) {
  set_has_probability();
  probability_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.probability)
}

// optional double acceleration = 7 [default = 0];
inline bool LaneSequence::has_acceleration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LaneSequence::set_has_acceleration() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LaneSequence::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LaneSequence::clear_acceleration() {
  acceleration_ = 0;
  clear_has_acceleration();
}
inline double LaneSequence::acceleration() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.acceleration)
  return acceleration_;
}
inline void LaneSequence::set_acceleration(double value) {
  set_has_acceleration();
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.acceleration)
}

// optional double time_to_lane_center = 16;
inline bool LaneSequence::has_time_to_lane_center() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LaneSequence::set_has_time_to_lane_center() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LaneSequence::clear_has_time_to_lane_center() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LaneSequence::clear_time_to_lane_center() {
  time_to_lane_center_ = 0;
  clear_has_time_to_lane_center();
}
inline double LaneSequence::time_to_lane_center() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.time_to_lane_center)
  return time_to_lane_center_;
}
inline void LaneSequence::set_time_to_lane_center(double value) {
  set_has_time_to_lane_center();
  time_to_lane_center_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.time_to_lane_center)
}

// optional double time_to_lane_edge = 19;
inline bool LaneSequence::has_time_to_lane_edge() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LaneSequence::set_has_time_to_lane_edge() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LaneSequence::clear_has_time_to_lane_edge() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LaneSequence::clear_time_to_lane_edge() {
  time_to_lane_edge_ = 0;
  clear_has_time_to_lane_edge();
}
inline double LaneSequence::time_to_lane_edge() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.time_to_lane_edge)
  return time_to_lane_edge_;
}
inline void LaneSequence::set_time_to_lane_edge(double value) {
  set_has_time_to_lane_edge();
  time_to_lane_edge_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.time_to_lane_edge)
}

// optional .apollo.prediction.LaneSequence.BehaviorType behavior_type = 9;
inline bool LaneSequence::has_behavior_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LaneSequence::set_has_behavior_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LaneSequence::clear_has_behavior_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LaneSequence::clear_behavior_type() {
  behavior_type_ = 1;
  clear_has_behavior_type();
}
inline ::apollo::prediction::LaneSequence_BehaviorType LaneSequence::behavior_type() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.behavior_type)
  return static_cast< ::apollo::prediction::LaneSequence_BehaviorType >(behavior_type_);
}
inline void LaneSequence::set_behavior_type(::apollo::prediction::LaneSequence_BehaviorType value) {
  assert(::apollo::prediction::LaneSequence_BehaviorType_IsValid(value));
  set_has_behavior_type();
  behavior_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneSequence.behavior_type)
}

// repeated .apollo.prediction.LanePoint curr_lane_point = 11;
inline int LaneSequence::curr_lane_point_size() const {
  return curr_lane_point_.size();
}
inline void LaneSequence::clear_curr_lane_point() {
  curr_lane_point_.Clear();
}
inline ::apollo::prediction::LanePoint* LaneSequence::mutable_curr_lane_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.curr_lane_point)
  return curr_lane_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >*
LaneSequence::mutable_curr_lane_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.curr_lane_point)
  return &curr_lane_point_;
}
inline const ::apollo::prediction::LanePoint& LaneSequence::curr_lane_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.curr_lane_point)
  return curr_lane_point_.Get(index);
}
inline ::apollo::prediction::LanePoint* LaneSequence::add_curr_lane_point() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.curr_lane_point)
  return curr_lane_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >&
LaneSequence::curr_lane_point() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.curr_lane_point)
  return curr_lane_point_;
}

// repeated .apollo.prediction.LanePoint left_neighbor_point = 12;
inline int LaneSequence::left_neighbor_point_size() const {
  return left_neighbor_point_.size();
}
inline void LaneSequence::clear_left_neighbor_point() {
  left_neighbor_point_.Clear();
}
inline ::apollo::prediction::LanePoint* LaneSequence::mutable_left_neighbor_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.left_neighbor_point)
  return left_neighbor_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >*
LaneSequence::mutable_left_neighbor_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.left_neighbor_point)
  return &left_neighbor_point_;
}
inline const ::apollo::prediction::LanePoint& LaneSequence::left_neighbor_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.left_neighbor_point)
  return left_neighbor_point_.Get(index);
}
inline ::apollo::prediction::LanePoint* LaneSequence::add_left_neighbor_point() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.left_neighbor_point)
  return left_neighbor_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >&
LaneSequence::left_neighbor_point() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.left_neighbor_point)
  return left_neighbor_point_;
}

// repeated .apollo.prediction.LanePoint right_neighbor_point = 13;
inline int LaneSequence::right_neighbor_point_size() const {
  return right_neighbor_point_.size();
}
inline void LaneSequence::clear_right_neighbor_point() {
  right_neighbor_point_.Clear();
}
inline ::apollo::prediction::LanePoint* LaneSequence::mutable_right_neighbor_point(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.right_neighbor_point)
  return right_neighbor_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >*
LaneSequence::mutable_right_neighbor_point() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.right_neighbor_point)
  return &right_neighbor_point_;
}
inline const ::apollo::prediction::LanePoint& LaneSequence::right_neighbor_point(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.right_neighbor_point)
  return right_neighbor_point_.Get(index);
}
inline ::apollo::prediction::LanePoint* LaneSequence::add_right_neighbor_point() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.right_neighbor_point)
  return right_neighbor_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LanePoint >&
LaneSequence::right_neighbor_point() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.right_neighbor_point)
  return right_neighbor_point_;
}

// repeated .apollo.prediction.NearbyObstacle left_nearby_obstacle = 14;
inline int LaneSequence::left_nearby_obstacle_size() const {
  return left_nearby_obstacle_.size();
}
inline void LaneSequence::clear_left_nearby_obstacle() {
  left_nearby_obstacle_.Clear();
}
inline ::apollo::prediction::NearbyObstacle* LaneSequence::mutable_left_nearby_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.left_nearby_obstacle)
  return left_nearby_obstacle_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >*
LaneSequence::mutable_left_nearby_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.left_nearby_obstacle)
  return &left_nearby_obstacle_;
}
inline const ::apollo::prediction::NearbyObstacle& LaneSequence::left_nearby_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.left_nearby_obstacle)
  return left_nearby_obstacle_.Get(index);
}
inline ::apollo::prediction::NearbyObstacle* LaneSequence::add_left_nearby_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.left_nearby_obstacle)
  return left_nearby_obstacle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >&
LaneSequence::left_nearby_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.left_nearby_obstacle)
  return left_nearby_obstacle_;
}

// repeated .apollo.prediction.NearbyObstacle right_nearby_obstacle = 15;
inline int LaneSequence::right_nearby_obstacle_size() const {
  return right_nearby_obstacle_.size();
}
inline void LaneSequence::clear_right_nearby_obstacle() {
  right_nearby_obstacle_.Clear();
}
inline ::apollo::prediction::NearbyObstacle* LaneSequence::mutable_right_nearby_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneSequence.right_nearby_obstacle)
  return right_nearby_obstacle_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >*
LaneSequence::mutable_right_nearby_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneSequence.right_nearby_obstacle)
  return &right_nearby_obstacle_;
}
inline const ::apollo::prediction::NearbyObstacle& LaneSequence::right_nearby_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneSequence.right_nearby_obstacle)
  return right_nearby_obstacle_.Get(index);
}
inline ::apollo::prediction::NearbyObstacle* LaneSequence::add_right_nearby_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneSequence.right_nearby_obstacle)
  return right_nearby_obstacle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::NearbyObstacle >&
LaneSequence::right_nearby_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneSequence.right_nearby_obstacle)
  return right_nearby_obstacle_;
}

// -------------------------------------------------------------------

// LaneGraph

// repeated .apollo.prediction.LaneSequence lane_sequence = 1;
inline int LaneGraph::lane_sequence_size() const {
  return lane_sequence_.size();
}
inline void LaneGraph::clear_lane_sequence() {
  lane_sequence_.Clear();
}
inline ::apollo::prediction::LaneSequence* LaneGraph::mutable_lane_sequence(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneGraph.lane_sequence)
  return lane_sequence_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSequence >*
LaneGraph::mutable_lane_sequence() {
  // @@protoc_insertion_point(field_mutable_list:apollo.prediction.LaneGraph.lane_sequence)
  return &lane_sequence_;
}
inline const ::apollo::prediction::LaneSequence& LaneGraph::lane_sequence(int index) const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneGraph.lane_sequence)
  return lane_sequence_.Get(index);
}
inline ::apollo::prediction::LaneSequence* LaneGraph::add_lane_sequence() {
  // @@protoc_insertion_point(field_add:apollo.prediction.LaneGraph.lane_sequence)
  return lane_sequence_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::prediction::LaneSequence >&
LaneGraph::lane_sequence() const {
  // @@protoc_insertion_point(field_list:apollo.prediction.LaneGraph.lane_sequence)
  return lane_sequence_;
}

// -------------------------------------------------------------------

// LaneObstacle

// optional int32 obstacle_id = 1;
inline bool LaneObstacle::has_obstacle_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneObstacle::set_has_obstacle_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneObstacle::clear_has_obstacle_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneObstacle::clear_obstacle_id() {
  obstacle_id_ = 0;
  clear_has_obstacle_id();
}
inline ::google::protobuf::int32 LaneObstacle::obstacle_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneObstacle.obstacle_id)
  return obstacle_id_;
}
inline void LaneObstacle::set_obstacle_id(::google::protobuf::int32 value) {
  set_has_obstacle_id();
  obstacle_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneObstacle.obstacle_id)
}

// optional string lane_id = 2;
inline bool LaneObstacle::has_lane_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneObstacle::set_has_lane_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneObstacle::clear_has_lane_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneObstacle::clear_lane_id() {
  lane_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lane_id();
}
inline const ::std::string& LaneObstacle::lane_id() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneObstacle.lane_id)
  return lane_id_.GetNoArena();
}
inline void LaneObstacle::set_lane_id(const ::std::string& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneObstacle.lane_id)
}
#if LANG_CXX11
inline void LaneObstacle::set_lane_id(::std::string&& value) {
  set_has_lane_id();
  lane_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.prediction.LaneObstacle.lane_id)
}
#endif
inline void LaneObstacle::set_lane_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.prediction.LaneObstacle.lane_id)
}
inline void LaneObstacle::set_lane_id(const char* value, size_t size) {
  set_has_lane_id();
  lane_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.prediction.LaneObstacle.lane_id)
}
inline ::std::string* LaneObstacle::mutable_lane_id() {
  set_has_lane_id();
  // @@protoc_insertion_point(field_mutable:apollo.prediction.LaneObstacle.lane_id)
  return lane_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LaneObstacle::release_lane_id() {
  // @@protoc_insertion_point(field_release:apollo.prediction.LaneObstacle.lane_id)
  if (!has_lane_id()) {
    return NULL;
  }
  clear_has_lane_id();
  return lane_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LaneObstacle::set_allocated_lane_id(::std::string* lane_id) {
  if (lane_id != NULL) {
    set_has_lane_id();
  } else {
    clear_has_lane_id();
  }
  lane_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lane_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.prediction.LaneObstacle.lane_id)
}

// optional double lane_s = 3;
inline bool LaneObstacle::has_lane_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneObstacle::set_has_lane_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneObstacle::clear_has_lane_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneObstacle::clear_lane_s() {
  lane_s_ = 0;
  clear_has_lane_s();
}
inline double LaneObstacle::lane_s() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneObstacle.lane_s)
  return lane_s_;
}
inline void LaneObstacle::set_lane_s(double value) {
  set_has_lane_s();
  lane_s_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneObstacle.lane_s)
}

// optional double lane_l = 4;
inline bool LaneObstacle::has_lane_l() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneObstacle::set_has_lane_l() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneObstacle::clear_has_lane_l() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneObstacle::clear_lane_l() {
  lane_l_ = 0;
  clear_has_lane_l();
}
inline double LaneObstacle::lane_l() const {
  // @@protoc_insertion_point(field_get:apollo.prediction.LaneObstacle.lane_l)
  return lane_l_;
}
inline void LaneObstacle::set_lane_l(double value) {
  set_has_lane_l();
  lane_l_ = value;
  // @@protoc_insertion_point(field_set:apollo.prediction.LaneObstacle.lane_l)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::prediction::LanePoint_ScenarioType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::prediction::LanePoint_ScenarioType>() {
  return ::apollo::prediction::LanePoint_ScenarioType_descriptor();
}
template <> struct is_proto_enum< ::apollo::prediction::LaneSequence_BehaviorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::prediction::LaneSequence_BehaviorType>() {
  return ::apollo::prediction::LaneSequence_BehaviorType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fprediction_2fproto_2flane_5fgraph_2eproto
