// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/lane_graph.proto

#include "modules/prediction/proto/lane_graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point3D;
}  // namespace protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto
namespace protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PathPoint;
}  // namespace protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto
namespace protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LaneSequence_Features;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NearbyObstacle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StopSign;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LanePoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LaneSegment;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto ::google::protobuf::internal::SCCInfo<6> scc_info_LaneSequence;
}  // namespace protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto
namespace apollo {
namespace prediction {
class LanePointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LanePoint>
      _instance;
} _LanePoint_default_instance_;
class LaneSegmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneSegment>
      _instance;
} _LaneSegment_default_instance_;
class NearbyObstacleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NearbyObstacle>
      _instance;
} _NearbyObstacle_default_instance_;
class StopSignDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StopSign>
      _instance;
} _StopSign_default_instance_;
class LaneSequence_FeaturesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneSequence_Features>
      _instance;
} _LaneSequence_Features_default_instance_;
class LaneSequenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneSequence>
      _instance;
} _LaneSequence_default_instance_;
class LaneGraphDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneGraph>
      _instance;
} _LaneGraph_default_instance_;
class LaneObstacleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaneObstacle>
      _instance;
} _LaneObstacle_default_instance_;
}  // namespace prediction
}  // namespace apollo
namespace protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto {
static void InitDefaultsLanePoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_LanePoint_default_instance_;
    new (ptr) ::apollo::prediction::LanePoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::LanePoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LanePoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLanePoint}, {
      &protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::scc_info_Point3D.base,}};

static void InitDefaultsLaneSegment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_LaneSegment_default_instance_;
    new (ptr) ::apollo::prediction::LaneSegment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::LaneSegment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LaneSegment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLaneSegment}, {
      &protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_LanePoint.base,}};

static void InitDefaultsNearbyObstacle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_NearbyObstacle_default_instance_;
    new (ptr) ::apollo::prediction::NearbyObstacle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::NearbyObstacle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NearbyObstacle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNearbyObstacle}, {}};

static void InitDefaultsStopSign() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_StopSign_default_instance_;
    new (ptr) ::apollo::prediction::StopSign();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::StopSign::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StopSign =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStopSign}, {}};

static void InitDefaultsLaneSequence_Features() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_LaneSequence_Features_default_instance_;
    new (ptr) ::apollo::prediction::LaneSequence_Features();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::LaneSequence_Features::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LaneSequence_Features =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLaneSequence_Features}, {}};

static void InitDefaultsLaneSequence() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_LaneSequence_default_instance_;
    new (ptr) ::apollo::prediction::LaneSequence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::LaneSequence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_LaneSequence =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsLaneSequence}, {
      &protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_LaneSegment.base,
      &protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::scc_info_PathPoint.base,
      &protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_NearbyObstacle.base,
      &protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_StopSign.base,
      &protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_LaneSequence_Features.base,
      &protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_LanePoint.base,}};

static void InitDefaultsLaneGraph() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_LaneGraph_default_instance_;
    new (ptr) ::apollo::prediction::LaneGraph();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::LaneGraph::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LaneGraph =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLaneGraph}, {
      &protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_LaneSequence.base,}};

static void InitDefaultsLaneObstacle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_LaneObstacle_default_instance_;
    new (ptr) ::apollo::prediction::LaneObstacle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::LaneObstacle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LaneObstacle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLaneObstacle}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LanePoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneSegment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NearbyObstacle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StopSign.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneSequence_Features.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneSequence.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneGraph.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaneObstacle.base);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LanePoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LanePoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LanePoint, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LanePoint, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LanePoint, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LanePoint, relative_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LanePoint, relative_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LanePoint, angle_diff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LanePoint, kappa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LanePoint, scenario_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LanePoint, speed_limit_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSegment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSegment, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSegment, start_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSegment, end_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSegment, lane_turn_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSegment, lane_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSegment, adc_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSegment, adc_lane_point_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSegment, total_length_),
  0,
  1,
  2,
  4,
  ~0u,
  6,
  5,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::NearbyObstacle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::NearbyObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::NearbyObstacle, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::NearbyObstacle, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::NearbyObstacle, l_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::StopSign, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::StopSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::StopSign, stop_sign_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::StopSign, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::StopSign, lane_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::StopSign, lane_sequence_s_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence_Features, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence_Features, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence_Features, mlp_features_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, lane_sequence_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, lane_segment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, adc_lane_segment_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, path_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, lane_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, lane_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, lane_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, vehicle_on_lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, nearby_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, stop_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, right_of_way_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, features_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, probability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, time_to_lane_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, time_to_lane_edge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, behavior_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, curr_lane_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, left_neighbor_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, right_neighbor_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, left_nearby_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneSequence, right_nearby_obstacle_),
  2,
  ~0u,
  12,
  ~0u,
  14,
  9,
  10,
  6,
  ~0u,
  1,
  7,
  0,
  3,
  4,
  5,
  8,
  11,
  13,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneGraph, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneGraph, lane_sequence_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneObstacle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneObstacle, obstacle_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneObstacle, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneObstacle, lane_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::LaneObstacle, lane_l_),
  3,
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::apollo::prediction::LanePoint)},
  { 23, 36, sizeof(::apollo::prediction::LaneSegment)},
  { 44, 52, sizeof(::apollo::prediction::NearbyObstacle)},
  { 55, 64, sizeof(::apollo::prediction::StopSign)},
  { 68, 74, sizeof(::apollo::prediction::LaneSequence_Features)},
  { 75, 103, sizeof(::apollo::prediction::LaneSequence)},
  { 126, 132, sizeof(::apollo::prediction::LaneGraph)},
  { 133, 142, sizeof(::apollo::prediction::LaneObstacle)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_LanePoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_LaneSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_NearbyObstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_StopSign_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_LaneSequence_Features_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_LaneSequence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_LaneGraph_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_LaneObstacle_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/prediction/proto/lane_graph.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n)modules/prediction/proto/lane_graph.pr"
      "oto\022\021apollo.prediction\032#modules/common/p"
      "roto/geometry.proto\032$modules/common/prot"
      "o/pnc_point.proto\032 modules/map/proto/map"
      "_lane.proto\"\304\002\n\tLanePoint\022(\n\010position\030\001 "
      "\001(\0132\026.apollo.common.Point3D\022\022\n\007heading\030\002"
      " \001(\001:\0010\022\020\n\005width\030\003 \001(\001:\0010\022\025\n\nrelative_s\030"
      "\004 \001(\001:\0010\022\025\n\nrelative_l\030\005 \001(\001:\0010\022\025\n\nangle"
      "_diff\030\006 \001(\001:\0010\022\020\n\005kappa\030\007 \001(\001:\0010\022@\n\rscen"
      "ario_type\030\010 \001(\0162).apollo.prediction.Lane"
      "Point.ScenarioType\022\023\n\013speed_limit\030\t \001(\001\""
      "9\n\014ScenarioType\022\016\n\nURBAN_ROAD\020\000\022\014\n\010JUNCT"
      "ION\020\001\022\013\n\007HIGHWAY\020\002\"\333\001\n\013LaneSegment\022\017\n\007la"
      "ne_id\030\001 \001(\t\022\022\n\007start_s\030\002 \001(\001:\0010\022\020\n\005end_s"
      "\030\003 \001(\001:\0010\022\031\n\016lane_turn_type\030\004 \001(\r:\0010\0220\n\n"
      "lane_point\030\005 \003(\0132\034.apollo.prediction.Lan"
      "ePoint\022\020\n\005adc_s\030\007 \001(\001:\0010\022\035\n\022adc_lane_poi"
      "nt_idx\030\010 \001(\005:\0010\022\027\n\014total_length\030\006 \001(\001:\0010"
      "\"2\n\016NearbyObstacle\022\n\n\002id\030\001 \001(\005\022\t\n\001s\030\002 \001("
      "\001\022\t\n\001l\030\003 \001(\001\"Z\n\010StopSign\022\024\n\014stop_sign_id"
      "\030\001 \001(\t\022\017\n\007lane_id\030\002 \001(\t\022\016\n\006lane_s\030\003 \001(\001\022"
      "\027\n\017lane_sequence_s\030\004 \001(\001\"\377\010\n\014LaneSequenc"
      "e\022\030\n\020lane_sequence_id\030\001 \001(\005\0224\n\014lane_segm"
      "ent\030\002 \003(\0132\036.apollo.prediction.LaneSegmen"
      "t\022\037\n\024adc_lane_segment_idx\030\027 \001(\005:\0010\022,\n\npa"
      "th_point\030\010 \003(\0132\030.apollo.common.PathPoint"
      "\022.\n\tlane_type\030\026 \001(\0162\033.apollo.hdmap.Lane."
      "LaneType\022\016\n\006lane_s\030\021 \001(\001\022\016\n\006lane_l\030\022 \001(\001"
      "\022\027\n\017vehicle_on_lane\030\n \001(\010\022:\n\017nearby_obst"
      "acle\030\003 \003(\0132!.apollo.prediction.NearbyObs"
      "tacle\022.\n\tstop_sign\030\024 \001(\0132\033.apollo.predic"
      "tion.StopSign\022\024\n\014right_of_way\030\025 \001(\005\022:\n\010f"
      "eatures\030\004 \001(\0132(.apollo.prediction.LaneSe"
      "quence.Features\022\020\n\005label\030\005 \001(\005:\0010\022\026\n\013pro"
      "bability\030\006 \001(\001:\0010\022\027\n\014acceleration\030\007 \001(\001:"
      "\0010\022\033\n\023time_to_lane_center\030\020 \001(\001\022\031\n\021time_"
      "to_lane_edge\030\023 \001(\001\022C\n\rbehavior_type\030\t \001("
      "\0162,.apollo.prediction.LaneSequence.Behav"
      "iorType\0225\n\017curr_lane_point\030\013 \003(\0132\034.apoll"
      "o.prediction.LanePoint\0229\n\023left_neighbor_"
      "point\030\014 \003(\0132\034.apollo.prediction.LanePoin"
      "t\022:\n\024right_neighbor_point\030\r \003(\0132\034.apollo"
      ".prediction.LanePoint\022\?\n\024left_nearby_obs"
      "tacle\030\016 \003(\0132!.apollo.prediction.NearbyOb"
      "stacle\022@\n\025right_nearby_obstacle\030\017 \003(\0132!."
      "apollo.prediction.NearbyObstacle\032 \n\010Feat"
      "ures\022\024\n\014mlp_features\030\001 \003(\001\"\225\001\n\014BehaviorT"
      "ype\022\021\n\rNOT_GOTO_LANE\020\001\022\022\n\016CONSTANT_SPEED"
      "\020\002\022\026\n\022SMALL_ACCELERATION\020\003\022\026\n\022LARGE_ACCE"
      "LERATION\020\004\022\026\n\022SMALL_DECELERATION\020\005\022\026\n\022LA"
      "RGE_DECELERATION\020\006\"C\n\tLaneGraph\0226\n\rlane_"
      "sequence\030\001 \003(\0132\037.apollo.prediction.LaneS"
      "equence\"T\n\014LaneObstacle\022\023\n\013obstacle_id\030\001"
      " \001(\005\022\017\n\007lane_id\030\002 \001(\t\022\016\n\006lane_s\030\003 \001(\001\022\016\n"
      "\006lane_l\030\004 \001(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/prediction/proto/lane_graph.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::AddDescriptors();
  ::protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto
namespace apollo {
namespace prediction {
const ::google::protobuf::EnumDescriptor* LanePoint_ScenarioType_descriptor() {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_enum_descriptors[0];
}
bool LanePoint_ScenarioType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LanePoint_ScenarioType LanePoint::URBAN_ROAD;
const LanePoint_ScenarioType LanePoint::JUNCTION;
const LanePoint_ScenarioType LanePoint::HIGHWAY;
const LanePoint_ScenarioType LanePoint::ScenarioType_MIN;
const LanePoint_ScenarioType LanePoint::ScenarioType_MAX;
const int LanePoint::ScenarioType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LaneSequence_BehaviorType_descriptor() {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_enum_descriptors[1];
}
bool LaneSequence_BehaviorType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LaneSequence_BehaviorType LaneSequence::NOT_GOTO_LANE;
const LaneSequence_BehaviorType LaneSequence::CONSTANT_SPEED;
const LaneSequence_BehaviorType LaneSequence::SMALL_ACCELERATION;
const LaneSequence_BehaviorType LaneSequence::LARGE_ACCELERATION;
const LaneSequence_BehaviorType LaneSequence::SMALL_DECELERATION;
const LaneSequence_BehaviorType LaneSequence::LARGE_DECELERATION;
const LaneSequence_BehaviorType LaneSequence::BehaviorType_MIN;
const LaneSequence_BehaviorType LaneSequence::BehaviorType_MAX;
const int LaneSequence::BehaviorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void LanePoint::InitAsDefaultInstance() {
  ::apollo::prediction::_LanePoint_default_instance_._instance.get_mutable()->position_ = const_cast< ::apollo::common::Point3D*>(
      ::apollo::common::Point3D::internal_default_instance());
}
void LanePoint::clear_position() {
  if (position_ != NULL) position_->Clear();
  clear_has_position();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LanePoint::kPositionFieldNumber;
const int LanePoint::kHeadingFieldNumber;
const int LanePoint::kWidthFieldNumber;
const int LanePoint::kRelativeSFieldNumber;
const int LanePoint::kRelativeLFieldNumber;
const int LanePoint::kAngleDiffFieldNumber;
const int LanePoint::kKappaFieldNumber;
const int LanePoint::kScenarioTypeFieldNumber;
const int LanePoint::kSpeedLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LanePoint::LanePoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_LanePoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.LanePoint)
}
LanePoint::LanePoint(const LanePoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::apollo::common::Point3D(*from.position_);
  } else {
    position_ = NULL;
  }
  ::memcpy(&heading_, &from.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&scenario_type_) -
    reinterpret_cast<char*>(&heading_)) + sizeof(scenario_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LanePoint)
}

void LanePoint::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scenario_type_) -
      reinterpret_cast<char*>(&position_)) + sizeof(scenario_type_));
}

LanePoint::~LanePoint() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LanePoint)
  SharedDtor();
}

void LanePoint::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void LanePoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LanePoint::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LanePoint& LanePoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_LanePoint.base);
  return *internal_default_instance();
}


void LanePoint::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LanePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_ != NULL);
    position_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&speed_limit_) -
        reinterpret_cast<char*>(&heading_)) + sizeof(speed_limit_));
  }
  scenario_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LanePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.LanePoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.common.Point3D position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double relative_s = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_relative_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double relative_l = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_relative_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double angle_diff = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_angle_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double kappa = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_kappa();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &kappa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.prediction.LanePoint.ScenarioType scenario_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::prediction::LanePoint_ScenarioType_IsValid(value)) {
            set_scenario_type(static_cast< ::apollo::prediction::LanePoint_ScenarioType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_limit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.LanePoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.LanePoint)
  return false;
#undef DO_
}

void LanePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.LanePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Point3D position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_position(), output);
  }

  // optional double heading = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->heading(), output);
  }

  // optional double width = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->width(), output);
  }

  // optional double relative_s = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->relative_s(), output);
  }

  // optional double relative_l = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->relative_l(), output);
  }

  // optional double angle_diff = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->angle_diff(), output);
  }

  // optional double kappa = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->kappa(), output);
  }

  // optional .apollo.prediction.LanePoint.ScenarioType scenario_type = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->scenario_type(), output);
  }

  // optional double speed_limit = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->speed_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.LanePoint)
}

::google::protobuf::uint8* LanePoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LanePoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Point3D position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_position(), deterministic, target);
  }

  // optional double heading = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->heading(), target);
  }

  // optional double width = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->width(), target);
  }

  // optional double relative_s = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->relative_s(), target);
  }

  // optional double relative_l = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->relative_l(), target);
  }

  // optional double angle_diff = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->angle_diff(), target);
  }

  // optional double kappa = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->kappa(), target);
  }

  // optional .apollo.prediction.LanePoint.ScenarioType scenario_type = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->scenario_type(), target);
  }

  // optional double speed_limit = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->speed_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LanePoint)
  return target;
}

size_t LanePoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LanePoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.common.Point3D position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional double heading = 2 [default = 0];
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional double width = 3 [default = 0];
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double relative_s = 4 [default = 0];
    if (has_relative_s()) {
      total_size += 1 + 8;
    }

    // optional double relative_l = 5 [default = 0];
    if (has_relative_l()) {
      total_size += 1 + 8;
    }

    // optional double angle_diff = 6 [default = 0];
    if (has_angle_diff()) {
      total_size += 1 + 8;
    }

    // optional double kappa = 7 [default = 0];
    if (has_kappa()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 9;
    if (has_speed_limit()) {
      total_size += 1 + 8;
    }

  }
  // optional .apollo.prediction.LanePoint.ScenarioType scenario_type = 8;
  if (has_scenario_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->scenario_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LanePoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.LanePoint)
  GOOGLE_DCHECK_NE(&from, this);
  const LanePoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LanePoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.LanePoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.LanePoint)
    MergeFrom(*source);
  }
}

void LanePoint::MergeFrom(const LanePoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LanePoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::apollo::common::Point3D::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      relative_s_ = from.relative_s_;
    }
    if (cached_has_bits & 0x00000010u) {
      relative_l_ = from.relative_l_;
    }
    if (cached_has_bits & 0x00000020u) {
      angle_diff_ = from.angle_diff_;
    }
    if (cached_has_bits & 0x00000040u) {
      kappa_ = from.kappa_;
    }
    if (cached_has_bits & 0x00000080u) {
      speed_limit_ = from.speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_scenario_type(from.scenario_type());
  }
}

void LanePoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.LanePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LanePoint::CopyFrom(const LanePoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LanePoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LanePoint::IsInitialized() const {
  return true;
}

void LanePoint::Swap(LanePoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LanePoint::InternalSwap(LanePoint* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(heading_, other->heading_);
  swap(width_, other->width_);
  swap(relative_s_, other->relative_s_);
  swap(relative_l_, other->relative_l_);
  swap(angle_diff_, other->angle_diff_);
  swap(kappa_, other->kappa_);
  swap(speed_limit_, other->speed_limit_);
  swap(scenario_type_, other->scenario_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LanePoint::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneSegment::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneSegment::kLaneIdFieldNumber;
const int LaneSegment::kStartSFieldNumber;
const int LaneSegment::kEndSFieldNumber;
const int LaneSegment::kLaneTurnTypeFieldNumber;
const int LaneSegment::kLanePointFieldNumber;
const int LaneSegment::kAdcSFieldNumber;
const int LaneSegment::kAdcLanePointIdxFieldNumber;
const int LaneSegment::kTotalLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneSegment::LaneSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_LaneSegment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.LaneSegment)
}
LaneSegment::LaneSegment(const LaneSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      lane_point_(from.lane_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lane_id()) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&start_s_, &from.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&adc_s_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(adc_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneSegment)
}

void LaneSegment::SharedCtor() {
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adc_s_) -
      reinterpret_cast<char*>(&start_s_)) + sizeof(adc_s_));
}

LaneSegment::~LaneSegment() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneSegment)
  SharedDtor();
}

void LaneSegment::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LaneSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneSegment::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneSegment& LaneSegment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_LaneSegment.base);
  return *internal_default_instance();
}


void LaneSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_point_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lane_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 126u) {
    ::memset(&start_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adc_s_) -
        reinterpret_cast<char*>(&start_s_)) + sizeof(adc_s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.LaneSegment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string lane_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.prediction.LaneSegment.lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double start_s = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_start_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double end_s = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_end_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lane_turn_type = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_lane_turn_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_turn_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.prediction.LanePoint lane_point = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lane_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double total_length = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_total_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double adc_s = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_adc_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adc_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 adc_lane_point_idx = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_adc_lane_point_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adc_lane_point_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.LaneSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.LaneSegment)
  return false;
#undef DO_
}

void LaneSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.LaneSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LaneSegment.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lane_id(), output);
  }

  // optional double start_s = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->start_s(), output);
  }

  // optional double end_s = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->end_s(), output);
  }

  // optional uint32 lane_turn_type = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lane_turn_type(), output);
  }

  // repeated .apollo.prediction.LanePoint lane_point = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->lane_point(static_cast<int>(i)),
      output);
  }

  // optional double total_length = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->total_length(), output);
  }

  // optional double adc_s = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->adc_s(), output);
  }

  // optional int32 adc_lane_point_idx = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->adc_lane_point_idx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.LaneSegment)
}

::google::protobuf::uint8* LaneSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string lane_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LaneSegment.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lane_id(), target);
  }

  // optional double start_s = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->start_s(), target);
  }

  // optional double end_s = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->end_s(), target);
  }

  // optional uint32 lane_turn_type = 4 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lane_turn_type(), target);
  }

  // repeated .apollo.prediction.LanePoint lane_point = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->lane_point(static_cast<int>(i)), deterministic, target);
  }

  // optional double total_length = 6 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->total_length(), target);
  }

  // optional double adc_s = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->adc_s(), target);
  }

  // optional int32 adc_lane_point_idx = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->adc_lane_point_idx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneSegment)
  return target;
}

size_t LaneSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneSegment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.prediction.LanePoint lane_point = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_point(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string lane_id = 1;
    if (has_lane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lane_id());
    }

    // optional double start_s = 2 [default = 0];
    if (has_start_s()) {
      total_size += 1 + 8;
    }

    // optional double end_s = 3 [default = 0];
    if (has_end_s()) {
      total_size += 1 + 8;
    }

    // optional double total_length = 6 [default = 0];
    if (has_total_length()) {
      total_size += 1 + 8;
    }

    // optional uint32 lane_turn_type = 4 [default = 0];
    if (has_lane_turn_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lane_turn_type());
    }

    // optional int32 adc_lane_point_idx = 8 [default = 0];
    if (has_adc_lane_point_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_lane_point_idx());
    }

    // optional double adc_s = 7 [default = 0];
    if (has_adc_s()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.LaneSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.LaneSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.LaneSegment)
    MergeFrom(*source);
  }
}

void LaneSegment::MergeFrom(const LaneSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_point_.MergeFrom(from.lane_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_lane_id();
      lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      start_s_ = from.start_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_s_ = from.end_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      total_length_ = from.total_length_;
    }
    if (cached_has_bits & 0x00000010u) {
      lane_turn_type_ = from.lane_turn_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      adc_lane_point_idx_ = from.adc_lane_point_idx_;
    }
    if (cached_has_bits & 0x00000040u) {
      adc_s_ = from.adc_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.LaneSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSegment::CopyFrom(const LaneSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSegment::IsInitialized() const {
  return true;
}

void LaneSegment::Swap(LaneSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneSegment::InternalSwap(LaneSegment* other) {
  using std::swap;
  CastToBase(&lane_point_)->InternalSwap(CastToBase(&other->lane_point_));
  lane_id_.Swap(&other->lane_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_s_, other->start_s_);
  swap(end_s_, other->end_s_);
  swap(total_length_, other->total_length_);
  swap(lane_turn_type_, other->lane_turn_type_);
  swap(adc_lane_point_idx_, other->adc_lane_point_idx_);
  swap(adc_s_, other->adc_s_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneSegment::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NearbyObstacle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NearbyObstacle::kIdFieldNumber;
const int NearbyObstacle::kSFieldNumber;
const int NearbyObstacle::kLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NearbyObstacle::NearbyObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_NearbyObstacle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.NearbyObstacle)
}
NearbyObstacle::NearbyObstacle(const NearbyObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&s_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.NearbyObstacle)
}

void NearbyObstacle::SharedCtor() {
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&s_)) + sizeof(id_));
}

NearbyObstacle::~NearbyObstacle() {
  // @@protoc_insertion_point(destructor:apollo.prediction.NearbyObstacle)
  SharedDtor();
}

void NearbyObstacle::SharedDtor() {
}

void NearbyObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NearbyObstacle::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NearbyObstacle& NearbyObstacle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_NearbyObstacle.base);
  return *internal_default_instance();
}


void NearbyObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.NearbyObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&s_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NearbyObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.NearbyObstacle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double l = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.NearbyObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.NearbyObstacle)
  return false;
#undef DO_
}

void NearbyObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.NearbyObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double s = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->s(), output);
  }

  // optional double l = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->l(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.NearbyObstacle)
}

::google::protobuf::uint8* NearbyObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.NearbyObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double s = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->s(), target);
  }

  // optional double l = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->l(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.NearbyObstacle)
  return target;
}

size_t NearbyObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.NearbyObstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double s = 2;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double l = 3;
    if (has_l()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NearbyObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.NearbyObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const NearbyObstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NearbyObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.NearbyObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.NearbyObstacle)
    MergeFrom(*source);
  }
}

void NearbyObstacle::MergeFrom(const NearbyObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.NearbyObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      l_ = from.l_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NearbyObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.NearbyObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NearbyObstacle::CopyFrom(const NearbyObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.NearbyObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearbyObstacle::IsInitialized() const {
  return true;
}

void NearbyObstacle::Swap(NearbyObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NearbyObstacle::InternalSwap(NearbyObstacle* other) {
  using std::swap;
  swap(s_, other->s_);
  swap(l_, other->l_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NearbyObstacle::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StopSign::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StopSign::kStopSignIdFieldNumber;
const int StopSign::kLaneIdFieldNumber;
const int StopSign::kLaneSFieldNumber;
const int StopSign::kLaneSequenceSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopSign::StopSign()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_StopSign.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.StopSign)
}
StopSign::StopSign(const StopSign& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stop_sign_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stop_sign_id()) {
    stop_sign_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stop_sign_id_);
  }
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lane_id()) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&lane_s_, &from.lane_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_sequence_s_) -
    reinterpret_cast<char*>(&lane_s_)) + sizeof(lane_sequence_s_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.StopSign)
}

void StopSign::SharedCtor() {
  stop_sign_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lane_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_sequence_s_) -
      reinterpret_cast<char*>(&lane_s_)) + sizeof(lane_sequence_s_));
}

StopSign::~StopSign() {
  // @@protoc_insertion_point(destructor:apollo.prediction.StopSign)
  SharedDtor();
}

void StopSign::SharedDtor() {
  stop_sign_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StopSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StopSign::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StopSign& StopSign::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_StopSign.base);
  return *internal_default_instance();
}


void StopSign::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.StopSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      stop_sign_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      lane_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&lane_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lane_sequence_s_) -
        reinterpret_cast<char*>(&lane_s_)) + sizeof(lane_sequence_s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StopSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.StopSign)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stop_sign_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stop_sign_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stop_sign_id().data(), static_cast<int>(this->stop_sign_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.prediction.StopSign.stop_sign_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lane_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.prediction.StopSign.lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lane_s = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_lane_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lane_sequence_s = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_lane_sequence_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_sequence_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.StopSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.StopSign)
  return false;
#undef DO_
}

void StopSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.StopSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string stop_sign_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stop_sign_id().data(), static_cast<int>(this->stop_sign_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.StopSign.stop_sign_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->stop_sign_id(), output);
  }

  // optional string lane_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.StopSign.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lane_id(), output);
  }

  // optional double lane_s = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lane_s(), output);
  }

  // optional double lane_sequence_s = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lane_sequence_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.StopSign)
}

::google::protobuf::uint8* StopSign::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.StopSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string stop_sign_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stop_sign_id().data(), static_cast<int>(this->stop_sign_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.StopSign.stop_sign_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stop_sign_id(), target);
  }

  // optional string lane_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.StopSign.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lane_id(), target);
  }

  // optional double lane_s = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lane_s(), target);
  }

  // optional double lane_sequence_s = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lane_sequence_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.StopSign)
  return target;
}

size_t StopSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.StopSign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string stop_sign_id = 1;
    if (has_stop_sign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stop_sign_id());
    }

    // optional string lane_id = 2;
    if (has_lane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lane_id());
    }

    // optional double lane_s = 3;
    if (has_lane_s()) {
      total_size += 1 + 8;
    }

    // optional double lane_sequence_s = 4;
    if (has_lane_sequence_s()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopSign::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.StopSign)
  GOOGLE_DCHECK_NE(&from, this);
  const StopSign* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopSign>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.StopSign)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.StopSign)
    MergeFrom(*source);
  }
}

void StopSign::MergeFrom(const StopSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.StopSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_stop_sign_id();
      stop_sign_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stop_sign_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_lane_id();
      lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      lane_s_ = from.lane_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      lane_sequence_s_ = from.lane_sequence_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StopSign::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.StopSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopSign::CopyFrom(const StopSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.StopSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopSign::IsInitialized() const {
  return true;
}

void StopSign::Swap(StopSign* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopSign::InternalSwap(StopSign* other) {
  using std::swap;
  stop_sign_id_.Swap(&other->stop_sign_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lane_id_.Swap(&other->lane_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lane_s_, other->lane_s_);
  swap(lane_sequence_s_, other->lane_sequence_s_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StopSign::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneSequence_Features::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneSequence_Features::kMlpFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneSequence_Features::LaneSequence_Features()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_LaneSequence_Features.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.LaneSequence.Features)
}
LaneSequence_Features::LaneSequence_Features(const LaneSequence_Features& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      mlp_features_(from.mlp_features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneSequence.Features)
}

void LaneSequence_Features::SharedCtor() {
}

LaneSequence_Features::~LaneSequence_Features() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneSequence.Features)
  SharedDtor();
}

void LaneSequence_Features::SharedDtor() {
}

void LaneSequence_Features::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneSequence_Features::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneSequence_Features& LaneSequence_Features::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_LaneSequence_Features.base);
  return *internal_default_instance();
}


void LaneSequence_Features::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneSequence.Features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mlp_features_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneSequence_Features::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.LaneSequence.Features)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double mlp_features = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_mlp_features())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_mlp_features())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.LaneSequence.Features)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.LaneSequence.Features)
  return false;
#undef DO_
}

void LaneSequence_Features::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.LaneSequence.Features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double mlp_features = 1;
  for (int i = 0, n = this->mlp_features_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->mlp_features(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.LaneSequence.Features)
}

::google::protobuf::uint8* LaneSequence_Features::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneSequence.Features)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double mlp_features = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->mlp_features_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneSequence.Features)
  return target;
}

size_t LaneSequence_Features::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneSequence.Features)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated double mlp_features = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->mlp_features_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->mlp_features_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneSequence_Features::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.LaneSequence.Features)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneSequence_Features* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneSequence_Features>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.LaneSequence.Features)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.LaneSequence.Features)
    MergeFrom(*source);
  }
}

void LaneSequence_Features::MergeFrom(const LaneSequence_Features& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneSequence.Features)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mlp_features_.MergeFrom(from.mlp_features_);
}

void LaneSequence_Features::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.LaneSequence.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSequence_Features::CopyFrom(const LaneSequence_Features& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneSequence.Features)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSequence_Features::IsInitialized() const {
  return true;
}

void LaneSequence_Features::Swap(LaneSequence_Features* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneSequence_Features::InternalSwap(LaneSequence_Features* other) {
  using std::swap;
  mlp_features_.InternalSwap(&other->mlp_features_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneSequence_Features::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneSequence::InitAsDefaultInstance() {
  ::apollo::prediction::_LaneSequence_default_instance_._instance.get_mutable()->stop_sign_ = const_cast< ::apollo::prediction::StopSign*>(
      ::apollo::prediction::StopSign::internal_default_instance());
  ::apollo::prediction::_LaneSequence_default_instance_._instance.get_mutable()->features_ = const_cast< ::apollo::prediction::LaneSequence_Features*>(
      ::apollo::prediction::LaneSequence_Features::internal_default_instance());
}
void LaneSequence::clear_path_point() {
  path_point_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneSequence::kLaneSequenceIdFieldNumber;
const int LaneSequence::kLaneSegmentFieldNumber;
const int LaneSequence::kAdcLaneSegmentIdxFieldNumber;
const int LaneSequence::kPathPointFieldNumber;
const int LaneSequence::kLaneTypeFieldNumber;
const int LaneSequence::kLaneSFieldNumber;
const int LaneSequence::kLaneLFieldNumber;
const int LaneSequence::kVehicleOnLaneFieldNumber;
const int LaneSequence::kNearbyObstacleFieldNumber;
const int LaneSequence::kStopSignFieldNumber;
const int LaneSequence::kRightOfWayFieldNumber;
const int LaneSequence::kFeaturesFieldNumber;
const int LaneSequence::kLabelFieldNumber;
const int LaneSequence::kProbabilityFieldNumber;
const int LaneSequence::kAccelerationFieldNumber;
const int LaneSequence::kTimeToLaneCenterFieldNumber;
const int LaneSequence::kTimeToLaneEdgeFieldNumber;
const int LaneSequence::kBehaviorTypeFieldNumber;
const int LaneSequence::kCurrLanePointFieldNumber;
const int LaneSequence::kLeftNeighborPointFieldNumber;
const int LaneSequence::kRightNeighborPointFieldNumber;
const int LaneSequence::kLeftNearbyObstacleFieldNumber;
const int LaneSequence::kRightNearbyObstacleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneSequence::LaneSequence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_LaneSequence.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.LaneSequence)
}
LaneSequence::LaneSequence(const LaneSequence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      lane_segment_(from.lane_segment_),
      nearby_obstacle_(from.nearby_obstacle_),
      path_point_(from.path_point_),
      curr_lane_point_(from.curr_lane_point_),
      left_neighbor_point_(from.left_neighbor_point_),
      right_neighbor_point_(from.right_neighbor_point_),
      left_nearby_obstacle_(from.left_nearby_obstacle_),
      right_nearby_obstacle_(from.right_nearby_obstacle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_features()) {
    features_ = new ::apollo::prediction::LaneSequence_Features(*from.features_);
  } else {
    features_ = NULL;
  }
  if (from.has_stop_sign()) {
    stop_sign_ = new ::apollo::prediction::StopSign(*from.stop_sign_);
  } else {
    stop_sign_ = NULL;
  }
  ::memcpy(&lane_sequence_id_, &from.lane_sequence_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_type_) -
    reinterpret_cast<char*>(&lane_sequence_id_)) + sizeof(lane_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneSequence)
}

void LaneSequence::SharedCtor() {
  ::memset(&features_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&adc_lane_segment_idx_) -
      reinterpret_cast<char*>(&features_)) + sizeof(adc_lane_segment_idx_));
  behavior_type_ = 1;
  lane_type_ = 1;
}

LaneSequence::~LaneSequence() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneSequence)
  SharedDtor();
}

void LaneSequence::SharedDtor() {
  if (this != internal_default_instance()) delete features_;
  if (this != internal_default_instance()) delete stop_sign_;
}

void LaneSequence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneSequence::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneSequence& LaneSequence::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_LaneSequence.base);
  return *internal_default_instance();
}


void LaneSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneSequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_segment_.Clear();
  nearby_obstacle_.Clear();
  path_point_.Clear();
  curr_lane_point_.Clear();
  left_neighbor_point_.Clear();
  right_neighbor_point_.Clear();
  left_nearby_obstacle_.Clear();
  right_nearby_obstacle_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(features_ != NULL);
      features_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stop_sign_ != NULL);
      stop_sign_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&lane_sequence_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_of_way_) -
        reinterpret_cast<char*>(&lane_sequence_id_)) + sizeof(right_of_way_));
  }
  if (cached_has_bits & 32512u) {
    ::memset(&time_to_lane_center_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&adc_lane_segment_idx_) -
        reinterpret_cast<char*>(&time_to_lane_center_)) + sizeof(adc_lane_segment_idx_));
    behavior_type_ = 1;
    lane_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneSequence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.LaneSequence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lane_sequence_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_lane_sequence_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.prediction.LaneSegment lane_segment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lane_segment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nearby_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.prediction.LaneSequence.Features features = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 label = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double probability = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acceleration = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.common.PathPoint path_point = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_path_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.prediction.LaneSequence.BehaviorType behavior_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::prediction::LaneSequence_BehaviorType_IsValid(value)) {
            set_behavior_type(static_cast< ::apollo::prediction::LaneSequence_BehaviorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool vehicle_on_lane = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_vehicle_on_lane();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vehicle_on_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.prediction.LanePoint curr_lane_point = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_curr_lane_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.prediction.LanePoint left_neighbor_point = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_left_neighbor_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.prediction.LanePoint right_neighbor_point = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_right_neighbor_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.prediction.NearbyObstacle left_nearby_obstacle = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_left_nearby_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.prediction.NearbyObstacle right_nearby_obstacle = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_right_nearby_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time_to_lane_center = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {
          set_has_time_to_lane_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_to_lane_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lane_s = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_lane_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lane_l = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_lane_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double time_to_lane_edge = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u /* 153 & 0xFF */)) {
          set_has_time_to_lane_edge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_to_lane_edge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.prediction.StopSign stop_sign = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stop_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 right_of_way = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_right_of_way();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_of_way_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.hdmap.Lane.LaneType lane_type = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::hdmap::Lane_LaneType_IsValid(value)) {
            set_lane_type(static_cast< ::apollo::hdmap::Lane_LaneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                22, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 adc_lane_segment_idx = 23 [default = 0];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_adc_lane_segment_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adc_lane_segment_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.LaneSequence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.LaneSequence)
  return false;
#undef DO_
}

void LaneSequence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.LaneSequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_sequence_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lane_sequence_id(), output);
  }

  // repeated .apollo.prediction.LaneSegment lane_segment = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_segment_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->lane_segment(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nearby_obstacle_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->nearby_obstacle(static_cast<int>(i)),
      output);
  }

  // optional .apollo.prediction.LaneSequence.Features features = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_features(), output);
  }

  // optional int32 label = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->label(), output);
  }

  // optional double probability = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->probability(), output);
  }

  // optional double acceleration = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->acceleration(), output);
  }

  // repeated .apollo.common.PathPoint path_point = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->path_point(static_cast<int>(i)),
      output);
  }

  // optional .apollo.prediction.LaneSequence.BehaviorType behavior_type = 9;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->behavior_type(), output);
  }

  // optional bool vehicle_on_lane = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->vehicle_on_lane(), output);
  }

  // repeated .apollo.prediction.LanePoint curr_lane_point = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->curr_lane_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->curr_lane_point(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.prediction.LanePoint left_neighbor_point = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_neighbor_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->left_neighbor_point(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.prediction.LanePoint right_neighbor_point = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_neighbor_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->right_neighbor_point(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.prediction.NearbyObstacle left_nearby_obstacle = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_nearby_obstacle_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->left_nearby_obstacle(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.prediction.NearbyObstacle right_nearby_obstacle = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_nearby_obstacle_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->right_nearby_obstacle(static_cast<int>(i)),
      output);
  }

  // optional double time_to_lane_center = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->time_to_lane_center(), output);
  }

  // optional double lane_s = 17;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->lane_s(), output);
  }

  // optional double lane_l = 18;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->lane_l(), output);
  }

  // optional double time_to_lane_edge = 19;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->time_to_lane_edge(), output);
  }

  // optional .apollo.prediction.StopSign stop_sign = 20;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->_internal_stop_sign(), output);
  }

  // optional int32 right_of_way = 21;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->right_of_way(), output);
  }

  // optional .apollo.hdmap.Lane.LaneType lane_type = 22;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->lane_type(), output);
  }

  // optional int32 adc_lane_segment_idx = 23 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->adc_lane_segment_idx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.LaneSequence)
}

::google::protobuf::uint8* LaneSequence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneSequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_sequence_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lane_sequence_id(), target);
  }

  // repeated .apollo.prediction.LaneSegment lane_segment = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_segment_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->lane_segment(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nearby_obstacle_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->nearby_obstacle(static_cast<int>(i)), deterministic, target);
  }

  // optional .apollo.prediction.LaneSequence.Features features = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_features(), deterministic, target);
  }

  // optional int32 label = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->label(), target);
  }

  // optional double probability = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->probability(), target);
  }

  // optional double acceleration = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->acceleration(), target);
  }

  // repeated .apollo.common.PathPoint path_point = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->path_point(static_cast<int>(i)), deterministic, target);
  }

  // optional .apollo.prediction.LaneSequence.BehaviorType behavior_type = 9;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->behavior_type(), target);
  }

  // optional bool vehicle_on_lane = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->vehicle_on_lane(), target);
  }

  // repeated .apollo.prediction.LanePoint curr_lane_point = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->curr_lane_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->curr_lane_point(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.prediction.LanePoint left_neighbor_point = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_neighbor_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->left_neighbor_point(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.prediction.LanePoint right_neighbor_point = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_neighbor_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->right_neighbor_point(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.prediction.NearbyObstacle left_nearby_obstacle = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_nearby_obstacle_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->left_nearby_obstacle(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.prediction.NearbyObstacle right_nearby_obstacle = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_nearby_obstacle_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->right_nearby_obstacle(static_cast<int>(i)), deterministic, target);
  }

  // optional double time_to_lane_center = 16;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->time_to_lane_center(), target);
  }

  // optional double lane_s = 17;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->lane_s(), target);
  }

  // optional double lane_l = 18;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->lane_l(), target);
  }

  // optional double time_to_lane_edge = 19;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->time_to_lane_edge(), target);
  }

  // optional .apollo.prediction.StopSign stop_sign = 20;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->_internal_stop_sign(), deterministic, target);
  }

  // optional int32 right_of_way = 21;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->right_of_way(), target);
  }

  // optional .apollo.hdmap.Lane.LaneType lane_type = 22;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->lane_type(), target);
  }

  // optional int32 adc_lane_segment_idx = 23 [default = 0];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->adc_lane_segment_idx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneSequence)
  return target;
}

size_t LaneSequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneSequence)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.prediction.LaneSegment lane_segment = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_segment_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_segment(static_cast<int>(i)));
    }
  }

  // repeated .apollo.prediction.NearbyObstacle nearby_obstacle = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->nearby_obstacle_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nearby_obstacle(static_cast<int>(i)));
    }
  }

  // repeated .apollo.common.PathPoint path_point = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->path_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->path_point(static_cast<int>(i)));
    }
  }

  // repeated .apollo.prediction.LanePoint curr_lane_point = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->curr_lane_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->curr_lane_point(static_cast<int>(i)));
    }
  }

  // repeated .apollo.prediction.LanePoint left_neighbor_point = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->left_neighbor_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->left_neighbor_point(static_cast<int>(i)));
    }
  }

  // repeated .apollo.prediction.LanePoint right_neighbor_point = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->right_neighbor_point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->right_neighbor_point(static_cast<int>(i)));
    }
  }

  // repeated .apollo.prediction.NearbyObstacle left_nearby_obstacle = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->left_nearby_obstacle_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->left_nearby_obstacle(static_cast<int>(i)));
    }
  }

  // repeated .apollo.prediction.NearbyObstacle right_nearby_obstacle = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->right_nearby_obstacle_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->right_nearby_obstacle(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.prediction.LaneSequence.Features features = 4;
    if (has_features()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *features_);
    }

    // optional .apollo.prediction.StopSign stop_sign = 20;
    if (has_stop_sign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stop_sign_);
    }

    // optional int32 lane_sequence_id = 1;
    if (has_lane_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lane_sequence_id());
    }

    // optional int32 label = 5 [default = 0];
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }

    // optional double probability = 6 [default = 0];
    if (has_probability()) {
      total_size += 1 + 8;
    }

    // optional double acceleration = 7 [default = 0];
    if (has_acceleration()) {
      total_size += 1 + 8;
    }

    // optional bool vehicle_on_lane = 10;
    if (has_vehicle_on_lane()) {
      total_size += 1 + 1;
    }

    // optional int32 right_of_way = 21;
    if (has_right_of_way()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right_of_way());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional double time_to_lane_center = 16;
    if (has_time_to_lane_center()) {
      total_size += 2 + 8;
    }

    // optional double lane_s = 17;
    if (has_lane_s()) {
      total_size += 2 + 8;
    }

    // optional double lane_l = 18;
    if (has_lane_l()) {
      total_size += 2 + 8;
    }

    // optional double time_to_lane_edge = 19;
    if (has_time_to_lane_edge()) {
      total_size += 2 + 8;
    }

    // optional int32 adc_lane_segment_idx = 23 [default = 0];
    if (has_adc_lane_segment_idx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adc_lane_segment_idx());
    }

    // optional .apollo.prediction.LaneSequence.BehaviorType behavior_type = 9;
    if (has_behavior_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->behavior_type());
    }

    // optional .apollo.hdmap.Lane.LaneType lane_type = 22;
    if (has_lane_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lane_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneSequence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.LaneSequence)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneSequence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneSequence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.LaneSequence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.LaneSequence)
    MergeFrom(*source);
  }
}

void LaneSequence::MergeFrom(const LaneSequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneSequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_segment_.MergeFrom(from.lane_segment_);
  nearby_obstacle_.MergeFrom(from.nearby_obstacle_);
  path_point_.MergeFrom(from.path_point_);
  curr_lane_point_.MergeFrom(from.curr_lane_point_);
  left_neighbor_point_.MergeFrom(from.left_neighbor_point_);
  right_neighbor_point_.MergeFrom(from.right_neighbor_point_);
  left_nearby_obstacle_.MergeFrom(from.left_nearby_obstacle_);
  right_nearby_obstacle_.MergeFrom(from.right_nearby_obstacle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_features()->::apollo::prediction::LaneSequence_Features::MergeFrom(from.features());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_stop_sign()->::apollo::prediction::StopSign::MergeFrom(from.stop_sign());
    }
    if (cached_has_bits & 0x00000004u) {
      lane_sequence_id_ = from.lane_sequence_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      label_ = from.label_;
    }
    if (cached_has_bits & 0x00000010u) {
      probability_ = from.probability_;
    }
    if (cached_has_bits & 0x00000020u) {
      acceleration_ = from.acceleration_;
    }
    if (cached_has_bits & 0x00000040u) {
      vehicle_on_lane_ = from.vehicle_on_lane_;
    }
    if (cached_has_bits & 0x00000080u) {
      right_of_way_ = from.right_of_way_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      time_to_lane_center_ = from.time_to_lane_center_;
    }
    if (cached_has_bits & 0x00000200u) {
      lane_s_ = from.lane_s_;
    }
    if (cached_has_bits & 0x00000400u) {
      lane_l_ = from.lane_l_;
    }
    if (cached_has_bits & 0x00000800u) {
      time_to_lane_edge_ = from.time_to_lane_edge_;
    }
    if (cached_has_bits & 0x00001000u) {
      adc_lane_segment_idx_ = from.adc_lane_segment_idx_;
    }
    if (cached_has_bits & 0x00002000u) {
      behavior_type_ = from.behavior_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      lane_type_ = from.lane_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneSequence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.LaneSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSequence::CopyFrom(const LaneSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSequence::IsInitialized() const {
  return true;
}

void LaneSequence::Swap(LaneSequence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneSequence::InternalSwap(LaneSequence* other) {
  using std::swap;
  CastToBase(&lane_segment_)->InternalSwap(CastToBase(&other->lane_segment_));
  CastToBase(&nearby_obstacle_)->InternalSwap(CastToBase(&other->nearby_obstacle_));
  CastToBase(&path_point_)->InternalSwap(CastToBase(&other->path_point_));
  CastToBase(&curr_lane_point_)->InternalSwap(CastToBase(&other->curr_lane_point_));
  CastToBase(&left_neighbor_point_)->InternalSwap(CastToBase(&other->left_neighbor_point_));
  CastToBase(&right_neighbor_point_)->InternalSwap(CastToBase(&other->right_neighbor_point_));
  CastToBase(&left_nearby_obstacle_)->InternalSwap(CastToBase(&other->left_nearby_obstacle_));
  CastToBase(&right_nearby_obstacle_)->InternalSwap(CastToBase(&other->right_nearby_obstacle_));
  swap(features_, other->features_);
  swap(stop_sign_, other->stop_sign_);
  swap(lane_sequence_id_, other->lane_sequence_id_);
  swap(label_, other->label_);
  swap(probability_, other->probability_);
  swap(acceleration_, other->acceleration_);
  swap(vehicle_on_lane_, other->vehicle_on_lane_);
  swap(right_of_way_, other->right_of_way_);
  swap(time_to_lane_center_, other->time_to_lane_center_);
  swap(lane_s_, other->lane_s_);
  swap(lane_l_, other->lane_l_);
  swap(time_to_lane_edge_, other->time_to_lane_edge_);
  swap(adc_lane_segment_idx_, other->adc_lane_segment_idx_);
  swap(behavior_type_, other->behavior_type_);
  swap(lane_type_, other->lane_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneSequence::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneGraph::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneGraph::kLaneSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneGraph::LaneGraph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_LaneGraph.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.LaneGraph)
}
LaneGraph::LaneGraph(const LaneGraph& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      lane_sequence_(from.lane_sequence_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneGraph)
}

void LaneGraph::SharedCtor() {
}

LaneGraph::~LaneGraph() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneGraph)
  SharedDtor();
}

void LaneGraph::SharedDtor() {
}

void LaneGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneGraph::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneGraph& LaneGraph::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_LaneGraph.base);
  return *internal_default_instance();
}


void LaneGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_sequence_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneGraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.LaneGraph)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.prediction.LaneSequence lane_sequence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lane_sequence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.LaneGraph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.LaneGraph)
  return false;
#undef DO_
}

void LaneGraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.LaneGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.LaneSequence lane_sequence = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_sequence_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->lane_sequence(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.LaneGraph)
}

::google::protobuf::uint8* LaneGraph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.LaneSequence lane_sequence = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_sequence_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lane_sequence(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneGraph)
  return target;
}

size_t LaneGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneGraph)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.prediction.LaneSequence lane_sequence = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_sequence_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lane_sequence(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneGraph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.LaneGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneGraph* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneGraph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.LaneGraph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.LaneGraph)
    MergeFrom(*source);
  }
}

void LaneGraph::MergeFrom(const LaneGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_sequence_.MergeFrom(from.lane_sequence_);
}

void LaneGraph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.LaneGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneGraph::CopyFrom(const LaneGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneGraph::IsInitialized() const {
  return true;
}

void LaneGraph::Swap(LaneGraph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneGraph::InternalSwap(LaneGraph* other) {
  using std::swap;
  CastToBase(&lane_sequence_)->InternalSwap(CastToBase(&other->lane_sequence_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneGraph::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LaneObstacle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneObstacle::kObstacleIdFieldNumber;
const int LaneObstacle::kLaneIdFieldNumber;
const int LaneObstacle::kLaneSFieldNumber;
const int LaneObstacle::kLaneLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneObstacle::LaneObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_LaneObstacle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.LaneObstacle)
}
LaneObstacle::LaneObstacle(const LaneObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lane_id()) {
    lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
  }
  ::memcpy(&lane_s_, &from.lane_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&obstacle_id_) -
    reinterpret_cast<char*>(&lane_s_)) + sizeof(obstacle_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.LaneObstacle)
}

void LaneObstacle::SharedCtor() {
  lane_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lane_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obstacle_id_) -
      reinterpret_cast<char*>(&lane_s_)) + sizeof(obstacle_id_));
}

LaneObstacle::~LaneObstacle() {
  // @@protoc_insertion_point(destructor:apollo.prediction.LaneObstacle)
  SharedDtor();
}

void LaneObstacle::SharedDtor() {
  lane_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LaneObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LaneObstacle::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneObstacle& LaneObstacle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::scc_info_LaneObstacle.base);
  return *internal_default_instance();
}


void LaneObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.LaneObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    lane_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&lane_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obstacle_id_) -
        reinterpret_cast<char*>(&lane_s_)) + sizeof(obstacle_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.LaneObstacle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 obstacle_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_obstacle_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstacle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lane_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lane_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lane_id().data(), static_cast<int>(this->lane_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.prediction.LaneObstacle.lane_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lane_s = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_lane_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lane_l = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_lane_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.LaneObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.LaneObstacle)
  return false;
#undef DO_
}

void LaneObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.LaneObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 obstacle_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->obstacle_id(), output);
  }

  // optional string lane_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LaneObstacle.lane_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lane_id(), output);
  }

  // optional double lane_s = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lane_s(), output);
  }

  // optional double lane_l = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lane_l(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.LaneObstacle)
}

::google::protobuf::uint8* LaneObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.LaneObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 obstacle_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->obstacle_id(), target);
  }

  // optional string lane_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lane_id().data(), static_cast<int>(this->lane_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.LaneObstacle.lane_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lane_id(), target);
  }

  // optional double lane_s = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lane_s(), target);
  }

  // optional double lane_l = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lane_l(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.LaneObstacle)
  return target;
}

size_t LaneObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.LaneObstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string lane_id = 2;
    if (has_lane_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lane_id());
    }

    // optional double lane_s = 3;
    if (has_lane_s()) {
      total_size += 1 + 8;
    }

    // optional double lane_l = 4;
    if (has_lane_l()) {
      total_size += 1 + 8;
    }

    // optional int32 obstacle_id = 1;
    if (has_obstacle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obstacle_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.LaneObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneObstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.LaneObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.LaneObstacle)
    MergeFrom(*source);
  }
}

void LaneObstacle::MergeFrom(const LaneObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.LaneObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_lane_id();
      lane_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lane_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      lane_s_ = from.lane_s_;
    }
    if (cached_has_bits & 0x00000004u) {
      lane_l_ = from.lane_l_;
    }
    if (cached_has_bits & 0x00000008u) {
      obstacle_id_ = from.obstacle_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.LaneObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneObstacle::CopyFrom(const LaneObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.LaneObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneObstacle::IsInitialized() const {
  return true;
}

void LaneObstacle::Swap(LaneObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneObstacle::InternalSwap(LaneObstacle* other) {
  using std::swap;
  lane_id_.Swap(&other->lane_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lane_s_, other->lane_s_);
  swap(lane_l_, other->lane_l_);
  swap(obstacle_id_, other->obstacle_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaneObstacle::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2flane_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::LanePoint* Arena::CreateMaybeMessage< ::apollo::prediction::LanePoint >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::LanePoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::LaneSegment* Arena::CreateMaybeMessage< ::apollo::prediction::LaneSegment >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::LaneSegment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::NearbyObstacle* Arena::CreateMaybeMessage< ::apollo::prediction::NearbyObstacle >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::NearbyObstacle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::StopSign* Arena::CreateMaybeMessage< ::apollo::prediction::StopSign >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::StopSign >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::LaneSequence_Features* Arena::CreateMaybeMessage< ::apollo::prediction::LaneSequence_Features >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::LaneSequence_Features >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::LaneSequence* Arena::CreateMaybeMessage< ::apollo::prediction::LaneSequence >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::LaneSequence >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::LaneGraph* Arena::CreateMaybeMessage< ::apollo::prediction::LaneGraph >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::LaneGraph >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::LaneObstacle* Arena::CreateMaybeMessage< ::apollo::prediction::LaneObstacle >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::LaneObstacle >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
