// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/prediction/proto/vector_net.proto

#include "modules/prediction/proto/vector_net.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CarPosition;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VNVector;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Polyline;
}  // namespace protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto
namespace apollo {
namespace prediction {
class VNVectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VNVector>
      _instance;
} _VNVector_default_instance_;
class PolylineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Polyline>
      _instance;
} _Polyline_default_instance_;
class CarPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CarPosition>
      _instance;
} _CarPosition_default_instance_;
class VectorNetFeatureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VectorNetFeature>
      _instance;
} _VectorNetFeature_default_instance_;
class WorldCoordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorldCoord>
      _instance;
} _WorldCoord_default_instance_;
}  // namespace prediction
}  // namespace apollo
namespace protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto {
static void InitDefaultsVNVector() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_VNVector_default_instance_;
    new (ptr) ::apollo::prediction::VNVector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::VNVector::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VNVector =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVNVector}, {}};

static void InitDefaultsPolyline() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_Polyline_default_instance_;
    new (ptr) ::apollo::prediction::Polyline();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::Polyline::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Polyline =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPolyline}, {
      &protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::scc_info_VNVector.base,}};

static void InitDefaultsCarPosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_CarPosition_default_instance_;
    new (ptr) ::apollo::prediction::CarPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::CarPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CarPosition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCarPosition}, {}};

static void InitDefaultsVectorNetFeature() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_VectorNetFeature_default_instance_;
    new (ptr) ::apollo::prediction::VectorNetFeature();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::VectorNetFeature::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_VectorNetFeature =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsVectorNetFeature}, {
      &protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::scc_info_CarPosition.base,
      &protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::scc_info_Polyline.base,}};

static void InitDefaultsWorldCoord() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::prediction::_WorldCoord_default_instance_;
    new (ptr) ::apollo::prediction::WorldCoord();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::prediction::WorldCoord::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WorldCoord =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWorldCoord}, {
      &protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::scc_info_CarPosition.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_VNVector.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Polyline.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CarPosition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VectorNetFeature.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorldCoord.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::VNVector, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::VNVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::VNVector, element_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Polyline, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Polyline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Polyline, vector_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Polyline, p_id_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::Polyline, p_id_y_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::CarPosition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::CarPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::CarPosition, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::CarPosition, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::CarPosition, phi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::CarPosition, id_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::VectorNetFeature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::VectorNetFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::VectorNetFeature, car_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::VectorNetFeature, polyline_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::WorldCoord, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::WorldCoord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::prediction::WorldCoord, pose_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::apollo::prediction::VNVector)},
  { 7, 15, sizeof(::apollo::prediction::Polyline)},
  { 18, 27, sizeof(::apollo::prediction::CarPosition)},
  { 31, 38, sizeof(::apollo::prediction::VectorNetFeature)},
  { 40, 46, sizeof(::apollo::prediction::WorldCoord)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_VNVector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_Polyline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_CarPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_VectorNetFeature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::prediction::_WorldCoord_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/prediction/proto/vector_net.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n)modules/prediction/proto/vector_net.pr"
      "oto\022\021apollo.prediction\"\033\n\010VNVector\022\017\n\007el"
      "ement\030\001 \003(\001\"W\n\010Polyline\022+\n\006vector\030\001 \003(\0132"
      "\033.apollo.prediction.VNVector\022\016\n\006p_id_x\030\002"
      " \001(\001\022\016\n\006p_id_y\030\003 \001(\001\"<\n\013CarPosition\022\t\n\001x"
      "\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\013\n\003phi\030\003 \001(\001\022\n\n\002id\030\004 \001"
      "(\t\"w\n\020VectorNetFeature\0224\n\014car_position\030\001"
      " \001(\0132\036.apollo.prediction.CarPosition\022-\n\010"
      "polyline\030\002 \003(\0132\033.apollo.prediction.Polyl"
      "ine\":\n\nWorldCoord\022,\n\004pose\030\001 \003(\0132\036.apollo"
      ".prediction.CarPosition"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 423);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/prediction/proto/vector_net.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto
namespace apollo {
namespace prediction {

// ===================================================================

void VNVector::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VNVector::kElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VNVector::VNVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::scc_info_VNVector.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.VNVector)
}
VNVector::VNVector(const VNVector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      element_(from.element_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.VNVector)
}

void VNVector::SharedCtor() {
}

VNVector::~VNVector() {
  // @@protoc_insertion_point(destructor:apollo.prediction.VNVector)
  SharedDtor();
}

void VNVector::SharedDtor() {
}

void VNVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VNVector::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VNVector& VNVector::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::scc_info_VNVector.base);
  return *internal_default_instance();
}


void VNVector::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.VNVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VNVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.VNVector)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double element = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9u, input, this->mutable_element())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_element())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.VNVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.VNVector)
  return false;
#undef DO_
}

void VNVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.VNVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double element = 1;
  for (int i = 0, n = this->element_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->element(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.VNVector)
}

::google::protobuf::uint8* VNVector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.VNVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double element = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(1, this->element_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.VNVector)
  return target;
}

size_t VNVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.VNVector)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated double element = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->element_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->element_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VNVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.VNVector)
  GOOGLE_DCHECK_NE(&from, this);
  const VNVector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VNVector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.VNVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.VNVector)
    MergeFrom(*source);
  }
}

void VNVector::MergeFrom(const VNVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.VNVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
}

void VNVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.VNVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VNVector::CopyFrom(const VNVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.VNVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VNVector::IsInitialized() const {
  return true;
}

void VNVector::Swap(VNVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VNVector::InternalSwap(VNVector* other) {
  using std::swap;
  element_.InternalSwap(&other->element_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VNVector::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Polyline::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polyline::kVectorFieldNumber;
const int Polyline::kPIdXFieldNumber;
const int Polyline::kPIdYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polyline::Polyline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::scc_info_Polyline.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.Polyline)
}
Polyline::Polyline(const Polyline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      vector_(from.vector_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&p_id_x_, &from.p_id_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&p_id_y_) -
    reinterpret_cast<char*>(&p_id_x_)) + sizeof(p_id_y_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.Polyline)
}

void Polyline::SharedCtor() {
  ::memset(&p_id_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p_id_y_) -
      reinterpret_cast<char*>(&p_id_x_)) + sizeof(p_id_y_));
}

Polyline::~Polyline() {
  // @@protoc_insertion_point(destructor:apollo.prediction.Polyline)
  SharedDtor();
}

void Polyline::SharedDtor() {
}

void Polyline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Polyline::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Polyline& Polyline::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::scc_info_Polyline.base);
  return *internal_default_instance();
}


void Polyline::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.Polyline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vector_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&p_id_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&p_id_y_) -
        reinterpret_cast<char*>(&p_id_x_)) + sizeof(p_id_y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Polyline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.Polyline)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.prediction.VNVector vector = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double p_id_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_p_id_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p_id_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double p_id_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_p_id_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p_id_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.Polyline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.Polyline)
  return false;
#undef DO_
}

void Polyline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.Polyline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.VNVector vector = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vector_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->vector(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional double p_id_x = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->p_id_x(), output);
  }

  // optional double p_id_y = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->p_id_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.Polyline)
}

::google::protobuf::uint8* Polyline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.Polyline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.VNVector vector = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vector_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->vector(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional double p_id_x = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->p_id_x(), target);
  }

  // optional double p_id_y = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->p_id_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.Polyline)
  return target;
}

size_t Polyline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.Polyline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.prediction.VNVector vector = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->vector_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vector(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional double p_id_x = 2;
    if (has_p_id_x()) {
      total_size += 1 + 8;
    }

    // optional double p_id_y = 3;
    if (has_p_id_y()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polyline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.Polyline)
  GOOGLE_DCHECK_NE(&from, this);
  const Polyline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Polyline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.Polyline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.Polyline)
    MergeFrom(*source);
  }
}

void Polyline::MergeFrom(const Polyline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.Polyline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vector_.MergeFrom(from.vector_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      p_id_x_ = from.p_id_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      p_id_y_ = from.p_id_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Polyline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.Polyline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polyline::CopyFrom(const Polyline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.Polyline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polyline::IsInitialized() const {
  return true;
}

void Polyline::Swap(Polyline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polyline::InternalSwap(Polyline* other) {
  using std::swap;
  CastToBase(&vector_)->InternalSwap(CastToBase(&other->vector_));
  swap(p_id_x_, other->p_id_x_);
  swap(p_id_y_, other->p_id_y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Polyline::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CarPosition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CarPosition::kXFieldNumber;
const int CarPosition::kYFieldNumber;
const int CarPosition::kPhiFieldNumber;
const int CarPosition::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CarPosition::CarPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::scc_info_CarPosition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.CarPosition)
}
CarPosition::CarPosition(const CarPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&phi_) -
    reinterpret_cast<char*>(&x_)) + sizeof(phi_));
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.CarPosition)
}

void CarPosition::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phi_) -
      reinterpret_cast<char*>(&x_)) + sizeof(phi_));
}

CarPosition::~CarPosition() {
  // @@protoc_insertion_point(destructor:apollo.prediction.CarPosition)
  SharedDtor();
}

void CarPosition::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CarPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CarPosition::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CarPosition& CarPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::scc_info_CarPosition.base);
  return *internal_default_instance();
}


void CarPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.CarPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&phi_) -
        reinterpret_cast<char*>(&x_)) + sizeof(phi_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CarPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.CarPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double phi = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_phi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.prediction.CarPosition.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.CarPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.CarPosition)
  return false;
#undef DO_
}

void CarPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.CarPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double phi = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->phi(), output);
  }

  // optional string id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.CarPosition.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.CarPosition)
}

::google::protobuf::uint8* CarPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.CarPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double phi = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->phi(), target);
  }

  // optional string id = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.prediction.CarPosition.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.CarPosition)
  return target;
}

size_t CarPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.CarPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double phi = 3;
    if (has_phi()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CarPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.CarPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CarPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CarPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.CarPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.CarPosition)
    MergeFrom(*source);
  }
}

void CarPosition::MergeFrom(const CarPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.CarPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      phi_ = from.phi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CarPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.CarPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarPosition::CopyFrom(const CarPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.CarPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarPosition::IsInitialized() const {
  return true;
}

void CarPosition::Swap(CarPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CarPosition::InternalSwap(CarPosition* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(phi_, other->phi_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CarPosition::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VectorNetFeature::InitAsDefaultInstance() {
  ::apollo::prediction::_VectorNetFeature_default_instance_._instance.get_mutable()->car_position_ = const_cast< ::apollo::prediction::CarPosition*>(
      ::apollo::prediction::CarPosition::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VectorNetFeature::kCarPositionFieldNumber;
const int VectorNetFeature::kPolylineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VectorNetFeature::VectorNetFeature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::scc_info_VectorNetFeature.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.VectorNetFeature)
}
VectorNetFeature::VectorNetFeature(const VectorNetFeature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      polyline_(from.polyline_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_car_position()) {
    car_position_ = new ::apollo::prediction::CarPosition(*from.car_position_);
  } else {
    car_position_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.VectorNetFeature)
}

void VectorNetFeature::SharedCtor() {
  car_position_ = NULL;
}

VectorNetFeature::~VectorNetFeature() {
  // @@protoc_insertion_point(destructor:apollo.prediction.VectorNetFeature)
  SharedDtor();
}

void VectorNetFeature::SharedDtor() {
  if (this != internal_default_instance()) delete car_position_;
}

void VectorNetFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VectorNetFeature::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VectorNetFeature& VectorNetFeature::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::scc_info_VectorNetFeature.base);
  return *internal_default_instance();
}


void VectorNetFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.VectorNetFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polyline_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(car_position_ != NULL);
    car_position_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VectorNetFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.VectorNetFeature)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.prediction.CarPosition car_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_car_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.prediction.Polyline polyline = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_polyline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.VectorNetFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.VectorNetFeature)
  return false;
#undef DO_
}

void VectorNetFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.VectorNetFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.prediction.CarPosition car_position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_car_position(), output);
  }

  // repeated .apollo.prediction.Polyline polyline = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polyline_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->polyline(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.VectorNetFeature)
}

::google::protobuf::uint8* VectorNetFeature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.VectorNetFeature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.prediction.CarPosition car_position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_car_position(), deterministic, target);
  }

  // repeated .apollo.prediction.Polyline polyline = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polyline_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->polyline(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.VectorNetFeature)
  return target;
}

size_t VectorNetFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.VectorNetFeature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.prediction.Polyline polyline = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->polyline_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->polyline(static_cast<int>(i)));
    }
  }

  // optional .apollo.prediction.CarPosition car_position = 1;
  if (has_car_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *car_position_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorNetFeature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.VectorNetFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorNetFeature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VectorNetFeature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.VectorNetFeature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.VectorNetFeature)
    MergeFrom(*source);
  }
}

void VectorNetFeature::MergeFrom(const VectorNetFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.VectorNetFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polyline_.MergeFrom(from.polyline_);
  if (from.has_car_position()) {
    mutable_car_position()->::apollo::prediction::CarPosition::MergeFrom(from.car_position());
  }
}

void VectorNetFeature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.VectorNetFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorNetFeature::CopyFrom(const VectorNetFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.VectorNetFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorNetFeature::IsInitialized() const {
  return true;
}

void VectorNetFeature::Swap(VectorNetFeature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VectorNetFeature::InternalSwap(VectorNetFeature* other) {
  using std::swap;
  CastToBase(&polyline_)->InternalSwap(CastToBase(&other->polyline_));
  swap(car_position_, other->car_position_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VectorNetFeature::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WorldCoord::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorldCoord::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorldCoord::WorldCoord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::scc_info_WorldCoord.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.prediction.WorldCoord)
}
WorldCoord::WorldCoord(const WorldCoord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      pose_(from.pose_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.prediction.WorldCoord)
}

void WorldCoord::SharedCtor() {
}

WorldCoord::~WorldCoord() {
  // @@protoc_insertion_point(destructor:apollo.prediction.WorldCoord)
  SharedDtor();
}

void WorldCoord::SharedDtor() {
}

void WorldCoord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WorldCoord::descriptor() {
  ::protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WorldCoord& WorldCoord::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::scc_info_WorldCoord.base);
  return *internal_default_instance();
}


void WorldCoord::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.prediction.WorldCoord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pose_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WorldCoord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.prediction.WorldCoord)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.prediction.CarPosition pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.prediction.WorldCoord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.prediction.WorldCoord)
  return false;
#undef DO_
}

void WorldCoord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.prediction.WorldCoord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.CarPosition pose = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pose_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->pose(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.prediction.WorldCoord)
}

::google::protobuf::uint8* WorldCoord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.prediction.WorldCoord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.prediction.CarPosition pose = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pose_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->pose(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.prediction.WorldCoord)
  return target;
}

size_t WorldCoord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.prediction.WorldCoord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.prediction.CarPosition pose = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->pose_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pose(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorldCoord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.prediction.WorldCoord)
  GOOGLE_DCHECK_NE(&from, this);
  const WorldCoord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorldCoord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.prediction.WorldCoord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.prediction.WorldCoord)
    MergeFrom(*source);
  }
}

void WorldCoord::MergeFrom(const WorldCoord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.prediction.WorldCoord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pose_.MergeFrom(from.pose_);
}

void WorldCoord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.prediction.WorldCoord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldCoord::CopyFrom(const WorldCoord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.prediction.WorldCoord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldCoord::IsInitialized() const {
  return true;
}

void WorldCoord::Swap(WorldCoord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorldCoord::InternalSwap(WorldCoord* other) {
  using std::swap;
  CastToBase(&pose_)->InternalSwap(CastToBase(&other->pose_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WorldCoord::GetMetadata() const {
  protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fprediction_2fproto_2fvector_5fnet_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::VNVector* Arena::CreateMaybeMessage< ::apollo::prediction::VNVector >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::VNVector >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::Polyline* Arena::CreateMaybeMessage< ::apollo::prediction::Polyline >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::Polyline >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::CarPosition* Arena::CreateMaybeMessage< ::apollo::prediction::CarPosition >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::CarPosition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::VectorNetFeature* Arena::CreateMaybeMessage< ::apollo::prediction::VectorNetFeature >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::VectorNetFeature >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::prediction::WorldCoord* Arena::CreateMaybeMessage< ::apollo::prediction::WorldCoord >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::prediction::WorldCoord >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
