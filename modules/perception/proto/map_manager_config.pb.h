// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/map_manager_config.proto

#ifndef PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fmap_5fmanager_5fconfig_2eproto
#define PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fmap_5fmanager_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fperception_2fproto_2fmap_5fmanager_5fconfig_2eproto 

namespace protobuf_modules_2fperception_2fproto_2fmap_5fmanager_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fperception_2fproto_2fmap_5fmanager_5fconfig_2eproto
namespace apollo {
namespace perception {
namespace lidar {
class MapManagerConfig;
class MapManagerConfigDefaultTypeInternal;
extern MapManagerConfigDefaultTypeInternal _MapManagerConfig_default_instance_;
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::perception::lidar::MapManagerConfig* Arena::CreateMaybeMessage<::apollo::perception::lidar::MapManagerConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace perception {
namespace lidar {

// ===================================================================

class MapManagerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.lidar.MapManagerConfig) */ {
 public:
  MapManagerConfig();
  virtual ~MapManagerConfig();

  MapManagerConfig(const MapManagerConfig& from);

  inline MapManagerConfig& operator=(const MapManagerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapManagerConfig(MapManagerConfig&& from) noexcept
    : MapManagerConfig() {
    *this = ::std::move(from);
  }

  inline MapManagerConfig& operator=(MapManagerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapManagerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapManagerConfig* internal_default_instance() {
    return reinterpret_cast<const MapManagerConfig*>(
               &_MapManagerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MapManagerConfig* other);
  friend void swap(MapManagerConfig& a, MapManagerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapManagerConfig* New() const final {
    return CreateMaybeMessage<MapManagerConfig>(NULL);
  }

  MapManagerConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MapManagerConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MapManagerConfig& from);
  void MergeFrom(const MapManagerConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapManagerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double lane_range = 3;
  bool has_lane_range() const;
  void clear_lane_range();
  static const int kLaneRangeFieldNumber = 3;
  double lane_range() const;
  void set_lane_range(double value);

  // optional double max_depth = 4;
  bool has_max_depth() const;
  void clear_max_depth();
  static const int kMaxDepthFieldNumber = 4;
  double max_depth() const;
  void set_max_depth(double value);

  // optional bool update_pose = 1 [default = false];
  bool has_update_pose() const;
  void clear_update_pose();
  static const int kUpdatePoseFieldNumber = 1;
  bool update_pose() const;
  void set_update_pose(bool value);

  // optional double roi_search_distance = 2 [default = 80];
  bool has_roi_search_distance() const;
  void clear_roi_search_distance();
  static const int kRoiSearchDistanceFieldNumber = 2;
  double roi_search_distance() const;
  void set_roi_search_distance(double value);

  // @@protoc_insertion_point(class_scope:apollo.perception.lidar.MapManagerConfig)
 private:
  void set_has_update_pose();
  void clear_has_update_pose();
  void set_has_roi_search_distance();
  void clear_has_roi_search_distance();
  void set_has_lane_range();
  void clear_has_lane_range();
  void set_has_max_depth();
  void clear_has_max_depth();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double lane_range_;
  double max_depth_;
  bool update_pose_;
  double roi_search_distance_;
  friend struct ::protobuf_modules_2fperception_2fproto_2fmap_5fmanager_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapManagerConfig

// optional bool update_pose = 1 [default = false];
inline bool MapManagerConfig::has_update_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapManagerConfig::set_has_update_pose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapManagerConfig::clear_has_update_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapManagerConfig::clear_update_pose() {
  update_pose_ = false;
  clear_has_update_pose();
}
inline bool MapManagerConfig::update_pose() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.MapManagerConfig.update_pose)
  return update_pose_;
}
inline void MapManagerConfig::set_update_pose(bool value) {
  set_has_update_pose();
  update_pose_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.MapManagerConfig.update_pose)
}

// optional double roi_search_distance = 2 [default = 80];
inline bool MapManagerConfig::has_roi_search_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MapManagerConfig::set_has_roi_search_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MapManagerConfig::clear_has_roi_search_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MapManagerConfig::clear_roi_search_distance() {
  roi_search_distance_ = 80;
  clear_has_roi_search_distance();
}
inline double MapManagerConfig::roi_search_distance() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.MapManagerConfig.roi_search_distance)
  return roi_search_distance_;
}
inline void MapManagerConfig::set_roi_search_distance(double value) {
  set_has_roi_search_distance();
  roi_search_distance_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.MapManagerConfig.roi_search_distance)
}

// optional double lane_range = 3;
inline bool MapManagerConfig::has_lane_range() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapManagerConfig::set_has_lane_range() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapManagerConfig::clear_has_lane_range() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapManagerConfig::clear_lane_range() {
  lane_range_ = 0;
  clear_has_lane_range();
}
inline double MapManagerConfig::lane_range() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.MapManagerConfig.lane_range)
  return lane_range_;
}
inline void MapManagerConfig::set_lane_range(double value) {
  set_has_lane_range();
  lane_range_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.MapManagerConfig.lane_range)
}

// optional double max_depth = 4;
inline bool MapManagerConfig::has_max_depth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapManagerConfig::set_has_max_depth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapManagerConfig::clear_has_max_depth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapManagerConfig::clear_max_depth() {
  max_depth_ = 0;
  clear_has_max_depth();
}
inline double MapManagerConfig::max_depth() const {
  // @@protoc_insertion_point(field_get:apollo.perception.lidar.MapManagerConfig.max_depth)
  return max_depth_;
}
inline void MapManagerConfig::set_max_depth(double value) {
  set_has_max_depth();
  max_depth_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.lidar.MapManagerConfig.max_depth)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace lidar
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fmap_5fmanager_5fconfig_2eproto
