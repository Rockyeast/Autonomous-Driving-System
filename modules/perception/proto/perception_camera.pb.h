// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/perception_camera.proto

#ifndef PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fperception_5fcamera_2eproto
#define PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fperception_5fcamera_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/geometry.pb.h"
#include "modules/common/proto/header.pb.h"
#include "modules/perception/proto/perception_obstacle.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fperception_2fproto_2fperception_5fcamera_2eproto 

namespace protobuf_modules_2fperception_2fproto_2fperception_5fcamera_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fperception_2fproto_2fperception_5fcamera_2eproto
namespace apollo {
namespace perception {
namespace camera {
class CameraCalibrator;
class CameraCalibratorDefaultTypeInternal;
extern CameraCalibratorDefaultTypeInternal _CameraCalibrator_default_instance_;
class CameraDebug;
class CameraDebugDefaultTypeInternal;
extern CameraDebugDefaultTypeInternal _CameraDebug_default_instance_;
class CameraLaneLine;
class CameraLaneLineDefaultTypeInternal;
extern CameraLaneLineDefaultTypeInternal _CameraLaneLine_default_instance_;
class CameraObstacle;
class CameraObstacleDefaultTypeInternal;
extern CameraObstacleDefaultTypeInternal _CameraObstacle_default_instance_;
class EndPoints;
class EndPointsDefaultTypeInternal;
extern EndPointsDefaultTypeInternal _EndPoints_default_instance_;
class LaneLineCubicCurve;
class LaneLineCubicCurveDefaultTypeInternal;
extern LaneLineCubicCurveDefaultTypeInternal _LaneLineCubicCurve_default_instance_;
}  // namespace camera
}  // namespace perception
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::perception::camera::CameraCalibrator* Arena::CreateMaybeMessage<::apollo::perception::camera::CameraCalibrator>(Arena*);
template<> ::apollo::perception::camera::CameraDebug* Arena::CreateMaybeMessage<::apollo::perception::camera::CameraDebug>(Arena*);
template<> ::apollo::perception::camera::CameraLaneLine* Arena::CreateMaybeMessage<::apollo::perception::camera::CameraLaneLine>(Arena*);
template<> ::apollo::perception::camera::CameraObstacle* Arena::CreateMaybeMessage<::apollo::perception::camera::CameraObstacle>(Arena*);
template<> ::apollo::perception::camera::EndPoints* Arena::CreateMaybeMessage<::apollo::perception::camera::EndPoints>(Arena*);
template<> ::apollo::perception::camera::LaneLineCubicCurve* Arena::CreateMaybeMessage<::apollo::perception::camera::LaneLineCubicCurve>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace perception {
namespace camera {

enum CameraObstacle_CameraType {
  CameraObstacle_CameraType_UNKNOWN = 0,
  CameraObstacle_CameraType_UNKNOWN_MOVABLE = 1,
  CameraObstacle_CameraType_UNKNOWN_UNMOVABLE = 2,
  CameraObstacle_CameraType_PEDESTRIAN = 3,
  CameraObstacle_CameraType_BICYCLE = 4,
  CameraObstacle_CameraType_VEHICLE = 5
};
bool CameraObstacle_CameraType_IsValid(int value);
const CameraObstacle_CameraType CameraObstacle_CameraType_CameraType_MIN = CameraObstacle_CameraType_UNKNOWN;
const CameraObstacle_CameraType CameraObstacle_CameraType_CameraType_MAX = CameraObstacle_CameraType_VEHICLE;
const int CameraObstacle_CameraType_CameraType_ARRAYSIZE = CameraObstacle_CameraType_CameraType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CameraObstacle_CameraType_descriptor();
inline const ::std::string& CameraObstacle_CameraType_Name(CameraObstacle_CameraType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraObstacle_CameraType_descriptor(), value);
}
inline bool CameraObstacle_CameraType_Parse(
    const ::std::string& name, CameraObstacle_CameraType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraObstacle_CameraType>(
    CameraObstacle_CameraType_descriptor(), name, value);
}
enum CameraErrorCode {
  ERROR_NONE = 0,
  ERROR_UNKNOWN = 1
};
bool CameraErrorCode_IsValid(int value);
const CameraErrorCode CameraErrorCode_MIN = ERROR_NONE;
const CameraErrorCode CameraErrorCode_MAX = ERROR_UNKNOWN;
const int CameraErrorCode_ARRAYSIZE = CameraErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CameraErrorCode_descriptor();
inline const ::std::string& CameraErrorCode_Name(CameraErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CameraErrorCode_descriptor(), value);
}
inline bool CameraErrorCode_Parse(
    const ::std::string& name, CameraErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraErrorCode>(
    CameraErrorCode_descriptor(), name, value);
}
enum LaneLineType {
  WHITE_DASHED = 0,
  WHITE_SOLID = 1,
  YELLOW_DASHED = 2,
  YELLOW_SOLID = 3
};
bool LaneLineType_IsValid(int value);
const LaneLineType LaneLineType_MIN = WHITE_DASHED;
const LaneLineType LaneLineType_MAX = YELLOW_SOLID;
const int LaneLineType_ARRAYSIZE = LaneLineType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneLineType_descriptor();
inline const ::std::string& LaneLineType_Name(LaneLineType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneLineType_descriptor(), value);
}
inline bool LaneLineType_Parse(
    const ::std::string& name, LaneLineType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneLineType>(
    LaneLineType_descriptor(), name, value);
}
enum LaneLinePositionType {
  BOLLARD_LEFT = -5,
  FOURTH_LEFT = -4,
  THIRD_LEFT = -3,
  ADJACENT_LEFT = -2,
  EGO_LEFT = -1,
  EGO_RIGHT = 1,
  ADJACENT_RIGHT = 2,
  THIRD_RIGHT = 3,
  FOURTH_RIGHT = 4,
  BOLLARD_RIGHT = 5,
  OTHER = 6,
  UNKNOWN = 7
};
bool LaneLinePositionType_IsValid(int value);
const LaneLinePositionType LaneLinePositionType_MIN = BOLLARD_LEFT;
const LaneLinePositionType LaneLinePositionType_MAX = UNKNOWN;
const int LaneLinePositionType_ARRAYSIZE = LaneLinePositionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneLinePositionType_descriptor();
inline const ::std::string& LaneLinePositionType_Name(LaneLinePositionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneLinePositionType_descriptor(), value);
}
inline bool LaneLinePositionType_Parse(
    const ::std::string& name, LaneLinePositionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneLinePositionType>(
    LaneLinePositionType_descriptor(), name, value);
}
enum LaneLineUseType {
  REAL = 0,
  VIRTUAL = 1
};
bool LaneLineUseType_IsValid(int value);
const LaneLineUseType LaneLineUseType_MIN = REAL;
const LaneLineUseType LaneLineUseType_MAX = VIRTUAL;
const int LaneLineUseType_ARRAYSIZE = LaneLineUseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneLineUseType_descriptor();
inline const ::std::string& LaneLineUseType_Name(LaneLineUseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneLineUseType_descriptor(), value);
}
inline bool LaneLineUseType_Parse(
    const ::std::string& name, LaneLineUseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneLineUseType>(
    LaneLineUseType_descriptor(), name, value);
}
// ===================================================================

class LaneLineCubicCurve : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.LaneLineCubicCurve) */ {
 public:
  LaneLineCubicCurve();
  virtual ~LaneLineCubicCurve();

  LaneLineCubicCurve(const LaneLineCubicCurve& from);

  inline LaneLineCubicCurve& operator=(const LaneLineCubicCurve& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneLineCubicCurve(LaneLineCubicCurve&& from) noexcept
    : LaneLineCubicCurve() {
    *this = ::std::move(from);
  }

  inline LaneLineCubicCurve& operator=(LaneLineCubicCurve&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneLineCubicCurve& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneLineCubicCurve* internal_default_instance() {
    return reinterpret_cast<const LaneLineCubicCurve*>(
               &_LaneLineCubicCurve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LaneLineCubicCurve* other);
  friend void swap(LaneLineCubicCurve& a, LaneLineCubicCurve& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneLineCubicCurve* New() const final {
    return CreateMaybeMessage<LaneLineCubicCurve>(NULL);
  }

  LaneLineCubicCurve* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaneLineCubicCurve>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaneLineCubicCurve& from);
  void MergeFrom(const LaneLineCubicCurve& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneLineCubicCurve* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float longitude_min = 1;
  bool has_longitude_min() const;
  void clear_longitude_min();
  static const int kLongitudeMinFieldNumber = 1;
  float longitude_min() const;
  void set_longitude_min(float value);

  // optional float longitude_max = 2;
  bool has_longitude_max() const;
  void clear_longitude_max();
  static const int kLongitudeMaxFieldNumber = 2;
  float longitude_max() const;
  void set_longitude_max(float value);

  // optional float a = 3;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 3;
  float a() const;
  void set_a(float value);

  // optional float b = 4;
  bool has_b() const;
  void clear_b();
  static const int kBFieldNumber = 4;
  float b() const;
  void set_b(float value);

  // optional float c = 5;
  bool has_c() const;
  void clear_c();
  static const int kCFieldNumber = 5;
  float c() const;
  void set_c(float value);

  // optional float d = 6;
  bool has_d() const;
  void clear_d();
  static const int kDFieldNumber = 6;
  float d() const;
  void set_d(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.LaneLineCubicCurve)
 private:
  void set_has_longitude_min();
  void clear_has_longitude_min();
  void set_has_longitude_max();
  void clear_has_longitude_max();
  void set_has_a();
  void clear_has_a();
  void set_has_b();
  void clear_has_b();
  void set_has_c();
  void clear_has_c();
  void set_has_d();
  void clear_has_d();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float longitude_min_;
  float longitude_max_;
  float a_;
  float b_;
  float c_;
  float d_;
  friend struct ::protobuf_modules_2fperception_2fproto_2fperception_5fcamera_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EndPoints : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.EndPoints) */ {
 public:
  EndPoints();
  virtual ~EndPoints();

  EndPoints(const EndPoints& from);

  inline EndPoints& operator=(const EndPoints& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EndPoints(EndPoints&& from) noexcept
    : EndPoints() {
    *this = ::std::move(from);
  }

  inline EndPoints& operator=(EndPoints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EndPoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndPoints* internal_default_instance() {
    return reinterpret_cast<const EndPoints*>(
               &_EndPoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EndPoints* other);
  friend void swap(EndPoints& a, EndPoints& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndPoints* New() const final {
    return CreateMaybeMessage<EndPoints>(NULL);
  }

  EndPoints* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EndPoints>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EndPoints& from);
  void MergeFrom(const EndPoints& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndPoints* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.Point2D start = 1;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 1;
  private:
  const ::apollo::common::Point2D& _internal_start() const;
  public:
  const ::apollo::common::Point2D& start() const;
  ::apollo::common::Point2D* release_start();
  ::apollo::common::Point2D* mutable_start();
  void set_allocated_start(::apollo::common::Point2D* start);

  // optional .apollo.common.Point2D end = 2;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 2;
  private:
  const ::apollo::common::Point2D& _internal_end() const;
  public:
  const ::apollo::common::Point2D& end() const;
  ::apollo::common::Point2D* release_end();
  ::apollo::common::Point2D* mutable_end();
  void set_allocated_end(::apollo::common::Point2D* end);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.EndPoints)
 private:
  void set_has_start();
  void clear_has_start();
  void set_has_end();
  void clear_has_end();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::common::Point2D* start_;
  ::apollo::common::Point2D* end_;
  friend struct ::protobuf_modules_2fperception_2fproto_2fperception_5fcamera_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CameraLaneLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.CameraLaneLine) */ {
 public:
  CameraLaneLine();
  virtual ~CameraLaneLine();

  CameraLaneLine(const CameraLaneLine& from);

  inline CameraLaneLine& operator=(const CameraLaneLine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraLaneLine(CameraLaneLine&& from) noexcept
    : CameraLaneLine() {
    *this = ::std::move(from);
  }

  inline CameraLaneLine& operator=(CameraLaneLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraLaneLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraLaneLine* internal_default_instance() {
    return reinterpret_cast<const CameraLaneLine*>(
               &_CameraLaneLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CameraLaneLine* other);
  friend void swap(CameraLaneLine& a, CameraLaneLine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraLaneLine* New() const final {
    return CreateMaybeMessage<CameraLaneLine>(NULL);
  }

  CameraLaneLine* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraLaneLine>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraLaneLine& from);
  void MergeFrom(const CameraLaneLine& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraLaneLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.common.Point3D curve_camera_point_set = 5;
  int curve_camera_point_set_size() const;
  void clear_curve_camera_point_set();
  static const int kCurveCameraPointSetFieldNumber = 5;
  ::apollo::common::Point3D* mutable_curve_camera_point_set(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >*
      mutable_curve_camera_point_set();
  const ::apollo::common::Point3D& curve_camera_point_set(int index) const;
  ::apollo::common::Point3D* add_curve_camera_point_set();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >&
      curve_camera_point_set() const;

  // repeated .apollo.common.Point2D curve_image_point_set = 6;
  int curve_image_point_set_size() const;
  void clear_curve_image_point_set();
  static const int kCurveImagePointSetFieldNumber = 6;
  ::apollo::common::Point2D* mutable_curve_image_point_set(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::common::Point2D >*
      mutable_curve_image_point_set();
  const ::apollo::common::Point2D& curve_image_point_set(int index) const;
  ::apollo::common::Point2D* add_curve_image_point_set();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::Point2D >&
      curve_image_point_set() const;

  // repeated .apollo.perception.camera.EndPoints image_end_point_set = 7;
  int image_end_point_set_size() const;
  void clear_image_end_point_set();
  static const int kImageEndPointSetFieldNumber = 7;
  ::apollo::perception::camera::EndPoints* mutable_image_end_point_set(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::EndPoints >*
      mutable_image_end_point_set();
  const ::apollo::perception::camera::EndPoints& image_end_point_set(int index) const;
  ::apollo::perception::camera::EndPoints* add_image_end_point_set();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::EndPoints >&
      image_end_point_set() const;

  // optional .apollo.perception.camera.LaneLineCubicCurve curve_camera_coord = 3;
  bool has_curve_camera_coord() const;
  void clear_curve_camera_coord();
  static const int kCurveCameraCoordFieldNumber = 3;
  private:
  const ::apollo::perception::camera::LaneLineCubicCurve& _internal_curve_camera_coord() const;
  public:
  const ::apollo::perception::camera::LaneLineCubicCurve& curve_camera_coord() const;
  ::apollo::perception::camera::LaneLineCubicCurve* release_curve_camera_coord();
  ::apollo::perception::camera::LaneLineCubicCurve* mutable_curve_camera_coord();
  void set_allocated_curve_camera_coord(::apollo::perception::camera::LaneLineCubicCurve* curve_camera_coord);

  // optional .apollo.perception.camera.LaneLineCubicCurve curve_image_coord = 4;
  bool has_curve_image_coord() const;
  void clear_curve_image_coord();
  static const int kCurveImageCoordFieldNumber = 4;
  private:
  const ::apollo::perception::camera::LaneLineCubicCurve& _internal_curve_image_coord() const;
  public:
  const ::apollo::perception::camera::LaneLineCubicCurve& curve_image_coord() const;
  ::apollo::perception::camera::LaneLineCubicCurve* release_curve_image_coord();
  ::apollo::perception::camera::LaneLineCubicCurve* mutable_curve_image_coord();
  void set_allocated_curve_image_coord(::apollo::perception::camera::LaneLineCubicCurve* curve_image_coord);

  // optional .apollo.perception.camera.LaneLineType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::apollo::perception::camera::LaneLineType type() const;
  void set_type(::apollo::perception::camera::LaneLineType value);

  // optional int32 track_id = 8;
  bool has_track_id() const;
  void clear_track_id();
  static const int kTrackIdFieldNumber = 8;
  ::google::protobuf::int32 track_id() const;
  void set_track_id(::google::protobuf::int32 value);

  // optional float confidence = 9;
  bool has_confidence() const;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 9;
  float confidence() const;
  void set_confidence(float value);

  // optional .apollo.perception.camera.LaneLineUseType use_type = 10;
  bool has_use_type() const;
  void clear_use_type();
  static const int kUseTypeFieldNumber = 10;
  ::apollo::perception::camera::LaneLineUseType use_type() const;
  void set_use_type(::apollo::perception::camera::LaneLineUseType value);

  // optional .apollo.perception.camera.LaneLinePositionType pos_type = 2;
  bool has_pos_type() const;
  void clear_pos_type();
  static const int kPosTypeFieldNumber = 2;
  ::apollo::perception::camera::LaneLinePositionType pos_type() const;
  void set_pos_type(::apollo::perception::camera::LaneLinePositionType value);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.CameraLaneLine)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_pos_type();
  void clear_has_pos_type();
  void set_has_curve_camera_coord();
  void clear_has_curve_camera_coord();
  void set_has_curve_image_coord();
  void clear_has_curve_image_coord();
  void set_has_track_id();
  void clear_has_track_id();
  void set_has_confidence();
  void clear_has_confidence();
  void set_has_use_type();
  void clear_has_use_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D > curve_camera_point_set_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::Point2D > curve_image_point_set_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::EndPoints > image_end_point_set_;
  ::apollo::perception::camera::LaneLineCubicCurve* curve_camera_coord_;
  ::apollo::perception::camera::LaneLineCubicCurve* curve_image_coord_;
  int type_;
  ::google::protobuf::int32 track_id_;
  float confidence_;
  int use_type_;
  int pos_type_;
  friend struct ::protobuf_modules_2fperception_2fproto_2fperception_5fcamera_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CameraCalibrator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.CameraCalibrator) */ {
 public:
  CameraCalibrator();
  virtual ~CameraCalibrator();

  CameraCalibrator(const CameraCalibrator& from);

  inline CameraCalibrator& operator=(const CameraCalibrator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraCalibrator(CameraCalibrator&& from) noexcept
    : CameraCalibrator() {
    *this = ::std::move(from);
  }

  inline CameraCalibrator& operator=(CameraCalibrator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraCalibrator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraCalibrator* internal_default_instance() {
    return reinterpret_cast<const CameraCalibrator*>(
               &_CameraCalibrator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CameraCalibrator* other);
  friend void swap(CameraCalibrator& a, CameraCalibrator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraCalibrator* New() const final {
    return CreateMaybeMessage<CameraCalibrator>(NULL);
  }

  CameraCalibrator* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraCalibrator>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraCalibrator& from);
  void MergeFrom(const CameraCalibrator& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraCalibrator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float pitch_angle = 1;
  bool has_pitch_angle() const;
  void clear_pitch_angle();
  static const int kPitchAngleFieldNumber = 1;
  float pitch_angle() const;
  void set_pitch_angle(float value);

  // optional float camera_height = 2;
  bool has_camera_height() const;
  void clear_camera_height();
  static const int kCameraHeightFieldNumber = 2;
  float camera_height() const;
  void set_camera_height(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.CameraCalibrator)
 private:
  void set_has_pitch_angle();
  void clear_has_pitch_angle();
  void set_has_camera_height();
  void clear_has_camera_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float pitch_angle_;
  float camera_height_;
  friend struct ::protobuf_modules_2fperception_2fproto_2fperception_5fcamera_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CameraObstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.CameraObstacle) */ {
 public:
  CameraObstacle();
  virtual ~CameraObstacle();

  CameraObstacle(const CameraObstacle& from);

  inline CameraObstacle& operator=(const CameraObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraObstacle(CameraObstacle&& from) noexcept
    : CameraObstacle() {
    *this = ::std::move(from);
  }

  inline CameraObstacle& operator=(CameraObstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraObstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraObstacle* internal_default_instance() {
    return reinterpret_cast<const CameraObstacle*>(
               &_CameraObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CameraObstacle* other);
  friend void swap(CameraObstacle& a, CameraObstacle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraObstacle* New() const final {
    return CreateMaybeMessage<CameraObstacle>(NULL);
  }

  CameraObstacle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraObstacle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraObstacle& from);
  void MergeFrom(const CameraObstacle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CameraObstacle_CameraType CameraType;
  static const CameraType UNKNOWN =
    CameraObstacle_CameraType_UNKNOWN;
  static const CameraType UNKNOWN_MOVABLE =
    CameraObstacle_CameraType_UNKNOWN_MOVABLE;
  static const CameraType UNKNOWN_UNMOVABLE =
    CameraObstacle_CameraType_UNKNOWN_UNMOVABLE;
  static const CameraType PEDESTRIAN =
    CameraObstacle_CameraType_PEDESTRIAN;
  static const CameraType BICYCLE =
    CameraObstacle_CameraType_BICYCLE;
  static const CameraType VEHICLE =
    CameraObstacle_CameraType_VEHICLE;
  static inline bool CameraType_IsValid(int value) {
    return CameraObstacle_CameraType_IsValid(value);
  }
  static const CameraType CameraType_MIN =
    CameraObstacle_CameraType_CameraType_MIN;
  static const CameraType CameraType_MAX =
    CameraObstacle_CameraType_CameraType_MAX;
  static const int CameraType_ARRAYSIZE =
    CameraObstacle_CameraType_CameraType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CameraType_descriptor() {
    return CameraObstacle_CameraType_descriptor();
  }
  static inline const ::std::string& CameraType_Name(CameraType value) {
    return CameraObstacle_CameraType_Name(value);
  }
  static inline bool CameraType_Parse(const ::std::string& name,
      CameraType* value) {
    return CameraObstacle_CameraType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated float type_probs = 22;
  int type_probs_size() const;
  void clear_type_probs();
  static const int kTypeProbsFieldNumber = 22;
  float type_probs(int index) const;
  void set_type_probs(int index, float value);
  void add_type_probs(float value);
  const ::google::protobuf::RepeatedField< float >&
      type_probs() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_type_probs();

  // repeated .apollo.common.Point2D key_points = 25;
  int key_points_size() const;
  void clear_key_points();
  static const int kKeyPointsFieldNumber = 25;
  ::apollo::common::Point2D* mutable_key_points(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::common::Point2D >*
      mutable_key_points();
  const ::apollo::common::Point2D& key_points(int index) const;
  ::apollo::common::Point2D* add_key_points();
  const ::google::protobuf::RepeatedPtrField< ::apollo::common::Point2D >&
      key_points() const;

  // repeated string debug_message = 26;
  int debug_message_size() const;
  void clear_debug_message();
  static const int kDebugMessageFieldNumber = 26;
  const ::std::string& debug_message(int index) const;
  ::std::string* mutable_debug_message(int index);
  void set_debug_message(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_debug_message(int index, ::std::string&& value);
  #endif
  void set_debug_message(int index, const char* value);
  void set_debug_message(int index, const char* value, size_t size);
  ::std::string* add_debug_message();
  void add_debug_message(const ::std::string& value);
  #if LANG_CXX11
  void add_debug_message(::std::string&& value);
  #endif
  void add_debug_message(const char* value);
  void add_debug_message(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& debug_message() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_debug_message();

  // optional .apollo.perception.PerceptionObstacle obstacle = 1;
  bool has_obstacle() const;
  void clear_obstacle();
  static const int kObstacleFieldNumber = 1;
  private:
  const ::apollo::perception::PerceptionObstacle& _internal_obstacle() const;
  public:
  const ::apollo::perception::PerceptionObstacle& obstacle() const;
  ::apollo::perception::PerceptionObstacle* release_obstacle();
  ::apollo::perception::PerceptionObstacle* mutable_obstacle();
  void set_allocated_obstacle(::apollo::perception::PerceptionObstacle* obstacle);

  // optional .apollo.common.Point2D upper_left = 23;
  bool has_upper_left() const;
  void clear_upper_left();
  static const int kUpperLeftFieldNumber = 23;
  private:
  const ::apollo::common::Point2D& _internal_upper_left() const;
  public:
  const ::apollo::common::Point2D& upper_left() const;
  ::apollo::common::Point2D* release_upper_left();
  ::apollo::common::Point2D* mutable_upper_left();
  void set_allocated_upper_left(::apollo::common::Point2D* upper_left);

  // optional .apollo.common.Point2D lower_right = 24;
  bool has_lower_right() const;
  void clear_lower_right();
  static const int kLowerRightFieldNumber = 24;
  private:
  const ::apollo::common::Point2D& _internal_lower_right() const;
  public:
  const ::apollo::common::Point2D& lower_right() const;
  ::apollo::common::Point2D* release_lower_right();
  ::apollo::common::Point2D* mutable_lower_right();
  void set_allocated_lower_right(::apollo::common::Point2D* lower_right);

  // optional .apollo.perception.camera.CameraObstacle.CameraType type = 21;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 21;
  ::apollo::perception::camera::CameraObstacle_CameraType type() const;
  void set_type(::apollo::perception::camera::CameraObstacle_CameraType value);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.CameraObstacle)
 private:
  void set_has_obstacle();
  void clear_has_obstacle();
  void set_has_type();
  void clear_has_type();
  void set_has_upper_left();
  void clear_has_upper_left();
  void set_has_lower_right();
  void clear_has_lower_right();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< float > type_probs_;
  ::google::protobuf::RepeatedPtrField< ::apollo::common::Point2D > key_points_;
  ::google::protobuf::RepeatedPtrField< ::std::string> debug_message_;
  ::apollo::perception::PerceptionObstacle* obstacle_;
  ::apollo::common::Point2D* upper_left_;
  ::apollo::common::Point2D* lower_right_;
  int type_;
  friend struct ::protobuf_modules_2fperception_2fproto_2fperception_5fcamera_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CameraDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.camera.CameraDebug) */ {
 public:
  CameraDebug();
  virtual ~CameraDebug();

  CameraDebug(const CameraDebug& from);

  inline CameraDebug& operator=(const CameraDebug& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraDebug(CameraDebug&& from) noexcept
    : CameraDebug() {
    *this = ::std::move(from);
  }

  inline CameraDebug& operator=(CameraDebug&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraDebug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraDebug* internal_default_instance() {
    return reinterpret_cast<const CameraDebug*>(
               &_CameraDebug_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CameraDebug* other);
  friend void swap(CameraDebug& a, CameraDebug& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraDebug* New() const final {
    return CreateMaybeMessage<CameraDebug>(NULL);
  }

  CameraDebug* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraDebug>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraDebug& from);
  void MergeFrom(const CameraDebug& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.perception.camera.CameraLaneLine camera_laneline = 5;
  int camera_laneline_size() const;
  void clear_camera_laneline();
  static const int kCameraLanelineFieldNumber = 5;
  ::apollo::perception::camera::CameraLaneLine* mutable_camera_laneline(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::CameraLaneLine >*
      mutable_camera_laneline();
  const ::apollo::perception::camera::CameraLaneLine& camera_laneline(int index) const;
  ::apollo::perception::camera::CameraLaneLine* add_camera_laneline();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::CameraLaneLine >&
      camera_laneline() const;

  // repeated .apollo.perception.camera.CameraObstacle camera_obstacle = 6;
  int camera_obstacle_size() const;
  void clear_camera_obstacle();
  static const int kCameraObstacleFieldNumber = 6;
  ::apollo::perception::camera::CameraObstacle* mutable_camera_obstacle(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::CameraObstacle >*
      mutable_camera_obstacle();
  const ::apollo::perception::camera::CameraObstacle& camera_obstacle(int index) const;
  ::apollo::perception::camera::CameraObstacle* add_camera_obstacle();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::CameraObstacle >&
      camera_obstacle() const;

  // optional string source_topic = 2;
  bool has_source_topic() const;
  void clear_source_topic();
  static const int kSourceTopicFieldNumber = 2;
  const ::std::string& source_topic() const;
  void set_source_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_source_topic(::std::string&& value);
  #endif
  void set_source_topic(const char* value);
  void set_source_topic(const char* value, size_t size);
  ::std::string* mutable_source_topic();
  ::std::string* release_source_topic();
  void set_allocated_source_topic(::std::string* source_topic);

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::apollo::common::Header& _internal_header() const;
  public:
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // optional .apollo.perception.camera.CameraCalibrator camera_calibrator = 4;
  bool has_camera_calibrator() const;
  void clear_camera_calibrator();
  static const int kCameraCalibratorFieldNumber = 4;
  private:
  const ::apollo::perception::camera::CameraCalibrator& _internal_camera_calibrator() const;
  public:
  const ::apollo::perception::camera::CameraCalibrator& camera_calibrator() const;
  ::apollo::perception::camera::CameraCalibrator* release_camera_calibrator();
  ::apollo::perception::camera::CameraCalibrator* mutable_camera_calibrator();
  void set_allocated_camera_calibrator(::apollo::perception::camera::CameraCalibrator* camera_calibrator);

  // optional .apollo.perception.camera.CameraErrorCode error_code = 3 [default = ERROR_NONE];
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  ::apollo::perception::camera::CameraErrorCode error_code() const;
  void set_error_code(::apollo::perception::camera::CameraErrorCode value);

  // @@protoc_insertion_point(class_scope:apollo.perception.camera.CameraDebug)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_source_topic();
  void clear_has_source_topic();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_camera_calibrator();
  void clear_has_camera_calibrator();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::CameraLaneLine > camera_laneline_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::CameraObstacle > camera_obstacle_;
  ::google::protobuf::internal::ArenaStringPtr source_topic_;
  ::apollo::common::Header* header_;
  ::apollo::perception::camera::CameraCalibrator* camera_calibrator_;
  int error_code_;
  friend struct ::protobuf_modules_2fperception_2fproto_2fperception_5fcamera_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaneLineCubicCurve

// optional float longitude_min = 1;
inline bool LaneLineCubicCurve::has_longitude_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneLineCubicCurve::set_has_longitude_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneLineCubicCurve::clear_has_longitude_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneLineCubicCurve::clear_longitude_min() {
  longitude_min_ = 0;
  clear_has_longitude_min();
}
inline float LaneLineCubicCurve::longitude_min() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.LaneLineCubicCurve.longitude_min)
  return longitude_min_;
}
inline void LaneLineCubicCurve::set_longitude_min(float value) {
  set_has_longitude_min();
  longitude_min_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.LaneLineCubicCurve.longitude_min)
}

// optional float longitude_max = 2;
inline bool LaneLineCubicCurve::has_longitude_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneLineCubicCurve::set_has_longitude_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneLineCubicCurve::clear_has_longitude_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneLineCubicCurve::clear_longitude_max() {
  longitude_max_ = 0;
  clear_has_longitude_max();
}
inline float LaneLineCubicCurve::longitude_max() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.LaneLineCubicCurve.longitude_max)
  return longitude_max_;
}
inline void LaneLineCubicCurve::set_longitude_max(float value) {
  set_has_longitude_max();
  longitude_max_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.LaneLineCubicCurve.longitude_max)
}

// optional float a = 3;
inline bool LaneLineCubicCurve::has_a() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneLineCubicCurve::set_has_a() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneLineCubicCurve::clear_has_a() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneLineCubicCurve::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline float LaneLineCubicCurve::a() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.LaneLineCubicCurve.a)
  return a_;
}
inline void LaneLineCubicCurve::set_a(float value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.LaneLineCubicCurve.a)
}

// optional float b = 4;
inline bool LaneLineCubicCurve::has_b() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneLineCubicCurve::set_has_b() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneLineCubicCurve::clear_has_b() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneLineCubicCurve::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline float LaneLineCubicCurve::b() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.LaneLineCubicCurve.b)
  return b_;
}
inline void LaneLineCubicCurve::set_b(float value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.LaneLineCubicCurve.b)
}

// optional float c = 5;
inline bool LaneLineCubicCurve::has_c() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LaneLineCubicCurve::set_has_c() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LaneLineCubicCurve::clear_has_c() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LaneLineCubicCurve::clear_c() {
  c_ = 0;
  clear_has_c();
}
inline float LaneLineCubicCurve::c() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.LaneLineCubicCurve.c)
  return c_;
}
inline void LaneLineCubicCurve::set_c(float value) {
  set_has_c();
  c_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.LaneLineCubicCurve.c)
}

// optional float d = 6;
inline bool LaneLineCubicCurve::has_d() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LaneLineCubicCurve::set_has_d() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LaneLineCubicCurve::clear_has_d() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LaneLineCubicCurve::clear_d() {
  d_ = 0;
  clear_has_d();
}
inline float LaneLineCubicCurve::d() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.LaneLineCubicCurve.d)
  return d_;
}
inline void LaneLineCubicCurve::set_d(float value) {
  set_has_d();
  d_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.LaneLineCubicCurve.d)
}

// -------------------------------------------------------------------

// EndPoints

// optional .apollo.common.Point2D start = 1;
inline bool EndPoints::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EndPoints::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EndPoints::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::common::Point2D& EndPoints::_internal_start() const {
  return *start_;
}
inline const ::apollo::common::Point2D& EndPoints::start() const {
  const ::apollo::common::Point2D* p = start_;
  // @@protoc_insertion_point(field_get:apollo.perception.camera.EndPoints.start)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point2D*>(
      &::apollo::common::_Point2D_default_instance_);
}
inline ::apollo::common::Point2D* EndPoints::release_start() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.EndPoints.start)
  clear_has_start();
  ::apollo::common::Point2D* temp = start_;
  start_ = NULL;
  return temp;
}
inline ::apollo::common::Point2D* EndPoints::mutable_start() {
  set_has_start();
  if (start_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Point2D>(GetArenaNoVirtual());
    start_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.EndPoints.start)
  return start_;
}
inline void EndPoints::set_allocated_start(::apollo::common::Point2D* start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_);
  }
  if (start) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    set_has_start();
  } else {
    clear_has_start();
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.EndPoints.start)
}

// optional .apollo.common.Point2D end = 2;
inline bool EndPoints::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EndPoints::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EndPoints::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::common::Point2D& EndPoints::_internal_end() const {
  return *end_;
}
inline const ::apollo::common::Point2D& EndPoints::end() const {
  const ::apollo::common::Point2D* p = end_;
  // @@protoc_insertion_point(field_get:apollo.perception.camera.EndPoints.end)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point2D*>(
      &::apollo::common::_Point2D_default_instance_);
}
inline ::apollo::common::Point2D* EndPoints::release_end() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.EndPoints.end)
  clear_has_end();
  ::apollo::common::Point2D* temp = end_;
  end_ = NULL;
  return temp;
}
inline ::apollo::common::Point2D* EndPoints::mutable_end() {
  set_has_end();
  if (end_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Point2D>(GetArenaNoVirtual());
    end_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.EndPoints.end)
  return end_;
}
inline void EndPoints::set_allocated_end(::apollo::common::Point2D* end) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_);
  }
  if (end) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      end = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    set_has_end();
  } else {
    clear_has_end();
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.EndPoints.end)
}

// -------------------------------------------------------------------

// CameraLaneLine

// optional .apollo.perception.camera.LaneLineType type = 1;
inline bool CameraLaneLine::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraLaneLine::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraLaneLine::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraLaneLine::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::apollo::perception::camera::LaneLineType CameraLaneLine::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraLaneLine.type)
  return static_cast< ::apollo::perception::camera::LaneLineType >(type_);
}
inline void CameraLaneLine::set_type(::apollo::perception::camera::LaneLineType value) {
  assert(::apollo::perception::camera::LaneLineType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.CameraLaneLine.type)
}

// optional .apollo.perception.camera.LaneLinePositionType pos_type = 2;
inline bool CameraLaneLine::has_pos_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraLaneLine::set_has_pos_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CameraLaneLine::clear_has_pos_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CameraLaneLine::clear_pos_type() {
  pos_type_ = -5;
  clear_has_pos_type();
}
inline ::apollo::perception::camera::LaneLinePositionType CameraLaneLine::pos_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraLaneLine.pos_type)
  return static_cast< ::apollo::perception::camera::LaneLinePositionType >(pos_type_);
}
inline void CameraLaneLine::set_pos_type(::apollo::perception::camera::LaneLinePositionType value) {
  assert(::apollo::perception::camera::LaneLinePositionType_IsValid(value));
  set_has_pos_type();
  pos_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.CameraLaneLine.pos_type)
}

// optional .apollo.perception.camera.LaneLineCubicCurve curve_camera_coord = 3;
inline bool CameraLaneLine::has_curve_camera_coord() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraLaneLine::set_has_curve_camera_coord() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraLaneLine::clear_has_curve_camera_coord() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraLaneLine::clear_curve_camera_coord() {
  if (curve_camera_coord_ != NULL) curve_camera_coord_->Clear();
  clear_has_curve_camera_coord();
}
inline const ::apollo::perception::camera::LaneLineCubicCurve& CameraLaneLine::_internal_curve_camera_coord() const {
  return *curve_camera_coord_;
}
inline const ::apollo::perception::camera::LaneLineCubicCurve& CameraLaneLine::curve_camera_coord() const {
  const ::apollo::perception::camera::LaneLineCubicCurve* p = curve_camera_coord_;
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraLaneLine.curve_camera_coord)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::perception::camera::LaneLineCubicCurve*>(
      &::apollo::perception::camera::_LaneLineCubicCurve_default_instance_);
}
inline ::apollo::perception::camera::LaneLineCubicCurve* CameraLaneLine::release_curve_camera_coord() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.CameraLaneLine.curve_camera_coord)
  clear_has_curve_camera_coord();
  ::apollo::perception::camera::LaneLineCubicCurve* temp = curve_camera_coord_;
  curve_camera_coord_ = NULL;
  return temp;
}
inline ::apollo::perception::camera::LaneLineCubicCurve* CameraLaneLine::mutable_curve_camera_coord() {
  set_has_curve_camera_coord();
  if (curve_camera_coord_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::LaneLineCubicCurve>(GetArenaNoVirtual());
    curve_camera_coord_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.CameraLaneLine.curve_camera_coord)
  return curve_camera_coord_;
}
inline void CameraLaneLine::set_allocated_curve_camera_coord(::apollo::perception::camera::LaneLineCubicCurve* curve_camera_coord) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete curve_camera_coord_;
  }
  if (curve_camera_coord) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      curve_camera_coord = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, curve_camera_coord, submessage_arena);
    }
    set_has_curve_camera_coord();
  } else {
    clear_has_curve_camera_coord();
  }
  curve_camera_coord_ = curve_camera_coord;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.CameraLaneLine.curve_camera_coord)
}

// optional .apollo.perception.camera.LaneLineCubicCurve curve_image_coord = 4;
inline bool CameraLaneLine::has_curve_image_coord() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraLaneLine::set_has_curve_image_coord() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraLaneLine::clear_has_curve_image_coord() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraLaneLine::clear_curve_image_coord() {
  if (curve_image_coord_ != NULL) curve_image_coord_->Clear();
  clear_has_curve_image_coord();
}
inline const ::apollo::perception::camera::LaneLineCubicCurve& CameraLaneLine::_internal_curve_image_coord() const {
  return *curve_image_coord_;
}
inline const ::apollo::perception::camera::LaneLineCubicCurve& CameraLaneLine::curve_image_coord() const {
  const ::apollo::perception::camera::LaneLineCubicCurve* p = curve_image_coord_;
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraLaneLine.curve_image_coord)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::perception::camera::LaneLineCubicCurve*>(
      &::apollo::perception::camera::_LaneLineCubicCurve_default_instance_);
}
inline ::apollo::perception::camera::LaneLineCubicCurve* CameraLaneLine::release_curve_image_coord() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.CameraLaneLine.curve_image_coord)
  clear_has_curve_image_coord();
  ::apollo::perception::camera::LaneLineCubicCurve* temp = curve_image_coord_;
  curve_image_coord_ = NULL;
  return temp;
}
inline ::apollo::perception::camera::LaneLineCubicCurve* CameraLaneLine::mutable_curve_image_coord() {
  set_has_curve_image_coord();
  if (curve_image_coord_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::LaneLineCubicCurve>(GetArenaNoVirtual());
    curve_image_coord_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.CameraLaneLine.curve_image_coord)
  return curve_image_coord_;
}
inline void CameraLaneLine::set_allocated_curve_image_coord(::apollo::perception::camera::LaneLineCubicCurve* curve_image_coord) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete curve_image_coord_;
  }
  if (curve_image_coord) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      curve_image_coord = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, curve_image_coord, submessage_arena);
    }
    set_has_curve_image_coord();
  } else {
    clear_has_curve_image_coord();
  }
  curve_image_coord_ = curve_image_coord;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.CameraLaneLine.curve_image_coord)
}

// repeated .apollo.common.Point3D curve_camera_point_set = 5;
inline int CameraLaneLine::curve_camera_point_set_size() const {
  return curve_camera_point_set_.size();
}
inline ::apollo::common::Point3D* CameraLaneLine::mutable_curve_camera_point_set(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.CameraLaneLine.curve_camera_point_set)
  return curve_camera_point_set_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >*
CameraLaneLine::mutable_curve_camera_point_set() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.CameraLaneLine.curve_camera_point_set)
  return &curve_camera_point_set_;
}
inline const ::apollo::common::Point3D& CameraLaneLine::curve_camera_point_set(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraLaneLine.curve_camera_point_set)
  return curve_camera_point_set_.Get(index);
}
inline ::apollo::common::Point3D* CameraLaneLine::add_curve_camera_point_set() {
  // @@protoc_insertion_point(field_add:apollo.perception.camera.CameraLaneLine.curve_camera_point_set)
  return curve_camera_point_set_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::Point3D >&
CameraLaneLine::curve_camera_point_set() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.CameraLaneLine.curve_camera_point_set)
  return curve_camera_point_set_;
}

// repeated .apollo.common.Point2D curve_image_point_set = 6;
inline int CameraLaneLine::curve_image_point_set_size() const {
  return curve_image_point_set_.size();
}
inline ::apollo::common::Point2D* CameraLaneLine::mutable_curve_image_point_set(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.CameraLaneLine.curve_image_point_set)
  return curve_image_point_set_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::Point2D >*
CameraLaneLine::mutable_curve_image_point_set() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.CameraLaneLine.curve_image_point_set)
  return &curve_image_point_set_;
}
inline const ::apollo::common::Point2D& CameraLaneLine::curve_image_point_set(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraLaneLine.curve_image_point_set)
  return curve_image_point_set_.Get(index);
}
inline ::apollo::common::Point2D* CameraLaneLine::add_curve_image_point_set() {
  // @@protoc_insertion_point(field_add:apollo.perception.camera.CameraLaneLine.curve_image_point_set)
  return curve_image_point_set_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::Point2D >&
CameraLaneLine::curve_image_point_set() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.CameraLaneLine.curve_image_point_set)
  return curve_image_point_set_;
}

// repeated .apollo.perception.camera.EndPoints image_end_point_set = 7;
inline int CameraLaneLine::image_end_point_set_size() const {
  return image_end_point_set_.size();
}
inline void CameraLaneLine::clear_image_end_point_set() {
  image_end_point_set_.Clear();
}
inline ::apollo::perception::camera::EndPoints* CameraLaneLine::mutable_image_end_point_set(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.CameraLaneLine.image_end_point_set)
  return image_end_point_set_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::EndPoints >*
CameraLaneLine::mutable_image_end_point_set() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.CameraLaneLine.image_end_point_set)
  return &image_end_point_set_;
}
inline const ::apollo::perception::camera::EndPoints& CameraLaneLine::image_end_point_set(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraLaneLine.image_end_point_set)
  return image_end_point_set_.Get(index);
}
inline ::apollo::perception::camera::EndPoints* CameraLaneLine::add_image_end_point_set() {
  // @@protoc_insertion_point(field_add:apollo.perception.camera.CameraLaneLine.image_end_point_set)
  return image_end_point_set_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::EndPoints >&
CameraLaneLine::image_end_point_set() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.CameraLaneLine.image_end_point_set)
  return image_end_point_set_;
}

// optional int32 track_id = 8;
inline bool CameraLaneLine::has_track_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraLaneLine::set_has_track_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraLaneLine::clear_has_track_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraLaneLine::clear_track_id() {
  track_id_ = 0;
  clear_has_track_id();
}
inline ::google::protobuf::int32 CameraLaneLine::track_id() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraLaneLine.track_id)
  return track_id_;
}
inline void CameraLaneLine::set_track_id(::google::protobuf::int32 value) {
  set_has_track_id();
  track_id_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.CameraLaneLine.track_id)
}

// optional float confidence = 9;
inline bool CameraLaneLine::has_confidence() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraLaneLine::set_has_confidence() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CameraLaneLine::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CameraLaneLine::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
inline float CameraLaneLine::confidence() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraLaneLine.confidence)
  return confidence_;
}
inline void CameraLaneLine::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.CameraLaneLine.confidence)
}

// optional .apollo.perception.camera.LaneLineUseType use_type = 10;
inline bool CameraLaneLine::has_use_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraLaneLine::set_has_use_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CameraLaneLine::clear_has_use_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CameraLaneLine::clear_use_type() {
  use_type_ = 0;
  clear_has_use_type();
}
inline ::apollo::perception::camera::LaneLineUseType CameraLaneLine::use_type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraLaneLine.use_type)
  return static_cast< ::apollo::perception::camera::LaneLineUseType >(use_type_);
}
inline void CameraLaneLine::set_use_type(::apollo::perception::camera::LaneLineUseType value) {
  assert(::apollo::perception::camera::LaneLineUseType_IsValid(value));
  set_has_use_type();
  use_type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.CameraLaneLine.use_type)
}

// -------------------------------------------------------------------

// CameraCalibrator

// optional float pitch_angle = 1;
inline bool CameraCalibrator::has_pitch_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraCalibrator::set_has_pitch_angle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraCalibrator::clear_has_pitch_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraCalibrator::clear_pitch_angle() {
  pitch_angle_ = 0;
  clear_has_pitch_angle();
}
inline float CameraCalibrator::pitch_angle() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraCalibrator.pitch_angle)
  return pitch_angle_;
}
inline void CameraCalibrator::set_pitch_angle(float value) {
  set_has_pitch_angle();
  pitch_angle_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.CameraCalibrator.pitch_angle)
}

// optional float camera_height = 2;
inline bool CameraCalibrator::has_camera_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraCalibrator::set_has_camera_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraCalibrator::clear_has_camera_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraCalibrator::clear_camera_height() {
  camera_height_ = 0;
  clear_has_camera_height();
}
inline float CameraCalibrator::camera_height() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraCalibrator.camera_height)
  return camera_height_;
}
inline void CameraCalibrator::set_camera_height(float value) {
  set_has_camera_height();
  camera_height_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.CameraCalibrator.camera_height)
}

// -------------------------------------------------------------------

// CameraObstacle

// optional .apollo.perception.PerceptionObstacle obstacle = 1;
inline bool CameraObstacle::has_obstacle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraObstacle::set_has_obstacle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraObstacle::clear_has_obstacle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::perception::PerceptionObstacle& CameraObstacle::_internal_obstacle() const {
  return *obstacle_;
}
inline const ::apollo::perception::PerceptionObstacle& CameraObstacle::obstacle() const {
  const ::apollo::perception::PerceptionObstacle* p = obstacle_;
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraObstacle.obstacle)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::perception::PerceptionObstacle*>(
      &::apollo::perception::_PerceptionObstacle_default_instance_);
}
inline ::apollo::perception::PerceptionObstacle* CameraObstacle::release_obstacle() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.CameraObstacle.obstacle)
  clear_has_obstacle();
  ::apollo::perception::PerceptionObstacle* temp = obstacle_;
  obstacle_ = NULL;
  return temp;
}
inline ::apollo::perception::PerceptionObstacle* CameraObstacle::mutable_obstacle() {
  set_has_obstacle();
  if (obstacle_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::perception::PerceptionObstacle>(GetArenaNoVirtual());
    obstacle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.CameraObstacle.obstacle)
  return obstacle_;
}
inline void CameraObstacle::set_allocated_obstacle(::apollo::perception::PerceptionObstacle* obstacle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(obstacle_);
  }
  if (obstacle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      obstacle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, obstacle, submessage_arena);
    }
    set_has_obstacle();
  } else {
    clear_has_obstacle();
  }
  obstacle_ = obstacle;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.CameraObstacle.obstacle)
}

// optional .apollo.perception.camera.CameraObstacle.CameraType type = 21;
inline bool CameraObstacle::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraObstacle::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraObstacle::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraObstacle::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::apollo::perception::camera::CameraObstacle_CameraType CameraObstacle::type() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraObstacle.type)
  return static_cast< ::apollo::perception::camera::CameraObstacle_CameraType >(type_);
}
inline void CameraObstacle::set_type(::apollo::perception::camera::CameraObstacle_CameraType value) {
  assert(::apollo::perception::camera::CameraObstacle_CameraType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.CameraObstacle.type)
}

// repeated float type_probs = 22;
inline int CameraObstacle::type_probs_size() const {
  return type_probs_.size();
}
inline void CameraObstacle::clear_type_probs() {
  type_probs_.Clear();
}
inline float CameraObstacle::type_probs(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraObstacle.type_probs)
  return type_probs_.Get(index);
}
inline void CameraObstacle::set_type_probs(int index, float value) {
  type_probs_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.CameraObstacle.type_probs)
}
inline void CameraObstacle::add_type_probs(float value) {
  type_probs_.Add(value);
  // @@protoc_insertion_point(field_add:apollo.perception.camera.CameraObstacle.type_probs)
}
inline const ::google::protobuf::RepeatedField< float >&
CameraObstacle::type_probs() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.CameraObstacle.type_probs)
  return type_probs_;
}
inline ::google::protobuf::RepeatedField< float >*
CameraObstacle::mutable_type_probs() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.CameraObstacle.type_probs)
  return &type_probs_;
}

// optional .apollo.common.Point2D upper_left = 23;
inline bool CameraObstacle::has_upper_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraObstacle::set_has_upper_left() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraObstacle::clear_has_upper_left() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::common::Point2D& CameraObstacle::_internal_upper_left() const {
  return *upper_left_;
}
inline const ::apollo::common::Point2D& CameraObstacle::upper_left() const {
  const ::apollo::common::Point2D* p = upper_left_;
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraObstacle.upper_left)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point2D*>(
      &::apollo::common::_Point2D_default_instance_);
}
inline ::apollo::common::Point2D* CameraObstacle::release_upper_left() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.CameraObstacle.upper_left)
  clear_has_upper_left();
  ::apollo::common::Point2D* temp = upper_left_;
  upper_left_ = NULL;
  return temp;
}
inline ::apollo::common::Point2D* CameraObstacle::mutable_upper_left() {
  set_has_upper_left();
  if (upper_left_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Point2D>(GetArenaNoVirtual());
    upper_left_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.CameraObstacle.upper_left)
  return upper_left_;
}
inline void CameraObstacle::set_allocated_upper_left(::apollo::common::Point2D* upper_left) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(upper_left_);
  }
  if (upper_left) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      upper_left = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upper_left, submessage_arena);
    }
    set_has_upper_left();
  } else {
    clear_has_upper_left();
  }
  upper_left_ = upper_left;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.CameraObstacle.upper_left)
}

// optional .apollo.common.Point2D lower_right = 24;
inline bool CameraObstacle::has_lower_right() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraObstacle::set_has_lower_right() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraObstacle::clear_has_lower_right() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::apollo::common::Point2D& CameraObstacle::_internal_lower_right() const {
  return *lower_right_;
}
inline const ::apollo::common::Point2D& CameraObstacle::lower_right() const {
  const ::apollo::common::Point2D* p = lower_right_;
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraObstacle.lower_right)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Point2D*>(
      &::apollo::common::_Point2D_default_instance_);
}
inline ::apollo::common::Point2D* CameraObstacle::release_lower_right() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.CameraObstacle.lower_right)
  clear_has_lower_right();
  ::apollo::common::Point2D* temp = lower_right_;
  lower_right_ = NULL;
  return temp;
}
inline ::apollo::common::Point2D* CameraObstacle::mutable_lower_right() {
  set_has_lower_right();
  if (lower_right_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Point2D>(GetArenaNoVirtual());
    lower_right_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.CameraObstacle.lower_right)
  return lower_right_;
}
inline void CameraObstacle::set_allocated_lower_right(::apollo::common::Point2D* lower_right) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lower_right_);
  }
  if (lower_right) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lower_right = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lower_right, submessage_arena);
    }
    set_has_lower_right();
  } else {
    clear_has_lower_right();
  }
  lower_right_ = lower_right;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.CameraObstacle.lower_right)
}

// repeated .apollo.common.Point2D key_points = 25;
inline int CameraObstacle::key_points_size() const {
  return key_points_.size();
}
inline ::apollo::common::Point2D* CameraObstacle::mutable_key_points(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.CameraObstacle.key_points)
  return key_points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::common::Point2D >*
CameraObstacle::mutable_key_points() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.CameraObstacle.key_points)
  return &key_points_;
}
inline const ::apollo::common::Point2D& CameraObstacle::key_points(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraObstacle.key_points)
  return key_points_.Get(index);
}
inline ::apollo::common::Point2D* CameraObstacle::add_key_points() {
  // @@protoc_insertion_point(field_add:apollo.perception.camera.CameraObstacle.key_points)
  return key_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::common::Point2D >&
CameraObstacle::key_points() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.CameraObstacle.key_points)
  return key_points_;
}

// repeated string debug_message = 26;
inline int CameraObstacle::debug_message_size() const {
  return debug_message_.size();
}
inline void CameraObstacle::clear_debug_message() {
  debug_message_.Clear();
}
inline const ::std::string& CameraObstacle::debug_message(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraObstacle.debug_message)
  return debug_message_.Get(index);
}
inline ::std::string* CameraObstacle::mutable_debug_message(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.CameraObstacle.debug_message)
  return debug_message_.Mutable(index);
}
inline void CameraObstacle::set_debug_message(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.perception.camera.CameraObstacle.debug_message)
  debug_message_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CameraObstacle::set_debug_message(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.perception.camera.CameraObstacle.debug_message)
  debug_message_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CameraObstacle::set_debug_message(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  debug_message_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.CameraObstacle.debug_message)
}
inline void CameraObstacle::set_debug_message(int index, const char* value, size_t size) {
  debug_message_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.CameraObstacle.debug_message)
}
inline ::std::string* CameraObstacle::add_debug_message() {
  // @@protoc_insertion_point(field_add_mutable:apollo.perception.camera.CameraObstacle.debug_message)
  return debug_message_.Add();
}
inline void CameraObstacle::add_debug_message(const ::std::string& value) {
  debug_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.perception.camera.CameraObstacle.debug_message)
}
#if LANG_CXX11
inline void CameraObstacle::add_debug_message(::std::string&& value) {
  debug_message_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.perception.camera.CameraObstacle.debug_message)
}
#endif
inline void CameraObstacle::add_debug_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  debug_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.perception.camera.CameraObstacle.debug_message)
}
inline void CameraObstacle::add_debug_message(const char* value, size_t size) {
  debug_message_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.perception.camera.CameraObstacle.debug_message)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CameraObstacle::debug_message() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.CameraObstacle.debug_message)
  return debug_message_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CameraObstacle::mutable_debug_message() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.CameraObstacle.debug_message)
  return &debug_message_;
}

// -------------------------------------------------------------------

// CameraDebug

// optional .apollo.common.Header header = 1;
inline bool CameraDebug::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraDebug::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraDebug::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::apollo::common::Header& CameraDebug::_internal_header() const {
  return *header_;
}
inline const ::apollo::common::Header& CameraDebug::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraDebug.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* CameraDebug::release_header() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.CameraDebug.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::common::Header* CameraDebug::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.CameraDebug.header)
  return header_;
}
inline void CameraDebug::set_allocated_header(::apollo::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.CameraDebug.header)
}

// optional string source_topic = 2;
inline bool CameraDebug::has_source_topic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraDebug::set_has_source_topic() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraDebug::clear_has_source_topic() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraDebug::clear_source_topic() {
  source_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_topic();
}
inline const ::std::string& CameraDebug::source_topic() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraDebug.source_topic)
  return source_topic_.GetNoArena();
}
inline void CameraDebug::set_source_topic(const ::std::string& value) {
  set_has_source_topic();
  source_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.perception.camera.CameraDebug.source_topic)
}
#if LANG_CXX11
inline void CameraDebug::set_source_topic(::std::string&& value) {
  set_has_source_topic();
  source_topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.perception.camera.CameraDebug.source_topic)
}
#endif
inline void CameraDebug::set_source_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_topic();
  source_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.perception.camera.CameraDebug.source_topic)
}
inline void CameraDebug::set_source_topic(const char* value, size_t size) {
  set_has_source_topic();
  source_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.perception.camera.CameraDebug.source_topic)
}
inline ::std::string* CameraDebug::mutable_source_topic() {
  set_has_source_topic();
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.CameraDebug.source_topic)
  return source_topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CameraDebug::release_source_topic() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.CameraDebug.source_topic)
  if (!has_source_topic()) {
    return NULL;
  }
  clear_has_source_topic();
  return source_topic_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CameraDebug::set_allocated_source_topic(::std::string* source_topic) {
  if (source_topic != NULL) {
    set_has_source_topic();
  } else {
    clear_has_source_topic();
  }
  source_topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_topic);
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.CameraDebug.source_topic)
}

// optional .apollo.perception.camera.CameraErrorCode error_code = 3 [default = ERROR_NONE];
inline bool CameraDebug::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraDebug::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraDebug::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraDebug::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::apollo::perception::camera::CameraErrorCode CameraDebug::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraDebug.error_code)
  return static_cast< ::apollo::perception::camera::CameraErrorCode >(error_code_);
}
inline void CameraDebug::set_error_code(::apollo::perception::camera::CameraErrorCode value) {
  assert(::apollo::perception::camera::CameraErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.camera.CameraDebug.error_code)
}

// optional .apollo.perception.camera.CameraCalibrator camera_calibrator = 4;
inline bool CameraDebug::has_camera_calibrator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraDebug::set_has_camera_calibrator() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraDebug::clear_has_camera_calibrator() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraDebug::clear_camera_calibrator() {
  if (camera_calibrator_ != NULL) camera_calibrator_->Clear();
  clear_has_camera_calibrator();
}
inline const ::apollo::perception::camera::CameraCalibrator& CameraDebug::_internal_camera_calibrator() const {
  return *camera_calibrator_;
}
inline const ::apollo::perception::camera::CameraCalibrator& CameraDebug::camera_calibrator() const {
  const ::apollo::perception::camera::CameraCalibrator* p = camera_calibrator_;
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraDebug.camera_calibrator)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::perception::camera::CameraCalibrator*>(
      &::apollo::perception::camera::_CameraCalibrator_default_instance_);
}
inline ::apollo::perception::camera::CameraCalibrator* CameraDebug::release_camera_calibrator() {
  // @@protoc_insertion_point(field_release:apollo.perception.camera.CameraDebug.camera_calibrator)
  clear_has_camera_calibrator();
  ::apollo::perception::camera::CameraCalibrator* temp = camera_calibrator_;
  camera_calibrator_ = NULL;
  return temp;
}
inline ::apollo::perception::camera::CameraCalibrator* CameraDebug::mutable_camera_calibrator() {
  set_has_camera_calibrator();
  if (camera_calibrator_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::CameraCalibrator>(GetArenaNoVirtual());
    camera_calibrator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.CameraDebug.camera_calibrator)
  return camera_calibrator_;
}
inline void CameraDebug::set_allocated_camera_calibrator(::apollo::perception::camera::CameraCalibrator* camera_calibrator) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete camera_calibrator_;
  }
  if (camera_calibrator) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      camera_calibrator = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, camera_calibrator, submessage_arena);
    }
    set_has_camera_calibrator();
  } else {
    clear_has_camera_calibrator();
  }
  camera_calibrator_ = camera_calibrator;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.camera.CameraDebug.camera_calibrator)
}

// repeated .apollo.perception.camera.CameraLaneLine camera_laneline = 5;
inline int CameraDebug::camera_laneline_size() const {
  return camera_laneline_.size();
}
inline void CameraDebug::clear_camera_laneline() {
  camera_laneline_.Clear();
}
inline ::apollo::perception::camera::CameraLaneLine* CameraDebug::mutable_camera_laneline(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.CameraDebug.camera_laneline)
  return camera_laneline_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::CameraLaneLine >*
CameraDebug::mutable_camera_laneline() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.CameraDebug.camera_laneline)
  return &camera_laneline_;
}
inline const ::apollo::perception::camera::CameraLaneLine& CameraDebug::camera_laneline(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraDebug.camera_laneline)
  return camera_laneline_.Get(index);
}
inline ::apollo::perception::camera::CameraLaneLine* CameraDebug::add_camera_laneline() {
  // @@protoc_insertion_point(field_add:apollo.perception.camera.CameraDebug.camera_laneline)
  return camera_laneline_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::CameraLaneLine >&
CameraDebug::camera_laneline() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.CameraDebug.camera_laneline)
  return camera_laneline_;
}

// repeated .apollo.perception.camera.CameraObstacle camera_obstacle = 6;
inline int CameraDebug::camera_obstacle_size() const {
  return camera_obstacle_.size();
}
inline void CameraDebug::clear_camera_obstacle() {
  camera_obstacle_.Clear();
}
inline ::apollo::perception::camera::CameraObstacle* CameraDebug::mutable_camera_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.camera.CameraDebug.camera_obstacle)
  return camera_obstacle_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::CameraObstacle >*
CameraDebug::mutable_camera_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.camera.CameraDebug.camera_obstacle)
  return &camera_obstacle_;
}
inline const ::apollo::perception::camera::CameraObstacle& CameraDebug::camera_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.camera.CameraDebug.camera_obstacle)
  return camera_obstacle_.Get(index);
}
inline ::apollo::perception::camera::CameraObstacle* CameraDebug::add_camera_obstacle() {
  // @@protoc_insertion_point(field_add:apollo.perception.camera.CameraDebug.camera_obstacle)
  return camera_obstacle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::camera::CameraObstacle >&
CameraDebug::camera_obstacle() const {
  // @@protoc_insertion_point(field_list:apollo.perception.camera.CameraDebug.camera_obstacle)
  return camera_obstacle_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace camera
}  // namespace perception
}  // namespace apollo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::apollo::perception::camera::CameraObstacle_CameraType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::camera::CameraObstacle_CameraType>() {
  return ::apollo::perception::camera::CameraObstacle_CameraType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::camera::CameraErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::camera::CameraErrorCode>() {
  return ::apollo::perception::camera::CameraErrorCode_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::camera::LaneLineType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::camera::LaneLineType>() {
  return ::apollo::perception::camera::LaneLineType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::camera::LaneLinePositionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::camera::LaneLinePositionType>() {
  return ::apollo::perception::camera::LaneLinePositionType_descriptor();
}
template <> struct is_proto_enum< ::apollo::perception::camera::LaneLineUseType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::perception::camera::LaneLineUseType>() {
  return ::apollo::perception::camera::LaneLineUseType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fperception_5fcamera_2eproto
