// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/motion_service.proto

#ifndef PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fmotion_5fservice_2eproto
#define PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fmotion_5fservice_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fperception_2fproto_2fmotion_5fservice_2eproto 

namespace protobuf_modules_2fperception_2fproto_2fmotion_5fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_modules_2fperception_2fproto_2fmotion_5fservice_2eproto
namespace apollo {
namespace perception {
class MotionType;
class MotionTypeDefaultTypeInternal;
extern MotionTypeDefaultTypeInternal _MotionType_default_instance_;
class Motion_Service;
class Motion_ServiceDefaultTypeInternal;
extern Motion_ServiceDefaultTypeInternal _Motion_Service_default_instance_;
class VehicleStatus;
class VehicleStatusDefaultTypeInternal;
extern VehicleStatusDefaultTypeInternal _VehicleStatus_default_instance_;
}  // namespace perception
}  // namespace apollo
namespace google {
namespace protobuf {
template<> ::apollo::perception::MotionType* Arena::CreateMaybeMessage<::apollo::perception::MotionType>(Arena*);
template<> ::apollo::perception::Motion_Service* Arena::CreateMaybeMessage<::apollo::perception::Motion_Service>(Arena*);
template<> ::apollo::perception::VehicleStatus* Arena::CreateMaybeMessage<::apollo::perception::VehicleStatus>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace apollo {
namespace perception {

// ===================================================================

class MotionType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.MotionType) */ {
 public:
  MotionType();
  virtual ~MotionType();

  MotionType(const MotionType& from);

  inline MotionType& operator=(const MotionType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MotionType(MotionType&& from) noexcept
    : MotionType() {
    *this = ::std::move(from);
  }

  inline MotionType& operator=(MotionType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MotionType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MotionType* internal_default_instance() {
    return reinterpret_cast<const MotionType*>(
               &_MotionType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MotionType* other);
  friend void swap(MotionType& a, MotionType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MotionType* New() const final {
    return CreateMaybeMessage<MotionType>(NULL);
  }

  MotionType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MotionType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MotionType& from);
  void MergeFrom(const MotionType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MotionType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float m00 = 1;
  bool has_m00() const;
  void clear_m00();
  static const int kM00FieldNumber = 1;
  float m00() const;
  void set_m00(float value);

  // optional float m01 = 2;
  bool has_m01() const;
  void clear_m01();
  static const int kM01FieldNumber = 2;
  float m01() const;
  void set_m01(float value);

  // optional float m02 = 3;
  bool has_m02() const;
  void clear_m02();
  static const int kM02FieldNumber = 3;
  float m02() const;
  void set_m02(float value);

  // optional float m03 = 4;
  bool has_m03() const;
  void clear_m03();
  static const int kM03FieldNumber = 4;
  float m03() const;
  void set_m03(float value);

  // optional float m10 = 5;
  bool has_m10() const;
  void clear_m10();
  static const int kM10FieldNumber = 5;
  float m10() const;
  void set_m10(float value);

  // optional float m11 = 6;
  bool has_m11() const;
  void clear_m11();
  static const int kM11FieldNumber = 6;
  float m11() const;
  void set_m11(float value);

  // optional float m12 = 7;
  bool has_m12() const;
  void clear_m12();
  static const int kM12FieldNumber = 7;
  float m12() const;
  void set_m12(float value);

  // optional float m13 = 8;
  bool has_m13() const;
  void clear_m13();
  static const int kM13FieldNumber = 8;
  float m13() const;
  void set_m13(float value);

  // optional float m20 = 9;
  bool has_m20() const;
  void clear_m20();
  static const int kM20FieldNumber = 9;
  float m20() const;
  void set_m20(float value);

  // optional float m21 = 10;
  bool has_m21() const;
  void clear_m21();
  static const int kM21FieldNumber = 10;
  float m21() const;
  void set_m21(float value);

  // optional float m22 = 11;
  bool has_m22() const;
  void clear_m22();
  static const int kM22FieldNumber = 11;
  float m22() const;
  void set_m22(float value);

  // optional float m23 = 12;
  bool has_m23() const;
  void clear_m23();
  static const int kM23FieldNumber = 12;
  float m23() const;
  void set_m23(float value);

  // optional float m30 = 13;
  bool has_m30() const;
  void clear_m30();
  static const int kM30FieldNumber = 13;
  float m30() const;
  void set_m30(float value);

  // optional float m31 = 14;
  bool has_m31() const;
  void clear_m31();
  static const int kM31FieldNumber = 14;
  float m31() const;
  void set_m31(float value);

  // optional float m32 = 15;
  bool has_m32() const;
  void clear_m32();
  static const int kM32FieldNumber = 15;
  float m32() const;
  void set_m32(float value);

  // optional float m33 = 16;
  bool has_m33() const;
  void clear_m33();
  static const int kM33FieldNumber = 16;
  float m33() const;
  void set_m33(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.MotionType)
 private:
  void set_has_m00();
  void clear_has_m00();
  void set_has_m01();
  void clear_has_m01();
  void set_has_m02();
  void clear_has_m02();
  void set_has_m03();
  void clear_has_m03();
  void set_has_m10();
  void clear_has_m10();
  void set_has_m11();
  void clear_has_m11();
  void set_has_m12();
  void clear_has_m12();
  void set_has_m13();
  void clear_has_m13();
  void set_has_m20();
  void clear_has_m20();
  void set_has_m21();
  void clear_has_m21();
  void set_has_m22();
  void clear_has_m22();
  void set_has_m23();
  void clear_has_m23();
  void set_has_m30();
  void clear_has_m30();
  void set_has_m31();
  void clear_has_m31();
  void set_has_m32();
  void clear_has_m32();
  void set_has_m33();
  void clear_has_m33();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float m00_;
  float m01_;
  float m02_;
  float m03_;
  float m10_;
  float m11_;
  float m12_;
  float m13_;
  float m20_;
  float m21_;
  float m22_;
  float m23_;
  float m30_;
  float m31_;
  float m32_;
  float m33_;
  friend struct ::protobuf_modules_2fperception_2fproto_2fmotion_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehicleStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.VehicleStatus) */ {
 public:
  VehicleStatus();
  virtual ~VehicleStatus();

  VehicleStatus(const VehicleStatus& from);

  inline VehicleStatus& operator=(const VehicleStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehicleStatus(VehicleStatus&& from) noexcept
    : VehicleStatus() {
    *this = ::std::move(from);
  }

  inline VehicleStatus& operator=(VehicleStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VehicleStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleStatus* internal_default_instance() {
    return reinterpret_cast<const VehicleStatus*>(
               &_VehicleStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(VehicleStatus* other);
  friend void swap(VehicleStatus& a, VehicleStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehicleStatus* New() const final {
    return CreateMaybeMessage<VehicleStatus>(NULL);
  }

  VehicleStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehicleStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehicleStatus& from);
  void MergeFrom(const VehicleStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.perception.MotionType motion = 10;
  bool has_motion() const;
  void clear_motion();
  static const int kMotionFieldNumber = 10;
  private:
  const ::apollo::perception::MotionType& _internal_motion() const;
  public:
  const ::apollo::perception::MotionType& motion() const;
  ::apollo::perception::MotionType* release_motion();
  ::apollo::perception::MotionType* mutable_motion();
  void set_allocated_motion(::apollo::perception::MotionType* motion);

  // optional float roll_rate = 1;
  bool has_roll_rate() const;
  void clear_roll_rate();
  static const int kRollRateFieldNumber = 1;
  float roll_rate() const;
  void set_roll_rate(float value);

  // optional float pitch_rate = 2;
  bool has_pitch_rate() const;
  void clear_pitch_rate();
  static const int kPitchRateFieldNumber = 2;
  float pitch_rate() const;
  void set_pitch_rate(float value);

  // optional float yaw_rate = 3;
  bool has_yaw_rate() const;
  void clear_yaw_rate();
  static const int kYawRateFieldNumber = 3;
  float yaw_rate() const;
  void set_yaw_rate(float value);

  // optional float velocity = 4;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 4;
  float velocity() const;
  void set_velocity(float value);

  // optional float velocity_x = 5;
  bool has_velocity_x() const;
  void clear_velocity_x();
  static const int kVelocityXFieldNumber = 5;
  float velocity_x() const;
  void set_velocity_x(float value);

  // optional float velocity_y = 6;
  bool has_velocity_y() const;
  void clear_velocity_y();
  static const int kVelocityYFieldNumber = 6;
  float velocity_y() const;
  void set_velocity_y(float value);

  // optional double time_ts = 8;
  bool has_time_ts() const;
  void clear_time_ts();
  static const int kTimeTsFieldNumber = 8;
  double time_ts() const;
  void set_time_ts(double value);

  // optional double time_d = 9;
  bool has_time_d() const;
  void clear_time_d();
  static const int kTimeDFieldNumber = 9;
  double time_d() const;
  void set_time_d(double value);

  // optional float velocity_z = 7;
  bool has_velocity_z() const;
  void clear_velocity_z();
  static const int kVelocityZFieldNumber = 7;
  float velocity_z() const;
  void set_velocity_z(float value);

  // @@protoc_insertion_point(class_scope:apollo.perception.VehicleStatus)
 private:
  void set_has_roll_rate();
  void clear_has_roll_rate();
  void set_has_pitch_rate();
  void clear_has_pitch_rate();
  void set_has_yaw_rate();
  void clear_has_yaw_rate();
  void set_has_velocity();
  void clear_has_velocity();
  void set_has_velocity_x();
  void clear_has_velocity_x();
  void set_has_velocity_y();
  void clear_has_velocity_y();
  void set_has_velocity_z();
  void clear_has_velocity_z();
  void set_has_time_ts();
  void clear_has_time_ts();
  void set_has_time_d();
  void clear_has_time_d();
  void set_has_motion();
  void clear_has_motion();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::apollo::perception::MotionType* motion_;
  float roll_rate_;
  float pitch_rate_;
  float yaw_rate_;
  float velocity_;
  float velocity_x_;
  float velocity_y_;
  double time_ts_;
  double time_d_;
  float velocity_z_;
  friend struct ::protobuf_modules_2fperception_2fproto_2fmotion_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Motion_Service : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.perception.Motion_Service) */ {
 public:
  Motion_Service();
  virtual ~Motion_Service();

  Motion_Service(const Motion_Service& from);

  inline Motion_Service& operator=(const Motion_Service& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Motion_Service(Motion_Service&& from) noexcept
    : Motion_Service() {
    *this = ::std::move(from);
  }

  inline Motion_Service& operator=(Motion_Service&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Motion_Service& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Motion_Service* internal_default_instance() {
    return reinterpret_cast<const Motion_Service*>(
               &_Motion_Service_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Motion_Service* other);
  friend void swap(Motion_Service& a, Motion_Service& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Motion_Service* New() const final {
    return CreateMaybeMessage<Motion_Service>(NULL);
  }

  Motion_Service* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Motion_Service>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Motion_Service& from);
  void MergeFrom(const Motion_Service& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Motion_Service* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.perception.VehicleStatus vehicle_status = 1;
  int vehicle_status_size() const;
  void clear_vehicle_status();
  static const int kVehicleStatusFieldNumber = 1;
  ::apollo::perception::VehicleStatus* mutable_vehicle_status(int index);
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::VehicleStatus >*
      mutable_vehicle_status();
  const ::apollo::perception::VehicleStatus& vehicle_status(int index) const;
  ::apollo::perception::VehicleStatus* add_vehicle_status();
  const ::google::protobuf::RepeatedPtrField< ::apollo::perception::VehicleStatus >&
      vehicle_status() const;

  // optional .apollo.common.Header header = 2;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 2;
  private:
  const ::apollo::common::Header& _internal_header() const;
  public:
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);

  // @@protoc_insertion_point(class_scope:apollo.perception.Motion_Service)
 private:
  void set_has_header();
  void clear_has_header();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::perception::VehicleStatus > vehicle_status_;
  ::apollo::common::Header* header_;
  friend struct ::protobuf_modules_2fperception_2fproto_2fmotion_5fservice_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MotionType

// optional float m00 = 1;
inline bool MotionType::has_m00() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MotionType::set_has_m00() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MotionType::clear_has_m00() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MotionType::clear_m00() {
  m00_ = 0;
  clear_has_m00();
}
inline float MotionType::m00() const {
  // @@protoc_insertion_point(field_get:apollo.perception.MotionType.m00)
  return m00_;
}
inline void MotionType::set_m00(float value) {
  set_has_m00();
  m00_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.MotionType.m00)
}

// optional float m01 = 2;
inline bool MotionType::has_m01() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MotionType::set_has_m01() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MotionType::clear_has_m01() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MotionType::clear_m01() {
  m01_ = 0;
  clear_has_m01();
}
inline float MotionType::m01() const {
  // @@protoc_insertion_point(field_get:apollo.perception.MotionType.m01)
  return m01_;
}
inline void MotionType::set_m01(float value) {
  set_has_m01();
  m01_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.MotionType.m01)
}

// optional float m02 = 3;
inline bool MotionType::has_m02() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MotionType::set_has_m02() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MotionType::clear_has_m02() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MotionType::clear_m02() {
  m02_ = 0;
  clear_has_m02();
}
inline float MotionType::m02() const {
  // @@protoc_insertion_point(field_get:apollo.perception.MotionType.m02)
  return m02_;
}
inline void MotionType::set_m02(float value) {
  set_has_m02();
  m02_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.MotionType.m02)
}

// optional float m03 = 4;
inline bool MotionType::has_m03() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MotionType::set_has_m03() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MotionType::clear_has_m03() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MotionType::clear_m03() {
  m03_ = 0;
  clear_has_m03();
}
inline float MotionType::m03() const {
  // @@protoc_insertion_point(field_get:apollo.perception.MotionType.m03)
  return m03_;
}
inline void MotionType::set_m03(float value) {
  set_has_m03();
  m03_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.MotionType.m03)
}

// optional float m10 = 5;
inline bool MotionType::has_m10() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MotionType::set_has_m10() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MotionType::clear_has_m10() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MotionType::clear_m10() {
  m10_ = 0;
  clear_has_m10();
}
inline float MotionType::m10() const {
  // @@protoc_insertion_point(field_get:apollo.perception.MotionType.m10)
  return m10_;
}
inline void MotionType::set_m10(float value) {
  set_has_m10();
  m10_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.MotionType.m10)
}

// optional float m11 = 6;
inline bool MotionType::has_m11() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MotionType::set_has_m11() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MotionType::clear_has_m11() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MotionType::clear_m11() {
  m11_ = 0;
  clear_has_m11();
}
inline float MotionType::m11() const {
  // @@protoc_insertion_point(field_get:apollo.perception.MotionType.m11)
  return m11_;
}
inline void MotionType::set_m11(float value) {
  set_has_m11();
  m11_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.MotionType.m11)
}

// optional float m12 = 7;
inline bool MotionType::has_m12() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MotionType::set_has_m12() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MotionType::clear_has_m12() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MotionType::clear_m12() {
  m12_ = 0;
  clear_has_m12();
}
inline float MotionType::m12() const {
  // @@protoc_insertion_point(field_get:apollo.perception.MotionType.m12)
  return m12_;
}
inline void MotionType::set_m12(float value) {
  set_has_m12();
  m12_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.MotionType.m12)
}

// optional float m13 = 8;
inline bool MotionType::has_m13() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MotionType::set_has_m13() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MotionType::clear_has_m13() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MotionType::clear_m13() {
  m13_ = 0;
  clear_has_m13();
}
inline float MotionType::m13() const {
  // @@protoc_insertion_point(field_get:apollo.perception.MotionType.m13)
  return m13_;
}
inline void MotionType::set_m13(float value) {
  set_has_m13();
  m13_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.MotionType.m13)
}

// optional float m20 = 9;
inline bool MotionType::has_m20() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MotionType::set_has_m20() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MotionType::clear_has_m20() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MotionType::clear_m20() {
  m20_ = 0;
  clear_has_m20();
}
inline float MotionType::m20() const {
  // @@protoc_insertion_point(field_get:apollo.perception.MotionType.m20)
  return m20_;
}
inline void MotionType::set_m20(float value) {
  set_has_m20();
  m20_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.MotionType.m20)
}

// optional float m21 = 10;
inline bool MotionType::has_m21() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MotionType::set_has_m21() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MotionType::clear_has_m21() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MotionType::clear_m21() {
  m21_ = 0;
  clear_has_m21();
}
inline float MotionType::m21() const {
  // @@protoc_insertion_point(field_get:apollo.perception.MotionType.m21)
  return m21_;
}
inline void MotionType::set_m21(float value) {
  set_has_m21();
  m21_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.MotionType.m21)
}

// optional float m22 = 11;
inline bool MotionType::has_m22() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MotionType::set_has_m22() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MotionType::clear_has_m22() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MotionType::clear_m22() {
  m22_ = 0;
  clear_has_m22();
}
inline float MotionType::m22() const {
  // @@protoc_insertion_point(field_get:apollo.perception.MotionType.m22)
  return m22_;
}
inline void MotionType::set_m22(float value) {
  set_has_m22();
  m22_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.MotionType.m22)
}

// optional float m23 = 12;
inline bool MotionType::has_m23() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MotionType::set_has_m23() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MotionType::clear_has_m23() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MotionType::clear_m23() {
  m23_ = 0;
  clear_has_m23();
}
inline float MotionType::m23() const {
  // @@protoc_insertion_point(field_get:apollo.perception.MotionType.m23)
  return m23_;
}
inline void MotionType::set_m23(float value) {
  set_has_m23();
  m23_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.MotionType.m23)
}

// optional float m30 = 13;
inline bool MotionType::has_m30() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MotionType::set_has_m30() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MotionType::clear_has_m30() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MotionType::clear_m30() {
  m30_ = 0;
  clear_has_m30();
}
inline float MotionType::m30() const {
  // @@protoc_insertion_point(field_get:apollo.perception.MotionType.m30)
  return m30_;
}
inline void MotionType::set_m30(float value) {
  set_has_m30();
  m30_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.MotionType.m30)
}

// optional float m31 = 14;
inline bool MotionType::has_m31() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MotionType::set_has_m31() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MotionType::clear_has_m31() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MotionType::clear_m31() {
  m31_ = 0;
  clear_has_m31();
}
inline float MotionType::m31() const {
  // @@protoc_insertion_point(field_get:apollo.perception.MotionType.m31)
  return m31_;
}
inline void MotionType::set_m31(float value) {
  set_has_m31();
  m31_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.MotionType.m31)
}

// optional float m32 = 15;
inline bool MotionType::has_m32() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MotionType::set_has_m32() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MotionType::clear_has_m32() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MotionType::clear_m32() {
  m32_ = 0;
  clear_has_m32();
}
inline float MotionType::m32() const {
  // @@protoc_insertion_point(field_get:apollo.perception.MotionType.m32)
  return m32_;
}
inline void MotionType::set_m32(float value) {
  set_has_m32();
  m32_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.MotionType.m32)
}

// optional float m33 = 16;
inline bool MotionType::has_m33() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MotionType::set_has_m33() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MotionType::clear_has_m33() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MotionType::clear_m33() {
  m33_ = 0;
  clear_has_m33();
}
inline float MotionType::m33() const {
  // @@protoc_insertion_point(field_get:apollo.perception.MotionType.m33)
  return m33_;
}
inline void MotionType::set_m33(float value) {
  set_has_m33();
  m33_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.MotionType.m33)
}

// -------------------------------------------------------------------

// VehicleStatus

// optional float roll_rate = 1;
inline bool VehicleStatus::has_roll_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VehicleStatus::set_has_roll_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VehicleStatus::clear_has_roll_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VehicleStatus::clear_roll_rate() {
  roll_rate_ = 0;
  clear_has_roll_rate();
}
inline float VehicleStatus::roll_rate() const {
  // @@protoc_insertion_point(field_get:apollo.perception.VehicleStatus.roll_rate)
  return roll_rate_;
}
inline void VehicleStatus::set_roll_rate(float value) {
  set_has_roll_rate();
  roll_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.VehicleStatus.roll_rate)
}

// optional float pitch_rate = 2;
inline bool VehicleStatus::has_pitch_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VehicleStatus::set_has_pitch_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VehicleStatus::clear_has_pitch_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VehicleStatus::clear_pitch_rate() {
  pitch_rate_ = 0;
  clear_has_pitch_rate();
}
inline float VehicleStatus::pitch_rate() const {
  // @@protoc_insertion_point(field_get:apollo.perception.VehicleStatus.pitch_rate)
  return pitch_rate_;
}
inline void VehicleStatus::set_pitch_rate(float value) {
  set_has_pitch_rate();
  pitch_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.VehicleStatus.pitch_rate)
}

// optional float yaw_rate = 3;
inline bool VehicleStatus::has_yaw_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VehicleStatus::set_has_yaw_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VehicleStatus::clear_has_yaw_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VehicleStatus::clear_yaw_rate() {
  yaw_rate_ = 0;
  clear_has_yaw_rate();
}
inline float VehicleStatus::yaw_rate() const {
  // @@protoc_insertion_point(field_get:apollo.perception.VehicleStatus.yaw_rate)
  return yaw_rate_;
}
inline void VehicleStatus::set_yaw_rate(float value) {
  set_has_yaw_rate();
  yaw_rate_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.VehicleStatus.yaw_rate)
}

// optional float velocity = 4;
inline bool VehicleStatus::has_velocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VehicleStatus::set_has_velocity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VehicleStatus::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VehicleStatus::clear_velocity() {
  velocity_ = 0;
  clear_has_velocity();
}
inline float VehicleStatus::velocity() const {
  // @@protoc_insertion_point(field_get:apollo.perception.VehicleStatus.velocity)
  return velocity_;
}
inline void VehicleStatus::set_velocity(float value) {
  set_has_velocity();
  velocity_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.VehicleStatus.velocity)
}

// optional float velocity_x = 5;
inline bool VehicleStatus::has_velocity_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VehicleStatus::set_has_velocity_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VehicleStatus::clear_has_velocity_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VehicleStatus::clear_velocity_x() {
  velocity_x_ = 0;
  clear_has_velocity_x();
}
inline float VehicleStatus::velocity_x() const {
  // @@protoc_insertion_point(field_get:apollo.perception.VehicleStatus.velocity_x)
  return velocity_x_;
}
inline void VehicleStatus::set_velocity_x(float value) {
  set_has_velocity_x();
  velocity_x_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.VehicleStatus.velocity_x)
}

// optional float velocity_y = 6;
inline bool VehicleStatus::has_velocity_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VehicleStatus::set_has_velocity_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VehicleStatus::clear_has_velocity_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VehicleStatus::clear_velocity_y() {
  velocity_y_ = 0;
  clear_has_velocity_y();
}
inline float VehicleStatus::velocity_y() const {
  // @@protoc_insertion_point(field_get:apollo.perception.VehicleStatus.velocity_y)
  return velocity_y_;
}
inline void VehicleStatus::set_velocity_y(float value) {
  set_has_velocity_y();
  velocity_y_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.VehicleStatus.velocity_y)
}

// optional float velocity_z = 7;
inline bool VehicleStatus::has_velocity_z() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VehicleStatus::set_has_velocity_z() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VehicleStatus::clear_has_velocity_z() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VehicleStatus::clear_velocity_z() {
  velocity_z_ = 0;
  clear_has_velocity_z();
}
inline float VehicleStatus::velocity_z() const {
  // @@protoc_insertion_point(field_get:apollo.perception.VehicleStatus.velocity_z)
  return velocity_z_;
}
inline void VehicleStatus::set_velocity_z(float value) {
  set_has_velocity_z();
  velocity_z_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.VehicleStatus.velocity_z)
}

// optional double time_ts = 8;
inline bool VehicleStatus::has_time_ts() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VehicleStatus::set_has_time_ts() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VehicleStatus::clear_has_time_ts() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VehicleStatus::clear_time_ts() {
  time_ts_ = 0;
  clear_has_time_ts();
}
inline double VehicleStatus::time_ts() const {
  // @@protoc_insertion_point(field_get:apollo.perception.VehicleStatus.time_ts)
  return time_ts_;
}
inline void VehicleStatus::set_time_ts(double value) {
  set_has_time_ts();
  time_ts_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.VehicleStatus.time_ts)
}

// optional double time_d = 9;
inline bool VehicleStatus::has_time_d() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VehicleStatus::set_has_time_d() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VehicleStatus::clear_has_time_d() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VehicleStatus::clear_time_d() {
  time_d_ = 0;
  clear_has_time_d();
}
inline double VehicleStatus::time_d() const {
  // @@protoc_insertion_point(field_get:apollo.perception.VehicleStatus.time_d)
  return time_d_;
}
inline void VehicleStatus::set_time_d(double value) {
  set_has_time_d();
  time_d_ = value;
  // @@protoc_insertion_point(field_set:apollo.perception.VehicleStatus.time_d)
}

// optional .apollo.perception.MotionType motion = 10;
inline bool VehicleStatus::has_motion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VehicleStatus::set_has_motion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VehicleStatus::clear_has_motion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VehicleStatus::clear_motion() {
  if (motion_ != NULL) motion_->Clear();
  clear_has_motion();
}
inline const ::apollo::perception::MotionType& VehicleStatus::_internal_motion() const {
  return *motion_;
}
inline const ::apollo::perception::MotionType& VehicleStatus::motion() const {
  const ::apollo::perception::MotionType* p = motion_;
  // @@protoc_insertion_point(field_get:apollo.perception.VehicleStatus.motion)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::perception::MotionType*>(
      &::apollo::perception::_MotionType_default_instance_);
}
inline ::apollo::perception::MotionType* VehicleStatus::release_motion() {
  // @@protoc_insertion_point(field_release:apollo.perception.VehicleStatus.motion)
  clear_has_motion();
  ::apollo::perception::MotionType* temp = motion_;
  motion_ = NULL;
  return temp;
}
inline ::apollo::perception::MotionType* VehicleStatus::mutable_motion() {
  set_has_motion();
  if (motion_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::perception::MotionType>(GetArenaNoVirtual());
    motion_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.VehicleStatus.motion)
  return motion_;
}
inline void VehicleStatus::set_allocated_motion(::apollo::perception::MotionType* motion) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete motion_;
  }
  if (motion) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      motion = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, motion, submessage_arena);
    }
    set_has_motion();
  } else {
    clear_has_motion();
  }
  motion_ = motion;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.VehicleStatus.motion)
}

// -------------------------------------------------------------------

// Motion_Service

// repeated .apollo.perception.VehicleStatus vehicle_status = 1;
inline int Motion_Service::vehicle_status_size() const {
  return vehicle_status_.size();
}
inline void Motion_Service::clear_vehicle_status() {
  vehicle_status_.Clear();
}
inline ::apollo::perception::VehicleStatus* Motion_Service::mutable_vehicle_status(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.Motion_Service.vehicle_status)
  return vehicle_status_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::perception::VehicleStatus >*
Motion_Service::mutable_vehicle_status() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.Motion_Service.vehicle_status)
  return &vehicle_status_;
}
inline const ::apollo::perception::VehicleStatus& Motion_Service::vehicle_status(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.Motion_Service.vehicle_status)
  return vehicle_status_.Get(index);
}
inline ::apollo::perception::VehicleStatus* Motion_Service::add_vehicle_status() {
  // @@protoc_insertion_point(field_add:apollo.perception.Motion_Service.vehicle_status)
  return vehicle_status_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::perception::VehicleStatus >&
Motion_Service::vehicle_status() const {
  // @@protoc_insertion_point(field_list:apollo.perception.Motion_Service.vehicle_status)
  return vehicle_status_;
}

// optional .apollo.common.Header header = 2;
inline bool Motion_Service::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Motion_Service::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Motion_Service::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::common::Header& Motion_Service::_internal_header() const {
  return *header_;
}
inline const ::apollo::common::Header& Motion_Service::header() const {
  const ::apollo::common::Header* p = header_;
  // @@protoc_insertion_point(field_get:apollo.perception.Motion_Service.header)
  return p != NULL ? *p : *reinterpret_cast<const ::apollo::common::Header*>(
      &::apollo::common::_Header_default_instance_);
}
inline ::apollo::common::Header* Motion_Service::release_header() {
  // @@protoc_insertion_point(field_release:apollo.perception.Motion_Service.header)
  clear_has_header();
  ::apollo::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::apollo::common::Header* Motion_Service::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:apollo.perception.Motion_Service.header)
  return header_;
}
inline void Motion_Service::set_allocated_header(::apollo::common::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.Motion_Service.header)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fmotion_5fservice_2eproto
