// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/traffic_light_detection.proto

#include "modules/perception/proto/traffic_light_detection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fcommon_2fproto_2fheader_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_modules_2fcommon_2fproto_2fheader_2eproto
namespace protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TrafficLight;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TrafficLightBox;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TrafficLightDebug;
}  // namespace protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto
namespace apollo {
namespace perception {
class TrafficLightBoxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightBox>
      _instance;
} _TrafficLightBox_default_instance_;
class TrafficLightDebugDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightDebug>
      _instance;
} _TrafficLightDebug_default_instance_;
class TrafficLightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficLight>
      _instance;
} _TrafficLight_default_instance_;
class TrafficLightDetectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrafficLightDetection>
      _instance;
} _TrafficLightDetection_default_instance_;
}  // namespace perception
}  // namespace apollo
namespace protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto {
static void InitDefaultsTrafficLightBox() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_TrafficLightBox_default_instance_;
    new (ptr) ::apollo::perception::TrafficLightBox();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::TrafficLightBox::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficLightBox =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficLightBox}, {}};

static void InitDefaultsTrafficLightDebug() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_TrafficLightDebug_default_instance_;
    new (ptr) ::apollo::perception::TrafficLightDebug();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::TrafficLightDebug::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TrafficLightDebug =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTrafficLightDebug}, {
      &protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::scc_info_TrafficLightBox.base,}};

static void InitDefaultsTrafficLight() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_TrafficLight_default_instance_;
    new (ptr) ::apollo::perception::TrafficLight();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::TrafficLight::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrafficLight =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrafficLight}, {}};

static void InitDefaultsTrafficLightDetection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::_TrafficLightDetection_default_instance_;
    new (ptr) ::apollo::perception::TrafficLightDetection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::TrafficLightDetection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TrafficLightDetection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTrafficLightDetection}, {
      &protobuf_modules_2fcommon_2fproto_2fheader_2eproto::scc_info_Header.base,
      &protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::scc_info_TrafficLight.base,
      &protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::scc_info_TrafficLightDebug.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficLightBox.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficLightDebug.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficLight.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrafficLightDetection.base);
}

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightBox, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightBox, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightBox, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightBox, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightBox, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightBox, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightBox, selected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightBox, camera_name_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, cropbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, box_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, signal_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, valid_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, ts_diff_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, ts_diff_sys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, project_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, distance_to_stop_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, camera_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, crop_roi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, projected_roi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, rectified_roi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDebug, debug_roi_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  6,
  5,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLight, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLight, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLight, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLight, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLight, tracking_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLight, blink_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLight, remaining_time_),
  1,
  0,
  5,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, traffic_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, traffic_light_debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, contain_lights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::TrafficLightDetection, camera_id_),
  0,
  ~0u,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::apollo::perception::TrafficLightBox)},
  { 19, 37, sizeof(::apollo::perception::TrafficLightDebug)},
  { 50, 61, sizeof(::apollo::perception::TrafficLight)},
  { 67, 77, sizeof(::apollo::perception::TrafficLightDetection)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::perception::_TrafficLightBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::perception::_TrafficLightDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::perception::_TrafficLight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::perception::_TrafficLightDetection_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/perception/proto/traffic_light_detection.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n6modules/perception/proto/traffic_light"
      "_detection.proto\022\021apollo.perception\032!mod"
      "ules/common/proto/header.proto\"\243\001\n\017Traff"
      "icLightBox\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\r\n\005widt"
      "h\030\003 \001(\005\022\016\n\006height\030\004 \001(\005\0224\n\005color\030\005 \001(\0162%"
      ".apollo.perception.TrafficLight.Color\022\020\n"
      "\010selected\030\006 \001(\010\022\023\n\013camera_name\030\007 \001(\t\"\372\003\n"
      "\021TrafficLightDebug\0223\n\007cropbox\030\001 \001(\0132\".ap"
      "ollo.perception.TrafficLightBox\022/\n\003box\030\002"
      " \003(\0132\".apollo.perception.TrafficLightBox"
      "\022\022\n\nsignal_num\030\003 \001(\005\022\021\n\tvalid_pos\030\004 \001(\005\022"
      "\023\n\013ts_diff_pos\030\005 \001(\001\022\023\n\013ts_diff_sys\030\006 \001("
      "\001\022\025\n\rproject_error\030\007 \001(\005\022\035\n\025distance_to_"
      "stop_line\030\010 \001(\001\022\025\n\tcamera_id\030\t \001(\005B\002\030\001\0224"
      "\n\010crop_roi\030\n \003(\0132\".apollo.perception.Tra"
      "fficLightBox\0229\n\rprojected_roi\030\013 \003(\0132\".ap"
      "ollo.perception.TrafficLightBox\0229\n\rrecti"
      "fied_roi\030\014 \003(\0132\".apollo.perception.Traff"
      "icLightBox\0225\n\tdebug_roi\030\r \003(\0132\".apollo.p"
      "erception.TrafficLightBox\"\346\001\n\014TrafficLig"
      "ht\0224\n\005color\030\001 \001(\0162%.apollo.perception.Tr"
      "afficLight.Color\022\n\n\002id\030\002 \001(\t\022\025\n\nconfiden"
      "ce\030\003 \001(\001:\0011\022\025\n\rtracking_time\030\004 \001(\001\022\r\n\005bl"
      "ink\030\005 \001(\010\022\026\n\016remaining_time\030\006 \001(\001\"\?\n\005Col"
      "or\022\013\n\007UNKNOWN\020\000\022\007\n\003RED\020\001\022\n\n\006YELLOW\020\002\022\t\n\005"
      "GREEN\020\003\022\t\n\005BLACK\020\004\"\202\003\n\025TrafficLightDetec"
      "tion\022%\n\006header\030\002 \001(\0132\025.apollo.common.Hea"
      "der\0226\n\rtraffic_light\030\001 \003(\0132\037.apollo.perc"
      "eption.TrafficLight\022A\n\023traffic_light_deb"
      "ug\030\003 \001(\0132$.apollo.perception.TrafficLigh"
      "tDebug\022\026\n\016contain_lights\030\004 \001(\010\022D\n\tcamera"
      "_id\030\005 \001(\01621.apollo.perception.TrafficLig"
      "htDetection.CameraID\"i\n\010CameraID\022\025\n\021CAME"
      "RA_FRONT_LONG\020\000\022\027\n\023CAMERA_FRONT_NARROW\020\001"
      "\022\026\n\022CAMERA_FRONT_SHORT\020\002\022\025\n\021CAMERA_FRONT"
      "_WIDE\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1407);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/perception/proto/traffic_light_detection.proto", &protobuf_RegisterTypes);
  ::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto
namespace apollo {
namespace perception {
const ::google::protobuf::EnumDescriptor* TrafficLight_Color_descriptor() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::file_level_enum_descriptors[0];
}
bool TrafficLight_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLight_Color TrafficLight::UNKNOWN;
const TrafficLight_Color TrafficLight::RED;
const TrafficLight_Color TrafficLight::YELLOW;
const TrafficLight_Color TrafficLight::GREEN;
const TrafficLight_Color TrafficLight::BLACK;
const TrafficLight_Color TrafficLight::Color_MIN;
const TrafficLight_Color TrafficLight::Color_MAX;
const int TrafficLight::Color_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TrafficLightDetection_CameraID_descriptor() {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::file_level_enum_descriptors[1];
}
bool TrafficLightDetection_CameraID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TrafficLightDetection_CameraID TrafficLightDetection::CAMERA_FRONT_LONG;
const TrafficLightDetection_CameraID TrafficLightDetection::CAMERA_FRONT_NARROW;
const TrafficLightDetection_CameraID TrafficLightDetection::CAMERA_FRONT_SHORT;
const TrafficLightDetection_CameraID TrafficLightDetection::CAMERA_FRONT_WIDE;
const TrafficLightDetection_CameraID TrafficLightDetection::CameraID_MIN;
const TrafficLightDetection_CameraID TrafficLightDetection::CameraID_MAX;
const int TrafficLightDetection::CameraID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void TrafficLightBox::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightBox::kXFieldNumber;
const int TrafficLightBox::kYFieldNumber;
const int TrafficLightBox::kWidthFieldNumber;
const int TrafficLightBox::kHeightFieldNumber;
const int TrafficLightBox::kColorFieldNumber;
const int TrafficLightBox::kSelectedFieldNumber;
const int TrafficLightBox::kCameraNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightBox::TrafficLightBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::scc_info_TrafficLightBox.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.TrafficLightBox)
}
TrafficLightBox::TrafficLightBox(const TrafficLightBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  camera_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_camera_name()) {
    camera_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_name_);
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&selected_) -
    reinterpret_cast<char*>(&x_)) + sizeof(selected_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.TrafficLightBox)
}

void TrafficLightBox::SharedCtor() {
  camera_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&selected_) -
      reinterpret_cast<char*>(&x_)) + sizeof(selected_));
}

TrafficLightBox::~TrafficLightBox() {
  // @@protoc_insertion_point(destructor:apollo.perception.TrafficLightBox)
  SharedDtor();
}

void TrafficLightBox::SharedDtor() {
  camera_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrafficLightBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficLightBox::descriptor() {
  ::protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightBox& TrafficLightBox::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::scc_info_TrafficLightBox.base);
  return *internal_default_instance();
}


void TrafficLightBox::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.TrafficLightBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    camera_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 126u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selected_) -
        reinterpret_cast<char*>(&x_)) + sizeof(selected_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLightBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.TrafficLightBox)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.TrafficLight.Color color = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::TrafficLight_Color_IsValid(value)) {
            set_color(static_cast< ::apollo::perception::TrafficLight_Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool selected = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_selected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string camera_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camera_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->camera_name().data(), static_cast<int>(this->camera_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.TrafficLightBox.camera_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.TrafficLightBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.TrafficLightBox)
  return false;
#undef DO_
}

void TrafficLightBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.TrafficLightBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int32 height = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // optional .apollo.perception.TrafficLight.Color color = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->color(), output);
  }

  // optional bool selected = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->selected(), output);
  }

  // optional string camera_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_name().data(), static_cast<int>(this->camera_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.TrafficLightBox.camera_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->camera_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.TrafficLightBox)
}

::google::protobuf::uint8* TrafficLightBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.TrafficLightBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional int32 height = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // optional .apollo.perception.TrafficLight.Color color = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->color(), target);
  }

  // optional bool selected = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->selected(), target);
  }

  // optional string camera_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->camera_name().data(), static_cast<int>(this->camera_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.TrafficLightBox.camera_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->camera_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.TrafficLightBox)
  return target;
}

size_t TrafficLightBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.TrafficLightBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string camera_name = 7;
    if (has_camera_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camera_name());
    }

    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional .apollo.perception.TrafficLight.Color color = 5;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // optional bool selected = 6;
    if (has_selected()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLightBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.TrafficLightBox)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.TrafficLightBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.TrafficLightBox)
    MergeFrom(*source);
  }
}

void TrafficLightBox::MergeFrom(const TrafficLightBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.TrafficLightBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_camera_name();
      camera_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.camera_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000040u) {
      selected_ = from.selected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLightBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.TrafficLightBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightBox::CopyFrom(const TrafficLightBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.TrafficLightBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightBox::IsInitialized() const {
  return true;
}

void TrafficLightBox::Swap(TrafficLightBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightBox::InternalSwap(TrafficLightBox* other) {
  using std::swap;
  camera_name_.Swap(&other->camera_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(color_, other->color_);
  swap(selected_, other->selected_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficLightBox::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficLightDebug::InitAsDefaultInstance() {
  ::apollo::perception::_TrafficLightDebug_default_instance_._instance.get_mutable()->cropbox_ = const_cast< ::apollo::perception::TrafficLightBox*>(
      ::apollo::perception::TrafficLightBox::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightDebug::kCropboxFieldNumber;
const int TrafficLightDebug::kBoxFieldNumber;
const int TrafficLightDebug::kSignalNumFieldNumber;
const int TrafficLightDebug::kValidPosFieldNumber;
const int TrafficLightDebug::kTsDiffPosFieldNumber;
const int TrafficLightDebug::kTsDiffSysFieldNumber;
const int TrafficLightDebug::kProjectErrorFieldNumber;
const int TrafficLightDebug::kDistanceToStopLineFieldNumber;
const int TrafficLightDebug::kCameraIdFieldNumber;
const int TrafficLightDebug::kCropRoiFieldNumber;
const int TrafficLightDebug::kProjectedRoiFieldNumber;
const int TrafficLightDebug::kRectifiedRoiFieldNumber;
const int TrafficLightDebug::kDebugRoiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightDebug::TrafficLightDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::scc_info_TrafficLightDebug.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.TrafficLightDebug)
}
TrafficLightDebug::TrafficLightDebug(const TrafficLightDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      box_(from.box_),
      crop_roi_(from.crop_roi_),
      projected_roi_(from.projected_roi_),
      rectified_roi_(from.rectified_roi_),
      debug_roi_(from.debug_roi_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cropbox()) {
    cropbox_ = new ::apollo::perception::TrafficLightBox(*from.cropbox_);
  } else {
    cropbox_ = NULL;
  }
  ::memcpy(&signal_num_, &from.signal_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&camera_id_) -
    reinterpret_cast<char*>(&signal_num_)) + sizeof(camera_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.TrafficLightDebug)
}

void TrafficLightDebug::SharedCtor() {
  ::memset(&cropbox_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_id_) -
      reinterpret_cast<char*>(&cropbox_)) + sizeof(camera_id_));
}

TrafficLightDebug::~TrafficLightDebug() {
  // @@protoc_insertion_point(destructor:apollo.perception.TrafficLightDebug)
  SharedDtor();
}

void TrafficLightDebug::SharedDtor() {
  if (this != internal_default_instance()) delete cropbox_;
}

void TrafficLightDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficLightDebug::descriptor() {
  ::protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightDebug& TrafficLightDebug::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::scc_info_TrafficLightDebug.base);
  return *internal_default_instance();
}


void TrafficLightDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.TrafficLightDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  box_.Clear();
  crop_roi_.Clear();
  projected_roi_.Clear();
  rectified_roi_.Clear();
  debug_roi_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(cropbox_ != NULL);
    cropbox_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&signal_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&camera_id_) -
        reinterpret_cast<char*>(&signal_num_)) + sizeof(camera_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLightDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.TrafficLightDebug)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.TrafficLightBox cropbox = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cropbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.perception.TrafficLightBox box = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 signal_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_signal_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signal_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 valid_pos = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_valid_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valid_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ts_diff_pos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_ts_diff_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ts_diff_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ts_diff_sys = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_ts_diff_sys();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ts_diff_sys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 project_error = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_project_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &project_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double distance_to_stop_line = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_distance_to_stop_line();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_to_stop_line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camera_id = 9 [deprecated = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_camera_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.perception.TrafficLightBox crop_roi = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_crop_roi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.perception.TrafficLightBox projected_roi = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_projected_roi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.perception.TrafficLightBox rectified_roi = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rectified_roi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .apollo.perception.TrafficLightBox debug_roi = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_debug_roi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.TrafficLightDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.TrafficLightDebug)
  return false;
#undef DO_
}

void TrafficLightDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.TrafficLightDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.TrafficLightBox cropbox = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_cropbox(), output);
  }

  // repeated .apollo.perception.TrafficLightBox box = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->box_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->box(static_cast<int>(i)),
      output);
  }

  // optional int32 signal_num = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->signal_num(), output);
  }

  // optional int32 valid_pos = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->valid_pos(), output);
  }

  // optional double ts_diff_pos = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ts_diff_pos(), output);
  }

  // optional double ts_diff_sys = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ts_diff_sys(), output);
  }

  // optional int32 project_error = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->project_error(), output);
  }

  // optional double distance_to_stop_line = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->distance_to_stop_line(), output);
  }

  // optional int32 camera_id = 9 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->camera_id(), output);
  }

  // repeated .apollo.perception.TrafficLightBox crop_roi = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crop_roi_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->crop_roi(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.perception.TrafficLightBox projected_roi = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->projected_roi_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->projected_roi(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.perception.TrafficLightBox rectified_roi = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rectified_roi_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->rectified_roi(static_cast<int>(i)),
      output);
  }

  // repeated .apollo.perception.TrafficLightBox debug_roi = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->debug_roi_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->debug_roi(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.TrafficLightDebug)
}

::google::protobuf::uint8* TrafficLightDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.TrafficLightDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.TrafficLightBox cropbox = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_cropbox(), deterministic, target);
  }

  // repeated .apollo.perception.TrafficLightBox box = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->box_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->box(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 signal_num = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->signal_num(), target);
  }

  // optional int32 valid_pos = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->valid_pos(), target);
  }

  // optional double ts_diff_pos = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ts_diff_pos(), target);
  }

  // optional double ts_diff_sys = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ts_diff_sys(), target);
  }

  // optional int32 project_error = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->project_error(), target);
  }

  // optional double distance_to_stop_line = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->distance_to_stop_line(), target);
  }

  // optional int32 camera_id = 9 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->camera_id(), target);
  }

  // repeated .apollo.perception.TrafficLightBox crop_roi = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crop_roi_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->crop_roi(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.perception.TrafficLightBox projected_roi = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->projected_roi_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->projected_roi(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.perception.TrafficLightBox rectified_roi = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rectified_roi_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->rectified_roi(static_cast<int>(i)), deterministic, target);
  }

  // repeated .apollo.perception.TrafficLightBox debug_roi = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->debug_roi_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->debug_roi(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.TrafficLightDebug)
  return target;
}

size_t TrafficLightDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.TrafficLightDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.perception.TrafficLightBox box = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->box_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->box(static_cast<int>(i)));
    }
  }

  // repeated .apollo.perception.TrafficLightBox crop_roi = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->crop_roi_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->crop_roi(static_cast<int>(i)));
    }
  }

  // repeated .apollo.perception.TrafficLightBox projected_roi = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->projected_roi_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->projected_roi(static_cast<int>(i)));
    }
  }

  // repeated .apollo.perception.TrafficLightBox rectified_roi = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->rectified_roi_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rectified_roi(static_cast<int>(i)));
    }
  }

  // repeated .apollo.perception.TrafficLightBox debug_roi = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->debug_roi_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->debug_roi(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .apollo.perception.TrafficLightBox cropbox = 1;
    if (has_cropbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cropbox_);
    }

    // optional int32 signal_num = 3;
    if (has_signal_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signal_num());
    }

    // optional int32 valid_pos = 4;
    if (has_valid_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valid_pos());
    }

    // optional double ts_diff_pos = 5;
    if (has_ts_diff_pos()) {
      total_size += 1 + 8;
    }

    // optional double ts_diff_sys = 6;
    if (has_ts_diff_sys()) {
      total_size += 1 + 8;
    }

    // optional double distance_to_stop_line = 8;
    if (has_distance_to_stop_line()) {
      total_size += 1 + 8;
    }

    // optional int32 project_error = 7;
    if (has_project_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->project_error());
    }

    // optional int32 camera_id = 9 [deprecated = true];
    if (has_camera_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camera_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLightDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.TrafficLightDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.TrafficLightDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.TrafficLightDebug)
    MergeFrom(*source);
  }
}

void TrafficLightDebug::MergeFrom(const TrafficLightDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.TrafficLightDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  box_.MergeFrom(from.box_);
  crop_roi_.MergeFrom(from.crop_roi_);
  projected_roi_.MergeFrom(from.projected_roi_);
  rectified_roi_.MergeFrom(from.rectified_roi_);
  debug_roi_.MergeFrom(from.debug_roi_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cropbox()->::apollo::perception::TrafficLightBox::MergeFrom(from.cropbox());
    }
    if (cached_has_bits & 0x00000002u) {
      signal_num_ = from.signal_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      valid_pos_ = from.valid_pos_;
    }
    if (cached_has_bits & 0x00000008u) {
      ts_diff_pos_ = from.ts_diff_pos_;
    }
    if (cached_has_bits & 0x00000010u) {
      ts_diff_sys_ = from.ts_diff_sys_;
    }
    if (cached_has_bits & 0x00000020u) {
      distance_to_stop_line_ = from.distance_to_stop_line_;
    }
    if (cached_has_bits & 0x00000040u) {
      project_error_ = from.project_error_;
    }
    if (cached_has_bits & 0x00000080u) {
      camera_id_ = from.camera_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLightDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.TrafficLightDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightDebug::CopyFrom(const TrafficLightDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.TrafficLightDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightDebug::IsInitialized() const {
  return true;
}

void TrafficLightDebug::Swap(TrafficLightDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightDebug::InternalSwap(TrafficLightDebug* other) {
  using std::swap;
  CastToBase(&box_)->InternalSwap(CastToBase(&other->box_));
  CastToBase(&crop_roi_)->InternalSwap(CastToBase(&other->crop_roi_));
  CastToBase(&projected_roi_)->InternalSwap(CastToBase(&other->projected_roi_));
  CastToBase(&rectified_roi_)->InternalSwap(CastToBase(&other->rectified_roi_));
  CastToBase(&debug_roi_)->InternalSwap(CastToBase(&other->debug_roi_));
  swap(cropbox_, other->cropbox_);
  swap(signal_num_, other->signal_num_);
  swap(valid_pos_, other->valid_pos_);
  swap(ts_diff_pos_, other->ts_diff_pos_);
  swap(ts_diff_sys_, other->ts_diff_sys_);
  swap(distance_to_stop_line_, other->distance_to_stop_line_);
  swap(project_error_, other->project_error_);
  swap(camera_id_, other->camera_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficLightDebug::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficLight::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLight::kColorFieldNumber;
const int TrafficLight::kIdFieldNumber;
const int TrafficLight::kConfidenceFieldNumber;
const int TrafficLight::kTrackingTimeFieldNumber;
const int TrafficLight::kBlinkFieldNumber;
const int TrafficLight::kRemainingTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLight::TrafficLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::scc_info_TrafficLight.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&color_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.TrafficLight)
}

void TrafficLight::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_time_) -
      reinterpret_cast<char*>(&color_)) + sizeof(remaining_time_));
  confidence_ = 1;
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:apollo.perception.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficLight::descriptor() {
  ::protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLight& TrafficLight::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::scc_info_TrafficLight.base);
  return *internal_default_instance();
}


void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&remaining_time_) -
        reinterpret_cast<char*>(&color_)) + sizeof(remaining_time_));
    confidence_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.TrafficLight)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .apollo.perception.TrafficLight.Color color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::TrafficLight_Color_IsValid(value)) {
            set_color(static_cast< ::apollo::perception::TrafficLight_Color >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "apollo.perception.TrafficLight.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double confidence = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tracking_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_tracking_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool blink = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_blink();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blink_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double remaining_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_remaining_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &remaining_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.TrafficLight)
  return false;
#undef DO_
}

void TrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.TrafficLight.Color color = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->color(), output);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.TrafficLight.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional double confidence = 3 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->confidence(), output);
  }

  // optional double tracking_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->tracking_time(), output);
  }

  // optional bool blink = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->blink(), output);
  }

  // optional double remaining_time = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->remaining_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.TrafficLight)
}

::google::protobuf::uint8* TrafficLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.TrafficLight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.TrafficLight.Color color = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->color(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "apollo.perception.TrafficLight.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // optional double confidence = 3 [default = 1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->confidence(), target);
  }

  // optional double tracking_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->tracking_time(), target);
  }

  // optional bool blink = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->blink(), target);
  }

  // optional double remaining_time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->remaining_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.TrafficLight)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional .apollo.perception.TrafficLight.Color color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // optional bool blink = 5;
    if (has_blink()) {
      total_size += 1 + 1;
    }

    // optional double tracking_time = 4;
    if (has_tracking_time()) {
      total_size += 1 + 8;
    }

    // optional double remaining_time = 6;
    if (has_remaining_time()) {
      total_size += 1 + 8;
    }

    // optional double confidence = 3 [default = 1];
    if (has_confidence()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.TrafficLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      blink_ = from.blink_;
    }
    if (cached_has_bits & 0x00000008u) {
      tracking_time_ = from.tracking_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      remaining_time_ = from.remaining_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::Swap(TrafficLight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLight::InternalSwap(TrafficLight* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(color_, other->color_);
  swap(blink_, other->blink_);
  swap(tracking_time_, other->tracking_time_);
  swap(remaining_time_, other->remaining_time_);
  swap(confidence_, other->confidence_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficLight::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TrafficLightDetection::InitAsDefaultInstance() {
  ::apollo::perception::_TrafficLightDetection_default_instance_._instance.get_mutable()->header_ = const_cast< ::apollo::common::Header*>(
      ::apollo::common::Header::internal_default_instance());
  ::apollo::perception::_TrafficLightDetection_default_instance_._instance.get_mutable()->traffic_light_debug_ = const_cast< ::apollo::perception::TrafficLightDebug*>(
      ::apollo::perception::TrafficLightDebug::internal_default_instance());
}
void TrafficLightDetection::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLightDetection::kHeaderFieldNumber;
const int TrafficLightDetection::kTrafficLightFieldNumber;
const int TrafficLightDetection::kTrafficLightDebugFieldNumber;
const int TrafficLightDetection::kContainLightsFieldNumber;
const int TrafficLightDetection::kCameraIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLightDetection::TrafficLightDetection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::scc_info_TrafficLightDetection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.TrafficLightDetection)
}
TrafficLightDetection::TrafficLightDetection(const TrafficLightDetection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      traffic_light_(from.traffic_light_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_traffic_light_debug()) {
    traffic_light_debug_ = new ::apollo::perception::TrafficLightDebug(*from.traffic_light_debug_);
  } else {
    traffic_light_debug_ = NULL;
  }
  ::memcpy(&contain_lights_, &from.contain_lights_,
    static_cast<size_t>(reinterpret_cast<char*>(&camera_id_) -
    reinterpret_cast<char*>(&contain_lights_)) + sizeof(camera_id_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.TrafficLightDetection)
}

void TrafficLightDetection::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(camera_id_));
}

TrafficLightDetection::~TrafficLightDetection() {
  // @@protoc_insertion_point(destructor:apollo.perception.TrafficLightDetection)
  SharedDtor();
}

void TrafficLightDetection::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete traffic_light_debug_;
}

void TrafficLightDetection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TrafficLightDetection::descriptor() {
  ::protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrafficLightDetection& TrafficLightDetection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::scc_info_TrafficLightDetection.base);
  return *internal_default_instance();
}


void TrafficLightDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.TrafficLightDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traffic_light_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(traffic_light_debug_ != NULL);
      traffic_light_debug_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&contain_lights_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&camera_id_) -
        reinterpret_cast<char*>(&contain_lights_)) + sizeof(camera_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TrafficLightDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.TrafficLightDetection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .apollo.perception.TrafficLight traffic_light = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_traffic_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.common.Header header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.TrafficLightDebug traffic_light_debug = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_traffic_light_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool contain_lights = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_contain_lights();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &contain_lights_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .apollo.perception.TrafficLightDetection.CameraID camera_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::apollo::perception::TrafficLightDetection_CameraID_IsValid(value)) {
            set_camera_id(static_cast< ::apollo::perception::TrafficLightDetection_CameraID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.TrafficLightDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.TrafficLightDetection)
  return false;
#undef DO_
}

void TrafficLightDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.TrafficLightDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.TrafficLight traffic_light = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_light_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->traffic_light(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_header(), output);
  }

  // optional .apollo.perception.TrafficLightDebug traffic_light_debug = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_traffic_light_debug(), output);
  }

  // optional bool contain_lights = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->contain_lights(), output);
  }

  // optional .apollo.perception.TrafficLightDetection.CameraID camera_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->camera_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.TrafficLightDetection)
}

::google::protobuf::uint8* TrafficLightDetection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.TrafficLightDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.TrafficLight traffic_light = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_light_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->traffic_light(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_header(), deterministic, target);
  }

  // optional .apollo.perception.TrafficLightDebug traffic_light_debug = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_traffic_light_debug(), deterministic, target);
  }

  // optional bool contain_lights = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->contain_lights(), target);
  }

  // optional .apollo.perception.TrafficLightDetection.CameraID camera_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->camera_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.TrafficLightDetection)
  return target;
}

size_t TrafficLightDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.TrafficLightDetection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .apollo.perception.TrafficLight traffic_light = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_light_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->traffic_light(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .apollo.common.Header header = 2;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.perception.TrafficLightDebug traffic_light_debug = 3;
    if (has_traffic_light_debug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *traffic_light_debug_);
    }

    // optional bool contain_lights = 4;
    if (has_contain_lights()) {
      total_size += 1 + 1;
    }

    // optional .apollo.perception.TrafficLightDetection.CameraID camera_id = 5;
    if (has_camera_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->camera_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLightDetection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.TrafficLightDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLightDetection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLightDetection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.TrafficLightDetection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.TrafficLightDetection)
    MergeFrom(*source);
  }
}

void TrafficLightDetection::MergeFrom(const TrafficLightDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.TrafficLightDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traffic_light_.MergeFrom(from.traffic_light_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::apollo::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_traffic_light_debug()->::apollo::perception::TrafficLightDebug::MergeFrom(from.traffic_light_debug());
    }
    if (cached_has_bits & 0x00000004u) {
      contain_lights_ = from.contain_lights_;
    }
    if (cached_has_bits & 0x00000008u) {
      camera_id_ = from.camera_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrafficLightDetection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.TrafficLightDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLightDetection::CopyFrom(const TrafficLightDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.TrafficLightDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLightDetection::IsInitialized() const {
  return true;
}

void TrafficLightDetection::Swap(TrafficLightDetection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLightDetection::InternalSwap(TrafficLightDetection* other) {
  using std::swap;
  CastToBase(&traffic_light_)->InternalSwap(CastToBase(&other->traffic_light_));
  swap(header_, other->header_);
  swap(traffic_light_debug_, other->traffic_light_debug_);
  swap(contain_lights_, other->contain_lights_);
  swap(camera_id_, other->camera_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TrafficLightDetection::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fperception_2fproto_2ftraffic_5flight_5fdetection_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace perception
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::perception::TrafficLightBox* Arena::CreateMaybeMessage< ::apollo::perception::TrafficLightBox >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::TrafficLightBox >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::perception::TrafficLightDebug* Arena::CreateMaybeMessage< ::apollo::perception::TrafficLightDebug >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::TrafficLightDebug >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::perception::TrafficLight* Arena::CreateMaybeMessage< ::apollo::perception::TrafficLight >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::TrafficLight >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::perception::TrafficLightDetection* Arena::CreateMaybeMessage< ::apollo::perception::TrafficLightDetection >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::TrafficLightDetection >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
