// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/map_manager_config.proto

#include "modules/perception/proto/map_manager_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace apollo {
namespace perception {
namespace lidar {
class MapManagerConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapManagerConfig>
      _instance;
} _MapManagerConfig_default_instance_;
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
namespace protobuf_modules_2fperception_2fproto_2fmap_5fmanager_5fconfig_2eproto {
static void InitDefaultsMapManagerConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::perception::lidar::_MapManagerConfig_default_instance_;
    new (ptr) ::apollo::perception::lidar::MapManagerConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::perception::lidar::MapManagerConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MapManagerConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMapManagerConfig}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MapManagerConfig.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MapManagerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MapManagerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MapManagerConfig, update_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MapManagerConfig, roi_search_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MapManagerConfig, lane_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::apollo::perception::lidar::MapManagerConfig, max_depth_),
  2,
  3,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::apollo::perception::lidar::MapManagerConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::apollo::perception::lidar::_MapManagerConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "modules/perception/proto/map_manager_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n1modules/perception/proto/map_manager_c"
      "onfig.proto\022\027apollo.perception.lidar\"v\n\020"
      "MapManagerConfig\022\032\n\013update_pose\030\001 \001(\010:\005f"
      "alse\022\037\n\023roi_search_distance\030\002 \001(\001:\00280\022\022\n"
      "\nlane_range\030\003 \001(\001\022\021\n\tmax_depth\030\004 \001(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 196);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/perception/proto/map_manager_config.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_modules_2fperception_2fproto_2fmap_5fmanager_5fconfig_2eproto
namespace apollo {
namespace perception {
namespace lidar {

// ===================================================================

void MapManagerConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapManagerConfig::kUpdatePoseFieldNumber;
const int MapManagerConfig::kRoiSearchDistanceFieldNumber;
const int MapManagerConfig::kLaneRangeFieldNumber;
const int MapManagerConfig::kMaxDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapManagerConfig::MapManagerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_modules_2fperception_2fproto_2fmap_5fmanager_5fconfig_2eproto::scc_info_MapManagerConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.perception.lidar.MapManagerConfig)
}
MapManagerConfig::MapManagerConfig(const MapManagerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lane_range_, &from.lane_range_,
    static_cast<size_t>(reinterpret_cast<char*>(&roi_search_distance_) -
    reinterpret_cast<char*>(&lane_range_)) + sizeof(roi_search_distance_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.lidar.MapManagerConfig)
}

void MapManagerConfig::SharedCtor() {
  ::memset(&lane_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_pose_) -
      reinterpret_cast<char*>(&lane_range_)) + sizeof(update_pose_));
  roi_search_distance_ = 80;
}

MapManagerConfig::~MapManagerConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.lidar.MapManagerConfig)
  SharedDtor();
}

void MapManagerConfig::SharedDtor() {
}

void MapManagerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapManagerConfig::descriptor() {
  ::protobuf_modules_2fperception_2fproto_2fmap_5fmanager_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fperception_2fproto_2fmap_5fmanager_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapManagerConfig& MapManagerConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_modules_2fperception_2fproto_2fmap_5fmanager_5fconfig_2eproto::scc_info_MapManagerConfig.base);
  return *internal_default_instance();
}


void MapManagerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.lidar.MapManagerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&lane_range_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&update_pose_) -
        reinterpret_cast<char*>(&lane_range_)) + sizeof(update_pose_));
    roi_search_distance_ = 80;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapManagerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:apollo.perception.lidar.MapManagerConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool update_pose = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_update_pose();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_pose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double roi_search_distance = 2 [default = 80];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_roi_search_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roi_search_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lane_range = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_lane_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_depth = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_max_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:apollo.perception.lidar.MapManagerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:apollo.perception.lidar.MapManagerConfig)
  return false;
#undef DO_
}

void MapManagerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:apollo.perception.lidar.MapManagerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool update_pose = 1 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->update_pose(), output);
  }

  // optional double roi_search_distance = 2 [default = 80];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->roi_search_distance(), output);
  }

  // optional double lane_range = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lane_range(), output);
  }

  // optional double max_depth = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_depth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:apollo.perception.lidar.MapManagerConfig)
}

::google::protobuf::uint8* MapManagerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.lidar.MapManagerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool update_pose = 1 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->update_pose(), target);
  }

  // optional double roi_search_distance = 2 [default = 80];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->roi_search_distance(), target);
  }

  // optional double lane_range = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lane_range(), target);
  }

  // optional double max_depth = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_depth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.lidar.MapManagerConfig)
  return target;
}

size_t MapManagerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.lidar.MapManagerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double lane_range = 3;
    if (has_lane_range()) {
      total_size += 1 + 8;
    }

    // optional double max_depth = 4;
    if (has_max_depth()) {
      total_size += 1 + 8;
    }

    // optional bool update_pose = 1 [default = false];
    if (has_update_pose()) {
      total_size += 1 + 1;
    }

    // optional double roi_search_distance = 2 [default = 80];
    if (has_roi_search_distance()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapManagerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.lidar.MapManagerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MapManagerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapManagerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.lidar.MapManagerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.lidar.MapManagerConfig)
    MergeFrom(*source);
  }
}

void MapManagerConfig::MergeFrom(const MapManagerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.lidar.MapManagerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      lane_range_ = from.lane_range_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_depth_ = from.max_depth_;
    }
    if (cached_has_bits & 0x00000004u) {
      update_pose_ = from.update_pose_;
    }
    if (cached_has_bits & 0x00000008u) {
      roi_search_distance_ = from.roi_search_distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MapManagerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.lidar.MapManagerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapManagerConfig::CopyFrom(const MapManagerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.lidar.MapManagerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapManagerConfig::IsInitialized() const {
  return true;
}

void MapManagerConfig::Swap(MapManagerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapManagerConfig::InternalSwap(MapManagerConfig* other) {
  using std::swap;
  swap(lane_range_, other->lane_range_);
  swap(max_depth_, other->max_depth_);
  swap(update_pose_, other->update_pose_);
  swap(roi_search_distance_, other->roi_search_distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapManagerConfig::GetMetadata() const {
  protobuf_modules_2fperception_2fproto_2fmap_5fmanager_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_modules_2fperception_2fproto_2fmap_5fmanager_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lidar
}  // namespace perception
}  // namespace apollo
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::apollo::perception::lidar::MapManagerConfig* Arena::CreateMaybeMessage< ::apollo::perception::lidar::MapManagerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::perception::lidar::MapManagerConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
